
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017050  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080172f0  080172f0  000272f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017724  08017724  00027724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801772c  0801772c  0002772c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017730  08017730  00027730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017734  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005950  24000120  0801783c  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a70  0801783c  00035a70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033aaf  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005705  00000000  00000000  00063be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002770  00000000  00000000  000692f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002558  00000000  00000000  0006ba60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032379  00000000  00000000  000ae0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194c02  00000000  00000000  000e0437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00275039  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0a4  00000000  00000000  0027508c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080172d8 	.word	0x080172d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	080172d8 	.word	0x080172d8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c40 	.word	0x24000c40

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fd6a 	bl	80130f0 <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fd5f 	bl	80130f0 <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fd54 	bl	80130f0 <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fd49 	bl	80130f0 <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 fa89 	bl	8016b78 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c5c 	.word	0x24000c5c
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	0801735c 	.word	0x0801735c

08000688 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fda1 	bl	80101dc <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 843f 	bhi.w	8000f26 <HAL_UART_RxCpltCallback+0x89e>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a8b 	.word	0x08000a8b
 80006b8:	08000b4d 	.word	0x08000b4d
 80006bc:	08000b83 	.word	0x08000b83
 80006c0:	08000bb7 	.word	0x08000bb7
 80006c4:	08000bed 	.word	0x08000bed
 80006c8:	08000c25 	.word	0x08000c25
 80006cc:	08000c5d 	.word	0x08000c5d
 80006d0:	08000c93 	.word	0x08000c93
 80006d4:	08000cc5 	.word	0x08000cc5
 80006d8:	08000cf1 	.word	0x08000cf1
 80006dc:	08000d23 	.word	0x08000d23
 80006e0:	08000d55 	.word	0x08000d55
 80006e4:	08000e5f 	.word	0x08000e5f
 80006e8:	08000ec1 	.word	0x08000ec1
 80006ec:	08000ee9 	.word	0x08000ee9
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000b31 	.word	0x08000b31
 80006fc:	08000b69 	.word	0x08000b69
 8000700:	08000b9d 	.word	0x08000b9d
 8000704:	08000bd1 	.word	0x08000bd1
 8000708:	08000c09 	.word	0x08000c09
 800070c:	08000c41 	.word	0x08000c41
 8000710:	08000c79 	.word	0x08000c79
 8000714:	08000cad 	.word	0x08000cad
 8000718:	08000cd5 	.word	0x08000cd5
 800071c:	08000d07 	.word	0x08000d07
 8000720:	08000d39 	.word	0x08000d39
 8000724:	08000e25 	.word	0x08000e25
 8000728:	08000e99 	.word	0x08000e99
 800072c:	08000f27 	.word	0x08000f27
 8000730:	08000f27 	.word	0x08000f27
 8000734:	08000f27 	.word	0x08000f27
 8000738:	08000f27 	.word	0x08000f27
 800073c:	08000f27 	.word	0x08000f27
 8000740:	08000f27 	.word	0x08000f27
 8000744:	08000f27 	.word	0x08000f27
 8000748:	08000f27 	.word	0x08000f27
 800074c:	08000f27 	.word	0x08000f27
 8000750:	08000f27 	.word	0x08000f27
 8000754:	08000f27 	.word	0x08000f27
 8000758:	08000f27 	.word	0x08000f27
 800075c:	08000f27 	.word	0x08000f27
 8000760:	08000f27 	.word	0x08000f27
 8000764:	08000f27 	.word	0x08000f27
 8000768:	08000f27 	.word	0x08000f27
 800076c:	08000f27 	.word	0x08000f27
 8000770:	08000f27 	.word	0x08000f27
 8000774:	08000f27 	.word	0x08000f27
 8000778:	08000f27 	.word	0x08000f27
 800077c:	08000f27 	.word	0x08000f27
 8000780:	08000f27 	.word	0x08000f27
 8000784:	08000f27 	.word	0x08000f27
 8000788:	08000f27 	.word	0x08000f27
 800078c:	08000f27 	.word	0x08000f27
 8000790:	08000f27 	.word	0x08000f27
 8000794:	08000f27 	.word	0x08000f27
 8000798:	08000f27 	.word	0x08000f27
 800079c:	08000f27 	.word	0x08000f27
 80007a0:	08000f27 	.word	0x08000f27
 80007a4:	08000f27 	.word	0x08000f27
 80007a8:	08000f27 	.word	0x08000f27
 80007ac:	08000f27 	.word	0x08000f27
 80007b0:	08000f27 	.word	0x08000f27
 80007b4:	08000f27 	.word	0x08000f27
 80007b8:	08000f27 	.word	0x08000f27
 80007bc:	08000f27 	.word	0x08000f27
 80007c0:	08000f27 	.word	0x08000f27
 80007c4:	08000f27 	.word	0x08000f27
 80007c8:	08000f27 	.word	0x08000f27
 80007cc:	08000f27 	.word	0x08000f27
 80007d0:	08000f27 	.word	0x08000f27
 80007d4:	08000f27 	.word	0x08000f27
 80007d8:	08000f27 	.word	0x08000f27
 80007dc:	08000f27 	.word	0x08000f27
 80007e0:	08000f27 	.word	0x08000f27
 80007e4:	08000f27 	.word	0x08000f27
 80007e8:	08000f27 	.word	0x08000f27
 80007ec:	08000f27 	.word	0x08000f27
 80007f0:	08000f27 	.word	0x08000f27
 80007f4:	08000f27 	.word	0x08000f27
 80007f8:	08000f27 	.word	0x08000f27
 80007fc:	08000f27 	.word	0x08000f27
 8000800:	08000f27 	.word	0x08000f27
 8000804:	08000f27 	.word	0x08000f27
 8000808:	08000f27 	.word	0x08000f27
 800080c:	08000f27 	.word	0x08000f27
 8000810:	08000f27 	.word	0x08000f27
 8000814:	08000f27 	.word	0x08000f27
 8000818:	08000f27 	.word	0x08000f27
 800081c:	08000f27 	.word	0x08000f27
 8000820:	08000f27 	.word	0x08000f27
 8000824:	08000f27 	.word	0x08000f27
 8000828:	08000f27 	.word	0x08000f27
 800082c:	08000f27 	.word	0x08000f27
 8000830:	08000f27 	.word	0x08000f27
 8000834:	08000f27 	.word	0x08000f27
 8000838:	08000f27 	.word	0x08000f27
 800083c:	08000f27 	.word	0x08000f27
 8000840:	08000f27 	.word	0x08000f27
 8000844:	08000f27 	.word	0x08000f27
 8000848:	08000f27 	.word	0x08000f27
 800084c:	08000f27 	.word	0x08000f27
 8000850:	08000f27 	.word	0x08000f27
 8000854:	08000f27 	.word	0x08000f27
 8000858:	08000f27 	.word	0x08000f27
 800085c:	08000f27 	.word	0x08000f27
 8000860:	08000f27 	.word	0x08000f27
 8000864:	08000f27 	.word	0x08000f27
 8000868:	08000f27 	.word	0x08000f27
 800086c:	08000f27 	.word	0x08000f27
 8000870:	08000f27 	.word	0x08000f27
 8000874:	08000f27 	.word	0x08000f27
 8000878:	08000f27 	.word	0x08000f27
 800087c:	08000f27 	.word	0x08000f27
 8000880:	08000f27 	.word	0x08000f27
 8000884:	08000f27 	.word	0x08000f27
 8000888:	08000f27 	.word	0x08000f27
 800088c:	08000f27 	.word	0x08000f27
 8000890:	08000f27 	.word	0x08000f27
 8000894:	08000f27 	.word	0x08000f27
 8000898:	08000f27 	.word	0x08000f27
 800089c:	08000f27 	.word	0x08000f27
 80008a0:	08000f27 	.word	0x08000f27
 80008a4:	08000f27 	.word	0x08000f27
 80008a8:	08000f27 	.word	0x08000f27
 80008ac:	08000f27 	.word	0x08000f27
 80008b0:	08000f27 	.word	0x08000f27
 80008b4:	08000f27 	.word	0x08000f27
 80008b8:	08000f27 	.word	0x08000f27
 80008bc:	08000f27 	.word	0x08000f27
 80008c0:	08000f27 	.word	0x08000f27
 80008c4:	08000f27 	.word	0x08000f27
 80008c8:	08000f27 	.word	0x08000f27
 80008cc:	08000f27 	.word	0x08000f27
 80008d0:	08000f27 	.word	0x08000f27
 80008d4:	08000f27 	.word	0x08000f27
 80008d8:	08000f27 	.word	0x08000f27
 80008dc:	08000f27 	.word	0x08000f27
 80008e0:	08000f27 	.word	0x08000f27
 80008e4:	08000f27 	.word	0x08000f27
 80008e8:	08000f27 	.word	0x08000f27
 80008ec:	08000f27 	.word	0x08000f27
 80008f0:	08000f27 	.word	0x08000f27
 80008f4:	08000f27 	.word	0x08000f27
 80008f8:	08000f27 	.word	0x08000f27
 80008fc:	08000f27 	.word	0x08000f27
 8000900:	08000f27 	.word	0x08000f27
 8000904:	08000f27 	.word	0x08000f27
 8000908:	08000f27 	.word	0x08000f27
 800090c:	08000f27 	.word	0x08000f27
 8000910:	08000f27 	.word	0x08000f27
 8000914:	08000f27 	.word	0x08000f27
 8000918:	08000f27 	.word	0x08000f27
 800091c:	08000f27 	.word	0x08000f27
 8000920:	08000f27 	.word	0x08000f27
 8000924:	08000f27 	.word	0x08000f27
 8000928:	08000f27 	.word	0x08000f27
 800092c:	08000f27 	.word	0x08000f27
 8000930:	08000f27 	.word	0x08000f27
 8000934:	08000f27 	.word	0x08000f27
 8000938:	08000f27 	.word	0x08000f27
 800093c:	08000f27 	.word	0x08000f27
 8000940:	08000f27 	.word	0x08000f27
 8000944:	08000f27 	.word	0x08000f27
 8000948:	08000f27 	.word	0x08000f27
 800094c:	08000f27 	.word	0x08000f27
 8000950:	08000f27 	.word	0x08000f27
 8000954:	08000f27 	.word	0x08000f27
 8000958:	08000f27 	.word	0x08000f27
 800095c:	08000f27 	.word	0x08000f27
 8000960:	08000f27 	.word	0x08000f27
 8000964:	08000f27 	.word	0x08000f27
 8000968:	08000f27 	.word	0x08000f27
 800096c:	08000f21 	.word	0x08000f21
 8000970:	08000f27 	.word	0x08000f27
 8000974:	08000f27 	.word	0x08000f27
 8000978:	08000f27 	.word	0x08000f27
 800097c:	08000f27 	.word	0x08000f27
 8000980:	08000f27 	.word	0x08000f27
 8000984:	08000f27 	.word	0x08000f27
 8000988:	08000f27 	.word	0x08000f27
 800098c:	08000f27 	.word	0x08000f27
 8000990:	08000f27 	.word	0x08000f27
 8000994:	08000f27 	.word	0x08000f27
 8000998:	08000f27 	.word	0x08000f27
 800099c:	08000f27 	.word	0x08000f27
 80009a0:	08000f27 	.word	0x08000f27
 80009a4:	08000f27 	.word	0x08000f27
 80009a8:	08000f27 	.word	0x08000f27
 80009ac:	08000f2f 	.word	0x08000f2f
 80009b0:	08000f27 	.word	0x08000f27
 80009b4:	08000f27 	.word	0x08000f27
 80009b8:	08000f27 	.word	0x08000f27
 80009bc:	08000f27 	.word	0x08000f27
 80009c0:	08000f27 	.word	0x08000f27
 80009c4:	08000f27 	.word	0x08000f27
 80009c8:	08000f27 	.word	0x08000f27
 80009cc:	08000f27 	.word	0x08000f27
 80009d0:	08000f27 	.word	0x08000f27
 80009d4:	08000f27 	.word	0x08000f27
 80009d8:	08000f27 	.word	0x08000f27
 80009dc:	08000f27 	.word	0x08000f27
 80009e0:	08000f27 	.word	0x08000f27
 80009e4:	08000f27 	.word	0x08000f27
 80009e8:	08000f27 	.word	0x08000f27
 80009ec:	08000f27 	.word	0x08000f27
 80009f0:	08000f0f 	.word	0x08000f0f
 80009f4:	08000f27 	.word	0x08000f27
 80009f8:	08000f27 	.word	0x08000f27
 80009fc:	08000f27 	.word	0x08000f27
 8000a00:	08000f27 	.word	0x08000f27
 8000a04:	08000f27 	.word	0x08000f27
 8000a08:	08000f27 	.word	0x08000f27
 8000a0c:	08000f27 	.word	0x08000f27
 8000a10:	08000f27 	.word	0x08000f27
 8000a14:	08000f27 	.word	0x08000f27
 8000a18:	08000f27 	.word	0x08000f27
 8000a1c:	08000f27 	.word	0x08000f27
 8000a20:	08000f27 	.word	0x08000f27
 8000a24:	08000f27 	.word	0x08000f27
 8000a28:	08000f27 	.word	0x08000f27
 8000a2c:	08000f27 	.word	0x08000f27
 8000a30:	08000efd 	.word	0x08000efd
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f016 f89f 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fae7 	bl	8009014 <HAL_GPIO_WritePin>
		break;
 8000a46:	e27b      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f016 f895 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fadd 	bl	8009014 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e271      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
 8000a5c:	24000c60 	.word	0x24000c60
 8000a60:	24000638 	.word	0x24000638
 8000a64:	08017374 	.word	0x08017374
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	0801737c 	.word	0x0801737c
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48be      	ldr	r0, [pc, #760]	; (8000d6c <HAL_UART_RxCpltCallback+0x6e4>)
 8000a72:	f016 f881 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bbe      	ldr	r3, [pc, #760]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fac9 	bl	8009014 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a82:	4bbc      	ldr	r3, [pc, #752]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		break;
 8000a88:	e25a      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a8a:	48bb      	ldr	r0, [pc, #748]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a8c:	f016 f874 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a90:	4bb7      	ldr	r3, [pc, #732]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a92:	2120      	movs	r1, #32
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fabc 	bl	8009014 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a9c:	4bb4      	ldr	r3, [pc, #720]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fab6 	bl	8009014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa8:	4bb4      	ldr	r3, [pc, #720]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 faaf 	bl	8009014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab6:	4bb1      	ldr	r3, [pc, #708]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 faa8 	bl	8009014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ac4:	4bad      	ldr	r3, [pc, #692]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	2200      	movs	r2, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 faa1 	bl	8009014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ad2:	4baa      	ldr	r3, [pc, #680]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 fa9b 	bl	8009014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ade:	4ba7      	ldr	r3, [pc, #668]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fa95 	bl	8009014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aea:	4ba4      	ldr	r3, [pc, #656]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fa8e 	bl	8009014 <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000af8:	4b9e      	ldr	r3, [pc, #632]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000afe:	4ba0      	ldr	r3, [pc, #640]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000b04:	4b9f      	ldr	r3, [pc, #636]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000b0a:	4b9f      	ldr	r3, [pc, #636]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b10:	4b9e      	ldr	r3, [pc, #632]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b16:	4b9e      	ldr	r3, [pc, #632]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b1c:	4b9d      	ldr	r3, [pc, #628]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b22:	4b9d      	ldr	r3, [pc, #628]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b28:	4b9c      	ldr	r3, [pc, #624]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

		break;
 8000b2e:	e207      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b30:	489b      	ldr	r0, [pc, #620]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000b32:	f016 f821 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b36:	4b91      	ldr	r3, [pc, #580]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 fa68 	bl	8009014 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b44:	4b8e      	ldr	r3, [pc, #568]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e1f9      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b4c:	4895      	ldr	r0, [pc, #596]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000b4e:	f016 f813 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b52:	4b8a      	ldr	r3, [pc, #552]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fa5a 	bl	8009014 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b60:	4b87      	ldr	r3, [pc, #540]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		break;
 8000b66:	e1eb      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b68:	488f      	ldr	r0, [pc, #572]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000b6a:	f016 f805 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b6e:	4b83      	ldr	r3, [pc, #524]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	2201      	movs	r2, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 fa4d 	bl	8009014 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b7a:	4b82      	ldr	r3, [pc, #520]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		break;
 8000b80:	e1de      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b82:	488a      	ldr	r0, [pc, #552]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000b84:	f015 fff8 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b88:	4b7c      	ldr	r3, [pc, #496]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fa40 	bl	8009014 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b94:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e1d1      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b9c:	4884      	ldr	r0, [pc, #528]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000b9e:	f015 ffeb 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba2:	4b76      	ldr	r3, [pc, #472]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fa33 	bl	8009014 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000bae:	4b76      	ldr	r3, [pc, #472]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		break;
 8000bb4:	e1c4      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bb6:	487f      	ldr	r0, [pc, #508]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000bb8:	f015 ffde 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bbc:	4b6f      	ldr	r3, [pc, #444]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fa26 	bl	8009014 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bc8:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e1b7      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd0:	4879      	ldr	r0, [pc, #484]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000bd2:	f015 ffd1 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bd6:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 fa18 	bl	8009014 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000be4:	4b69      	ldr	r3, [pc, #420]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e1a9      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bec:	4873      	ldr	r0, [pc, #460]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000bee:	f015 ffc3 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf2:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 fa0a 	bl	8009014 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000c00:	4b62      	ldr	r3, [pc, #392]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e19b      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c08:	486d      	ldr	r0, [pc, #436]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000c0a:	f015 ffb5 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0e:	4b5b      	ldr	r3, [pc, #364]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	2201      	movs	r2, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 f9fc 	bl	8009014 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c1c:	4b5c      	ldr	r3, [pc, #368]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e18d      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c24:	4867      	ldr	r0, [pc, #412]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c26:	f015 ffa7 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c2a:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	2200      	movs	r2, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 f9ee 	bl	8009014 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c38:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e17f      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c40:	4861      	ldr	r0, [pc, #388]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000c42:	f015 ff99 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c46:	4b4d      	ldr	r3, [pc, #308]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 f9e0 	bl	8009014 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c54:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e171      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c5c:	485b      	ldr	r0, [pc, #364]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c5e:	f015 ff8b 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c62:	4b46      	ldr	r3, [pc, #280]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 f9d2 	bl	8009014 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c70:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]

		break;
 8000c76:	e163      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c78:	4855      	ldr	r0, [pc, #340]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c7a:	f015 ff7d 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c7e:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	2201      	movs	r2, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 f9c5 	bl	8009014 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c8a:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
		break;
 8000c90:	e156      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c92:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c94:	f015 ff70 	bl	8016b78 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c98:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f008 f9b8 	bl	8009014 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e149      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000cac:	484a      	ldr	r0, [pc, #296]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cae:	f015 ff63 	bl	8016b78 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	4a48      	ldr	r2, [pc, #288]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4848      	ldr	r0, [pc, #288]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cbe:	f004 fe0d 	bl	80058dc <HAL_DAC_Start_DMA>
		break;
 8000cc2:	e13d      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cc4:	4847      	ldr	r0, [pc, #284]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cc6:	f015 ff57 	bl	8016b78 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4844      	ldr	r0, [pc, #272]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cce:	f004 fec5 	bl	8005a5c <HAL_DAC_Stop_DMA>
		break;
 8000cd2:	e135      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cd4:	4844      	ldr	r0, [pc, #272]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cd6:	f015 ff4f 	bl	8016b78 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cda:	210c      	movs	r1, #12
 8000cdc:	4843      	ldr	r0, [pc, #268]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cde:	f00d fd9d 	bl	800e81c <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000ce2:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000ce8:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	801a      	strh	r2, [r3, #0]
		break;
 8000cee:	e127      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cf0:	4841      	ldr	r0, [pc, #260]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000cf2:	f015 ff41 	bl	8016b78 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000cf6:	210c      	movs	r1, #12
 8000cf8:	483c      	ldr	r0, [pc, #240]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cfa:	f00d fee9 	bl	800ead0 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
		break;
 8000d04:	e11c      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d06:	483d      	ldr	r0, [pc, #244]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d08:	f015 ff36 	bl	8016b78 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	483c      	ldr	r0, [pc, #240]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d10:	f00d fd84 	bl	800e81c <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <HAL_UART_RxCpltCallback+0x780>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	801a      	strh	r2, [r3, #0]
		break;
 8000d20:	e10e      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d22:	483a      	ldr	r0, [pc, #232]	; (8000e0c <HAL_UART_RxCpltCallback+0x784>)
 8000d24:	f015 ff28 	bl	8016b78 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4835      	ldr	r0, [pc, #212]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d2c:	f00d fed0 	bl	800ead0 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d30:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
		break;
 8000d36:	e103      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d38:	4835      	ldr	r0, [pc, #212]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d3a:	f015 ff1d 	bl	8016b78 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4834      	ldr	r0, [pc, #208]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d42:	f00d fd6b 	bl	800e81c <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <HAL_UART_RxCpltCallback+0x794>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	801a      	strh	r2, [r3, #0]
		break;
 8000d52:	e0f5      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000d54:	4832      	ldr	r0, [pc, #200]	; (8000e20 <HAL_UART_RxCpltCallback+0x798>)
 8000d56:	f015 ff0f 	bl	8016b78 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	482d      	ldr	r0, [pc, #180]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d5e:	f00d feb7 	bl	800ead0 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
		break;
 8000d68:	e0ea      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
 8000d6a:	bf00      	nop
 8000d6c:	08017388 	.word	0x08017388
 8000d70:	58020400 	.word	0x58020400
 8000d74:	24000c1c 	.word	0x24000c1c
 8000d78:	08017394 	.word	0x08017394
 8000d7c:	58020800 	.word	0x58020800
 8000d80:	24000c1d 	.word	0x24000c1d
 8000d84:	24000c1e 	.word	0x24000c1e
 8000d88:	24000c1f 	.word	0x24000c1f
 8000d8c:	24000c20 	.word	0x24000c20
 8000d90:	24000c21 	.word	0x24000c21
 8000d94:	24000c22 	.word	0x24000c22
 8000d98:	24000c23 	.word	0x24000c23
 8000d9c:	24000c24 	.word	0x24000c24
 8000da0:	080173a0 	.word	0x080173a0
 8000da4:	080173ac 	.word	0x080173ac
 8000da8:	080173bc 	.word	0x080173bc
 8000dac:	080173c8 	.word	0x080173c8
 8000db0:	080173d4 	.word	0x080173d4
 8000db4:	080173e0 	.word	0x080173e0
 8000db8:	080173f0 	.word	0x080173f0
 8000dbc:	080173fc 	.word	0x080173fc
 8000dc0:	08017408 	.word	0x08017408
 8000dc4:	08017414 	.word	0x08017414
 8000dc8:	08017420 	.word	0x08017420
 8000dcc:	08017430 	.word	0x08017430
 8000dd0:	08017440 	.word	0x08017440
 8000dd4:	0801744c 	.word	0x0801744c
 8000dd8:	0801745c 	.word	0x0801745c
 8000ddc:	24000010 	.word	0x24000010
 8000de0:	240002f4 	.word	0x240002f4
 8000de4:	0801746c 	.word	0x0801746c
 8000de8:	0801747c 	.word	0x0801747c
 8000dec:	24000554 	.word	0x24000554
 8000df0:	24000c57 	.word	0x24000c57
 8000df4:	24000c52 	.word	0x24000c52
 8000df8:	08017484 	.word	0x08017484
 8000dfc:	08017490 	.word	0x08017490
 8000e00:	24000508 	.word	0x24000508
 8000e04:	24000c56 	.word	0x24000c56
 8000e08:	24000c50 	.word	0x24000c50
 8000e0c:	08017498 	.word	0x08017498
 8000e10:	080174a0 	.word	0x080174a0
 8000e14:	240005a0 	.word	0x240005a0
 8000e18:	24000c58 	.word	0x24000c58
 8000e1c:	24000c54 	.word	0x24000c54
 8000e20:	080174a8 	.word	0x080174a8
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e24:	4848      	ldr	r0, [pc, #288]	; (8000f48 <HAL_UART_RxCpltCallback+0x8c0>)
 8000e26:	f015 fea7 	bl	8016b78 <puts>
		if (step < 17) {
 8000e2a:	4b48      	ldr	r3, [pc, #288]	; (8000f4c <HAL_UART_RxCpltCallback+0x8c4>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b10      	cmp	r3, #16
 8000e30:	d87f      	bhi.n	8000f32 <HAL_UART_RxCpltCallback+0x8aa>
			step += 2;
 8000e32:	4b46      	ldr	r3, [pc, #280]	; (8000f4c <HAL_UART_RxCpltCallback+0x8c4>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	3302      	adds	r3, #2
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b44      	ldr	r3, [pc, #272]	; (8000f4c <HAL_UART_RxCpltCallback+0x8c4>)
 8000e3c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e3e:	4b43      	ldr	r3, [pc, #268]	; (8000f4c <HAL_UART_RxCpltCallback+0x8c4>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b42      	ldr	r3, [pc, #264]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4841      	ldr	r0, [pc, #260]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e50:	f004 fea7 	bl	8005ba2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e54:	2100      	movs	r1, #0
 8000e56:	483f      	ldr	r0, [pc, #252]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e58:	f004 fce8 	bl	800582c <HAL_DAC_Start>
		}
		break;
 8000e5c:	e069      	b.n	8000f32 <HAL_UART_RxCpltCallback+0x8aa>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e5e:	483e      	ldr	r0, [pc, #248]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e60:	f015 fe8a 	bl	8016b78 <puts>
		if (step > 3) {
 8000e64:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <HAL_UART_RxCpltCallback+0x8c4>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d964      	bls.n	8000f36 <HAL_UART_RxCpltCallback+0x8ae>
			step -= 2;
 8000e6c:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <HAL_UART_RxCpltCallback+0x8c4>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	3b02      	subs	r3, #2
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <HAL_UART_RxCpltCallback+0x8c4>)
 8000e76:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <HAL_UART_RxCpltCallback+0x8c4>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	4832      	ldr	r0, [pc, #200]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e8a:	f004 fe8a 	bl	8005ba2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4830      	ldr	r0, [pc, #192]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e92:	f004 fccb 	bl	800582c <HAL_DAC_Start>
		}
		break;
 8000e96:	e04e      	b.n	8000f36 <HAL_UART_RxCpltCallback+0x8ae>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000e98:	4830      	ldr	r0, [pc, #192]	; (8000f5c <HAL_UART_RxCpltCallback+0x8d4>)
 8000e9a:	f015 fe6d 	bl	8016b78 <puts>
		if (cadence <= 50000) {
 8000e9e:	4b30      	ldr	r3, [pc, #192]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d847      	bhi.n	8000f3a <HAL_UART_RxCpltCallback+0x8b2>
			cadence *= 2;
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4a2b      	ldr	r2, [pc, #172]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000eb2:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000eb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb8:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ebe:	e03c      	b.n	8000f3a <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ec0:	4828      	ldr	r0, [pc, #160]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ec2:	f015 fe59 	bl	8016b78 <puts>
		if (cadence >= 6250) {
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d935      	bls.n	8000f3e <HAL_UART_RxCpltCallback+0x8b6>
			cadence /= 2;
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	085b      	lsrs	r3, r3, #1
 8000ed8:	4a21      	ldr	r2, [pc, #132]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000eda:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000edc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ee6:	e02a      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x8b6>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000ee8:	481f      	ldr	r0, [pc, #124]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000eea:	f015 fe45 	bl	8016b78 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <HAL_UART_RxCpltCallback+0x8e4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2116      	movs	r1, #22
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f012 f8fb 	bl	80130f0 <osEventFlagsSet>
		break;
 8000efa:	e021      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000efc:	481c      	ldr	r0, [pc, #112]	; (8000f70 <HAL_UART_RxCpltCallback+0x8e8>)
 8000efe:	f015 fe3b 	bl	8016b78 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f013 fe98 	bl	8014c3c <xTaskResumeFromISR>
		break;
 8000f0c:	e018      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f0e:	481a      	ldr	r0, [pc, #104]	; (8000f78 <HAL_UART_RxCpltCallback+0x8f0>)
 8000f10:	f015 fe32 	bl	8016b78 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_UART_RxCpltCallback+0x8f4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f013 fe8f 	bl	8014c3c <xTaskResumeFromISR>
		break;
 8000f1e:	e00f      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0xAF: {
		sync();
 8000f20:	f001 f95c 	bl	80021dc <sync>
		break;
 8000f24:	e00c      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	case 0xBF: {
		// TODO: enter_flight_mode();
		break;
	}
	default: {
		printf("Unknown Command\n");
 8000f26:	4816      	ldr	r0, [pc, #88]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000f28:	f015 fe26 	bl	8016b78 <puts>
		break;
 8000f2c:	e008      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
		break;
 8000f2e:	bf00      	nop
 8000f30:	e006      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
		break;
 8000f32:	bf00      	nop
 8000f34:	e004      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
		break;
 8000f36:	bf00      	nop
 8000f38:	e002      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
		break;
 8000f3a:	bf00      	nop
 8000f3c:	e000      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
		break;
 8000f3e:	bf00      	nop
	}
	}
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	080174b0 	.word	0x080174b0
 8000f4c:	2400000c 	.word	0x2400000c
 8000f50:	24000010 	.word	0x24000010
 8000f54:	240002f4 	.word	0x240002f4
 8000f58:	080174b8 	.word	0x080174b8
 8000f5c:	080174c4 	.word	0x080174c4
 8000f60:	24000008 	.word	0x24000008
 8000f64:	080174d0 	.word	0x080174d0
 8000f68:	080174dc 	.word	0x080174dc
 8000f6c:	24000c5c 	.word	0x24000c5c
 8000f70:	080174ec 	.word	0x080174ec
 8000f74:	24000750 	.word	0x24000750
 8000f78:	080174f8 	.word	0x080174f8
 8000f7c:	240009b0 	.word	0x240009b0
 8000f80:	08017504 	.word	0x08017504

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f002 febc 	bl	8003d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 f8ac 	bl	80010e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f90:	f000 f92a 	bl	80011e8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f000 feee 	bl	8001d74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f98:	f000 feb4 	bl	8001d04 <MX_DMA_Init>
  MX_TIM3_Init();
 8000f9c:	f000 fdac 	bl	8001af8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fa0:	f000 fe48 	bl	8001c34 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fa4:	f000 fb36 	bl	8001614 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fa8:	f000 fc2c 	bl	8001804 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000fac:	f000 fd2e 	bl	8001a0c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fb0:	f000 fc80 	bl	80018b4 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000fb4:	f000 fa6a 	bl	800148c <MX_ADC3_Init>
  MX_ADC1_Init();
 8000fb8:	f000 f946 	bl	8001248 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000fbc:	f000 faf8 	bl	80015b0 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000fc0:	f000 fbc8 	bl	8001754 <MX_SPI1_Init>
  MX_RTC_Init();
 8000fc4:	f000 fb68 	bl	8001698 <MX_RTC_Init>
  MX_TIM4_Init();
 8000fc8:	f000 fde6 	bl	8001b98 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fcc:	f011 ff18 	bl	8012e00 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	2080      	movs	r0, #128	; 0x80
 8000fd6:	f012 f988 	bl	80132ea <osMessageQueueNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a27      	ldr	r2, [pc, #156]	; (800107c <main+0xf8>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <main+0xfc>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4827      	ldr	r0, [pc, #156]	; (8001084 <main+0x100>)
 8000fe6:	f011 ff55 	bl	8012e94 <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a26      	ldr	r2, [pc, #152]	; (8001088 <main+0x104>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <main+0x108>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4826      	ldr	r0, [pc, #152]	; (8001090 <main+0x10c>)
 8000ff6:	f011 ff4d 	bl	8012e94 <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a25      	ldr	r2, [pc, #148]	; (8001094 <main+0x110>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8001000:	4a25      	ldr	r2, [pc, #148]	; (8001098 <main+0x114>)
 8001002:	2100      	movs	r1, #0
 8001004:	4825      	ldr	r0, [pc, #148]	; (800109c <main+0x118>)
 8001006:	f011 ff45 	bl	8012e94 <osThreadNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <main+0x11c>)
 800100e:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8001010:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <main+0x120>)
 8001012:	2100      	movs	r1, #0
 8001014:	4824      	ldr	r0, [pc, #144]	; (80010a8 <main+0x124>)
 8001016:	f011 ff3d 	bl	8012e94 <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a23      	ldr	r2, [pc, #140]	; (80010ac <main+0x128>)
 800101e:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <main+0x12c>)
 8001022:	2100      	movs	r1, #0
 8001024:	4823      	ldr	r0, [pc, #140]	; (80010b4 <main+0x130>)
 8001026:	f011 ff35 	bl	8012e94 <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <main+0x134>)
 800102e:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8001030:	4a22      	ldr	r2, [pc, #136]	; (80010bc <main+0x138>)
 8001032:	2100      	movs	r1, #0
 8001034:	4822      	ldr	r0, [pc, #136]	; (80010c0 <main+0x13c>)
 8001036:	f011 ff2d 	bl	8012e94 <osThreadNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <main+0x140>)
 800103e:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <main+0x144>)
 8001042:	2100      	movs	r1, #0
 8001044:	4821      	ldr	r0, [pc, #132]	; (80010cc <main+0x148>)
 8001046:	f011 ff25 	bl	8012e94 <osThreadNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <main+0x14c>)
 800104e:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8001050:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <main+0x150>)
 8001052:	2100      	movs	r1, #0
 8001054:	4820      	ldr	r0, [pc, #128]	; (80010d8 <main+0x154>)
 8001056:	f011 ff1d 	bl	8012e94 <osThreadNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <main+0x158>)
 800105e:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8001060:	2000      	movs	r0, #0
 8001062:	f012 f805 	bl	8013070 <osEventFlagsNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <main+0x15c>)
 800106a:	6013      	str	r3, [r2, #0]
	system_setup();
 800106c:	f001 f91e 	bl	80022ac <system_setup>
	printf("Starting kernal...\n");
 8001070:	481c      	ldr	r0, [pc, #112]	; (80010e4 <main+0x160>)
 8001072:	f015 fd81 	bl	8016b78 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001076:	f011 fee7 	bl	8012e48 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800107a:	e7fe      	b.n	800107a <main+0xf6>
 800107c:	24000c44 	.word	0x24000c44
 8001080:	08017560 	.word	0x08017560
 8001084:	08002a61 	.word	0x08002a61
 8001088:	24000744 	.word	0x24000744
 800108c:	08017584 	.word	0x08017584
 8001090:	08002aa5 	.word	0x08002aa5
 8001094:	24000748 	.word	0x24000748
 8001098:	080175a8 	.word	0x080175a8
 800109c:	08002ae9 	.word	0x08002ae9
 80010a0:	2400074c 	.word	0x2400074c
 80010a4:	080175cc 	.word	0x080175cc
 80010a8:	08002b2d 	.word	0x08002b2d
 80010ac:	24000750 	.word	0x24000750
 80010b0:	080175f0 	.word	0x080175f0
 80010b4:	08002bd5 	.word	0x08002bd5
 80010b8:	240009b0 	.word	0x240009b0
 80010bc:	08017614 	.word	0x08017614
 80010c0:	08002c7d 	.word	0x08002c7d
 80010c4:	24000c10 	.word	0x24000c10
 80010c8:	08017638 	.word	0x08017638
 80010cc:	08002d35 	.word	0x08002d35
 80010d0:	24000c14 	.word	0x24000c14
 80010d4:	0801765c 	.word	0x0801765c
 80010d8:	08002e21 	.word	0x08002e21
 80010dc:	24000c18 	.word	0x24000c18
 80010e0:	24000c5c 	.word	0x24000c5c
 80010e4:	08017514 	.word	0x08017514

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b09c      	sub	sp, #112	; 0x70
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	224c      	movs	r2, #76	; 0x4c
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f015 fbe8 	bl	80168cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2220      	movs	r2, #32
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f015 fbe2 	bl	80168cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001108:	2002      	movs	r0, #2
 800110a:	f008 fde5 	bl	8009cd8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <SystemClock_Config+0xf8>)
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	4a32      	ldr	r2, [pc, #200]	; (80011e0 <SystemClock_Config+0xf8>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <SystemClock_Config+0xf8>)
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <SystemClock_Config+0xfc>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001130:	4a2c      	ldr	r2, [pc, #176]	; (80011e4 <SystemClock_Config+0xfc>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <SystemClock_Config+0xfc>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001144:	bf00      	nop
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <SystemClock_Config+0xfc>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800114e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001152:	d1f8      	bne.n	8001146 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001154:	2303      	movs	r3, #3
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800115e:	2309      	movs	r3, #9
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001162:	2340      	movs	r3, #64	; 0x40
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001166:	2302      	movs	r3, #2
 8001168:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116a:	2302      	movs	r3, #2
 800116c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800116e:	2304      	movs	r3, #4
 8001170:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001172:	2320      	movs	r3, #32
 8001174:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001176:	2304      	movs	r3, #4
 8001178:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800117a:	2304      	movs	r3, #4
 800117c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800117e:	2302      	movs	r3, #2
 8001180:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001182:	2308      	movs	r3, #8
 8001184:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001186:	2300      	movs	r3, #0
 8001188:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4618      	mov	r0, r3
 8001194:	f008 fdda 	bl	8009d4c <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800119e:	f001 fe6f 	bl	8002e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	233f      	movs	r3, #63	; 0x3f
 80011a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a6:	2303      	movs	r3, #3
 80011a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2101      	movs	r1, #1
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fa1a 	bl	800a600 <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80011d2:	f001 fe55 	bl	8002e80 <Error_Handler>
  }
}
 80011d6:	bf00      	nop
 80011d8:	3770      	adds	r7, #112	; 0x70
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	58000400 	.word	0x58000400
 80011e4:	58024800 	.word	0x58024800

080011e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0b0      	sub	sp, #192	; 0xc0
 80011ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	22c0      	movs	r2, #192	; 0xc0
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f015 fb69 	bl	80168cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001206:	2304      	movs	r3, #4
 8001208:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800120a:	2320      	movs	r3, #32
 800120c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800120e:	2308      	movs	r3, #8
 8001210:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001212:	2304      	movs	r3, #4
 8001214:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	4618      	mov	r0, r3
 8001230:	f009 fdb4 	bl	800ad9c <HAL_RCCEx_PeriphCLKConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800123a:	f001 fe21 	bl	8002e80 <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	37c0      	adds	r7, #192	; 0xc0
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]
 800126a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800126c:	4b7a      	ldr	r3, [pc, #488]	; (8001458 <MX_ADC1_Init+0x210>)
 800126e:	4a7b      	ldr	r2, [pc, #492]	; (800145c <MX_ADC1_Init+0x214>)
 8001270:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001272:	4b79      	ldr	r3, [pc, #484]	; (8001458 <MX_ADC1_Init+0x210>)
 8001274:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001278:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127a:	4b77      	ldr	r3, [pc, #476]	; (8001458 <MX_ADC1_Init+0x210>)
 800127c:	2208      	movs	r2, #8
 800127e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001280:	4b75      	ldr	r3, [pc, #468]	; (8001458 <MX_ADC1_Init+0x210>)
 8001282:	2201      	movs	r2, #1
 8001284:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001286:	4b74      	ldr	r3, [pc, #464]	; (8001458 <MX_ADC1_Init+0x210>)
 8001288:	2204      	movs	r2, #4
 800128a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800128c:	4b72      	ldr	r3, [pc, #456]	; (8001458 <MX_ADC1_Init+0x210>)
 800128e:	2200      	movs	r2, #0
 8001290:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001292:	4b71      	ldr	r3, [pc, #452]	; (8001458 <MX_ADC1_Init+0x210>)
 8001294:	2201      	movs	r2, #1
 8001296:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8001298:	4b6f      	ldr	r3, [pc, #444]	; (8001458 <MX_ADC1_Init+0x210>)
 800129a:	220b      	movs	r2, #11
 800129c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129e:	4b6e      	ldr	r3, [pc, #440]	; (8001458 <MX_ADC1_Init+0x210>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a4:	4b6c      	ldr	r3, [pc, #432]	; (8001458 <MX_ADC1_Init+0x210>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012aa:	4b6b      	ldr	r3, [pc, #428]	; (8001458 <MX_ADC1_Init+0x210>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012b0:	4b69      	ldr	r3, [pc, #420]	; (8001458 <MX_ADC1_Init+0x210>)
 80012b2:	2203      	movs	r2, #3
 80012b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012b6:	4b68      	ldr	r3, [pc, #416]	; (8001458 <MX_ADC1_Init+0x210>)
 80012b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012be:	4b66      	ldr	r3, [pc, #408]	; (8001458 <MX_ADC1_Init+0x210>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012c4:	4b64      	ldr	r3, [pc, #400]	; (8001458 <MX_ADC1_Init+0x210>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012cc:	4862      	ldr	r0, [pc, #392]	; (8001458 <MX_ADC1_Init+0x210>)
 80012ce:	f002 ffa5 	bl	800421c <HAL_ADC_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012d8:	f001 fdd2 	bl	8002e80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	485c      	ldr	r0, [pc, #368]	; (8001458 <MX_ADC1_Init+0x210>)
 80012e8:	f004 f8c0 	bl	800546c <HAL_ADCEx_MultiModeConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012f2:	f001 fdc5 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012f6:	4b5a      	ldr	r3, [pc, #360]	; (8001460 <MX_ADC1_Init+0x218>)
 80012f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012fa:	2306      	movs	r3, #6
 80012fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80012fe:	2307      	movs	r3, #7
 8001300:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001302:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001306:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001308:	2304      	movs	r3, #4
 800130a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	484f      	ldr	r0, [pc, #316]	; (8001458 <MX_ADC1_Init+0x210>)
 800131a:	f003 fa03 	bl	8004724 <HAL_ADC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001324:	f001 fdac 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001328:	4b4e      	ldr	r3, [pc, #312]	; (8001464 <MX_ADC1_Init+0x21c>)
 800132a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800132c:	230c      	movs	r3, #12
 800132e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	4848      	ldr	r0, [pc, #288]	; (8001458 <MX_ADC1_Init+0x210>)
 8001336:	f003 f9f5 	bl	8004724 <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001340:	f001 fd9e 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001344:	4b48      	ldr	r3, [pc, #288]	; (8001468 <MX_ADC1_Init+0x220>)
 8001346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001348:	2312      	movs	r3, #18
 800134a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	4841      	ldr	r0, [pc, #260]	; (8001458 <MX_ADC1_Init+0x210>)
 8001352:	f003 f9e7 	bl	8004724 <HAL_ADC_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 800135c:	f001 fd90 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001360:	4b42      	ldr	r3, [pc, #264]	; (800146c <MX_ADC1_Init+0x224>)
 8001362:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001364:	2318      	movs	r3, #24
 8001366:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	483a      	ldr	r0, [pc, #232]	; (8001458 <MX_ADC1_Init+0x210>)
 800136e:	f003 f9d9 	bl	8004724 <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001378:	f001 fd82 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800137c:	4b3c      	ldr	r3, [pc, #240]	; (8001470 <MX_ADC1_Init+0x228>)
 800137e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001384:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001386:	463b      	mov	r3, r7
 8001388:	4619      	mov	r1, r3
 800138a:	4833      	ldr	r0, [pc, #204]	; (8001458 <MX_ADC1_Init+0x210>)
 800138c:	f003 f9ca 	bl	8004724 <HAL_ADC_ConfigChannel>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001396:	f001 fd73 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <MX_ADC1_Init+0x22c>)
 800139c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800139e:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	482b      	ldr	r0, [pc, #172]	; (8001458 <MX_ADC1_Init+0x210>)
 80013aa:	f003 f9bb 	bl	8004724 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013b4:	f001 fd64 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <MX_ADC1_Init+0x230>)
 80013ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013bc:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	4619      	mov	r1, r3
 80013c6:	4824      	ldr	r0, [pc, #144]	; (8001458 <MX_ADC1_Init+0x210>)
 80013c8:	f003 f9ac 	bl	8004724 <HAL_ADC_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013d2:	f001 fd55 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <MX_ADC1_Init+0x234>)
 80013d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013da:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	481c      	ldr	r0, [pc, #112]	; (8001458 <MX_ADC1_Init+0x210>)
 80013e6:	f003 f99d 	bl	8004724 <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80013f0:	f001 fd46 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_ADC1_Init+0x238>)
 80013f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80013f8:	f44f 738c 	mov.w	r3, #280	; 0x118
 80013fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fe:	463b      	mov	r3, r7
 8001400:	4619      	mov	r1, r3
 8001402:	4815      	ldr	r0, [pc, #84]	; (8001458 <MX_ADC1_Init+0x210>)
 8001404:	f003 f98e 	bl	8004724 <HAL_ADC_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800140e:	f001 fd37 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <MX_ADC1_Init+0x23c>)
 8001414:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_ADC1_Init+0x210>)
 8001422:	f003 f97f 	bl	8004724 <HAL_ADC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 800142c:	f001 fd28 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_ADC1_Init+0x240>)
 8001432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001434:	f240 2306 	movw	r3, #518	; 0x206
 8001438:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <MX_ADC1_Init+0x210>)
 8001440:	f003 f970 	bl	8004724 <HAL_ADC_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800144a:	f001 fd19 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2400013c 	.word	0x2400013c
 800145c:	40022000 	.word	0x40022000
 8001460:	0c900008 	.word	0x0c900008
 8001464:	10c00010 	.word	0x10c00010
 8001468:	14f00020 	.word	0x14f00020
 800146c:	1d500080 	.word	0x1d500080
 8001470:	21800100 	.word	0x21800100
 8001474:	25b00200 	.word	0x25b00200
 8001478:	2a000400 	.word	0x2a000400
 800147c:	2e300800 	.word	0x2e300800
 8001480:	3ac04000 	.word	0x3ac04000
 8001484:	3ef08000 	.word	0x3ef08000
 8001488:	47520000 	.word	0x47520000

0800148c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
 80014a0:	615a      	str	r2, [r3, #20]
 80014a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014a4:	4b3d      	ldr	r3, [pc, #244]	; (800159c <MX_ADC3_Init+0x110>)
 80014a6:	4a3e      	ldr	r2, [pc, #248]	; (80015a0 <MX_ADC3_Init+0x114>)
 80014a8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014aa:	4b3c      	ldr	r3, [pc, #240]	; (800159c <MX_ADC3_Init+0x110>)
 80014ac:	2208      	movs	r2, #8
 80014ae:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014b0:	4b3a      	ldr	r3, [pc, #232]	; (800159c <MX_ADC3_Init+0x110>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b6:	4b39      	ldr	r3, [pc, #228]	; (800159c <MX_ADC3_Init+0x110>)
 80014b8:	2204      	movs	r2, #4
 80014ba:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <MX_ADC3_Init+0x110>)
 80014be:	2200      	movs	r2, #0
 80014c0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <MX_ADC3_Init+0x110>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014c8:	4b34      	ldr	r3, [pc, #208]	; (800159c <MX_ADC3_Init+0x110>)
 80014ca:	2204      	movs	r2, #4
 80014cc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014ce:	4b33      	ldr	r3, [pc, #204]	; (800159c <MX_ADC3_Init+0x110>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	4b31      	ldr	r3, [pc, #196]	; (800159c <MX_ADC3_Init+0x110>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <MX_ADC3_Init+0x110>)
 80014dc:	2200      	movs	r2, #0
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014e0:	4b2e      	ldr	r3, [pc, #184]	; (800159c <MX_ADC3_Init+0x110>)
 80014e2:	2203      	movs	r2, #3
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <MX_ADC3_Init+0x110>)
 80014e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <MX_ADC3_Init+0x110>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <MX_ADC3_Init+0x110>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014fc:	4827      	ldr	r0, [pc, #156]	; (800159c <MX_ADC3_Init+0x110>)
 80014fe:	f002 fe8d 	bl	800421c <HAL_ADC_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001508:	f001 fcba 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <MX_ADC3_Init+0x118>)
 800150e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001510:	2306      	movs	r3, #6
 8001512:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001514:	2307      	movs	r3, #7
 8001516:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001518:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800151c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800151e:	2304      	movs	r3, #4
 8001520:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	481b      	ldr	r0, [pc, #108]	; (800159c <MX_ADC3_Init+0x110>)
 8001530:	f003 f8f8 	bl	8004724 <HAL_ADC_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800153a:	f001 fca1 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_ADC3_Init+0x11c>)
 8001540:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001542:	230c      	movs	r3, #12
 8001544:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	4619      	mov	r1, r3
 800154a:	4814      	ldr	r0, [pc, #80]	; (800159c <MX_ADC3_Init+0x110>)
 800154c:	f003 f8ea 	bl	8004724 <HAL_ADC_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001556:	f001 fc93 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800155a:	2301      	movs	r3, #1
 800155c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800155e:	2312      	movs	r3, #18
 8001560:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	4619      	mov	r1, r3
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_ADC3_Init+0x110>)
 8001568:	f003 f8dc 	bl	8004724 <HAL_ADC_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001572:	f001 fc85 	bl	8002e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <MX_ADC3_Init+0x120>)
 8001578:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800157a:	2318      	movs	r3, #24
 800157c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <MX_ADC3_Init+0x110>)
 8001584:	f003 f8ce 	bl	8004724 <HAL_ADC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800158e:	f001 fc77 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	240001a0 	.word	0x240001a0
 80015a0:	58026000 	.word	0x58026000
 80015a4:	cb840000 	.word	0xcb840000
 80015a8:	cfb80000 	.word	0xcfb80000
 80015ac:	04300002 	.word	0x04300002

080015b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2224      	movs	r2, #36	; 0x24
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f015 f985 	bl	80168cc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_DAC1_Init+0x5c>)
 80015c4:	4a12      	ldr	r2, [pc, #72]	; (8001610 <MX_DAC1_Init+0x60>)
 80015c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015c8:	4810      	ldr	r0, [pc, #64]	; (800160c <MX_DAC1_Init+0x5c>)
 80015ca:	f004 f90d 	bl	80057e8 <HAL_DAC_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015d4:	f001 fc54 	bl	8002e80 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015dc:	230a      	movs	r3, #10
 80015de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	; (800160c <MX_DAC1_Init+0x5c>)
 80015f4:	f004 fb28 	bl	8005c48 <HAL_DAC_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80015fe:	f001 fc3f 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	240002f4 	.word	0x240002f4
 8001610:	40007400 	.word	0x40007400

08001614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001618:	4b1c      	ldr	r3, [pc, #112]	; (800168c <MX_I2C1_Init+0x78>)
 800161a:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <MX_I2C1_Init+0x7c>)
 800161c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <MX_I2C1_Init+0x78>)
 8001620:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <MX_I2C1_Init+0x80>)
 8001622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <MX_I2C1_Init+0x78>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <MX_I2C1_Init+0x78>)
 800162c:	2201      	movs	r2, #1
 800162e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <MX_I2C1_Init+0x78>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <MX_I2C1_Init+0x78>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <MX_I2C1_Init+0x78>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <MX_I2C1_Init+0x78>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <MX_I2C1_Init+0x78>)
 800164a:	2200      	movs	r2, #0
 800164c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800164e:	480f      	ldr	r0, [pc, #60]	; (800168c <MX_I2C1_Init+0x78>)
 8001650:	f007 fcfa 	bl	8009048 <HAL_I2C_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800165a:	f001 fc11 	bl	8002e80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800165e:	2100      	movs	r1, #0
 8001660:	480a      	ldr	r0, [pc, #40]	; (800168c <MX_I2C1_Init+0x78>)
 8001662:	f008 fa41 	bl	8009ae8 <HAL_I2CEx_ConfigAnalogFilter>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800166c:	f001 fc08 	bl	8002e80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001670:	2100      	movs	r1, #0
 8001672:	4806      	ldr	r0, [pc, #24]	; (800168c <MX_I2C1_Init+0x78>)
 8001674:	f008 fa83 	bl	8009b7e <HAL_I2CEx_ConfigDigitalFilter>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800167e:	f001 fbff 	bl	8002e80 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001682:	2001      	movs	r0, #1
 8001684:	f008 fac8 	bl	8009c18 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	24000380 	.word	0x24000380
 8001690:	40005400 	.word	0x40005400
 8001694:	0020081f 	.word	0x0020081f

08001698 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016ac:	2300      	movs	r3, #0
 80016ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <MX_RTC_Init+0xb4>)
 80016b2:	4a27      	ldr	r2, [pc, #156]	; (8001750 <MX_RTC_Init+0xb8>)
 80016b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <MX_RTC_Init+0xb4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <MX_RTC_Init+0xb4>)
 80016be:	2263      	movs	r2, #99	; 0x63
 80016c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <MX_RTC_Init+0xb4>)
 80016c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80016c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <MX_RTC_Init+0xb4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_RTC_Init+0xb4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_RTC_Init+0xb4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_RTC_Init+0xb4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016e2:	481a      	ldr	r0, [pc, #104]	; (800174c <MX_RTC_Init+0xb4>)
 80016e4:	f00c f858 	bl	800d798 <HAL_RTC_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80016ee:	f001 fbc7 	bl	8002e80 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2201      	movs	r2, #1
 800170a:	4619      	mov	r1, r3
 800170c:	480f      	ldr	r0, [pc, #60]	; (800174c <MX_RTC_Init+0xb4>)
 800170e:	f00c f8c5 	bl	800d89c <HAL_RTC_SetTime>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001718:	f001 fbb2 	bl	8002e80 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800171c:	2301      	movs	r3, #1
 800171e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001720:	2301      	movs	r3, #1
 8001722:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001724:	2301      	movs	r3, #1
 8001726:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001728:	2300      	movs	r3, #0
 800172a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800172c:	463b      	mov	r3, r7
 800172e:	2201      	movs	r2, #1
 8001730:	4619      	mov	r1, r3
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <MX_RTC_Init+0xb4>)
 8001734:	f00c f9ac 	bl	800da90 <HAL_RTC_SetDate>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800173e:	f001 fb9f 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	240003d4 	.word	0x240003d4
 8001750:	58004000 	.word	0x58004000

08001754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <MX_SPI1_Init+0xa8>)
 800175a:	4a29      	ldr	r2, [pc, #164]	; (8001800 <MX_SPI1_Init+0xac>)
 800175c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001760:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001768:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800176c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001770:	220f      	movs	r2, #15
 8001772:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <MX_SPI1_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001782:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001786:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <MX_SPI1_Init+0xa8>)
 800178a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800178e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <MX_SPI1_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017e8:	f00c faf8 	bl	800dddc <HAL_SPI_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80017f2:	f001 fb45 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	240003f8 	.word	0x240003f8
 8001800:	40013000 	.word	0x40013000

08001804 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <MX_SPI2_Init+0xa8>)
 800180a:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <MX_SPI2_Init+0xac>)
 800180c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001810:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001814:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001818:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800181c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001820:	220f      	movs	r2, #15
 8001822:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <MX_SPI2_Init+0xa8>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001832:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001836:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <MX_SPI2_Init+0xa8>)
 800183a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800183e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001842:	2200      	movs	r2, #0
 8001844:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001848:	2200      	movs	r2, #0
 800184a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <MX_SPI2_Init+0xa8>)
 800184e:	2200      	movs	r2, #0
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001854:	2200      	movs	r2, #0
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_SPI2_Init+0xa8>)
 800185a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001862:	2200      	movs	r2, #0
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001868:	2200      	movs	r2, #0
 800186a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_SPI2_Init+0xa8>)
 800186e:	2200      	movs	r2, #0
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001874:	2200      	movs	r2, #0
 8001876:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_SPI2_Init+0xa8>)
 800187a:	2200      	movs	r2, #0
 800187c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001880:	2200      	movs	r2, #0
 8001882:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001886:	2200      	movs	r2, #0
 8001888:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <MX_SPI2_Init+0xa8>)
 800188c:	2200      	movs	r2, #0
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001892:	2200      	movs	r2, #0
 8001894:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001898:	f00c faa0 	bl	800dddc <HAL_SPI_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018a2:	f001 faed 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	24000480 	.word	0x24000480
 80018b0:	40003800 	.word	0x40003800

080018b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b09a      	sub	sp, #104	; 0x68
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
 80018e4:	615a      	str	r2, [r3, #20]
 80018e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	222c      	movs	r2, #44	; 0x2c
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f014 ffec 	bl	80168cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <MX_TIM1_Init+0x150>)
 80018f6:	4a44      	ldr	r2, [pc, #272]	; (8001a08 <MX_TIM1_Init+0x154>)
 80018f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80018fa:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <MX_TIM1_Init+0x150>)
 80018fc:	2231      	movs	r2, #49	; 0x31
 80018fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001900:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <MX_TIM1_Init+0x150>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <MX_TIM1_Init+0x150>)
 8001908:	f24f 4223 	movw	r2, #62499	; 0xf423
 800190c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190e:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <MX_TIM1_Init+0x150>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001914:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <MX_TIM1_Init+0x150>)
 8001916:	2200      	movs	r2, #0
 8001918:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191a:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <MX_TIM1_Init+0x150>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001920:	4838      	ldr	r0, [pc, #224]	; (8001a04 <MX_TIM1_Init+0x150>)
 8001922:	f00c feac 	bl	800e67e <HAL_TIM_Base_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800192c:	f001 faa8 	bl	8002e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001934:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001936:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800193a:	4619      	mov	r1, r3
 800193c:	4831      	ldr	r0, [pc, #196]	; (8001a04 <MX_TIM1_Init+0x150>)
 800193e:	f00d fc27 	bl	800f190 <HAL_TIM_ConfigClockSource>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001948:	f001 fa9a 	bl	8002e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800194c:	482d      	ldr	r0, [pc, #180]	; (8001a04 <MX_TIM1_Init+0x150>)
 800194e:	f00d f9a3 	bl	800ec98 <HAL_TIM_PWM_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001958:	f001 fa92 	bl	8002e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001968:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800196c:	4619      	mov	r1, r3
 800196e:	4825      	ldr	r0, [pc, #148]	; (8001a04 <MX_TIM1_Init+0x150>)
 8001970:	f00e f964 	bl	800fc3c <HAL_TIMEx_MasterConfigSynchronization>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800197a:	f001 fa81 	bl	8002e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197e:	2360      	movs	r3, #96	; 0x60
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001986:	2300      	movs	r3, #0
 8001988:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	4818      	ldr	r0, [pc, #96]	; (8001a04 <MX_TIM1_Init+0x150>)
 80019a4:	f00d fae0 	bl	800ef68 <HAL_TIM_PWM_ConfigChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80019ae:	f001 fa67 	bl	8002e80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM1_Init+0x150>)
 80019e8:	f00e f9b6 	bl	800fd58 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019f2:	f001 fa45 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019f6:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM1_Init+0x150>)
 80019f8:	f001 fdf2 	bl	80035e0 <HAL_TIM_MspPostInit>

}
 80019fc:	bf00      	nop
 80019fe:	3768      	adds	r7, #104	; 0x68
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	24000508 	.word	0x24000508
 8001a08:	40010000 	.word	0x40010000

08001a0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	615a      	str	r2, [r3, #20]
 8001a3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <MX_TIM2_Init+0xe8>)
 8001a40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <MX_TIM2_Init+0xe8>)
 8001a48:	2231      	movs	r2, #49	; 0x31
 8001a4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4c:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <MX_TIM2_Init+0xe8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <MX_TIM2_Init+0xe8>)
 8001a54:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5a:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <MX_TIM2_Init+0xe8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <MX_TIM2_Init+0xe8>)
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a66:	4823      	ldr	r0, [pc, #140]	; (8001af4 <MX_TIM2_Init+0xe8>)
 8001a68:	f00c fe09 	bl	800e67e <HAL_TIM_Base_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a72:	f001 fa05 	bl	8002e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a80:	4619      	mov	r1, r3
 8001a82:	481c      	ldr	r0, [pc, #112]	; (8001af4 <MX_TIM2_Init+0xe8>)
 8001a84:	f00d fb84 	bl	800f190 <HAL_TIM_ConfigClockSource>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a8e:	f001 f9f7 	bl	8002e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a92:	4818      	ldr	r0, [pc, #96]	; (8001af4 <MX_TIM2_Init+0xe8>)
 8001a94:	f00d f900 	bl	800ec98 <HAL_TIM_PWM_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001a9e:	f001 f9ef 	bl	8002e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4810      	ldr	r0, [pc, #64]	; (8001af4 <MX_TIM2_Init+0xe8>)
 8001ab2:	f00e f8c3 	bl	800fc3c <HAL_TIMEx_MasterConfigSynchronization>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001abc:	f001 f9e0 	bl	8002e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac0:	2360      	movs	r3, #96	; 0x60
 8001ac2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4807      	ldr	r0, [pc, #28]	; (8001af4 <MX_TIM2_Init+0xe8>)
 8001ad8:	f00d fa46 	bl	800ef68 <HAL_TIM_PWM_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001ae2:	f001 f9cd 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <MX_TIM2_Init+0xe8>)
 8001ae8:	f001 fd7a 	bl	80035e0 <HAL_TIM_MspPostInit>

}
 8001aec:	bf00      	nop
 8001aee:	3738      	adds	r7, #56	; 0x38
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	24000554 	.word	0x24000554

08001af8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afe:	f107 0310 	add.w	r3, r7, #16
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <MX_TIM3_Init+0x98>)
 8001b18:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <MX_TIM3_Init+0x9c>)
 8001b1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <MX_TIM3_Init+0x98>)
 8001b1e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <MX_TIM3_Init+0x98>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <MX_TIM3_Init+0x98>)
 8001b2c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_TIM3_Init+0x98>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <MX_TIM3_Init+0x98>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b3e:	4814      	ldr	r0, [pc, #80]	; (8001b90 <MX_TIM3_Init+0x98>)
 8001b40:	f00c fd9d 	bl	800e67e <HAL_TIM_Base_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b4a:	f001 f999 	bl	8002e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480d      	ldr	r0, [pc, #52]	; (8001b90 <MX_TIM3_Init+0x98>)
 8001b5c:	f00d fb18 	bl	800f190 <HAL_TIM_ConfigClockSource>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001b66:	f001 f98b 	bl	8002e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4806      	ldr	r0, [pc, #24]	; (8001b90 <MX_TIM3_Init+0x98>)
 8001b78:	f00e f860 	bl	800fc3c <HAL_TIMEx_MasterConfigSynchronization>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001b82:	f001 f97d 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	240005a0 	.word	0x240005a0
 8001b94:	40000400 	.word	0x40000400

08001b98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <MX_TIM4_Init+0x94>)
 8001bb8:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <MX_TIM4_Init+0x98>)
 8001bba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <MX_TIM4_Init+0x94>)
 8001bbe:	2263      	movs	r2, #99	; 0x63
 8001bc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <MX_TIM4_Init+0x94>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <MX_TIM4_Init+0x94>)
 8001bca:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001bce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <MX_TIM4_Init+0x94>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <MX_TIM4_Init+0x94>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bdc:	4813      	ldr	r0, [pc, #76]	; (8001c2c <MX_TIM4_Init+0x94>)
 8001bde:	f00c fd4e 	bl	800e67e <HAL_TIM_Base_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001be8:	f001 f94a 	bl	8002e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <MX_TIM4_Init+0x94>)
 8001bfa:	f00d fac9 	bl	800f190 <HAL_TIM_ConfigClockSource>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c04:	f001 f93c 	bl	8002e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	4619      	mov	r1, r3
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_TIM4_Init+0x94>)
 8001c16:	f00e f811 	bl	800fc3c <HAL_TIMEx_MasterConfigSynchronization>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c20:	f001 f92e 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	240005ec 	.word	0x240005ec
 8001c30:	40000800 	.word	0x40000800

08001c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c38:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c3a:	4a31      	ldr	r2, [pc, #196]	; (8001d00 <MX_USART1_UART_Init+0xcc>)
 8001c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001c3e:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c40:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c46:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c52:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5e:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6a:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c7c:	481f      	ldr	r0, [pc, #124]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c7e:	f00e f907 	bl	800fe90 <HAL_UART_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c88:	f001 f8fa 	bl	8002e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	481b      	ldr	r0, [pc, #108]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001c90:	f010 ffa7 	bl	8012be2 <HAL_UARTEx_SetTxFifoThreshold>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c9a:	f001 f8f1 	bl	8002e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4816      	ldr	r0, [pc, #88]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001ca2:	f010 ffdc 	bl	8012c5e <HAL_UARTEx_SetRxFifoThreshold>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cac:	f001 f8e8 	bl	8002e80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cb0:	4812      	ldr	r0, [pc, #72]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001cb2:	f010 ff5d 	bl	8012b70 <HAL_UARTEx_DisableFifoMode>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cbc:	f001 f8e0 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001cc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001cc6:	f010 ffca 	bl	8012c5e <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001cca:	480c      	ldr	r0, [pc, #48]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001ccc:	f010 ff15 	bl	8012afa <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001cd0:	480a      	ldr	r0, [pc, #40]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001cd2:	f010 fedf 	bl	8012a94 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ce4:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <MX_USART1_UART_Init+0xc8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001cf4:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	24000638 	.word	0x24000638
 8001d00:	40011000 	.word	0x40011000

08001d04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <MX_DMA_Init+0x6c>)
 8001d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d10:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <MX_DMA_Init+0x6c>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <MX_DMA_Init+0x6c>)
 8001d1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2105      	movs	r1, #5
 8001d2c:	200b      	movs	r0, #11
 8001d2e:	f003 fd33 	bl	8005798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d32:	200b      	movs	r0, #11
 8001d34:	f003 fd4a 	bl	80057cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2105      	movs	r1, #5
 8001d3c:	200c      	movs	r0, #12
 8001d3e:	f003 fd2b 	bl	8005798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d42:	200c      	movs	r0, #12
 8001d44:	f003 fd42 	bl	80057cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2105      	movs	r1, #5
 8001d4c:	200d      	movs	r0, #13
 8001d4e:	f003 fd23 	bl	8005798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d52:	200d      	movs	r0, #13
 8001d54:	f003 fd3a 	bl	80057cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2105      	movs	r1, #5
 8001d5c:	2010      	movs	r0, #16
 8001d5e:	f003 fd1b 	bl	8005798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d62:	2010      	movs	r0, #16
 8001d64:	f003 fd32 	bl	80057cc <HAL_NVIC_EnableIRQ>

}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	58024400 	.word	0x58024400

08001d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <MX_GPIO_Init+0xe8>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d90:	4a32      	ldr	r2, [pc, #200]	; (8001e5c <MX_GPIO_Init+0xe8>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9a:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <MX_GPIO_Init+0xe8>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da8:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <MX_GPIO_Init+0xe8>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dae:	4a2b      	ldr	r2, [pc, #172]	; (8001e5c <MX_GPIO_Init+0xe8>)
 8001db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <MX_GPIO_Init+0xe8>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <MX_GPIO_Init+0xe8>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dcc:	4a23      	ldr	r2, [pc, #140]	; (8001e5c <MX_GPIO_Init+0xe8>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <MX_GPIO_Init+0xe8>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <MX_GPIO_Init+0xe8>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dea:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <MX_GPIO_Init+0xe8>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <MX_GPIO_Init+0xe8>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e02:	2200      	movs	r2, #0
 8001e04:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001e08:	4815      	ldr	r0, [pc, #84]	; (8001e60 <MX_GPIO_Init+0xec>)
 8001e0a:	f007 f903 	bl	8009014 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2164      	movs	r1, #100	; 0x64
 8001e12:	4814      	ldr	r0, [pc, #80]	; (8001e64 <MX_GPIO_Init+0xf0>)
 8001e14:	f007 f8fe 	bl	8009014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e18:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001e1c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480b      	ldr	r0, [pc, #44]	; (8001e60 <MX_GPIO_Init+0xec>)
 8001e32:	f006 ff27 	bl	8008c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e36:	2364      	movs	r3, #100	; 0x64
 8001e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	; (8001e64 <MX_GPIO_Init+0xf0>)
 8001e4e:	f006 ff19 	bl	8008c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	; 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	58024400 	.word	0x58024400
 8001e60:	58020800 	.word	0x58020800
 8001e64:	58020400 	.word	0x58020400

08001e68 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001e72:	2300      	movs	r3, #0
 8001e74:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	f107 0208 	add.w	r2, r7, #8
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2301      	movs	r3, #1
 8001e86:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <poll_i2c_sensor+0x7c>)
 8001e88:	f007 f97a 	bl	8009180 <HAL_I2C_Master_Transmit>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001e90:	7b7b      	ldrb	r3, [r7, #13]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001e96:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <poll_i2c_sensor+0x80>)
 8001e98:	f014 fe6e 	bl	8016b78 <puts>
 8001e9c:	e01c      	b.n	8001ed8 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	b299      	uxth	r1, r3
 8001ea2:	f107 0208 	add.w	r2, r7, #8
 8001ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2302      	movs	r3, #2
 8001eae:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <poll_i2c_sensor+0x7c>)
 8001eb0:	f007 fa7e 	bl	80093b0 <HAL_I2C_Master_Receive>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001eb8:	7b7b      	ldrb	r3, [r7, #13]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001ebe:	480b      	ldr	r0, [pc, #44]	; (8001eec <poll_i2c_sensor+0x84>)
 8001ec0:	f014 fe5a 	bl	8016b78 <puts>
 8001ec4:	e008      	b.n	8001ed8 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001ec6:	7a3b      	ldrb	r3, [r7, #8]
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001ecc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ed0:	7a7a      	ldrb	r2, [r7, #9]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	10db      	asrs	r3, r3, #3
 8001ed6:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001ed8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	24000380 	.word	0x24000380
 8001ee8:	08017528 	.word	0x08017528
 8001eec:	08017538 	.word	0x08017538

08001ef0 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001ef8:	f107 010c 	add.w	r1, r7, #12
 8001efc:	2301      	movs	r3, #1
 8001efe:	2201      	movs	r2, #1
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <receive_pmt_spi+0x44>)
 8001f02:	f00c f88f 	bl	800e024 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f0a:	7b7b      	ldrb	r3, [r7, #13]
 8001f0c:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <receive_pmt_spi+0x44>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <receive_pmt_spi+0x44>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f1c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7bba      	ldrb	r2, [r7, #14]
 8001f22:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3301      	adds	r3, #1
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	701a      	strb	r2, [r3, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	240003f8 	.word	0x240003f8

08001f38 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001f40:	f107 010c 	add.w	r1, r7, #12
 8001f44:	2364      	movs	r3, #100	; 0x64
 8001f46:	2201      	movs	r2, #1
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <receive_erpa_spi+0x44>)
 8001f4a:	f00c f86b 	bl	800e024 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f52:	7b7b      	ldrb	r3, [r7, #13]
 8001f54:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <receive_erpa_spi+0x44>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <receive_erpa_spi+0x44>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f64:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7bba      	ldrb	r2, [r7, #14]
 8001f6a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	701a      	strb	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	24000480 	.word	0x24000480

08001f80 <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <receive_erpa_adc+0x30>)
 8001f8a:	885b      	ldrh	r3, [r3, #2]
 8001f8c:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <receive_erpa_adc+0x30>)
 8001f90:	895b      	ldrh	r3, [r3, #10]
 8001f92:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	89fa      	ldrh	r2, [r7, #14]
 8001f98:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	89ba      	ldrh	r2, [r7, #12]
 8001fa0:	801a      	strh	r2, [r3, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	24000ca0 	.word	0x24000ca0

08001fb4 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001fbc:	2390      	movs	r3, #144	; 0x90
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff52 	bl	8001e68 <poll_i2c_sensor>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001fc8:	2394      	movs	r3, #148	; 0x94
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff4c 	bl	8001e68 <poll_i2c_sensor>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001fd4:	2392      	movs	r3, #146	; 0x92
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff46 	bl	8001e68 <poll_i2c_sensor>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001fe0:	2396      	movs	r3, #150	; 0x96
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff40 	bl	8001e68 <poll_i2c_sensor>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	89fa      	ldrh	r2, [r7, #14]
 8001ff0:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	89ba      	ldrh	r2, [r7, #12]
 8001ff8:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	897a      	ldrh	r2, [r7, #10]
 8002000:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3306      	adds	r3, #6
 8002006:	893a      	ldrh	r2, [r7, #8]
 8002008:	801a      	strh	r2, [r3, #0]
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <receive_hk_adc1>:
 *
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 800201c:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <receive_hk_adc1+0x90>)
 800201e:	8a9b      	ldrh	r3, [r3, #20]
 8002020:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <receive_hk_adc1+0x90>)
 8002024:	8a1b      	ldrh	r3, [r3, #16]
 8002026:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8002028:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <receive_hk_adc1+0x90>)
 800202a:	899b      	ldrh	r3, [r3, #12]
 800202c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <receive_hk_adc1+0x90>)
 8002030:	8a5b      	ldrh	r3, [r3, #18]
 8002032:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <receive_hk_adc1+0x90>)
 8002036:	889b      	ldrh	r3, [r3, #4]
 8002038:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <receive_hk_adc1+0x90>)
 800203c:	88db      	ldrh	r3, [r3, #6]
 800203e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <receive_hk_adc1+0x90>)
 8002042:	89db      	ldrh	r3, [r3, #14]
 8002044:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <receive_hk_adc1+0x90>)
 8002048:	891b      	ldrh	r3, [r3, #8]
 800204a:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <receive_hk_adc1+0x90>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	8bfa      	ldrh	r2, [r7, #30]
 8002056:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3302      	adds	r3, #2
 800205c:	8bba      	ldrh	r2, [r7, #28]
 800205e:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3304      	adds	r3, #4
 8002064:	8b7a      	ldrh	r2, [r7, #26]
 8002066:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3306      	adds	r3, #6
 800206c:	8b3a      	ldrh	r2, [r7, #24]
 800206e:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3308      	adds	r3, #8
 8002074:	8afa      	ldrh	r2, [r7, #22]
 8002076:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	330a      	adds	r3, #10
 800207c:	8aba      	ldrh	r2, [r7, #20]
 800207e:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	330c      	adds	r3, #12
 8002084:	8a7a      	ldrh	r2, [r7, #18]
 8002086:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	330e      	adds	r3, #14
 800208c:	8a3a      	ldrh	r2, [r7, #16]
 800208e:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3310      	adds	r3, #16
 8002094:	89fa      	ldrh	r2, [r7, #14]
 8002096:	801a      	strh	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	3724      	adds	r7, #36	; 0x24
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	24000ca0 	.word	0x24000ca0

080020a8 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <receive_hk_adc3+0x4c>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <receive_hk_adc3+0x4c>)
 80020b8:	885b      	ldrh	r3, [r3, #2]
 80020ba:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <receive_hk_adc3+0x4c>)
 80020be:	889b      	ldrh	r3, [r3, #4]
 80020c0:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <receive_hk_adc3+0x4c>)
 80020c4:	88db      	ldrh	r3, [r3, #6]
 80020c6:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	89fa      	ldrh	r2, [r7, #14]
 80020cc:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3302      	adds	r3, #2
 80020d2:	89ba      	ldrh	r2, [r7, #12]
 80020d4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3304      	adds	r3, #4
 80020da:	897a      	ldrh	r2, [r7, #10]
 80020dc:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3306      	adds	r3, #6
 80020e2:	893a      	ldrh	r2, [r7, #8]
 80020e4:	801a      	strh	r2, [r3, #0]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	24000cc0 	.word	0x24000cc0

080020f8 <get_current_step>:

// *********************************************************************************************************** HELPER FUNCTIONS

uint8_t get_current_step(){
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <get_current_step+0xc0>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f640 72ff 	movw	r2, #4095	; 0xfff
 800210a:	4293      	cmp	r3, r2
 800210c:	d04a      	beq.n	80021a4 <get_current_step+0xac>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002114:	da48      	bge.n	80021a8 <get_current_step+0xb0>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f640 628b 	movw	r2, #3723	; 0xe8b
 800211c:	4293      	cmp	r3, r2
 800211e:	d03f      	beq.n	80021a0 <get_current_step+0xa8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002126:	4293      	cmp	r3, r2
 8002128:	dc3e      	bgt.n	80021a8 <get_current_step+0xb0>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002130:	4293      	cmp	r3, r2
 8002132:	d033      	beq.n	800219c <get_current_step+0xa4>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 800213a:	da35      	bge.n	80021a8 <get_current_step+0xb0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002142:	4293      	cmp	r3, r2
 8002144:	d028      	beq.n	8002198 <get_current_step+0xa0>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800214c:	4293      	cmp	r3, r2
 800214e:	dc2b      	bgt.n	80021a8 <get_current_step+0xb0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f240 7245 	movw	r2, #1861	; 0x745
 8002156:	4293      	cmp	r3, r2
 8002158:	d01c      	beq.n	8002194 <get_current_step+0x9c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f240 7245 	movw	r2, #1861	; 0x745
 8002160:	4293      	cmp	r3, r2
 8002162:	dc21      	bgt.n	80021a8 <get_current_step+0xb0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800216a:	4293      	cmp	r3, r2
 800216c:	d010      	beq.n	8002190 <get_current_step+0x98>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002174:	4293      	cmp	r3, r2
 8002176:	dc17      	bgt.n	80021a8 <get_current_step+0xb0>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d004      	beq.n	8002188 <get_current_step+0x90>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002184:	d002      	beq.n	800218c <get_current_step+0x94>
 8002186:	e00f      	b.n	80021a8 <get_current_step+0xb0>
	case 0:
		return 0;
 8002188:	2300      	movs	r3, #0
 800218a:	e00e      	b.n	80021aa <get_current_step+0xb2>
	case 620:
		return 1;
 800218c:	2301      	movs	r3, #1
 800218e:	e00c      	b.n	80021aa <get_current_step+0xb2>
	case 1241:
		return 2;
 8002190:	2302      	movs	r3, #2
 8002192:	e00a      	b.n	80021aa <get_current_step+0xb2>
	case 1861:
		return 3;
 8002194:	2303      	movs	r3, #3
 8002196:	e008      	b.n	80021aa <get_current_step+0xb2>
	case 2482:
		return 4;
 8002198:	2304      	movs	r3, #4
 800219a:	e006      	b.n	80021aa <get_current_step+0xb2>
	case 3103:
		return 5;
 800219c:	2305      	movs	r3, #5
 800219e:	e004      	b.n	80021aa <get_current_step+0xb2>
	case 3723:
		return 6;
 80021a0:	2306      	movs	r3, #6
 80021a2:	e002      	b.n	80021aa <get_current_step+0xb2>
	case 4095:
		return 7;
 80021a4:	2307      	movs	r3, #7
 80021a6:	e000      	b.n	80021aa <get_current_step+0xb2>
	default:
		return -1;
 80021a8:	23ff      	movs	r3, #255	; 0xff
	}
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40007400 	.word	0x40007400

080021bc <enter_stop>:

void enter_stop(){
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 80021c0:	f000 f830 	bl	8002224 <send_ACK>

	vTaskSuspendAll();
 80021c4:	f012 fe12 	bl	8014dec <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80021c8:	2101      	movs	r1, #1
 80021ca:	2001      	movs	r0, #1
 80021cc:	f007 fd48 	bl	8009c60 <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	xTaskResumeAll();
 80021d0:	f012 fe1a 	bl	8014e08 <xTaskResumeAll>
	SystemClock_Config();
 80021d4:	f7fe ff88 	bl	80010e8 <SystemClock_Config>
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}

080021dc <sync>:
	if (status != HAL_OK) {
		Error_Handler();
	}
}

void sync() {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
	// 1. Send acknowledgement (0xFF) (This tells OBC/GUI that we have woken up)
	// 2. Wait to receive RTC generated timestamp from OBC/GUI
	// 3. Calibrate our RTC from received timestamp
	// 4. Send acknowledgement (0xFF) (This tells OBC/GUI that we have calibrated our RTC, and are now in run mode)
	send_ACK();
 80021e2:	f000 f81f 	bl	8002224 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80021e6:	480d      	ldr	r0, [pc, #52]	; (800221c <sync+0x40>)
 80021e8:	f00e f8c4 	bl	8010374 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80021ec:	2364      	movs	r3, #100	; 0x64
 80021ee:	2209      	movs	r2, #9
 80021f0:	490b      	ldr	r1, [pc, #44]	; (8002220 <sync+0x44>)
 80021f2:	480a      	ldr	r0, [pc, #40]	; (800221c <sync+0x40>)
 80021f4:	f00d ff2a 	bl	801004c <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <sync+0x44>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2bff      	cmp	r3, #255	; 0xff
 8002202:	d1f3      	bne.n	80021ec <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER);
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002204:	2201      	movs	r2, #1
 8002206:	4906      	ldr	r1, [pc, #24]	; (8002220 <sync+0x44>)
 8002208:	4804      	ldr	r0, [pc, #16]	; (800221c <sync+0x40>)
 800220a:	f00d ffe7 	bl	80101dc <HAL_UART_Receive_IT>

	send_ACK();
 800220e:	f000 f809 	bl	8002224 <send_ACK>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	24000638 	.word	0x24000638
 8002220:	24000c60 	.word	0x24000c60

08002224 <send_ACK>:


void send_ACK() {
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <send_ACK+0x1c>)
 800222a:	22ff      	movs	r2, #255	; 0xff
 800222c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800222e:	2364      	movs	r3, #100	; 0x64
 8002230:	2201      	movs	r2, #1
 8002232:	4903      	ldr	r1, [pc, #12]	; (8002240 <send_ACK+0x1c>)
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <send_ACK+0x20>)
 8002236:	f00d fe7b 	bl	800ff30 <HAL_UART_Transmit>
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	24000cc8 	.word	0x24000cc8
 8002244:	24000638 	.word	0x24000638

08002248 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <HAL_UART_TxCpltCallback+0x1c>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	24000000 	.word	0x24000000

08002268 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	4618      	mov	r0, r3
 800227a:	f014 fb09 	bl	8016890 <malloc>
 800227e:	4603      	mov	r3, r0
 8002280:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	88fa      	ldrh	r2, [r7, #6]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	4618      	mov	r0, r3
 800228a:	f014 fb11 	bl	80168b0 <memcpy>
	packet.size = size;
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	82bb      	strh	r3, [r7, #20]
	return packet;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	461a      	mov	r2, r3
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800229e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80022b0:	2100      	movs	r1, #0
 80022b2:	481d      	ldr	r0, [pc, #116]	; (8002328 <system_setup+0x7c>)
 80022b4:	f00c fab2 	bl	800e81c <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 80022b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022bc:	f44f 729c 	mov.w	r2, #312	; 0x138
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80022c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80022c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022ca:	4818      	ldr	r0, [pc, #96]	; (800232c <system_setup+0x80>)
 80022cc:	f003 f86a 	bl	80053a4 <HAL_ADCEx_Calibration_Start>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80022d6:	f000 fdd3 	bl	8002e80 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80022da:	220b      	movs	r2, #11
 80022dc:	4914      	ldr	r1, [pc, #80]	; (8002330 <system_setup+0x84>)
 80022de:	4813      	ldr	r0, [pc, #76]	; (800232c <system_setup+0x80>)
 80022e0:	f002 f93e 	bl	8004560 <HAL_ADC_Start_DMA>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80022ea:	f000 fdc9 	bl	8002e80 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80022ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80022f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022f6:	480f      	ldr	r0, [pc, #60]	; (8002334 <system_setup+0x88>)
 80022f8:	f003 f854 	bl	80053a4 <HAL_ADCEx_Calibration_Start>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002302:	f000 fdbd 	bl	8002e80 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002306:	2204      	movs	r2, #4
 8002308:	490b      	ldr	r1, [pc, #44]	; (8002338 <system_setup+0x8c>)
 800230a:	480a      	ldr	r0, [pc, #40]	; (8002334 <system_setup+0x88>)
 800230c:	f002 f928 	bl	8004560 <HAL_ADC_Start_DMA>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002316:	f000 fdb3 	bl	8002e80 <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800231a:	2201      	movs	r2, #1
 800231c:	4907      	ldr	r1, [pc, #28]	; (800233c <system_setup+0x90>)
 800231e:	4808      	ldr	r0, [pc, #32]	; (8002340 <system_setup+0x94>)
 8002320:	f00d ff5c 	bl	80101dc <HAL_UART_Receive_IT>
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	240005ec 	.word	0x240005ec
 800232c:	2400013c 	.word	0x2400013c
 8002330:	24000ca0 	.word	0x24000ca0
 8002334:	240001a0 	.word	0x240001a0
 8002338:	24000cc0 	.word	0x24000cc0
 800233c:	24000c60 	.word	0x24000c60
 8002340:	24000638 	.word	0x24000638

08002344 <get_uptime>:

void get_uptime(uint8_t *buffer) {
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 8002350:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <get_uptime+0x88>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <get_uptime+0x8c>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <get_uptime+0x88>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	429a      	cmp	r2, r3
 8002364:	d005      	beq.n	8002372 <get_uptime+0x2e>
		// Rollover occurred so read both again.
		// Must read both because we don't know whether the
		// rollover occurred before or after reading SysTick->VAL.
		// No need to check for another rollover because there is
		// no chance of another rollover occurring so quickly.
		ms = uptime_millis;
 8002366:	4b19      	ldr	r3, [pc, #100]	; (80023cc <get_uptime+0x88>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <get_uptime+0x8c>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002378:	fb03 f202 	mul.w	r2, r3, r2
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <get_uptime+0x8c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	3301      	adds	r3, #1
 8002382:	4914      	ldr	r1, [pc, #80]	; (80023d4 <get_uptime+0x90>)
 8002384:	fba1 1303 	umull	r1, r3, r1, r3
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	6939      	ldr	r1, [r7, #16]
 800238c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	0e1b      	lsrs	r3, r3, #24
 8002398:	b2da      	uxtb	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	0c1a      	lsrs	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3301      	adds	r3, #1
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	0a1a      	lsrs	r2, r3, #8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3302      	adds	r3, #2
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3303      	adds	r3, #3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	701a      	strb	r2, [r3, #0]
}
 80023c0:	bf00      	nop
 80023c2:	371c      	adds	r7, #28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	24000c40 	.word	0x24000c40
 80023d0:	e000e010 	.word	0xe000e010
 80023d4:	10624dd3 	.word	0x10624dd3

080023d8 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	2200      	movs	r2, #0
 80023e6:	4619      	mov	r1, r3
 80023e8:	4821      	ldr	r0, [pc, #132]	; (8002470 <getTimestamp+0x98>)
 80023ea:	f00b faf5 	bl	800d9d8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	2200      	movs	r2, #0
 80023f4:	4619      	mov	r1, r3
 80023f6:	481e      	ldr	r0, [pc, #120]	; (8002470 <getTimestamp+0x98>)
 80023f8:	f00b fbd2 	bl	800dba0 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2264      	movs	r2, #100	; 0x64
 8002400:	fb03 f202 	mul.w	r2, r3, r2
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <getTimestamp+0x9c>)
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3301      	adds	r3, #1
 8002414:	7b7a      	ldrb	r2, [r7, #13]
 8002416:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3302      	adds	r3, #2
 800241c:	7bba      	ldrb	r2, [r7, #14]
 800241e:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3303      	adds	r3, #3
 8002424:	7c3a      	ldrb	r2, [r7, #16]
 8002426:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	7c7a      	ldrb	r2, [r7, #17]
 800242e:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3305      	adds	r3, #5
 8002434:	7cba      	ldrb	r2, [r7, #18]
 8002436:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	0e1a      	lsrs	r2, r3, #24
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3306      	adds	r3, #6
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	0c1a      	lsrs	r2, r3, #16
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3307      	adds	r3, #7
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	0a1a      	lsrs	r2, r3, #8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3308      	adds	r3, #8
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3309      	adds	r3, #9
 8002460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]
}
 8002466:	bf00      	nop
 8002468:	3728      	adds	r7, #40	; 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	240003d4 	.word	0x240003d4
 8002474:	000f4240 	.word	0x000f4240

08002478 <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800247e:	bf00      	nop
 8002480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002484:	4833      	ldr	r0, [pc, #204]	; (8002554 <sample_pmt+0xdc>)
 8002486:	f006 fdad 	bl	8008fe4 <HAL_GPIO_ReadPin>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f7      	bne.n	8002480 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8002490:	200a      	movs	r0, #10
 8002492:	f014 f9fd 	bl	8016890 <malloc>
 8002496:	4603      	mov	r3, r0
 8002498:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800249a:	2002      	movs	r0, #2
 800249c:	f014 f9f8 	bl	8016890 <malloc>
 80024a0:	4603      	mov	r3, r0
 80024a2:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80024a4:	2004      	movs	r0, #4
 80024a6:	f014 f9f3 	bl	8016890 <malloc>
 80024aa:	4603      	mov	r3, r0
 80024ac:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f7ff ff48 	bl	8002344 <get_uptime>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 80024b4:	6938      	ldr	r0, [r7, #16]
 80024b6:	f7ff fd1b 	bl	8001ef0 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	22bb      	movs	r2, #187	; 0xbb
 80024be:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3301      	adds	r3, #1
 80024c4:	22bb      	movs	r2, #187	; 0xbb
 80024c6:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80024c8:	4b23      	ldr	r3, [pc, #140]	; (8002558 <sample_pmt+0xe0>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3302      	adds	r3, #2
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80024d8:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <sample_pmt+0xe0>)
 80024da:	881a      	ldrh	r2, [r3, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3303      	adds	r3, #3
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3304      	adds	r3, #4
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3305      	adds	r3, #5
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	7852      	ldrb	r2, [r2, #1]
 80024f6:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3306      	adds	r3, #6
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	7812      	ldrb	r2, [r2, #0]
 8002500:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3307      	adds	r3, #7
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	7852      	ldrb	r2, [r2, #1]
 800250a:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3308      	adds	r3, #8
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	7892      	ldrb	r2, [r2, #2]
 8002514:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3309      	adds	r3, #9
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	78d2      	ldrb	r2, [r2, #3]
 800251e:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	220a      	movs	r2, #10
 8002524:	6979      	ldr	r1, [r7, #20]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fe9e 	bl	8002268 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <sample_pmt+0xe4>)
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	1d39      	adds	r1, r7, #4
 8002532:	2300      	movs	r3, #0
 8002534:	2200      	movs	r2, #0
 8002536:	f010 ff4b 	bl	80133d0 <osMessageQueuePut>
	free(buffer);
 800253a:	6978      	ldr	r0, [r7, #20]
 800253c:	f014 f9b0 	bl	80168a0 <free>
	free(pmt_spi);
 8002540:	6938      	ldr	r0, [r7, #16]
 8002542:	f014 f9ad 	bl	80168a0 <free>
	free(uptime);
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f014 f9aa 	bl	80168a0 <free>
}
 800254c:	bf00      	nop
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	58020000 	.word	0x58020000
 8002558:	24000c50 	.word	0x24000c50
 800255c:	24000c44 	.word	0x24000c44

08002560 <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002566:	bf00      	nop
 8002568:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800256c:	484d      	ldr	r0, [pc, #308]	; (80026a4 <sample_erpa+0x144>)
 800256e:	f006 fd39 	bl	8008fe4 <HAL_GPIO_ReadPin>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f7      	bne.n	8002568 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002578:	200f      	movs	r0, #15
 800257a:	f014 f989 	bl	8016890 <malloc>
 800257e:	4603      	mov	r3, r0
 8002580:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002582:	2002      	movs	r0, #2
 8002584:	f014 f984 	bl	8016890 <malloc>
 8002588:	4603      	mov	r3, r0
 800258a:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 800258c:	2004      	movs	r0, #4
 800258e:	f014 f97f 	bl	8016890 <malloc>
 8002592:	4603      	mov	r3, r0
 8002594:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002596:	2004      	movs	r0, #4
 8002598:	f014 f97a 	bl	8016890 <malloc>
 800259c:	4603      	mov	r3, r0
 800259e:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 80025a0:	23ff      	movs	r3, #255	; 0xff
 80025a2:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 80025a4:	6938      	ldr	r0, [r7, #16]
 80025a6:	f7ff fecd 	bl	8002344 <get_uptime>
	sweep_step = get_current_step();
 80025aa:	f7ff fda5 	bl	80020f8 <get_current_step>
 80025ae:	4603      	mov	r3, r0
 80025b0:	73fb      	strb	r3, [r7, #15]
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 80025b2:	69b8      	ldr	r0, [r7, #24]
 80025b4:	f7ff fcc0 	bl	8001f38 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80025b8:	6978      	ldr	r0, [r7, #20]
 80025ba:	f7ff fce1 	bl	8001f80 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	22aa      	movs	r2, #170	; 0xaa
 80025c2:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	3301      	adds	r3, #1
 80025c8:	22aa      	movs	r2, #170	; 0xaa
 80025ca:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 80025cc:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <sample_erpa+0x148>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	3302      	adds	r3, #2
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 80025dc:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <sample_erpa+0x148>)
 80025de:	881a      	ldrh	r2, [r3, #0]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	3303      	adds	r3, #3
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]
	buffer[4] = sweep_step;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3304      	adds	r3, #4
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	701a      	strb	r2, [r3, #0]
	buffer[5] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	3305      	adds	r3, #5
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]
	buffer[6] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	881a      	ldrh	r2, [r3, #0]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	3306      	adds	r3, #6
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3302      	adds	r3, #2
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	b29a      	uxth	r2, r3
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3307      	adds	r3, #7
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]
	buffer[8] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3302      	adds	r3, #2
 8002622:	881a      	ldrh	r2, [r3, #0]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	3308      	adds	r3, #8
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[0];					// ERPA eADC MSB
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	3309      	adds	r3, #9
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	701a      	strb	r2, [r3, #0]
	buffer[10] = erpa_spi[1];					// ERPA eADC LSB
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	330a      	adds	r3, #10
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	7852      	ldrb	r2, [r2, #1]
 800263e:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[0];
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	330b      	adds	r3, #11
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[1];
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	330c      	adds	r3, #12
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	7852      	ldrb	r2, [r2, #1]
 8002652:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[2];
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	330d      	adds	r3, #13
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	7892      	ldrb	r2, [r2, #2]
 800265c:	701a      	strb	r2, [r3, #0]
	buffer[14] = uptime[3];
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	330e      	adds	r3, #14
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	78d2      	ldrb	r2, [r2, #3]
 8002666:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	220f      	movs	r2, #15
 800266c:	69f9      	ldr	r1, [r7, #28]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fdfa 	bl	8002268 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002674:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <sample_erpa+0x14c>)
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	1d39      	adds	r1, r7, #4
 800267a:	2300      	movs	r3, #0
 800267c:	2200      	movs	r2, #0
 800267e:	f010 fea7 	bl	80133d0 <osMessageQueuePut>
	free(buffer);
 8002682:	69f8      	ldr	r0, [r7, #28]
 8002684:	f014 f90c 	bl	80168a0 <free>
	free(erpa_spi);
 8002688:	69b8      	ldr	r0, [r7, #24]
 800268a:	f014 f909 	bl	80168a0 <free>
	free(erpa_adc);
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f014 f906 	bl	80168a0 <free>
	free(uptime);
 8002694:	6938      	ldr	r0, [r7, #16]
 8002696:	f014 f903 	bl	80168a0 <free>
}
 800269a:	bf00      	nop
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	58020400 	.word	0x58020400
 80026a8:	24000c52 	.word	0x24000c52
 80026ac:	24000c44 	.word	0x24000c44

080026b0 <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 80026b6:	2030      	movs	r0, #48	; 0x30
 80026b8:	f014 f8ea 	bl	8016890 <malloc>
 80026bc:	4603      	mov	r3, r0
 80026be:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80026c0:	2008      	movs	r0, #8
 80026c2:	f014 f8e5 	bl	8016890 <malloc>
 80026c6:	4603      	mov	r3, r0
 80026c8:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 80026ca:	200a      	movs	r0, #10
 80026cc:	f014 f8e0 	bl	8016890 <malloc>
 80026d0:	4603      	mov	r3, r0
 80026d2:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f7ff fe7f 	bl	80023d8 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <sample_hk+0x78>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026e2:	db25      	blt.n	8002730 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 80026e4:	6938      	ldr	r0, [r7, #16]
 80026e6:	f7ff fc65 	bl	8001fb4 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <sample_hk+0x7c>)
 80026f4:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	3302      	adds	r3, #2
 80026fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <sample_hk+0x7c>)
 8002702:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	3304      	adds	r3, #4
 8002708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270c:	b29a      	uxth	r2, r3
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <sample_hk+0x7c>)
 8002710:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	3306      	adds	r3, #6
 8002716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271a:	b29a      	uxth	r2, r3
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <sample_hk+0x7c>)
 800271e:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 8002720:	4b01      	ldr	r3, [pc, #4]	; (8002728 <sample_hk+0x78>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e01f      	b.n	8002768 <sample_hk+0xb8>
 8002728:	24000004 	.word	0x24000004
 800272c:	24000ccc 	.word	0x24000ccc
	} else {
		TEMPERATURE_COUNTER++;
 8002730:	4b9f      	ldr	r3, [pc, #636]	; (80029b0 <sample_hk+0x300>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	4a9e      	ldr	r2, [pc, #632]	; (80029b0 <sample_hk+0x300>)
 8002738:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 800273a:	4b9e      	ldr	r3, [pc, #632]	; (80029b4 <sample_hk+0x304>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b21a      	sxth	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 8002744:	4b9b      	ldr	r3, [pc, #620]	; (80029b4 <sample_hk+0x304>)
 8002746:	885a      	ldrh	r2, [r3, #2]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	3302      	adds	r3, #2
 800274c:	b212      	sxth	r2, r2
 800274e:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 8002750:	4b98      	ldr	r3, [pc, #608]	; (80029b4 <sample_hk+0x304>)
 8002752:	889a      	ldrh	r2, [r3, #4]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	3304      	adds	r3, #4
 8002758:	b212      	sxth	r2, r2
 800275a:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 800275c:	4b95      	ldr	r3, [pc, #596]	; (80029b4 <sample_hk+0x304>)
 800275e:	88da      	ldrh	r2, [r3, #6]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	3306      	adds	r3, #6
 8002764:	b212      	sxth	r2, r2
 8002766:	801a      	strh	r2, [r3, #0]
	}

#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	22cc      	movs	r2, #204	; 0xcc
 800276c:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3301      	adds	r3, #1
 8002772:	22cc      	movs	r2, #204	; 0xcc
 8002774:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002776:	4b90      	ldr	r3, [pc, #576]	; (80029b8 <sample_hk+0x308>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	b29a      	uxth	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3302      	adds	r3, #2
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002786:	4b8c      	ldr	r3, [pc, #560]	; (80029b8 <sample_hk+0x308>)
 8002788:	881a      	ldrh	r2, [r3, #0]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	3303      	adds	r3, #3
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 8002792:	4b8a      	ldr	r3, [pc, #552]	; (80029bc <sample_hk+0x30c>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	b29a      	uxth	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3304      	adds	r3, #4
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 80027a2:	4b86      	ldr	r3, [pc, #536]	; (80029bc <sample_hk+0x30c>)
 80027a4:	881a      	ldrh	r2, [r3, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3305      	adds	r3, #5
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 80027ae:	4b84      	ldr	r3, [pc, #528]	; (80029c0 <sample_hk+0x310>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3306      	adds	r3, #6
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 80027be:	4b80      	ldr	r3, [pc, #512]	; (80029c0 <sample_hk+0x310>)
 80027c0:	881a      	ldrh	r2, [r3, #0]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3307      	adds	r3, #7
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d0:	121a      	asrs	r2, r3, #8
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3308      	adds	r3, #8
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3309      	adds	r3, #9
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	3302      	adds	r3, #2
 80027ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f0:	121a      	asrs	r2, r3, #8
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	330a      	adds	r3, #10
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	3302      	adds	r3, #2
 80027fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	330b      	adds	r3, #11
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	3304      	adds	r3, #4
 800280e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002812:	121a      	asrs	r2, r3, #8
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	330c      	adds	r3, #12
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	3304      	adds	r3, #4
 8002820:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	330d      	adds	r3, #13
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	3306      	adds	r3, #6
 8002830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002834:	121a      	asrs	r2, r3, #8
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	330e      	adds	r3, #14
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	3306      	adds	r3, #6
 8002842:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	330f      	adds	r3, #15
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 800284e:	4b5d      	ldr	r3, [pc, #372]	; (80029c4 <sample_hk+0x314>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	b29a      	uxth	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3310      	adds	r3, #16
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 800285e:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <sample_hk+0x314>)
 8002860:	881a      	ldrh	r2, [r3, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3311      	adds	r3, #17
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 800286a:	4b57      	ldr	r3, [pc, #348]	; (80029c8 <sample_hk+0x318>)
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	b29a      	uxth	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3312      	adds	r3, #18
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 800287a:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <sample_hk+0x318>)
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3313      	adds	r3, #19
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002886:	4b51      	ldr	r3, [pc, #324]	; (80029cc <sample_hk+0x31c>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	b29a      	uxth	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	3314      	adds	r3, #20
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002896:	4b4d      	ldr	r3, [pc, #308]	; (80029cc <sample_hk+0x31c>)
 8002898:	881a      	ldrh	r2, [r3, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3315      	adds	r3, #21
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 80028a2:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <sample_hk+0x320>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3316      	adds	r3, #22
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <sample_hk+0x320>)
 80028b4:	881a      	ldrh	r2, [r3, #0]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3317      	adds	r3, #23
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 80028be:	4b45      	ldr	r3, [pc, #276]	; (80029d4 <sample_hk+0x324>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	3318      	adds	r3, #24
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <sample_hk+0x324>)
 80028d0:	881a      	ldrh	r2, [r3, #0]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3319      	adds	r3, #25
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 80028da:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <sample_hk+0x328>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	331a      	adds	r3, #26
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <sample_hk+0x328>)
 80028ec:	881a      	ldrh	r2, [r3, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	331b      	adds	r3, #27
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 80028f6:	4b39      	ldr	r3, [pc, #228]	; (80029dc <sample_hk+0x32c>)
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	331c      	adds	r3, #28
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 8002906:	4b35      	ldr	r3, [pc, #212]	; (80029dc <sample_hk+0x32c>)
 8002908:	881a      	ldrh	r2, [r3, #0]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	331d      	adds	r3, #29
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 8002912:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <sample_hk+0x330>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	b29a      	uxth	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	331e      	adds	r3, #30
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 8002922:	4b2f      	ldr	r3, [pc, #188]	; (80029e0 <sample_hk+0x330>)
 8002924:	881a      	ldrh	r2, [r3, #0]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	331f      	adds	r3, #31
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 800292e:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <sample_hk+0x334>)
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	b29a      	uxth	r2, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3320      	adds	r3, #32
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 800293e:	4b29      	ldr	r3, [pc, #164]	; (80029e4 <sample_hk+0x334>)
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3321      	adds	r3, #33	; 0x21
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <sample_hk+0x338>)
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	b29a      	uxth	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3322      	adds	r3, #34	; 0x22
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 800295a:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <sample_hk+0x338>)
 800295c:	881a      	ldrh	r2, [r3, #0]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3323      	adds	r3, #35	; 0x23
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <sample_hk+0x33c>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	b29a      	uxth	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	3324      	adds	r3, #36	; 0x24
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <sample_hk+0x33c>)
 8002978:	881a      	ldrh	r2, [r3, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3325      	adds	r3, #37	; 0x25
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3326      	adds	r3, #38	; 0x26
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	7812      	ldrb	r2, [r2, #0]
 800298a:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	3327      	adds	r3, #39	; 0x27
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	7852      	ldrb	r2, [r2, #1]
 8002994:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	3328      	adds	r3, #40	; 0x28
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	7892      	ldrb	r2, [r2, #2]
 800299e:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3329      	adds	r3, #41	; 0x29
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	78d2      	ldrb	r2, [r2, #3]
 80029a8:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	332a      	adds	r3, #42	; 0x2a
 80029ae:	e01f      	b.n	80029f0 <sample_hk+0x340>
 80029b0:	24000004 	.word	0x24000004
 80029b4:	24000ccc 	.word	0x24000ccc
 80029b8:	24000c54 	.word	0x24000c54
 80029bc:	24000c26 	.word	0x24000c26
 80029c0:	24000c28 	.word	0x24000c28
 80029c4:	24000c2a 	.word	0x24000c2a
 80029c8:	24000c2c 	.word	0x24000c2c
 80029cc:	24000c2e 	.word	0x24000c2e
 80029d0:	24000c30 	.word	0x24000c30
 80029d4:	24000c32 	.word	0x24000c32
 80029d8:	24000c34 	.word	0x24000c34
 80029dc:	24000c36 	.word	0x24000c36
 80029e0:	24000c38 	.word	0x24000c38
 80029e4:	24000c3a 	.word	0x24000c3a
 80029e8:	24000c3c 	.word	0x24000c3c
 80029ec:	24000c3e 	.word	0x24000c3e
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	7912      	ldrb	r2, [r2, #4]
 80029f4:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	332b      	adds	r3, #43	; 0x2b
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	7952      	ldrb	r2, [r2, #5]
 80029fe:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	332c      	adds	r3, #44	; 0x2c
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	7992      	ldrb	r2, [r2, #6]
 8002a08:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	332d      	adds	r3, #45	; 0x2d
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	79d2      	ldrb	r2, [r2, #7]
 8002a12:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	332e      	adds	r3, #46	; 0x2e
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	7a12      	ldrb	r2, [r2, #8]
 8002a1c:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	332f      	adds	r3, #47	; 0x2f
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	7a52      	ldrb	r2, [r2, #9]
 8002a26:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2230      	movs	r2, #48	; 0x30
 8002a2c:	6979      	ldr	r1, [r7, #20]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fc1a 	bl	8002268 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <sample_hk+0x3ac>)
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	1d39      	adds	r1, r7, #4
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f010 fcc7 	bl	80133d0 <osMessageQueuePut>

	free(buffer);
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f013 ff2c 	bl	80168a0 <free>
	free(hk_i2c);
 8002a48:	6938      	ldr	r0, [r7, #16]
 8002a4a:	f013 ff29 	bl	80168a0 <free>
	free(timestamp);
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f013 ff26 	bl	80168a0 <free>
}
 8002a54:	bf00      	nop
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	24000c44 	.word	0x24000c44

08002a60 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <PMT_init+0x38>)
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a70:	2200      	movs	r2, #0
 8002a72:	2101      	movs	r1, #1
 8002a74:	f010 fbd3 	bl	801321e <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <PMT_init+0x3c>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <PMT_init+0x30>
			sample_pmt();
 8002a80:	f7ff fcfa 	bl	8002478 <sample_pmt>
			pmt_seq++;
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <PMT_init+0x40>)
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <PMT_init+0x40>)
 8002a8e:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002a90:	f010 fa92 	bl	8012fb8 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002a94:	e7e8      	b.n	8002a68 <PMT_init+0x8>
 8002a96:	bf00      	nop
 8002a98:	24000c5c 	.word	0x24000c5c
 8002a9c:	24000c56 	.word	0x24000c56
 8002aa0:	24000c50 	.word	0x24000c50

08002aa4 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <ERPA_init+0x38>)
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	f010 fbb1 	bl	801321e <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002abc:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <ERPA_init+0x3c>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <ERPA_init+0x30>
			sample_erpa();
 8002ac4:	f7ff fd4c 	bl	8002560 <sample_erpa>
			erpa_seq++;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <ERPA_init+0x40>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <ERPA_init+0x40>)
 8002ad2:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002ad4:	f010 fa70 	bl	8012fb8 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002ad8:	e7e8      	b.n	8002aac <ERPA_init+0x8>
 8002ada:	bf00      	nop
 8002adc:	24000c5c 	.word	0x24000c5c
 8002ae0:	24000c57 	.word	0x24000c57
 8002ae4:	24000c52 	.word	0x24000c52

08002ae8 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HK_init+0x38>)
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002af8:	2200      	movs	r2, #0
 8002afa:	2104      	movs	r1, #4
 8002afc:	f010 fb8f 	bl	801321e <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HK_init+0x3c>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HK_init+0x30>
			sample_hk();
 8002b08:	f7ff fdd2 	bl	80026b0 <sample_hk>
			hk_seq++;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HK_init+0x40>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <HK_init+0x40>)
 8002b16:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 8002b18:	f010 fa4e 	bl	8012fb8 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002b1c:	e7e8      	b.n	8002af0 <HK_init+0x8>
 8002b1e:	bf00      	nop
 8002b20:	24000c5c 	.word	0x24000c5c
 8002b24:	24000c58 	.word	0x24000c58
 8002b28:	24000c54 	.word	0x24000c54

08002b2c <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002b34:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <GPIO_on_init+0x9c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f010 fa5d 	bl	8012ff8 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <GPIO_on_init+0xa0>)
 8002b40:	2104      	movs	r1, #4
 8002b42:	2201      	movs	r2, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f006 fa65 	bl	8009014 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b4a:	2064      	movs	r0, #100	; 0x64
 8002b4c:	f010 fa75 	bl	801303a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002b50:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <GPIO_on_init+0xa0>)
 8002b52:	2120      	movs	r1, #32
 8002b54:	2201      	movs	r2, #1
 8002b56:	4618      	mov	r0, r3
 8002b58:	f006 fa5c 	bl	8009014 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b5c:	2064      	movs	r0, #100	; 0x64
 8002b5e:	f010 fa6c 	bl	801303a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002b62:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <GPIO_on_init+0xa4>)
 8002b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b68:	2201      	movs	r2, #1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f006 fa52 	bl	8009014 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b70:	2064      	movs	r0, #100	; 0x64
 8002b72:	f010 fa62 	bl	801303a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002b76:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <GPIO_on_init+0xa4>)
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f006 fa49 	bl	8009014 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b82:	2064      	movs	r0, #100	; 0x64
 8002b84:	f010 fa59 	bl	801303a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <GPIO_on_init+0xa4>)
 8002b8a:	2140      	movs	r1, #64	; 0x40
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f006 fa40 	bl	8009014 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b94:	2064      	movs	r0, #100	; 0x64
 8002b96:	f010 fa50 	bl	801303a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <GPIO_on_init+0xa4>)
 8002b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f006 fa36 	bl	8009014 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ba8:	2064      	movs	r0, #100	; 0x64
 8002baa:	f010 fa46 	bl	801303a <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <GPIO_on_init+0xa4>)
 8002bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f006 fa2c 	bl	8009014 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002bbc:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <GPIO_on_init+0x9c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f010 fa19 	bl	8012ff8 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002bc6:	e7ba      	b.n	8002b3e <GPIO_on_init+0x12>
 8002bc8:	24000750 	.word	0x24000750
 8002bcc:	58020400 	.word	0x58020400
 8002bd0:	58020800 	.word	0x58020800

08002bd4 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002bdc:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <GPIO_off_init+0x9c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f010 fa09 	bl	8012ff8 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002be6:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <GPIO_off_init+0xa0>)
 8002be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bec:	2200      	movs	r2, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f006 fa10 	bl	8009014 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bf4:	2064      	movs	r0, #100	; 0x64
 8002bf6:	f010 fa20 	bl	801303a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <GPIO_off_init+0xa0>)
 8002bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c00:	2200      	movs	r2, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f006 fa06 	bl	8009014 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c08:	2064      	movs	r0, #100	; 0x64
 8002c0a:	f010 fa16 	bl	801303a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002c0e:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <GPIO_off_init+0xa0>)
 8002c10:	2140      	movs	r1, #64	; 0x40
 8002c12:	2200      	movs	r2, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f006 f9fd 	bl	8009014 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c1a:	2064      	movs	r0, #100	; 0x64
 8002c1c:	f010 fa0d 	bl	801303a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <GPIO_off_init+0xa0>)
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	2200      	movs	r2, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f006 f9f4 	bl	8009014 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c2c:	2064      	movs	r0, #100	; 0x64
 8002c2e:	f010 fa04 	bl	801303a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <GPIO_off_init+0xa0>)
 8002c34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f006 f9ea 	bl	8009014 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c40:	2064      	movs	r0, #100	; 0x64
 8002c42:	f010 f9fa 	bl	801303a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <GPIO_off_init+0xa4>)
 8002c48:	2120      	movs	r1, #32
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f006 f9e1 	bl	8009014 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c52:	2064      	movs	r0, #100	; 0x64
 8002c54:	f010 f9f1 	bl	801303a <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002c58:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <GPIO_off_init+0xa4>)
 8002c5a:	2104      	movs	r1, #4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f006 f9d8 	bl	8009014 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002c64:	4b02      	ldr	r3, [pc, #8]	; (8002c70 <GPIO_off_init+0x9c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f010 f9c5 	bl	8012ff8 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002c6e:	e7ba      	b.n	8002be6 <GPIO_off_init+0x12>
 8002c70:	240009b0 	.word	0x240009b0
 8002c74:	58020800 	.word	0x58020800
 8002c78:	58020400 	.word	0x58020400

08002c7c <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <UART_TX_init+0xa4>)
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c94:	2200      	movs	r2, #0
 8002c96:	4923      	ldr	r1, [pc, #140]	; (8002d24 <UART_TX_init+0xa8>)
 8002c98:	f010 fbfa 	bl	8013490 <osMessageQueueGet>
 8002c9c:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d120      	bne.n	8002ce6 <UART_TX_init+0x6a>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <UART_TX_init+0xa8>)
 8002ca6:	889b      	ldrh	r3, [r3, #4]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4413      	add	r3, r2
 8002cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cb2:	d218      	bcs.n	8002ce6 <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a1c      	ldr	r2, [pc, #112]	; (8002d28 <UART_TX_init+0xac>)
 8002cb8:	4413      	add	r3, r2
 8002cba:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <UART_TX_init+0xa8>)
 8002cbc:	6811      	ldr	r1, [r2, #0]
 8002cbe:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <UART_TX_init+0xa8>)
 8002cc0:	8892      	ldrh	r2, [r2, #4]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f013 fdf4 	bl	80168b0 <memcpy>
					free(msg.array);
 8002cc8:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <UART_TX_init+0xa8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f013 fde7 	bl	80168a0 <free>
					total_size += msg.size;
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <UART_TX_init+0xa8>)
 8002cd4:	889b      	ldrh	r3, [r3, #4]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 8002ce4:	d203      	bcs.n	8002cee <UART_TX_init+0x72>
						break;
					}
				}
			}
		} while (status == osOK);
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0cf      	beq.n	8002c8c <UART_TX_init+0x10>
 8002cec:	e000      	b.n	8002cf0 <UART_TX_init+0x74>
						break;
 8002cee:	bf00      	nop

		if (total_size > 0) {
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d010      	beq.n	8002d18 <UART_TX_init+0x9c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	490a      	ldr	r1, [pc, #40]	; (8002d28 <UART_TX_init+0xac>)
 8002cfe:	480b      	ldr	r0, [pc, #44]	; (8002d2c <UART_TX_init+0xb0>)
 8002d00:	f00d fab8 	bl	8010274 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002d04:	e001      	b.n	8002d0a <UART_TX_init+0x8e>
				osThreadYield();
 8002d06:	f010 f957 	bl	8012fb8 <osThreadYield>
			while (tx_flag == 0) {
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <UART_TX_init+0xb4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f9      	beq.n	8002d06 <UART_TX_init+0x8a>
			}

			// Reset the flag
			tx_flag = 0;
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <UART_TX_init+0xb4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002d18:	f010 f94e 	bl	8012fb8 <osThreadYield>
		total_size = 0;
 8002d1c:	e7b4      	b.n	8002c88 <UART_TX_init+0xc>
 8002d1e:	bf00      	nop
 8002d20:	24000c44 	.word	0x24000c44
 8002d24:	24000c48 	.word	0x24000c48
 8002d28:	24000cd4 	.word	0x24000cd4
 8002d2c:	24000638 	.word	0x24000638
 8002d30:	24000000 	.word	0x24000000

08002d34 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint

	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <Voltage_Monitor_init+0xb4>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d44:	2200      	movs	r2, #0
 8002d46:	2108      	movs	r1, #8
 8002d48:	f010 fa69 	bl	801321e <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(9 * sizeof(uint16_t));
 8002d4c:	2012      	movs	r0, #18
 8002d4e:	f013 fd9f 	bl	8016890 <malloc>
 8002d52:	4603      	mov	r3, r0
 8002d54:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002d56:	2008      	movs	r0, #8
 8002d58:	f013 fd9a 	bl	8016890 <malloc>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff f957 	bl	8002014 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002d66:	68b8      	ldr	r0, [r7, #8]
 8002d68:	f7ff f99e 	bl	80020a8 <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	885a      	ldrh	r2, [r3, #2]
 8002d70:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <Voltage_Monitor_init+0xb8>)
 8002d72:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	881a      	ldrh	r2, [r3, #0]
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <Voltage_Monitor_init+0xbc>)
 8002d7a:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	881a      	ldrh	r2, [r3, #0]
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <Voltage_Monitor_init+0xc0>)
 8002d82:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	885a      	ldrh	r2, [r3, #2]
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <Voltage_Monitor_init+0xc4>)
 8002d8a:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	889a      	ldrh	r2, [r3, #4]
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <Voltage_Monitor_init+0xc8>)
 8002d92:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	88da      	ldrh	r2, [r3, #6]
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <Voltage_Monitor_init+0xcc>)
 8002d9a:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	899a      	ldrh	r2, [r3, #12]
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <Voltage_Monitor_init+0xd0>)
 8002da2:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	88da      	ldrh	r2, [r3, #6]
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <Voltage_Monitor_init+0xd4>)
 8002daa:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	889a      	ldrh	r2, [r3, #4]
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <Voltage_Monitor_init+0xd8>)
 8002db2:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	89da      	ldrh	r2, [r3, #14]
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <Voltage_Monitor_init+0xdc>)
 8002dba:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8a1a      	ldrh	r2, [r3, #16]
 8002dc0:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <Voltage_Monitor_init+0xe0>)
 8002dc2:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	891a      	ldrh	r2, [r3, #8]
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <Voltage_Monitor_init+0xe4>)
 8002dca:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	895a      	ldrh	r2, [r3, #10]
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <Voltage_Monitor_init+0xe8>)
 8002dd2:	801a      	strh	r2, [r3, #0]
//			if (!in_range(_n800v, 3018, 3336)) {
//				error_protocol(RAIL_n800v);
//			}
//		}

		free(hk_adc1);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f013 fd63 	bl	80168a0 <free>
		free(hk_adc3);
 8002dda:	68b8      	ldr	r0, [r7, #8]
 8002ddc:	f013 fd60 	bl	80168a0 <free>

		osThreadYield();
 8002de0:	f010 f8ea 	bl	8012fb8 <osThreadYield>
	for (;;) {
 8002de4:	e7aa      	b.n	8002d3c <Voltage_Monitor_init+0x8>
 8002de6:	bf00      	nop
 8002de8:	24000c5c 	.word	0x24000c5c
 8002dec:	24000c26 	.word	0x24000c26
 8002df0:	24000c28 	.word	0x24000c28
 8002df4:	24000c2a 	.word	0x24000c2a
 8002df8:	24000c2c 	.word	0x24000c2c
 8002dfc:	24000c2e 	.word	0x24000c2e
 8002e00:	24000c30 	.word	0x24000c30
 8002e04:	24000c32 	.word	0x24000c32
 8002e08:	24000c34 	.word	0x24000c34
 8002e0c:	24000c36 	.word	0x24000c36
 8002e10:	24000c38 	.word	0x24000c38
 8002e14:	24000c3a 	.word	0x24000c3a
 8002e18:	24000c3c 	.word	0x24000c3c
 8002e1c:	24000c3e 	.word	0x24000c3e

08002e20 <FLAG_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
  /* Infinite loop */
  for(;;)
  {
		int current_flag = osEventFlagsGet(event_flags);
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <FLAG_init+0x38>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f010 f9d5 	bl	80131dc <osEventFlagsGet>
 8002e32:	4603      	mov	r3, r0
 8002e34:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 0316 	and.w	r3, r3, #22
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <FLAG_init+0x38>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2116      	movs	r1, #22
 8002e46:	4618      	mov	r0, r3
 8002e48:	f010 f996 	bl	8013178 <osEventFlagsClear>
			enter_stop();
 8002e4c:	f7ff f9b6 	bl	80021bc <enter_stop>
		}
    osDelay(1);
 8002e50:	2001      	movs	r0, #1
 8002e52:	f010 f8f2 	bl	801303a <osDelay>
  {
 8002e56:	e7e7      	b.n	8002e28 <FLAG_init+0x8>
 8002e58:	24000c5c 	.word	0x24000c5c

08002e5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e6e:	f000 ff85 	bl	8003d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40001000 	.word	0x40001000

08002e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e84:	b672      	cpsid	i
}
 8002e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002e88:	e7fe      	b.n	8002e88 <Error_Handler+0x8>
	...

08002e8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e92:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <HAL_MspInit+0x38>)
 8002e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e98:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <HAL_MspInit+0x38>)
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <HAL_MspInit+0x38>)
 8002ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	210f      	movs	r1, #15
 8002eb4:	f06f 0001 	mvn.w	r0, #1
 8002eb8:	f002 fc6e 	bl	8005798 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	58024400 	.word	0x58024400

08002ec8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08e      	sub	sp, #56	; 0x38
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a7b      	ldr	r2, [pc, #492]	; (80030d4 <HAL_ADC_MspInit+0x20c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	f040 8091 	bne.w	800300e <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002eec:	4b7a      	ldr	r3, [pc, #488]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8002eee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ef2:	4a79      	ldr	r2, [pc, #484]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8002ef4:	f043 0320 	orr.w	r3, r3, #32
 8002ef8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002efc:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8002efe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f0a:	4b73      	ldr	r3, [pc, #460]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8002f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f10:	4a71      	ldr	r2, [pc, #452]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8002f12:	f043 0304 	orr.w	r3, r3, #4
 8002f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f1a:	4b6f      	ldr	r3, [pc, #444]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8002f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f28:	4b6b      	ldr	r3, [pc, #428]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8002f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2e:	4a6a      	ldr	r2, [pc, #424]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f38:	4b67      	ldr	r3, [pc, #412]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8002f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f46:	4b64      	ldr	r3, [pc, #400]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8002f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f4c:	4a62      	ldr	r2, [pc, #392]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8002f4e:	f043 0302 	orr.w	r3, r3, #2
 8002f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f56:	4b60      	ldr	r3, [pc, #384]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8002f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002f64:	2333      	movs	r3, #51	; 0x33
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f74:	4619      	mov	r1, r3
 8002f76:	4859      	ldr	r0, [pc, #356]	; (80030dc <HAL_ADC_MspInit+0x214>)
 8002f78:	f005 fe84 	bl	8008c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002f7c:	23ce      	movs	r3, #206	; 0xce
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f80:	2303      	movs	r3, #3
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4854      	ldr	r0, [pc, #336]	; (80030e0 <HAL_ADC_MspInit+0x218>)
 8002f90:	f005 fe78 	bl	8008c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f94:	2303      	movs	r3, #3
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	484f      	ldr	r0, [pc, #316]	; (80030e4 <HAL_ADC_MspInit+0x21c>)
 8002fa8:	f005 fe6c 	bl	8008c84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002fac:	4b4e      	ldr	r3, [pc, #312]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8002fae:	4a4f      	ldr	r2, [pc, #316]	; (80030ec <HAL_ADC_MspInit+0x224>)
 8002fb0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002fb2:	4b4d      	ldr	r3, [pc, #308]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8002fb4:	2209      	movs	r2, #9
 8002fb6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fb8:	4b4b      	ldr	r3, [pc, #300]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fbe:	4b4a      	ldr	r3, [pc, #296]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fc4:	4b48      	ldr	r3, [pc, #288]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8002fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fcc:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8002fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fd2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fd4:	4b44      	ldr	r3, [pc, #272]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8002fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fda:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fdc:	4b42      	ldr	r3, [pc, #264]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8002fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fe2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002fe4:	4b40      	ldr	r3, [pc, #256]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fea:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ff0:	483d      	ldr	r0, [pc, #244]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8002ff2:	f002 ffff 	bl	8005ff4 <HAL_DMA_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002ffc:	f7ff ff40 	bl	8002e80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a39      	ldr	r2, [pc, #228]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8003004:	64da      	str	r2, [r3, #76]	; 0x4c
 8003006:	4a38      	ldr	r2, [pc, #224]	; (80030e8 <HAL_ADC_MspInit+0x220>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800300c:	e05e      	b.n	80030cc <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a37      	ldr	r2, [pc, #220]	; (80030f0 <HAL_ADC_MspInit+0x228>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d159      	bne.n	80030cc <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003018:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 800301a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800301e:	4a2e      	ldr	r2, [pc, #184]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8003020:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 800302a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800302e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003036:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8003038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800303c:	4a26      	ldr	r2, [pc, #152]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003046:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_ADC_MspInit+0x210>)
 8003048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003054:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003058:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800305c:	f000 feba 	bl	8003dd4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003060:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003064:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003068:	f000 feb4 	bl	8003dd4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 800306e:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <HAL_ADC_MspInit+0x230>)
 8003070:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 8003074:	2273      	movs	r2, #115	; 0x73
 8003076:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003078:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 8003080:	2200      	movs	r2, #0
 8003082:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003084:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 8003086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800308a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 800308e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003092:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003094:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 8003096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800309a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800309c:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 800309e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030a2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80030a4:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80030b0:	4810      	ldr	r0, [pc, #64]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 80030b2:	f002 ff9f 	bl	8005ff4 <HAL_DMA_Init>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 80030bc:	f7ff fee0 	bl	8002e80 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a0c      	ldr	r2, [pc, #48]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 80030c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80030c6:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <HAL_ADC_MspInit+0x22c>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6393      	str	r3, [r2, #56]	; 0x38
}
 80030cc:	bf00      	nop
 80030ce:	3738      	adds	r7, #56	; 0x38
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40022000 	.word	0x40022000
 80030d8:	58024400 	.word	0x58024400
 80030dc:	58020800 	.word	0x58020800
 80030e0:	58020000 	.word	0x58020000
 80030e4:	58020400 	.word	0x58020400
 80030e8:	24000204 	.word	0x24000204
 80030ec:	40020010 	.word	0x40020010
 80030f0:	58026000 	.word	0x58026000
 80030f4:	2400027c 	.word	0x2400027c
 80030f8:	40020028 	.word	0x40020028

080030fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a34      	ldr	r2, [pc, #208]	; (80031ec <HAL_DAC_MspInit+0xf0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d161      	bne.n	80031e2 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800311e:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <HAL_DAC_MspInit+0xf4>)
 8003120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003124:	4a32      	ldr	r2, [pc, #200]	; (80031f0 <HAL_DAC_MspInit+0xf4>)
 8003126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800312a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800312e:	4b30      	ldr	r3, [pc, #192]	; (80031f0 <HAL_DAC_MspInit+0xf4>)
 8003130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313c:	4b2c      	ldr	r3, [pc, #176]	; (80031f0 <HAL_DAC_MspInit+0xf4>)
 800313e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003142:	4a2b      	ldr	r2, [pc, #172]	; (80031f0 <HAL_DAC_MspInit+0xf4>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800314c:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <HAL_DAC_MspInit+0xf4>)
 800314e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800315a:	2310      	movs	r3, #16
 800315c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800315e:	2303      	movs	r3, #3
 8003160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	4619      	mov	r1, r3
 800316c:	4821      	ldr	r0, [pc, #132]	; (80031f4 <HAL_DAC_MspInit+0xf8>)
 800316e:	f005 fd89 	bl	8008c84 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8003172:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 8003174:	4a21      	ldr	r2, [pc, #132]	; (80031fc <HAL_DAC_MspInit+0x100>)
 8003176:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003178:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 800317a:	2243      	movs	r2, #67	; 0x43
 800317c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800317e:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 8003180:	2240      	movs	r2, #64	; 0x40
 8003182:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003184:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 8003186:	2200      	movs	r2, #0
 8003188:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800318a:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 800318c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003190:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 8003194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003198:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800319a:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 800319c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031a0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 80031a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031a8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80031b6:	4810      	ldr	r0, [pc, #64]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 80031b8:	f002 ff1c 	bl	8005ff4 <HAL_DMA_Init>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80031c2:	f7ff fe5d 	bl	8002e80 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a0b      	ldr	r2, [pc, #44]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <HAL_DAC_MspInit+0xfc>)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2105      	movs	r1, #5
 80031d6:	2036      	movs	r0, #54	; 0x36
 80031d8:	f002 fade 	bl	8005798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031dc:	2036      	movs	r0, #54	; 0x36
 80031de:	f002 faf5 	bl	80057cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80031e2:	bf00      	nop
 80031e4:	3728      	adds	r7, #40	; 0x28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40007400 	.word	0x40007400
 80031f0:	58024400 	.word	0x58024400
 80031f4:	58020000 	.word	0x58020000
 80031f8:	24000308 	.word	0x24000308
 80031fc:	40020088 	.word	0x40020088

08003200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b0ba      	sub	sp, #232	; 0xe8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003218:	f107 0310 	add.w	r3, r7, #16
 800321c:	22c0      	movs	r2, #192	; 0xc0
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f013 fb53 	bl	80168cc <memset>
  if(hi2c->Instance==I2C1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a27      	ldr	r2, [pc, #156]	; (80032c8 <HAL_I2C_MspInit+0xc8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d146      	bne.n	80032be <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003230:	f04f 0208 	mov.w	r2, #8
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800323c:	2300      	movs	r3, #0
 800323e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003242:	f107 0310 	add.w	r3, r7, #16
 8003246:	4618      	mov	r0, r3
 8003248:	f007 fda8 	bl	800ad9c <HAL_RCCEx_PeriphCLKConfig>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003252:	f7ff fe15 	bl	8002e80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_I2C_MspInit+0xcc>)
 8003258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325c:	4a1b      	ldr	r2, [pc, #108]	; (80032cc <HAL_I2C_MspInit+0xcc>)
 800325e:	f043 0302 	orr.w	r3, r3, #2
 8003262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003266:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_I2C_MspInit+0xcc>)
 8003268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003274:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003278:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800327c:	2312      	movs	r3, #18
 800327e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003288:	2300      	movs	r3, #0
 800328a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800328e:	2304      	movs	r3, #4
 8003290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003294:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003298:	4619      	mov	r1, r3
 800329a:	480d      	ldr	r0, [pc, #52]	; (80032d0 <HAL_I2C_MspInit+0xd0>)
 800329c:	f005 fcf2 	bl	8008c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032a0:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_I2C_MspInit+0xcc>)
 80032a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <HAL_I2C_MspInit+0xcc>)
 80032a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_I2C_MspInit+0xcc>)
 80032b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032be:	bf00      	nop
 80032c0:	37e8      	adds	r7, #232	; 0xe8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40005400 	.word	0x40005400
 80032cc:	58024400 	.word	0x58024400
 80032d0:	58020400 	.word	0x58020400

080032d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b0b2      	sub	sp, #200	; 0xc8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032dc:	f107 0308 	add.w	r3, r7, #8
 80032e0:	22c0      	movs	r2, #192	; 0xc0
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f013 faf1 	bl	80168cc <memset>
  if(hrtc->Instance==RTC)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a10      	ldr	r2, [pc, #64]	; (8003330 <HAL_RTC_MspInit+0x5c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d118      	bne.n	8003326 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RTC_MspInit+0x60>)
 8003302:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003306:	f107 0308 	add.w	r3, r7, #8
 800330a:	4618      	mov	r0, r3
 800330c:	f007 fd46 	bl	800ad9c <HAL_RCCEx_PeriphCLKConfig>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003316:	f7ff fdb3 	bl	8002e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <HAL_RTC_MspInit+0x64>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	4a06      	ldr	r2, [pc, #24]	; (8003338 <HAL_RTC_MspInit+0x64>)
 8003320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003324:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003326:	bf00      	nop
 8003328:	37c8      	adds	r7, #200	; 0xc8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	58004000 	.word	0x58004000
 8003334:	00019300 	.word	0x00019300
 8003338:	58024400 	.word	0x58024400

0800333c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b0bc      	sub	sp, #240	; 0xf0
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003344:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003354:	f107 0318 	add.w	r3, r7, #24
 8003358:	22c0      	movs	r2, #192	; 0xc0
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f013 fab5 	bl	80168cc <memset>
  if(hspi->Instance==SPI1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a4c      	ldr	r2, [pc, #304]	; (8003498 <HAL_SPI_MspInit+0x15c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d145      	bne.n	80033f8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800336c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003378:	2300      	movs	r3, #0
 800337a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800337c:	f107 0318 	add.w	r3, r7, #24
 8003380:	4618      	mov	r0, r3
 8003382:	f007 fd0b 	bl	800ad9c <HAL_RCCEx_PeriphCLKConfig>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800338c:	f7ff fd78 	bl	8002e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003390:	4b42      	ldr	r3, [pc, #264]	; (800349c <HAL_SPI_MspInit+0x160>)
 8003392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003396:	4a41      	ldr	r2, [pc, #260]	; (800349c <HAL_SPI_MspInit+0x160>)
 8003398:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800339c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033a0:	4b3e      	ldr	r3, [pc, #248]	; (800349c <HAL_SPI_MspInit+0x160>)
 80033a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ae:	4b3b      	ldr	r3, [pc, #236]	; (800349c <HAL_SPI_MspInit+0x160>)
 80033b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b4:	4a39      	ldr	r2, [pc, #228]	; (800349c <HAL_SPI_MspInit+0x160>)
 80033b6:	f043 0302 	orr.w	r3, r3, #2
 80033ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033be:	4b37      	ldr	r3, [pc, #220]	; (800349c <HAL_SPI_MspInit+0x160>)
 80033c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80033cc:	2318      	movs	r3, #24
 80033ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d2:	2302      	movs	r3, #2
 80033d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2300      	movs	r3, #0
 80033e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033e4:	2305      	movs	r3, #5
 80033e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033ee:	4619      	mov	r1, r3
 80033f0:	482b      	ldr	r0, [pc, #172]	; (80034a0 <HAL_SPI_MspInit+0x164>)
 80033f2:	f005 fc47 	bl	8008c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80033f6:	e04a      	b.n	800348e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a29      	ldr	r2, [pc, #164]	; (80034a4 <HAL_SPI_MspInit+0x168>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d145      	bne.n	800348e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003402:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800340e:	2300      	movs	r3, #0
 8003410:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003412:	f107 0318 	add.w	r3, r7, #24
 8003416:	4618      	mov	r0, r3
 8003418:	f007 fcc0 	bl	800ad9c <HAL_RCCEx_PeriphCLKConfig>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8003422:	f7ff fd2d 	bl	8002e80 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_SPI_MspInit+0x160>)
 8003428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800342c:	4a1b      	ldr	r2, [pc, #108]	; (800349c <HAL_SPI_MspInit+0x160>)
 800342e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003432:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_SPI_MspInit+0x160>)
 8003438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800343c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_SPI_MspInit+0x160>)
 8003446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344a:	4a14      	ldr	r2, [pc, #80]	; (800349c <HAL_SPI_MspInit+0x160>)
 800344c:	f043 0302 	orr.w	r3, r3, #2
 8003450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_SPI_MspInit+0x160>)
 8003456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003462:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346a:	2302      	movs	r3, #2
 800346c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800347c:	2305      	movs	r3, #5
 800347e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003482:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003486:	4619      	mov	r1, r3
 8003488:	4805      	ldr	r0, [pc, #20]	; (80034a0 <HAL_SPI_MspInit+0x164>)
 800348a:	f005 fbfb 	bl	8008c84 <HAL_GPIO_Init>
}
 800348e:	bf00      	nop
 8003490:	37f0      	adds	r7, #240	; 0xf0
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40013000 	.word	0x40013000
 800349c:	58024400 	.word	0x58024400
 80034a0:	58020400 	.word	0x58020400
 80034a4:	40003800 	.word	0x40003800

080034a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a46      	ldr	r2, [pc, #280]	; (80035d0 <HAL_TIM_Base_MspInit+0x128>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d12f      	bne.n	800351a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ba:	4b46      	ldr	r3, [pc, #280]	; (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80034bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034c0:	4a44      	ldr	r2, [pc, #272]	; (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034ca:	4b42      	ldr	r3, [pc, #264]	; (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80034cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80034d8:	2200      	movs	r2, #0
 80034da:	2105      	movs	r1, #5
 80034dc:	2018      	movs	r0, #24
 80034de:	f002 f95b 	bl	8005798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80034e2:	2018      	movs	r0, #24
 80034e4:	f002 f972 	bl	80057cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	2105      	movs	r1, #5
 80034ec:	2019      	movs	r0, #25
 80034ee:	f002 f953 	bl	8005798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80034f2:	2019      	movs	r0, #25
 80034f4:	f002 f96a 	bl	80057cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80034f8:	2200      	movs	r2, #0
 80034fa:	2105      	movs	r1, #5
 80034fc:	201a      	movs	r0, #26
 80034fe:	f002 f94b 	bl	8005798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003502:	201a      	movs	r0, #26
 8003504:	f002 f962 	bl	80057cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003508:	2200      	movs	r2, #0
 800350a:	2105      	movs	r1, #5
 800350c:	201b      	movs	r0, #27
 800350e:	f002 f943 	bl	8005798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003512:	201b      	movs	r0, #27
 8003514:	f002 f95a 	bl	80057cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003518:	e055      	b.n	80035c6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003522:	d117      	bne.n	8003554 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003524:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 8003526:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800352a:	4a2a      	ldr	r2, [pc, #168]	; (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 8003536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2105      	movs	r1, #5
 8003546:	201c      	movs	r0, #28
 8003548:	f002 f926 	bl	8005798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800354c:	201c      	movs	r0, #28
 800354e:	f002 f93d 	bl	80057cc <HAL_NVIC_EnableIRQ>
}
 8003552:	e038      	b.n	80035c6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <HAL_TIM_Base_MspInit+0x130>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d117      	bne.n	800358e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 8003560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003564:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 8003566:	f043 0302 	orr.w	r3, r3, #2
 800356a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800356e:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 8003570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800357c:	2200      	movs	r2, #0
 800357e:	2105      	movs	r1, #5
 8003580:	201d      	movs	r0, #29
 8003582:	f002 f909 	bl	8005798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003586:	201d      	movs	r0, #29
 8003588:	f002 f920 	bl	80057cc <HAL_NVIC_EnableIRQ>
}
 800358c:	e01b      	b.n	80035c6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a12      	ldr	r2, [pc, #72]	; (80035dc <HAL_TIM_Base_MspInit+0x134>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d116      	bne.n	80035c6 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 800359a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800359e:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 80035aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80035b6:	2200      	movs	r2, #0
 80035b8:	2105      	movs	r1, #5
 80035ba:	201e      	movs	r0, #30
 80035bc:	f002 f8ec 	bl	8005798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035c0:	201e      	movs	r0, #30
 80035c2:	f002 f903 	bl	80057cc <HAL_NVIC_EnableIRQ>
}
 80035c6:	bf00      	nop
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40010000 	.word	0x40010000
 80035d4:	58024400 	.word	0x58024400
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800

080035e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a26      	ldr	r2, [pc, #152]	; (8003698 <HAL_TIM_MspPostInit+0xb8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d120      	bne.n	8003644 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <HAL_TIM_MspPostInit+0xbc>)
 8003604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003608:	4a24      	ldr	r2, [pc, #144]	; (800369c <HAL_TIM_MspPostInit+0xbc>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003612:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_TIM_MspPostInit+0xbc>)
 8003614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003626:	2302      	movs	r3, #2
 8003628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362e:	2300      	movs	r3, #0
 8003630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003632:	2301      	movs	r3, #1
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003636:	f107 0314 	add.w	r3, r7, #20
 800363a:	4619      	mov	r1, r3
 800363c:	4818      	ldr	r0, [pc, #96]	; (80036a0 <HAL_TIM_MspPostInit+0xc0>)
 800363e:	f005 fb21 	bl	8008c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003642:	e024      	b.n	800368e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d11f      	bne.n	800368e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364e:	4b13      	ldr	r3, [pc, #76]	; (800369c <HAL_TIM_MspPostInit+0xbc>)
 8003650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003654:	4a11      	ldr	r2, [pc, #68]	; (800369c <HAL_TIM_MspPostInit+0xbc>)
 8003656:	f043 0302 	orr.w	r3, r3, #2
 800365a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800365e:	4b0f      	ldr	r3, [pc, #60]	; (800369c <HAL_TIM_MspPostInit+0xbc>)
 8003660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800366c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003672:	2302      	movs	r3, #2
 8003674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367a:	2300      	movs	r3, #0
 800367c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800367e:	2301      	movs	r3, #1
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003682:	f107 0314 	add.w	r3, r7, #20
 8003686:	4619      	mov	r1, r3
 8003688:	4806      	ldr	r0, [pc, #24]	; (80036a4 <HAL_TIM_MspPostInit+0xc4>)
 800368a:	f005 fafb 	bl	8008c84 <HAL_GPIO_Init>
}
 800368e:	bf00      	nop
 8003690:	3728      	adds	r7, #40	; 0x28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40010000 	.word	0x40010000
 800369c:	58024400 	.word	0x58024400
 80036a0:	58020000 	.word	0x58020000
 80036a4:	58020400 	.word	0x58020400

080036a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b0ba      	sub	sp, #232	; 0xe8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036c0:	f107 0310 	add.w	r3, r7, #16
 80036c4:	22c0      	movs	r2, #192	; 0xc0
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f013 f8ff 	bl	80168cc <memset>
  if(huart->Instance==USART1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a41      	ldr	r2, [pc, #260]	; (80037d8 <HAL_UART_MspInit+0x130>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d17b      	bne.n	80037d0 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80036d8:	f04f 0201 	mov.w	r2, #1
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80036e4:	2318      	movs	r3, #24
 80036e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036ea:	f107 0310 	add.w	r3, r7, #16
 80036ee:	4618      	mov	r0, r3
 80036f0:	f007 fb54 	bl	800ad9c <HAL_RCCEx_PeriphCLKConfig>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80036fa:	f7ff fbc1 	bl	8002e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036fe:	4b37      	ldr	r3, [pc, #220]	; (80037dc <HAL_UART_MspInit+0x134>)
 8003700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003704:	4a35      	ldr	r2, [pc, #212]	; (80037dc <HAL_UART_MspInit+0x134>)
 8003706:	f043 0310 	orr.w	r3, r3, #16
 800370a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800370e:	4b33      	ldr	r3, [pc, #204]	; (80037dc <HAL_UART_MspInit+0x134>)
 8003710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371c:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <HAL_UART_MspInit+0x134>)
 800371e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003722:	4a2e      	ldr	r2, [pc, #184]	; (80037dc <HAL_UART_MspInit+0x134>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800372c:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <HAL_UART_MspInit+0x134>)
 800372e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800373a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800373e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	2302      	movs	r3, #2
 8003744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003754:	2307      	movs	r3, #7
 8003756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800375e:	4619      	mov	r1, r3
 8003760:	481f      	ldr	r0, [pc, #124]	; (80037e0 <HAL_UART_MspInit+0x138>)
 8003762:	f005 fa8f 	bl	8008c84 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003766:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 8003768:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <HAL_UART_MspInit+0x140>)
 800376a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 800376e:	222a      	movs	r2, #42	; 0x2a
 8003770:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003772:	4b1c      	ldr	r3, [pc, #112]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 8003774:	2240      	movs	r2, #64	; 0x40
 8003776:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003778:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 800377a:	2200      	movs	r2, #0
 800377c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800377e:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 8003780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003784:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003786:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 8003788:	2200      	movs	r2, #0
 800378a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800378c:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003792:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 8003794:	2200      	movs	r2, #0
 8003796:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 800379a:	2200      	movs	r2, #0
 800379c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80037a4:	480f      	ldr	r0, [pc, #60]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 80037a6:	f002 fc25 	bl	8005ff4 <HAL_DMA_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80037b0:	f7ff fb66 	bl	8002e80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a0b      	ldr	r2, [pc, #44]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 80037b8:	67da      	str	r2, [r3, #124]	; 0x7c
 80037ba:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_UART_MspInit+0x13c>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2105      	movs	r1, #5
 80037c4:	2025      	movs	r0, #37	; 0x25
 80037c6:	f001 ffe7 	bl	8005798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037ca:	2025      	movs	r0, #37	; 0x25
 80037cc:	f001 fffe 	bl	80057cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80037d0:	bf00      	nop
 80037d2:	37e8      	adds	r7, #232	; 0xe8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40011000 	.word	0x40011000
 80037dc:	58024400 	.word	0x58024400
 80037e0:	58020000 	.word	0x58020000
 80037e4:	240006cc 	.word	0x240006cc
 80037e8:	40020040 	.word	0x40020040

080037ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b090      	sub	sp, #64	; 0x40
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b0f      	cmp	r3, #15
 80037f8:	d827      	bhi.n	800384a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80037fa:	2200      	movs	r2, #0
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	2036      	movs	r0, #54	; 0x36
 8003800:	f001 ffca 	bl	8005798 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003804:	2036      	movs	r0, #54	; 0x36
 8003806:	f001 ffe1 	bl	80057cc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800380a:	4a29      	ldr	r2, [pc, #164]	; (80038b0 <HAL_InitTick+0xc4>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003810:	4b28      	ldr	r3, [pc, #160]	; (80038b4 <HAL_InitTick+0xc8>)
 8003812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003816:	4a27      	ldr	r2, [pc, #156]	; (80038b4 <HAL_InitTick+0xc8>)
 8003818:	f043 0310 	orr.w	r3, r3, #16
 800381c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003820:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <HAL_InitTick+0xc8>)
 8003822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800382e:	f107 0210 	add.w	r2, r7, #16
 8003832:	f107 0314 	add.w	r3, r7, #20
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f007 fa6d 	bl	800ad18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_InitTick+0x6a>
 8003848:	e001      	b.n	800384e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e02b      	b.n	80038a6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800384e:	f007 fa37 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 8003852:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003854:	e004      	b.n	8003860 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003856:	f007 fa33 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800385a:	4603      	mov	r3, r0
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003862:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <HAL_InitTick+0xcc>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	0c9b      	lsrs	r3, r3, #18
 800386a:	3b01      	subs	r3, #1
 800386c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800386e:	4b13      	ldr	r3, [pc, #76]	; (80038bc <HAL_InitTick+0xd0>)
 8003870:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <HAL_InitTick+0xd4>)
 8003872:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <HAL_InitTick+0xd0>)
 8003876:	f240 32e7 	movw	r2, #999	; 0x3e7
 800387a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800387c:	4a0f      	ldr	r2, [pc, #60]	; (80038bc <HAL_InitTick+0xd0>)
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003880:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <HAL_InitTick+0xd0>)
 8003884:	2200      	movs	r2, #0
 8003886:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <HAL_InitTick+0xd0>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800388e:	480b      	ldr	r0, [pc, #44]	; (80038bc <HAL_InitTick+0xd0>)
 8003890:	f00a fef5 	bl	800e67e <HAL_TIM_Base_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800389a:	4808      	ldr	r0, [pc, #32]	; (80038bc <HAL_InitTick+0xd0>)
 800389c:	f00a ff46 	bl	800e72c <HAL_TIM_Base_Start_IT>
 80038a0:	4603      	mov	r3, r0
 80038a2:	e000      	b.n	80038a6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3740      	adds	r7, #64	; 0x40
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	24000098 	.word	0x24000098
 80038b4:	58024400 	.word	0x58024400
 80038b8:	431bde83 	.word	0x431bde83
 80038bc:	240010bc 	.word	0x240010bc
 80038c0:	40001000 	.word	0x40001000

080038c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80038c8:	e7fe      	b.n	80038c8 <NMI_Handler+0x4>

080038ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ce:	e7fe      	b.n	80038ce <HardFault_Handler+0x4>

080038d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038d4:	e7fe      	b.n	80038d4 <MemManage_Handler+0x4>

080038d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038da:	e7fe      	b.n	80038da <BusFault_Handler+0x4>

080038dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <UsageFault_Handler+0x4>

080038e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038f4:	4802      	ldr	r0, [pc, #8]	; (8003900 <DMA1_Stream0_IRQHandler+0x10>)
 80038f6:	f003 fea7 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	24000204 	.word	0x24000204

08003904 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <DMA1_Stream1_IRQHandler+0x10>)
 800390a:	f003 fe9d 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	2400027c 	.word	0x2400027c

08003918 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <DMA1_Stream2_IRQHandler+0x10>)
 800391e:	f003 fe93 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	240006cc 	.word	0x240006cc

0800392c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003930:	4802      	ldr	r0, [pc, #8]	; (800393c <DMA1_Stream5_IRQHandler+0x10>)
 8003932:	f003 fe89 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	24000308 	.word	0x24000308

08003940 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003944:	4802      	ldr	r0, [pc, #8]	; (8003950 <TIM1_BRK_IRQHandler+0x10>)
 8003946:	f00b fa08 	bl	800ed5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	24000508 	.word	0x24000508

08003954 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003958:	4802      	ldr	r0, [pc, #8]	; (8003964 <TIM1_UP_IRQHandler+0x10>)
 800395a:	f00b f9fe 	bl	800ed5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	24000508 	.word	0x24000508

08003968 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800396c:	4802      	ldr	r0, [pc, #8]	; (8003978 <TIM1_TRG_COM_IRQHandler+0x10>)
 800396e:	f00b f9f4 	bl	800ed5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	24000508 	.word	0x24000508

0800397c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003980:	4802      	ldr	r0, [pc, #8]	; (800398c <TIM1_CC_IRQHandler+0x10>)
 8003982:	f00b f9ea 	bl	800ed5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	24000508 	.word	0x24000508

08003990 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003994:	4802      	ldr	r0, [pc, #8]	; (80039a0 <TIM2_IRQHandler+0x10>)
 8003996:	f00b f9e0 	bl	800ed5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	24000554 	.word	0x24000554

080039a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <TIM3_IRQHandler+0x10>)
 80039aa:	f00b f9d6 	bl	800ed5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	240005a0 	.word	0x240005a0

080039b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <TIM4_IRQHandler+0x10>)
 80039be:	f00b f9cc 	bl	800ed5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	240005ec 	.word	0x240005ec

080039cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <USART1_IRQHandler+0x10>)
 80039d2:	f00c fd85 	bl	80104e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	24000638 	.word	0x24000638

080039e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <TIM6_DAC_IRQHandler+0x20>)
 80039e6:	791b      	ldrb	r3, [r3, #4]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80039ee:	4804      	ldr	r0, [pc, #16]	; (8003a00 <TIM6_DAC_IRQHandler+0x20>)
 80039f0:	f002 f881 	bl	8005af6 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80039f4:	4803      	ldr	r0, [pc, #12]	; (8003a04 <TIM6_DAC_IRQHandler+0x24>)
 80039f6:	f00b f9b0 	bl	800ed5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	240002f4 	.word	0x240002f4
 8003a04:	240010bc 	.word	0x240010bc

08003a08 <ITM_SendChar>:
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
 8003a12:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <ITM_SendChar+0x48>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a0e      	ldr	r2, [pc, #56]	; (8003a50 <ITM_SendChar+0x48>)
 8003a18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <ITM_SendChar+0x4c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <ITM_SendChar+0x4c>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	bf00      	nop
 8003a2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f8      	beq.n	8003a2c <ITM_SendChar+0x24>
 8003a3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	e000edfc 	.word	0xe000edfc
 8003a54:	e0000e00 	.word	0xe0000e00

08003a58 <_read>:
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e00a      	b.n	8003a80 <_read+0x28>
 8003a6a:	f3af 8000 	nop.w
 8003a6e:	4601      	mov	r1, r0
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	60ba      	str	r2, [r7, #8]
 8003a76:	b2ca      	uxtb	r2, r1
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	dbf0      	blt.n	8003a6a <_read+0x12>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <_write>:
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b086      	sub	sp, #24
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	e009      	b.n	8003ab8 <_write+0x26>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	60ba      	str	r2, [r7, #8]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ffab 	bl	8003a08 <ITM_SendChar>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	dbf1      	blt.n	8003aa4 <_write+0x12>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <_close>:
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <_fstat>:
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	6039      	str	r1, [r7, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	2300      	movs	r3, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <_isatty>:
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <_lseek>:
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	2300      	movs	r3, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <_sbrk>:
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <_sbrk+0x5c>)
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <_sbrk+0x60>)
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <_sbrk+0x64>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d102      	bne.n	8003b56 <_sbrk+0x22>
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <_sbrk+0x64>)
 8003b52:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <_sbrk+0x68>)
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <_sbrk+0x64>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d207      	bcs.n	8003b74 <_sbrk+0x40>
 8003b64:	f012 fe6a 	bl	801683c <__errno>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	220c      	movs	r2, #12
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b72:	e009      	b.n	8003b88 <_sbrk+0x54>
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <_sbrk+0x64>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <_sbrk+0x64>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	4a05      	ldr	r2, [pc, #20]	; (8003b98 <_sbrk+0x64>)
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	24080000 	.word	0x24080000
 8003b94:	00000400 	.word	0x00000400
 8003b98:	24001108 	.word	0x24001108
 8003b9c:	24005a70 	.word	0x24005a70

08003ba0 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003ba4:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <SystemInit+0xe4>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	4a36      	ldr	r2, [pc, #216]	; (8003c84 <SystemInit+0xe4>)
 8003bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003bb4:	4b34      	ldr	r3, [pc, #208]	; (8003c88 <SystemInit+0xe8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	2b06      	cmp	r3, #6
 8003bbe:	d807      	bhi.n	8003bd0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003bc0:	4b31      	ldr	r3, [pc, #196]	; (8003c88 <SystemInit+0xe8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 030f 	bic.w	r3, r3, #15
 8003bc8:	4a2f      	ldr	r2, [pc, #188]	; (8003c88 <SystemInit+0xe8>)
 8003bca:	f043 0307 	orr.w	r3, r3, #7
 8003bce:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003bd0:	4b2e      	ldr	r3, [pc, #184]	; (8003c8c <SystemInit+0xec>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a2d      	ldr	r2, [pc, #180]	; (8003c8c <SystemInit+0xec>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003bdc:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <SystemInit+0xec>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003be2:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <SystemInit+0xec>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4929      	ldr	r1, [pc, #164]	; (8003c8c <SystemInit+0xec>)
 8003be8:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <SystemInit+0xf0>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <SystemInit+0xe8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <SystemInit+0xe8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 030f 	bic.w	r3, r3, #15
 8003c02:	4a21      	ldr	r2, [pc, #132]	; (8003c88 <SystemInit+0xe8>)
 8003c04:	f043 0307 	orr.w	r3, r3, #7
 8003c08:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003c0a:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <SystemInit+0xec>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003c10:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <SystemInit+0xec>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <SystemInit+0xec>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <SystemInit+0xec>)
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <SystemInit+0xf4>)
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003c22:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <SystemInit+0xec>)
 8003c24:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <SystemInit+0xf8>)
 8003c26:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003c28:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <SystemInit+0xec>)
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <SystemInit+0xfc>)
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003c2e:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <SystemInit+0xec>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003c34:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <SystemInit+0xec>)
 8003c36:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <SystemInit+0xfc>)
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <SystemInit+0xec>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003c40:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <SystemInit+0xec>)
 8003c42:	4a16      	ldr	r2, [pc, #88]	; (8003c9c <SystemInit+0xfc>)
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <SystemInit+0xec>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <SystemInit+0xec>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <SystemInit+0xec>)
 8003c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c56:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <SystemInit+0xec>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <SystemInit+0x100>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <SystemInit+0x104>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c6a:	d202      	bcs.n	8003c72 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003c6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ca8 <SystemInit+0x108>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003c72:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <SystemInit+0x10c>)
 8003c74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003c78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003c7a:	bf00      	nop
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000ed00 	.word	0xe000ed00
 8003c88:	52002000 	.word	0x52002000
 8003c8c:	58024400 	.word	0x58024400
 8003c90:	eaf6ed7f 	.word	0xeaf6ed7f
 8003c94:	02020200 	.word	0x02020200
 8003c98:	01ff0000 	.word	0x01ff0000
 8003c9c:	01010280 	.word	0x01010280
 8003ca0:	5c001000 	.word	0x5c001000
 8003ca4:	ffff0000 	.word	0xffff0000
 8003ca8:	51008108 	.word	0x51008108
 8003cac:	52004000 	.word	0x52004000

08003cb0 <Reset_Handler>:
 8003cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ce8 <LoopFillZerobss+0xe>
 8003cb4:	f7ff ff74 	bl	8003ba0 <SystemInit>
 8003cb8:	480c      	ldr	r0, [pc, #48]	; (8003cec <LoopFillZerobss+0x12>)
 8003cba:	490d      	ldr	r1, [pc, #52]	; (8003cf0 <LoopFillZerobss+0x16>)
 8003cbc:	4a0d      	ldr	r2, [pc, #52]	; (8003cf4 <LoopFillZerobss+0x1a>)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e002      	b.n	8003cc8 <LoopCopyDataInit>

08003cc2 <CopyDataInit>:
 8003cc2:	58d4      	ldr	r4, [r2, r3]
 8003cc4:	50c4      	str	r4, [r0, r3]
 8003cc6:	3304      	adds	r3, #4

08003cc8 <LoopCopyDataInit>:
 8003cc8:	18c4      	adds	r4, r0, r3
 8003cca:	428c      	cmp	r4, r1
 8003ccc:	d3f9      	bcc.n	8003cc2 <CopyDataInit>
 8003cce:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <LoopFillZerobss+0x1e>)
 8003cd0:	4c0a      	ldr	r4, [pc, #40]	; (8003cfc <LoopFillZerobss+0x22>)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e001      	b.n	8003cda <LoopFillZerobss>

08003cd6 <FillZerobss>:
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	3204      	adds	r2, #4

08003cda <LoopFillZerobss>:
 8003cda:	42a2      	cmp	r2, r4
 8003cdc:	d3fb      	bcc.n	8003cd6 <FillZerobss>
 8003cde:	f012 fdb3 	bl	8016848 <__libc_init_array>
 8003ce2:	f7fd f94f 	bl	8000f84 <main>
 8003ce6:	4770      	bx	lr
 8003ce8:	24080000 	.word	0x24080000
 8003cec:	24000000 	.word	0x24000000
 8003cf0:	24000108 	.word	0x24000108
 8003cf4:	08017734 	.word	0x08017734
 8003cf8:	24000120 	.word	0x24000120
 8003cfc:	24005a70 	.word	0x24005a70

08003d00 <ADC3_IRQHandler>:
 8003d00:	e7fe      	b.n	8003d00 <ADC3_IRQHandler>
	...

08003d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d0a:	2003      	movs	r0, #3
 8003d0c:	f001 fd39 	bl	8005782 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d10:	f006 fe2c 	bl	800a96c <HAL_RCC_GetSysClockFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <HAL_Init+0x68>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	4913      	ldr	r1, [pc, #76]	; (8003d70 <HAL_Init+0x6c>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <HAL_Init+0x68>)
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	4a0e      	ldr	r2, [pc, #56]	; (8003d70 <HAL_Init+0x6c>)
 8003d38:	5cd3      	ldrb	r3, [r2, r3]
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
 8003d44:	4a0b      	ldr	r2, [pc, #44]	; (8003d74 <HAL_Init+0x70>)
 8003d46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d48:	4a0b      	ldr	r2, [pc, #44]	; (8003d78 <HAL_Init+0x74>)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d4e:	2005      	movs	r0, #5
 8003d50:	f7ff fd4c 	bl	80037ec <HAL_InitTick>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e002      	b.n	8003d64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003d5e:	f7ff f895 	bl	8002e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	08017680 	.word	0x08017680
 8003d74:	24000094 	.word	0x24000094
 8003d78:	24000090 	.word	0x24000090

08003d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_IncTick+0x20>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_IncTick+0x24>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <HAL_IncTick+0x24>)
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	2400009c 	.word	0x2400009c
 8003da0:	2400110c 	.word	0x2400110c

08003da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return uwTick;
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_GetTick+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	2400110c 	.word	0x2400110c

08003dbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003dc0:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <HAL_GetREVID+0x14>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	5c001000 	.word	0x5c001000

08003dd4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	401a      	ands	r2, r3
 8003de8:	4904      	ldr	r1, [pc, #16]	; (8003dfc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	58000400 	.word	0x58000400

08003e00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	609a      	str	r2, [r3, #8]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3360      	adds	r3, #96	; 0x60
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	431a      	orrs	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	611a      	str	r2, [r3, #16]
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b087      	sub	sp, #28
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3360      	adds	r3, #96	; 0x60
 8003eea:	461a      	mov	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	601a      	str	r2, [r3, #0]
  }
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b087      	sub	sp, #28
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3330      	adds	r3, #48	; 0x30
 8003f46:	461a      	mov	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	0a1b      	lsrs	r3, r3, #8
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	4413      	add	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	211f      	movs	r1, #31
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	401a      	ands	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0e9b      	lsrs	r3, r3, #26
 8003f6e:	f003 011f 	and.w	r1, r3, #31
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f023 0203 	bic.w	r2, r3, #3
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	0e5b      	lsrs	r3, r3, #25
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	4413      	add	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	0d1b      	lsrs	r3, r3, #20
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2107      	movs	r1, #7
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	401a      	ands	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	0d1b      	lsrs	r3, r3, #20
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004024:	43db      	mvns	r3, r3
 8004026:	401a      	ands	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f003 0318 	and.w	r3, r3, #24
 800402e:	4908      	ldr	r1, [pc, #32]	; (8004050 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004030:	40d9      	lsrs	r1, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	400b      	ands	r3, r1
 8004036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800403a:	431a      	orrs	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	000fffff 	.word	0x000fffff

08004054 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 031f 	and.w	r3, r3, #31
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <LL_ADC_DisableDeepPowerDown+0x20>)
 800407e:	4013      	ands	r3, r2
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6093      	str	r3, [r2, #8]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	5fffffc0 	.word	0x5fffffc0

08004094 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a8:	d101      	bne.n	80040ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	6fffffc0 	.word	0x6fffffc0

080040e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f8:	d101      	bne.n	80040fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <LL_ADC_Enable+0x24>)
 800411a:	4013      	ands	r3, r2
 800411c:	f043 0201 	orr.w	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	7fffffc0 	.word	0x7fffffc0

08004134 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <LL_ADC_Disable+0x24>)
 8004142:	4013      	ands	r3, r2
 8004144:	f043 0202 	orr.w	r2, r3, #2
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	7fffffc0 	.word	0x7fffffc0

0800415c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <LL_ADC_IsEnabled+0x18>
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <LL_ADC_IsEnabled+0x1a>
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d101      	bne.n	800419a <LL_ADC_IsDisableOngoing+0x18>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <LL_ADC_IsDisableOngoing+0x1a>
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <LL_ADC_REG_StartConversion+0x24>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	f043 0204 	orr.w	r2, r3, #4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	7fffffc0 	.word	0x7fffffc0

080041d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d101      	bne.n	80041e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b08      	cmp	r3, #8
 8004208:	d101      	bne.n	800420e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800421c:	b590      	push	{r4, r7, lr}
 800421e:	b089      	sub	sp, #36	; 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004228:	2300      	movs	r3, #0
 800422a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e18f      	b.n	8004556 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7fe fe3f 	bl	8002ec8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff19 	bl	8004094 <LL_ADC_IsDeepPowerDownEnabled>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff feff 	bl	8004070 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ff34 	bl	80040e4 <LL_ADC_IsInternalRegulatorEnabled>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d114      	bne.n	80042ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff ff18 	bl	80040bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800428c:	4b87      	ldr	r3, [pc, #540]	; (80044ac <HAL_ADC_Init+0x290>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	099b      	lsrs	r3, r3, #6
 8004292:	4a87      	ldr	r2, [pc, #540]	; (80044b0 <HAL_ADC_Init+0x294>)
 8004294:	fba2 2303 	umull	r2, r3, r2, r3
 8004298:	099b      	lsrs	r3, r3, #6
 800429a:	3301      	adds	r3, #1
 800429c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800429e:	e002      	b.n	80042a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f9      	bne.n	80042a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff ff17 	bl	80040e4 <LL_ADC_IsInternalRegulatorEnabled>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10d      	bne.n	80042d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	f043 0210 	orr.w	r2, r3, #16
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042cc:	f043 0201 	orr.w	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff77 	bl	80041d0 <LL_ADC_REG_IsConversionOngoing>
 80042e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f040 8129 	bne.w	8004544 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f040 8125 	bne.w	8004544 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004302:	f043 0202 	orr.w	r2, r3, #2
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff ff24 	bl	800415c <LL_ADC_IsEnabled>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d136      	bne.n	8004388 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a65      	ldr	r2, [pc, #404]	; (80044b4 <HAL_ADC_Init+0x298>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d004      	beq.n	800432e <HAL_ADC_Init+0x112>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a63      	ldr	r2, [pc, #396]	; (80044b8 <HAL_ADC_Init+0x29c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d10e      	bne.n	800434c <HAL_ADC_Init+0x130>
 800432e:	4861      	ldr	r0, [pc, #388]	; (80044b4 <HAL_ADC_Init+0x298>)
 8004330:	f7ff ff14 	bl	800415c <LL_ADC_IsEnabled>
 8004334:	4604      	mov	r4, r0
 8004336:	4860      	ldr	r0, [pc, #384]	; (80044b8 <HAL_ADC_Init+0x29c>)
 8004338:	f7ff ff10 	bl	800415c <LL_ADC_IsEnabled>
 800433c:	4603      	mov	r3, r0
 800433e:	4323      	orrs	r3, r4
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e008      	b.n	800435e <HAL_ADC_Init+0x142>
 800434c:	485b      	ldr	r0, [pc, #364]	; (80044bc <HAL_ADC_Init+0x2a0>)
 800434e:	f7ff ff05 	bl	800415c <LL_ADC_IsEnabled>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d012      	beq.n	8004388 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a53      	ldr	r2, [pc, #332]	; (80044b4 <HAL_ADC_Init+0x298>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d004      	beq.n	8004376 <HAL_ADC_Init+0x15a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a51      	ldr	r2, [pc, #324]	; (80044b8 <HAL_ADC_Init+0x29c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d101      	bne.n	800437a <HAL_ADC_Init+0x15e>
 8004376:	4a52      	ldr	r2, [pc, #328]	; (80044c0 <HAL_ADC_Init+0x2a4>)
 8004378:	e000      	b.n	800437c <HAL_ADC_Init+0x160>
 800437a:	4a52      	ldr	r2, [pc, #328]	; (80044c4 <HAL_ADC_Init+0x2a8>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f7ff fd3c 	bl	8003e00 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004388:	f7ff fd18 	bl	8003dbc <HAL_GetREVID>
 800438c:	4603      	mov	r3, r0
 800438e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004392:	4293      	cmp	r3, r2
 8004394:	d914      	bls.n	80043c0 <HAL_ADC_Init+0x1a4>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b10      	cmp	r3, #16
 800439c:	d110      	bne.n	80043c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	7d5b      	ldrb	r3, [r3, #21]
 80043a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80043ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	7f1b      	ldrb	r3, [r3, #28]
 80043b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80043b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043b8:	f043 030c 	orr.w	r3, r3, #12
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	e00d      	b.n	80043dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	7d5b      	ldrb	r3, [r3, #21]
 80043c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80043d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	7f1b      	ldrb	r3, [r3, #28]
 80043d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	7f1b      	ldrb	r3, [r3, #28]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d106      	bne.n	80043f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	045b      	lsls	r3, r3, #17
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	4b2c      	ldr	r3, [pc, #176]	; (80044c8 <HAL_ADC_Init+0x2ac>)
 8004416:	4013      	ands	r3, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	430b      	orrs	r3, r1
 8004420:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fed2 	bl	80041d0 <LL_ADC_REG_IsConversionOngoing>
 800442c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fedf 	bl	80041f6 <LL_ADC_INJ_IsConversionOngoing>
 8004438:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d15f      	bne.n	8004500 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d15c      	bne.n	8004500 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7d1b      	ldrb	r3, [r3, #20]
 800444a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	4b1c      	ldr	r3, [pc, #112]	; (80044cc <HAL_ADC_Init+0x2b0>)
 800445c:	4013      	ands	r3, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	69b9      	ldr	r1, [r7, #24]
 8004464:	430b      	orrs	r3, r1
 8004466:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800446e:	2b01      	cmp	r3, #1
 8004470:	d130      	bne.n	80044d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <HAL_ADC_Init+0x2b4>)
 8004480:	4013      	ands	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004486:	3a01      	subs	r2, #1
 8004488:	0411      	lsls	r1, r2, #16
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800448e:	4311      	orrs	r1, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004494:	4311      	orrs	r1, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800449a:	430a      	orrs	r2, r1
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	611a      	str	r2, [r3, #16]
 80044a8:	e01c      	b.n	80044e4 <HAL_ADC_Init+0x2c8>
 80044aa:	bf00      	nop
 80044ac:	24000090 	.word	0x24000090
 80044b0:	053e2d63 	.word	0x053e2d63
 80044b4:	40022000 	.word	0x40022000
 80044b8:	40022100 	.word	0x40022100
 80044bc:	58026000 	.word	0x58026000
 80044c0:	40022300 	.word	0x40022300
 80044c4:	58026300 	.word	0x58026300
 80044c8:	fff0c003 	.word	0xfff0c003
 80044cc:	ffffbffc 	.word	0xffffbffc
 80044d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0201 	bic.w	r2, r2, #1
 80044e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fdec 	bl	80050d8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d10c      	bne.n	8004522 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f023 010f 	bic.w	r1, r3, #15
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	1e5a      	subs	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
 8004520:	e007      	b.n	8004532 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 020f 	bic.w	r2, r2, #15
 8004530:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
 8004542:	e007      	b.n	8004554 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	f043 0210 	orr.w	r2, r3, #16
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004554:	7ffb      	ldrb	r3, [r7, #31]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3724      	adds	r7, #36	; 0x24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd90      	pop	{r4, r7, pc}
 800455e:	bf00      	nop

08004560 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a55      	ldr	r2, [pc, #340]	; (80046c8 <HAL_ADC_Start_DMA+0x168>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <HAL_ADC_Start_DMA+0x20>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a54      	ldr	r2, [pc, #336]	; (80046cc <HAL_ADC_Start_DMA+0x16c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d101      	bne.n	8004584 <HAL_ADC_Start_DMA+0x24>
 8004580:	4b53      	ldr	r3, [pc, #332]	; (80046d0 <HAL_ADC_Start_DMA+0x170>)
 8004582:	e000      	b.n	8004586 <HAL_ADC_Start_DMA+0x26>
 8004584:	4b53      	ldr	r3, [pc, #332]	; (80046d4 <HAL_ADC_Start_DMA+0x174>)
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fd64 	bl	8004054 <LL_ADC_GetMultimode>
 800458c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fe1c 	bl	80041d0 <LL_ADC_REG_IsConversionOngoing>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	f040 808c 	bne.w	80046b8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_ADC_Start_DMA+0x4e>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e087      	b.n	80046be <HAL_ADC_Start_DMA+0x15e>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b05      	cmp	r3, #5
 80045c0:	d002      	beq.n	80045c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b09      	cmp	r3, #9
 80045c6:	d170      	bne.n	80046aa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 fc07 	bl	8004ddc <ADC_Enable>
 80045ce:	4603      	mov	r3, r0
 80045d0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d163      	bne.n	80046a0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045dc:	4b3e      	ldr	r3, [pc, #248]	; (80046d8 <HAL_ADC_Start_DMA+0x178>)
 80045de:	4013      	ands	r3, r2
 80045e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a37      	ldr	r2, [pc, #220]	; (80046cc <HAL_ADC_Start_DMA+0x16c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d002      	beq.n	80045f8 <HAL_ADC_Start_DMA+0x98>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	e000      	b.n	80045fa <HAL_ADC_Start_DMA+0x9a>
 80045f8:	4b33      	ldr	r3, [pc, #204]	; (80046c8 <HAL_ADC_Start_DMA+0x168>)
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	4293      	cmp	r3, r2
 8004600:	d002      	beq.n	8004608 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d105      	bne.n	8004614 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d006      	beq.n	800462e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004624:	f023 0206 	bic.w	r2, r3, #6
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	659a      	str	r2, [r3, #88]	; 0x58
 800462c:	e002      	b.n	8004634 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004638:	4a28      	ldr	r2, [pc, #160]	; (80046dc <HAL_ADC_Start_DMA+0x17c>)
 800463a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004640:	4a27      	ldr	r2, [pc, #156]	; (80046e0 <HAL_ADC_Start_DMA+0x180>)
 8004642:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004648:	4a26      	ldr	r2, [pc, #152]	; (80046e4 <HAL_ADC_Start_DMA+0x184>)
 800464a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	221c      	movs	r2, #28
 8004652:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0210 	orr.w	r2, r2, #16
 800466a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f7ff fc89 	bl	8003f8e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3340      	adds	r3, #64	; 0x40
 8004686:	4619      	mov	r1, r3
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f002 f80e 	bl	80066ac <HAL_DMA_Start_IT>
 8004690:	4603      	mov	r3, r0
 8004692:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff fd85 	bl	80041a8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800469e:	e00d      	b.n	80046bc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80046a8:	e008      	b.n	80046bc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80046b6:	e001      	b.n	80046bc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
 80046ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40022000 	.word	0x40022000
 80046cc:	40022100 	.word	0x40022100
 80046d0:	40022300 	.word	0x40022300
 80046d4:	58026300 	.word	0x58026300
 80046d8:	fffff0fe 	.word	0xfffff0fe
 80046dc:	08004faf 	.word	0x08004faf
 80046e0:	08005087 	.word	0x08005087
 80046e4:	080050a3 	.word	0x080050a3

080046e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004724:	b590      	push	{r4, r7, lr}
 8004726:	b0a1      	sub	sp, #132	; 0x84
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a65      	ldr	r2, [pc, #404]	; (80048d4 <HAL_ADC_ConfigChannel+0x1b0>)
 800473e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_ADC_ConfigChannel+0x2a>
 800474a:	2302      	movs	r3, #2
 800474c:	e32e      	b.n	8004dac <HAL_ADC_ConfigChannel+0x688>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fd38 	bl	80041d0 <LL_ADC_REG_IsConversionOngoing>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	f040 8313 	bne.w	8004d8e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	db2c      	blt.n	80047ca <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004778:	2b00      	cmp	r3, #0
 800477a:	d108      	bne.n	800478e <HAL_ADC_ConfigChannel+0x6a>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	0e9b      	lsrs	r3, r3, #26
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	2201      	movs	r2, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	e016      	b.n	80047bc <HAL_ADC_ConfigChannel+0x98>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800479c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800479e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80047a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80047a6:	2320      	movs	r3, #32
 80047a8:	e003      	b.n	80047b2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80047aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ac:	fab3 f383 	clz	r3, r3
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2201      	movs	r2, #1
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	69d1      	ldr	r1, [r2, #28]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	430b      	orrs	r3, r1
 80047c8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6859      	ldr	r1, [r3, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	f7ff fbad 	bl	8003f36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fcf5 	bl	80041d0 <LL_ADC_REG_IsConversionOngoing>
 80047e6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff fd02 	bl	80041f6 <LL_ADC_INJ_IsConversionOngoing>
 80047f2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f040 80b8 	bne.w	800496c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f040 80b4 	bne.w	800496c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	461a      	mov	r2, r3
 8004812:	f7ff fbcf 	bl	8003fb4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004816:	4b30      	ldr	r3, [pc, #192]	; (80048d8 <HAL_ADC_ConfigChannel+0x1b4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800481e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004822:	d10b      	bne.n	800483c <HAL_ADC_ConfigChannel+0x118>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	695a      	ldr	r2, [r3, #20]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	e01d      	b.n	8004878 <HAL_ADC_ConfigChannel+0x154>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x13e>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	e00a      	b.n	8004878 <HAL_ADC_ConfigChannel+0x154>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	089b      	lsrs	r3, r3, #2
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b04      	cmp	r3, #4
 8004880:	d02c      	beq.n	80048dc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6919      	ldr	r1, [r3, #16]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004890:	f7ff faea 	bl	8003e68 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6919      	ldr	r1, [r3, #16]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	7e5b      	ldrb	r3, [r3, #25]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d102      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x186>
 80048a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048a8:	e000      	b.n	80048ac <HAL_ADC_ConfigChannel+0x188>
 80048aa:	2300      	movs	r3, #0
 80048ac:	461a      	mov	r2, r3
 80048ae:	f7ff fb14 	bl	8003eda <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6919      	ldr	r1, [r3, #16]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	7e1b      	ldrb	r3, [r3, #24]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d102      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x1a4>
 80048c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048c6:	e000      	b.n	80048ca <HAL_ADC_ConfigChannel+0x1a6>
 80048c8:	2300      	movs	r3, #0
 80048ca:	461a      	mov	r2, r3
 80048cc:	f7ff faec 	bl	8003ea8 <LL_ADC_SetDataRightShift>
 80048d0:	e04c      	b.n	800496c <HAL_ADC_ConfigChannel+0x248>
 80048d2:	bf00      	nop
 80048d4:	47ff0000 	.word	0x47ff0000
 80048d8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	069b      	lsls	r3, r3, #26
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d107      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048fe:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	069b      	lsls	r3, r3, #26
 8004910:	429a      	cmp	r2, r3
 8004912:	d107      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004922:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800492a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	069b      	lsls	r3, r3, #26
 8004934:	429a      	cmp	r2, r3
 8004936:	d107      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004946:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	069b      	lsls	r3, r3, #26
 8004958:	429a      	cmp	r2, r3
 800495a:	d107      	bne.n	800496c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800496a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fbf3 	bl	800415c <LL_ADC_IsEnabled>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	f040 8211 	bne.w	8004da0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6819      	ldr	r1, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	461a      	mov	r2, r3
 800498c:	f7ff fb3e 	bl	800400c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4aa1      	ldr	r2, [pc, #644]	; (8004c1c <HAL_ADC_ConfigChannel+0x4f8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	f040 812e 	bne.w	8004bf8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x2a0>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	0e9b      	lsrs	r3, r3, #26
 80049b2:	3301      	adds	r3, #1
 80049b4:	f003 031f 	and.w	r3, r3, #31
 80049b8:	2b09      	cmp	r3, #9
 80049ba:	bf94      	ite	ls
 80049bc:	2301      	movls	r3, #1
 80049be:	2300      	movhi	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	e019      	b.n	80049f8 <HAL_ADC_ConfigChannel+0x2d4>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049cc:	fa93 f3a3 	rbit	r3, r3
 80049d0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80049d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80049d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80049dc:	2320      	movs	r3, #32
 80049de:	e003      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80049e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e2:	fab3 f383 	clz	r3, r3
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	3301      	adds	r3, #1
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	2b09      	cmp	r3, #9
 80049f0:	bf94      	ite	ls
 80049f2:	2301      	movls	r3, #1
 80049f4:	2300      	movhi	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d079      	beq.n	8004af0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d107      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x2f4>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	0e9b      	lsrs	r3, r3, #26
 8004a0e:	3301      	adds	r3, #1
 8004a10:	069b      	lsls	r3, r3, #26
 8004a12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a16:	e015      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x320>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a20:	fa93 f3a3 	rbit	r3, r3
 8004a24:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a28:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004a30:	2320      	movs	r3, #32
 8004a32:	e003      	b.n	8004a3c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a36:	fab3 f383 	clz	r3, r3
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	069b      	lsls	r3, r3, #26
 8004a40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x340>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	0e9b      	lsrs	r3, r3, #26
 8004a56:	3301      	adds	r3, #1
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a62:	e017      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x370>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6c:	fa93 f3a3 	rbit	r3, r3
 8004a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a74:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004a7c:	2320      	movs	r3, #32
 8004a7e:	e003      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a82:	fab3 f383 	clz	r3, r3
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2101      	movs	r1, #1
 8004a90:	fa01 f303 	lsl.w	r3, r1, r3
 8004a94:	ea42 0103 	orr.w	r1, r2, r3
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x396>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	0e9b      	lsrs	r3, r3, #26
 8004aaa:	3301      	adds	r3, #1
 8004aac:	f003 021f 	and.w	r2, r3, #31
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	4413      	add	r3, r2
 8004ab6:	051b      	lsls	r3, r3, #20
 8004ab8:	e018      	b.n	8004aec <HAL_ADC_ConfigChannel+0x3c8>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac2:	fa93 f3a3 	rbit	r3, r3
 8004ac6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004ad2:	2320      	movs	r3, #32
 8004ad4:	e003      	b.n	8004ade <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	fab3 f383 	clz	r3, r3
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f003 021f 	and.w	r2, r3, #31
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4413      	add	r3, r2
 8004aea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004aec:	430b      	orrs	r3, r1
 8004aee:	e07e      	b.n	8004bee <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d107      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x3e8>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0e9b      	lsrs	r3, r3, #26
 8004b02:	3301      	adds	r3, #1
 8004b04:	069b      	lsls	r3, r3, #26
 8004b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b0a:	e015      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x414>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	fa93 f3a3 	rbit	r3, r3
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004b24:	2320      	movs	r3, #32
 8004b26:	e003      	b.n	8004b30 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2a:	fab3 f383 	clz	r3, r3
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	3301      	adds	r3, #1
 8004b32:	069b      	lsls	r3, r3, #26
 8004b34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d109      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x434>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0e9b      	lsrs	r3, r3, #26
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	2101      	movs	r1, #1
 8004b52:	fa01 f303 	lsl.w	r3, r1, r3
 8004b56:	e017      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x464>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	61bb      	str	r3, [r7, #24]
  return result;
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004b70:	2320      	movs	r3, #32
 8004b72:	e003      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	fab3 f383 	clz	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	f003 031f 	and.w	r3, r3, #31
 8004b82:	2101      	movs	r1, #1
 8004b84:	fa01 f303 	lsl.w	r3, r1, r3
 8004b88:	ea42 0103 	orr.w	r1, r2, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10d      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x490>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	0e9b      	lsrs	r3, r3, #26
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	f003 021f 	and.w	r2, r3, #31
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	4413      	add	r3, r2
 8004baa:	3b1e      	subs	r3, #30
 8004bac:	051b      	lsls	r3, r3, #20
 8004bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bb2:	e01b      	b.n	8004bec <HAL_ADC_ConfigChannel+0x4c8>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	fa93 f3a3 	rbit	r3, r3
 8004bc0:	60fb      	str	r3, [r7, #12]
  return result;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004bcc:	2320      	movs	r3, #32
 8004bce:	e003      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	fab3 f383 	clz	r3, r3
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f003 021f 	and.w	r2, r3, #31
 8004bde:	4613      	mov	r3, r2
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	4413      	add	r3, r2
 8004be4:	3b1e      	subs	r3, #30
 8004be6:	051b      	lsls	r3, r3, #20
 8004be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bec:	430b      	orrs	r3, r1
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	6892      	ldr	r2, [r2, #8]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f7ff f9de 	bl	8003fb4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f280 80cf 	bge.w	8004da0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a06      	ldr	r2, [pc, #24]	; (8004c20 <HAL_ADC_ConfigChannel+0x4fc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_ADC_ConfigChannel+0x4f2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <HAL_ADC_ConfigChannel+0x500>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d10a      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x508>
 8004c16:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <HAL_ADC_ConfigChannel+0x504>)
 8004c18:	e009      	b.n	8004c2e <HAL_ADC_ConfigChannel+0x50a>
 8004c1a:	bf00      	nop
 8004c1c:	47ff0000 	.word	0x47ff0000
 8004c20:	40022000 	.word	0x40022000
 8004c24:	40022100 	.word	0x40022100
 8004c28:	40022300 	.word	0x40022300
 8004c2c:	4b61      	ldr	r3, [pc, #388]	; (8004db4 <HAL_ADC_ConfigChannel+0x690>)
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff f90c 	bl	8003e4c <LL_ADC_GetCommonPathInternalCh>
 8004c34:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a5f      	ldr	r2, [pc, #380]	; (8004db8 <HAL_ADC_ConfigChannel+0x694>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <HAL_ADC_ConfigChannel+0x526>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a5d      	ldr	r2, [pc, #372]	; (8004dbc <HAL_ADC_ConfigChannel+0x698>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d10e      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x544>
 8004c4a:	485b      	ldr	r0, [pc, #364]	; (8004db8 <HAL_ADC_ConfigChannel+0x694>)
 8004c4c:	f7ff fa86 	bl	800415c <LL_ADC_IsEnabled>
 8004c50:	4604      	mov	r4, r0
 8004c52:	485a      	ldr	r0, [pc, #360]	; (8004dbc <HAL_ADC_ConfigChannel+0x698>)
 8004c54:	f7ff fa82 	bl	800415c <LL_ADC_IsEnabled>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4323      	orrs	r3, r4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e008      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x556>
 8004c68:	4855      	ldr	r0, [pc, #340]	; (8004dc0 <HAL_ADC_ConfigChannel+0x69c>)
 8004c6a:	f7ff fa77 	bl	800415c <LL_ADC_IsEnabled>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d07d      	beq.n	8004d7a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a50      	ldr	r2, [pc, #320]	; (8004dc4 <HAL_ADC_ConfigChannel+0x6a0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d130      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x5c6>
 8004c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d12b      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a4a      	ldr	r2, [pc, #296]	; (8004dc0 <HAL_ADC_ConfigChannel+0x69c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	f040 8081 	bne.w	8004da0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a45      	ldr	r2, [pc, #276]	; (8004db8 <HAL_ADC_ConfigChannel+0x694>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_ADC_ConfigChannel+0x58e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a43      	ldr	r2, [pc, #268]	; (8004dbc <HAL_ADC_ConfigChannel+0x698>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <HAL_ADC_ConfigChannel+0x592>
 8004cb2:	4a45      	ldr	r2, [pc, #276]	; (8004dc8 <HAL_ADC_ConfigChannel+0x6a4>)
 8004cb4:	e000      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x594>
 8004cb6:	4a3f      	ldr	r2, [pc, #252]	; (8004db4 <HAL_ADC_ConfigChannel+0x690>)
 8004cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f7ff f8b0 	bl	8003e26 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cc6:	4b41      	ldr	r3, [pc, #260]	; (8004dcc <HAL_ADC_ConfigChannel+0x6a8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	099b      	lsrs	r3, r3, #6
 8004ccc:	4a40      	ldr	r2, [pc, #256]	; (8004dd0 <HAL_ADC_ConfigChannel+0x6ac>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	099b      	lsrs	r3, r3, #6
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cda:	e002      	b.n	8004ce2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f9      	bne.n	8004cdc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ce8:	e05a      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a39      	ldr	r2, [pc, #228]	; (8004dd4 <HAL_ADC_ConfigChannel+0x6b0>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d11e      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0x60e>
 8004cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d119      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a2f      	ldr	r2, [pc, #188]	; (8004dc0 <HAL_ADC_ConfigChannel+0x69c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d14b      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a2a      	ldr	r2, [pc, #168]	; (8004db8 <HAL_ADC_ConfigChannel+0x694>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <HAL_ADC_ConfigChannel+0x5f8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a29      	ldr	r2, [pc, #164]	; (8004dbc <HAL_ADC_ConfigChannel+0x698>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d101      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x5fc>
 8004d1c:	4a2a      	ldr	r2, [pc, #168]	; (8004dc8 <HAL_ADC_ConfigChannel+0x6a4>)
 8004d1e:	e000      	b.n	8004d22 <HAL_ADC_ConfigChannel+0x5fe>
 8004d20:	4a24      	ldr	r2, [pc, #144]	; (8004db4 <HAL_ADC_ConfigChannel+0x690>)
 8004d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f7ff f87b 	bl	8003e26 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d30:	e036      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a28      	ldr	r2, [pc, #160]	; (8004dd8 <HAL_ADC_ConfigChannel+0x6b4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d131      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x67c>
 8004d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d12c      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <HAL_ADC_ConfigChannel+0x69c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d127      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a18      	ldr	r2, [pc, #96]	; (8004db8 <HAL_ADC_ConfigChannel+0x694>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_ADC_ConfigChannel+0x640>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <HAL_ADC_ConfigChannel+0x698>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x644>
 8004d64:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_ADC_ConfigChannel+0x6a4>)
 8004d66:	e000      	b.n	8004d6a <HAL_ADC_ConfigChannel+0x646>
 8004d68:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <HAL_ADC_ConfigChannel+0x690>)
 8004d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f7ff f857 	bl	8003e26 <LL_ADC_SetCommonPathInternalCh>
 8004d78:	e012      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	f043 0220 	orr.w	r2, r3, #32
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004d8c:	e008      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004da8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3784      	adds	r7, #132	; 0x84
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd90      	pop	{r4, r7, pc}
 8004db4:	58026300 	.word	0x58026300
 8004db8:	40022000 	.word	0x40022000
 8004dbc:	40022100 	.word	0x40022100
 8004dc0:	58026000 	.word	0x58026000
 8004dc4:	cb840000 	.word	0xcb840000
 8004dc8:	40022300 	.word	0x40022300
 8004dcc:	24000090 	.word	0x24000090
 8004dd0:	053e2d63 	.word	0x053e2d63
 8004dd4:	c7520000 	.word	0xc7520000
 8004dd8:	cfb80000 	.word	0xcfb80000

08004ddc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff f9b7 	bl	800415c <LL_ADC_IsEnabled>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d16e      	bne.n	8004ed2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	4b38      	ldr	r3, [pc, #224]	; (8004edc <ADC_Enable+0x100>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00d      	beq.n	8004e1e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	f043 0210 	orr.w	r2, r3, #16
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e12:	f043 0201 	orr.w	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e05a      	b.n	8004ed4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff f972 	bl	800410c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e28:	f7fe ffbc 	bl	8003da4 <HAL_GetTick>
 8004e2c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a2b      	ldr	r2, [pc, #172]	; (8004ee0 <ADC_Enable+0x104>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <ADC_Enable+0x66>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a29      	ldr	r2, [pc, #164]	; (8004ee4 <ADC_Enable+0x108>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d101      	bne.n	8004e46 <ADC_Enable+0x6a>
 8004e42:	4b29      	ldr	r3, [pc, #164]	; (8004ee8 <ADC_Enable+0x10c>)
 8004e44:	e000      	b.n	8004e48 <ADC_Enable+0x6c>
 8004e46:	4b29      	ldr	r3, [pc, #164]	; (8004eec <ADC_Enable+0x110>)
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff f903 	bl	8004054 <LL_ADC_GetMultimode>
 8004e4e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a23      	ldr	r2, [pc, #140]	; (8004ee4 <ADC_Enable+0x108>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d002      	beq.n	8004e60 <ADC_Enable+0x84>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	e000      	b.n	8004e62 <ADC_Enable+0x86>
 8004e60:	4b1f      	ldr	r3, [pc, #124]	; (8004ee0 <ADC_Enable+0x104>)
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d02c      	beq.n	8004ec4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d130      	bne.n	8004ed2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e70:	e028      	b.n	8004ec4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff f970 	bl	800415c <LL_ADC_IsEnabled>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d104      	bne.n	8004e8c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff f940 	bl	800410c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e8c:	f7fe ff8a 	bl	8003da4 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d914      	bls.n	8004ec4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d00d      	beq.n	8004ec4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	f043 0210 	orr.w	r2, r3, #16
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	f043 0201 	orr.w	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e007      	b.n	8004ed4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d1cf      	bne.n	8004e72 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	8000003f 	.word	0x8000003f
 8004ee0:	40022000 	.word	0x40022000
 8004ee4:	40022100 	.word	0x40022100
 8004ee8:	40022300 	.word	0x40022300
 8004eec:	58026300 	.word	0x58026300

08004ef0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff f940 	bl	8004182 <LL_ADC_IsDisableOngoing>
 8004f02:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff f927 	bl	800415c <LL_ADC_IsEnabled>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d047      	beq.n	8004fa4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d144      	bne.n	8004fa4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 030d 	and.w	r3, r3, #13
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d10c      	bne.n	8004f42 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff f901 	bl	8004134 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2203      	movs	r2, #3
 8004f38:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f3a:	f7fe ff33 	bl	8003da4 <HAL_GetTick>
 8004f3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f40:	e029      	b.n	8004f96 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	f043 0210 	orr.w	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f52:	f043 0201 	orr.w	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e023      	b.n	8004fa6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f5e:	f7fe ff21 	bl	8003da4 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d914      	bls.n	8004f96 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00d      	beq.n	8004f96 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f043 0210 	orr.w	r2, r3, #16
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8a:	f043 0201 	orr.w	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e007      	b.n	8004fa6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1dc      	bne.n	8004f5e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d14b      	bne.n	8005060 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d021      	beq.n	8005026 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe ff92 	bl	8003f10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d032      	beq.n	8005058 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d12b      	bne.n	8005058 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11f      	bne.n	8005058 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501c:	f043 0201 	orr.w	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
 8005024:	e018      	b.n	8005058 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d111      	bne.n	8005058 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005038:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005050:	f043 0201 	orr.w	r2, r3, #1
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff fb45 	bl	80046e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800505e:	e00e      	b.n	800507e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7ff fb4f 	bl	8004710 <HAL_ADC_ErrorCallback>
}
 8005072:	e004      	b.n	800507e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	4798      	blx	r3
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f7ff fb31 	bl	80046fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800509a:	bf00      	nop
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c0:	f043 0204 	orr.w	r2, r3, #4
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff fb21 	bl	8004710 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a7a      	ldr	r2, [pc, #488]	; (80052d0 <ADC_ConfigureBoostMode+0x1f8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <ADC_ConfigureBoostMode+0x1c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a79      	ldr	r2, [pc, #484]	; (80052d4 <ADC_ConfigureBoostMode+0x1fc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d109      	bne.n	8005108 <ADC_ConfigureBoostMode+0x30>
 80050f4:	4b78      	ldr	r3, [pc, #480]	; (80052d8 <ADC_ConfigureBoostMode+0x200>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bf14      	ite	ne
 8005100:	2301      	movne	r3, #1
 8005102:	2300      	moveq	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	e008      	b.n	800511a <ADC_ConfigureBoostMode+0x42>
 8005108:	4b74      	ldr	r3, [pc, #464]	; (80052dc <ADC_ConfigureBoostMode+0x204>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf14      	ite	ne
 8005114:	2301      	movne	r3, #1
 8005116:	2300      	moveq	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01c      	beq.n	8005158 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800511e:	f005 fd9f 	bl	800ac60 <HAL_RCC_GetHCLKFreq>
 8005122:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800512c:	d010      	beq.n	8005150 <ADC_ConfigureBoostMode+0x78>
 800512e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005132:	d873      	bhi.n	800521c <ADC_ConfigureBoostMode+0x144>
 8005134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005138:	d002      	beq.n	8005140 <ADC_ConfigureBoostMode+0x68>
 800513a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800513e:	d16d      	bne.n	800521c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	0c1b      	lsrs	r3, r3, #16
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	60fb      	str	r3, [r7, #12]
        break;
 800514e:	e068      	b.n	8005222 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	089b      	lsrs	r3, r3, #2
 8005154:	60fb      	str	r3, [r7, #12]
        break;
 8005156:	e064      	b.n	8005222 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005158:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800515c:	f04f 0100 	mov.w	r1, #0
 8005160:	f007 f826 	bl	800c1b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005164:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800516e:	d051      	beq.n	8005214 <ADC_ConfigureBoostMode+0x13c>
 8005170:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005174:	d854      	bhi.n	8005220 <ADC_ConfigureBoostMode+0x148>
 8005176:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800517a:	d047      	beq.n	800520c <ADC_ConfigureBoostMode+0x134>
 800517c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005180:	d84e      	bhi.n	8005220 <ADC_ConfigureBoostMode+0x148>
 8005182:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005186:	d03d      	beq.n	8005204 <ADC_ConfigureBoostMode+0x12c>
 8005188:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800518c:	d848      	bhi.n	8005220 <ADC_ConfigureBoostMode+0x148>
 800518e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005192:	d033      	beq.n	80051fc <ADC_ConfigureBoostMode+0x124>
 8005194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005198:	d842      	bhi.n	8005220 <ADC_ConfigureBoostMode+0x148>
 800519a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800519e:	d029      	beq.n	80051f4 <ADC_ConfigureBoostMode+0x11c>
 80051a0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80051a4:	d83c      	bhi.n	8005220 <ADC_ConfigureBoostMode+0x148>
 80051a6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80051aa:	d01a      	beq.n	80051e2 <ADC_ConfigureBoostMode+0x10a>
 80051ac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80051b0:	d836      	bhi.n	8005220 <ADC_ConfigureBoostMode+0x148>
 80051b2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80051b6:	d014      	beq.n	80051e2 <ADC_ConfigureBoostMode+0x10a>
 80051b8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80051bc:	d830      	bhi.n	8005220 <ADC_ConfigureBoostMode+0x148>
 80051be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c2:	d00e      	beq.n	80051e2 <ADC_ConfigureBoostMode+0x10a>
 80051c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c8:	d82a      	bhi.n	8005220 <ADC_ConfigureBoostMode+0x148>
 80051ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051ce:	d008      	beq.n	80051e2 <ADC_ConfigureBoostMode+0x10a>
 80051d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051d4:	d824      	bhi.n	8005220 <ADC_ConfigureBoostMode+0x148>
 80051d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051da:	d002      	beq.n	80051e2 <ADC_ConfigureBoostMode+0x10a>
 80051dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051e0:	d11e      	bne.n	8005220 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	0c9b      	lsrs	r3, r3, #18
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	60fb      	str	r3, [r7, #12]
        break;
 80051f2:	e016      	b.n	8005222 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	60fb      	str	r3, [r7, #12]
        break;
 80051fa:	e012      	b.n	8005222 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	60fb      	str	r3, [r7, #12]
        break;
 8005202:	e00e      	b.n	8005222 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	099b      	lsrs	r3, r3, #6
 8005208:	60fb      	str	r3, [r7, #12]
        break;
 800520a:	e00a      	b.n	8005222 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	09db      	lsrs	r3, r3, #7
 8005210:	60fb      	str	r3, [r7, #12]
        break;
 8005212:	e006      	b.n	8005222 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	60fb      	str	r3, [r7, #12]
        break;
 800521a:	e002      	b.n	8005222 <ADC_ConfigureBoostMode+0x14a>
        break;
 800521c:	bf00      	nop
 800521e:	e000      	b.n	8005222 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005220:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005222:	f7fe fdcb 	bl	8003dbc <HAL_GetREVID>
 8005226:	4603      	mov	r3, r0
 8005228:	f241 0203 	movw	r2, #4099	; 0x1003
 800522c:	4293      	cmp	r3, r2
 800522e:	d815      	bhi.n	800525c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a2b      	ldr	r2, [pc, #172]	; (80052e0 <ADC_ConfigureBoostMode+0x208>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d908      	bls.n	800524a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005246:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005248:	e03e      	b.n	80052c8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005258:	609a      	str	r2, [r3, #8]
}
 800525a:	e035      	b.n	80052c8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4a1f      	ldr	r2, [pc, #124]	; (80052e4 <ADC_ConfigureBoostMode+0x20c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d808      	bhi.n	800527c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005278:	609a      	str	r2, [r3, #8]
}
 800527a:	e025      	b.n	80052c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <ADC_ConfigureBoostMode+0x210>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d80a      	bhi.n	800529a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005296:	609a      	str	r2, [r3, #8]
}
 8005298:	e016      	b.n	80052c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4a13      	ldr	r2, [pc, #76]	; (80052ec <ADC_ConfigureBoostMode+0x214>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d80a      	bhi.n	80052b8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b4:	609a      	str	r2, [r3, #8]
}
 80052b6:	e007      	b.n	80052c8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80052c6:	609a      	str	r2, [r3, #8]
}
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40022000 	.word	0x40022000
 80052d4:	40022100 	.word	0x40022100
 80052d8:	40022300 	.word	0x40022300
 80052dc:	58026300 	.word	0x58026300
 80052e0:	01312d00 	.word	0x01312d00
 80052e4:	005f5e10 	.word	0x005f5e10
 80052e8:	00bebc20 	.word	0x00bebc20
 80052ec:	017d7840 	.word	0x017d7840

080052f0 <LL_ADC_IsEnabled>:
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <LL_ADC_IsEnabled+0x18>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <LL_ADC_IsEnabled+0x1a>
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
	...

08005318 <LL_ADC_StartCalibration>:
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	4b09      	ldr	r3, [pc, #36]	; (8005350 <LL_ADC_StartCalibration+0x38>)
 800532a:	4013      	ands	r3, r2
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005338:	430a      	orrs	r2, r1
 800533a:	4313      	orrs	r3, r2
 800533c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	3ffeffc0 	.word	0x3ffeffc0

08005354 <LL_ADC_IsCalibrationOnGoing>:
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005368:	d101      	bne.n	800536e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <LL_ADC_REG_IsConversionOngoing>:
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b04      	cmp	r3, #4
 800538e:	d101      	bne.n	8005394 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
	...

080053a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_ADCEx_Calibration_Start+0x1e>
 80053be:	2302      	movs	r3, #2
 80053c0:	e04c      	b.n	800545c <HAL_ADCEx_Calibration_Start+0xb8>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff fd90 	bl	8004ef0 <ADC_Disable>
 80053d0:	4603      	mov	r3, r0
 80053d2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d135      	bne.n	8005446 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053de:	4b21      	ldr	r3, [pc, #132]	; (8005464 <HAL_ADCEx_Calibration_Start+0xc0>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	f043 0202 	orr.w	r2, r3, #2
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff ff90 	bl	8005318 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80053f8:	e014      	b.n	8005424 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	3301      	adds	r3, #1
 80053fe:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4a19      	ldr	r2, [pc, #100]	; (8005468 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d30d      	bcc.n	8005424 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540c:	f023 0312 	bic.w	r3, r3, #18
 8005410:	f043 0210 	orr.w	r2, r3, #16
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e01b      	b.n	800545c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff ff93 	bl	8005354 <LL_ADC_IsCalibrationOnGoing>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e2      	bne.n	80053fa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005438:	f023 0303 	bic.w	r3, r3, #3
 800543c:	f043 0201 	orr.w	r2, r3, #1
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	655a      	str	r2, [r3, #84]	; 0x54
 8005444:	e005      	b.n	8005452 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544a:	f043 0210 	orr.w	r2, r3, #16
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800545a:	7dfb      	ldrb	r3, [r7, #23]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	ffffeefd 	.word	0xffffeefd
 8005468:	25c3f800 	.word	0x25c3f800

0800546c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b09f      	sub	sp, #124	; 0x7c
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005486:	2302      	movs	r3, #2
 8005488:	e0be      	b.n	8005608 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005492:	2300      	movs	r3, #0
 8005494:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005496:	2300      	movs	r3, #0
 8005498:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a5c      	ldr	r2, [pc, #368]	; (8005610 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d102      	bne.n	80054aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80054a4:	4b5b      	ldr	r3, [pc, #364]	; (8005614 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	e001      	b.n	80054ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80054aa:	2300      	movs	r3, #0
 80054ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10b      	bne.n	80054cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b8:	f043 0220 	orr.w	r2, r3, #32
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e09d      	b.n	8005608 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff ff54 	bl	800537c <LL_ADC_REG_IsConversionOngoing>
 80054d4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff ff4e 	bl	800537c <LL_ADC_REG_IsConversionOngoing>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d17f      	bne.n	80055e6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80054e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d17c      	bne.n	80055e6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a47      	ldr	r2, [pc, #284]	; (8005610 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a46      	ldr	r2, [pc, #280]	; (8005614 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005500:	4b45      	ldr	r3, [pc, #276]	; (8005618 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005502:	e000      	b.n	8005506 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005504:	4b45      	ldr	r3, [pc, #276]	; (800561c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005506:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d039      	beq.n	8005584 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	431a      	orrs	r2, r3
 800551e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005520:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a3a      	ldr	r2, [pc, #232]	; (8005610 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a38      	ldr	r2, [pc, #224]	; (8005614 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10e      	bne.n	8005554 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005536:	4836      	ldr	r0, [pc, #216]	; (8005610 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005538:	f7ff feda 	bl	80052f0 <LL_ADC_IsEnabled>
 800553c:	4604      	mov	r4, r0
 800553e:	4835      	ldr	r0, [pc, #212]	; (8005614 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005540:	f7ff fed6 	bl	80052f0 <LL_ADC_IsEnabled>
 8005544:	4603      	mov	r3, r0
 8005546:	4323      	orrs	r3, r4
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf0c      	ite	eq
 800554c:	2301      	moveq	r3, #1
 800554e:	2300      	movne	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e008      	b.n	8005566 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005554:	4832      	ldr	r0, [pc, #200]	; (8005620 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005556:	f7ff fecb 	bl	80052f0 <LL_ADC_IsEnabled>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf0c      	ite	eq
 8005560:	2301      	moveq	r3, #1
 8005562:	2300      	movne	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d047      	beq.n	80055fa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800556a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	4b2d      	ldr	r3, [pc, #180]	; (8005624 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005570:	4013      	ands	r3, r2
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	6811      	ldr	r1, [r2, #0]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	6892      	ldr	r2, [r2, #8]
 800557a:	430a      	orrs	r2, r1
 800557c:	431a      	orrs	r2, r3
 800557e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005580:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005582:	e03a      	b.n	80055fa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800558c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1e      	ldr	r2, [pc, #120]	; (8005610 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1d      	ldr	r2, [pc, #116]	; (8005614 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d10e      	bne.n	80055c2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80055a4:	481a      	ldr	r0, [pc, #104]	; (8005610 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055a6:	f7ff fea3 	bl	80052f0 <LL_ADC_IsEnabled>
 80055aa:	4604      	mov	r4, r0
 80055ac:	4819      	ldr	r0, [pc, #100]	; (8005614 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055ae:	f7ff fe9f 	bl	80052f0 <LL_ADC_IsEnabled>
 80055b2:	4603      	mov	r3, r0
 80055b4:	4323      	orrs	r3, r4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bf0c      	ite	eq
 80055ba:	2301      	moveq	r3, #1
 80055bc:	2300      	movne	r3, #0
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	e008      	b.n	80055d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80055c2:	4817      	ldr	r0, [pc, #92]	; (8005620 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80055c4:	f7ff fe94 	bl	80052f0 <LL_ADC_IsEnabled>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf0c      	ite	eq
 80055ce:	2301      	moveq	r3, #1
 80055d0:	2300      	movne	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d010      	beq.n	80055fa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80055d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	4b11      	ldr	r3, [pc, #68]	; (8005624 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80055de:	4013      	ands	r3, r2
 80055e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055e2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055e4:	e009      	b.n	80055fa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	f043 0220 	orr.w	r2, r3, #32
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80055f8:	e000      	b.n	80055fc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055fa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005604:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005608:	4618      	mov	r0, r3
 800560a:	377c      	adds	r7, #124	; 0x7c
 800560c:	46bd      	mov	sp, r7
 800560e:	bd90      	pop	{r4, r7, pc}
 8005610:	40022000 	.word	0x40022000
 8005614:	40022100 	.word	0x40022100
 8005618:	40022300 	.word	0x40022300
 800561c:	58026300 	.word	0x58026300
 8005620:	58026000 	.word	0x58026000
 8005624:	fffff0e0 	.word	0xfffff0e0

08005628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <__NVIC_SetPriorityGrouping+0x40>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005644:	4013      	ands	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <__NVIC_SetPriorityGrouping+0x44>)
 8005652:	4313      	orrs	r3, r2
 8005654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005656:	4a04      	ldr	r2, [pc, #16]	; (8005668 <__NVIC_SetPriorityGrouping+0x40>)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	60d3      	str	r3, [r2, #12]
}
 800565c:	bf00      	nop
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	e000ed00 	.word	0xe000ed00
 800566c:	05fa0000 	.word	0x05fa0000

08005670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <__NVIC_GetPriorityGrouping+0x18>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	0a1b      	lsrs	r3, r3, #8
 800567a:	f003 0307 	and.w	r3, r3, #7
}
 800567e:	4618      	mov	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	e000ed00 	.word	0xe000ed00

0800568c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800569a:	2b00      	cmp	r3, #0
 800569c:	db0b      	blt.n	80056b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	f003 021f 	and.w	r2, r3, #31
 80056a4:	4907      	ldr	r1, [pc, #28]	; (80056c4 <__NVIC_EnableIRQ+0x38>)
 80056a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	2001      	movs	r0, #1
 80056ae:	fa00 f202 	lsl.w	r2, r0, r2
 80056b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	e000e100 	.word	0xe000e100

080056c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	6039      	str	r1, [r7, #0]
 80056d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	db0a      	blt.n	80056f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	490c      	ldr	r1, [pc, #48]	; (8005714 <__NVIC_SetPriority+0x4c>)
 80056e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056e6:	0112      	lsls	r2, r2, #4
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	440b      	add	r3, r1
 80056ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056f0:	e00a      	b.n	8005708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	4908      	ldr	r1, [pc, #32]	; (8005718 <__NVIC_SetPriority+0x50>)
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	3b04      	subs	r3, #4
 8005700:	0112      	lsls	r2, r2, #4
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	440b      	add	r3, r1
 8005706:	761a      	strb	r2, [r3, #24]
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	e000e100 	.word	0xe000e100
 8005718:	e000ed00 	.word	0xe000ed00

0800571c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800571c:	b480      	push	{r7}
 800571e:	b089      	sub	sp, #36	; 0x24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f1c3 0307 	rsb	r3, r3, #7
 8005736:	2b04      	cmp	r3, #4
 8005738:	bf28      	it	cs
 800573a:	2304      	movcs	r3, #4
 800573c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3304      	adds	r3, #4
 8005742:	2b06      	cmp	r3, #6
 8005744:	d902      	bls.n	800574c <NVIC_EncodePriority+0x30>
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	3b03      	subs	r3, #3
 800574a:	e000      	b.n	800574e <NVIC_EncodePriority+0x32>
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43da      	mvns	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	401a      	ands	r2, r3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	43d9      	mvns	r1, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005774:	4313      	orrs	r3, r2
         );
}
 8005776:	4618      	mov	r0, r3
 8005778:	3724      	adds	r7, #36	; 0x24
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff ff4c 	bl	8005628 <__NVIC_SetPriorityGrouping>
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057a6:	f7ff ff63 	bl	8005670 <__NVIC_GetPriorityGrouping>
 80057aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	6978      	ldr	r0, [r7, #20]
 80057b2:	f7ff ffb3 	bl	800571c <NVIC_EncodePriority>
 80057b6:	4602      	mov	r2, r0
 80057b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff ff82 	bl	80056c8 <__NVIC_SetPriority>
}
 80057c4:	bf00      	nop
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff ff56 	bl	800568c <__NVIC_EnableIRQ>
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e014      	b.n	8005824 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	791b      	ldrb	r3, [r3, #4]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fd fc76 	bl	80030fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e046      	b.n	80058ce <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	795b      	ldrb	r3, [r3, #5]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_DAC_Start+0x20>
 8005848:	2302      	movs	r3, #2
 800584a:	e040      	b.n	80058ce <HAL_DAC_Start+0xa2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6819      	ldr	r1, [r3, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2201      	movs	r2, #1
 8005866:	409a      	lsls	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10f      	bne.n	8005896 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005880:	2b02      	cmp	r3, #2
 8005882:	d11d      	bne.n	80058c0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	605a      	str	r2, [r3, #4]
 8005894:	e014      	b.n	80058c0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2102      	movs	r1, #2
 80058a8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d107      	bne.n	80058c0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0202 	orr.w	r2, r2, #2
 80058be:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0a2      	b.n	8005a3a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	795b      	ldrb	r3, [r3, #5]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_DAC_Start_DMA+0x24>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e09c      	b.n	8005a3a <HAL_DAC_Start_DMA+0x15e>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2201      	movs	r2, #1
 8005904:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2202      	movs	r2, #2
 800590a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d129      	bne.n	8005966 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	4a4b      	ldr	r2, [pc, #300]	; (8005a44 <HAL_DAC_Start_DMA+0x168>)
 8005918:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4a4a      	ldr	r2, [pc, #296]	; (8005a48 <HAL_DAC_Start_DMA+0x16c>)
 8005920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	4a49      	ldr	r2, [pc, #292]	; (8005a4c <HAL_DAC_Start_DMA+0x170>)
 8005928:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005938:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <HAL_DAC_Start_DMA+0x6c>
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	2b04      	cmp	r3, #4
 8005944:	d005      	beq.n	8005952 <HAL_DAC_Start_DMA+0x76>
 8005946:	e009      	b.n	800595c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3308      	adds	r3, #8
 800594e:	613b      	str	r3, [r7, #16]
        break;
 8005950:	e033      	b.n	80059ba <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	613b      	str	r3, [r7, #16]
        break;
 800595a:	e02e      	b.n	80059ba <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3310      	adds	r3, #16
 8005962:	613b      	str	r3, [r7, #16]
        break;
 8005964:	e029      	b.n	80059ba <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	4a39      	ldr	r2, [pc, #228]	; (8005a50 <HAL_DAC_Start_DMA+0x174>)
 800596c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	4a38      	ldr	r2, [pc, #224]	; (8005a54 <HAL_DAC_Start_DMA+0x178>)
 8005974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	4a37      	ldr	r2, [pc, #220]	; (8005a58 <HAL_DAC_Start_DMA+0x17c>)
 800597c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800598c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_DAC_Start_DMA+0xc0>
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2b04      	cmp	r3, #4
 8005998:	d005      	beq.n	80059a6 <HAL_DAC_Start_DMA+0xca>
 800599a:	e009      	b.n	80059b0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	613b      	str	r3, [r7, #16]
        break;
 80059a4:	e009      	b.n	80059ba <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3318      	adds	r3, #24
 80059ac:	613b      	str	r3, [r7, #16]
        break;
 80059ae:	e004      	b.n	80059ba <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	331c      	adds	r3, #28
 80059b6:	613b      	str	r3, [r7, #16]
        break;
 80059b8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d111      	bne.n	80059e4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6898      	ldr	r0, [r3, #8]
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	f000 fe67 	bl	80066ac <HAL_DMA_Start_IT>
 80059de:	4603      	mov	r3, r0
 80059e0:	75fb      	strb	r3, [r7, #23]
 80059e2:	e010      	b.n	8005a06 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80059f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68d8      	ldr	r0, [r3, #12]
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	f000 fe55 	bl	80066ac <HAL_DMA_Start_IT>
 8005a02:	4603      	mov	r3, r0
 8005a04:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10c      	bne.n	8005a2c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6819      	ldr	r1, [r3, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2201      	movs	r2, #1
 8005a20:	409a      	lsls	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e005      	b.n	8005a38 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f043 0204 	orr.w	r2, r3, #4
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	08005ecd 	.word	0x08005ecd
 8005a48:	08005eef 	.word	0x08005eef
 8005a4c:	08005f0b 	.word	0x08005f0b
 8005a50:	08005f89 	.word	0x08005f89
 8005a54:	08005fab 	.word	0x08005fab
 8005a58:	08005fc7 	.word	0x08005fc7

08005a5c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e03e      	b.n	8005aee <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6819      	ldr	r1, [r3, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	43da      	mvns	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	400a      	ands	r2, r1
 8005a8c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	43da      	mvns	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	400a      	ands	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10d      	bne.n	8005acc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 f863 	bl	8006b80 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	e00c      	b.n	8005ae6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 f855 	bl	8006b80 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005ae4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01d      	beq.n	8005b54 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d018      	beq.n	8005b54 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2204      	movs	r2, #4
 8005b26:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f043 0201 	orr.w	r2, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b4c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f86f 	bl	8005c32 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01d      	beq.n	8005b9a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d018      	beq.n	8005b9a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f043 0202 	orr.w	r2, r3, #2
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005b82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f9ed 	bl	8005f74 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b087      	sub	sp, #28
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e015      	b.n	8005bea <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d105      	bne.n	8005bd6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	e004      	b.n	8005be0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4413      	add	r3, r2
 8005bdc:	3314      	adds	r3, #20
 8005bde:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	461a      	mov	r2, r3
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <HAL_DAC_ConfigChannel+0x1e>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e12a      	b.n	8005ec0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	795b      	ldrb	r3, [r3, #5]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d101      	bne.n	8005c76 <HAL_DAC_ConfigChannel+0x2e>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e124      	b.n	8005ec0 <HAL_DAC_ConfigChannel+0x278>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d17a      	bne.n	8005d80 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005c8a:	f7fe f88b 	bl	8003da4 <HAL_GetTick>
 8005c8e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d13d      	bne.n	8005d12 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c96:	e018      	b.n	8005cca <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c98:	f7fe f884 	bl	8003da4 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d911      	bls.n	8005cca <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cac:	4b86      	ldr	r3, [pc, #536]	; (8005ec8 <HAL_DAC_ConfigChannel+0x280>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f043 0208 	orr.w	r2, r3, #8
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2203      	movs	r2, #3
 8005cc4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e0fa      	b.n	8005ec0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd0:	4b7d      	ldr	r3, [pc, #500]	; (8005ec8 <HAL_DAC_ConfigChannel+0x280>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1df      	bne.n	8005c98 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	6992      	ldr	r2, [r2, #24]
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8005ce2:	e020      	b.n	8005d26 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005ce4:	f7fe f85e 	bl	8003da4 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d90f      	bls.n	8005d12 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	da0a      	bge.n	8005d12 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f043 0208 	orr.w	r2, r3, #8
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e0d6      	b.n	8005ec0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dbe3      	blt.n	8005ce4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	6992      	ldr	r2, [r2, #24]
 8005d24:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f003 0310 	and.w	r3, r3, #16
 8005d32:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005d36:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	ea02 0103 	and.w	r1, r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	409a      	lsls	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	21ff      	movs	r1, #255	; 0xff
 8005d62:	fa01 f303 	lsl.w	r3, r1, r3
 8005d66:	43db      	mvns	r3, r3
 8005d68:	ea02 0103 	and.w	r1, r2, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6a1a      	ldr	r2, [r3, #32]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	409a      	lsls	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d11d      	bne.n	8005dc4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	221f      	movs	r2, #31
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4013      	ands	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2207      	movs	r2, #7
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d102      	bne.n	8005dee <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
 8005dec:	e00f      	b.n	8005e0e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d102      	bne.n	8005dfc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005df6:	2301      	movs	r3, #1
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfa:	e008      	b.n	8005e0e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005e04:	2301      	movs	r3, #1
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
 8005e08:	e001      	b.n	8005e0e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f003 0310 	and.w	r3, r3, #16
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6819      	ldr	r1, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f003 0310 	and.w	r3, r3, #16
 8005e44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	43da      	mvns	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	400a      	ands	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	4013      	ands	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6819      	ldr	r1, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	22c0      	movs	r2, #192	; 0xc0
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	43da      	mvns	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	400a      	ands	r2, r1
 8005eae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3728      	adds	r7, #40	; 0x28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20008000 	.word	0x20008000

08005ecc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f7ff fe8b 	bl	8005bf6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	711a      	strb	r2, [r3, #4]
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f7ff fe84 	bl	8005c0a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f043 0204 	orr.w	r2, r3, #4
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7ff fe7a 	bl	8005c1e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	711a      	strb	r2, [r3, #4]
}
 8005f30:	bf00      	nop
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff ffce 	bl	8005f38 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	711a      	strb	r2, [r3, #4]
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff ffc7 	bl	8005f4c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f043 0204 	orr.w	r2, r3, #4
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7ff ffbd 	bl	8005f60 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	711a      	strb	r2, [r3, #4]
}
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005ffc:	f7fd fed2 	bl	8003da4 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e316      	b.n	800663a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a66      	ldr	r2, [pc, #408]	; (80061ac <HAL_DMA_Init+0x1b8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d04a      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a65      	ldr	r2, [pc, #404]	; (80061b0 <HAL_DMA_Init+0x1bc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d045      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a63      	ldr	r2, [pc, #396]	; (80061b4 <HAL_DMA_Init+0x1c0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d040      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a62      	ldr	r2, [pc, #392]	; (80061b8 <HAL_DMA_Init+0x1c4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d03b      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a60      	ldr	r2, [pc, #384]	; (80061bc <HAL_DMA_Init+0x1c8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d036      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a5f      	ldr	r2, [pc, #380]	; (80061c0 <HAL_DMA_Init+0x1cc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d031      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a5d      	ldr	r2, [pc, #372]	; (80061c4 <HAL_DMA_Init+0x1d0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02c      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a5c      	ldr	r2, [pc, #368]	; (80061c8 <HAL_DMA_Init+0x1d4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d027      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a5a      	ldr	r2, [pc, #360]	; (80061cc <HAL_DMA_Init+0x1d8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a59      	ldr	r2, [pc, #356]	; (80061d0 <HAL_DMA_Init+0x1dc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d01d      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a57      	ldr	r2, [pc, #348]	; (80061d4 <HAL_DMA_Init+0x1e0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a56      	ldr	r2, [pc, #344]	; (80061d8 <HAL_DMA_Init+0x1e4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a54      	ldr	r2, [pc, #336]	; (80061dc <HAL_DMA_Init+0x1e8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a53      	ldr	r2, [pc, #332]	; (80061e0 <HAL_DMA_Init+0x1ec>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a51      	ldr	r2, [pc, #324]	; (80061e4 <HAL_DMA_Init+0x1f0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_DMA_Init+0xb8>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a50      	ldr	r2, [pc, #320]	; (80061e8 <HAL_DMA_Init+0x1f4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d101      	bne.n	80060b0 <HAL_DMA_Init+0xbc>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <HAL_DMA_Init+0xbe>
 80060b0:	2300      	movs	r3, #0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 813b 	beq.w	800632e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a37      	ldr	r2, [pc, #220]	; (80061ac <HAL_DMA_Init+0x1b8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d04a      	beq.n	8006168 <HAL_DMA_Init+0x174>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a36      	ldr	r2, [pc, #216]	; (80061b0 <HAL_DMA_Init+0x1bc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d045      	beq.n	8006168 <HAL_DMA_Init+0x174>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a34      	ldr	r2, [pc, #208]	; (80061b4 <HAL_DMA_Init+0x1c0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d040      	beq.n	8006168 <HAL_DMA_Init+0x174>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a33      	ldr	r2, [pc, #204]	; (80061b8 <HAL_DMA_Init+0x1c4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d03b      	beq.n	8006168 <HAL_DMA_Init+0x174>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a31      	ldr	r2, [pc, #196]	; (80061bc <HAL_DMA_Init+0x1c8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d036      	beq.n	8006168 <HAL_DMA_Init+0x174>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a30      	ldr	r2, [pc, #192]	; (80061c0 <HAL_DMA_Init+0x1cc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d031      	beq.n	8006168 <HAL_DMA_Init+0x174>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2e      	ldr	r2, [pc, #184]	; (80061c4 <HAL_DMA_Init+0x1d0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d02c      	beq.n	8006168 <HAL_DMA_Init+0x174>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a2d      	ldr	r2, [pc, #180]	; (80061c8 <HAL_DMA_Init+0x1d4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d027      	beq.n	8006168 <HAL_DMA_Init+0x174>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a2b      	ldr	r2, [pc, #172]	; (80061cc <HAL_DMA_Init+0x1d8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d022      	beq.n	8006168 <HAL_DMA_Init+0x174>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a2a      	ldr	r2, [pc, #168]	; (80061d0 <HAL_DMA_Init+0x1dc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d01d      	beq.n	8006168 <HAL_DMA_Init+0x174>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a28      	ldr	r2, [pc, #160]	; (80061d4 <HAL_DMA_Init+0x1e0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d018      	beq.n	8006168 <HAL_DMA_Init+0x174>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a27      	ldr	r2, [pc, #156]	; (80061d8 <HAL_DMA_Init+0x1e4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d013      	beq.n	8006168 <HAL_DMA_Init+0x174>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a25      	ldr	r2, [pc, #148]	; (80061dc <HAL_DMA_Init+0x1e8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00e      	beq.n	8006168 <HAL_DMA_Init+0x174>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a24      	ldr	r2, [pc, #144]	; (80061e0 <HAL_DMA_Init+0x1ec>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d009      	beq.n	8006168 <HAL_DMA_Init+0x174>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a22      	ldr	r2, [pc, #136]	; (80061e4 <HAL_DMA_Init+0x1f0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <HAL_DMA_Init+0x174>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a21      	ldr	r2, [pc, #132]	; (80061e8 <HAL_DMA_Init+0x1f4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d108      	bne.n	800617a <HAL_DMA_Init+0x186>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e007      	b.n	800618a <HAL_DMA_Init+0x196>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0201 	bic.w	r2, r2, #1
 8006188:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800618a:	e02f      	b.n	80061ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800618c:	f7fd fe0a 	bl	8003da4 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b05      	cmp	r3, #5
 8006198:	d928      	bls.n	80061ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2203      	movs	r2, #3
 80061a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e246      	b.n	800663a <HAL_DMA_Init+0x646>
 80061ac:	40020010 	.word	0x40020010
 80061b0:	40020028 	.word	0x40020028
 80061b4:	40020040 	.word	0x40020040
 80061b8:	40020058 	.word	0x40020058
 80061bc:	40020070 	.word	0x40020070
 80061c0:	40020088 	.word	0x40020088
 80061c4:	400200a0 	.word	0x400200a0
 80061c8:	400200b8 	.word	0x400200b8
 80061cc:	40020410 	.word	0x40020410
 80061d0:	40020428 	.word	0x40020428
 80061d4:	40020440 	.word	0x40020440
 80061d8:	40020458 	.word	0x40020458
 80061dc:	40020470 	.word	0x40020470
 80061e0:	40020488 	.word	0x40020488
 80061e4:	400204a0 	.word	0x400204a0
 80061e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1c8      	bne.n	800618c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4b83      	ldr	r3, [pc, #524]	; (8006414 <HAL_DMA_Init+0x420>)
 8006206:	4013      	ands	r3, r2
 8006208:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006212:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800621e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800622a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	2b04      	cmp	r3, #4
 800623e:	d107      	bne.n	8006250 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006248:	4313      	orrs	r3, r2
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006250:	4b71      	ldr	r3, [pc, #452]	; (8006418 <HAL_DMA_Init+0x424>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	4b71      	ldr	r3, [pc, #452]	; (800641c <HAL_DMA_Init+0x428>)
 8006256:	4013      	ands	r3, r2
 8006258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800625c:	d328      	bcc.n	80062b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b28      	cmp	r3, #40	; 0x28
 8006264:	d903      	bls.n	800626e <HAL_DMA_Init+0x27a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b2e      	cmp	r3, #46	; 0x2e
 800626c:	d917      	bls.n	800629e <HAL_DMA_Init+0x2aa>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2b3e      	cmp	r3, #62	; 0x3e
 8006274:	d903      	bls.n	800627e <HAL_DMA_Init+0x28a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b42      	cmp	r3, #66	; 0x42
 800627c:	d90f      	bls.n	800629e <HAL_DMA_Init+0x2aa>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b46      	cmp	r3, #70	; 0x46
 8006284:	d903      	bls.n	800628e <HAL_DMA_Init+0x29a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b48      	cmp	r3, #72	; 0x48
 800628c:	d907      	bls.n	800629e <HAL_DMA_Init+0x2aa>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b4e      	cmp	r3, #78	; 0x4e
 8006294:	d905      	bls.n	80062a2 <HAL_DMA_Init+0x2ae>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b52      	cmp	r3, #82	; 0x52
 800629c:	d801      	bhi.n	80062a2 <HAL_DMA_Init+0x2ae>
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <HAL_DMA_Init+0x2b0>
 80062a2:	2300      	movs	r3, #0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f023 0307 	bic.w	r3, r3, #7
 80062c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d117      	bne.n	800630a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00e      	beq.n	800630a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f002 fb3f 	bl	8008970 <DMA_CheckFifoParam>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d008      	beq.n	800630a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2240      	movs	r2, #64	; 0x40
 80062fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e197      	b.n	800663a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f002 fa7a 	bl	800880c <DMA_CalcBaseAndBitshift>
 8006318:	4603      	mov	r3, r0
 800631a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006320:	f003 031f 	and.w	r3, r3, #31
 8006324:	223f      	movs	r2, #63	; 0x3f
 8006326:	409a      	lsls	r2, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	609a      	str	r2, [r3, #8]
 800632c:	e0cd      	b.n	80064ca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a3b      	ldr	r2, [pc, #236]	; (8006420 <HAL_DMA_Init+0x42c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d022      	beq.n	800637e <HAL_DMA_Init+0x38a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a39      	ldr	r2, [pc, #228]	; (8006424 <HAL_DMA_Init+0x430>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d01d      	beq.n	800637e <HAL_DMA_Init+0x38a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a38      	ldr	r2, [pc, #224]	; (8006428 <HAL_DMA_Init+0x434>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d018      	beq.n	800637e <HAL_DMA_Init+0x38a>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a36      	ldr	r2, [pc, #216]	; (800642c <HAL_DMA_Init+0x438>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <HAL_DMA_Init+0x38a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a35      	ldr	r2, [pc, #212]	; (8006430 <HAL_DMA_Init+0x43c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00e      	beq.n	800637e <HAL_DMA_Init+0x38a>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a33      	ldr	r2, [pc, #204]	; (8006434 <HAL_DMA_Init+0x440>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d009      	beq.n	800637e <HAL_DMA_Init+0x38a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a32      	ldr	r2, [pc, #200]	; (8006438 <HAL_DMA_Init+0x444>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_DMA_Init+0x38a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a30      	ldr	r2, [pc, #192]	; (800643c <HAL_DMA_Init+0x448>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d101      	bne.n	8006382 <HAL_DMA_Init+0x38e>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <HAL_DMA_Init+0x390>
 8006382:	2300      	movs	r3, #0
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8097 	beq.w	80064b8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a24      	ldr	r2, [pc, #144]	; (8006420 <HAL_DMA_Init+0x42c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d021      	beq.n	80063d8 <HAL_DMA_Init+0x3e4>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a22      	ldr	r2, [pc, #136]	; (8006424 <HAL_DMA_Init+0x430>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d01c      	beq.n	80063d8 <HAL_DMA_Init+0x3e4>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a21      	ldr	r2, [pc, #132]	; (8006428 <HAL_DMA_Init+0x434>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d017      	beq.n	80063d8 <HAL_DMA_Init+0x3e4>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1f      	ldr	r2, [pc, #124]	; (800642c <HAL_DMA_Init+0x438>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d012      	beq.n	80063d8 <HAL_DMA_Init+0x3e4>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <HAL_DMA_Init+0x43c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00d      	beq.n	80063d8 <HAL_DMA_Init+0x3e4>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1c      	ldr	r2, [pc, #112]	; (8006434 <HAL_DMA_Init+0x440>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d008      	beq.n	80063d8 <HAL_DMA_Init+0x3e4>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1b      	ldr	r2, [pc, #108]	; (8006438 <HAL_DMA_Init+0x444>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <HAL_DMA_Init+0x3e4>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a19      	ldr	r2, [pc, #100]	; (800643c <HAL_DMA_Init+0x448>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4b12      	ldr	r3, [pc, #72]	; (8006440 <HAL_DMA_Init+0x44c>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	d020      	beq.n	8006444 <HAL_DMA_Init+0x450>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d102      	bne.n	8006410 <HAL_DMA_Init+0x41c>
 800640a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800640e:	e01a      	b.n	8006446 <HAL_DMA_Init+0x452>
 8006410:	2300      	movs	r3, #0
 8006412:	e018      	b.n	8006446 <HAL_DMA_Init+0x452>
 8006414:	fe10803f 	.word	0xfe10803f
 8006418:	5c001000 	.word	0x5c001000
 800641c:	ffff0000 	.word	0xffff0000
 8006420:	58025408 	.word	0x58025408
 8006424:	5802541c 	.word	0x5802541c
 8006428:	58025430 	.word	0x58025430
 800642c:	58025444 	.word	0x58025444
 8006430:	58025458 	.word	0x58025458
 8006434:	5802546c 	.word	0x5802546c
 8006438:	58025480 	.word	0x58025480
 800643c:	58025494 	.word	0x58025494
 8006440:	fffe000f 	.word	0xfffe000f
 8006444:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68d2      	ldr	r2, [r2, #12]
 800644a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800644c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800645c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006464:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800646c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006474:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	4b6e      	ldr	r3, [pc, #440]	; (8006644 <HAL_DMA_Init+0x650>)
 800648c:	4413      	add	r3, r2
 800648e:	4a6e      	ldr	r2, [pc, #440]	; (8006648 <HAL_DMA_Init+0x654>)
 8006490:	fba2 2303 	umull	r2, r3, r2, r3
 8006494:	091b      	lsrs	r3, r3, #4
 8006496:	009a      	lsls	r2, r3, #2
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f002 f9b5 	bl	800880c <DMA_CalcBaseAndBitshift>
 80064a2:	4603      	mov	r3, r0
 80064a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	2201      	movs	r2, #1
 80064b0:	409a      	lsls	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	605a      	str	r2, [r3, #4]
 80064b6:	e008      	b.n	80064ca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2240      	movs	r2, #64	; 0x40
 80064bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2203      	movs	r2, #3
 80064c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e0b7      	b.n	800663a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a5f      	ldr	r2, [pc, #380]	; (800664c <HAL_DMA_Init+0x658>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d072      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a5d      	ldr	r2, [pc, #372]	; (8006650 <HAL_DMA_Init+0x65c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d06d      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a5c      	ldr	r2, [pc, #368]	; (8006654 <HAL_DMA_Init+0x660>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d068      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a5a      	ldr	r2, [pc, #360]	; (8006658 <HAL_DMA_Init+0x664>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d063      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a59      	ldr	r2, [pc, #356]	; (800665c <HAL_DMA_Init+0x668>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d05e      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a57      	ldr	r2, [pc, #348]	; (8006660 <HAL_DMA_Init+0x66c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d059      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a56      	ldr	r2, [pc, #344]	; (8006664 <HAL_DMA_Init+0x670>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d054      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a54      	ldr	r2, [pc, #336]	; (8006668 <HAL_DMA_Init+0x674>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d04f      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a53      	ldr	r2, [pc, #332]	; (800666c <HAL_DMA_Init+0x678>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d04a      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a51      	ldr	r2, [pc, #324]	; (8006670 <HAL_DMA_Init+0x67c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d045      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a50      	ldr	r2, [pc, #320]	; (8006674 <HAL_DMA_Init+0x680>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d040      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a4e      	ldr	r2, [pc, #312]	; (8006678 <HAL_DMA_Init+0x684>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d03b      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a4d      	ldr	r2, [pc, #308]	; (800667c <HAL_DMA_Init+0x688>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d036      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a4b      	ldr	r2, [pc, #300]	; (8006680 <HAL_DMA_Init+0x68c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d031      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a4a      	ldr	r2, [pc, #296]	; (8006684 <HAL_DMA_Init+0x690>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d02c      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a48      	ldr	r2, [pc, #288]	; (8006688 <HAL_DMA_Init+0x694>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d027      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a47      	ldr	r2, [pc, #284]	; (800668c <HAL_DMA_Init+0x698>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d022      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a45      	ldr	r2, [pc, #276]	; (8006690 <HAL_DMA_Init+0x69c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01d      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a44      	ldr	r2, [pc, #272]	; (8006694 <HAL_DMA_Init+0x6a0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d018      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a42      	ldr	r2, [pc, #264]	; (8006698 <HAL_DMA_Init+0x6a4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a41      	ldr	r2, [pc, #260]	; (800669c <HAL_DMA_Init+0x6a8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00e      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a3f      	ldr	r2, [pc, #252]	; (80066a0 <HAL_DMA_Init+0x6ac>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d009      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a3e      	ldr	r2, [pc, #248]	; (80066a4 <HAL_DMA_Init+0x6b0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <HAL_DMA_Init+0x5c6>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a3c      	ldr	r2, [pc, #240]	; (80066a8 <HAL_DMA_Init+0x6b4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d101      	bne.n	80065be <HAL_DMA_Init+0x5ca>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <HAL_DMA_Init+0x5cc>
 80065be:	2300      	movs	r3, #0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d032      	beq.n	800662a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f002 fa4f 	bl	8008a68 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b80      	cmp	r3, #128	; 0x80
 80065d0:	d102      	bne.n	80065d8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80065ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d010      	beq.n	8006618 <HAL_DMA_Init+0x624>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d80c      	bhi.n	8006618 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f002 facc 	bl	8008b9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006614:	605a      	str	r2, [r3, #4]
 8006616:	e008      	b.n	800662a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	a7fdabf8 	.word	0xa7fdabf8
 8006648:	cccccccd 	.word	0xcccccccd
 800664c:	40020010 	.word	0x40020010
 8006650:	40020028 	.word	0x40020028
 8006654:	40020040 	.word	0x40020040
 8006658:	40020058 	.word	0x40020058
 800665c:	40020070 	.word	0x40020070
 8006660:	40020088 	.word	0x40020088
 8006664:	400200a0 	.word	0x400200a0
 8006668:	400200b8 	.word	0x400200b8
 800666c:	40020410 	.word	0x40020410
 8006670:	40020428 	.word	0x40020428
 8006674:	40020440 	.word	0x40020440
 8006678:	40020458 	.word	0x40020458
 800667c:	40020470 	.word	0x40020470
 8006680:	40020488 	.word	0x40020488
 8006684:	400204a0 	.word	0x400204a0
 8006688:	400204b8 	.word	0x400204b8
 800668c:	58025408 	.word	0x58025408
 8006690:	5802541c 	.word	0x5802541c
 8006694:	58025430 	.word	0x58025430
 8006698:	58025444 	.word	0x58025444
 800669c:	58025458 	.word	0x58025458
 80066a0:	5802546c 	.word	0x5802546c
 80066a4:	58025480 	.word	0x58025480
 80066a8:	58025494 	.word	0x58025494

080066ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e226      	b.n	8006b16 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_DMA_Start_IT+0x2a>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e21f      	b.n	8006b16 <HAL_DMA_Start_IT+0x46a>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	f040 820a 	bne.w	8006b00 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a68      	ldr	r2, [pc, #416]	; (80068a0 <HAL_DMA_Start_IT+0x1f4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d04a      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a66      	ldr	r2, [pc, #408]	; (80068a4 <HAL_DMA_Start_IT+0x1f8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d045      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a65      	ldr	r2, [pc, #404]	; (80068a8 <HAL_DMA_Start_IT+0x1fc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d040      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a63      	ldr	r2, [pc, #396]	; (80068ac <HAL_DMA_Start_IT+0x200>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d03b      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a62      	ldr	r2, [pc, #392]	; (80068b0 <HAL_DMA_Start_IT+0x204>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d036      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a60      	ldr	r2, [pc, #384]	; (80068b4 <HAL_DMA_Start_IT+0x208>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d031      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a5f      	ldr	r2, [pc, #380]	; (80068b8 <HAL_DMA_Start_IT+0x20c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d02c      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a5d      	ldr	r2, [pc, #372]	; (80068bc <HAL_DMA_Start_IT+0x210>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d027      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a5c      	ldr	r2, [pc, #368]	; (80068c0 <HAL_DMA_Start_IT+0x214>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d022      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a5a      	ldr	r2, [pc, #360]	; (80068c4 <HAL_DMA_Start_IT+0x218>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d01d      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a59      	ldr	r2, [pc, #356]	; (80068c8 <HAL_DMA_Start_IT+0x21c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d018      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a57      	ldr	r2, [pc, #348]	; (80068cc <HAL_DMA_Start_IT+0x220>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a56      	ldr	r2, [pc, #344]	; (80068d0 <HAL_DMA_Start_IT+0x224>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00e      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a54      	ldr	r2, [pc, #336]	; (80068d4 <HAL_DMA_Start_IT+0x228>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d009      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a53      	ldr	r2, [pc, #332]	; (80068d8 <HAL_DMA_Start_IT+0x22c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d004      	beq.n	800679a <HAL_DMA_Start_IT+0xee>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a51      	ldr	r2, [pc, #324]	; (80068dc <HAL_DMA_Start_IT+0x230>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d108      	bne.n	80067ac <HAL_DMA_Start_IT+0x100>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0201 	bic.w	r2, r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e007      	b.n	80067bc <HAL_DMA_Start_IT+0x110>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0201 	bic.w	r2, r2, #1
 80067ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f001 fe76 	bl	80084b4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a34      	ldr	r2, [pc, #208]	; (80068a0 <HAL_DMA_Start_IT+0x1f4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d04a      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a33      	ldr	r2, [pc, #204]	; (80068a4 <HAL_DMA_Start_IT+0x1f8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d045      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a31      	ldr	r2, [pc, #196]	; (80068a8 <HAL_DMA_Start_IT+0x1fc>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d040      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a30      	ldr	r2, [pc, #192]	; (80068ac <HAL_DMA_Start_IT+0x200>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d03b      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a2e      	ldr	r2, [pc, #184]	; (80068b0 <HAL_DMA_Start_IT+0x204>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d036      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a2d      	ldr	r2, [pc, #180]	; (80068b4 <HAL_DMA_Start_IT+0x208>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d031      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a2b      	ldr	r2, [pc, #172]	; (80068b8 <HAL_DMA_Start_IT+0x20c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d02c      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a2a      	ldr	r2, [pc, #168]	; (80068bc <HAL_DMA_Start_IT+0x210>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d027      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a28      	ldr	r2, [pc, #160]	; (80068c0 <HAL_DMA_Start_IT+0x214>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d022      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a27      	ldr	r2, [pc, #156]	; (80068c4 <HAL_DMA_Start_IT+0x218>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d01d      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a25      	ldr	r2, [pc, #148]	; (80068c8 <HAL_DMA_Start_IT+0x21c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d018      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a24      	ldr	r2, [pc, #144]	; (80068cc <HAL_DMA_Start_IT+0x220>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d013      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a22      	ldr	r2, [pc, #136]	; (80068d0 <HAL_DMA_Start_IT+0x224>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00e      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a21      	ldr	r2, [pc, #132]	; (80068d4 <HAL_DMA_Start_IT+0x228>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d009      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1f      	ldr	r2, [pc, #124]	; (80068d8 <HAL_DMA_Start_IT+0x22c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d004      	beq.n	8006868 <HAL_DMA_Start_IT+0x1bc>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1e      	ldr	r2, [pc, #120]	; (80068dc <HAL_DMA_Start_IT+0x230>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d101      	bne.n	800686c <HAL_DMA_Start_IT+0x1c0>
 8006868:	2301      	movs	r3, #1
 800686a:	e000      	b.n	800686e <HAL_DMA_Start_IT+0x1c2>
 800686c:	2300      	movs	r3, #0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d036      	beq.n	80068e0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f023 021e 	bic.w	r2, r3, #30
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f042 0216 	orr.w	r2, r2, #22
 8006884:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	2b00      	cmp	r3, #0
 800688c:	d03e      	beq.n	800690c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0208 	orr.w	r2, r2, #8
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	e035      	b.n	800690c <HAL_DMA_Start_IT+0x260>
 80068a0:	40020010 	.word	0x40020010
 80068a4:	40020028 	.word	0x40020028
 80068a8:	40020040 	.word	0x40020040
 80068ac:	40020058 	.word	0x40020058
 80068b0:	40020070 	.word	0x40020070
 80068b4:	40020088 	.word	0x40020088
 80068b8:	400200a0 	.word	0x400200a0
 80068bc:	400200b8 	.word	0x400200b8
 80068c0:	40020410 	.word	0x40020410
 80068c4:	40020428 	.word	0x40020428
 80068c8:	40020440 	.word	0x40020440
 80068cc:	40020458 	.word	0x40020458
 80068d0:	40020470 	.word	0x40020470
 80068d4:	40020488 	.word	0x40020488
 80068d8:	400204a0 	.word	0x400204a0
 80068dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f023 020e 	bic.w	r2, r3, #14
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 020a 	orr.w	r2, r2, #10
 80068f2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d007      	beq.n	800690c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0204 	orr.w	r2, r2, #4
 800690a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a83      	ldr	r2, [pc, #524]	; (8006b20 <HAL_DMA_Start_IT+0x474>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d072      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a82      	ldr	r2, [pc, #520]	; (8006b24 <HAL_DMA_Start_IT+0x478>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d06d      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a80      	ldr	r2, [pc, #512]	; (8006b28 <HAL_DMA_Start_IT+0x47c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d068      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a7f      	ldr	r2, [pc, #508]	; (8006b2c <HAL_DMA_Start_IT+0x480>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d063      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a7d      	ldr	r2, [pc, #500]	; (8006b30 <HAL_DMA_Start_IT+0x484>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d05e      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a7c      	ldr	r2, [pc, #496]	; (8006b34 <HAL_DMA_Start_IT+0x488>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d059      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a7a      	ldr	r2, [pc, #488]	; (8006b38 <HAL_DMA_Start_IT+0x48c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d054      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a79      	ldr	r2, [pc, #484]	; (8006b3c <HAL_DMA_Start_IT+0x490>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d04f      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a77      	ldr	r2, [pc, #476]	; (8006b40 <HAL_DMA_Start_IT+0x494>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d04a      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a76      	ldr	r2, [pc, #472]	; (8006b44 <HAL_DMA_Start_IT+0x498>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d045      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a74      	ldr	r2, [pc, #464]	; (8006b48 <HAL_DMA_Start_IT+0x49c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d040      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a73      	ldr	r2, [pc, #460]	; (8006b4c <HAL_DMA_Start_IT+0x4a0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d03b      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a71      	ldr	r2, [pc, #452]	; (8006b50 <HAL_DMA_Start_IT+0x4a4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d036      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a70      	ldr	r2, [pc, #448]	; (8006b54 <HAL_DMA_Start_IT+0x4a8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d031      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a6e      	ldr	r2, [pc, #440]	; (8006b58 <HAL_DMA_Start_IT+0x4ac>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d02c      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a6d      	ldr	r2, [pc, #436]	; (8006b5c <HAL_DMA_Start_IT+0x4b0>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d027      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a6b      	ldr	r2, [pc, #428]	; (8006b60 <HAL_DMA_Start_IT+0x4b4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d022      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a6a      	ldr	r2, [pc, #424]	; (8006b64 <HAL_DMA_Start_IT+0x4b8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d01d      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a68      	ldr	r2, [pc, #416]	; (8006b68 <HAL_DMA_Start_IT+0x4bc>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d018      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a67      	ldr	r2, [pc, #412]	; (8006b6c <HAL_DMA_Start_IT+0x4c0>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d013      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a65      	ldr	r2, [pc, #404]	; (8006b70 <HAL_DMA_Start_IT+0x4c4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00e      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a64      	ldr	r2, [pc, #400]	; (8006b74 <HAL_DMA_Start_IT+0x4c8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d009      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a62      	ldr	r2, [pc, #392]	; (8006b78 <HAL_DMA_Start_IT+0x4cc>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d004      	beq.n	80069fc <HAL_DMA_Start_IT+0x350>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a61      	ldr	r2, [pc, #388]	; (8006b7c <HAL_DMA_Start_IT+0x4d0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d101      	bne.n	8006a00 <HAL_DMA_Start_IT+0x354>
 80069fc:	2301      	movs	r3, #1
 80069fe:	e000      	b.n	8006a02 <HAL_DMA_Start_IT+0x356>
 8006a00:	2300      	movs	r3, #0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d01a      	beq.n	8006a3c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d007      	beq.n	8006a24 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a22:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d007      	beq.n	8006a3c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a3a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a37      	ldr	r2, [pc, #220]	; (8006b20 <HAL_DMA_Start_IT+0x474>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d04a      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a36      	ldr	r2, [pc, #216]	; (8006b24 <HAL_DMA_Start_IT+0x478>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d045      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a34      	ldr	r2, [pc, #208]	; (8006b28 <HAL_DMA_Start_IT+0x47c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d040      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a33      	ldr	r2, [pc, #204]	; (8006b2c <HAL_DMA_Start_IT+0x480>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d03b      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a31      	ldr	r2, [pc, #196]	; (8006b30 <HAL_DMA_Start_IT+0x484>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d036      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a30      	ldr	r2, [pc, #192]	; (8006b34 <HAL_DMA_Start_IT+0x488>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d031      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a2e      	ldr	r2, [pc, #184]	; (8006b38 <HAL_DMA_Start_IT+0x48c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d02c      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a2d      	ldr	r2, [pc, #180]	; (8006b3c <HAL_DMA_Start_IT+0x490>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d027      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a2b      	ldr	r2, [pc, #172]	; (8006b40 <HAL_DMA_Start_IT+0x494>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d022      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a2a      	ldr	r2, [pc, #168]	; (8006b44 <HAL_DMA_Start_IT+0x498>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d01d      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a28      	ldr	r2, [pc, #160]	; (8006b48 <HAL_DMA_Start_IT+0x49c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d018      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a27      	ldr	r2, [pc, #156]	; (8006b4c <HAL_DMA_Start_IT+0x4a0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d013      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a25      	ldr	r2, [pc, #148]	; (8006b50 <HAL_DMA_Start_IT+0x4a4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00e      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a24      	ldr	r2, [pc, #144]	; (8006b54 <HAL_DMA_Start_IT+0x4a8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d009      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a22      	ldr	r2, [pc, #136]	; (8006b58 <HAL_DMA_Start_IT+0x4ac>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d004      	beq.n	8006adc <HAL_DMA_Start_IT+0x430>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a21      	ldr	r2, [pc, #132]	; (8006b5c <HAL_DMA_Start_IT+0x4b0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d108      	bne.n	8006aee <HAL_DMA_Start_IT+0x442>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	e012      	b.n	8006b14 <HAL_DMA_Start_IT+0x468>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0201 	orr.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	e009      	b.n	8006b14 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40020010 	.word	0x40020010
 8006b24:	40020028 	.word	0x40020028
 8006b28:	40020040 	.word	0x40020040
 8006b2c:	40020058 	.word	0x40020058
 8006b30:	40020070 	.word	0x40020070
 8006b34:	40020088 	.word	0x40020088
 8006b38:	400200a0 	.word	0x400200a0
 8006b3c:	400200b8 	.word	0x400200b8
 8006b40:	40020410 	.word	0x40020410
 8006b44:	40020428 	.word	0x40020428
 8006b48:	40020440 	.word	0x40020440
 8006b4c:	40020458 	.word	0x40020458
 8006b50:	40020470 	.word	0x40020470
 8006b54:	40020488 	.word	0x40020488
 8006b58:	400204a0 	.word	0x400204a0
 8006b5c:	400204b8 	.word	0x400204b8
 8006b60:	58025408 	.word	0x58025408
 8006b64:	5802541c 	.word	0x5802541c
 8006b68:	58025430 	.word	0x58025430
 8006b6c:	58025444 	.word	0x58025444
 8006b70:	58025458 	.word	0x58025458
 8006b74:	5802546c 	.word	0x5802546c
 8006b78:	58025480 	.word	0x58025480
 8006b7c:	58025494 	.word	0x58025494

08006b80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006b88:	f7fd f90c 	bl	8003da4 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e2dc      	b.n	8007152 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d008      	beq.n	8006bb6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2280      	movs	r2, #128	; 0x80
 8006ba8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e2cd      	b.n	8007152 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a76      	ldr	r2, [pc, #472]	; (8006d94 <HAL_DMA_Abort+0x214>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d04a      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a74      	ldr	r2, [pc, #464]	; (8006d98 <HAL_DMA_Abort+0x218>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d045      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a73      	ldr	r2, [pc, #460]	; (8006d9c <HAL_DMA_Abort+0x21c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d040      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a71      	ldr	r2, [pc, #452]	; (8006da0 <HAL_DMA_Abort+0x220>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d03b      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a70      	ldr	r2, [pc, #448]	; (8006da4 <HAL_DMA_Abort+0x224>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d036      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a6e      	ldr	r2, [pc, #440]	; (8006da8 <HAL_DMA_Abort+0x228>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d031      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6d      	ldr	r2, [pc, #436]	; (8006dac <HAL_DMA_Abort+0x22c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d02c      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a6b      	ldr	r2, [pc, #428]	; (8006db0 <HAL_DMA_Abort+0x230>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d027      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a6a      	ldr	r2, [pc, #424]	; (8006db4 <HAL_DMA_Abort+0x234>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d022      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a68      	ldr	r2, [pc, #416]	; (8006db8 <HAL_DMA_Abort+0x238>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d01d      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a67      	ldr	r2, [pc, #412]	; (8006dbc <HAL_DMA_Abort+0x23c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d018      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a65      	ldr	r2, [pc, #404]	; (8006dc0 <HAL_DMA_Abort+0x240>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a64      	ldr	r2, [pc, #400]	; (8006dc4 <HAL_DMA_Abort+0x244>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00e      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a62      	ldr	r2, [pc, #392]	; (8006dc8 <HAL_DMA_Abort+0x248>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d009      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a61      	ldr	r2, [pc, #388]	; (8006dcc <HAL_DMA_Abort+0x24c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d004      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a5f      	ldr	r2, [pc, #380]	; (8006dd0 <HAL_DMA_Abort+0x250>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d101      	bne.n	8006c5a <HAL_DMA_Abort+0xda>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <HAL_DMA_Abort+0xdc>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d013      	beq.n	8006c88 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 021e 	bic.w	r2, r2, #30
 8006c6e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695a      	ldr	r2, [r3, #20]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c7e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	e00a      	b.n	8006c9e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 020e 	bic.w	r2, r2, #14
 8006c96:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a3c      	ldr	r2, [pc, #240]	; (8006d94 <HAL_DMA_Abort+0x214>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d072      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a3a      	ldr	r2, [pc, #232]	; (8006d98 <HAL_DMA_Abort+0x218>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d06d      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a39      	ldr	r2, [pc, #228]	; (8006d9c <HAL_DMA_Abort+0x21c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d068      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a37      	ldr	r2, [pc, #220]	; (8006da0 <HAL_DMA_Abort+0x220>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d063      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a36      	ldr	r2, [pc, #216]	; (8006da4 <HAL_DMA_Abort+0x224>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d05e      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a34      	ldr	r2, [pc, #208]	; (8006da8 <HAL_DMA_Abort+0x228>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d059      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a33      	ldr	r2, [pc, #204]	; (8006dac <HAL_DMA_Abort+0x22c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d054      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a31      	ldr	r2, [pc, #196]	; (8006db0 <HAL_DMA_Abort+0x230>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d04f      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a30      	ldr	r2, [pc, #192]	; (8006db4 <HAL_DMA_Abort+0x234>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d04a      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a2e      	ldr	r2, [pc, #184]	; (8006db8 <HAL_DMA_Abort+0x238>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d045      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2d      	ldr	r2, [pc, #180]	; (8006dbc <HAL_DMA_Abort+0x23c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d040      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2b      	ldr	r2, [pc, #172]	; (8006dc0 <HAL_DMA_Abort+0x240>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d03b      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2a      	ldr	r2, [pc, #168]	; (8006dc4 <HAL_DMA_Abort+0x244>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d036      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a28      	ldr	r2, [pc, #160]	; (8006dc8 <HAL_DMA_Abort+0x248>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d031      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a27      	ldr	r2, [pc, #156]	; (8006dcc <HAL_DMA_Abort+0x24c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d02c      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a25      	ldr	r2, [pc, #148]	; (8006dd0 <HAL_DMA_Abort+0x250>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d027      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a24      	ldr	r2, [pc, #144]	; (8006dd4 <HAL_DMA_Abort+0x254>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d022      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a22      	ldr	r2, [pc, #136]	; (8006dd8 <HAL_DMA_Abort+0x258>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d01d      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a21      	ldr	r2, [pc, #132]	; (8006ddc <HAL_DMA_Abort+0x25c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d018      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1f      	ldr	r2, [pc, #124]	; (8006de0 <HAL_DMA_Abort+0x260>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d013      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1e      	ldr	r2, [pc, #120]	; (8006de4 <HAL_DMA_Abort+0x264>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00e      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a1c      	ldr	r2, [pc, #112]	; (8006de8 <HAL_DMA_Abort+0x268>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d009      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1b      	ldr	r2, [pc, #108]	; (8006dec <HAL_DMA_Abort+0x26c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d004      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a19      	ldr	r2, [pc, #100]	; (8006df0 <HAL_DMA_Abort+0x270>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d132      	bne.n	8006df4 <HAL_DMA_Abort+0x274>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e031      	b.n	8006df6 <HAL_DMA_Abort+0x276>
 8006d92:	bf00      	nop
 8006d94:	40020010 	.word	0x40020010
 8006d98:	40020028 	.word	0x40020028
 8006d9c:	40020040 	.word	0x40020040
 8006da0:	40020058 	.word	0x40020058
 8006da4:	40020070 	.word	0x40020070
 8006da8:	40020088 	.word	0x40020088
 8006dac:	400200a0 	.word	0x400200a0
 8006db0:	400200b8 	.word	0x400200b8
 8006db4:	40020410 	.word	0x40020410
 8006db8:	40020428 	.word	0x40020428
 8006dbc:	40020440 	.word	0x40020440
 8006dc0:	40020458 	.word	0x40020458
 8006dc4:	40020470 	.word	0x40020470
 8006dc8:	40020488 	.word	0x40020488
 8006dcc:	400204a0 	.word	0x400204a0
 8006dd0:	400204b8 	.word	0x400204b8
 8006dd4:	58025408 	.word	0x58025408
 8006dd8:	5802541c 	.word	0x5802541c
 8006ddc:	58025430 	.word	0x58025430
 8006de0:	58025444 	.word	0x58025444
 8006de4:	58025458 	.word	0x58025458
 8006de8:	5802546c 	.word	0x5802546c
 8006dec:	58025480 	.word	0x58025480
 8006df0:	58025494 	.word	0x58025494
 8006df4:	2300      	movs	r3, #0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a6d      	ldr	r2, [pc, #436]	; (8006fc4 <HAL_DMA_Abort+0x444>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d04a      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a6b      	ldr	r2, [pc, #428]	; (8006fc8 <HAL_DMA_Abort+0x448>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d045      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a6a      	ldr	r2, [pc, #424]	; (8006fcc <HAL_DMA_Abort+0x44c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d040      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a68      	ldr	r2, [pc, #416]	; (8006fd0 <HAL_DMA_Abort+0x450>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d03b      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a67      	ldr	r2, [pc, #412]	; (8006fd4 <HAL_DMA_Abort+0x454>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d036      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a65      	ldr	r2, [pc, #404]	; (8006fd8 <HAL_DMA_Abort+0x458>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d031      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a64      	ldr	r2, [pc, #400]	; (8006fdc <HAL_DMA_Abort+0x45c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d02c      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a62      	ldr	r2, [pc, #392]	; (8006fe0 <HAL_DMA_Abort+0x460>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d027      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a61      	ldr	r2, [pc, #388]	; (8006fe4 <HAL_DMA_Abort+0x464>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d022      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a5f      	ldr	r2, [pc, #380]	; (8006fe8 <HAL_DMA_Abort+0x468>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d01d      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a5e      	ldr	r2, [pc, #376]	; (8006fec <HAL_DMA_Abort+0x46c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d018      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a5c      	ldr	r2, [pc, #368]	; (8006ff0 <HAL_DMA_Abort+0x470>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a5b      	ldr	r2, [pc, #364]	; (8006ff4 <HAL_DMA_Abort+0x474>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00e      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a59      	ldr	r2, [pc, #356]	; (8006ff8 <HAL_DMA_Abort+0x478>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d009      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a58      	ldr	r2, [pc, #352]	; (8006ffc <HAL_DMA_Abort+0x47c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d004      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a56      	ldr	r2, [pc, #344]	; (8007000 <HAL_DMA_Abort+0x480>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d108      	bne.n	8006ebc <HAL_DMA_Abort+0x33c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0201 	bic.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	e007      	b.n	8006ecc <HAL_DMA_Abort+0x34c>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0201 	bic.w	r2, r2, #1
 8006eca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006ecc:	e013      	b.n	8006ef6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ece:	f7fc ff69 	bl	8003da4 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b05      	cmp	r3, #5
 8006eda:	d90c      	bls.n	8006ef6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e12d      	b.n	8007152 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e5      	bne.n	8006ece <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a2f      	ldr	r2, [pc, #188]	; (8006fc4 <HAL_DMA_Abort+0x444>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d04a      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a2d      	ldr	r2, [pc, #180]	; (8006fc8 <HAL_DMA_Abort+0x448>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d045      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a2c      	ldr	r2, [pc, #176]	; (8006fcc <HAL_DMA_Abort+0x44c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d040      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a2a      	ldr	r2, [pc, #168]	; (8006fd0 <HAL_DMA_Abort+0x450>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d03b      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a29      	ldr	r2, [pc, #164]	; (8006fd4 <HAL_DMA_Abort+0x454>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d036      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <HAL_DMA_Abort+0x458>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d031      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a26      	ldr	r2, [pc, #152]	; (8006fdc <HAL_DMA_Abort+0x45c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d02c      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a24      	ldr	r2, [pc, #144]	; (8006fe0 <HAL_DMA_Abort+0x460>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d027      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a23      	ldr	r2, [pc, #140]	; (8006fe4 <HAL_DMA_Abort+0x464>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d022      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a21      	ldr	r2, [pc, #132]	; (8006fe8 <HAL_DMA_Abort+0x468>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01d      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a20      	ldr	r2, [pc, #128]	; (8006fec <HAL_DMA_Abort+0x46c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d018      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1e      	ldr	r2, [pc, #120]	; (8006ff0 <HAL_DMA_Abort+0x470>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1d      	ldr	r2, [pc, #116]	; (8006ff4 <HAL_DMA_Abort+0x474>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <HAL_DMA_Abort+0x478>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1a      	ldr	r2, [pc, #104]	; (8006ffc <HAL_DMA_Abort+0x47c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a18      	ldr	r2, [pc, #96]	; (8007000 <HAL_DMA_Abort+0x480>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d101      	bne.n	8006fa6 <HAL_DMA_Abort+0x426>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <HAL_DMA_Abort+0x428>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d02b      	beq.n	8007004 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	223f      	movs	r2, #63	; 0x3f
 8006fbc:	409a      	lsls	r2, r3
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	609a      	str	r2, [r3, #8]
 8006fc2:	e02a      	b.n	800701a <HAL_DMA_Abort+0x49a>
 8006fc4:	40020010 	.word	0x40020010
 8006fc8:	40020028 	.word	0x40020028
 8006fcc:	40020040 	.word	0x40020040
 8006fd0:	40020058 	.word	0x40020058
 8006fd4:	40020070 	.word	0x40020070
 8006fd8:	40020088 	.word	0x40020088
 8006fdc:	400200a0 	.word	0x400200a0
 8006fe0:	400200b8 	.word	0x400200b8
 8006fe4:	40020410 	.word	0x40020410
 8006fe8:	40020428 	.word	0x40020428
 8006fec:	40020440 	.word	0x40020440
 8006ff0:	40020458 	.word	0x40020458
 8006ff4:	40020470 	.word	0x40020470
 8006ff8:	40020488 	.word	0x40020488
 8006ffc:	400204a0 	.word	0x400204a0
 8007000:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007008:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	2201      	movs	r2, #1
 8007014:	409a      	lsls	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a4f      	ldr	r2, [pc, #316]	; (800715c <HAL_DMA_Abort+0x5dc>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d072      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a4d      	ldr	r2, [pc, #308]	; (8007160 <HAL_DMA_Abort+0x5e0>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d06d      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a4c      	ldr	r2, [pc, #304]	; (8007164 <HAL_DMA_Abort+0x5e4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d068      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a4a      	ldr	r2, [pc, #296]	; (8007168 <HAL_DMA_Abort+0x5e8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d063      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a49      	ldr	r2, [pc, #292]	; (800716c <HAL_DMA_Abort+0x5ec>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d05e      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a47      	ldr	r2, [pc, #284]	; (8007170 <HAL_DMA_Abort+0x5f0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d059      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a46      	ldr	r2, [pc, #280]	; (8007174 <HAL_DMA_Abort+0x5f4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d054      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a44      	ldr	r2, [pc, #272]	; (8007178 <HAL_DMA_Abort+0x5f8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d04f      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a43      	ldr	r2, [pc, #268]	; (800717c <HAL_DMA_Abort+0x5fc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d04a      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a41      	ldr	r2, [pc, #260]	; (8007180 <HAL_DMA_Abort+0x600>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d045      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a40      	ldr	r2, [pc, #256]	; (8007184 <HAL_DMA_Abort+0x604>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d040      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a3e      	ldr	r2, [pc, #248]	; (8007188 <HAL_DMA_Abort+0x608>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d03b      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a3d      	ldr	r2, [pc, #244]	; (800718c <HAL_DMA_Abort+0x60c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d036      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a3b      	ldr	r2, [pc, #236]	; (8007190 <HAL_DMA_Abort+0x610>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d031      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a3a      	ldr	r2, [pc, #232]	; (8007194 <HAL_DMA_Abort+0x614>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d02c      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a38      	ldr	r2, [pc, #224]	; (8007198 <HAL_DMA_Abort+0x618>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d027      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a37      	ldr	r2, [pc, #220]	; (800719c <HAL_DMA_Abort+0x61c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d022      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a35      	ldr	r2, [pc, #212]	; (80071a0 <HAL_DMA_Abort+0x620>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d01d      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a34      	ldr	r2, [pc, #208]	; (80071a4 <HAL_DMA_Abort+0x624>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d018      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a32      	ldr	r2, [pc, #200]	; (80071a8 <HAL_DMA_Abort+0x628>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a31      	ldr	r2, [pc, #196]	; (80071ac <HAL_DMA_Abort+0x62c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a2f      	ldr	r2, [pc, #188]	; (80071b0 <HAL_DMA_Abort+0x630>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d009      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a2e      	ldr	r2, [pc, #184]	; (80071b4 <HAL_DMA_Abort+0x634>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a2c      	ldr	r2, [pc, #176]	; (80071b8 <HAL_DMA_Abort+0x638>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d101      	bne.n	800710e <HAL_DMA_Abort+0x58e>
 800710a:	2301      	movs	r3, #1
 800710c:	e000      	b.n	8007110 <HAL_DMA_Abort+0x590>
 800710e:	2300      	movs	r3, #0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d015      	beq.n	8007140 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800711c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00c      	beq.n	8007140 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007134:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800713e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40020010 	.word	0x40020010
 8007160:	40020028 	.word	0x40020028
 8007164:	40020040 	.word	0x40020040
 8007168:	40020058 	.word	0x40020058
 800716c:	40020070 	.word	0x40020070
 8007170:	40020088 	.word	0x40020088
 8007174:	400200a0 	.word	0x400200a0
 8007178:	400200b8 	.word	0x400200b8
 800717c:	40020410 	.word	0x40020410
 8007180:	40020428 	.word	0x40020428
 8007184:	40020440 	.word	0x40020440
 8007188:	40020458 	.word	0x40020458
 800718c:	40020470 	.word	0x40020470
 8007190:	40020488 	.word	0x40020488
 8007194:	400204a0 	.word	0x400204a0
 8007198:	400204b8 	.word	0x400204b8
 800719c:	58025408 	.word	0x58025408
 80071a0:	5802541c 	.word	0x5802541c
 80071a4:	58025430 	.word	0x58025430
 80071a8:	58025444 	.word	0x58025444
 80071ac:	58025458 	.word	0x58025458
 80071b0:	5802546c 	.word	0x5802546c
 80071b4:	58025480 	.word	0x58025480
 80071b8:	58025494 	.word	0x58025494

080071bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e237      	b.n	800763e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d004      	beq.n	80071e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2280      	movs	r2, #128	; 0x80
 80071de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e22c      	b.n	800763e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a5c      	ldr	r2, [pc, #368]	; (800735c <HAL_DMA_Abort_IT+0x1a0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d04a      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a5b      	ldr	r2, [pc, #364]	; (8007360 <HAL_DMA_Abort_IT+0x1a4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d045      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a59      	ldr	r2, [pc, #356]	; (8007364 <HAL_DMA_Abort_IT+0x1a8>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d040      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a58      	ldr	r2, [pc, #352]	; (8007368 <HAL_DMA_Abort_IT+0x1ac>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d03b      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a56      	ldr	r2, [pc, #344]	; (800736c <HAL_DMA_Abort_IT+0x1b0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d036      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a55      	ldr	r2, [pc, #340]	; (8007370 <HAL_DMA_Abort_IT+0x1b4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d031      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a53      	ldr	r2, [pc, #332]	; (8007374 <HAL_DMA_Abort_IT+0x1b8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d02c      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a52      	ldr	r2, [pc, #328]	; (8007378 <HAL_DMA_Abort_IT+0x1bc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d027      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a50      	ldr	r2, [pc, #320]	; (800737c <HAL_DMA_Abort_IT+0x1c0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d022      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a4f      	ldr	r2, [pc, #316]	; (8007380 <HAL_DMA_Abort_IT+0x1c4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d01d      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a4d      	ldr	r2, [pc, #308]	; (8007384 <HAL_DMA_Abort_IT+0x1c8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d018      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a4c      	ldr	r2, [pc, #304]	; (8007388 <HAL_DMA_Abort_IT+0x1cc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d013      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a4a      	ldr	r2, [pc, #296]	; (800738c <HAL_DMA_Abort_IT+0x1d0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00e      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a49      	ldr	r2, [pc, #292]	; (8007390 <HAL_DMA_Abort_IT+0x1d4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d009      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a47      	ldr	r2, [pc, #284]	; (8007394 <HAL_DMA_Abort_IT+0x1d8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a46      	ldr	r2, [pc, #280]	; (8007398 <HAL_DMA_Abort_IT+0x1dc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d101      	bne.n	8007288 <HAL_DMA_Abort_IT+0xcc>
 8007284:	2301      	movs	r3, #1
 8007286:	e000      	b.n	800728a <HAL_DMA_Abort_IT+0xce>
 8007288:	2300      	movs	r3, #0
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 8086 	beq.w	800739c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2204      	movs	r2, #4
 8007294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a2f      	ldr	r2, [pc, #188]	; (800735c <HAL_DMA_Abort_IT+0x1a0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d04a      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a2e      	ldr	r2, [pc, #184]	; (8007360 <HAL_DMA_Abort_IT+0x1a4>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d045      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a2c      	ldr	r2, [pc, #176]	; (8007364 <HAL_DMA_Abort_IT+0x1a8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d040      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a2b      	ldr	r2, [pc, #172]	; (8007368 <HAL_DMA_Abort_IT+0x1ac>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d03b      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a29      	ldr	r2, [pc, #164]	; (800736c <HAL_DMA_Abort_IT+0x1b0>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d036      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a28      	ldr	r2, [pc, #160]	; (8007370 <HAL_DMA_Abort_IT+0x1b4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d031      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a26      	ldr	r2, [pc, #152]	; (8007374 <HAL_DMA_Abort_IT+0x1b8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d02c      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a25      	ldr	r2, [pc, #148]	; (8007378 <HAL_DMA_Abort_IT+0x1bc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d027      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a23      	ldr	r2, [pc, #140]	; (800737c <HAL_DMA_Abort_IT+0x1c0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d022      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a22      	ldr	r2, [pc, #136]	; (8007380 <HAL_DMA_Abort_IT+0x1c4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d01d      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a20      	ldr	r2, [pc, #128]	; (8007384 <HAL_DMA_Abort_IT+0x1c8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d018      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1f      	ldr	r2, [pc, #124]	; (8007388 <HAL_DMA_Abort_IT+0x1cc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d013      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1d      	ldr	r2, [pc, #116]	; (800738c <HAL_DMA_Abort_IT+0x1d0>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00e      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a1c      	ldr	r2, [pc, #112]	; (8007390 <HAL_DMA_Abort_IT+0x1d4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d009      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a1a      	ldr	r2, [pc, #104]	; (8007394 <HAL_DMA_Abort_IT+0x1d8>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d004      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a19      	ldr	r2, [pc, #100]	; (8007398 <HAL_DMA_Abort_IT+0x1dc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d108      	bne.n	800734a <HAL_DMA_Abort_IT+0x18e>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0201 	bic.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	e178      	b.n	800763c <HAL_DMA_Abort_IT+0x480>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0201 	bic.w	r2, r2, #1
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	e16f      	b.n	800763c <HAL_DMA_Abort_IT+0x480>
 800735c:	40020010 	.word	0x40020010
 8007360:	40020028 	.word	0x40020028
 8007364:	40020040 	.word	0x40020040
 8007368:	40020058 	.word	0x40020058
 800736c:	40020070 	.word	0x40020070
 8007370:	40020088 	.word	0x40020088
 8007374:	400200a0 	.word	0x400200a0
 8007378:	400200b8 	.word	0x400200b8
 800737c:	40020410 	.word	0x40020410
 8007380:	40020428 	.word	0x40020428
 8007384:	40020440 	.word	0x40020440
 8007388:	40020458 	.word	0x40020458
 800738c:	40020470 	.word	0x40020470
 8007390:	40020488 	.word	0x40020488
 8007394:	400204a0 	.word	0x400204a0
 8007398:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 020e 	bic.w	r2, r2, #14
 80073aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a6c      	ldr	r2, [pc, #432]	; (8007564 <HAL_DMA_Abort_IT+0x3a8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d04a      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a6b      	ldr	r2, [pc, #428]	; (8007568 <HAL_DMA_Abort_IT+0x3ac>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d045      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a69      	ldr	r2, [pc, #420]	; (800756c <HAL_DMA_Abort_IT+0x3b0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d040      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a68      	ldr	r2, [pc, #416]	; (8007570 <HAL_DMA_Abort_IT+0x3b4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d03b      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a66      	ldr	r2, [pc, #408]	; (8007574 <HAL_DMA_Abort_IT+0x3b8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d036      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a65      	ldr	r2, [pc, #404]	; (8007578 <HAL_DMA_Abort_IT+0x3bc>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d031      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a63      	ldr	r2, [pc, #396]	; (800757c <HAL_DMA_Abort_IT+0x3c0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d02c      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a62      	ldr	r2, [pc, #392]	; (8007580 <HAL_DMA_Abort_IT+0x3c4>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d027      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a60      	ldr	r2, [pc, #384]	; (8007584 <HAL_DMA_Abort_IT+0x3c8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d022      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a5f      	ldr	r2, [pc, #380]	; (8007588 <HAL_DMA_Abort_IT+0x3cc>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d01d      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a5d      	ldr	r2, [pc, #372]	; (800758c <HAL_DMA_Abort_IT+0x3d0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d018      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a5c      	ldr	r2, [pc, #368]	; (8007590 <HAL_DMA_Abort_IT+0x3d4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d013      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a5a      	ldr	r2, [pc, #360]	; (8007594 <HAL_DMA_Abort_IT+0x3d8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00e      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a59      	ldr	r2, [pc, #356]	; (8007598 <HAL_DMA_Abort_IT+0x3dc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d009      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a57      	ldr	r2, [pc, #348]	; (800759c <HAL_DMA_Abort_IT+0x3e0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d004      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a56      	ldr	r2, [pc, #344]	; (80075a0 <HAL_DMA_Abort_IT+0x3e4>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d108      	bne.n	800745e <HAL_DMA_Abort_IT+0x2a2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0201 	bic.w	r2, r2, #1
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	e007      	b.n	800746e <HAL_DMA_Abort_IT+0x2b2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0201 	bic.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a3c      	ldr	r2, [pc, #240]	; (8007564 <HAL_DMA_Abort_IT+0x3a8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d072      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a3a      	ldr	r2, [pc, #232]	; (8007568 <HAL_DMA_Abort_IT+0x3ac>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d06d      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a39      	ldr	r2, [pc, #228]	; (800756c <HAL_DMA_Abort_IT+0x3b0>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d068      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a37      	ldr	r2, [pc, #220]	; (8007570 <HAL_DMA_Abort_IT+0x3b4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d063      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a36      	ldr	r2, [pc, #216]	; (8007574 <HAL_DMA_Abort_IT+0x3b8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d05e      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a34      	ldr	r2, [pc, #208]	; (8007578 <HAL_DMA_Abort_IT+0x3bc>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d059      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a33      	ldr	r2, [pc, #204]	; (800757c <HAL_DMA_Abort_IT+0x3c0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d054      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a31      	ldr	r2, [pc, #196]	; (8007580 <HAL_DMA_Abort_IT+0x3c4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d04f      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a30      	ldr	r2, [pc, #192]	; (8007584 <HAL_DMA_Abort_IT+0x3c8>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d04a      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a2e      	ldr	r2, [pc, #184]	; (8007588 <HAL_DMA_Abort_IT+0x3cc>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d045      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a2d      	ldr	r2, [pc, #180]	; (800758c <HAL_DMA_Abort_IT+0x3d0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d040      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a2b      	ldr	r2, [pc, #172]	; (8007590 <HAL_DMA_Abort_IT+0x3d4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d03b      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a2a      	ldr	r2, [pc, #168]	; (8007594 <HAL_DMA_Abort_IT+0x3d8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d036      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a28      	ldr	r2, [pc, #160]	; (8007598 <HAL_DMA_Abort_IT+0x3dc>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d031      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a27      	ldr	r2, [pc, #156]	; (800759c <HAL_DMA_Abort_IT+0x3e0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d02c      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a25      	ldr	r2, [pc, #148]	; (80075a0 <HAL_DMA_Abort_IT+0x3e4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d027      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a24      	ldr	r2, [pc, #144]	; (80075a4 <HAL_DMA_Abort_IT+0x3e8>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d022      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a22      	ldr	r2, [pc, #136]	; (80075a8 <HAL_DMA_Abort_IT+0x3ec>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d01d      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a21      	ldr	r2, [pc, #132]	; (80075ac <HAL_DMA_Abort_IT+0x3f0>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d018      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a1f      	ldr	r2, [pc, #124]	; (80075b0 <HAL_DMA_Abort_IT+0x3f4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d013      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <HAL_DMA_Abort_IT+0x3f8>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00e      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a1c      	ldr	r2, [pc, #112]	; (80075b8 <HAL_DMA_Abort_IT+0x3fc>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d009      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1b      	ldr	r2, [pc, #108]	; (80075bc <HAL_DMA_Abort_IT+0x400>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d004      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a19      	ldr	r2, [pc, #100]	; (80075c0 <HAL_DMA_Abort_IT+0x404>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d132      	bne.n	80075c4 <HAL_DMA_Abort_IT+0x408>
 800755e:	2301      	movs	r3, #1
 8007560:	e031      	b.n	80075c6 <HAL_DMA_Abort_IT+0x40a>
 8007562:	bf00      	nop
 8007564:	40020010 	.word	0x40020010
 8007568:	40020028 	.word	0x40020028
 800756c:	40020040 	.word	0x40020040
 8007570:	40020058 	.word	0x40020058
 8007574:	40020070 	.word	0x40020070
 8007578:	40020088 	.word	0x40020088
 800757c:	400200a0 	.word	0x400200a0
 8007580:	400200b8 	.word	0x400200b8
 8007584:	40020410 	.word	0x40020410
 8007588:	40020428 	.word	0x40020428
 800758c:	40020440 	.word	0x40020440
 8007590:	40020458 	.word	0x40020458
 8007594:	40020470 	.word	0x40020470
 8007598:	40020488 	.word	0x40020488
 800759c:	400204a0 	.word	0x400204a0
 80075a0:	400204b8 	.word	0x400204b8
 80075a4:	58025408 	.word	0x58025408
 80075a8:	5802541c 	.word	0x5802541c
 80075ac:	58025430 	.word	0x58025430
 80075b0:	58025444 	.word	0x58025444
 80075b4:	58025458 	.word	0x58025458
 80075b8:	5802546c 	.word	0x5802546c
 80075bc:	58025480 	.word	0x58025480
 80075c0:	58025494 	.word	0x58025494
 80075c4:	2300      	movs	r3, #0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d028      	beq.n	800761c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e4:	f003 031f 	and.w	r3, r3, #31
 80075e8:	2201      	movs	r2, #1
 80075ea:	409a      	lsls	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80075f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00c      	beq.n	800761c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800760c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007610:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800761a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop

08007648 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08a      	sub	sp, #40	; 0x28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007654:	4b67      	ldr	r3, [pc, #412]	; (80077f4 <HAL_DMA_IRQHandler+0x1ac>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a67      	ldr	r2, [pc, #412]	; (80077f8 <HAL_DMA_IRQHandler+0x1b0>)
 800765a:	fba2 2303 	umull	r2, r3, r2, r3
 800765e:	0a9b      	lsrs	r3, r3, #10
 8007660:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007666:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a5f      	ldr	r2, [pc, #380]	; (80077fc <HAL_DMA_IRQHandler+0x1b4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d04a      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a5d      	ldr	r2, [pc, #372]	; (8007800 <HAL_DMA_IRQHandler+0x1b8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d045      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a5c      	ldr	r2, [pc, #368]	; (8007804 <HAL_DMA_IRQHandler+0x1bc>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d040      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a5a      	ldr	r2, [pc, #360]	; (8007808 <HAL_DMA_IRQHandler+0x1c0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d03b      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a59      	ldr	r2, [pc, #356]	; (800780c <HAL_DMA_IRQHandler+0x1c4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d036      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a57      	ldr	r2, [pc, #348]	; (8007810 <HAL_DMA_IRQHandler+0x1c8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d031      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a56      	ldr	r2, [pc, #344]	; (8007814 <HAL_DMA_IRQHandler+0x1cc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d02c      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a54      	ldr	r2, [pc, #336]	; (8007818 <HAL_DMA_IRQHandler+0x1d0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d027      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a53      	ldr	r2, [pc, #332]	; (800781c <HAL_DMA_IRQHandler+0x1d4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d022      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a51      	ldr	r2, [pc, #324]	; (8007820 <HAL_DMA_IRQHandler+0x1d8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d01d      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a50      	ldr	r2, [pc, #320]	; (8007824 <HAL_DMA_IRQHandler+0x1dc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d018      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a4e      	ldr	r2, [pc, #312]	; (8007828 <HAL_DMA_IRQHandler+0x1e0>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d013      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a4d      	ldr	r2, [pc, #308]	; (800782c <HAL_DMA_IRQHandler+0x1e4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d00e      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a4b      	ldr	r2, [pc, #300]	; (8007830 <HAL_DMA_IRQHandler+0x1e8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d009      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a4a      	ldr	r2, [pc, #296]	; (8007834 <HAL_DMA_IRQHandler+0x1ec>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d004      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a48      	ldr	r2, [pc, #288]	; (8007838 <HAL_DMA_IRQHandler+0x1f0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d101      	bne.n	800771e <HAL_DMA_IRQHandler+0xd6>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <HAL_DMA_IRQHandler+0xd8>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 842b 	beq.w	8007f7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	2208      	movs	r2, #8
 8007730:	409a      	lsls	r2, r3
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	4013      	ands	r3, r2
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 80a2 	beq.w	8007880 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a2e      	ldr	r2, [pc, #184]	; (80077fc <HAL_DMA_IRQHandler+0x1b4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d04a      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a2d      	ldr	r2, [pc, #180]	; (8007800 <HAL_DMA_IRQHandler+0x1b8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d045      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a2b      	ldr	r2, [pc, #172]	; (8007804 <HAL_DMA_IRQHandler+0x1bc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d040      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a2a      	ldr	r2, [pc, #168]	; (8007808 <HAL_DMA_IRQHandler+0x1c0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d03b      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a28      	ldr	r2, [pc, #160]	; (800780c <HAL_DMA_IRQHandler+0x1c4>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d036      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a27      	ldr	r2, [pc, #156]	; (8007810 <HAL_DMA_IRQHandler+0x1c8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d031      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a25      	ldr	r2, [pc, #148]	; (8007814 <HAL_DMA_IRQHandler+0x1cc>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d02c      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a24      	ldr	r2, [pc, #144]	; (8007818 <HAL_DMA_IRQHandler+0x1d0>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d027      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a22      	ldr	r2, [pc, #136]	; (800781c <HAL_DMA_IRQHandler+0x1d4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d022      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a21      	ldr	r2, [pc, #132]	; (8007820 <HAL_DMA_IRQHandler+0x1d8>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d01d      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a1f      	ldr	r2, [pc, #124]	; (8007824 <HAL_DMA_IRQHandler+0x1dc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d018      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <HAL_DMA_IRQHandler+0x1e0>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d013      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a1c      	ldr	r2, [pc, #112]	; (800782c <HAL_DMA_IRQHandler+0x1e4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00e      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a1b      	ldr	r2, [pc, #108]	; (8007830 <HAL_DMA_IRQHandler+0x1e8>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d009      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a19      	ldr	r2, [pc, #100]	; (8007834 <HAL_DMA_IRQHandler+0x1ec>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a18      	ldr	r2, [pc, #96]	; (8007838 <HAL_DMA_IRQHandler+0x1f0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d12f      	bne.n	800783c <HAL_DMA_IRQHandler+0x1f4>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0304 	and.w	r3, r3, #4
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bf14      	ite	ne
 80077ea:	2301      	movne	r3, #1
 80077ec:	2300      	moveq	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	e02e      	b.n	8007850 <HAL_DMA_IRQHandler+0x208>
 80077f2:	bf00      	nop
 80077f4:	24000090 	.word	0x24000090
 80077f8:	1b4e81b5 	.word	0x1b4e81b5
 80077fc:	40020010 	.word	0x40020010
 8007800:	40020028 	.word	0x40020028
 8007804:	40020040 	.word	0x40020040
 8007808:	40020058 	.word	0x40020058
 800780c:	40020070 	.word	0x40020070
 8007810:	40020088 	.word	0x40020088
 8007814:	400200a0 	.word	0x400200a0
 8007818:	400200b8 	.word	0x400200b8
 800781c:	40020410 	.word	0x40020410
 8007820:	40020428 	.word	0x40020428
 8007824:	40020440 	.word	0x40020440
 8007828:	40020458 	.word	0x40020458
 800782c:	40020470 	.word	0x40020470
 8007830:	40020488 	.word	0x40020488
 8007834:	400204a0 	.word	0x400204a0
 8007838:	400204b8 	.word	0x400204b8
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	2b00      	cmp	r3, #0
 8007848:	bf14      	ite	ne
 800784a:	2301      	movne	r3, #1
 800784c:	2300      	moveq	r3, #0
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d015      	beq.n	8007880 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0204 	bic.w	r2, r2, #4
 8007862:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007868:	f003 031f 	and.w	r3, r3, #31
 800786c:	2208      	movs	r2, #8
 800786e:	409a      	lsls	r2, r3
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007878:	f043 0201 	orr.w	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007884:	f003 031f 	and.w	r3, r3, #31
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	fa22 f303 	lsr.w	r3, r2, r3
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d06e      	beq.n	8007974 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a69      	ldr	r2, [pc, #420]	; (8007a40 <HAL_DMA_IRQHandler+0x3f8>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d04a      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a67      	ldr	r2, [pc, #412]	; (8007a44 <HAL_DMA_IRQHandler+0x3fc>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d045      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a66      	ldr	r2, [pc, #408]	; (8007a48 <HAL_DMA_IRQHandler+0x400>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d040      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a64      	ldr	r2, [pc, #400]	; (8007a4c <HAL_DMA_IRQHandler+0x404>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d03b      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a63      	ldr	r2, [pc, #396]	; (8007a50 <HAL_DMA_IRQHandler+0x408>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d036      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a61      	ldr	r2, [pc, #388]	; (8007a54 <HAL_DMA_IRQHandler+0x40c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d031      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a60      	ldr	r2, [pc, #384]	; (8007a58 <HAL_DMA_IRQHandler+0x410>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d02c      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a5e      	ldr	r2, [pc, #376]	; (8007a5c <HAL_DMA_IRQHandler+0x414>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d027      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a5d      	ldr	r2, [pc, #372]	; (8007a60 <HAL_DMA_IRQHandler+0x418>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d022      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a5b      	ldr	r2, [pc, #364]	; (8007a64 <HAL_DMA_IRQHandler+0x41c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d01d      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a5a      	ldr	r2, [pc, #360]	; (8007a68 <HAL_DMA_IRQHandler+0x420>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d018      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a58      	ldr	r2, [pc, #352]	; (8007a6c <HAL_DMA_IRQHandler+0x424>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d013      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a57      	ldr	r2, [pc, #348]	; (8007a70 <HAL_DMA_IRQHandler+0x428>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00e      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a55      	ldr	r2, [pc, #340]	; (8007a74 <HAL_DMA_IRQHandler+0x42c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d009      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a54      	ldr	r2, [pc, #336]	; (8007a78 <HAL_DMA_IRQHandler+0x430>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d004      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a52      	ldr	r2, [pc, #328]	; (8007a7c <HAL_DMA_IRQHandler+0x434>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d10a      	bne.n	800794c <HAL_DMA_IRQHandler+0x304>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007940:	2b00      	cmp	r3, #0
 8007942:	bf14      	ite	ne
 8007944:	2301      	movne	r3, #1
 8007946:	2300      	moveq	r3, #0
 8007948:	b2db      	uxtb	r3, r3
 800794a:	e003      	b.n	8007954 <HAL_DMA_IRQHandler+0x30c>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2300      	movs	r3, #0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00d      	beq.n	8007974 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795c:	f003 031f 	and.w	r3, r3, #31
 8007960:	2201      	movs	r2, #1
 8007962:	409a      	lsls	r2, r3
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796c:	f043 0202 	orr.w	r2, r3, #2
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007978:	f003 031f 	and.w	r3, r3, #31
 800797c:	2204      	movs	r2, #4
 800797e:	409a      	lsls	r2, r3
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	4013      	ands	r3, r2
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 808f 	beq.w	8007aa8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a2c      	ldr	r2, [pc, #176]	; (8007a40 <HAL_DMA_IRQHandler+0x3f8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d04a      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a2a      	ldr	r2, [pc, #168]	; (8007a44 <HAL_DMA_IRQHandler+0x3fc>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d045      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a29      	ldr	r2, [pc, #164]	; (8007a48 <HAL_DMA_IRQHandler+0x400>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d040      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a27      	ldr	r2, [pc, #156]	; (8007a4c <HAL_DMA_IRQHandler+0x404>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d03b      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a26      	ldr	r2, [pc, #152]	; (8007a50 <HAL_DMA_IRQHandler+0x408>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d036      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a24      	ldr	r2, [pc, #144]	; (8007a54 <HAL_DMA_IRQHandler+0x40c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d031      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a23      	ldr	r2, [pc, #140]	; (8007a58 <HAL_DMA_IRQHandler+0x410>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d02c      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a21      	ldr	r2, [pc, #132]	; (8007a5c <HAL_DMA_IRQHandler+0x414>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d027      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a20      	ldr	r2, [pc, #128]	; (8007a60 <HAL_DMA_IRQHandler+0x418>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d022      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a1e      	ldr	r2, [pc, #120]	; (8007a64 <HAL_DMA_IRQHandler+0x41c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d01d      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a1d      	ldr	r2, [pc, #116]	; (8007a68 <HAL_DMA_IRQHandler+0x420>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d018      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a1b      	ldr	r2, [pc, #108]	; (8007a6c <HAL_DMA_IRQHandler+0x424>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d013      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a1a      	ldr	r2, [pc, #104]	; (8007a70 <HAL_DMA_IRQHandler+0x428>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d00e      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a18      	ldr	r2, [pc, #96]	; (8007a74 <HAL_DMA_IRQHandler+0x42c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d009      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <HAL_DMA_IRQHandler+0x430>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d004      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a15      	ldr	r2, [pc, #84]	; (8007a7c <HAL_DMA_IRQHandler+0x434>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d12a      	bne.n	8007a80 <HAL_DMA_IRQHandler+0x438>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	bf14      	ite	ne
 8007a38:	2301      	movne	r3, #1
 8007a3a:	2300      	moveq	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	e023      	b.n	8007a88 <HAL_DMA_IRQHandler+0x440>
 8007a40:	40020010 	.word	0x40020010
 8007a44:	40020028 	.word	0x40020028
 8007a48:	40020040 	.word	0x40020040
 8007a4c:	40020058 	.word	0x40020058
 8007a50:	40020070 	.word	0x40020070
 8007a54:	40020088 	.word	0x40020088
 8007a58:	400200a0 	.word	0x400200a0
 8007a5c:	400200b8 	.word	0x400200b8
 8007a60:	40020410 	.word	0x40020410
 8007a64:	40020428 	.word	0x40020428
 8007a68:	40020440 	.word	0x40020440
 8007a6c:	40020458 	.word	0x40020458
 8007a70:	40020470 	.word	0x40020470
 8007a74:	40020488 	.word	0x40020488
 8007a78:	400204a0 	.word	0x400204a0
 8007a7c:	400204b8 	.word	0x400204b8
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2300      	movs	r3, #0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00d      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a90:	f003 031f 	and.w	r3, r3, #31
 8007a94:	2204      	movs	r2, #4
 8007a96:	409a      	lsls	r2, r3
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa0:	f043 0204 	orr.w	r2, r3, #4
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aac:	f003 031f 	and.w	r3, r3, #31
 8007ab0:	2210      	movs	r2, #16
 8007ab2:	409a      	lsls	r2, r3
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80a6 	beq.w	8007c0a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a85      	ldr	r2, [pc, #532]	; (8007cd8 <HAL_DMA_IRQHandler+0x690>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d04a      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a83      	ldr	r2, [pc, #524]	; (8007cdc <HAL_DMA_IRQHandler+0x694>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d045      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a82      	ldr	r2, [pc, #520]	; (8007ce0 <HAL_DMA_IRQHandler+0x698>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d040      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a80      	ldr	r2, [pc, #512]	; (8007ce4 <HAL_DMA_IRQHandler+0x69c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d03b      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a7f      	ldr	r2, [pc, #508]	; (8007ce8 <HAL_DMA_IRQHandler+0x6a0>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d036      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a7d      	ldr	r2, [pc, #500]	; (8007cec <HAL_DMA_IRQHandler+0x6a4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d031      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a7c      	ldr	r2, [pc, #496]	; (8007cf0 <HAL_DMA_IRQHandler+0x6a8>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d02c      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a7a      	ldr	r2, [pc, #488]	; (8007cf4 <HAL_DMA_IRQHandler+0x6ac>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d027      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a79      	ldr	r2, [pc, #484]	; (8007cf8 <HAL_DMA_IRQHandler+0x6b0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d022      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a77      	ldr	r2, [pc, #476]	; (8007cfc <HAL_DMA_IRQHandler+0x6b4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d01d      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a76      	ldr	r2, [pc, #472]	; (8007d00 <HAL_DMA_IRQHandler+0x6b8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d018      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a74      	ldr	r2, [pc, #464]	; (8007d04 <HAL_DMA_IRQHandler+0x6bc>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a73      	ldr	r2, [pc, #460]	; (8007d08 <HAL_DMA_IRQHandler+0x6c0>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00e      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a71      	ldr	r2, [pc, #452]	; (8007d0c <HAL_DMA_IRQHandler+0x6c4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d009      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a70      	ldr	r2, [pc, #448]	; (8007d10 <HAL_DMA_IRQHandler+0x6c8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d004      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a6e      	ldr	r2, [pc, #440]	; (8007d14 <HAL_DMA_IRQHandler+0x6cc>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d10a      	bne.n	8007b74 <HAL_DMA_IRQHandler+0x52c>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bf14      	ite	ne
 8007b6c:	2301      	movne	r3, #1
 8007b6e:	2300      	moveq	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	e009      	b.n	8007b88 <HAL_DMA_IRQHandler+0x540>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bf14      	ite	ne
 8007b82:	2301      	movne	r3, #1
 8007b84:	2300      	moveq	r3, #0
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d03e      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b90:	f003 031f 	and.w	r3, r3, #31
 8007b94:	2210      	movs	r2, #16
 8007b96:	409a      	lsls	r2, r3
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d018      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d108      	bne.n	8007bca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d024      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
 8007bc8:	e01f      	b.n	8007c0a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01b      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
 8007bda:	e016      	b.n	8007c0a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d107      	bne.n	8007bfa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0208 	bic.w	r2, r2, #8
 8007bf8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	2220      	movs	r2, #32
 8007c14:	409a      	lsls	r2, r3
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 8110 	beq.w	8007e40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a2c      	ldr	r2, [pc, #176]	; (8007cd8 <HAL_DMA_IRQHandler+0x690>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d04a      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a2b      	ldr	r2, [pc, #172]	; (8007cdc <HAL_DMA_IRQHandler+0x694>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d045      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a29      	ldr	r2, [pc, #164]	; (8007ce0 <HAL_DMA_IRQHandler+0x698>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d040      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a28      	ldr	r2, [pc, #160]	; (8007ce4 <HAL_DMA_IRQHandler+0x69c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d03b      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a26      	ldr	r2, [pc, #152]	; (8007ce8 <HAL_DMA_IRQHandler+0x6a0>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d036      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a25      	ldr	r2, [pc, #148]	; (8007cec <HAL_DMA_IRQHandler+0x6a4>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d031      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a23      	ldr	r2, [pc, #140]	; (8007cf0 <HAL_DMA_IRQHandler+0x6a8>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d02c      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a22      	ldr	r2, [pc, #136]	; (8007cf4 <HAL_DMA_IRQHandler+0x6ac>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d027      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a20      	ldr	r2, [pc, #128]	; (8007cf8 <HAL_DMA_IRQHandler+0x6b0>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d022      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1f      	ldr	r2, [pc, #124]	; (8007cfc <HAL_DMA_IRQHandler+0x6b4>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d01d      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1d      	ldr	r2, [pc, #116]	; (8007d00 <HAL_DMA_IRQHandler+0x6b8>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d018      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1c      	ldr	r2, [pc, #112]	; (8007d04 <HAL_DMA_IRQHandler+0x6bc>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d013      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a1a      	ldr	r2, [pc, #104]	; (8007d08 <HAL_DMA_IRQHandler+0x6c0>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d00e      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a19      	ldr	r2, [pc, #100]	; (8007d0c <HAL_DMA_IRQHandler+0x6c4>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d009      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a17      	ldr	r2, [pc, #92]	; (8007d10 <HAL_DMA_IRQHandler+0x6c8>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d004      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a16      	ldr	r2, [pc, #88]	; (8007d14 <HAL_DMA_IRQHandler+0x6cc>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d12b      	bne.n	8007d18 <HAL_DMA_IRQHandler+0x6d0>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0310 	and.w	r3, r3, #16
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf14      	ite	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	2300      	moveq	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	e02a      	b.n	8007d2c <HAL_DMA_IRQHandler+0x6e4>
 8007cd6:	bf00      	nop
 8007cd8:	40020010 	.word	0x40020010
 8007cdc:	40020028 	.word	0x40020028
 8007ce0:	40020040 	.word	0x40020040
 8007ce4:	40020058 	.word	0x40020058
 8007ce8:	40020070 	.word	0x40020070
 8007cec:	40020088 	.word	0x40020088
 8007cf0:	400200a0 	.word	0x400200a0
 8007cf4:	400200b8 	.word	0x400200b8
 8007cf8:	40020410 	.word	0x40020410
 8007cfc:	40020428 	.word	0x40020428
 8007d00:	40020440 	.word	0x40020440
 8007d04:	40020458 	.word	0x40020458
 8007d08:	40020470 	.word	0x40020470
 8007d0c:	40020488 	.word	0x40020488
 8007d10:	400204a0 	.word	0x400204a0
 8007d14:	400204b8 	.word	0x400204b8
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	bf14      	ite	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	2300      	moveq	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 8087 	beq.w	8007e40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d36:	f003 031f 	and.w	r3, r3, #31
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	409a      	lsls	r2, r3
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d139      	bne.n	8007dc2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0216 	bic.w	r2, r2, #22
 8007d5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	695a      	ldr	r2, [r3, #20]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d103      	bne.n	8007d7e <HAL_DMA_IRQHandler+0x736>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0208 	bic.w	r2, r2, #8
 8007d8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d92:	f003 031f 	and.w	r3, r3, #31
 8007d96:	223f      	movs	r2, #63	; 0x3f
 8007d98:	409a      	lsls	r2, r3
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 834a 	beq.w	800844c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	4798      	blx	r3
          }
          return;
 8007dc0:	e344      	b.n	800844c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d018      	beq.n	8007e02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d108      	bne.n	8007df0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d02c      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	4798      	blx	r3
 8007dee:	e027      	b.n	8007e40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d023      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	4798      	blx	r3
 8007e00:	e01e      	b.n	8007e40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10f      	bne.n	8007e30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0210 	bic.w	r2, r2, #16
 8007e1e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 8306 	beq.w	8008456 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 8088 	beq.w	8007f68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a7a      	ldr	r2, [pc, #488]	; (8008050 <HAL_DMA_IRQHandler+0xa08>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d04a      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a79      	ldr	r2, [pc, #484]	; (8008054 <HAL_DMA_IRQHandler+0xa0c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d045      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a77      	ldr	r2, [pc, #476]	; (8008058 <HAL_DMA_IRQHandler+0xa10>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d040      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a76      	ldr	r2, [pc, #472]	; (800805c <HAL_DMA_IRQHandler+0xa14>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d03b      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a74      	ldr	r2, [pc, #464]	; (8008060 <HAL_DMA_IRQHandler+0xa18>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d036      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a73      	ldr	r2, [pc, #460]	; (8008064 <HAL_DMA_IRQHandler+0xa1c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d031      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a71      	ldr	r2, [pc, #452]	; (8008068 <HAL_DMA_IRQHandler+0xa20>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d02c      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a70      	ldr	r2, [pc, #448]	; (800806c <HAL_DMA_IRQHandler+0xa24>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d027      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a6e      	ldr	r2, [pc, #440]	; (8008070 <HAL_DMA_IRQHandler+0xa28>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d022      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a6d      	ldr	r2, [pc, #436]	; (8008074 <HAL_DMA_IRQHandler+0xa2c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d01d      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a6b      	ldr	r2, [pc, #428]	; (8008078 <HAL_DMA_IRQHandler+0xa30>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d018      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a6a      	ldr	r2, [pc, #424]	; (800807c <HAL_DMA_IRQHandler+0xa34>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d013      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a68      	ldr	r2, [pc, #416]	; (8008080 <HAL_DMA_IRQHandler+0xa38>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00e      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a67      	ldr	r2, [pc, #412]	; (8008084 <HAL_DMA_IRQHandler+0xa3c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d009      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a65      	ldr	r2, [pc, #404]	; (8008088 <HAL_DMA_IRQHandler+0xa40>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d004      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a64      	ldr	r2, [pc, #400]	; (800808c <HAL_DMA_IRQHandler+0xa44>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d108      	bne.n	8007f12 <HAL_DMA_IRQHandler+0x8ca>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	e007      	b.n	8007f22 <HAL_DMA_IRQHandler+0x8da>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0201 	bic.w	r2, r2, #1
 8007f20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3301      	adds	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d307      	bcc.n	8007f3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1f2      	bne.n	8007f22 <HAL_DMA_IRQHandler+0x8da>
 8007f3c:	e000      	b.n	8007f40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007f3e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d004      	beq.n	8007f58 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2203      	movs	r2, #3
 8007f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007f56:	e003      	b.n	8007f60 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 8272 	beq.w	8008456 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
 8007f7a:	e26c      	b.n	8008456 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a43      	ldr	r2, [pc, #268]	; (8008090 <HAL_DMA_IRQHandler+0xa48>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d022      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a42      	ldr	r2, [pc, #264]	; (8008094 <HAL_DMA_IRQHandler+0xa4c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d01d      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a40      	ldr	r2, [pc, #256]	; (8008098 <HAL_DMA_IRQHandler+0xa50>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d018      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a3f      	ldr	r2, [pc, #252]	; (800809c <HAL_DMA_IRQHandler+0xa54>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d013      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a3d      	ldr	r2, [pc, #244]	; (80080a0 <HAL_DMA_IRQHandler+0xa58>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00e      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a3c      	ldr	r2, [pc, #240]	; (80080a4 <HAL_DMA_IRQHandler+0xa5c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d009      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a3a      	ldr	r2, [pc, #232]	; (80080a8 <HAL_DMA_IRQHandler+0xa60>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d004      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a39      	ldr	r2, [pc, #228]	; (80080ac <HAL_DMA_IRQHandler+0xa64>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d101      	bne.n	8007fd0 <HAL_DMA_IRQHandler+0x988>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <HAL_DMA_IRQHandler+0x98a>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 823f 	beq.w	8008456 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe4:	f003 031f 	and.w	r3, r3, #31
 8007fe8:	2204      	movs	r2, #4
 8007fea:	409a      	lsls	r2, r3
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 80cd 	beq.w	8008190 <HAL_DMA_IRQHandler+0xb48>
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 80c7 	beq.w	8008190 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008006:	f003 031f 	and.w	r3, r3, #31
 800800a:	2204      	movs	r2, #4
 800800c:	409a      	lsls	r2, r3
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d049      	beq.n	80080b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 8210 	beq.w	8008450 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008038:	e20a      	b.n	8008450 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 8206 	beq.w	8008450 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800804c:	e200      	b.n	8008450 <HAL_DMA_IRQHandler+0xe08>
 800804e:	bf00      	nop
 8008050:	40020010 	.word	0x40020010
 8008054:	40020028 	.word	0x40020028
 8008058:	40020040 	.word	0x40020040
 800805c:	40020058 	.word	0x40020058
 8008060:	40020070 	.word	0x40020070
 8008064:	40020088 	.word	0x40020088
 8008068:	400200a0 	.word	0x400200a0
 800806c:	400200b8 	.word	0x400200b8
 8008070:	40020410 	.word	0x40020410
 8008074:	40020428 	.word	0x40020428
 8008078:	40020440 	.word	0x40020440
 800807c:	40020458 	.word	0x40020458
 8008080:	40020470 	.word	0x40020470
 8008084:	40020488 	.word	0x40020488
 8008088:	400204a0 	.word	0x400204a0
 800808c:	400204b8 	.word	0x400204b8
 8008090:	58025408 	.word	0x58025408
 8008094:	5802541c 	.word	0x5802541c
 8008098:	58025430 	.word	0x58025430
 800809c:	58025444 	.word	0x58025444
 80080a0:	58025458 	.word	0x58025458
 80080a4:	5802546c 	.word	0x5802546c
 80080a8:	58025480 	.word	0x58025480
 80080ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d160      	bne.n	800817c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a7f      	ldr	r2, [pc, #508]	; (80082bc <HAL_DMA_IRQHandler+0xc74>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d04a      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a7d      	ldr	r2, [pc, #500]	; (80082c0 <HAL_DMA_IRQHandler+0xc78>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d045      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a7c      	ldr	r2, [pc, #496]	; (80082c4 <HAL_DMA_IRQHandler+0xc7c>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d040      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a7a      	ldr	r2, [pc, #488]	; (80082c8 <HAL_DMA_IRQHandler+0xc80>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d03b      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a79      	ldr	r2, [pc, #484]	; (80082cc <HAL_DMA_IRQHandler+0xc84>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d036      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a77      	ldr	r2, [pc, #476]	; (80082d0 <HAL_DMA_IRQHandler+0xc88>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d031      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a76      	ldr	r2, [pc, #472]	; (80082d4 <HAL_DMA_IRQHandler+0xc8c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d02c      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a74      	ldr	r2, [pc, #464]	; (80082d8 <HAL_DMA_IRQHandler+0xc90>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d027      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a73      	ldr	r2, [pc, #460]	; (80082dc <HAL_DMA_IRQHandler+0xc94>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d022      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a71      	ldr	r2, [pc, #452]	; (80082e0 <HAL_DMA_IRQHandler+0xc98>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d01d      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a70      	ldr	r2, [pc, #448]	; (80082e4 <HAL_DMA_IRQHandler+0xc9c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d018      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a6e      	ldr	r2, [pc, #440]	; (80082e8 <HAL_DMA_IRQHandler+0xca0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d013      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a6d      	ldr	r2, [pc, #436]	; (80082ec <HAL_DMA_IRQHandler+0xca4>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d00e      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a6b      	ldr	r2, [pc, #428]	; (80082f0 <HAL_DMA_IRQHandler+0xca8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d009      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a6a      	ldr	r2, [pc, #424]	; (80082f4 <HAL_DMA_IRQHandler+0xcac>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d004      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a68      	ldr	r2, [pc, #416]	; (80082f8 <HAL_DMA_IRQHandler+0xcb0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d108      	bne.n	800816c <HAL_DMA_IRQHandler+0xb24>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0208 	bic.w	r2, r2, #8
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	e007      	b.n	800817c <HAL_DMA_IRQHandler+0xb34>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0204 	bic.w	r2, r2, #4
 800817a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 8165 	beq.w	8008450 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800818e:	e15f      	b.n	8008450 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008194:	f003 031f 	and.w	r3, r3, #31
 8008198:	2202      	movs	r2, #2
 800819a:	409a      	lsls	r2, r3
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	4013      	ands	r3, r2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 80c5 	beq.w	8008330 <HAL_DMA_IRQHandler+0xce8>
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 80bf 	beq.w	8008330 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b6:	f003 031f 	and.w	r3, r3, #31
 80081ba:	2202      	movs	r2, #2
 80081bc:	409a      	lsls	r2, r3
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d018      	beq.n	80081fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d109      	bne.n	80081ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 813a 	beq.w	8008454 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081e8:	e134      	b.n	8008454 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 8130 	beq.w	8008454 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081fc:	e12a      	b.n	8008454 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b00      	cmp	r3, #0
 8008206:	f040 8089 	bne.w	800831c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a2b      	ldr	r2, [pc, #172]	; (80082bc <HAL_DMA_IRQHandler+0xc74>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d04a      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a29      	ldr	r2, [pc, #164]	; (80082c0 <HAL_DMA_IRQHandler+0xc78>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d045      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a28      	ldr	r2, [pc, #160]	; (80082c4 <HAL_DMA_IRQHandler+0xc7c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d040      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a26      	ldr	r2, [pc, #152]	; (80082c8 <HAL_DMA_IRQHandler+0xc80>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d03b      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a25      	ldr	r2, [pc, #148]	; (80082cc <HAL_DMA_IRQHandler+0xc84>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d036      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a23      	ldr	r2, [pc, #140]	; (80082d0 <HAL_DMA_IRQHandler+0xc88>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d031      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a22      	ldr	r2, [pc, #136]	; (80082d4 <HAL_DMA_IRQHandler+0xc8c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d02c      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a20      	ldr	r2, [pc, #128]	; (80082d8 <HAL_DMA_IRQHandler+0xc90>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d027      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a1f      	ldr	r2, [pc, #124]	; (80082dc <HAL_DMA_IRQHandler+0xc94>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d022      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a1d      	ldr	r2, [pc, #116]	; (80082e0 <HAL_DMA_IRQHandler+0xc98>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d01d      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a1c      	ldr	r2, [pc, #112]	; (80082e4 <HAL_DMA_IRQHandler+0xc9c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d018      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a1a      	ldr	r2, [pc, #104]	; (80082e8 <HAL_DMA_IRQHandler+0xca0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d013      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a19      	ldr	r2, [pc, #100]	; (80082ec <HAL_DMA_IRQHandler+0xca4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d00e      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a17      	ldr	r2, [pc, #92]	; (80082f0 <HAL_DMA_IRQHandler+0xca8>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d009      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a16      	ldr	r2, [pc, #88]	; (80082f4 <HAL_DMA_IRQHandler+0xcac>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d004      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a14      	ldr	r2, [pc, #80]	; (80082f8 <HAL_DMA_IRQHandler+0xcb0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d128      	bne.n	80082fc <HAL_DMA_IRQHandler+0xcb4>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0214 	bic.w	r2, r2, #20
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	e027      	b.n	800830c <HAL_DMA_IRQHandler+0xcc4>
 80082bc:	40020010 	.word	0x40020010
 80082c0:	40020028 	.word	0x40020028
 80082c4:	40020040 	.word	0x40020040
 80082c8:	40020058 	.word	0x40020058
 80082cc:	40020070 	.word	0x40020070
 80082d0:	40020088 	.word	0x40020088
 80082d4:	400200a0 	.word	0x400200a0
 80082d8:	400200b8 	.word	0x400200b8
 80082dc:	40020410 	.word	0x40020410
 80082e0:	40020428 	.word	0x40020428
 80082e4:	40020440 	.word	0x40020440
 80082e8:	40020458 	.word	0x40020458
 80082ec:	40020470 	.word	0x40020470
 80082f0:	40020488 	.word	0x40020488
 80082f4:	400204a0 	.word	0x400204a0
 80082f8:	400204b8 	.word	0x400204b8
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 020a 	bic.w	r2, r2, #10
 800830a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 8097 	beq.w	8008454 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800832e:	e091      	b.n	8008454 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008334:	f003 031f 	and.w	r3, r3, #31
 8008338:	2208      	movs	r2, #8
 800833a:	409a      	lsls	r2, r3
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	4013      	ands	r3, r2
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 8088 	beq.w	8008456 <HAL_DMA_IRQHandler+0xe0e>
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f003 0308 	and.w	r3, r3, #8
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8082 	beq.w	8008456 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a41      	ldr	r2, [pc, #260]	; (800845c <HAL_DMA_IRQHandler+0xe14>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d04a      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a3f      	ldr	r2, [pc, #252]	; (8008460 <HAL_DMA_IRQHandler+0xe18>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d045      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a3e      	ldr	r2, [pc, #248]	; (8008464 <HAL_DMA_IRQHandler+0xe1c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d040      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a3c      	ldr	r2, [pc, #240]	; (8008468 <HAL_DMA_IRQHandler+0xe20>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d03b      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a3b      	ldr	r2, [pc, #236]	; (800846c <HAL_DMA_IRQHandler+0xe24>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d036      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a39      	ldr	r2, [pc, #228]	; (8008470 <HAL_DMA_IRQHandler+0xe28>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d031      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a38      	ldr	r2, [pc, #224]	; (8008474 <HAL_DMA_IRQHandler+0xe2c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d02c      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a36      	ldr	r2, [pc, #216]	; (8008478 <HAL_DMA_IRQHandler+0xe30>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d027      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a35      	ldr	r2, [pc, #212]	; (800847c <HAL_DMA_IRQHandler+0xe34>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d022      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a33      	ldr	r2, [pc, #204]	; (8008480 <HAL_DMA_IRQHandler+0xe38>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d01d      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a32      	ldr	r2, [pc, #200]	; (8008484 <HAL_DMA_IRQHandler+0xe3c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d018      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a30      	ldr	r2, [pc, #192]	; (8008488 <HAL_DMA_IRQHandler+0xe40>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d013      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a2f      	ldr	r2, [pc, #188]	; (800848c <HAL_DMA_IRQHandler+0xe44>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d00e      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a2d      	ldr	r2, [pc, #180]	; (8008490 <HAL_DMA_IRQHandler+0xe48>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d009      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a2c      	ldr	r2, [pc, #176]	; (8008494 <HAL_DMA_IRQHandler+0xe4c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d004      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a2a      	ldr	r2, [pc, #168]	; (8008498 <HAL_DMA_IRQHandler+0xe50>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d108      	bne.n	8008404 <HAL_DMA_IRQHandler+0xdbc>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 021c 	bic.w	r2, r2, #28
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	e007      	b.n	8008414 <HAL_DMA_IRQHandler+0xdcc>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 020e 	bic.w	r2, r2, #14
 8008412:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008418:	f003 031f 	and.w	r3, r3, #31
 800841c:	2201      	movs	r2, #1
 800841e:	409a      	lsls	r2, r3
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d009      	beq.n	8008456 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
 800844a:	e004      	b.n	8008456 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800844c:	bf00      	nop
 800844e:	e002      	b.n	8008456 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008450:	bf00      	nop
 8008452:	e000      	b.n	8008456 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008454:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008456:	3728      	adds	r7, #40	; 0x28
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	40020010 	.word	0x40020010
 8008460:	40020028 	.word	0x40020028
 8008464:	40020040 	.word	0x40020040
 8008468:	40020058 	.word	0x40020058
 800846c:	40020070 	.word	0x40020070
 8008470:	40020088 	.word	0x40020088
 8008474:	400200a0 	.word	0x400200a0
 8008478:	400200b8 	.word	0x400200b8
 800847c:	40020410 	.word	0x40020410
 8008480:	40020428 	.word	0x40020428
 8008484:	40020440 	.word	0x40020440
 8008488:	40020458 	.word	0x40020458
 800848c:	40020470 	.word	0x40020470
 8008490:	40020488 	.word	0x40020488
 8008494:	400204a0 	.word	0x400204a0
 8008498:	400204b8 	.word	0x400204b8

0800849c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084cc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a7f      	ldr	r2, [pc, #508]	; (80086d0 <DMA_SetConfig+0x21c>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d072      	beq.n	80085be <DMA_SetConfig+0x10a>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a7d      	ldr	r2, [pc, #500]	; (80086d4 <DMA_SetConfig+0x220>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d06d      	beq.n	80085be <DMA_SetConfig+0x10a>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a7c      	ldr	r2, [pc, #496]	; (80086d8 <DMA_SetConfig+0x224>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d068      	beq.n	80085be <DMA_SetConfig+0x10a>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a7a      	ldr	r2, [pc, #488]	; (80086dc <DMA_SetConfig+0x228>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d063      	beq.n	80085be <DMA_SetConfig+0x10a>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a79      	ldr	r2, [pc, #484]	; (80086e0 <DMA_SetConfig+0x22c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d05e      	beq.n	80085be <DMA_SetConfig+0x10a>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a77      	ldr	r2, [pc, #476]	; (80086e4 <DMA_SetConfig+0x230>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d059      	beq.n	80085be <DMA_SetConfig+0x10a>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a76      	ldr	r2, [pc, #472]	; (80086e8 <DMA_SetConfig+0x234>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d054      	beq.n	80085be <DMA_SetConfig+0x10a>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a74      	ldr	r2, [pc, #464]	; (80086ec <DMA_SetConfig+0x238>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d04f      	beq.n	80085be <DMA_SetConfig+0x10a>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a73      	ldr	r2, [pc, #460]	; (80086f0 <DMA_SetConfig+0x23c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d04a      	beq.n	80085be <DMA_SetConfig+0x10a>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a71      	ldr	r2, [pc, #452]	; (80086f4 <DMA_SetConfig+0x240>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d045      	beq.n	80085be <DMA_SetConfig+0x10a>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a70      	ldr	r2, [pc, #448]	; (80086f8 <DMA_SetConfig+0x244>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d040      	beq.n	80085be <DMA_SetConfig+0x10a>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a6e      	ldr	r2, [pc, #440]	; (80086fc <DMA_SetConfig+0x248>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d03b      	beq.n	80085be <DMA_SetConfig+0x10a>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a6d      	ldr	r2, [pc, #436]	; (8008700 <DMA_SetConfig+0x24c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d036      	beq.n	80085be <DMA_SetConfig+0x10a>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a6b      	ldr	r2, [pc, #428]	; (8008704 <DMA_SetConfig+0x250>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d031      	beq.n	80085be <DMA_SetConfig+0x10a>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a6a      	ldr	r2, [pc, #424]	; (8008708 <DMA_SetConfig+0x254>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d02c      	beq.n	80085be <DMA_SetConfig+0x10a>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a68      	ldr	r2, [pc, #416]	; (800870c <DMA_SetConfig+0x258>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d027      	beq.n	80085be <DMA_SetConfig+0x10a>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a67      	ldr	r2, [pc, #412]	; (8008710 <DMA_SetConfig+0x25c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d022      	beq.n	80085be <DMA_SetConfig+0x10a>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a65      	ldr	r2, [pc, #404]	; (8008714 <DMA_SetConfig+0x260>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d01d      	beq.n	80085be <DMA_SetConfig+0x10a>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a64      	ldr	r2, [pc, #400]	; (8008718 <DMA_SetConfig+0x264>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d018      	beq.n	80085be <DMA_SetConfig+0x10a>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a62      	ldr	r2, [pc, #392]	; (800871c <DMA_SetConfig+0x268>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d013      	beq.n	80085be <DMA_SetConfig+0x10a>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a61      	ldr	r2, [pc, #388]	; (8008720 <DMA_SetConfig+0x26c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00e      	beq.n	80085be <DMA_SetConfig+0x10a>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a5f      	ldr	r2, [pc, #380]	; (8008724 <DMA_SetConfig+0x270>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d009      	beq.n	80085be <DMA_SetConfig+0x10a>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a5e      	ldr	r2, [pc, #376]	; (8008728 <DMA_SetConfig+0x274>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d004      	beq.n	80085be <DMA_SetConfig+0x10a>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a5c      	ldr	r2, [pc, #368]	; (800872c <DMA_SetConfig+0x278>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d101      	bne.n	80085c2 <DMA_SetConfig+0x10e>
 80085be:	2301      	movs	r3, #1
 80085c0:	e000      	b.n	80085c4 <DMA_SetConfig+0x110>
 80085c2:	2300      	movs	r3, #0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00d      	beq.n	80085e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80085d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d004      	beq.n	80085e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80085e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a39      	ldr	r2, [pc, #228]	; (80086d0 <DMA_SetConfig+0x21c>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d04a      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a38      	ldr	r2, [pc, #224]	; (80086d4 <DMA_SetConfig+0x220>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d045      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a36      	ldr	r2, [pc, #216]	; (80086d8 <DMA_SetConfig+0x224>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d040      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a35      	ldr	r2, [pc, #212]	; (80086dc <DMA_SetConfig+0x228>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d03b      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a33      	ldr	r2, [pc, #204]	; (80086e0 <DMA_SetConfig+0x22c>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d036      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a32      	ldr	r2, [pc, #200]	; (80086e4 <DMA_SetConfig+0x230>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d031      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a30      	ldr	r2, [pc, #192]	; (80086e8 <DMA_SetConfig+0x234>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d02c      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a2f      	ldr	r2, [pc, #188]	; (80086ec <DMA_SetConfig+0x238>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d027      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a2d      	ldr	r2, [pc, #180]	; (80086f0 <DMA_SetConfig+0x23c>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d022      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a2c      	ldr	r2, [pc, #176]	; (80086f4 <DMA_SetConfig+0x240>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d01d      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a2a      	ldr	r2, [pc, #168]	; (80086f8 <DMA_SetConfig+0x244>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d018      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a29      	ldr	r2, [pc, #164]	; (80086fc <DMA_SetConfig+0x248>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d013      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a27      	ldr	r2, [pc, #156]	; (8008700 <DMA_SetConfig+0x24c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00e      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a26      	ldr	r2, [pc, #152]	; (8008704 <DMA_SetConfig+0x250>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d009      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a24      	ldr	r2, [pc, #144]	; (8008708 <DMA_SetConfig+0x254>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d004      	beq.n	8008684 <DMA_SetConfig+0x1d0>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a23      	ldr	r2, [pc, #140]	; (800870c <DMA_SetConfig+0x258>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d101      	bne.n	8008688 <DMA_SetConfig+0x1d4>
 8008684:	2301      	movs	r3, #1
 8008686:	e000      	b.n	800868a <DMA_SetConfig+0x1d6>
 8008688:	2300      	movs	r3, #0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d059      	beq.n	8008742 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008692:	f003 031f 	and.w	r3, r3, #31
 8008696:	223f      	movs	r2, #63	; 0x3f
 8008698:	409a      	lsls	r2, r3
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80086ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	2b40      	cmp	r3, #64	; 0x40
 80086bc:	d138      	bne.n	8008730 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80086ce:	e086      	b.n	80087de <DMA_SetConfig+0x32a>
 80086d0:	40020010 	.word	0x40020010
 80086d4:	40020028 	.word	0x40020028
 80086d8:	40020040 	.word	0x40020040
 80086dc:	40020058 	.word	0x40020058
 80086e0:	40020070 	.word	0x40020070
 80086e4:	40020088 	.word	0x40020088
 80086e8:	400200a0 	.word	0x400200a0
 80086ec:	400200b8 	.word	0x400200b8
 80086f0:	40020410 	.word	0x40020410
 80086f4:	40020428 	.word	0x40020428
 80086f8:	40020440 	.word	0x40020440
 80086fc:	40020458 	.word	0x40020458
 8008700:	40020470 	.word	0x40020470
 8008704:	40020488 	.word	0x40020488
 8008708:	400204a0 	.word	0x400204a0
 800870c:	400204b8 	.word	0x400204b8
 8008710:	58025408 	.word	0x58025408
 8008714:	5802541c 	.word	0x5802541c
 8008718:	58025430 	.word	0x58025430
 800871c:	58025444 	.word	0x58025444
 8008720:	58025458 	.word	0x58025458
 8008724:	5802546c 	.word	0x5802546c
 8008728:	58025480 	.word	0x58025480
 800872c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	60da      	str	r2, [r3, #12]
}
 8008740:	e04d      	b.n	80087de <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a29      	ldr	r2, [pc, #164]	; (80087ec <DMA_SetConfig+0x338>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d022      	beq.n	8008792 <DMA_SetConfig+0x2de>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a27      	ldr	r2, [pc, #156]	; (80087f0 <DMA_SetConfig+0x33c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d01d      	beq.n	8008792 <DMA_SetConfig+0x2de>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a26      	ldr	r2, [pc, #152]	; (80087f4 <DMA_SetConfig+0x340>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d018      	beq.n	8008792 <DMA_SetConfig+0x2de>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a24      	ldr	r2, [pc, #144]	; (80087f8 <DMA_SetConfig+0x344>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d013      	beq.n	8008792 <DMA_SetConfig+0x2de>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a23      	ldr	r2, [pc, #140]	; (80087fc <DMA_SetConfig+0x348>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d00e      	beq.n	8008792 <DMA_SetConfig+0x2de>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a21      	ldr	r2, [pc, #132]	; (8008800 <DMA_SetConfig+0x34c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d009      	beq.n	8008792 <DMA_SetConfig+0x2de>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a20      	ldr	r2, [pc, #128]	; (8008804 <DMA_SetConfig+0x350>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d004      	beq.n	8008792 <DMA_SetConfig+0x2de>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1e      	ldr	r2, [pc, #120]	; (8008808 <DMA_SetConfig+0x354>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d101      	bne.n	8008796 <DMA_SetConfig+0x2e2>
 8008792:	2301      	movs	r3, #1
 8008794:	e000      	b.n	8008798 <DMA_SetConfig+0x2e4>
 8008796:	2300      	movs	r3, #0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d020      	beq.n	80087de <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a0:	f003 031f 	and.w	r3, r3, #31
 80087a4:	2201      	movs	r2, #1
 80087a6:	409a      	lsls	r2, r3
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	2b40      	cmp	r3, #64	; 0x40
 80087ba:	d108      	bne.n	80087ce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	60da      	str	r2, [r3, #12]
}
 80087cc:	e007      	b.n	80087de <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	60da      	str	r2, [r3, #12]
}
 80087de:	bf00      	nop
 80087e0:	371c      	adds	r7, #28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	58025408 	.word	0x58025408
 80087f0:	5802541c 	.word	0x5802541c
 80087f4:	58025430 	.word	0x58025430
 80087f8:	58025444 	.word	0x58025444
 80087fc:	58025458 	.word	0x58025458
 8008800:	5802546c 	.word	0x5802546c
 8008804:	58025480 	.word	0x58025480
 8008808:	58025494 	.word	0x58025494

0800880c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a42      	ldr	r2, [pc, #264]	; (8008924 <DMA_CalcBaseAndBitshift+0x118>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d04a      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a41      	ldr	r2, [pc, #260]	; (8008928 <DMA_CalcBaseAndBitshift+0x11c>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d045      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a3f      	ldr	r2, [pc, #252]	; (800892c <DMA_CalcBaseAndBitshift+0x120>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d040      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a3e      	ldr	r2, [pc, #248]	; (8008930 <DMA_CalcBaseAndBitshift+0x124>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d03b      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a3c      	ldr	r2, [pc, #240]	; (8008934 <DMA_CalcBaseAndBitshift+0x128>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d036      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a3b      	ldr	r2, [pc, #236]	; (8008938 <DMA_CalcBaseAndBitshift+0x12c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d031      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a39      	ldr	r2, [pc, #228]	; (800893c <DMA_CalcBaseAndBitshift+0x130>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d02c      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a38      	ldr	r2, [pc, #224]	; (8008940 <DMA_CalcBaseAndBitshift+0x134>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d027      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a36      	ldr	r2, [pc, #216]	; (8008944 <DMA_CalcBaseAndBitshift+0x138>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d022      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a35      	ldr	r2, [pc, #212]	; (8008948 <DMA_CalcBaseAndBitshift+0x13c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d01d      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a33      	ldr	r2, [pc, #204]	; (800894c <DMA_CalcBaseAndBitshift+0x140>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d018      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a32      	ldr	r2, [pc, #200]	; (8008950 <DMA_CalcBaseAndBitshift+0x144>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d013      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a30      	ldr	r2, [pc, #192]	; (8008954 <DMA_CalcBaseAndBitshift+0x148>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d00e      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a2f      	ldr	r2, [pc, #188]	; (8008958 <DMA_CalcBaseAndBitshift+0x14c>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d009      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a2d      	ldr	r2, [pc, #180]	; (800895c <DMA_CalcBaseAndBitshift+0x150>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d004      	beq.n	80088b4 <DMA_CalcBaseAndBitshift+0xa8>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a2c      	ldr	r2, [pc, #176]	; (8008960 <DMA_CalcBaseAndBitshift+0x154>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d101      	bne.n	80088b8 <DMA_CalcBaseAndBitshift+0xac>
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <DMA_CalcBaseAndBitshift+0xae>
 80088b8:	2300      	movs	r3, #0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d024      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	3b10      	subs	r3, #16
 80088c6:	4a27      	ldr	r2, [pc, #156]	; (8008964 <DMA_CalcBaseAndBitshift+0x158>)
 80088c8:	fba2 2303 	umull	r2, r3, r2, r3
 80088cc:	091b      	lsrs	r3, r3, #4
 80088ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f003 0307 	and.w	r3, r3, #7
 80088d6:	4a24      	ldr	r2, [pc, #144]	; (8008968 <DMA_CalcBaseAndBitshift+0x15c>)
 80088d8:	5cd3      	ldrb	r3, [r2, r3]
 80088da:	461a      	mov	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d908      	bls.n	80088f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	4b1f      	ldr	r3, [pc, #124]	; (800896c <DMA_CalcBaseAndBitshift+0x160>)
 80088ee:	4013      	ands	r3, r2
 80088f0:	1d1a      	adds	r2, r3, #4
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	659a      	str	r2, [r3, #88]	; 0x58
 80088f6:	e00d      	b.n	8008914 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	4b1b      	ldr	r3, [pc, #108]	; (800896c <DMA_CalcBaseAndBitshift+0x160>)
 8008900:	4013      	ands	r3, r2
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	6593      	str	r3, [r2, #88]	; 0x58
 8008906:	e005      	b.n	8008914 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	40020010 	.word	0x40020010
 8008928:	40020028 	.word	0x40020028
 800892c:	40020040 	.word	0x40020040
 8008930:	40020058 	.word	0x40020058
 8008934:	40020070 	.word	0x40020070
 8008938:	40020088 	.word	0x40020088
 800893c:	400200a0 	.word	0x400200a0
 8008940:	400200b8 	.word	0x400200b8
 8008944:	40020410 	.word	0x40020410
 8008948:	40020428 	.word	0x40020428
 800894c:	40020440 	.word	0x40020440
 8008950:	40020458 	.word	0x40020458
 8008954:	40020470 	.word	0x40020470
 8008958:	40020488 	.word	0x40020488
 800895c:	400204a0 	.word	0x400204a0
 8008960:	400204b8 	.word	0x400204b8
 8008964:	aaaaaaab 	.word	0xaaaaaaab
 8008968:	08017690 	.word	0x08017690
 800896c:	fffffc00 	.word	0xfffffc00

08008970 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d120      	bne.n	80089c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008988:	2b03      	cmp	r3, #3
 800898a:	d858      	bhi.n	8008a3e <DMA_CheckFifoParam+0xce>
 800898c:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <DMA_CheckFifoParam+0x24>)
 800898e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008992:	bf00      	nop
 8008994:	080089a5 	.word	0x080089a5
 8008998:	080089b7 	.word	0x080089b7
 800899c:	080089a5 	.word	0x080089a5
 80089a0:	08008a3f 	.word	0x08008a3f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d048      	beq.n	8008a42 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80089b4:	e045      	b.n	8008a42 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80089be:	d142      	bne.n	8008a46 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80089c4:	e03f      	b.n	8008a46 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089ce:	d123      	bne.n	8008a18 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d838      	bhi.n	8008a4a <DMA_CheckFifoParam+0xda>
 80089d8:	a201      	add	r2, pc, #4	; (adr r2, 80089e0 <DMA_CheckFifoParam+0x70>)
 80089da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089de:	bf00      	nop
 80089e0:	080089f1 	.word	0x080089f1
 80089e4:	080089f7 	.word	0x080089f7
 80089e8:	080089f1 	.word	0x080089f1
 80089ec:	08008a09 	.word	0x08008a09
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	73fb      	strb	r3, [r7, #15]
        break;
 80089f4:	e030      	b.n	8008a58 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d025      	beq.n	8008a4e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a06:	e022      	b.n	8008a4e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a10:	d11f      	bne.n	8008a52 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a16:	e01c      	b.n	8008a52 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d902      	bls.n	8008a26 <DMA_CheckFifoParam+0xb6>
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d003      	beq.n	8008a2c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008a24:	e018      	b.n	8008a58 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	73fb      	strb	r3, [r7, #15]
        break;
 8008a2a:	e015      	b.n	8008a58 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00e      	beq.n	8008a56 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a3c:	e00b      	b.n	8008a56 <DMA_CheckFifoParam+0xe6>
        break;
 8008a3e:	bf00      	nop
 8008a40:	e00a      	b.n	8008a58 <DMA_CheckFifoParam+0xe8>
        break;
 8008a42:	bf00      	nop
 8008a44:	e008      	b.n	8008a58 <DMA_CheckFifoParam+0xe8>
        break;
 8008a46:	bf00      	nop
 8008a48:	e006      	b.n	8008a58 <DMA_CheckFifoParam+0xe8>
        break;
 8008a4a:	bf00      	nop
 8008a4c:	e004      	b.n	8008a58 <DMA_CheckFifoParam+0xe8>
        break;
 8008a4e:	bf00      	nop
 8008a50:	e002      	b.n	8008a58 <DMA_CheckFifoParam+0xe8>
        break;
 8008a52:	bf00      	nop
 8008a54:	e000      	b.n	8008a58 <DMA_CheckFifoParam+0xe8>
    break;
 8008a56:	bf00      	nop
    }
  }

  return status;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop

08008a68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a38      	ldr	r2, [pc, #224]	; (8008b5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d022      	beq.n	8008ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a36      	ldr	r2, [pc, #216]	; (8008b60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d01d      	beq.n	8008ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a35      	ldr	r2, [pc, #212]	; (8008b64 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d018      	beq.n	8008ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a33      	ldr	r2, [pc, #204]	; (8008b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d013      	beq.n	8008ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a32      	ldr	r2, [pc, #200]	; (8008b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d00e      	beq.n	8008ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a30      	ldr	r2, [pc, #192]	; (8008b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d009      	beq.n	8008ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a2f      	ldr	r2, [pc, #188]	; (8008b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d004      	beq.n	8008ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a2d      	ldr	r2, [pc, #180]	; (8008b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d101      	bne.n	8008aca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008aca:	2300      	movs	r3, #0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d01a      	beq.n	8008b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	3b08      	subs	r3, #8
 8008ad8:	4a28      	ldr	r2, [pc, #160]	; (8008b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008ada:	fba2 2303 	umull	r2, r3, r2, r3
 8008ade:	091b      	lsrs	r3, r3, #4
 8008ae0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	4b26      	ldr	r3, [pc, #152]	; (8008b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	461a      	mov	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a24      	ldr	r2, [pc, #144]	; (8008b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008af4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f003 031f 	and.w	r3, r3, #31
 8008afc:	2201      	movs	r2, #1
 8008afe:	409a      	lsls	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008b04:	e024      	b.n	8008b50 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	3b10      	subs	r3, #16
 8008b0e:	4a1e      	ldr	r2, [pc, #120]	; (8008b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008b10:	fba2 2303 	umull	r2, r3, r2, r3
 8008b14:	091b      	lsrs	r3, r3, #4
 8008b16:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4a1c      	ldr	r2, [pc, #112]	; (8008b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d806      	bhi.n	8008b2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	4a1b      	ldr	r2, [pc, #108]	; (8008b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d902      	bls.n	8008b2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	4b18      	ldr	r3, [pc, #96]	; (8008b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008b32:	4413      	add	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	461a      	mov	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a16      	ldr	r2, [pc, #88]	; (8008b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008b40:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f003 031f 	and.w	r3, r3, #31
 8008b48:	2201      	movs	r2, #1
 8008b4a:	409a      	lsls	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008b50:	bf00      	nop
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	58025408 	.word	0x58025408
 8008b60:	5802541c 	.word	0x5802541c
 8008b64:	58025430 	.word	0x58025430
 8008b68:	58025444 	.word	0x58025444
 8008b6c:	58025458 	.word	0x58025458
 8008b70:	5802546c 	.word	0x5802546c
 8008b74:	58025480 	.word	0x58025480
 8008b78:	58025494 	.word	0x58025494
 8008b7c:	cccccccd 	.word	0xcccccccd
 8008b80:	16009600 	.word	0x16009600
 8008b84:	58025880 	.word	0x58025880
 8008b88:	aaaaaaab 	.word	0xaaaaaaab
 8008b8c:	400204b8 	.word	0x400204b8
 8008b90:	4002040f 	.word	0x4002040f
 8008b94:	10008200 	.word	0x10008200
 8008b98:	40020880 	.word	0x40020880

08008b9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d04a      	beq.n	8008c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d847      	bhi.n	8008c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a25      	ldr	r2, [pc, #148]	; (8008c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d022      	beq.n	8008c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a24      	ldr	r2, [pc, #144]	; (8008c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d01d      	beq.n	8008c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a22      	ldr	r2, [pc, #136]	; (8008c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d018      	beq.n	8008c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a21      	ldr	r2, [pc, #132]	; (8008c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d013      	beq.n	8008c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a1f      	ldr	r2, [pc, #124]	; (8008c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00e      	beq.n	8008c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a1e      	ldr	r2, [pc, #120]	; (8008c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d009      	beq.n	8008c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a1c      	ldr	r2, [pc, #112]	; (8008c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d004      	beq.n	8008c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a1b      	ldr	r2, [pc, #108]	; (8008c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d101      	bne.n	8008c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e000      	b.n	8008c0e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00a      	beq.n	8008c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	4b17      	ldr	r3, [pc, #92]	; (8008c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008c16:	4413      	add	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a15      	ldr	r2, [pc, #84]	; (8008c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008c24:	671a      	str	r2, [r3, #112]	; 0x70
 8008c26:	e009      	b.n	8008c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	4b14      	ldr	r3, [pc, #80]	; (8008c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	461a      	mov	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a11      	ldr	r2, [pc, #68]	; (8008c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008c3a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	2201      	movs	r2, #1
 8008c42:	409a      	lsls	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008c48:	bf00      	nop
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	58025408 	.word	0x58025408
 8008c58:	5802541c 	.word	0x5802541c
 8008c5c:	58025430 	.word	0x58025430
 8008c60:	58025444 	.word	0x58025444
 8008c64:	58025458 	.word	0x58025458
 8008c68:	5802546c 	.word	0x5802546c
 8008c6c:	58025480 	.word	0x58025480
 8008c70:	58025494 	.word	0x58025494
 8008c74:	1600963f 	.word	0x1600963f
 8008c78:	58025940 	.word	0x58025940
 8008c7c:	1000823f 	.word	0x1000823f
 8008c80:	40020940 	.word	0x40020940

08008c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b089      	sub	sp, #36	; 0x24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c92:	4b89      	ldr	r3, [pc, #548]	; (8008eb8 <HAL_GPIO_Init+0x234>)
 8008c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c96:	e194      	b.n	8008fc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 8186 	beq.w	8008fbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f003 0303 	and.w	r3, r3, #3
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d005      	beq.n	8008cc8 <HAL_GPIO_Init+0x44>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d130      	bne.n	8008d2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd8:	43db      	mvns	r3, r3
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cfe:	2201      	movs	r2, #1
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	43db      	mvns	r3, r3
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	091b      	lsrs	r3, r3, #4
 8008d14:	f003 0201 	and.w	r2, r3, #1
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d017      	beq.n	8008d66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	2203      	movs	r2, #3
 8008d42:	fa02 f303 	lsl.w	r3, r2, r3
 8008d46:	43db      	mvns	r3, r3
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	689a      	ldr	r2, [r3, #8]
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f003 0303 	and.w	r3, r3, #3
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d123      	bne.n	8008dba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	08da      	lsrs	r2, r3, #3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3208      	adds	r2, #8
 8008d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	220f      	movs	r2, #15
 8008d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8e:	43db      	mvns	r3, r3
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	4013      	ands	r3, r2
 8008d94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	691a      	ldr	r2, [r3, #16]
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	f003 0307 	and.w	r3, r3, #7
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	fa02 f303 	lsl.w	r3, r2, r3
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	08da      	lsrs	r2, r3, #3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3208      	adds	r2, #8
 8008db4:	69b9      	ldr	r1, [r7, #24]
 8008db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dca:	43db      	mvns	r3, r3
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f003 0203 	and.w	r2, r3, #3
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	fa02 f303 	lsl.w	r3, r2, r3
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 80e0 	beq.w	8008fbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dfc:	4b2f      	ldr	r3, [pc, #188]	; (8008ebc <HAL_GPIO_Init+0x238>)
 8008dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e02:	4a2e      	ldr	r2, [pc, #184]	; (8008ebc <HAL_GPIO_Init+0x238>)
 8008e04:	f043 0302 	orr.w	r3, r3, #2
 8008e08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008e0c:	4b2b      	ldr	r3, [pc, #172]	; (8008ebc <HAL_GPIO_Init+0x238>)
 8008e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e1a:	4a29      	ldr	r2, [pc, #164]	; (8008ec0 <HAL_GPIO_Init+0x23c>)
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	089b      	lsrs	r3, r3, #2
 8008e20:	3302      	adds	r3, #2
 8008e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	f003 0303 	and.w	r3, r3, #3
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	220f      	movs	r2, #15
 8008e32:	fa02 f303 	lsl.w	r3, r2, r3
 8008e36:	43db      	mvns	r3, r3
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a20      	ldr	r2, [pc, #128]	; (8008ec4 <HAL_GPIO_Init+0x240>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d052      	beq.n	8008eec <HAL_GPIO_Init+0x268>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a1f      	ldr	r2, [pc, #124]	; (8008ec8 <HAL_GPIO_Init+0x244>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d031      	beq.n	8008eb2 <HAL_GPIO_Init+0x22e>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a1e      	ldr	r2, [pc, #120]	; (8008ecc <HAL_GPIO_Init+0x248>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d02b      	beq.n	8008eae <HAL_GPIO_Init+0x22a>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a1d      	ldr	r2, [pc, #116]	; (8008ed0 <HAL_GPIO_Init+0x24c>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d025      	beq.n	8008eaa <HAL_GPIO_Init+0x226>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a1c      	ldr	r2, [pc, #112]	; (8008ed4 <HAL_GPIO_Init+0x250>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d01f      	beq.n	8008ea6 <HAL_GPIO_Init+0x222>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a1b      	ldr	r2, [pc, #108]	; (8008ed8 <HAL_GPIO_Init+0x254>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d019      	beq.n	8008ea2 <HAL_GPIO_Init+0x21e>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a1a      	ldr	r2, [pc, #104]	; (8008edc <HAL_GPIO_Init+0x258>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d013      	beq.n	8008e9e <HAL_GPIO_Init+0x21a>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a19      	ldr	r2, [pc, #100]	; (8008ee0 <HAL_GPIO_Init+0x25c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00d      	beq.n	8008e9a <HAL_GPIO_Init+0x216>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a18      	ldr	r2, [pc, #96]	; (8008ee4 <HAL_GPIO_Init+0x260>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d007      	beq.n	8008e96 <HAL_GPIO_Init+0x212>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a17      	ldr	r2, [pc, #92]	; (8008ee8 <HAL_GPIO_Init+0x264>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d101      	bne.n	8008e92 <HAL_GPIO_Init+0x20e>
 8008e8e:	2309      	movs	r3, #9
 8008e90:	e02d      	b.n	8008eee <HAL_GPIO_Init+0x26a>
 8008e92:	230a      	movs	r3, #10
 8008e94:	e02b      	b.n	8008eee <HAL_GPIO_Init+0x26a>
 8008e96:	2308      	movs	r3, #8
 8008e98:	e029      	b.n	8008eee <HAL_GPIO_Init+0x26a>
 8008e9a:	2307      	movs	r3, #7
 8008e9c:	e027      	b.n	8008eee <HAL_GPIO_Init+0x26a>
 8008e9e:	2306      	movs	r3, #6
 8008ea0:	e025      	b.n	8008eee <HAL_GPIO_Init+0x26a>
 8008ea2:	2305      	movs	r3, #5
 8008ea4:	e023      	b.n	8008eee <HAL_GPIO_Init+0x26a>
 8008ea6:	2304      	movs	r3, #4
 8008ea8:	e021      	b.n	8008eee <HAL_GPIO_Init+0x26a>
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e01f      	b.n	8008eee <HAL_GPIO_Init+0x26a>
 8008eae:	2302      	movs	r3, #2
 8008eb0:	e01d      	b.n	8008eee <HAL_GPIO_Init+0x26a>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e01b      	b.n	8008eee <HAL_GPIO_Init+0x26a>
 8008eb6:	bf00      	nop
 8008eb8:	58000080 	.word	0x58000080
 8008ebc:	58024400 	.word	0x58024400
 8008ec0:	58000400 	.word	0x58000400
 8008ec4:	58020000 	.word	0x58020000
 8008ec8:	58020400 	.word	0x58020400
 8008ecc:	58020800 	.word	0x58020800
 8008ed0:	58020c00 	.word	0x58020c00
 8008ed4:	58021000 	.word	0x58021000
 8008ed8:	58021400 	.word	0x58021400
 8008edc:	58021800 	.word	0x58021800
 8008ee0:	58021c00 	.word	0x58021c00
 8008ee4:	58022000 	.word	0x58022000
 8008ee8:	58022400 	.word	0x58022400
 8008eec:	2300      	movs	r3, #0
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	f002 0203 	and.w	r2, r2, #3
 8008ef4:	0092      	lsls	r2, r2, #2
 8008ef6:	4093      	lsls	r3, r2
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008efe:	4938      	ldr	r1, [pc, #224]	; (8008fe0 <HAL_GPIO_Init+0x35c>)
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	089b      	lsrs	r3, r3, #2
 8008f04:	3302      	adds	r3, #2
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	43db      	mvns	r3, r3
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	43db      	mvns	r3, r3
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	4013      	ands	r3, r2
 8008f4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	43db      	mvns	r3, r3
 8008f72:	69ba      	ldr	r2, [r7, #24]
 8008f74:	4013      	ands	r3, r2
 8008f76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	43db      	mvns	r3, r3
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008fae:	69ba      	ldr	r2, [r7, #24]
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	69ba      	ldr	r2, [r7, #24]
 8008fba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f47f ae63 	bne.w	8008c98 <HAL_GPIO_Init+0x14>
  }
}
 8008fd2:	bf00      	nop
 8008fd4:	bf00      	nop
 8008fd6:	3724      	adds	r7, #36	; 0x24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	58000400 	.word	0x58000400

08008fe4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	691a      	ldr	r2, [r3, #16]
 8008ff4:	887b      	ldrh	r3, [r7, #2]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	73fb      	strb	r3, [r7, #15]
 8009000:	e001      	b.n	8009006 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009006:	7bfb      	ldrb	r3, [r7, #15]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	807b      	strh	r3, [r7, #2]
 8009020:	4613      	mov	r3, r2
 8009022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009024:	787b      	ldrb	r3, [r7, #1]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800902a:	887a      	ldrh	r2, [r7, #2]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009030:	e003      	b.n	800903a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009032:	887b      	ldrh	r3, [r7, #2]
 8009034:	041a      	lsls	r2, r3, #16
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	619a      	str	r2, [r3, #24]
}
 800903a:	bf00      	nop
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
	...

08009048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e08b      	b.n	8009172 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d106      	bne.n	8009074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fa f8c6 	bl	8003200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2224      	movs	r2, #36	; 0x24
 8009078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 0201 	bic.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d107      	bne.n	80090c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	689a      	ldr	r2, [r3, #8]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090be:	609a      	str	r2, [r3, #8]
 80090c0:	e006      	b.n	80090d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80090ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d108      	bne.n	80090ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090e6:	605a      	str	r2, [r3, #4]
 80090e8:	e007      	b.n	80090fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6859      	ldr	r1, [r3, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	4b1d      	ldr	r3, [pc, #116]	; (800917c <HAL_I2C_Init+0x134>)
 8009106:	430b      	orrs	r3, r1
 8009108:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68da      	ldr	r2, [r3, #12]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009118:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	691a      	ldr	r2, [r3, #16]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	430a      	orrs	r2, r1
 8009132:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	69d9      	ldr	r1, [r3, #28]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a1a      	ldr	r2, [r3, #32]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f042 0201 	orr.w	r2, r2, #1
 8009152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2220      	movs	r2, #32
 800915e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	02008000 	.word	0x02008000

08009180 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b088      	sub	sp, #32
 8009184:	af02      	add	r7, sp, #8
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	607a      	str	r2, [r7, #4]
 800918a:	461a      	mov	r2, r3
 800918c:	460b      	mov	r3, r1
 800918e:	817b      	strh	r3, [r7, #10]
 8009190:	4613      	mov	r3, r2
 8009192:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b20      	cmp	r3, #32
 800919e:	f040 80fd 	bne.w	800939c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d101      	bne.n	80091b0 <HAL_I2C_Master_Transmit+0x30>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e0f6      	b.n	800939e <HAL_I2C_Master_Transmit+0x21e>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80091b8:	f7fa fdf4 	bl	8003da4 <HAL_GetTick>
 80091bc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	2319      	movs	r3, #25
 80091c4:	2201      	movs	r2, #1
 80091c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 fa0a 	bl	80095e4 <I2C_WaitOnFlagUntilTimeout>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e0e1      	b.n	800939e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2221      	movs	r2, #33	; 0x21
 80091de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2210      	movs	r2, #16
 80091e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	893a      	ldrh	r2, [r7, #8]
 80091fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009206:	b29b      	uxth	r3, r3
 8009208:	2bff      	cmp	r3, #255	; 0xff
 800920a:	d906      	bls.n	800921a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	22ff      	movs	r2, #255	; 0xff
 8009210:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009212:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	e007      	b.n	800922a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800921e:	b29a      	uxth	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009228:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800922e:	2b00      	cmp	r3, #0
 8009230:	d024      	beq.n	800927c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009236:	781a      	ldrb	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	b29a      	uxth	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800925a:	3b01      	subs	r3, #1
 800925c:	b29a      	uxth	r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009266:	b2db      	uxtb	r3, r3
 8009268:	3301      	adds	r3, #1
 800926a:	b2da      	uxtb	r2, r3
 800926c:	8979      	ldrh	r1, [r7, #10]
 800926e:	4b4e      	ldr	r3, [pc, #312]	; (80093a8 <HAL_I2C_Master_Transmit+0x228>)
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 fc05 	bl	8009a84 <I2C_TransferConfig>
 800927a:	e066      	b.n	800934a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009280:	b2da      	uxtb	r2, r3
 8009282:	8979      	ldrh	r1, [r7, #10]
 8009284:	4b48      	ldr	r3, [pc, #288]	; (80093a8 <HAL_I2C_Master_Transmit+0x228>)
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f000 fbfa 	bl	8009a84 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009290:	e05b      	b.n	800934a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	6a39      	ldr	r1, [r7, #32]
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 f9fd 	bl	8009696 <I2C_WaitOnTXISFlagUntilTimeout>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e07b      	b.n	800939e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092aa:	781a      	ldrb	r2, [r3, #0]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	3b01      	subs	r3, #1
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ce:	3b01      	subs	r3, #1
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092da:	b29b      	uxth	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d034      	beq.n	800934a <HAL_I2C_Master_Transmit+0x1ca>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d130      	bne.n	800934a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	2200      	movs	r2, #0
 80092f0:	2180      	movs	r1, #128	; 0x80
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 f976 	bl	80095e4 <I2C_WaitOnFlagUntilTimeout>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e04d      	b.n	800939e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009306:	b29b      	uxth	r3, r3
 8009308:	2bff      	cmp	r3, #255	; 0xff
 800930a:	d90e      	bls.n	800932a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	22ff      	movs	r2, #255	; 0xff
 8009310:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009316:	b2da      	uxtb	r2, r3
 8009318:	8979      	ldrh	r1, [r7, #10]
 800931a:	2300      	movs	r3, #0
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 fbae 	bl	8009a84 <I2C_TransferConfig>
 8009328:	e00f      	b.n	800934a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800932e:	b29a      	uxth	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009338:	b2da      	uxtb	r2, r3
 800933a:	8979      	ldrh	r1, [r7, #10]
 800933c:	2300      	movs	r3, #0
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 fb9d 	bl	8009a84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800934e:	b29b      	uxth	r3, r3
 8009350:	2b00      	cmp	r3, #0
 8009352:	d19e      	bne.n	8009292 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	6a39      	ldr	r1, [r7, #32]
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 f9e3 	bl	8009724 <I2C_WaitOnSTOPFlagUntilTimeout>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e01a      	b.n	800939e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2220      	movs	r2, #32
 800936e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	6859      	ldr	r1, [r3, #4]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	4b0c      	ldr	r3, [pc, #48]	; (80093ac <HAL_I2C_Master_Transmit+0x22c>)
 800937c:	400b      	ands	r3, r1
 800937e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2220      	movs	r2, #32
 8009384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	e000      	b.n	800939e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800939c:	2302      	movs	r3, #2
  }
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	80002000 	.word	0x80002000
 80093ac:	fe00e800 	.word	0xfe00e800

080093b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	607a      	str	r2, [r7, #4]
 80093ba:	461a      	mov	r2, r3
 80093bc:	460b      	mov	r3, r1
 80093be:	817b      	strh	r3, [r7, #10]
 80093c0:	4613      	mov	r3, r2
 80093c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b20      	cmp	r3, #32
 80093ce:	f040 80db 	bne.w	8009588 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d101      	bne.n	80093e0 <HAL_I2C_Master_Receive+0x30>
 80093dc:	2302      	movs	r3, #2
 80093de:	e0d4      	b.n	800958a <HAL_I2C_Master_Receive+0x1da>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80093e8:	f7fa fcdc 	bl	8003da4 <HAL_GetTick>
 80093ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	2319      	movs	r3, #25
 80093f4:	2201      	movs	r2, #1
 80093f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f000 f8f2 	bl	80095e4 <I2C_WaitOnFlagUntilTimeout>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e0bf      	b.n	800958a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2222      	movs	r2, #34	; 0x22
 800940e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2210      	movs	r2, #16
 8009416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	893a      	ldrh	r2, [r7, #8]
 800942a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009436:	b29b      	uxth	r3, r3
 8009438:	2bff      	cmp	r3, #255	; 0xff
 800943a:	d90e      	bls.n	800945a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	22ff      	movs	r2, #255	; 0xff
 8009440:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009446:	b2da      	uxtb	r2, r3
 8009448:	8979      	ldrh	r1, [r7, #10]
 800944a:	4b52      	ldr	r3, [pc, #328]	; (8009594 <HAL_I2C_Master_Receive+0x1e4>)
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 fb16 	bl	8009a84 <I2C_TransferConfig>
 8009458:	e06d      	b.n	8009536 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800945e:	b29a      	uxth	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009468:	b2da      	uxtb	r2, r3
 800946a:	8979      	ldrh	r1, [r7, #10]
 800946c:	4b49      	ldr	r3, [pc, #292]	; (8009594 <HAL_I2C_Master_Receive+0x1e4>)
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 fb05 	bl	8009a84 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800947a:	e05c      	b.n	8009536 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	6a39      	ldr	r1, [r7, #32]
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 f993 	bl	80097ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d001      	beq.n	8009490 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e07c      	b.n	800958a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ac:	3b01      	subs	r3, #1
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	3b01      	subs	r3, #1
 80094bc:	b29a      	uxth	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d034      	beq.n	8009536 <HAL_I2C_Master_Receive+0x186>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d130      	bne.n	8009536 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	2200      	movs	r2, #0
 80094dc:	2180      	movs	r1, #128	; 0x80
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f000 f880 	bl	80095e4 <I2C_WaitOnFlagUntilTimeout>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e04d      	b.n	800958a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	2bff      	cmp	r3, #255	; 0xff
 80094f6:	d90e      	bls.n	8009516 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	22ff      	movs	r2, #255	; 0xff
 80094fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009502:	b2da      	uxtb	r2, r3
 8009504:	8979      	ldrh	r1, [r7, #10]
 8009506:	2300      	movs	r3, #0
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 fab8 	bl	8009a84 <I2C_TransferConfig>
 8009514:	e00f      	b.n	8009536 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800951a:	b29a      	uxth	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009524:	b2da      	uxtb	r2, r3
 8009526:	8979      	ldrh	r1, [r7, #10]
 8009528:	2300      	movs	r3, #0
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 faa7 	bl	8009a84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800953a:	b29b      	uxth	r3, r3
 800953c:	2b00      	cmp	r3, #0
 800953e:	d19d      	bne.n	800947c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	6a39      	ldr	r1, [r7, #32]
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 f8ed 	bl	8009724 <I2C_WaitOnSTOPFlagUntilTimeout>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e01a      	b.n	800958a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2220      	movs	r2, #32
 800955a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6859      	ldr	r1, [r3, #4]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <HAL_I2C_Master_Receive+0x1e8>)
 8009568:	400b      	ands	r3, r1
 800956a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2220      	movs	r2, #32
 8009570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	e000      	b.n	800958a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009588:	2302      	movs	r3, #2
  }
}
 800958a:	4618      	mov	r0, r3
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	80002400 	.word	0x80002400
 8009598:	fe00e800 	.word	0xfe00e800

0800959c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d103      	bne.n	80095ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2200      	movs	r2, #0
 80095b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d007      	beq.n	80095d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0201 	orr.w	r2, r2, #1
 80095d6:	619a      	str	r2, [r3, #24]
  }
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	603b      	str	r3, [r7, #0]
 80095f0:	4613      	mov	r3, r2
 80095f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095f4:	e03b      	b.n	800966e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f000 f962 	bl	80098c4 <I2C_IsErrorOccurred>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e041      	b.n	800968e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009610:	d02d      	beq.n	800966e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009612:	f7fa fbc7 	bl	8003da4 <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d302      	bcc.n	8009628 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d122      	bne.n	800966e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	699a      	ldr	r2, [r3, #24]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	4013      	ands	r3, r2
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	429a      	cmp	r2, r3
 8009636:	bf0c      	ite	eq
 8009638:	2301      	moveq	r3, #1
 800963a:	2300      	movne	r3, #0
 800963c:	b2db      	uxtb	r3, r3
 800963e:	461a      	mov	r2, r3
 8009640:	79fb      	ldrb	r3, [r7, #7]
 8009642:	429a      	cmp	r2, r3
 8009644:	d113      	bne.n	800966e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964a:	f043 0220 	orr.w	r2, r3, #32
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2220      	movs	r2, #32
 8009656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e00f      	b.n	800968e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	699a      	ldr	r2, [r3, #24]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	4013      	ands	r3, r2
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	429a      	cmp	r2, r3
 800967c:	bf0c      	ite	eq
 800967e:	2301      	moveq	r3, #1
 8009680:	2300      	movne	r3, #0
 8009682:	b2db      	uxtb	r3, r3
 8009684:	461a      	mov	r2, r3
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	429a      	cmp	r2, r3
 800968a:	d0b4      	beq.n	80095f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	60f8      	str	r0, [r7, #12]
 800969e:	60b9      	str	r1, [r7, #8]
 80096a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80096a2:	e033      	b.n	800970c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	68b9      	ldr	r1, [r7, #8]
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 f90b 	bl	80098c4 <I2C_IsErrorOccurred>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e031      	b.n	800971c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096be:	d025      	beq.n	800970c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096c0:	f7fa fb70 	bl	8003da4 <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d302      	bcc.n	80096d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d11a      	bne.n	800970c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d013      	beq.n	800970c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e8:	f043 0220 	orr.w	r2, r3, #32
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2220      	movs	r2, #32
 80096f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e007      	b.n	800971c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	f003 0302 	and.w	r3, r3, #2
 8009716:	2b02      	cmp	r3, #2
 8009718:	d1c4      	bne.n	80096a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009730:	e02f      	b.n	8009792 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	68b9      	ldr	r1, [r7, #8]
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 f8c4 	bl	80098c4 <I2C_IsErrorOccurred>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e02d      	b.n	80097a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009746:	f7fa fb2d 	bl	8003da4 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	429a      	cmp	r2, r3
 8009754:	d302      	bcc.n	800975c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d11a      	bne.n	8009792 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	f003 0320 	and.w	r3, r3, #32
 8009766:	2b20      	cmp	r3, #32
 8009768:	d013      	beq.n	8009792 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800976e:	f043 0220 	orr.w	r2, r3, #32
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2220      	movs	r2, #32
 800977a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e007      	b.n	80097a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	f003 0320 	and.w	r3, r3, #32
 800979c:	2b20      	cmp	r3, #32
 800979e:	d1c8      	bne.n	8009732 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
	...

080097ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80097bc:	e071      	b.n	80098a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	68b9      	ldr	r1, [r7, #8]
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 f87e 	bl	80098c4 <I2C_IsErrorOccurred>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	f003 0320 	and.w	r3, r3, #32
 80097dc:	2b20      	cmp	r3, #32
 80097de:	d13b      	bne.n	8009858 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d138      	bne.n	8009858 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	f003 0304 	and.w	r3, r3, #4
 80097f0:	2b04      	cmp	r3, #4
 80097f2:	d105      	bne.n	8009800 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	f003 0310 	and.w	r3, r3, #16
 800980a:	2b10      	cmp	r3, #16
 800980c:	d121      	bne.n	8009852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2210      	movs	r2, #16
 8009814:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2204      	movs	r2, #4
 800981a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2220      	movs	r2, #32
 8009822:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	6859      	ldr	r1, [r3, #4]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	4b24      	ldr	r3, [pc, #144]	; (80098c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009830:	400b      	ands	r3, r1
 8009832:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2220      	movs	r2, #32
 8009838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	75fb      	strb	r3, [r7, #23]
 8009850:	e002      	b.n	8009858 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009858:	f7fa faa4 	bl	8003da4 <HAL_GetTick>
 800985c:	4602      	mov	r2, r0
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	429a      	cmp	r2, r3
 8009866:	d302      	bcc.n	800986e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d119      	bne.n	80098a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800986e:	7dfb      	ldrb	r3, [r7, #23]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d116      	bne.n	80098a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	f003 0304 	and.w	r3, r3, #4
 800987e:	2b04      	cmp	r3, #4
 8009880:	d00f      	beq.n	80098a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009886:	f043 0220 	orr.w	r2, r3, #32
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2220      	movs	r2, #32
 8009892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	f003 0304 	and.w	r3, r3, #4
 80098ac:	2b04      	cmp	r3, #4
 80098ae:	d002      	beq.n	80098b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80098b0:	7dfb      	ldrb	r3, [r7, #23]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d083      	beq.n	80097be <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	fe00e800 	.word	0xfe00e800

080098c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b08a      	sub	sp, #40	; 0x28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d068      	beq.n	80099c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2210      	movs	r2, #16
 80098f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80098f8:	e049      	b.n	800998e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009900:	d045      	beq.n	800998e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009902:	f7fa fa4f 	bl	8003da4 <HAL_GetTick>
 8009906:	4602      	mov	r2, r0
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	429a      	cmp	r2, r3
 8009910:	d302      	bcc.n	8009918 <I2C_IsErrorOccurred+0x54>
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d13a      	bne.n	800998e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009922:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800992a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800993a:	d121      	bne.n	8009980 <I2C_IsErrorOccurred+0xbc>
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009942:	d01d      	beq.n	8009980 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009944:	7cfb      	ldrb	r3, [r7, #19]
 8009946:	2b20      	cmp	r3, #32
 8009948:	d01a      	beq.n	8009980 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009958:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800995a:	f7fa fa23 	bl	8003da4 <HAL_GetTick>
 800995e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009960:	e00e      	b.n	8009980 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009962:	f7fa fa1f 	bl	8003da4 <HAL_GetTick>
 8009966:	4602      	mov	r2, r0
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	2b19      	cmp	r3, #25
 800996e:	d907      	bls.n	8009980 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	f043 0320 	orr.w	r3, r3, #32
 8009976:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800997e:	e006      	b.n	800998e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	f003 0320 	and.w	r3, r3, #32
 800998a:	2b20      	cmp	r3, #32
 800998c:	d1e9      	bne.n	8009962 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	f003 0320 	and.w	r3, r3, #32
 8009998:	2b20      	cmp	r3, #32
 800999a:	d003      	beq.n	80099a4 <I2C_IsErrorOccurred+0xe0>
 800999c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0aa      	beq.n	80098fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80099a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d103      	bne.n	80099b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2220      	movs	r2, #32
 80099b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	f043 0304 	orr.w	r3, r3, #4
 80099ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00b      	beq.n	80099ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	f043 0301 	orr.w	r3, r3, #1
 80099da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	f043 0308 	orr.w	r3, r3, #8
 80099fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00b      	beq.n	8009a30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009a18:	6a3b      	ldr	r3, [r7, #32]
 8009a1a:	f043 0302 	orr.w	r3, r3, #2
 8009a1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d01c      	beq.n	8009a72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f7ff fdaf 	bl	800959c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6859      	ldr	r1, [r3, #4]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	4b0d      	ldr	r3, [pc, #52]	; (8009a80 <I2C_IsErrorOccurred+0x1bc>)
 8009a4a:	400b      	ands	r3, r1
 8009a4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	431a      	orrs	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3728      	adds	r7, #40	; 0x28
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	fe00e800 	.word	0xfe00e800

08009a84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	607b      	str	r3, [r7, #4]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	817b      	strh	r3, [r7, #10]
 8009a92:	4613      	mov	r3, r2
 8009a94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a96:	897b      	ldrh	r3, [r7, #10]
 8009a98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a9c:	7a7b      	ldrb	r3, [r7, #9]
 8009a9e:	041b      	lsls	r3, r3, #16
 8009aa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009aa4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ab2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	0d5b      	lsrs	r3, r3, #21
 8009abe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009ac2:	4b08      	ldr	r3, [pc, #32]	; (8009ae4 <I2C_TransferConfig+0x60>)
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	43db      	mvns	r3, r3
 8009ac8:	ea02 0103 	and.w	r1, r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009ad6:	bf00      	nop
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	03ff63ff 	.word	0x03ff63ff

08009ae8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b20      	cmp	r3, #32
 8009afc:	d138      	bne.n	8009b70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d101      	bne.n	8009b0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b08:	2302      	movs	r3, #2
 8009b0a:	e032      	b.n	8009b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2224      	movs	r2, #36	; 0x24
 8009b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f022 0201 	bic.w	r2, r2, #1
 8009b2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009b3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6819      	ldr	r1, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f042 0201 	orr.w	r2, r2, #1
 8009b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e000      	b.n	8009b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b70:	2302      	movs	r3, #2
  }
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b085      	sub	sp, #20
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	2b20      	cmp	r3, #32
 8009b92:	d139      	bne.n	8009c08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d101      	bne.n	8009ba2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	e033      	b.n	8009c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2224      	movs	r2, #36	; 0x24
 8009bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0201 	bic.w	r2, r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009bd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	021b      	lsls	r3, r3, #8
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f042 0201 	orr.w	r2, r2, #1
 8009bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	e000      	b.n	8009c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c08:	2302      	movs	r3, #2
  }
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
	...

08009c18 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c20:	4b0d      	ldr	r3, [pc, #52]	; (8009c58 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009c22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c26:	4a0c      	ldr	r2, [pc, #48]	; (8009c58 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009c28:	f043 0302 	orr.w	r3, r3, #2
 8009c2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009c30:	4b09      	ldr	r3, [pc, #36]	; (8009c58 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	60fb      	str	r3, [r7, #12]
 8009c3c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009c3e:	4b07      	ldr	r3, [pc, #28]	; (8009c5c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009c40:	685a      	ldr	r2, [r3, #4]
 8009c42:	4906      	ldr	r1, [pc, #24]	; (8009c5c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	604b      	str	r3, [r1, #4]
}
 8009c4a:	bf00      	nop
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	58024400 	.word	0x58024400
 8009c5c:	58000400 	.word	0x58000400

08009c60 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009c6c:	4b18      	ldr	r3, [pc, #96]	; (8009cd0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f023 0201 	bic.w	r2, r3, #1
 8009c74:	4916      	ldr	r1, [pc, #88]	; (8009cd0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009c7c:	4b14      	ldr	r3, [pc, #80]	; (8009cd0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	4a13      	ldr	r2, [pc, #76]	; (8009cd0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009c82:	f023 0305 	bic.w	r3, r3, #5
 8009c86:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009c88:	4b11      	ldr	r3, [pc, #68]	; (8009cd0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	4a10      	ldr	r2, [pc, #64]	; (8009cd0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009c8e:	f023 0302 	bic.w	r3, r3, #2
 8009c92:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009c94:	4b0f      	ldr	r3, [pc, #60]	; (8009cd4 <HAL_PWR_EnterSTOPMode+0x74>)
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	4a0e      	ldr	r2, [pc, #56]	; (8009cd4 <HAL_PWR_EnterSTOPMode+0x74>)
 8009c9a:	f043 0304 	orr.w	r3, r3, #4
 8009c9e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009ca0:	f3bf 8f4f 	dsb	sy
}
 8009ca4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009ca6:	f3bf 8f6f 	isb	sy
}
 8009caa:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d101      	bne.n	8009cb6 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009cb2:	bf30      	wfi
 8009cb4:	e000      	b.n	8009cb8 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009cb6:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009cb8:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <HAL_PWR_EnterSTOPMode+0x74>)
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	4a05      	ldr	r2, [pc, #20]	; (8009cd4 <HAL_PWR_EnterSTOPMode+0x74>)
 8009cbe:	f023 0304 	bic.w	r3, r3, #4
 8009cc2:	6113      	str	r3, [r2, #16]
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	58024800 	.word	0x58024800
 8009cd4:	e000ed00 	.word	0xe000ed00

08009cd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009ce0:	4b19      	ldr	r3, [pc, #100]	; (8009d48 <HAL_PWREx_ConfigSupply+0x70>)
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b04      	cmp	r3, #4
 8009cea:	d00a      	beq.n	8009d02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009cec:	4b16      	ldr	r3, [pc, #88]	; (8009d48 <HAL_PWREx_ConfigSupply+0x70>)
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	f003 0307 	and.w	r3, r3, #7
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d001      	beq.n	8009cfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e01f      	b.n	8009d3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e01d      	b.n	8009d3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009d02:	4b11      	ldr	r3, [pc, #68]	; (8009d48 <HAL_PWREx_ConfigSupply+0x70>)
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	f023 0207 	bic.w	r2, r3, #7
 8009d0a:	490f      	ldr	r1, [pc, #60]	; (8009d48 <HAL_PWREx_ConfigSupply+0x70>)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009d12:	f7fa f847 	bl	8003da4 <HAL_GetTick>
 8009d16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009d18:	e009      	b.n	8009d2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009d1a:	f7fa f843 	bl	8003da4 <HAL_GetTick>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d28:	d901      	bls.n	8009d2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e007      	b.n	8009d3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009d2e:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <HAL_PWREx_ConfigSupply+0x70>)
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d3a:	d1ee      	bne.n	8009d1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	58024800 	.word	0x58024800

08009d4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08c      	sub	sp, #48	; 0x30
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d102      	bne.n	8009d60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	f000 bc48 	b.w	800a5f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 8088 	beq.w	8009e7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d6e:	4b99      	ldr	r3, [pc, #612]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d78:	4b96      	ldr	r3, [pc, #600]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d80:	2b10      	cmp	r3, #16
 8009d82:	d007      	beq.n	8009d94 <HAL_RCC_OscConfig+0x48>
 8009d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d86:	2b18      	cmp	r3, #24
 8009d88:	d111      	bne.n	8009dae <HAL_RCC_OscConfig+0x62>
 8009d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8c:	f003 0303 	and.w	r3, r3, #3
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d10c      	bne.n	8009dae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d94:	4b8f      	ldr	r3, [pc, #572]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d06d      	beq.n	8009e7c <HAL_RCC_OscConfig+0x130>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d169      	bne.n	8009e7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	f000 bc21 	b.w	800a5f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009db6:	d106      	bne.n	8009dc6 <HAL_RCC_OscConfig+0x7a>
 8009db8:	4b86      	ldr	r3, [pc, #536]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a85      	ldr	r2, [pc, #532]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	e02e      	b.n	8009e24 <HAL_RCC_OscConfig+0xd8>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10c      	bne.n	8009de8 <HAL_RCC_OscConfig+0x9c>
 8009dce:	4b81      	ldr	r3, [pc, #516]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a80      	ldr	r2, [pc, #512]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dd8:	6013      	str	r3, [r2, #0]
 8009dda:	4b7e      	ldr	r3, [pc, #504]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a7d      	ldr	r2, [pc, #500]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	e01d      	b.n	8009e24 <HAL_RCC_OscConfig+0xd8>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009df0:	d10c      	bne.n	8009e0c <HAL_RCC_OscConfig+0xc0>
 8009df2:	4b78      	ldr	r3, [pc, #480]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a77      	ldr	r2, [pc, #476]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009dfc:	6013      	str	r3, [r2, #0]
 8009dfe:	4b75      	ldr	r3, [pc, #468]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a74      	ldr	r2, [pc, #464]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e08:	6013      	str	r3, [r2, #0]
 8009e0a:	e00b      	b.n	8009e24 <HAL_RCC_OscConfig+0xd8>
 8009e0c:	4b71      	ldr	r3, [pc, #452]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a70      	ldr	r2, [pc, #448]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	4b6e      	ldr	r3, [pc, #440]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a6d      	ldr	r2, [pc, #436]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d013      	beq.n	8009e54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2c:	f7f9 ffba 	bl	8003da4 <HAL_GetTick>
 8009e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e32:	e008      	b.n	8009e46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e34:	f7f9 ffb6 	bl	8003da4 <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	2b64      	cmp	r3, #100	; 0x64
 8009e40:	d901      	bls.n	8009e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e3d4      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e46:	4b63      	ldr	r3, [pc, #396]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0f0      	beq.n	8009e34 <HAL_RCC_OscConfig+0xe8>
 8009e52:	e014      	b.n	8009e7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e54:	f7f9 ffa6 	bl	8003da4 <HAL_GetTick>
 8009e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e5a:	e008      	b.n	8009e6e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e5c:	f7f9 ffa2 	bl	8003da4 <HAL_GetTick>
 8009e60:	4602      	mov	r2, r0
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	2b64      	cmp	r3, #100	; 0x64
 8009e68:	d901      	bls.n	8009e6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	e3c0      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e6e:	4b59      	ldr	r3, [pc, #356]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1f0      	bne.n	8009e5c <HAL_RCC_OscConfig+0x110>
 8009e7a:	e000      	b.n	8009e7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 80ca 	beq.w	800a020 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e8c:	4b51      	ldr	r3, [pc, #324]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e96:	4b4f      	ldr	r3, [pc, #316]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d007      	beq.n	8009eb2 <HAL_RCC_OscConfig+0x166>
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	2b18      	cmp	r3, #24
 8009ea6:	d156      	bne.n	8009f56 <HAL_RCC_OscConfig+0x20a>
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	f003 0303 	and.w	r3, r3, #3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d151      	bne.n	8009f56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009eb2:	4b48      	ldr	r3, [pc, #288]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 0304 	and.w	r3, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d005      	beq.n	8009eca <HAL_RCC_OscConfig+0x17e>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d101      	bne.n	8009eca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e392      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009eca:	4b42      	ldr	r3, [pc, #264]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f023 0219 	bic.w	r2, r3, #25
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	493f      	ldr	r1, [pc, #252]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009edc:	f7f9 ff62 	bl	8003da4 <HAL_GetTick>
 8009ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ee2:	e008      	b.n	8009ef6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ee4:	f7f9 ff5e 	bl	8003da4 <HAL_GetTick>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d901      	bls.n	8009ef6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e37c      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ef6:	4b37      	ldr	r3, [pc, #220]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0304 	and.w	r3, r3, #4
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0f0      	beq.n	8009ee4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f02:	f7f9 ff5b 	bl	8003dbc <HAL_GetREVID>
 8009f06:	4603      	mov	r3, r0
 8009f08:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d817      	bhi.n	8009f40 <HAL_RCC_OscConfig+0x1f4>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	2b40      	cmp	r3, #64	; 0x40
 8009f16:	d108      	bne.n	8009f2a <HAL_RCC_OscConfig+0x1de>
 8009f18:	4b2e      	ldr	r3, [pc, #184]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009f20:	4a2c      	ldr	r2, [pc, #176]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f28:	e07a      	b.n	800a020 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f2a:	4b2a      	ldr	r3, [pc, #168]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	031b      	lsls	r3, r3, #12
 8009f38:	4926      	ldr	r1, [pc, #152]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f3e:	e06f      	b.n	800a020 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f40:	4b24      	ldr	r3, [pc, #144]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	061b      	lsls	r3, r3, #24
 8009f4e:	4921      	ldr	r1, [pc, #132]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f54:	e064      	b.n	800a020 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d047      	beq.n	8009fee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f5e:	4b1d      	ldr	r3, [pc, #116]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f023 0219 	bic.w	r2, r3, #25
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	491a      	ldr	r1, [pc, #104]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f70:	f7f9 ff18 	bl	8003da4 <HAL_GetTick>
 8009f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f76:	e008      	b.n	8009f8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f78:	f7f9 ff14 	bl	8003da4 <HAL_GetTick>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d901      	bls.n	8009f8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e332      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f8a:	4b12      	ldr	r3, [pc, #72]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0304 	and.w	r3, r3, #4
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d0f0      	beq.n	8009f78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f96:	f7f9 ff11 	bl	8003dbc <HAL_GetREVID>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d819      	bhi.n	8009fd8 <HAL_RCC_OscConfig+0x28c>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	2b40      	cmp	r3, #64	; 0x40
 8009faa:	d108      	bne.n	8009fbe <HAL_RCC_OscConfig+0x272>
 8009fac:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009fb4:	4a07      	ldr	r2, [pc, #28]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fba:	6053      	str	r3, [r2, #4]
 8009fbc:	e030      	b.n	800a020 <HAL_RCC_OscConfig+0x2d4>
 8009fbe:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	031b      	lsls	r3, r3, #12
 8009fcc:	4901      	ldr	r1, [pc, #4]	; (8009fd4 <HAL_RCC_OscConfig+0x288>)
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	604b      	str	r3, [r1, #4]
 8009fd2:	e025      	b.n	800a020 <HAL_RCC_OscConfig+0x2d4>
 8009fd4:	58024400 	.word	0x58024400
 8009fd8:	4b9a      	ldr	r3, [pc, #616]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	061b      	lsls	r3, r3, #24
 8009fe6:	4997      	ldr	r1, [pc, #604]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	604b      	str	r3, [r1, #4]
 8009fec:	e018      	b.n	800a020 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fee:	4b95      	ldr	r3, [pc, #596]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a94      	ldr	r2, [pc, #592]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 8009ff4:	f023 0301 	bic.w	r3, r3, #1
 8009ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ffa:	f7f9 fed3 	bl	8003da4 <HAL_GetTick>
 8009ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a000:	e008      	b.n	800a014 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a002:	f7f9 fecf 	bl	8003da4 <HAL_GetTick>
 800a006:	4602      	mov	r2, r0
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d901      	bls.n	800a014 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	e2ed      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a014:	4b8b      	ldr	r3, [pc, #556]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 0304 	and.w	r3, r3, #4
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1f0      	bne.n	800a002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0310 	and.w	r3, r3, #16
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f000 80a9 	beq.w	800a180 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a02e:	4b85      	ldr	r3, [pc, #532]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a036:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a038:	4b82      	ldr	r3, [pc, #520]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	2b08      	cmp	r3, #8
 800a042:	d007      	beq.n	800a054 <HAL_RCC_OscConfig+0x308>
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	2b18      	cmp	r3, #24
 800a048:	d13a      	bne.n	800a0c0 <HAL_RCC_OscConfig+0x374>
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f003 0303 	and.w	r3, r3, #3
 800a050:	2b01      	cmp	r3, #1
 800a052:	d135      	bne.n	800a0c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a054:	4b7b      	ldr	r3, [pc, #492]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d005      	beq.n	800a06c <HAL_RCC_OscConfig+0x320>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	69db      	ldr	r3, [r3, #28]
 800a064:	2b80      	cmp	r3, #128	; 0x80
 800a066:	d001      	beq.n	800a06c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e2c1      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a06c:	f7f9 fea6 	bl	8003dbc <HAL_GetREVID>
 800a070:	4603      	mov	r3, r0
 800a072:	f241 0203 	movw	r2, #4099	; 0x1003
 800a076:	4293      	cmp	r3, r2
 800a078:	d817      	bhi.n	800a0aa <HAL_RCC_OscConfig+0x35e>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	2b20      	cmp	r3, #32
 800a080:	d108      	bne.n	800a094 <HAL_RCC_OscConfig+0x348>
 800a082:	4b70      	ldr	r3, [pc, #448]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a08a:	4a6e      	ldr	r2, [pc, #440]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a08c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a090:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a092:	e075      	b.n	800a180 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a094:	4b6b      	ldr	r3, [pc, #428]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	069b      	lsls	r3, r3, #26
 800a0a2:	4968      	ldr	r1, [pc, #416]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a0a8:	e06a      	b.n	800a180 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0aa:	4b66      	ldr	r3, [pc, #408]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	061b      	lsls	r3, r3, #24
 800a0b8:	4962      	ldr	r1, [pc, #392]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a0be:	e05f      	b.n	800a180 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	69db      	ldr	r3, [r3, #28]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d042      	beq.n	800a14e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a0c8:	4b5e      	ldr	r3, [pc, #376]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a5d      	ldr	r2, [pc, #372]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d4:	f7f9 fe66 	bl	8003da4 <HAL_GetTick>
 800a0d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0da:	e008      	b.n	800a0ee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a0dc:	f7f9 fe62 	bl	8003da4 <HAL_GetTick>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d901      	bls.n	800a0ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	e280      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0ee:	4b55      	ldr	r3, [pc, #340]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0f0      	beq.n	800a0dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0fa:	f7f9 fe5f 	bl	8003dbc <HAL_GetREVID>
 800a0fe:	4603      	mov	r3, r0
 800a100:	f241 0203 	movw	r2, #4099	; 0x1003
 800a104:	4293      	cmp	r3, r2
 800a106:	d817      	bhi.n	800a138 <HAL_RCC_OscConfig+0x3ec>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	2b20      	cmp	r3, #32
 800a10e:	d108      	bne.n	800a122 <HAL_RCC_OscConfig+0x3d6>
 800a110:	4b4c      	ldr	r3, [pc, #304]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a118:	4a4a      	ldr	r2, [pc, #296]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a11a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a11e:	6053      	str	r3, [r2, #4]
 800a120:	e02e      	b.n	800a180 <HAL_RCC_OscConfig+0x434>
 800a122:	4b48      	ldr	r3, [pc, #288]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	069b      	lsls	r3, r3, #26
 800a130:	4944      	ldr	r1, [pc, #272]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a132:	4313      	orrs	r3, r2
 800a134:	604b      	str	r3, [r1, #4]
 800a136:	e023      	b.n	800a180 <HAL_RCC_OscConfig+0x434>
 800a138:	4b42      	ldr	r3, [pc, #264]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a1b      	ldr	r3, [r3, #32]
 800a144:	061b      	lsls	r3, r3, #24
 800a146:	493f      	ldr	r1, [pc, #252]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a148:	4313      	orrs	r3, r2
 800a14a:	60cb      	str	r3, [r1, #12]
 800a14c:	e018      	b.n	800a180 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a14e:	4b3d      	ldr	r3, [pc, #244]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a3c      	ldr	r2, [pc, #240]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a15a:	f7f9 fe23 	bl	8003da4 <HAL_GetTick>
 800a15e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a160:	e008      	b.n	800a174 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a162:	f7f9 fe1f 	bl	8003da4 <HAL_GetTick>
 800a166:	4602      	mov	r2, r0
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d901      	bls.n	800a174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e23d      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a174:	4b33      	ldr	r3, [pc, #204]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1f0      	bne.n	800a162 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 0308 	and.w	r3, r3, #8
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d036      	beq.n	800a1fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d019      	beq.n	800a1c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a194:	4b2b      	ldr	r3, [pc, #172]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a198:	4a2a      	ldr	r2, [pc, #168]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a19a:	f043 0301 	orr.w	r3, r3, #1
 800a19e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1a0:	f7f9 fe00 	bl	8003da4 <HAL_GetTick>
 800a1a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a1a6:	e008      	b.n	800a1ba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1a8:	f7f9 fdfc 	bl	8003da4 <HAL_GetTick>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d901      	bls.n	800a1ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	e21a      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a1ba:	4b22      	ldr	r3, [pc, #136]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a1bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0f0      	beq.n	800a1a8 <HAL_RCC_OscConfig+0x45c>
 800a1c6:	e018      	b.n	800a1fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a1c8:	4b1e      	ldr	r3, [pc, #120]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a1ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1cc:	4a1d      	ldr	r2, [pc, #116]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a1ce:	f023 0301 	bic.w	r3, r3, #1
 800a1d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1d4:	f7f9 fde6 	bl	8003da4 <HAL_GetTick>
 800a1d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a1da:	e008      	b.n	800a1ee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1dc:	f7f9 fde2 	bl	8003da4 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d901      	bls.n	800a1ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e200      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a1ee:	4b15      	ldr	r3, [pc, #84]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a1f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1f0      	bne.n	800a1dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 0320 	and.w	r3, r3, #32
 800a202:	2b00      	cmp	r3, #0
 800a204:	d039      	beq.n	800a27a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d01c      	beq.n	800a248 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a20e:	4b0d      	ldr	r3, [pc, #52]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a0c      	ldr	r2, [pc, #48]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a214:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a218:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a21a:	f7f9 fdc3 	bl	8003da4 <HAL_GetTick>
 800a21e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a220:	e008      	b.n	800a234 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a222:	f7f9 fdbf 	bl	8003da4 <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d901      	bls.n	800a234 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	e1dd      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a234:	4b03      	ldr	r3, [pc, #12]	; (800a244 <HAL_RCC_OscConfig+0x4f8>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d0f0      	beq.n	800a222 <HAL_RCC_OscConfig+0x4d6>
 800a240:	e01b      	b.n	800a27a <HAL_RCC_OscConfig+0x52e>
 800a242:	bf00      	nop
 800a244:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a248:	4b9b      	ldr	r3, [pc, #620]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a9a      	ldr	r2, [pc, #616]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a24e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a252:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a254:	f7f9 fda6 	bl	8003da4 <HAL_GetTick>
 800a258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a25a:	e008      	b.n	800a26e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a25c:	f7f9 fda2 	bl	8003da4 <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	2b02      	cmp	r3, #2
 800a268:	d901      	bls.n	800a26e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e1c0      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a26e:	4b92      	ldr	r3, [pc, #584]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1f0      	bne.n	800a25c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0304 	and.w	r3, r3, #4
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 8081 	beq.w	800a38a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a288:	4b8c      	ldr	r3, [pc, #560]	; (800a4bc <HAL_RCC_OscConfig+0x770>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a8b      	ldr	r2, [pc, #556]	; (800a4bc <HAL_RCC_OscConfig+0x770>)
 800a28e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a292:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a294:	f7f9 fd86 	bl	8003da4 <HAL_GetTick>
 800a298:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a29a:	e008      	b.n	800a2ae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a29c:	f7f9 fd82 	bl	8003da4 <HAL_GetTick>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	2b64      	cmp	r3, #100	; 0x64
 800a2a8:	d901      	bls.n	800a2ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e1a0      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a2ae:	4b83      	ldr	r3, [pc, #524]	; (800a4bc <HAL_RCC_OscConfig+0x770>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0f0      	beq.n	800a29c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d106      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x584>
 800a2c2:	4b7d      	ldr	r3, [pc, #500]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a2c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c6:	4a7c      	ldr	r2, [pc, #496]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a2c8:	f043 0301 	orr.w	r3, r3, #1
 800a2cc:	6713      	str	r3, [r2, #112]	; 0x70
 800a2ce:	e02d      	b.n	800a32c <HAL_RCC_OscConfig+0x5e0>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10c      	bne.n	800a2f2 <HAL_RCC_OscConfig+0x5a6>
 800a2d8:	4b77      	ldr	r3, [pc, #476]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2dc:	4a76      	ldr	r2, [pc, #472]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a2de:	f023 0301 	bic.w	r3, r3, #1
 800a2e2:	6713      	str	r3, [r2, #112]	; 0x70
 800a2e4:	4b74      	ldr	r3, [pc, #464]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e8:	4a73      	ldr	r2, [pc, #460]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a2ea:	f023 0304 	bic.w	r3, r3, #4
 800a2ee:	6713      	str	r3, [r2, #112]	; 0x70
 800a2f0:	e01c      	b.n	800a32c <HAL_RCC_OscConfig+0x5e0>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	2b05      	cmp	r3, #5
 800a2f8:	d10c      	bne.n	800a314 <HAL_RCC_OscConfig+0x5c8>
 800a2fa:	4b6f      	ldr	r3, [pc, #444]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fe:	4a6e      	ldr	r2, [pc, #440]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a300:	f043 0304 	orr.w	r3, r3, #4
 800a304:	6713      	str	r3, [r2, #112]	; 0x70
 800a306:	4b6c      	ldr	r3, [pc, #432]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30a:	4a6b      	ldr	r2, [pc, #428]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a30c:	f043 0301 	orr.w	r3, r3, #1
 800a310:	6713      	str	r3, [r2, #112]	; 0x70
 800a312:	e00b      	b.n	800a32c <HAL_RCC_OscConfig+0x5e0>
 800a314:	4b68      	ldr	r3, [pc, #416]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a318:	4a67      	ldr	r2, [pc, #412]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a31a:	f023 0301 	bic.w	r3, r3, #1
 800a31e:	6713      	str	r3, [r2, #112]	; 0x70
 800a320:	4b65      	ldr	r3, [pc, #404]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a324:	4a64      	ldr	r2, [pc, #400]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a326:	f023 0304 	bic.w	r3, r3, #4
 800a32a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d015      	beq.n	800a360 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a334:	f7f9 fd36 	bl	8003da4 <HAL_GetTick>
 800a338:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a33a:	e00a      	b.n	800a352 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a33c:	f7f9 fd32 	bl	8003da4 <HAL_GetTick>
 800a340:	4602      	mov	r2, r0
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	f241 3288 	movw	r2, #5000	; 0x1388
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d901      	bls.n	800a352 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a34e:	2303      	movs	r3, #3
 800a350:	e14e      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a352:	4b59      	ldr	r3, [pc, #356]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a356:	f003 0302 	and.w	r3, r3, #2
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d0ee      	beq.n	800a33c <HAL_RCC_OscConfig+0x5f0>
 800a35e:	e014      	b.n	800a38a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a360:	f7f9 fd20 	bl	8003da4 <HAL_GetTick>
 800a364:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a366:	e00a      	b.n	800a37e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a368:	f7f9 fd1c 	bl	8003da4 <HAL_GetTick>
 800a36c:	4602      	mov	r2, r0
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	f241 3288 	movw	r2, #5000	; 0x1388
 800a376:	4293      	cmp	r3, r2
 800a378:	d901      	bls.n	800a37e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e138      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a37e:	4b4e      	ldr	r3, [pc, #312]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a382:	f003 0302 	and.w	r3, r3, #2
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1ee      	bne.n	800a368 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 812d 	beq.w	800a5ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a394:	4b48      	ldr	r3, [pc, #288]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a39c:	2b18      	cmp	r3, #24
 800a39e:	f000 80bd 	beq.w	800a51c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	f040 809e 	bne.w	800a4e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3ac:	4b42      	ldr	r3, [pc, #264]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a41      	ldr	r2, [pc, #260]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a3b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3b8:	f7f9 fcf4 	bl	8003da4 <HAL_GetTick>
 800a3bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a3be:	e008      	b.n	800a3d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3c0:	f7f9 fcf0 	bl	8003da4 <HAL_GetTick>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d901      	bls.n	800a3d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	e10e      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a3d2:	4b39      	ldr	r3, [pc, #228]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1f0      	bne.n	800a3c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a3de:	4b36      	ldr	r3, [pc, #216]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a3e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3e2:	4b37      	ldr	r3, [pc, #220]	; (800a4c0 <HAL_RCC_OscConfig+0x774>)
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a3ee:	0112      	lsls	r2, r2, #4
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	4931      	ldr	r1, [pc, #196]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	628b      	str	r3, [r1, #40]	; 0x28
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a406:	3b01      	subs	r3, #1
 800a408:	025b      	lsls	r3, r3, #9
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	431a      	orrs	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a412:	3b01      	subs	r3, #1
 800a414:	041b      	lsls	r3, r3, #16
 800a416:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a41a:	431a      	orrs	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a420:	3b01      	subs	r3, #1
 800a422:	061b      	lsls	r3, r3, #24
 800a424:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a428:	4923      	ldr	r1, [pc, #140]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a42a:	4313      	orrs	r3, r2
 800a42c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a42e:	4b22      	ldr	r3, [pc, #136]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a432:	4a21      	ldr	r2, [pc, #132]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a434:	f023 0301 	bic.w	r3, r3, #1
 800a438:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a43a:	4b1f      	ldr	r3, [pc, #124]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a43c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a43e:	4b21      	ldr	r3, [pc, #132]	; (800a4c4 <HAL_RCC_OscConfig+0x778>)
 800a440:	4013      	ands	r3, r2
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a446:	00d2      	lsls	r2, r2, #3
 800a448:	491b      	ldr	r1, [pc, #108]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a44e:	4b1a      	ldr	r3, [pc, #104]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a452:	f023 020c 	bic.w	r2, r3, #12
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	4917      	ldr	r1, [pc, #92]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a45c:	4313      	orrs	r3, r2
 800a45e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a460:	4b15      	ldr	r3, [pc, #84]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a464:	f023 0202 	bic.w	r2, r3, #2
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a46c:	4912      	ldr	r1, [pc, #72]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a472:	4b11      	ldr	r3, [pc, #68]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a476:	4a10      	ldr	r2, [pc, #64]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a47c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a47e:	4b0e      	ldr	r3, [pc, #56]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a482:	4a0d      	ldr	r2, [pc, #52]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a488:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a48a:	4b0b      	ldr	r3, [pc, #44]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48e:	4a0a      	ldr	r2, [pc, #40]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a494:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a496:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49a:	4a07      	ldr	r2, [pc, #28]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a49c:	f043 0301 	orr.w	r3, r3, #1
 800a4a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4a2:	4b05      	ldr	r3, [pc, #20]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a04      	ldr	r2, [pc, #16]	; (800a4b8 <HAL_RCC_OscConfig+0x76c>)
 800a4a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4ae:	f7f9 fc79 	bl	8003da4 <HAL_GetTick>
 800a4b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a4b4:	e011      	b.n	800a4da <HAL_RCC_OscConfig+0x78e>
 800a4b6:	bf00      	nop
 800a4b8:	58024400 	.word	0x58024400
 800a4bc:	58024800 	.word	0x58024800
 800a4c0:	fffffc0c 	.word	0xfffffc0c
 800a4c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4c8:	f7f9 fc6c 	bl	8003da4 <HAL_GetTick>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d901      	bls.n	800a4da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	e08a      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a4da:	4b47      	ldr	r3, [pc, #284]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0f0      	beq.n	800a4c8 <HAL_RCC_OscConfig+0x77c>
 800a4e6:	e082      	b.n	800a5ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4e8:	4b43      	ldr	r3, [pc, #268]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a42      	ldr	r2, [pc, #264]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a4ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4f4:	f7f9 fc56 	bl	8003da4 <HAL_GetTick>
 800a4f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4fa:	e008      	b.n	800a50e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4fc:	f7f9 fc52 	bl	8003da4 <HAL_GetTick>
 800a500:	4602      	mov	r2, r0
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	2b02      	cmp	r3, #2
 800a508:	d901      	bls.n	800a50e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e070      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a50e:	4b3a      	ldr	r3, [pc, #232]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1f0      	bne.n	800a4fc <HAL_RCC_OscConfig+0x7b0>
 800a51a:	e068      	b.n	800a5ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a51c:	4b36      	ldr	r3, [pc, #216]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a520:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a522:	4b35      	ldr	r3, [pc, #212]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a526:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d031      	beq.n	800a594 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	f003 0203 	and.w	r2, r3, #3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d12a      	bne.n	800a594 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	091b      	lsrs	r3, r3, #4
 800a542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d122      	bne.n	800a594 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a558:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d11a      	bne.n	800a594 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	0a5b      	lsrs	r3, r3, #9
 800a562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d111      	bne.n	800a594 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	0c1b      	lsrs	r3, r3, #16
 800a574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a57e:	429a      	cmp	r2, r3
 800a580:	d108      	bne.n	800a594 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	0e1b      	lsrs	r3, r3, #24
 800a586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a590:	429a      	cmp	r2, r3
 800a592:	d001      	beq.n	800a598 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e02b      	b.n	800a5f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a598:	4b17      	ldr	r3, [pc, #92]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59c:	08db      	lsrs	r3, r3, #3
 800a59e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d01f      	beq.n	800a5ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a5ae:	4b12      	ldr	r3, [pc, #72]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b2:	4a11      	ldr	r2, [pc, #68]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a5b4:	f023 0301 	bic.w	r3, r3, #1
 800a5b8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a5ba:	f7f9 fbf3 	bl	8003da4 <HAL_GetTick>
 800a5be:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a5c0:	bf00      	nop
 800a5c2:	f7f9 fbef 	bl	8003da4 <HAL_GetTick>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d0f9      	beq.n	800a5c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a5ce:	4b0a      	ldr	r3, [pc, #40]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a5d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5d2:	4b0a      	ldr	r3, [pc, #40]	; (800a5fc <HAL_RCC_OscConfig+0x8b0>)
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a5da:	00d2      	lsls	r2, r2, #3
 800a5dc:	4906      	ldr	r1, [pc, #24]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a5e2:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	4a04      	ldr	r2, [pc, #16]	; (800a5f8 <HAL_RCC_OscConfig+0x8ac>)
 800a5e8:	f043 0301 	orr.w	r3, r3, #1
 800a5ec:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3730      	adds	r7, #48	; 0x30
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	58024400 	.word	0x58024400
 800a5fc:	ffff0007 	.word	0xffff0007

0800a600 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e19c      	b.n	800a94e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a614:	4b8a      	ldr	r3, [pc, #552]	; (800a840 <HAL_RCC_ClockConfig+0x240>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 030f 	and.w	r3, r3, #15
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d910      	bls.n	800a644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a622:	4b87      	ldr	r3, [pc, #540]	; (800a840 <HAL_RCC_ClockConfig+0x240>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f023 020f 	bic.w	r2, r3, #15
 800a62a:	4985      	ldr	r1, [pc, #532]	; (800a840 <HAL_RCC_ClockConfig+0x240>)
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	4313      	orrs	r3, r2
 800a630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a632:	4b83      	ldr	r3, [pc, #524]	; (800a840 <HAL_RCC_ClockConfig+0x240>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 030f 	and.w	r3, r3, #15
 800a63a:	683a      	ldr	r2, [r7, #0]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d001      	beq.n	800a644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e184      	b.n	800a94e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0304 	and.w	r3, r3, #4
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d010      	beq.n	800a672 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	691a      	ldr	r2, [r3, #16]
 800a654:	4b7b      	ldr	r3, [pc, #492]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d908      	bls.n	800a672 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a660:	4b78      	ldr	r3, [pc, #480]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	4975      	ldr	r1, [pc, #468]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a66e:	4313      	orrs	r3, r2
 800a670:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 0308 	and.w	r3, r3, #8
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d010      	beq.n	800a6a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	695a      	ldr	r2, [r3, #20]
 800a682:	4b70      	ldr	r3, [pc, #448]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a684:	69db      	ldr	r3, [r3, #28]
 800a686:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d908      	bls.n	800a6a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a68e:	4b6d      	ldr	r3, [pc, #436]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	496a      	ldr	r1, [pc, #424]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a69c:	4313      	orrs	r3, r2
 800a69e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0310 	and.w	r3, r3, #16
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d010      	beq.n	800a6ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	699a      	ldr	r2, [r3, #24]
 800a6b0:	4b64      	ldr	r3, [pc, #400]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d908      	bls.n	800a6ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a6bc:	4b61      	ldr	r3, [pc, #388]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a6be:	69db      	ldr	r3, [r3, #28]
 800a6c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	495e      	ldr	r1, [pc, #376]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0320 	and.w	r3, r3, #32
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d010      	beq.n	800a6fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	69da      	ldr	r2, [r3, #28]
 800a6de:	4b59      	ldr	r3, [pc, #356]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a6e0:	6a1b      	ldr	r3, [r3, #32]
 800a6e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d908      	bls.n	800a6fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a6ea:	4b56      	ldr	r3, [pc, #344]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	69db      	ldr	r3, [r3, #28]
 800a6f6:	4953      	ldr	r1, [pc, #332]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0302 	and.w	r3, r3, #2
 800a704:	2b00      	cmp	r3, #0
 800a706:	d010      	beq.n	800a72a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68da      	ldr	r2, [r3, #12]
 800a70c:	4b4d      	ldr	r3, [pc, #308]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	f003 030f 	and.w	r3, r3, #15
 800a714:	429a      	cmp	r2, r3
 800a716:	d908      	bls.n	800a72a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a718:	4b4a      	ldr	r3, [pc, #296]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	f023 020f 	bic.w	r2, r3, #15
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	4947      	ldr	r1, [pc, #284]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a726:	4313      	orrs	r3, r2
 800a728:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d055      	beq.n	800a7e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a736:	4b43      	ldr	r3, [pc, #268]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	4940      	ldr	r1, [pc, #256]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a744:	4313      	orrs	r3, r2
 800a746:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d107      	bne.n	800a760 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a750:	4b3c      	ldr	r3, [pc, #240]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d121      	bne.n	800a7a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e0f6      	b.n	800a94e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	2b03      	cmp	r3, #3
 800a766:	d107      	bne.n	800a778 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a768:	4b36      	ldr	r3, [pc, #216]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d115      	bne.n	800a7a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e0ea      	b.n	800a94e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d107      	bne.n	800a790 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a780:	4b30      	ldr	r3, [pc, #192]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d109      	bne.n	800a7a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	e0de      	b.n	800a94e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a790:	4b2c      	ldr	r3, [pc, #176]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e0d6      	b.n	800a94e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a7a0:	4b28      	ldr	r3, [pc, #160]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	f023 0207 	bic.w	r2, r3, #7
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	4925      	ldr	r1, [pc, #148]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7b2:	f7f9 faf7 	bl	8003da4 <HAL_GetTick>
 800a7b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7b8:	e00a      	b.n	800a7d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7ba:	f7f9 faf3 	bl	8003da4 <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d901      	bls.n	800a7d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e0be      	b.n	800a94e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7d0:	4b1c      	ldr	r3, [pc, #112]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	00db      	lsls	r3, r3, #3
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d1eb      	bne.n	800a7ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 0302 	and.w	r3, r3, #2
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d010      	beq.n	800a810 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68da      	ldr	r2, [r3, #12]
 800a7f2:	4b14      	ldr	r3, [pc, #80]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	f003 030f 	and.w	r3, r3, #15
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d208      	bcs.n	800a810 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7fe:	4b11      	ldr	r3, [pc, #68]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a800:	699b      	ldr	r3, [r3, #24]
 800a802:	f023 020f 	bic.w	r2, r3, #15
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	490e      	ldr	r1, [pc, #56]	; (800a844 <HAL_RCC_ClockConfig+0x244>)
 800a80c:	4313      	orrs	r3, r2
 800a80e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a810:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <HAL_RCC_ClockConfig+0x240>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 030f 	and.w	r3, r3, #15
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d214      	bcs.n	800a848 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a81e:	4b08      	ldr	r3, [pc, #32]	; (800a840 <HAL_RCC_ClockConfig+0x240>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f023 020f 	bic.w	r2, r3, #15
 800a826:	4906      	ldr	r1, [pc, #24]	; (800a840 <HAL_RCC_ClockConfig+0x240>)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a82e:	4b04      	ldr	r3, [pc, #16]	; (800a840 <HAL_RCC_ClockConfig+0x240>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 030f 	and.w	r3, r3, #15
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d005      	beq.n	800a848 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e086      	b.n	800a94e <HAL_RCC_ClockConfig+0x34e>
 800a840:	52002000 	.word	0x52002000
 800a844:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 0304 	and.w	r3, r3, #4
 800a850:	2b00      	cmp	r3, #0
 800a852:	d010      	beq.n	800a876 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	691a      	ldr	r2, [r3, #16]
 800a858:	4b3f      	ldr	r3, [pc, #252]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a860:	429a      	cmp	r2, r3
 800a862:	d208      	bcs.n	800a876 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a864:	4b3c      	ldr	r3, [pc, #240]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	4939      	ldr	r1, [pc, #228]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a872:	4313      	orrs	r3, r2
 800a874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0308 	and.w	r3, r3, #8
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d010      	beq.n	800a8a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	695a      	ldr	r2, [r3, #20]
 800a886:	4b34      	ldr	r3, [pc, #208]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a888:	69db      	ldr	r3, [r3, #28]
 800a88a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a88e:	429a      	cmp	r2, r3
 800a890:	d208      	bcs.n	800a8a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a892:	4b31      	ldr	r3, [pc, #196]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a894:	69db      	ldr	r3, [r3, #28]
 800a896:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	695b      	ldr	r3, [r3, #20]
 800a89e:	492e      	ldr	r1, [pc, #184]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0310 	and.w	r3, r3, #16
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d010      	beq.n	800a8d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	699a      	ldr	r2, [r3, #24]
 800a8b4:	4b28      	ldr	r3, [pc, #160]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a8b6:	69db      	ldr	r3, [r3, #28]
 800a8b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d208      	bcs.n	800a8d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a8c0:	4b25      	ldr	r3, [pc, #148]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a8c2:	69db      	ldr	r3, [r3, #28]
 800a8c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	4922      	ldr	r1, [pc, #136]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0320 	and.w	r3, r3, #32
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d010      	beq.n	800a900 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	69da      	ldr	r2, [r3, #28]
 800a8e2:	4b1d      	ldr	r3, [pc, #116]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d208      	bcs.n	800a900 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a8ee:	4b1a      	ldr	r3, [pc, #104]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	4917      	ldr	r1, [pc, #92]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a900:	f000 f834 	bl	800a96c <HAL_RCC_GetSysClockFreq>
 800a904:	4602      	mov	r2, r0
 800a906:	4b14      	ldr	r3, [pc, #80]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	0a1b      	lsrs	r3, r3, #8
 800a90c:	f003 030f 	and.w	r3, r3, #15
 800a910:	4912      	ldr	r1, [pc, #72]	; (800a95c <HAL_RCC_ClockConfig+0x35c>)
 800a912:	5ccb      	ldrb	r3, [r1, r3]
 800a914:	f003 031f 	and.w	r3, r3, #31
 800a918:	fa22 f303 	lsr.w	r3, r2, r3
 800a91c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a91e:	4b0e      	ldr	r3, [pc, #56]	; (800a958 <HAL_RCC_ClockConfig+0x358>)
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	f003 030f 	and.w	r3, r3, #15
 800a926:	4a0d      	ldr	r2, [pc, #52]	; (800a95c <HAL_RCC_ClockConfig+0x35c>)
 800a928:	5cd3      	ldrb	r3, [r2, r3]
 800a92a:	f003 031f 	and.w	r3, r3, #31
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	fa22 f303 	lsr.w	r3, r2, r3
 800a934:	4a0a      	ldr	r2, [pc, #40]	; (800a960 <HAL_RCC_ClockConfig+0x360>)
 800a936:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a938:	4a0a      	ldr	r2, [pc, #40]	; (800a964 <HAL_RCC_ClockConfig+0x364>)
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a93e:	4b0a      	ldr	r3, [pc, #40]	; (800a968 <HAL_RCC_ClockConfig+0x368>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4618      	mov	r0, r3
 800a944:	f7f8 ff52 	bl	80037ec <HAL_InitTick>
 800a948:	4603      	mov	r3, r0
 800a94a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3718      	adds	r7, #24
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	58024400 	.word	0x58024400
 800a95c:	08017680 	.word	0x08017680
 800a960:	24000094 	.word	0x24000094
 800a964:	24000090 	.word	0x24000090
 800a968:	24000098 	.word	0x24000098

0800a96c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b089      	sub	sp, #36	; 0x24
 800a970:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a972:	4bb3      	ldr	r3, [pc, #716]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a97a:	2b18      	cmp	r3, #24
 800a97c:	f200 8155 	bhi.w	800ac2a <HAL_RCC_GetSysClockFreq+0x2be>
 800a980:	a201      	add	r2, pc, #4	; (adr r2, 800a988 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a986:	bf00      	nop
 800a988:	0800a9ed 	.word	0x0800a9ed
 800a98c:	0800ac2b 	.word	0x0800ac2b
 800a990:	0800ac2b 	.word	0x0800ac2b
 800a994:	0800ac2b 	.word	0x0800ac2b
 800a998:	0800ac2b 	.word	0x0800ac2b
 800a99c:	0800ac2b 	.word	0x0800ac2b
 800a9a0:	0800ac2b 	.word	0x0800ac2b
 800a9a4:	0800ac2b 	.word	0x0800ac2b
 800a9a8:	0800aa13 	.word	0x0800aa13
 800a9ac:	0800ac2b 	.word	0x0800ac2b
 800a9b0:	0800ac2b 	.word	0x0800ac2b
 800a9b4:	0800ac2b 	.word	0x0800ac2b
 800a9b8:	0800ac2b 	.word	0x0800ac2b
 800a9bc:	0800ac2b 	.word	0x0800ac2b
 800a9c0:	0800ac2b 	.word	0x0800ac2b
 800a9c4:	0800ac2b 	.word	0x0800ac2b
 800a9c8:	0800aa19 	.word	0x0800aa19
 800a9cc:	0800ac2b 	.word	0x0800ac2b
 800a9d0:	0800ac2b 	.word	0x0800ac2b
 800a9d4:	0800ac2b 	.word	0x0800ac2b
 800a9d8:	0800ac2b 	.word	0x0800ac2b
 800a9dc:	0800ac2b 	.word	0x0800ac2b
 800a9e0:	0800ac2b 	.word	0x0800ac2b
 800a9e4:	0800ac2b 	.word	0x0800ac2b
 800a9e8:	0800aa1f 	.word	0x0800aa1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9ec:	4b94      	ldr	r3, [pc, #592]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0320 	and.w	r3, r3, #32
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d009      	beq.n	800aa0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9f8:	4b91      	ldr	r3, [pc, #580]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	08db      	lsrs	r3, r3, #3
 800a9fe:	f003 0303 	and.w	r3, r3, #3
 800aa02:	4a90      	ldr	r2, [pc, #576]	; (800ac44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa04:	fa22 f303 	lsr.w	r3, r2, r3
 800aa08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800aa0a:	e111      	b.n	800ac30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aa0c:	4b8d      	ldr	r3, [pc, #564]	; (800ac44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa0e:	61bb      	str	r3, [r7, #24]
      break;
 800aa10:	e10e      	b.n	800ac30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aa12:	4b8d      	ldr	r3, [pc, #564]	; (800ac48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa14:	61bb      	str	r3, [r7, #24]
      break;
 800aa16:	e10b      	b.n	800ac30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aa18:	4b8c      	ldr	r3, [pc, #560]	; (800ac4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aa1a:	61bb      	str	r3, [r7, #24]
      break;
 800aa1c:	e108      	b.n	800ac30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa1e:	4b88      	ldr	r3, [pc, #544]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa22:	f003 0303 	and.w	r3, r3, #3
 800aa26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aa28:	4b85      	ldr	r3, [pc, #532]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2c:	091b      	lsrs	r3, r3, #4
 800aa2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aa34:	4b82      	ldr	r3, [pc, #520]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aa3e:	4b80      	ldr	r3, [pc, #512]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa42:	08db      	lsrs	r3, r3, #3
 800aa44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	fb02 f303 	mul.w	r3, r2, r3
 800aa4e:	ee07 3a90 	vmov	s15, r3
 800aa52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 80e1 	beq.w	800ac24 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	f000 8083 	beq.w	800ab70 <HAL_RCC_GetSysClockFreq+0x204>
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	f200 80a1 	bhi.w	800abb4 <HAL_RCC_GetSysClockFreq+0x248>
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d003      	beq.n	800aa80 <HAL_RCC_GetSysClockFreq+0x114>
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d056      	beq.n	800ab2c <HAL_RCC_GetSysClockFreq+0x1c0>
 800aa7e:	e099      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa80:	4b6f      	ldr	r3, [pc, #444]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0320 	and.w	r3, r3, #32
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d02d      	beq.n	800aae8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa8c:	4b6c      	ldr	r3, [pc, #432]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	08db      	lsrs	r3, r3, #3
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	4a6b      	ldr	r2, [pc, #428]	; (800ac44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa98:	fa22 f303 	lsr.w	r3, r2, r3
 800aa9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	ee07 3a90 	vmov	s15, r3
 800aaa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab6:	4b62      	ldr	r3, [pc, #392]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aabe:	ee07 3a90 	vmov	s15, r3
 800aac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaca:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ac50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aae6:	e087      	b.n	800abf8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ac54 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aaf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafa:	4b51      	ldr	r3, [pc, #324]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab02:	ee07 3a90 	vmov	s15, r3
 800ab06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ac50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab2a:	e065      	b.n	800abf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	ee07 3a90 	vmov	s15, r3
 800ab32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab36:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ac58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab3e:	4b40      	ldr	r3, [pc, #256]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab46:	ee07 3a90 	vmov	s15, r3
 800ab4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ac50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab6e:	e043      	b.n	800abf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ac5c <HAL_RCC_GetSysClockFreq+0x2f0>
 800ab7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab82:	4b2f      	ldr	r3, [pc, #188]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8a:	ee07 3a90 	vmov	s15, r3
 800ab8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab92:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ac50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abb2:	e021      	b.n	800abf8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ac58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800abc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc6:	4b1e      	ldr	r3, [pc, #120]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd6:	ed97 6a02 	vldr	s12, [r7, #8]
 800abda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ac50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abf6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800abf8:	4b11      	ldr	r3, [pc, #68]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfc:	0a5b      	lsrs	r3, r3, #9
 800abfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac02:	3301      	adds	r3, #1
 800ac04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	ee07 3a90 	vmov	s15, r3
 800ac0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac10:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac1c:	ee17 3a90 	vmov	r3, s15
 800ac20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ac22:	e005      	b.n	800ac30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ac24:	2300      	movs	r3, #0
 800ac26:	61bb      	str	r3, [r7, #24]
      break;
 800ac28:	e002      	b.n	800ac30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ac2a:	4b07      	ldr	r3, [pc, #28]	; (800ac48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac2c:	61bb      	str	r3, [r7, #24]
      break;
 800ac2e:	bf00      	nop
  }

  return sysclockfreq;
 800ac30:	69bb      	ldr	r3, [r7, #24]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3724      	adds	r7, #36	; 0x24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	58024400 	.word	0x58024400
 800ac44:	03d09000 	.word	0x03d09000
 800ac48:	003d0900 	.word	0x003d0900
 800ac4c:	017d7840 	.word	0x017d7840
 800ac50:	46000000 	.word	0x46000000
 800ac54:	4c742400 	.word	0x4c742400
 800ac58:	4a742400 	.word	0x4a742400
 800ac5c:	4bbebc20 	.word	0x4bbebc20

0800ac60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac66:	f7ff fe81 	bl	800a96c <HAL_RCC_GetSysClockFreq>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	4b10      	ldr	r3, [pc, #64]	; (800acb0 <HAL_RCC_GetHCLKFreq+0x50>)
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	0a1b      	lsrs	r3, r3, #8
 800ac72:	f003 030f 	and.w	r3, r3, #15
 800ac76:	490f      	ldr	r1, [pc, #60]	; (800acb4 <HAL_RCC_GetHCLKFreq+0x54>)
 800ac78:	5ccb      	ldrb	r3, [r1, r3]
 800ac7a:	f003 031f 	and.w	r3, r3, #31
 800ac7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac84:	4b0a      	ldr	r3, [pc, #40]	; (800acb0 <HAL_RCC_GetHCLKFreq+0x50>)
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	f003 030f 	and.w	r3, r3, #15
 800ac8c:	4a09      	ldr	r2, [pc, #36]	; (800acb4 <HAL_RCC_GetHCLKFreq+0x54>)
 800ac8e:	5cd3      	ldrb	r3, [r2, r3]
 800ac90:	f003 031f 	and.w	r3, r3, #31
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	fa22 f303 	lsr.w	r3, r2, r3
 800ac9a:	4a07      	ldr	r2, [pc, #28]	; (800acb8 <HAL_RCC_GetHCLKFreq+0x58>)
 800ac9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac9e:	4a07      	ldr	r2, [pc, #28]	; (800acbc <HAL_RCC_GetHCLKFreq+0x5c>)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aca4:	4b04      	ldr	r3, [pc, #16]	; (800acb8 <HAL_RCC_GetHCLKFreq+0x58>)
 800aca6:	681b      	ldr	r3, [r3, #0]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	58024400 	.word	0x58024400
 800acb4:	08017680 	.word	0x08017680
 800acb8:	24000094 	.word	0x24000094
 800acbc:	24000090 	.word	0x24000090

0800acc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800acc4:	f7ff ffcc 	bl	800ac60 <HAL_RCC_GetHCLKFreq>
 800acc8:	4602      	mov	r2, r0
 800acca:	4b06      	ldr	r3, [pc, #24]	; (800ace4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800accc:	69db      	ldr	r3, [r3, #28]
 800acce:	091b      	lsrs	r3, r3, #4
 800acd0:	f003 0307 	and.w	r3, r3, #7
 800acd4:	4904      	ldr	r1, [pc, #16]	; (800ace8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800acd6:	5ccb      	ldrb	r3, [r1, r3]
 800acd8:	f003 031f 	and.w	r3, r3, #31
 800acdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	58024400 	.word	0x58024400
 800ace8:	08017680 	.word	0x08017680

0800acec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800acf0:	f7ff ffb6 	bl	800ac60 <HAL_RCC_GetHCLKFreq>
 800acf4:	4602      	mov	r2, r0
 800acf6:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <HAL_RCC_GetPCLK2Freq+0x24>)
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	0a1b      	lsrs	r3, r3, #8
 800acfc:	f003 0307 	and.w	r3, r3, #7
 800ad00:	4904      	ldr	r1, [pc, #16]	; (800ad14 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad02:	5ccb      	ldrb	r3, [r1, r3]
 800ad04:	f003 031f 	and.w	r3, r3, #31
 800ad08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	58024400 	.word	0x58024400
 800ad14:	08017680 	.word	0x08017680

0800ad18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	223f      	movs	r2, #63	; 0x3f
 800ad26:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ad28:	4b1a      	ldr	r3, [pc, #104]	; (800ad94 <HAL_RCC_GetClockConfig+0x7c>)
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	f003 0207 	and.w	r2, r3, #7
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ad34:	4b17      	ldr	r3, [pc, #92]	; (800ad94 <HAL_RCC_GetClockConfig+0x7c>)
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ad40:	4b14      	ldr	r3, [pc, #80]	; (800ad94 <HAL_RCC_GetClockConfig+0x7c>)
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	f003 020f 	and.w	r2, r3, #15
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ad4c:	4b11      	ldr	r3, [pc, #68]	; (800ad94 <HAL_RCC_GetClockConfig+0x7c>)
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ad58:	4b0e      	ldr	r3, [pc, #56]	; (800ad94 <HAL_RCC_GetClockConfig+0x7c>)
 800ad5a:	69db      	ldr	r3, [r3, #28]
 800ad5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ad64:	4b0b      	ldr	r3, [pc, #44]	; (800ad94 <HAL_RCC_GetClockConfig+0x7c>)
 800ad66:	69db      	ldr	r3, [r3, #28]
 800ad68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ad70:	4b08      	ldr	r3, [pc, #32]	; (800ad94 <HAL_RCC_GetClockConfig+0x7c>)
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ad7c:	4b06      	ldr	r3, [pc, #24]	; (800ad98 <HAL_RCC_GetClockConfig+0x80>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 020f 	and.w	r2, r3, #15
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	601a      	str	r2, [r3, #0]
}
 800ad88:	bf00      	nop
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	58024400 	.word	0x58024400
 800ad98:	52002000 	.word	0x52002000

0800ad9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ada0:	b0ca      	sub	sp, #296	; 0x128
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ada8:	2300      	movs	r3, #0
 800adaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800adae:	2300      	movs	r3, #0
 800adb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800adb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800adc0:	2500      	movs	r5, #0
 800adc2:	ea54 0305 	orrs.w	r3, r4, r5
 800adc6:	d049      	beq.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800adc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800add2:	d02f      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800add4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800add8:	d828      	bhi.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800adda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adde:	d01a      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ade0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ade4:	d822      	bhi.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800adea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adee:	d007      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800adf0:	e01c      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adf2:	4bb8      	ldr	r3, [pc, #736]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf6:	4ab7      	ldr	r2, [pc, #732]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800adfe:	e01a      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae04:	3308      	adds	r3, #8
 800ae06:	2102      	movs	r1, #2
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f002 fb61 	bl	800d4d0 <RCCEx_PLL2_Config>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae14:	e00f      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae1a:	3328      	adds	r3, #40	; 0x28
 800ae1c:	2102      	movs	r1, #2
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f002 fc08 	bl	800d634 <RCCEx_PLL3_Config>
 800ae24:	4603      	mov	r3, r0
 800ae26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae2a:	e004      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae32:	e000      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ae34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10a      	bne.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ae3e:	4ba5      	ldr	r3, [pc, #660]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae42:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ae46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae4c:	4aa1      	ldr	r2, [pc, #644]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae4e:	430b      	orrs	r3, r1
 800ae50:	6513      	str	r3, [r2, #80]	; 0x50
 800ae52:	e003      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ae5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ae68:	f04f 0900 	mov.w	r9, #0
 800ae6c:	ea58 0309 	orrs.w	r3, r8, r9
 800ae70:	d047      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ae72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae78:	2b04      	cmp	r3, #4
 800ae7a:	d82a      	bhi.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ae7c:	a201      	add	r2, pc, #4	; (adr r2, 800ae84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ae7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae82:	bf00      	nop
 800ae84:	0800ae99 	.word	0x0800ae99
 800ae88:	0800aea7 	.word	0x0800aea7
 800ae8c:	0800aebd 	.word	0x0800aebd
 800ae90:	0800aedb 	.word	0x0800aedb
 800ae94:	0800aedb 	.word	0x0800aedb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae98:	4b8e      	ldr	r3, [pc, #568]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9c:	4a8d      	ldr	r2, [pc, #564]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aea2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aea4:	e01a      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeaa:	3308      	adds	r3, #8
 800aeac:	2100      	movs	r1, #0
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f002 fb0e 	bl	800d4d0 <RCCEx_PLL2_Config>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aeba:	e00f      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aec0:	3328      	adds	r3, #40	; 0x28
 800aec2:	2100      	movs	r1, #0
 800aec4:	4618      	mov	r0, r3
 800aec6:	f002 fbb5 	bl	800d634 <RCCEx_PLL3_Config>
 800aeca:	4603      	mov	r3, r0
 800aecc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aed0:	e004      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aed8:	e000      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aeda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aedc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10a      	bne.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aee4:	4b7b      	ldr	r3, [pc, #492]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee8:	f023 0107 	bic.w	r1, r3, #7
 800aeec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef2:	4a78      	ldr	r2, [pc, #480]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aef4:	430b      	orrs	r3, r1
 800aef6:	6513      	str	r3, [r2, #80]	; 0x50
 800aef8:	e003      	b.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aefa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aefe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800af02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800af0e:	f04f 0b00 	mov.w	fp, #0
 800af12:	ea5a 030b 	orrs.w	r3, sl, fp
 800af16:	d04c      	beq.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800af18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af22:	d030      	beq.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800af24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af28:	d829      	bhi.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800af2a:	2bc0      	cmp	r3, #192	; 0xc0
 800af2c:	d02d      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800af2e:	2bc0      	cmp	r3, #192	; 0xc0
 800af30:	d825      	bhi.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800af32:	2b80      	cmp	r3, #128	; 0x80
 800af34:	d018      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800af36:	2b80      	cmp	r3, #128	; 0x80
 800af38:	d821      	bhi.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d002      	beq.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800af3e:	2b40      	cmp	r3, #64	; 0x40
 800af40:	d007      	beq.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800af42:	e01c      	b.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af44:	4b63      	ldr	r3, [pc, #396]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	4a62      	ldr	r2, [pc, #392]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800af50:	e01c      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af56:	3308      	adds	r3, #8
 800af58:	2100      	movs	r1, #0
 800af5a:	4618      	mov	r0, r3
 800af5c:	f002 fab8 	bl	800d4d0 <RCCEx_PLL2_Config>
 800af60:	4603      	mov	r3, r0
 800af62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800af66:	e011      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af6c:	3328      	adds	r3, #40	; 0x28
 800af6e:	2100      	movs	r1, #0
 800af70:	4618      	mov	r0, r3
 800af72:	f002 fb5f 	bl	800d634 <RCCEx_PLL3_Config>
 800af76:	4603      	mov	r3, r0
 800af78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800af7c:	e006      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af84:	e002      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800af86:	bf00      	nop
 800af88:	e000      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800af8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10a      	bne.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800af94:	4b4f      	ldr	r3, [pc, #316]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af98:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800af9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afa2:	4a4c      	ldr	r2, [pc, #304]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afa4:	430b      	orrs	r3, r1
 800afa6:	6513      	str	r3, [r2, #80]	; 0x50
 800afa8:	e003      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800afb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800afbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800afc2:	2300      	movs	r3, #0
 800afc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800afc8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800afcc:	460b      	mov	r3, r1
 800afce:	4313      	orrs	r3, r2
 800afd0:	d053      	beq.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800afd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800afda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afde:	d035      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800afe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afe4:	d82e      	bhi.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800afe6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800afea:	d031      	beq.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800afec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aff0:	d828      	bhi.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800aff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aff6:	d01a      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800aff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800affc:	d822      	bhi.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800affe:	2b00      	cmp	r3, #0
 800b000:	d003      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b006:	d007      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b008:	e01c      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b00a:	4b32      	ldr	r3, [pc, #200]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00e:	4a31      	ldr	r2, [pc, #196]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b014:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b016:	e01c      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01c:	3308      	adds	r3, #8
 800b01e:	2100      	movs	r1, #0
 800b020:	4618      	mov	r0, r3
 800b022:	f002 fa55 	bl	800d4d0 <RCCEx_PLL2_Config>
 800b026:	4603      	mov	r3, r0
 800b028:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b02c:	e011      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b032:	3328      	adds	r3, #40	; 0x28
 800b034:	2100      	movs	r1, #0
 800b036:	4618      	mov	r0, r3
 800b038:	f002 fafc 	bl	800d634 <RCCEx_PLL3_Config>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b042:	e006      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b04a:	e002      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b04c:	bf00      	nop
 800b04e:	e000      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b050:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b052:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10b      	bne.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b05a:	4b1e      	ldr	r3, [pc, #120]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b05c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b05e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b066:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b06a:	4a1a      	ldr	r2, [pc, #104]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b06c:	430b      	orrs	r3, r1
 800b06e:	6593      	str	r3, [r2, #88]	; 0x58
 800b070:	e003      	b.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b072:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b076:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b082:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b086:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b08a:	2300      	movs	r3, #0
 800b08c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b090:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b094:	460b      	mov	r3, r1
 800b096:	4313      	orrs	r3, r2
 800b098:	d056      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b09e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0a6:	d038      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b0a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0ac:	d831      	bhi.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b0ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0b2:	d034      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b0b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0b8:	d82b      	bhi.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b0ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0be:	d01d      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b0c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0c4:	d825      	bhi.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d006      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b0ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b0ce:	d00a      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b0d0:	e01f      	b.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b0d2:	bf00      	nop
 800b0d4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0d8:	4ba2      	ldr	r3, [pc, #648]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0dc:	4aa1      	ldr	r2, [pc, #644]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0e4:	e01c      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ea:	3308      	adds	r3, #8
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f002 f9ee 	bl	800d4d0 <RCCEx_PLL2_Config>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b0fa:	e011      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b100:	3328      	adds	r3, #40	; 0x28
 800b102:	2100      	movs	r1, #0
 800b104:	4618      	mov	r0, r3
 800b106:	f002 fa95 	bl	800d634 <RCCEx_PLL3_Config>
 800b10a:	4603      	mov	r3, r0
 800b10c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b110:	e006      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b118:	e002      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b11a:	bf00      	nop
 800b11c:	e000      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b11e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10b      	bne.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b128:	4b8e      	ldr	r3, [pc, #568]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b12a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b12c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b134:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b138:	4a8a      	ldr	r2, [pc, #552]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b13a:	430b      	orrs	r3, r1
 800b13c:	6593      	str	r3, [r2, #88]	; 0x58
 800b13e:	e003      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b150:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b154:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b158:	2300      	movs	r3, #0
 800b15a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b15e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b162:	460b      	mov	r3, r1
 800b164:	4313      	orrs	r3, r2
 800b166:	d03a      	beq.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b16e:	2b30      	cmp	r3, #48	; 0x30
 800b170:	d01f      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b172:	2b30      	cmp	r3, #48	; 0x30
 800b174:	d819      	bhi.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b176:	2b20      	cmp	r3, #32
 800b178:	d00c      	beq.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b17a:	2b20      	cmp	r3, #32
 800b17c:	d815      	bhi.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d019      	beq.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b182:	2b10      	cmp	r3, #16
 800b184:	d111      	bne.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b186:	4b77      	ldr	r3, [pc, #476]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18a:	4a76      	ldr	r2, [pc, #472]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b18c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b192:	e011      	b.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b198:	3308      	adds	r3, #8
 800b19a:	2102      	movs	r1, #2
 800b19c:	4618      	mov	r0, r3
 800b19e:	f002 f997 	bl	800d4d0 <RCCEx_PLL2_Config>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b1a8:	e006      	b.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1b0:	e002      	b.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b1b2:	bf00      	nop
 800b1b4:	e000      	b.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b1b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10a      	bne.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b1c0:	4b68      	ldr	r3, [pc, #416]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1c4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ce:	4a65      	ldr	r2, [pc, #404]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1d0:	430b      	orrs	r3, r1
 800b1d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b1d4:	e003      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b1ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b1f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	d051      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b208:	d035      	beq.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b20a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b20e:	d82e      	bhi.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b210:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b214:	d031      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b216:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b21a:	d828      	bhi.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b21c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b220:	d01a      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b226:	d822      	bhi.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d003      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b22c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b230:	d007      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b232:	e01c      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b234:	4b4b      	ldr	r3, [pc, #300]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b238:	4a4a      	ldr	r2, [pc, #296]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b23a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b23e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b240:	e01c      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b246:	3308      	adds	r3, #8
 800b248:	2100      	movs	r1, #0
 800b24a:	4618      	mov	r0, r3
 800b24c:	f002 f940 	bl	800d4d0 <RCCEx_PLL2_Config>
 800b250:	4603      	mov	r3, r0
 800b252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b256:	e011      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b25c:	3328      	adds	r3, #40	; 0x28
 800b25e:	2100      	movs	r1, #0
 800b260:	4618      	mov	r0, r3
 800b262:	f002 f9e7 	bl	800d634 <RCCEx_PLL3_Config>
 800b266:	4603      	mov	r3, r0
 800b268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b26c:	e006      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b274:	e002      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b276:	bf00      	nop
 800b278:	e000      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b27a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b27c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b280:	2b00      	cmp	r3, #0
 800b282:	d10a      	bne.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b284:	4b37      	ldr	r3, [pc, #220]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b288:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b28c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b292:	4a34      	ldr	r2, [pc, #208]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b294:	430b      	orrs	r3, r1
 800b296:	6513      	str	r3, [r2, #80]	; 0x50
 800b298:	e003      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b29a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b29e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b2ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b2b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	d056      	beq.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2cc:	d033      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b2ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2d2:	d82c      	bhi.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b2d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2d8:	d02f      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b2da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2de:	d826      	bhi.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b2e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b2e4:	d02b      	beq.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b2e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b2ea:	d820      	bhi.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b2ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2f0:	d012      	beq.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b2f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2f6:	d81a      	bhi.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d022      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b2fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b300:	d115      	bne.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b306:	3308      	adds	r3, #8
 800b308:	2101      	movs	r1, #1
 800b30a:	4618      	mov	r0, r3
 800b30c:	f002 f8e0 	bl	800d4d0 <RCCEx_PLL2_Config>
 800b310:	4603      	mov	r3, r0
 800b312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b316:	e015      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b31c:	3328      	adds	r3, #40	; 0x28
 800b31e:	2101      	movs	r1, #1
 800b320:	4618      	mov	r0, r3
 800b322:	f002 f987 	bl	800d634 <RCCEx_PLL3_Config>
 800b326:	4603      	mov	r3, r0
 800b328:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b32c:	e00a      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b334:	e006      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b336:	bf00      	nop
 800b338:	e004      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b33a:	bf00      	nop
 800b33c:	e002      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b33e:	bf00      	nop
 800b340:	e000      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b342:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10d      	bne.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b34c:	4b05      	ldr	r3, [pc, #20]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b350:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b35a:	4a02      	ldr	r2, [pc, #8]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b35c:	430b      	orrs	r3, r1
 800b35e:	6513      	str	r3, [r2, #80]	; 0x50
 800b360:	e006      	b.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b362:	bf00      	nop
 800b364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b36c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b37c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b380:	2300      	movs	r3, #0
 800b382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b386:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4313      	orrs	r3, r2
 800b38e:	d055      	beq.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b394:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b39c:	d033      	beq.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b39e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3a2:	d82c      	bhi.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b3a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3a8:	d02f      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ae:	d826      	bhi.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b3b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3b4:	d02b      	beq.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b3b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3ba:	d820      	bhi.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b3bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3c0:	d012      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b3c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3c6:	d81a      	bhi.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d022      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b3cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3d0:	d115      	bne.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d6:	3308      	adds	r3, #8
 800b3d8:	2101      	movs	r1, #1
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f002 f878 	bl	800d4d0 <RCCEx_PLL2_Config>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b3e6:	e015      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ec:	3328      	adds	r3, #40	; 0x28
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f002 f91f 	bl	800d634 <RCCEx_PLL3_Config>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b3fc:	e00a      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b404:	e006      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b406:	bf00      	nop
 800b408:	e004      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b40a:	bf00      	nop
 800b40c:	e002      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b40e:	bf00      	nop
 800b410:	e000      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b412:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b414:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10b      	bne.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b41c:	4ba3      	ldr	r3, [pc, #652]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b41e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b420:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b42c:	4a9f      	ldr	r2, [pc, #636]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b42e:	430b      	orrs	r3, r1
 800b430:	6593      	str	r3, [r2, #88]	; 0x58
 800b432:	e003      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b434:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b438:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b44c:	2300      	movs	r3, #0
 800b44e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b452:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b456:	460b      	mov	r3, r1
 800b458:	4313      	orrs	r3, r2
 800b45a:	d037      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b466:	d00e      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b46c:	d816      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d018      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b476:	d111      	bne.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b478:	4b8c      	ldr	r3, [pc, #560]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47c:	4a8b      	ldr	r2, [pc, #556]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b47e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b484:	e00f      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48a:	3308      	adds	r3, #8
 800b48c:	2101      	movs	r1, #1
 800b48e:	4618      	mov	r0, r3
 800b490:	f002 f81e 	bl	800d4d0 <RCCEx_PLL2_Config>
 800b494:	4603      	mov	r3, r0
 800b496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b49a:	e004      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4a2:	e000      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b4a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10a      	bne.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b4ae:	4b7f      	ldr	r3, [pc, #508]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4bc:	4a7b      	ldr	r2, [pc, #492]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4be:	430b      	orrs	r3, r1
 800b4c0:	6513      	str	r3, [r2, #80]	; 0x50
 800b4c2:	e003      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b4d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b4e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	d039      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d81c      	bhi.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b4f6:	a201      	add	r2, pc, #4	; (adr r2, 800b4fc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fc:	0800b539 	.word	0x0800b539
 800b500:	0800b50d 	.word	0x0800b50d
 800b504:	0800b51b 	.word	0x0800b51b
 800b508:	0800b539 	.word	0x0800b539
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b50c:	4b67      	ldr	r3, [pc, #412]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b510:	4a66      	ldr	r2, [pc, #408]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b518:	e00f      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51e:	3308      	adds	r3, #8
 800b520:	2102      	movs	r1, #2
 800b522:	4618      	mov	r0, r3
 800b524:	f001 ffd4 	bl	800d4d0 <RCCEx_PLL2_Config>
 800b528:	4603      	mov	r3, r0
 800b52a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b52e:	e004      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b536:	e000      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b53a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10a      	bne.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b542:	4b5a      	ldr	r3, [pc, #360]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b546:	f023 0103 	bic.w	r1, r3, #3
 800b54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b550:	4a56      	ldr	r2, [pc, #344]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b552:	430b      	orrs	r3, r1
 800b554:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b556:	e003      	b.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b55c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b56c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b570:	2300      	movs	r3, #0
 800b572:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b576:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b57a:	460b      	mov	r3, r1
 800b57c:	4313      	orrs	r3, r2
 800b57e:	f000 809f 	beq.w	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b582:	4b4b      	ldr	r3, [pc, #300]	; (800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a4a      	ldr	r2, [pc, #296]	; (800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b58c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b58e:	f7f8 fc09 	bl	8003da4 <HAL_GetTick>
 800b592:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b596:	e00b      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b598:	f7f8 fc04 	bl	8003da4 <HAL_GetTick>
 800b59c:	4602      	mov	r2, r0
 800b59e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	2b64      	cmp	r3, #100	; 0x64
 800b5a6:	d903      	bls.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5ae:	e005      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b5b0:	4b3f      	ldr	r3, [pc, #252]	; (800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d0ed      	beq.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b5bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d179      	bne.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b5c4:	4b39      	ldr	r3, [pc, #228]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b5d0:	4053      	eors	r3, r2
 800b5d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d015      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b5da:	4b34      	ldr	r3, [pc, #208]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b5e6:	4b31      	ldr	r3, [pc, #196]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ea:	4a30      	ldr	r2, [pc, #192]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5f0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b5f2:	4b2e      	ldr	r3, [pc, #184]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f6:	4a2d      	ldr	r2, [pc, #180]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5fc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b5fe:	4a2b      	ldr	r2, [pc, #172]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b600:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b604:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b60e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b612:	d118      	bne.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b614:	f7f8 fbc6 	bl	8003da4 <HAL_GetTick>
 800b618:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b61c:	e00d      	b.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b61e:	f7f8 fbc1 	bl	8003da4 <HAL_GetTick>
 800b622:	4602      	mov	r2, r0
 800b624:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b628:	1ad2      	subs	r2, r2, r3
 800b62a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b62e:	429a      	cmp	r2, r3
 800b630:	d903      	bls.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b632:	2303      	movs	r3, #3
 800b634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b638:	e005      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b63a:	4b1c      	ldr	r3, [pc, #112]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b63e:	f003 0302 	and.w	r3, r3, #2
 800b642:	2b00      	cmp	r3, #0
 800b644:	d0eb      	beq.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d129      	bne.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b652:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b65a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b65e:	d10e      	bne.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b660:	4b12      	ldr	r3, [pc, #72]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b670:	091a      	lsrs	r2, r3, #4
 800b672:	4b10      	ldr	r3, [pc, #64]	; (800b6b4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b674:	4013      	ands	r3, r2
 800b676:	4a0d      	ldr	r2, [pc, #52]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b678:	430b      	orrs	r3, r1
 800b67a:	6113      	str	r3, [r2, #16]
 800b67c:	e005      	b.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b67e:	4b0b      	ldr	r3, [pc, #44]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	4a0a      	ldr	r2, [pc, #40]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b684:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b688:	6113      	str	r3, [r2, #16]
 800b68a:	4b08      	ldr	r3, [pc, #32]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b68c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b692:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b69a:	4a04      	ldr	r2, [pc, #16]	; (800b6ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b69c:	430b      	orrs	r3, r1
 800b69e:	6713      	str	r3, [r2, #112]	; 0x70
 800b6a0:	e00e      	b.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b6a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b6aa:	e009      	b.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b6ac:	58024400 	.word	0x58024400
 800b6b0:	58024800 	.word	0x58024800
 800b6b4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f002 0301 	and.w	r3, r2, #1
 800b6cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	f000 8089 	beq.w	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6e8:	2b28      	cmp	r3, #40	; 0x28
 800b6ea:	d86b      	bhi.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b6ec:	a201      	add	r2, pc, #4	; (adr r2, 800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f2:	bf00      	nop
 800b6f4:	0800b7cd 	.word	0x0800b7cd
 800b6f8:	0800b7c5 	.word	0x0800b7c5
 800b6fc:	0800b7c5 	.word	0x0800b7c5
 800b700:	0800b7c5 	.word	0x0800b7c5
 800b704:	0800b7c5 	.word	0x0800b7c5
 800b708:	0800b7c5 	.word	0x0800b7c5
 800b70c:	0800b7c5 	.word	0x0800b7c5
 800b710:	0800b7c5 	.word	0x0800b7c5
 800b714:	0800b799 	.word	0x0800b799
 800b718:	0800b7c5 	.word	0x0800b7c5
 800b71c:	0800b7c5 	.word	0x0800b7c5
 800b720:	0800b7c5 	.word	0x0800b7c5
 800b724:	0800b7c5 	.word	0x0800b7c5
 800b728:	0800b7c5 	.word	0x0800b7c5
 800b72c:	0800b7c5 	.word	0x0800b7c5
 800b730:	0800b7c5 	.word	0x0800b7c5
 800b734:	0800b7af 	.word	0x0800b7af
 800b738:	0800b7c5 	.word	0x0800b7c5
 800b73c:	0800b7c5 	.word	0x0800b7c5
 800b740:	0800b7c5 	.word	0x0800b7c5
 800b744:	0800b7c5 	.word	0x0800b7c5
 800b748:	0800b7c5 	.word	0x0800b7c5
 800b74c:	0800b7c5 	.word	0x0800b7c5
 800b750:	0800b7c5 	.word	0x0800b7c5
 800b754:	0800b7cd 	.word	0x0800b7cd
 800b758:	0800b7c5 	.word	0x0800b7c5
 800b75c:	0800b7c5 	.word	0x0800b7c5
 800b760:	0800b7c5 	.word	0x0800b7c5
 800b764:	0800b7c5 	.word	0x0800b7c5
 800b768:	0800b7c5 	.word	0x0800b7c5
 800b76c:	0800b7c5 	.word	0x0800b7c5
 800b770:	0800b7c5 	.word	0x0800b7c5
 800b774:	0800b7cd 	.word	0x0800b7cd
 800b778:	0800b7c5 	.word	0x0800b7c5
 800b77c:	0800b7c5 	.word	0x0800b7c5
 800b780:	0800b7c5 	.word	0x0800b7c5
 800b784:	0800b7c5 	.word	0x0800b7c5
 800b788:	0800b7c5 	.word	0x0800b7c5
 800b78c:	0800b7c5 	.word	0x0800b7c5
 800b790:	0800b7c5 	.word	0x0800b7c5
 800b794:	0800b7cd 	.word	0x0800b7cd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b79c:	3308      	adds	r3, #8
 800b79e:	2101      	movs	r1, #1
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f001 fe95 	bl	800d4d0 <RCCEx_PLL2_Config>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b7ac:	e00f      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7b2:	3328      	adds	r3, #40	; 0x28
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f001 ff3c 	bl	800d634 <RCCEx_PLL3_Config>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b7c2:	e004      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7ca:	e000      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b7cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10a      	bne.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b7d6:	4bbf      	ldr	r3, [pc, #764]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7da:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7e4:	4abb      	ldr	r2, [pc, #748]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7e6:	430b      	orrs	r3, r1
 800b7e8:	6553      	str	r3, [r2, #84]	; 0x54
 800b7ea:	e003      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	f002 0302 	and.w	r3, r2, #2
 800b800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b804:	2300      	movs	r3, #0
 800b806:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b80a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b80e:	460b      	mov	r3, r1
 800b810:	4313      	orrs	r3, r2
 800b812:	d041      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b81a:	2b05      	cmp	r3, #5
 800b81c:	d824      	bhi.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b81e:	a201      	add	r2, pc, #4	; (adr r2, 800b824 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b824:	0800b871 	.word	0x0800b871
 800b828:	0800b83d 	.word	0x0800b83d
 800b82c:	0800b853 	.word	0x0800b853
 800b830:	0800b871 	.word	0x0800b871
 800b834:	0800b871 	.word	0x0800b871
 800b838:	0800b871 	.word	0x0800b871
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b840:	3308      	adds	r3, #8
 800b842:	2101      	movs	r1, #1
 800b844:	4618      	mov	r0, r3
 800b846:	f001 fe43 	bl	800d4d0 <RCCEx_PLL2_Config>
 800b84a:	4603      	mov	r3, r0
 800b84c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b850:	e00f      	b.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b856:	3328      	adds	r3, #40	; 0x28
 800b858:	2101      	movs	r1, #1
 800b85a:	4618      	mov	r0, r3
 800b85c:	f001 feea 	bl	800d634 <RCCEx_PLL3_Config>
 800b860:	4603      	mov	r3, r0
 800b862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b866:	e004      	b.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b86e:	e000      	b.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b870:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10a      	bne.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b87a:	4b96      	ldr	r3, [pc, #600]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b87e:	f023 0107 	bic.w	r1, r3, #7
 800b882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b886:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b888:	4a92      	ldr	r2, [pc, #584]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b88a:	430b      	orrs	r3, r1
 800b88c:	6553      	str	r3, [r2, #84]	; 0x54
 800b88e:	e003      	b.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b890:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b894:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a0:	f002 0304 	and.w	r3, r2, #4
 800b8a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	d044      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8c0:	2b05      	cmp	r3, #5
 800b8c2:	d825      	bhi.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b8c4:	a201      	add	r2, pc, #4	; (adr r2, 800b8cc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ca:	bf00      	nop
 800b8cc:	0800b919 	.word	0x0800b919
 800b8d0:	0800b8e5 	.word	0x0800b8e5
 800b8d4:	0800b8fb 	.word	0x0800b8fb
 800b8d8:	0800b919 	.word	0x0800b919
 800b8dc:	0800b919 	.word	0x0800b919
 800b8e0:	0800b919 	.word	0x0800b919
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	2101      	movs	r1, #1
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 fdef 	bl	800d4d0 <RCCEx_PLL2_Config>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b8f8:	e00f      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8fe:	3328      	adds	r3, #40	; 0x28
 800b900:	2101      	movs	r1, #1
 800b902:	4618      	mov	r0, r3
 800b904:	f001 fe96 	bl	800d634 <RCCEx_PLL3_Config>
 800b908:	4603      	mov	r3, r0
 800b90a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b90e:	e004      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b916:	e000      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b91a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10b      	bne.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b922:	4b6c      	ldr	r3, [pc, #432]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b926:	f023 0107 	bic.w	r1, r3, #7
 800b92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b92e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b932:	4a68      	ldr	r2, [pc, #416]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b934:	430b      	orrs	r3, r1
 800b936:	6593      	str	r3, [r2, #88]	; 0x58
 800b938:	e003      	b.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b93e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94a:	f002 0320 	and.w	r3, r2, #32
 800b94e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b952:	2300      	movs	r3, #0
 800b954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b958:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b95c:	460b      	mov	r3, r1
 800b95e:	4313      	orrs	r3, r2
 800b960:	d055      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b96a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b96e:	d033      	beq.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b974:	d82c      	bhi.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b97a:	d02f      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b97c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b980:	d826      	bhi.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b986:	d02b      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b988:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b98c:	d820      	bhi.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b98e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b992:	d012      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b998:	d81a      	bhi.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d022      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b99e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9a2:	d115      	bne.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a8:	3308      	adds	r3, #8
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f001 fd8f 	bl	800d4d0 <RCCEx_PLL2_Config>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b9b8:	e015      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9be:	3328      	adds	r3, #40	; 0x28
 800b9c0:	2102      	movs	r1, #2
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f001 fe36 	bl	800d634 <RCCEx_PLL3_Config>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b9ce:	e00a      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9d6:	e006      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b9d8:	bf00      	nop
 800b9da:	e004      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b9dc:	bf00      	nop
 800b9de:	e002      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b9e0:	bf00      	nop
 800b9e2:	e000      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b9e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10b      	bne.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b9ee:	4b39      	ldr	r3, [pc, #228]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9fe:	4a35      	ldr	r2, [pc, #212]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba00:	430b      	orrs	r3, r1
 800ba02:	6553      	str	r3, [r2, #84]	; 0x54
 800ba04:	e003      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ba0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800ba1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ba24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800ba28:	460b      	mov	r3, r1
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	d058      	beq.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ba2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ba3a:	d033      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ba3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ba40:	d82c      	bhi.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ba42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba46:	d02f      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ba48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba4c:	d826      	bhi.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ba4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba52:	d02b      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800ba54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba58:	d820      	bhi.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ba5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba5e:	d012      	beq.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ba60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba64:	d81a      	bhi.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d022      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ba6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba6e:	d115      	bne.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba74:	3308      	adds	r3, #8
 800ba76:	2100      	movs	r1, #0
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f001 fd29 	bl	800d4d0 <RCCEx_PLL2_Config>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ba84:	e015      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba8a:	3328      	adds	r3, #40	; 0x28
 800ba8c:	2102      	movs	r1, #2
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f001 fdd0 	bl	800d634 <RCCEx_PLL3_Config>
 800ba94:	4603      	mov	r3, r0
 800ba96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ba9a:	e00a      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baa2:	e006      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800baa4:	bf00      	nop
 800baa6:	e004      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800baa8:	bf00      	nop
 800baaa:	e002      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800baac:	bf00      	nop
 800baae:	e000      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10e      	bne.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800baba:	4b06      	ldr	r3, [pc, #24]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800babc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800babe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800baca:	4a02      	ldr	r2, [pc, #8]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bacc:	430b      	orrs	r3, r1
 800bace:	6593      	str	r3, [r2, #88]	; 0x58
 800bad0:	e006      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bad2:	bf00      	nop
 800bad4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800badc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800baec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800baf0:	2300      	movs	r3, #0
 800baf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800baf6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bafa:	460b      	mov	r3, r1
 800bafc:	4313      	orrs	r3, r2
 800bafe:	d055      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bb00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bb0c:	d033      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bb0e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bb12:	d82c      	bhi.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bb14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb18:	d02f      	beq.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bb1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb1e:	d826      	bhi.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bb20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bb24:	d02b      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bb26:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bb2a:	d820      	bhi.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bb2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb30:	d012      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bb32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb36:	d81a      	bhi.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d022      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bb3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb40:	d115      	bne.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb46:	3308      	adds	r3, #8
 800bb48:	2100      	movs	r1, #0
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f001 fcc0 	bl	800d4d0 <RCCEx_PLL2_Config>
 800bb50:	4603      	mov	r3, r0
 800bb52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bb56:	e015      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5c:	3328      	adds	r3, #40	; 0x28
 800bb5e:	2102      	movs	r1, #2
 800bb60:	4618      	mov	r0, r3
 800bb62:	f001 fd67 	bl	800d634 <RCCEx_PLL3_Config>
 800bb66:	4603      	mov	r3, r0
 800bb68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bb6c:	e00a      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb74:	e006      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bb76:	bf00      	nop
 800bb78:	e004      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bb7a:	bf00      	nop
 800bb7c:	e002      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bb7e:	bf00      	nop
 800bb80:	e000      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bb82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10b      	bne.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bb8c:	4ba1      	ldr	r3, [pc, #644]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb90:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bb94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb9c:	4a9d      	ldr	r2, [pc, #628]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb9e:	430b      	orrs	r3, r1
 800bba0:	6593      	str	r3, [r2, #88]	; 0x58
 800bba2:	e003      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bba8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bbac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb4:	f002 0308 	and.w	r3, r2, #8
 800bbb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bbc2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	d01e      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bbcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbd8:	d10c      	bne.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bbda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbde:	3328      	adds	r3, #40	; 0x28
 800bbe0:	2102      	movs	r1, #2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f001 fd26 	bl	800d634 <RCCEx_PLL3_Config>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d002      	beq.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bbf4:	4b87      	ldr	r3, [pc, #540]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc04:	4a83      	ldr	r2, [pc, #524]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc06:	430b      	orrs	r3, r1
 800bc08:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	f002 0310 	and.w	r3, r2, #16
 800bc16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bc20:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bc24:	460b      	mov	r3, r1
 800bc26:	4313      	orrs	r3, r2
 800bc28:	d01e      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc36:	d10c      	bne.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc3c:	3328      	adds	r3, #40	; 0x28
 800bc3e:	2102      	movs	r1, #2
 800bc40:	4618      	mov	r0, r3
 800bc42:	f001 fcf7 	bl	800d634 <RCCEx_PLL3_Config>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bc52:	4b70      	ldr	r3, [pc, #448]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bc5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc62:	4a6c      	ldr	r2, [pc, #432]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc64:	430b      	orrs	r3, r1
 800bc66:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bc68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bc74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc78:	2300      	movs	r3, #0
 800bc7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc7e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bc82:	460b      	mov	r3, r1
 800bc84:	4313      	orrs	r3, r2
 800bc86:	d03e      	beq.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bc88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc94:	d022      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bc96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc9a:	d81b      	bhi.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d003      	beq.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bca4:	d00b      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bca6:	e015      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcac:	3308      	adds	r3, #8
 800bcae:	2100      	movs	r1, #0
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f001 fc0d 	bl	800d4d0 <RCCEx_PLL2_Config>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bcbc:	e00f      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc2:	3328      	adds	r3, #40	; 0x28
 800bcc4:	2102      	movs	r1, #2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f001 fcb4 	bl	800d634 <RCCEx_PLL3_Config>
 800bccc:	4603      	mov	r3, r0
 800bcce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bcd2:	e004      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcda:	e000      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bcdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10b      	bne.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bce6:	4b4b      	ldr	r3, [pc, #300]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bcee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bcf6:	4a47      	ldr	r2, [pc, #284]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcf8:	430b      	orrs	r3, r1
 800bcfa:	6593      	str	r3, [r2, #88]	; 0x58
 800bcfc:	e003      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bd12:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd14:	2300      	movs	r3, #0
 800bd16:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd18:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	d03b      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bd22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd2e:	d01f      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bd30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd34:	d818      	bhi.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bd36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd3a:	d003      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bd3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd40:	d007      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bd42:	e011      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd44:	4b33      	ldr	r3, [pc, #204]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	4a32      	ldr	r2, [pc, #200]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bd50:	e00f      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd56:	3328      	adds	r3, #40	; 0x28
 800bd58:	2101      	movs	r1, #1
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f001 fc6a 	bl	800d634 <RCCEx_PLL3_Config>
 800bd60:	4603      	mov	r3, r0
 800bd62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bd66:	e004      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd6e:	e000      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bd70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10b      	bne.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd7a:	4b26      	ldr	r3, [pc, #152]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd7e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bd82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd8a:	4a22      	ldr	r2, [pc, #136]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd8c:	430b      	orrs	r3, r1
 800bd8e:	6553      	str	r3, [r2, #84]	; 0x54
 800bd90:	e003      	b.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bda6:	673b      	str	r3, [r7, #112]	; 0x70
 800bda8:	2300      	movs	r3, #0
 800bdaa:	677b      	str	r3, [r7, #116]	; 0x74
 800bdac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	d034      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bdb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d003      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bdc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdc4:	d007      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bdc6:	e011      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdc8:	4b12      	ldr	r3, [pc, #72]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdcc:	4a11      	ldr	r2, [pc, #68]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bdd4:	e00e      	b.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bdd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdda:	3308      	adds	r3, #8
 800bddc:	2102      	movs	r1, #2
 800bdde:	4618      	mov	r0, r3
 800bde0:	f001 fb76 	bl	800d4d0 <RCCEx_PLL2_Config>
 800bde4:	4603      	mov	r3, r0
 800bde6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bdea:	e003      	b.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bdec:	2301      	movs	r3, #1
 800bdee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10d      	bne.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bdfc:	4b05      	ldr	r3, [pc, #20]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be0a:	4a02      	ldr	r2, [pc, #8]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be0c:	430b      	orrs	r3, r1
 800be0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be10:	e006      	b.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800be12:	bf00      	nop
 800be14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800be20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be28:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800be2c:	66bb      	str	r3, [r7, #104]	; 0x68
 800be2e:	2300      	movs	r3, #0
 800be30:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be32:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800be36:	460b      	mov	r3, r1
 800be38:	4313      	orrs	r3, r2
 800be3a:	d00c      	beq.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be40:	3328      	adds	r3, #40	; 0x28
 800be42:	2102      	movs	r1, #2
 800be44:	4618      	mov	r0, r3
 800be46:	f001 fbf5 	bl	800d634 <RCCEx_PLL3_Config>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800be56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800be62:	663b      	str	r3, [r7, #96]	; 0x60
 800be64:	2300      	movs	r3, #0
 800be66:	667b      	str	r3, [r7, #100]	; 0x64
 800be68:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800be6c:	460b      	mov	r3, r1
 800be6e:	4313      	orrs	r3, r2
 800be70:	d038      	beq.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800be72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be7e:	d018      	beq.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800be80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be84:	d811      	bhi.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800be86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be8a:	d014      	beq.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800be8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be90:	d80b      	bhi.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d011      	beq.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800be96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be9a:	d106      	bne.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be9c:	4bc3      	ldr	r3, [pc, #780]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea0:	4ac2      	ldr	r2, [pc, #776]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bea8:	e008      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800beb0:	e004      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800beb2:	bf00      	nop
 800beb4:	e002      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800beb6:	bf00      	nop
 800beb8:	e000      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800beba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bebc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10b      	bne.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bec4:	4bb9      	ldr	r3, [pc, #740]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800becc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bed4:	4ab5      	ldr	r2, [pc, #724]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bed6:	430b      	orrs	r3, r1
 800bed8:	6553      	str	r3, [r2, #84]	; 0x54
 800beda:	e003      	b.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bedc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bee0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bef0:	65bb      	str	r3, [r7, #88]	; 0x58
 800bef2:	2300      	movs	r3, #0
 800bef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bef6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800befa:	460b      	mov	r3, r1
 800befc:	4313      	orrs	r3, r2
 800befe:	d009      	beq.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bf00:	4baa      	ldr	r3, [pc, #680]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bf08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf0e:	4aa7      	ldr	r2, [pc, #668]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf10:	430b      	orrs	r3, r1
 800bf12:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bf14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bf20:	653b      	str	r3, [r7, #80]	; 0x50
 800bf22:	2300      	movs	r3, #0
 800bf24:	657b      	str	r3, [r7, #84]	; 0x54
 800bf26:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	d00a      	beq.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bf30:	4b9e      	ldr	r3, [pc, #632]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bf38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bf40:	4a9a      	ldr	r2, [pc, #616]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf42:	430b      	orrs	r3, r1
 800bf44:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bf46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bf52:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf54:	2300      	movs	r3, #0
 800bf56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf58:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	d009      	beq.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bf62:	4b92      	ldr	r3, [pc, #584]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf66:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bf6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf70:	4a8e      	ldr	r2, [pc, #568]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf72:	430b      	orrs	r3, r1
 800bf74:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bf76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bf82:	643b      	str	r3, [r7, #64]	; 0x40
 800bf84:	2300      	movs	r3, #0
 800bf86:	647b      	str	r3, [r7, #68]	; 0x44
 800bf88:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	d00e      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bf92:	4b86      	ldr	r3, [pc, #536]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	4a85      	ldr	r2, [pc, #532]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf9c:	6113      	str	r3, [r2, #16]
 800bf9e:	4b83      	ldr	r3, [pc, #524]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfa0:	6919      	ldr	r1, [r3, #16]
 800bfa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfa6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bfaa:	4a80      	ldr	r2, [pc, #512]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfac:	430b      	orrs	r3, r1
 800bfae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bfb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bfbc:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfc2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	d009      	beq.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bfcc:	4b77      	ldr	r3, [pc, #476]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfd0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bfd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfda:	4a74      	ldr	r2, [pc, #464]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfdc:	430b      	orrs	r3, r1
 800bfde:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bfe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bfec:	633b      	str	r3, [r7, #48]	; 0x30
 800bfee:	2300      	movs	r3, #0
 800bff0:	637b      	str	r3, [r7, #52]	; 0x34
 800bff2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bff6:	460b      	mov	r3, r1
 800bff8:	4313      	orrs	r3, r2
 800bffa:	d00a      	beq.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bffc:	4b6b      	ldr	r3, [pc, #428]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c000:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c00c:	4a67      	ldr	r2, [pc, #412]	; (800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c00e:	430b      	orrs	r3, r1
 800c010:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01a:	2100      	movs	r1, #0
 800c01c:	62b9      	str	r1, [r7, #40]	; 0x28
 800c01e:	f003 0301 	and.w	r3, r3, #1
 800c022:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c024:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c028:	460b      	mov	r3, r1
 800c02a:	4313      	orrs	r3, r2
 800c02c:	d011      	beq.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c032:	3308      	adds	r3, #8
 800c034:	2100      	movs	r1, #0
 800c036:	4618      	mov	r0, r3
 800c038:	f001 fa4a 	bl	800d4d0 <RCCEx_PLL2_Config>
 800c03c:	4603      	mov	r3, r0
 800c03e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c046:	2b00      	cmp	r3, #0
 800c048:	d003      	beq.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c04a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c04e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	2100      	movs	r1, #0
 800c05c:	6239      	str	r1, [r7, #32]
 800c05e:	f003 0302 	and.w	r3, r3, #2
 800c062:	627b      	str	r3, [r7, #36]	; 0x24
 800c064:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c068:	460b      	mov	r3, r1
 800c06a:	4313      	orrs	r3, r2
 800c06c:	d011      	beq.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c072:	3308      	adds	r3, #8
 800c074:	2101      	movs	r1, #1
 800c076:	4618      	mov	r0, r3
 800c078:	f001 fa2a 	bl	800d4d0 <RCCEx_PLL2_Config>
 800c07c:	4603      	mov	r3, r0
 800c07e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c086:	2b00      	cmp	r3, #0
 800c088:	d003      	beq.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c08a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c08e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	2100      	movs	r1, #0
 800c09c:	61b9      	str	r1, [r7, #24]
 800c09e:	f003 0304 	and.w	r3, r3, #4
 800c0a2:	61fb      	str	r3, [r7, #28]
 800c0a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	d011      	beq.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b2:	3308      	adds	r3, #8
 800c0b4:	2102      	movs	r1, #2
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f001 fa0a 	bl	800d4d0 <RCCEx_PLL2_Config>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d003      	beq.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0da:	2100      	movs	r1, #0
 800c0dc:	6139      	str	r1, [r7, #16]
 800c0de:	f003 0308 	and.w	r3, r3, #8
 800c0e2:	617b      	str	r3, [r7, #20]
 800c0e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	d011      	beq.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0f2:	3328      	adds	r3, #40	; 0x28
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f001 fa9c 	bl	800d634 <RCCEx_PLL3_Config>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c106:	2b00      	cmp	r3, #0
 800c108:	d003      	beq.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c10a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c10e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11a:	2100      	movs	r1, #0
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	f003 0310 	and.w	r3, r3, #16
 800c122:	60fb      	str	r3, [r7, #12]
 800c124:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c128:	460b      	mov	r3, r1
 800c12a:	4313      	orrs	r3, r2
 800c12c:	d011      	beq.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c132:	3328      	adds	r3, #40	; 0x28
 800c134:	2101      	movs	r1, #1
 800c136:	4618      	mov	r0, r3
 800c138:	f001 fa7c 	bl	800d634 <RCCEx_PLL3_Config>
 800c13c:	4603      	mov	r3, r0
 800c13e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c142:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c146:	2b00      	cmp	r3, #0
 800c148:	d003      	beq.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c14a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c14e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15a:	2100      	movs	r1, #0
 800c15c:	6039      	str	r1, [r7, #0]
 800c15e:	f003 0320 	and.w	r3, r3, #32
 800c162:	607b      	str	r3, [r7, #4]
 800c164:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c168:	460b      	mov	r3, r1
 800c16a:	4313      	orrs	r3, r2
 800c16c:	d011      	beq.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c172:	3328      	adds	r3, #40	; 0x28
 800c174:	2102      	movs	r1, #2
 800c176:	4618      	mov	r0, r3
 800c178:	f001 fa5c 	bl	800d634 <RCCEx_PLL3_Config>
 800c17c:	4603      	mov	r3, r0
 800c17e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c186:	2b00      	cmp	r3, #0
 800c188:	d003      	beq.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c18a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c18e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c192:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c196:	2b00      	cmp	r3, #0
 800c198:	d101      	bne.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c19a:	2300      	movs	r3, #0
 800c19c:	e000      	b.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1ac:	58024400 	.word	0x58024400

0800c1b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b090      	sub	sp, #64	; 0x40
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c1ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1be:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c1c2:	430b      	orrs	r3, r1
 800c1c4:	f040 8094 	bne.w	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c1c8:	4b9e      	ldr	r3, [pc, #632]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1cc:	f003 0307 	and.w	r3, r3, #7
 800c1d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d4:	2b04      	cmp	r3, #4
 800c1d6:	f200 8087 	bhi.w	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c1da:	a201      	add	r2, pc, #4	; (adr r2, 800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e0:	0800c1f5 	.word	0x0800c1f5
 800c1e4:	0800c21d 	.word	0x0800c21d
 800c1e8:	0800c245 	.word	0x0800c245
 800c1ec:	0800c2e1 	.word	0x0800c2e1
 800c1f0:	0800c26d 	.word	0x0800c26d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1f4:	4b93      	ldr	r3, [pc, #588]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c200:	d108      	bne.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c206:	4618      	mov	r0, r3
 800c208:	f001 f810 	bl	800d22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c210:	f000 bd45 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c218:	f000 bd41 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c21c:	4b89      	ldr	r3, [pc, #548]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c228:	d108      	bne.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c22a:	f107 0318 	add.w	r3, r7, #24
 800c22e:	4618      	mov	r0, r3
 800c230:	f000 fd54 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c238:	f000 bd31 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c240:	f000 bd2d 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c244:	4b7f      	ldr	r3, [pc, #508]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c24c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c250:	d108      	bne.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c252:	f107 030c 	add.w	r3, r7, #12
 800c256:	4618      	mov	r0, r3
 800c258:	f000 fe94 	bl	800cf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c260:	f000 bd1d 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c268:	f000 bd19 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c26c:	4b75      	ldr	r3, [pc, #468]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c26e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c274:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c276:	4b73      	ldr	r3, [pc, #460]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 0304 	and.w	r3, r3, #4
 800c27e:	2b04      	cmp	r3, #4
 800c280:	d10c      	bne.n	800c29c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c284:	2b00      	cmp	r3, #0
 800c286:	d109      	bne.n	800c29c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c288:	4b6e      	ldr	r3, [pc, #440]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	08db      	lsrs	r3, r3, #3
 800c28e:	f003 0303 	and.w	r3, r3, #3
 800c292:	4a6d      	ldr	r2, [pc, #436]	; (800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c294:	fa22 f303 	lsr.w	r3, r2, r3
 800c298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c29a:	e01f      	b.n	800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c29c:	4b69      	ldr	r3, [pc, #420]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2a8:	d106      	bne.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2b0:	d102      	bne.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2b2:	4b66      	ldr	r3, [pc, #408]	; (800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2b6:	e011      	b.n	800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2b8:	4b62      	ldr	r3, [pc, #392]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2c4:	d106      	bne.n	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2cc:	d102      	bne.n	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2ce:	4b60      	ldr	r3, [pc, #384]	; (800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d2:	e003      	b.n	800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2d8:	f000 bce1 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2dc:	f000 bcdf 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c2e0:	4b5c      	ldr	r3, [pc, #368]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e4:	f000 bcdb 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ec:	f000 bcd7 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c2f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2f4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c2f8:	430b      	orrs	r3, r1
 800c2fa:	f040 80ad 	bne.w	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c2fe:	4b51      	ldr	r3, [pc, #324]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c302:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c306:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c30e:	d056      	beq.n	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c316:	f200 8090 	bhi.w	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	2bc0      	cmp	r3, #192	; 0xc0
 800c31e:	f000 8088 	beq.w	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	2bc0      	cmp	r3, #192	; 0xc0
 800c326:	f200 8088 	bhi.w	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32c:	2b80      	cmp	r3, #128	; 0x80
 800c32e:	d032      	beq.n	800c396 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c332:	2b80      	cmp	r3, #128	; 0x80
 800c334:	f200 8081 	bhi.w	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d003      	beq.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c340:	2b40      	cmp	r3, #64	; 0x40
 800c342:	d014      	beq.n	800c36e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c344:	e079      	b.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c346:	4b3f      	ldr	r3, [pc, #252]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c34e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c352:	d108      	bne.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c358:	4618      	mov	r0, r3
 800c35a:	f000 ff67 	bl	800d22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c360:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c362:	f000 bc9c 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c36a:	f000 bc98 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c36e:	4b35      	ldr	r3, [pc, #212]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c37a:	d108      	bne.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c37c:	f107 0318 	add.w	r3, r7, #24
 800c380:	4618      	mov	r0, r3
 800c382:	f000 fcab 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c38a:	f000 bc88 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c392:	f000 bc84 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c396:	4b2b      	ldr	r3, [pc, #172]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c39e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3a2:	d108      	bne.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3a4:	f107 030c 	add.w	r3, r7, #12
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f000 fdeb 	bl	800cf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3b2:	f000 bc74 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ba:	f000 bc70 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3be:	4b21      	ldr	r3, [pc, #132]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3c8:	4b1e      	ldr	r3, [pc, #120]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f003 0304 	and.w	r3, r3, #4
 800c3d0:	2b04      	cmp	r3, #4
 800c3d2:	d10c      	bne.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d109      	bne.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3da:	4b1a      	ldr	r3, [pc, #104]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	08db      	lsrs	r3, r3, #3
 800c3e0:	f003 0303 	and.w	r3, r3, #3
 800c3e4:	4a18      	ldr	r2, [pc, #96]	; (800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c3e6:	fa22 f303 	lsr.w	r3, r2, r3
 800c3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ec:	e01f      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3ee:	4b15      	ldr	r3, [pc, #84]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3fa:	d106      	bne.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c402:	d102      	bne.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c404:	4b11      	ldr	r3, [pc, #68]	; (800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c408:	e011      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c40a:	4b0e      	ldr	r3, [pc, #56]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c412:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c416:	d106      	bne.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c41e:	d102      	bne.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c420:	4b0b      	ldr	r3, [pc, #44]	; (800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c424:	e003      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c42a:	f000 bc38 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c42e:	f000 bc36 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c432:	4b08      	ldr	r3, [pc, #32]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c436:	f000 bc32 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c43e:	f000 bc2e 	b.w	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c442:	bf00      	nop
 800c444:	58024400 	.word	0x58024400
 800c448:	03d09000 	.word	0x03d09000
 800c44c:	003d0900 	.word	0x003d0900
 800c450:	017d7840 	.word	0x017d7840
 800c454:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c45c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c460:	430b      	orrs	r3, r1
 800c462:	f040 809c 	bne.w	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c466:	4b9e      	ldr	r3, [pc, #632]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c46a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c46e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c476:	d054      	beq.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c47e:	f200 808b 	bhi.w	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c484:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c488:	f000 8083 	beq.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c492:	f200 8081 	bhi.w	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c49c:	d02f      	beq.n	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4a4:	d878      	bhi.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d004      	beq.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4b2:	d012      	beq.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c4b4:	e070      	b.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4b6:	4b8a      	ldr	r3, [pc, #552]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4c2:	d107      	bne.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 feaf 	bl	800d22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d2:	e3e4      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d8:	e3e1      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4da:	4b81      	ldr	r3, [pc, #516]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4e6:	d107      	bne.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4e8:	f107 0318 	add.w	r3, r7, #24
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f000 fbf5 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4f6:	e3d2      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fc:	e3cf      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4fe:	4b78      	ldr	r3, [pc, #480]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c50a:	d107      	bne.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c50c:	f107 030c 	add.w	r3, r7, #12
 800c510:	4618      	mov	r0, r3
 800c512:	f000 fd37 	bl	800cf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c51a:	e3c0      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c520:	e3bd      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c522:	4b6f      	ldr	r3, [pc, #444]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c52a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c52c:	4b6c      	ldr	r3, [pc, #432]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f003 0304 	and.w	r3, r3, #4
 800c534:	2b04      	cmp	r3, #4
 800c536:	d10c      	bne.n	800c552 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d109      	bne.n	800c552 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c53e:	4b68      	ldr	r3, [pc, #416]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	08db      	lsrs	r3, r3, #3
 800c544:	f003 0303 	and.w	r3, r3, #3
 800c548:	4a66      	ldr	r2, [pc, #408]	; (800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c54a:	fa22 f303 	lsr.w	r3, r2, r3
 800c54e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c550:	e01e      	b.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c552:	4b63      	ldr	r3, [pc, #396]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c55a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c55e:	d106      	bne.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c566:	d102      	bne.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c568:	4b5f      	ldr	r3, [pc, #380]	; (800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c56a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c56c:	e010      	b.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c56e:	4b5c      	ldr	r3, [pc, #368]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c57a:	d106      	bne.n	800c58a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c57e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c582:	d102      	bne.n	800c58a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c584:	4b59      	ldr	r3, [pc, #356]	; (800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c586:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c588:	e002      	b.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c58e:	e386      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c590:	e385      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c592:	4b57      	ldr	r3, [pc, #348]	; (800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c596:	e382      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c598:	2300      	movs	r3, #0
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c59c:	e37f      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c59e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5a2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c5a6:	430b      	orrs	r3, r1
 800c5a8:	f040 80a7 	bne.w	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c5ac:	4b4c      	ldr	r3, [pc, #304]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5b0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c5b4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c5bc:	d055      	beq.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c5c4:	f200 8096 	bhi.w	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c5ce:	f000 8084 	beq.w	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c5d8:	f200 808c 	bhi.w	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5e2:	d030      	beq.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5ea:	f200 8083 	bhi.w	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d004      	beq.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c5fa:	d012      	beq.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c5fc:	e07a      	b.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5fe:	4b38      	ldr	r3, [pc, #224]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c60a:	d107      	bne.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c60c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c610:	4618      	mov	r0, r3
 800c612:	f000 fe0b 	bl	800d22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c61a:	e340      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c61c:	2300      	movs	r3, #0
 800c61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c620:	e33d      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c622:	4b2f      	ldr	r3, [pc, #188]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c62a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c62e:	d107      	bne.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c630:	f107 0318 	add.w	r3, r7, #24
 800c634:	4618      	mov	r0, r3
 800c636:	f000 fb51 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c63e:	e32e      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c640:	2300      	movs	r3, #0
 800c642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c644:	e32b      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c646:	4b26      	ldr	r3, [pc, #152]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c64e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c652:	d107      	bne.n	800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c654:	f107 030c 	add.w	r3, r7, #12
 800c658:	4618      	mov	r0, r3
 800c65a:	f000 fc93 	bl	800cf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c662:	e31c      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c664:	2300      	movs	r3, #0
 800c666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c668:	e319      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c66a:	4b1d      	ldr	r3, [pc, #116]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c66c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c66e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c672:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c674:	4b1a      	ldr	r3, [pc, #104]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f003 0304 	and.w	r3, r3, #4
 800c67c:	2b04      	cmp	r3, #4
 800c67e:	d10c      	bne.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c682:	2b00      	cmp	r3, #0
 800c684:	d109      	bne.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c686:	4b16      	ldr	r3, [pc, #88]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	08db      	lsrs	r3, r3, #3
 800c68c:	f003 0303 	and.w	r3, r3, #3
 800c690:	4a14      	ldr	r2, [pc, #80]	; (800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c692:	fa22 f303 	lsr.w	r3, r2, r3
 800c696:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c698:	e01e      	b.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c69a:	4b11      	ldr	r3, [pc, #68]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6a6:	d106      	bne.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6ae:	d102      	bne.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6b0:	4b0d      	ldr	r3, [pc, #52]	; (800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6b4:	e010      	b.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6b6:	4b0a      	ldr	r3, [pc, #40]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6c2:	d106      	bne.n	800c6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ca:	d102      	bne.n	800c6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6cc:	4b07      	ldr	r3, [pc, #28]	; (800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6d0:	e002      	b.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c6d6:	e2e2      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6d8:	e2e1      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c6da:	4b05      	ldr	r3, [pc, #20]	; (800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6de:	e2de      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6e0:	58024400 	.word	0x58024400
 800c6e4:	03d09000 	.word	0x03d09000
 800c6e8:	003d0900 	.word	0x003d0900
 800c6ec:	017d7840 	.word	0x017d7840
 800c6f0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f8:	e2d1      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c6fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6fe:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c702:	430b      	orrs	r3, r1
 800c704:	f040 809c 	bne.w	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c708:	4b93      	ldr	r3, [pc, #588]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c70a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c70c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c710:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c718:	d054      	beq.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c720:	f200 808b 	bhi.w	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c726:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c72a:	f000 8083 	beq.w	800c834 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c730:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c734:	f200 8081 	bhi.w	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c73e:	d02f      	beq.n	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c746:	d878      	bhi.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d004      	beq.n	800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c754:	d012      	beq.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c756:	e070      	b.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c758:	4b7f      	ldr	r3, [pc, #508]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c764:	d107      	bne.n	800c776 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c76a:	4618      	mov	r0, r3
 800c76c:	f000 fd5e 	bl	800d22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c774:	e293      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c77a:	e290      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c77c:	4b76      	ldr	r3, [pc, #472]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c788:	d107      	bne.n	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c78a:	f107 0318 	add.w	r3, r7, #24
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 faa4 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c798:	e281      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c79e:	e27e      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7a0:	4b6d      	ldr	r3, [pc, #436]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ac:	d107      	bne.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7ae:	f107 030c 	add.w	r3, r7, #12
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 fbe6 	bl	800cf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7bc:	e26f      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7c2:	e26c      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c7c4:	4b64      	ldr	r3, [pc, #400]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7cc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7ce:	4b62      	ldr	r3, [pc, #392]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f003 0304 	and.w	r3, r3, #4
 800c7d6:	2b04      	cmp	r3, #4
 800c7d8:	d10c      	bne.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d109      	bne.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7e0:	4b5d      	ldr	r3, [pc, #372]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	08db      	lsrs	r3, r3, #3
 800c7e6:	f003 0303 	and.w	r3, r3, #3
 800c7ea:	4a5c      	ldr	r2, [pc, #368]	; (800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c7ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7f2:	e01e      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c7f4:	4b58      	ldr	r3, [pc, #352]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c800:	d106      	bne.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c808:	d102      	bne.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c80a:	4b55      	ldr	r3, [pc, #340]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c80c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c80e:	e010      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c810:	4b51      	ldr	r3, [pc, #324]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c81c:	d106      	bne.n	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c824:	d102      	bne.n	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c826:	4b4f      	ldr	r3, [pc, #316]	; (800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c82a:	e002      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c82c:	2300      	movs	r3, #0
 800c82e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c830:	e235      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c832:	e234      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c834:	4b4c      	ldr	r3, [pc, #304]	; (800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c838:	e231      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83e:	e22e      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c840:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c844:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c848:	430b      	orrs	r3, r1
 800c84a:	f040 808f 	bne.w	800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c84e:	4b42      	ldr	r3, [pc, #264]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c852:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c856:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c85e:	d06b      	beq.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c862:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c866:	d874      	bhi.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c86e:	d056      	beq.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c872:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c876:	d86c      	bhi.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c87e:	d03b      	beq.n	800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c882:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c886:	d864      	bhi.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c88e:	d021      	beq.n	800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c896:	d85c      	bhi.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d004      	beq.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8a4:	d004      	beq.n	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c8a6:	e054      	b.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c8a8:	f7fe fa0a 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800c8ac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c8ae:	e1f6      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8b0:	4b29      	ldr	r3, [pc, #164]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8bc:	d107      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8be:	f107 0318 	add.w	r3, r7, #24
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 fa0a 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8cc:	e1e7      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d2:	e1e4      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8d4:	4b20      	ldr	r3, [pc, #128]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8e0:	d107      	bne.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8e2:	f107 030c 	add.w	r3, r7, #12
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 fb4c 	bl	800cf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8f0:	e1d5      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f6:	e1d2      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8f8:	4b17      	ldr	r3, [pc, #92]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 0304 	and.w	r3, r3, #4
 800c900:	2b04      	cmp	r3, #4
 800c902:	d109      	bne.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c904:	4b14      	ldr	r3, [pc, #80]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	08db      	lsrs	r3, r3, #3
 800c90a:	f003 0303 	and.w	r3, r3, #3
 800c90e:	4a13      	ldr	r2, [pc, #76]	; (800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c910:	fa22 f303 	lsr.w	r3, r2, r3
 800c914:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c916:	e1c2      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c918:	2300      	movs	r3, #0
 800c91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c91c:	e1bf      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c91e:	4b0e      	ldr	r3, [pc, #56]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c92a:	d102      	bne.n	800c932 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c92c:	4b0c      	ldr	r3, [pc, #48]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c930:	e1b5      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c936:	e1b2      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c938:	4b07      	ldr	r3, [pc, #28]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c944:	d102      	bne.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c946:	4b07      	ldr	r3, [pc, #28]	; (800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c948:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c94a:	e1a8      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c94c:	2300      	movs	r3, #0
 800c94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c950:	e1a5      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c956:	e1a2      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c958:	58024400 	.word	0x58024400
 800c95c:	03d09000 	.word	0x03d09000
 800c960:	003d0900 	.word	0x003d0900
 800c964:	017d7840 	.word	0x017d7840
 800c968:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c96c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c970:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c974:	430b      	orrs	r3, r1
 800c976:	d173      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c978:	4b9c      	ldr	r3, [pc, #624]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c97a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c97c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c980:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c988:	d02f      	beq.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c990:	d863      	bhi.n	800ca5a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c994:	2b00      	cmp	r3, #0
 800c996:	d004      	beq.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c99e:	d012      	beq.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c9a0:	e05b      	b.n	800ca5a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9a2:	4b92      	ldr	r3, [pc, #584]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9ae:	d107      	bne.n	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9b0:	f107 0318 	add.w	r3, r7, #24
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f000 f991 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9be:	e16e      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c4:	e16b      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9c6:	4b89      	ldr	r3, [pc, #548]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9d2:	d107      	bne.n	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9d4:	f107 030c 	add.w	r3, r7, #12
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f000 fad3 	bl	800cf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9e2:	e15c      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e8:	e159      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9ea:	4b80      	ldr	r3, [pc, #512]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9f4:	4b7d      	ldr	r3, [pc, #500]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f003 0304 	and.w	r3, r3, #4
 800c9fc:	2b04      	cmp	r3, #4
 800c9fe:	d10c      	bne.n	800ca1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ca00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d109      	bne.n	800ca1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca06:	4b79      	ldr	r3, [pc, #484]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	08db      	lsrs	r3, r3, #3
 800ca0c:	f003 0303 	and.w	r3, r3, #3
 800ca10:	4a77      	ldr	r2, [pc, #476]	; (800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ca12:	fa22 f303 	lsr.w	r3, r2, r3
 800ca16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca18:	e01e      	b.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca1a:	4b74      	ldr	r3, [pc, #464]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca26:	d106      	bne.n	800ca36 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ca28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca2e:	d102      	bne.n	800ca36 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca30:	4b70      	ldr	r3, [pc, #448]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ca32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca34:	e010      	b.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca36:	4b6d      	ldr	r3, [pc, #436]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca42:	d106      	bne.n	800ca52 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ca44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca4a:	d102      	bne.n	800ca52 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca4c:	4b6a      	ldr	r3, [pc, #424]	; (800cbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ca4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca50:	e002      	b.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca52:	2300      	movs	r3, #0
 800ca54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca56:	e122      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca58:	e121      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca5e:	e11e      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ca60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca64:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ca68:	430b      	orrs	r3, r1
 800ca6a:	d133      	bne.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ca6c:	4b5f      	ldr	r3, [pc, #380]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca74:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d004      	beq.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca82:	d012      	beq.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ca84:	e023      	b.n	800cace <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca86:	4b59      	ldr	r3, [pc, #356]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca92:	d107      	bne.n	800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f000 fbc7 	bl	800d22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caa2:	e0fc      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caa4:	2300      	movs	r3, #0
 800caa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caa8:	e0f9      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800caaa:	4b50      	ldr	r3, [pc, #320]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cab6:	d107      	bne.n	800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cab8:	f107 0318 	add.w	r3, r7, #24
 800cabc:	4618      	mov	r0, r3
 800cabe:	f000 f90d 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cac2:	6a3b      	ldr	r3, [r7, #32]
 800cac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cac6:	e0ea      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cac8:	2300      	movs	r3, #0
 800caca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cacc:	e0e7      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad2:	e0e4      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cad8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cadc:	430b      	orrs	r3, r1
 800cade:	f040 808d 	bne.w	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cae2:	4b42      	ldr	r3, [pc, #264]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cae6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800caea:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800caec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800caf2:	d06b      	beq.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800caf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cafa:	d874      	bhi.n	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb02:	d056      	beq.n	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb0a:	d86c      	bhi.n	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb12:	d03b      	beq.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb1a:	d864      	bhi.n	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb22:	d021      	beq.n	800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb2a:	d85c      	bhi.n	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d004      	beq.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb38:	d004      	beq.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cb3a:	e054      	b.n	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cb3c:	f000 f8b8 	bl	800ccb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800cb40:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb42:	e0ac      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb44:	4b29      	ldr	r3, [pc, #164]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb50:	d107      	bne.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb52:	f107 0318 	add.w	r3, r7, #24
 800cb56:	4618      	mov	r0, r3
 800cb58:	f000 f8c0 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb60:	e09d      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb66:	e09a      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb68:	4b20      	ldr	r3, [pc, #128]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb74:	d107      	bne.n	800cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb76:	f107 030c 	add.w	r3, r7, #12
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f000 fa02 	bl	800cf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb84:	e08b      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb8a:	e088      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb8c:	4b17      	ldr	r3, [pc, #92]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f003 0304 	and.w	r3, r3, #4
 800cb94:	2b04      	cmp	r3, #4
 800cb96:	d109      	bne.n	800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb98:	4b14      	ldr	r3, [pc, #80]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	08db      	lsrs	r3, r3, #3
 800cb9e:	f003 0303 	and.w	r3, r3, #3
 800cba2:	4a13      	ldr	r2, [pc, #76]	; (800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cba4:	fa22 f303 	lsr.w	r3, r2, r3
 800cba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbaa:	e078      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbac:	2300      	movs	r3, #0
 800cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbb0:	e075      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cbb2:	4b0e      	ldr	r3, [pc, #56]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbbe:	d102      	bne.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cbc0:	4b0c      	ldr	r3, [pc, #48]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbc4:	e06b      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbca:	e068      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cbcc:	4b07      	ldr	r3, [pc, #28]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbd8:	d102      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cbda:	4b07      	ldr	r3, [pc, #28]	; (800cbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbde:	e05e      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe4:	e05b      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbea:	e058      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cbec:	58024400 	.word	0x58024400
 800cbf0:	03d09000 	.word	0x03d09000
 800cbf4:	003d0900 	.word	0x003d0900
 800cbf8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cbfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc00:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cc04:	430b      	orrs	r3, r1
 800cc06:	d148      	bne.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cc08:	4b27      	ldr	r3, [pc, #156]	; (800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cc0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc10:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc18:	d02a      	beq.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc20:	d838      	bhi.n	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d004      	beq.n	800cc32 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc2e:	d00d      	beq.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cc30:	e030      	b.n	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc32:	4b1d      	ldr	r3, [pc, #116]	; (800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc3e:	d102      	bne.n	800cc46 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cc40:	4b1a      	ldr	r3, [pc, #104]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cc42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc44:	e02b      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc46:	2300      	movs	r3, #0
 800cc48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc4a:	e028      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc4c:	4b16      	ldr	r3, [pc, #88]	; (800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc58:	d107      	bne.n	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f000 fae4 	bl	800d22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc68:	e019      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc6e:	e016      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc70:	4b0d      	ldr	r3, [pc, #52]	; (800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc7c:	d107      	bne.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc7e:	f107 0318 	add.w	r3, r7, #24
 800cc82:	4618      	mov	r0, r3
 800cc84:	f000 f82a 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc8c:	e007      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc92:	e004      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cc94:	2300      	movs	r3, #0
 800cc96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc98:	e001      	b.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cc9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3740      	adds	r7, #64	; 0x40
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	58024400 	.word	0x58024400
 800ccac:	017d7840 	.word	0x017d7840

0800ccb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ccb4:	f7fd ffd4 	bl	800ac60 <HAL_RCC_GetHCLKFreq>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	4b06      	ldr	r3, [pc, #24]	; (800ccd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ccbc:	6a1b      	ldr	r3, [r3, #32]
 800ccbe:	091b      	lsrs	r3, r3, #4
 800ccc0:	f003 0307 	and.w	r3, r3, #7
 800ccc4:	4904      	ldr	r1, [pc, #16]	; (800ccd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ccc6:	5ccb      	ldrb	r3, [r1, r3]
 800ccc8:	f003 031f 	and.w	r3, r3, #31
 800cccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	58024400 	.word	0x58024400
 800ccd8:	08017680 	.word	0x08017680

0800ccdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b089      	sub	sp, #36	; 0x24
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cce4:	4ba1      	ldr	r3, [pc, #644]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce8:	f003 0303 	and.w	r3, r3, #3
 800ccec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ccee:	4b9f      	ldr	r3, [pc, #636]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf2:	0b1b      	lsrs	r3, r3, #12
 800ccf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ccfa:	4b9c      	ldr	r3, [pc, #624]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfe:	091b      	lsrs	r3, r3, #4
 800cd00:	f003 0301 	and.w	r3, r3, #1
 800cd04:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cd06:	4b99      	ldr	r3, [pc, #612]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd0a:	08db      	lsrs	r3, r3, #3
 800cd0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd10:	693a      	ldr	r2, [r7, #16]
 800cd12:	fb02 f303 	mul.w	r3, r2, r3
 800cd16:	ee07 3a90 	vmov	s15, r3
 800cd1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 8111 	beq.w	800cf4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	f000 8083 	beq.w	800ce38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	2b02      	cmp	r3, #2
 800cd36:	f200 80a1 	bhi.w	800ce7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d003      	beq.n	800cd48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d056      	beq.n	800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cd46:	e099      	b.n	800ce7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd48:	4b88      	ldr	r3, [pc, #544]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f003 0320 	and.w	r3, r3, #32
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d02d      	beq.n	800cdb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd54:	4b85      	ldr	r3, [pc, #532]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	08db      	lsrs	r3, r3, #3
 800cd5a:	f003 0303 	and.w	r3, r3, #3
 800cd5e:	4a84      	ldr	r2, [pc, #528]	; (800cf70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cd60:	fa22 f303 	lsr.w	r3, r2, r3
 800cd64:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	ee07 3a90 	vmov	s15, r3
 800cd6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	ee07 3a90 	vmov	s15, r3
 800cd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd7e:	4b7b      	ldr	r3, [pc, #492]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd86:	ee07 3a90 	vmov	s15, r3
 800cd8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd92:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cf74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdaa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cdae:	e087      	b.n	800cec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	ee07 3a90 	vmov	s15, r3
 800cdb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cf78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cdbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdc2:	4b6a      	ldr	r3, [pc, #424]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdca:	ee07 3a90 	vmov	s15, r3
 800cdce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cf74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cdda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cde2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cde6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdf2:	e065      	b.n	800cec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	ee07 3a90 	vmov	s15, r3
 800cdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cf7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ce02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce06:	4b59      	ldr	r3, [pc, #356]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce0e:	ee07 3a90 	vmov	s15, r3
 800ce12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cf74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce36:	e043      	b.n	800cec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	ee07 3a90 	vmov	s15, r3
 800ce3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cf80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ce46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce4a:	4b48      	ldr	r3, [pc, #288]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce52:	ee07 3a90 	vmov	s15, r3
 800ce56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cf74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce7a:	e021      	b.n	800cec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	ee07 3a90 	vmov	s15, r3
 800ce82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cf7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ce8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce8e:	4b37      	ldr	r3, [pc, #220]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce96:	ee07 3a90 	vmov	s15, r3
 800ce9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cea2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cf74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cebe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cec0:	4b2a      	ldr	r3, [pc, #168]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec4:	0a5b      	lsrs	r3, r3, #9
 800cec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceca:	ee07 3a90 	vmov	s15, r3
 800cece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ced2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ced6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ceda:	edd7 6a07 	vldr	s13, [r7, #28]
 800cede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cee6:	ee17 2a90 	vmov	r2, s15
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ceee:	4b1f      	ldr	r3, [pc, #124]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef2:	0c1b      	lsrs	r3, r3, #16
 800cef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cef8:	ee07 3a90 	vmov	s15, r3
 800cefc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf08:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf14:	ee17 2a90 	vmov	r2, s15
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cf1c:	4b13      	ldr	r3, [pc, #76]	; (800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf20:	0e1b      	lsrs	r3, r3, #24
 800cf22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf26:	ee07 3a90 	vmov	s15, r3
 800cf2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf36:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf42:	ee17 2a90 	vmov	r2, s15
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cf4a:	e008      	b.n	800cf5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	609a      	str	r2, [r3, #8]
}
 800cf5e:	bf00      	nop
 800cf60:	3724      	adds	r7, #36	; 0x24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	58024400 	.word	0x58024400
 800cf70:	03d09000 	.word	0x03d09000
 800cf74:	46000000 	.word	0x46000000
 800cf78:	4c742400 	.word	0x4c742400
 800cf7c:	4a742400 	.word	0x4a742400
 800cf80:	4bbebc20 	.word	0x4bbebc20

0800cf84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b089      	sub	sp, #36	; 0x24
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf8c:	4ba1      	ldr	r3, [pc, #644]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf90:	f003 0303 	and.w	r3, r3, #3
 800cf94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cf96:	4b9f      	ldr	r3, [pc, #636]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf9a:	0d1b      	lsrs	r3, r3, #20
 800cf9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfa0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cfa2:	4b9c      	ldr	r3, [pc, #624]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa6:	0a1b      	lsrs	r3, r3, #8
 800cfa8:	f003 0301 	and.w	r3, r3, #1
 800cfac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cfae:	4b99      	ldr	r3, [pc, #612]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfb2:	08db      	lsrs	r3, r3, #3
 800cfb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cfb8:	693a      	ldr	r2, [r7, #16]
 800cfba:	fb02 f303 	mul.w	r3, r2, r3
 800cfbe:	ee07 3a90 	vmov	s15, r3
 800cfc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	f000 8111 	beq.w	800d1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	2b02      	cmp	r3, #2
 800cfd6:	f000 8083 	beq.w	800d0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	2b02      	cmp	r3, #2
 800cfde:	f200 80a1 	bhi.w	800d124 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d003      	beq.n	800cff0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d056      	beq.n	800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cfee:	e099      	b.n	800d124 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cff0:	4b88      	ldr	r3, [pc, #544]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f003 0320 	and.w	r3, r3, #32
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d02d      	beq.n	800d058 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cffc:	4b85      	ldr	r3, [pc, #532]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	08db      	lsrs	r3, r3, #3
 800d002:	f003 0303 	and.w	r3, r3, #3
 800d006:	4a84      	ldr	r2, [pc, #528]	; (800d218 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d008:	fa22 f303 	lsr.w	r3, r2, r3
 800d00c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	ee07 3a90 	vmov	s15, r3
 800d014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	ee07 3a90 	vmov	s15, r3
 800d01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d026:	4b7b      	ldr	r3, [pc, #492]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d02e:	ee07 3a90 	vmov	s15, r3
 800d032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d036:	ed97 6a03 	vldr	s12, [r7, #12]
 800d03a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d052:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d056:	e087      	b.n	800d168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	ee07 3a90 	vmov	s15, r3
 800d05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d062:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d220 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d06a:	4b6a      	ldr	r3, [pc, #424]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d072:	ee07 3a90 	vmov	s15, r3
 800d076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d07a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d07e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d08a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d09a:	e065      	b.n	800d168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	ee07 3a90 	vmov	s15, r3
 800d0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ae:	4b59      	ldr	r3, [pc, #356]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0b6:	ee07 3a90 	vmov	s15, r3
 800d0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0de:	e043      	b.n	800d168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	ee07 3a90 	vmov	s15, r3
 800d0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0f2:	4b48      	ldr	r3, [pc, #288]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0fa:	ee07 3a90 	vmov	s15, r3
 800d0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d102:	ed97 6a03 	vldr	s12, [r7, #12]
 800d106:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d11e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d122:	e021      	b.n	800d168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	ee07 3a90 	vmov	s15, r3
 800d12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d12e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d136:	4b37      	ldr	r3, [pc, #220]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d13e:	ee07 3a90 	vmov	s15, r3
 800d142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d146:	ed97 6a03 	vldr	s12, [r7, #12]
 800d14a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d166:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d168:	4b2a      	ldr	r3, [pc, #168]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d16c:	0a5b      	lsrs	r3, r3, #9
 800d16e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d172:	ee07 3a90 	vmov	s15, r3
 800d176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d17a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d17e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d182:	edd7 6a07 	vldr	s13, [r7, #28]
 800d186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d18a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d18e:	ee17 2a90 	vmov	r2, s15
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d196:	4b1f      	ldr	r3, [pc, #124]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d19a:	0c1b      	lsrs	r3, r3, #16
 800d19c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1a0:	ee07 3a90 	vmov	s15, r3
 800d1a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1bc:	ee17 2a90 	vmov	r2, s15
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d1c4:	4b13      	ldr	r3, [pc, #76]	; (800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1c8:	0e1b      	lsrs	r3, r3, #24
 800d1ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ce:	ee07 3a90 	vmov	s15, r3
 800d1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1de:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1ea:	ee17 2a90 	vmov	r2, s15
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d1f2:	e008      	b.n	800d206 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	609a      	str	r2, [r3, #8]
}
 800d206:	bf00      	nop
 800d208:	3724      	adds	r7, #36	; 0x24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop
 800d214:	58024400 	.word	0x58024400
 800d218:	03d09000 	.word	0x03d09000
 800d21c:	46000000 	.word	0x46000000
 800d220:	4c742400 	.word	0x4c742400
 800d224:	4a742400 	.word	0x4a742400
 800d228:	4bbebc20 	.word	0x4bbebc20

0800d22c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b089      	sub	sp, #36	; 0x24
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d234:	4ba0      	ldr	r3, [pc, #640]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d238:	f003 0303 	and.w	r3, r3, #3
 800d23c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d23e:	4b9e      	ldr	r3, [pc, #632]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d242:	091b      	lsrs	r3, r3, #4
 800d244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d248:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d24a:	4b9b      	ldr	r3, [pc, #620]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d254:	4b98      	ldr	r3, [pc, #608]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d258:	08db      	lsrs	r3, r3, #3
 800d25a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	fb02 f303 	mul.w	r3, r2, r3
 800d264:	ee07 3a90 	vmov	s15, r3
 800d268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d26c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	2b00      	cmp	r3, #0
 800d274:	f000 8111 	beq.w	800d49a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	f000 8083 	beq.w	800d386 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	2b02      	cmp	r3, #2
 800d284:	f200 80a1 	bhi.w	800d3ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d003      	beq.n	800d296 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	2b01      	cmp	r3, #1
 800d292:	d056      	beq.n	800d342 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d294:	e099      	b.n	800d3ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d296:	4b88      	ldr	r3, [pc, #544]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f003 0320 	and.w	r3, r3, #32
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d02d      	beq.n	800d2fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2a2:	4b85      	ldr	r3, [pc, #532]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	08db      	lsrs	r3, r3, #3
 800d2a8:	f003 0303 	and.w	r3, r3, #3
 800d2ac:	4a83      	ldr	r2, [pc, #524]	; (800d4bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d2ae:	fa22 f303 	lsr.w	r3, r2, r3
 800d2b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	ee07 3a90 	vmov	s15, r3
 800d2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	ee07 3a90 	vmov	s15, r3
 800d2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2cc:	4b7a      	ldr	r3, [pc, #488]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2d4:	ee07 3a90 	vmov	s15, r3
 800d2d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d2e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d2fc:	e087      	b.n	800d40e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	ee07 3a90 	vmov	s15, r3
 800d304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d308:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d30c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d310:	4b69      	ldr	r3, [pc, #420]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d318:	ee07 3a90 	vmov	s15, r3
 800d31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d320:	ed97 6a03 	vldr	s12, [r7, #12]
 800d324:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d32c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d33c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d340:	e065      	b.n	800d40e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	ee07 3a90 	vmov	s15, r3
 800d348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d34c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d354:	4b58      	ldr	r3, [pc, #352]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d35c:	ee07 3a90 	vmov	s15, r3
 800d360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d364:	ed97 6a03 	vldr	s12, [r7, #12]
 800d368:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d36c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d380:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d384:	e043      	b.n	800d40e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	ee07 3a90 	vmov	s15, r3
 800d38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d390:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d4cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d398:	4b47      	ldr	r3, [pc, #284]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a0:	ee07 3a90 	vmov	s15, r3
 800d3a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d3b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3c8:	e021      	b.n	800d40e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	ee07 3a90 	vmov	s15, r3
 800d3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3d4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d3d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3dc:	4b36      	ldr	r3, [pc, #216]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3e4:	ee07 3a90 	vmov	s15, r3
 800d3e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d3f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d40c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d40e:	4b2a      	ldr	r3, [pc, #168]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d412:	0a5b      	lsrs	r3, r3, #9
 800d414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d418:	ee07 3a90 	vmov	s15, r3
 800d41c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d424:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d428:	edd7 6a07 	vldr	s13, [r7, #28]
 800d42c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d434:	ee17 2a90 	vmov	r2, s15
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d43c:	4b1e      	ldr	r3, [pc, #120]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d440:	0c1b      	lsrs	r3, r3, #16
 800d442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d44e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d452:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d456:	edd7 6a07 	vldr	s13, [r7, #28]
 800d45a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d45e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d462:	ee17 2a90 	vmov	r2, s15
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d46a:	4b13      	ldr	r3, [pc, #76]	; (800d4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d46e:	0e1b      	lsrs	r3, r3, #24
 800d470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d474:	ee07 3a90 	vmov	s15, r3
 800d478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d47c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d480:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d484:	edd7 6a07 	vldr	s13, [r7, #28]
 800d488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d48c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d490:	ee17 2a90 	vmov	r2, s15
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d498:	e008      	b.n	800d4ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	609a      	str	r2, [r3, #8]
}
 800d4ac:	bf00      	nop
 800d4ae:	3724      	adds	r7, #36	; 0x24
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr
 800d4b8:	58024400 	.word	0x58024400
 800d4bc:	03d09000 	.word	0x03d09000
 800d4c0:	46000000 	.word	0x46000000
 800d4c4:	4c742400 	.word	0x4c742400
 800d4c8:	4a742400 	.word	0x4a742400
 800d4cc:	4bbebc20 	.word	0x4bbebc20

0800d4d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d4de:	4b53      	ldr	r3, [pc, #332]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e2:	f003 0303 	and.w	r3, r3, #3
 800d4e6:	2b03      	cmp	r3, #3
 800d4e8:	d101      	bne.n	800d4ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e099      	b.n	800d622 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d4ee:	4b4f      	ldr	r3, [pc, #316]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a4e      	ldr	r2, [pc, #312]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d4f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d4f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4fa:	f7f6 fc53 	bl	8003da4 <HAL_GetTick>
 800d4fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d500:	e008      	b.n	800d514 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d502:	f7f6 fc4f 	bl	8003da4 <HAL_GetTick>
 800d506:	4602      	mov	r2, r0
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d901      	bls.n	800d514 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d510:	2303      	movs	r3, #3
 800d512:	e086      	b.n	800d622 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d514:	4b45      	ldr	r3, [pc, #276]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d1f0      	bne.n	800d502 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d520:	4b42      	ldr	r3, [pc, #264]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d524:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	031b      	lsls	r3, r3, #12
 800d52e:	493f      	ldr	r1, [pc, #252]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d530:	4313      	orrs	r3, r2
 800d532:	628b      	str	r3, [r1, #40]	; 0x28
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	3b01      	subs	r3, #1
 800d53a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	3b01      	subs	r3, #1
 800d544:	025b      	lsls	r3, r3, #9
 800d546:	b29b      	uxth	r3, r3
 800d548:	431a      	orrs	r2, r3
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	3b01      	subs	r3, #1
 800d550:	041b      	lsls	r3, r3, #16
 800d552:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d556:	431a      	orrs	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	691b      	ldr	r3, [r3, #16]
 800d55c:	3b01      	subs	r3, #1
 800d55e:	061b      	lsls	r3, r3, #24
 800d560:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d564:	4931      	ldr	r1, [pc, #196]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d566:	4313      	orrs	r3, r2
 800d568:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d56a:	4b30      	ldr	r3, [pc, #192]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	695b      	ldr	r3, [r3, #20]
 800d576:	492d      	ldr	r1, [pc, #180]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d578:	4313      	orrs	r3, r2
 800d57a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d57c:	4b2b      	ldr	r3, [pc, #172]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d580:	f023 0220 	bic.w	r2, r3, #32
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	699b      	ldr	r3, [r3, #24]
 800d588:	4928      	ldr	r1, [pc, #160]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d58a:	4313      	orrs	r3, r2
 800d58c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d58e:	4b27      	ldr	r3, [pc, #156]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d592:	4a26      	ldr	r2, [pc, #152]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d594:	f023 0310 	bic.w	r3, r3, #16
 800d598:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d59a:	4b24      	ldr	r3, [pc, #144]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d59c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d59e:	4b24      	ldr	r3, [pc, #144]	; (800d630 <RCCEx_PLL2_Config+0x160>)
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	69d2      	ldr	r2, [r2, #28]
 800d5a6:	00d2      	lsls	r2, r2, #3
 800d5a8:	4920      	ldr	r1, [pc, #128]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d5ae:	4b1f      	ldr	r3, [pc, #124]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b2:	4a1e      	ldr	r2, [pc, #120]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d5b4:	f043 0310 	orr.w	r3, r3, #16
 800d5b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d106      	bne.n	800d5ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d5c0:	4b1a      	ldr	r3, [pc, #104]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c4:	4a19      	ldr	r2, [pc, #100]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d5c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d5cc:	e00f      	b.n	800d5ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d106      	bne.n	800d5e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d5d4:	4b15      	ldr	r3, [pc, #84]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d8:	4a14      	ldr	r2, [pc, #80]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d5da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d5e0:	e005      	b.n	800d5ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d5e2:	4b12      	ldr	r3, [pc, #72]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e6:	4a11      	ldr	r2, [pc, #68]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d5e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d5ee:	4b0f      	ldr	r3, [pc, #60]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a0e      	ldr	r2, [pc, #56]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d5f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d5f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5fa:	f7f6 fbd3 	bl	8003da4 <HAL_GetTick>
 800d5fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d600:	e008      	b.n	800d614 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d602:	f7f6 fbcf 	bl	8003da4 <HAL_GetTick>
 800d606:	4602      	mov	r2, r0
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	1ad3      	subs	r3, r2, r3
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d901      	bls.n	800d614 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d610:	2303      	movs	r3, #3
 800d612:	e006      	b.n	800d622 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d614:	4b05      	ldr	r3, [pc, #20]	; (800d62c <RCCEx_PLL2_Config+0x15c>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d0f0      	beq.n	800d602 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d620:	7bfb      	ldrb	r3, [r7, #15]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3710      	adds	r7, #16
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	58024400 	.word	0x58024400
 800d630:	ffff0007 	.word	0xffff0007

0800d634 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d642:	4b53      	ldr	r3, [pc, #332]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d646:	f003 0303 	and.w	r3, r3, #3
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d101      	bne.n	800d652 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d64e:	2301      	movs	r3, #1
 800d650:	e099      	b.n	800d786 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d652:	4b4f      	ldr	r3, [pc, #316]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a4e      	ldr	r2, [pc, #312]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d65c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d65e:	f7f6 fba1 	bl	8003da4 <HAL_GetTick>
 800d662:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d664:	e008      	b.n	800d678 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d666:	f7f6 fb9d 	bl	8003da4 <HAL_GetTick>
 800d66a:	4602      	mov	r2, r0
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	2b02      	cmp	r3, #2
 800d672:	d901      	bls.n	800d678 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d674:	2303      	movs	r3, #3
 800d676:	e086      	b.n	800d786 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d678:	4b45      	ldr	r3, [pc, #276]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1f0      	bne.n	800d666 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d684:	4b42      	ldr	r3, [pc, #264]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d688:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	051b      	lsls	r3, r3, #20
 800d692:	493f      	ldr	r1, [pc, #252]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d694:	4313      	orrs	r3, r2
 800d696:	628b      	str	r3, [r1, #40]	; 0x28
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	3b01      	subs	r3, #1
 800d69e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	689b      	ldr	r3, [r3, #8]
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	025b      	lsls	r3, r3, #9
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	431a      	orrs	r2, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	041b      	lsls	r3, r3, #16
 800d6b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d6ba:	431a      	orrs	r2, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	061b      	lsls	r3, r3, #24
 800d6c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d6c8:	4931      	ldr	r1, [pc, #196]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d6ce:	4b30      	ldr	r3, [pc, #192]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	695b      	ldr	r3, [r3, #20]
 800d6da:	492d      	ldr	r1, [pc, #180]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d6e0:	4b2b      	ldr	r3, [pc, #172]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	699b      	ldr	r3, [r3, #24]
 800d6ec:	4928      	ldr	r1, [pc, #160]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d6f2:	4b27      	ldr	r3, [pc, #156]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f6:	4a26      	ldr	r2, [pc, #152]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d6f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d6fe:	4b24      	ldr	r3, [pc, #144]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d702:	4b24      	ldr	r3, [pc, #144]	; (800d794 <RCCEx_PLL3_Config+0x160>)
 800d704:	4013      	ands	r3, r2
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	69d2      	ldr	r2, [r2, #28]
 800d70a:	00d2      	lsls	r2, r2, #3
 800d70c:	4920      	ldr	r1, [pc, #128]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d70e:	4313      	orrs	r3, r2
 800d710:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d712:	4b1f      	ldr	r3, [pc, #124]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d716:	4a1e      	ldr	r2, [pc, #120]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d71c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d106      	bne.n	800d732 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d724:	4b1a      	ldr	r3, [pc, #104]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d728:	4a19      	ldr	r2, [pc, #100]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d72a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d72e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d730:	e00f      	b.n	800d752 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d106      	bne.n	800d746 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d738:	4b15      	ldr	r3, [pc, #84]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d73c:	4a14      	ldr	r2, [pc, #80]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d73e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d742:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d744:	e005      	b.n	800d752 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d746:	4b12      	ldr	r3, [pc, #72]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74a:	4a11      	ldr	r2, [pc, #68]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d74c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d750:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d752:	4b0f      	ldr	r3, [pc, #60]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4a0e      	ldr	r2, [pc, #56]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d75c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d75e:	f7f6 fb21 	bl	8003da4 <HAL_GetTick>
 800d762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d764:	e008      	b.n	800d778 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d766:	f7f6 fb1d 	bl	8003da4 <HAL_GetTick>
 800d76a:	4602      	mov	r2, r0
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	1ad3      	subs	r3, r2, r3
 800d770:	2b02      	cmp	r3, #2
 800d772:	d901      	bls.n	800d778 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d774:	2303      	movs	r3, #3
 800d776:	e006      	b.n	800d786 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d778:	4b05      	ldr	r3, [pc, #20]	; (800d790 <RCCEx_PLL3_Config+0x15c>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d780:	2b00      	cmp	r3, #0
 800d782:	d0f0      	beq.n	800d766 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d784:	7bfb      	ldrb	r3, [r7, #15]
}
 800d786:	4618      	mov	r0, r3
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	58024400 	.word	0x58024400
 800d794:	ffff0007 	.word	0xffff0007

0800d798 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d071      	beq.n	800d88e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d106      	bne.n	800d7c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7f5 fd88 	bl	80032d4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2202      	movs	r2, #2
 800d7c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	f003 0310 	and.w	r3, r3, #16
 800d7d6:	2b10      	cmp	r3, #16
 800d7d8:	d050      	beq.n	800d87c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	22ca      	movs	r2, #202	; 0xca
 800d7e0:	625a      	str	r2, [r3, #36]	; 0x24
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2253      	movs	r2, #83	; 0x53
 800d7e8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 fa4a 	bl	800dc84 <RTC_EnterInitMode>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d124      	bne.n	800d844 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	6899      	ldr	r1, [r3, #8]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	4b24      	ldr	r3, [pc, #144]	; (800d898 <HAL_RTC_Init+0x100>)
 800d806:	400b      	ands	r3, r1
 800d808:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	6899      	ldr	r1, [r3, #8]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	685a      	ldr	r2, [r3, #4]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	691b      	ldr	r3, [r3, #16]
 800d818:	431a      	orrs	r2, r3
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	699b      	ldr	r3, [r3, #24]
 800d81e:	431a      	orrs	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	430a      	orrs	r2, r1
 800d826:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	689b      	ldr	r3, [r3, #8]
 800d82c:	0419      	lsls	r1, r3, #16
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	68da      	ldr	r2, [r3, #12]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	430a      	orrs	r2, r1
 800d838:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fa56 	bl	800dcec <RTC_ExitInitMode>
 800d840:	4603      	mov	r3, r0
 800d842:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d844:	7bfb      	ldrb	r3, [r7, #15]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d113      	bne.n	800d872 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f022 0203 	bic.w	r2, r2, #3
 800d858:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	69da      	ldr	r2, [r3, #28]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	695b      	ldr	r3, [r3, #20]
 800d868:	431a      	orrs	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	430a      	orrs	r2, r1
 800d870:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	22ff      	movs	r2, #255	; 0xff
 800d878:	625a      	str	r2, [r3, #36]	; 0x24
 800d87a:	e001      	b.n	800d880 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d880:	7bfb      	ldrb	r3, [r7, #15]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d103      	bne.n	800d88e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	ff8fffbf 	.word	0xff8fffbf

0800d89c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d89c:	b590      	push	{r4, r7, lr}
 800d89e:	b087      	sub	sp, #28
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d101      	bne.n	800d8b6 <HAL_RTC_SetTime+0x1a>
 800d8b2:	2302      	movs	r3, #2
 800d8b4:	e089      	b.n	800d9ca <HAL_RTC_SetTime+0x12e>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2202      	movs	r2, #2
 800d8c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	22ca      	movs	r2, #202	; 0xca
 800d8cc:	625a      	str	r2, [r3, #36]	; 0x24
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2253      	movs	r2, #83	; 0x53
 800d8d4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f000 f9d4 	bl	800dc84 <RTC_EnterInitMode>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d8e0:	7cfb      	ldrb	r3, [r7, #19]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d161      	bne.n	800d9aa <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d126      	bne.n	800d93a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d102      	bne.n	800d900 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	4618      	mov	r0, r3
 800d906:	f000 fa2f 	bl	800dd68 <RTC_ByteToBcd2>
 800d90a:	4603      	mov	r3, r0
 800d90c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	785b      	ldrb	r3, [r3, #1]
 800d912:	4618      	mov	r0, r3
 800d914:	f000 fa28 	bl	800dd68 <RTC_ByteToBcd2>
 800d918:	4603      	mov	r3, r0
 800d91a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d91c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	789b      	ldrb	r3, [r3, #2]
 800d922:	4618      	mov	r0, r3
 800d924:	f000 fa20 	bl	800dd68 <RTC_ByteToBcd2>
 800d928:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d92a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	78db      	ldrb	r3, [r3, #3]
 800d932:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d934:	4313      	orrs	r3, r2
 800d936:	617b      	str	r3, [r7, #20]
 800d938:	e018      	b.n	800d96c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d944:	2b00      	cmp	r3, #0
 800d946:	d102      	bne.n	800d94e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	2200      	movs	r2, #0
 800d94c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	785b      	ldrb	r3, [r3, #1]
 800d958:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d95a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d95c:	68ba      	ldr	r2, [r7, #8]
 800d95e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d960:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	78db      	ldrb	r3, [r3, #3]
 800d966:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d968:	4313      	orrs	r3, r2
 800d96a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	6979      	ldr	r1, [r7, #20]
 800d972:	4b18      	ldr	r3, [pc, #96]	; (800d9d4 <HAL_RTC_SetTime+0x138>)
 800d974:	400b      	ands	r3, r1
 800d976:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	689a      	ldr	r2, [r3, #8]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d986:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	6899      	ldr	r1, [r3, #8]
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	68da      	ldr	r2, [r3, #12]
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	691b      	ldr	r3, [r3, #16]
 800d996:	431a      	orrs	r2, r3
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	430a      	orrs	r2, r1
 800d99e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f000 f9a3 	bl	800dcec <RTC_ExitInitMode>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	22ff      	movs	r2, #255	; 0xff
 800d9b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d9b2:	7cfb      	ldrb	r3, [r7, #19]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d103      	bne.n	800d9c0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d9c8:	7cfb      	ldrb	r3, [r7, #19]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	371c      	adds	r7, #28
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd90      	pop	{r4, r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	007f7f7f 	.word	0x007f7f7f

0800d9d8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	4b22      	ldr	r3, [pc, #136]	; (800da8c <HAL_RTC_GetTime+0xb4>)
 800da04:	4013      	ands	r3, r2
 800da06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	0c1b      	lsrs	r3, r3, #16
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da12:	b2da      	uxtb	r2, r3
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	0a1b      	lsrs	r3, r3, #8
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da22:	b2da      	uxtb	r2, r3
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da30:	b2da      	uxtb	r2, r3
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	0d9b      	lsrs	r3, r3, #22
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	f003 0301 	and.w	r3, r3, #1
 800da40:	b2da      	uxtb	r2, r3
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d11a      	bne.n	800da82 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	4618      	mov	r0, r3
 800da52:	f000 f9a9 	bl	800dda8 <RTC_Bcd2ToByte>
 800da56:	4603      	mov	r3, r0
 800da58:	461a      	mov	r2, r3
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	785b      	ldrb	r3, [r3, #1]
 800da62:	4618      	mov	r0, r3
 800da64:	f000 f9a0 	bl	800dda8 <RTC_Bcd2ToByte>
 800da68:	4603      	mov	r3, r0
 800da6a:	461a      	mov	r2, r3
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	789b      	ldrb	r3, [r3, #2]
 800da74:	4618      	mov	r0, r3
 800da76:	f000 f997 	bl	800dda8 <RTC_Bcd2ToByte>
 800da7a:	4603      	mov	r3, r0
 800da7c:	461a      	mov	r2, r3
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3718      	adds	r7, #24
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	007f7f7f 	.word	0x007f7f7f

0800da90 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800da90:	b590      	push	{r4, r7, lr}
 800da92:	b087      	sub	sp, #28
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d101      	bne.n	800daaa <HAL_RTC_SetDate+0x1a>
 800daa6:	2302      	movs	r3, #2
 800daa8:	e073      	b.n	800db92 <HAL_RTC_SetDate+0x102>
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2201      	movs	r2, #1
 800daae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2202      	movs	r2, #2
 800dab6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d10e      	bne.n	800dade <HAL_RTC_SetDate+0x4e>
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	785b      	ldrb	r3, [r3, #1]
 800dac4:	f003 0310 	and.w	r3, r3, #16
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d008      	beq.n	800dade <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	785b      	ldrb	r3, [r3, #1]
 800dad0:	f023 0310 	bic.w	r3, r3, #16
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	330a      	adds	r3, #10
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d11c      	bne.n	800db1e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	78db      	ldrb	r3, [r3, #3]
 800dae8:	4618      	mov	r0, r3
 800daea:	f000 f93d 	bl	800dd68 <RTC_ByteToBcd2>
 800daee:	4603      	mov	r3, r0
 800daf0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	785b      	ldrb	r3, [r3, #1]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f000 f936 	bl	800dd68 <RTC_ByteToBcd2>
 800dafc:	4603      	mov	r3, r0
 800dafe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db00:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	789b      	ldrb	r3, [r3, #2]
 800db06:	4618      	mov	r0, r3
 800db08:	f000 f92e 	bl	800dd68 <RTC_ByteToBcd2>
 800db0c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800db0e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db18:	4313      	orrs	r3, r2
 800db1a:	617b      	str	r3, [r7, #20]
 800db1c:	e00e      	b.n	800db3c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	78db      	ldrb	r3, [r3, #3]
 800db22:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	785b      	ldrb	r3, [r3, #1]
 800db28:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800db2a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800db30:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800db38:	4313      	orrs	r3, r2
 800db3a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	22ca      	movs	r2, #202	; 0xca
 800db42:	625a      	str	r2, [r3, #36]	; 0x24
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2253      	movs	r2, #83	; 0x53
 800db4a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800db4c:	68f8      	ldr	r0, [r7, #12]
 800db4e:	f000 f899 	bl	800dc84 <RTC_EnterInitMode>
 800db52:	4603      	mov	r3, r0
 800db54:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800db56:	7cfb      	ldrb	r3, [r7, #19]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d10a      	bne.n	800db72 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	6979      	ldr	r1, [r7, #20]
 800db62:	4b0e      	ldr	r3, [pc, #56]	; (800db9c <HAL_RTC_SetDate+0x10c>)
 800db64:	400b      	ands	r3, r1
 800db66:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800db68:	68f8      	ldr	r0, [r7, #12]
 800db6a:	f000 f8bf 	bl	800dcec <RTC_ExitInitMode>
 800db6e:	4603      	mov	r3, r0
 800db70:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	22ff      	movs	r2, #255	; 0xff
 800db78:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800db7a:	7cfb      	ldrb	r3, [r7, #19]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d103      	bne.n	800db88 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2201      	movs	r2, #1
 800db84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800db90:	7cfb      	ldrb	r3, [r7, #19]


}
 800db92:	4618      	mov	r0, r3
 800db94:	371c      	adds	r7, #28
 800db96:	46bd      	mov	sp, r7
 800db98:	bd90      	pop	{r4, r7, pc}
 800db9a:	bf00      	nop
 800db9c:	00ffff3f 	.word	0x00ffff3f

0800dba0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	60f8      	str	r0, [r7, #12]
 800dba8:	60b9      	str	r1, [r7, #8]
 800dbaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	685a      	ldr	r2, [r3, #4]
 800dbb2:	4b21      	ldr	r3, [pc, #132]	; (800dc38 <HAL_RTC_GetDate+0x98>)
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	0c1b      	lsrs	r3, r3, #16
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	0a1b      	lsrs	r3, r3, #8
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	f003 031f 	and.w	r3, r3, #31
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	0b5b      	lsrs	r3, r3, #13
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	f003 0307 	and.w	r3, r3, #7
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d11a      	bne.n	800dc2c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	78db      	ldrb	r3, [r3, #3]
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f000 f8d4 	bl	800dda8 <RTC_Bcd2ToByte>
 800dc00:	4603      	mov	r3, r0
 800dc02:	461a      	mov	r2, r3
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	785b      	ldrb	r3, [r3, #1]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f000 f8cb 	bl	800dda8 <RTC_Bcd2ToByte>
 800dc12:	4603      	mov	r3, r0
 800dc14:	461a      	mov	r2, r3
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	789b      	ldrb	r3, [r3, #2]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f000 f8c2 	bl	800dda8 <RTC_Bcd2ToByte>
 800dc24:	4603      	mov	r3, r0
 800dc26:	461a      	mov	r2, r3
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dc2c:	2300      	movs	r3, #0
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3718      	adds	r7, #24
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	00ffff3f 	.word	0x00ffff3f

0800dc3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a0d      	ldr	r2, [pc, #52]	; (800dc80 <HAL_RTC_WaitForSynchro+0x44>)
 800dc4a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800dc4c:	f7f6 f8aa 	bl	8003da4 <HAL_GetTick>
 800dc50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dc52:	e009      	b.n	800dc68 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dc54:	f7f6 f8a6 	bl	8003da4 <HAL_GetTick>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	1ad3      	subs	r3, r2, r3
 800dc5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc62:	d901      	bls.n	800dc68 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800dc64:	2303      	movs	r3, #3
 800dc66:	e007      	b.n	800dc78 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	f003 0320 	and.w	r3, r3, #32
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d0ee      	beq.n	800dc54 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	0003ff5f 	.word	0x0003ff5f

0800dc84 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d120      	bne.n	800dce0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dca6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dca8:	f7f6 f87c 	bl	8003da4 <HAL_GetTick>
 800dcac:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dcae:	e00d      	b.n	800dccc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dcb0:	f7f6 f878 	bl	8003da4 <HAL_GetTick>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dcbe:	d905      	bls.n	800dccc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dcc0:	2303      	movs	r3, #3
 800dcc2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2203      	movs	r2, #3
 800dcc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d102      	bne.n	800dce0 <RTC_EnterInitMode+0x5c>
 800dcda:	7bfb      	ldrb	r3, [r7, #15]
 800dcdc:	2b03      	cmp	r3, #3
 800dcde:	d1e7      	bne.n	800dcb0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
	...

0800dcec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800dcf8:	4b1a      	ldr	r3, [pc, #104]	; (800dd64 <RTC_ExitInitMode+0x78>)
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	4a19      	ldr	r2, [pc, #100]	; (800dd64 <RTC_ExitInitMode+0x78>)
 800dcfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd02:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dd04:	4b17      	ldr	r3, [pc, #92]	; (800dd64 <RTC_ExitInitMode+0x78>)
 800dd06:	689b      	ldr	r3, [r3, #8]
 800dd08:	f003 0320 	and.w	r3, r3, #32
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10c      	bne.n	800dd2a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f7ff ff93 	bl	800dc3c <HAL_RTC_WaitForSynchro>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d01e      	beq.n	800dd5a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2203      	movs	r2, #3
 800dd20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dd24:	2303      	movs	r3, #3
 800dd26:	73fb      	strb	r3, [r7, #15]
 800dd28:	e017      	b.n	800dd5a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dd2a:	4b0e      	ldr	r3, [pc, #56]	; (800dd64 <RTC_ExitInitMode+0x78>)
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	4a0d      	ldr	r2, [pc, #52]	; (800dd64 <RTC_ExitInitMode+0x78>)
 800dd30:	f023 0320 	bic.w	r3, r3, #32
 800dd34:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f7ff ff80 	bl	800dc3c <HAL_RTC_WaitForSynchro>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d005      	beq.n	800dd4e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2203      	movs	r2, #3
 800dd46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dd4a:	2303      	movs	r3, #3
 800dd4c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dd4e:	4b05      	ldr	r3, [pc, #20]	; (800dd64 <RTC_ExitInitMode+0x78>)
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	4a04      	ldr	r2, [pc, #16]	; (800dd64 <RTC_ExitInitMode+0x78>)
 800dd54:	f043 0320 	orr.w	r3, r3, #32
 800dd58:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dd5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	58004000 	.word	0x58004000

0800dd68 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b085      	sub	sp, #20
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	4603      	mov	r3, r0
 800dd70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dd72:	2300      	movs	r3, #0
 800dd74:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800dd76:	79fb      	ldrb	r3, [r7, #7]
 800dd78:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800dd7a:	e005      	b.n	800dd88 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800dd82:	7afb      	ldrb	r3, [r7, #11]
 800dd84:	3b0a      	subs	r3, #10
 800dd86:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800dd88:	7afb      	ldrb	r3, [r7, #11]
 800dd8a:	2b09      	cmp	r3, #9
 800dd8c:	d8f6      	bhi.n	800dd7c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	011b      	lsls	r3, r3, #4
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	7afb      	ldrb	r3, [r7, #11]
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	b2db      	uxtb	r3, r3
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3714      	adds	r7, #20
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	4603      	mov	r3, r0
 800ddb0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ddb2:	79fb      	ldrb	r3, [r7, #7]
 800ddb4:	091b      	lsrs	r3, r3, #4
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	461a      	mov	r2, r3
 800ddba:	0092      	lsls	r2, r2, #2
 800ddbc:	4413      	add	r3, r2
 800ddbe:	005b      	lsls	r3, r3, #1
 800ddc0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ddc2:	79fb      	ldrb	r3, [r7, #7]
 800ddc4:	f003 030f 	and.w	r3, r3, #15
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	7bfb      	ldrb	r3, [r7, #15]
 800ddcc:	4413      	add	r3, r2
 800ddce:	b2db      	uxtb	r3, r3
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3714      	adds	r7, #20
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e10f      	b.n	800e00e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a87      	ldr	r2, [pc, #540]	; (800e018 <HAL_SPI_Init+0x23c>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d00f      	beq.n	800de1e <HAL_SPI_Init+0x42>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4a86      	ldr	r2, [pc, #536]	; (800e01c <HAL_SPI_Init+0x240>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d00a      	beq.n	800de1e <HAL_SPI_Init+0x42>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	4a84      	ldr	r2, [pc, #528]	; (800e020 <HAL_SPI_Init+0x244>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d005      	beq.n	800de1e <HAL_SPI_Init+0x42>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	2b0f      	cmp	r3, #15
 800de18:	d901      	bls.n	800de1e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800de1a:	2301      	movs	r3, #1
 800de1c:	e0f7      	b.n	800e00e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 fc12 	bl	800e648 <SPI_GetPacketSize>
 800de24:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a7b      	ldr	r2, [pc, #492]	; (800e018 <HAL_SPI_Init+0x23c>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d00c      	beq.n	800de4a <HAL_SPI_Init+0x6e>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a79      	ldr	r2, [pc, #484]	; (800e01c <HAL_SPI_Init+0x240>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d007      	beq.n	800de4a <HAL_SPI_Init+0x6e>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a78      	ldr	r2, [pc, #480]	; (800e020 <HAL_SPI_Init+0x244>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d002      	beq.n	800de4a <HAL_SPI_Init+0x6e>
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2b08      	cmp	r3, #8
 800de48:	d811      	bhi.n	800de6e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800de4e:	4a72      	ldr	r2, [pc, #456]	; (800e018 <HAL_SPI_Init+0x23c>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d009      	beq.n	800de68 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a70      	ldr	r2, [pc, #448]	; (800e01c <HAL_SPI_Init+0x240>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d004      	beq.n	800de68 <HAL_SPI_Init+0x8c>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a6f      	ldr	r2, [pc, #444]	; (800e020 <HAL_SPI_Init+0x244>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d104      	bne.n	800de72 <HAL_SPI_Init+0x96>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2b10      	cmp	r3, #16
 800de6c:	d901      	bls.n	800de72 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800de6e:	2301      	movs	r3, #1
 800de70:	e0cd      	b.n	800e00e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d106      	bne.n	800de8c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f7f5 fa58 	bl	800333c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2202      	movs	r2, #2
 800de90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f022 0201 	bic.w	r2, r2, #1
 800dea2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	689b      	ldr	r3, [r3, #8]
 800deaa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800deae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	699b      	ldr	r3, [r3, #24]
 800deb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800deb8:	d119      	bne.n	800deee <HAL_SPI_Init+0x112>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dec2:	d103      	bne.n	800decc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d008      	beq.n	800dede <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d10c      	bne.n	800deee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ded8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dedc:	d107      	bne.n	800deee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800deec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00f      	beq.n	800df1a <HAL_SPI_Init+0x13e>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	2b06      	cmp	r3, #6
 800df00:	d90b      	bls.n	800df1a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	430a      	orrs	r2, r1
 800df16:	601a      	str	r2, [r3, #0]
 800df18:	e007      	b.n	800df2a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800df28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	69da      	ldr	r2, [r3, #28]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df32:	431a      	orrs	r2, r3
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	431a      	orrs	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df3c:	ea42 0103 	orr.w	r1, r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	68da      	ldr	r2, [r3, #12]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	430a      	orrs	r2, r1
 800df4a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df54:	431a      	orrs	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5a:	431a      	orrs	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	699b      	ldr	r3, [r3, #24]
 800df60:	431a      	orrs	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	691b      	ldr	r3, [r3, #16]
 800df66:	431a      	orrs	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	695b      	ldr	r3, [r3, #20]
 800df6c:	431a      	orrs	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6a1b      	ldr	r3, [r3, #32]
 800df72:	431a      	orrs	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	431a      	orrs	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df7e:	431a      	orrs	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	431a      	orrs	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df8a:	ea42 0103 	orr.w	r1, r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	430a      	orrs	r2, r1
 800df98:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d113      	bne.n	800dfca <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dfb4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dfc8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f022 0201 	bic.w	r2, r2, #1
 800dfd8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00a      	beq.n	800dffc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	430a      	orrs	r2, r1
 800dffa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2201      	movs	r2, #1
 800e008:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	40013000 	.word	0x40013000
 800e01c:	40003800 	.word	0x40003800
 800e020:	40003c00 	.word	0x40003c00

0800e024 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b088      	sub	sp, #32
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	603b      	str	r3, [r7, #0]
 800e030:	4613      	mov	r3, r2
 800e032:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e038:	095b      	lsrs	r3, r3, #5
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	3301      	adds	r3, #1
 800e03e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	3330      	adds	r3, #48	; 0x30
 800e046:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e048:	f7f5 feac 	bl	8003da4 <HAL_GetTick>
 800e04c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e054:	b2db      	uxtb	r3, r3
 800e056:	2b01      	cmp	r3, #1
 800e058:	d001      	beq.n	800e05e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e05a:	2302      	movs	r3, #2
 800e05c:	e250      	b.n	800e500 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d002      	beq.n	800e06a <HAL_SPI_Receive+0x46>
 800e064:	88fb      	ldrh	r3, [r7, #6]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	e248      	b.n	800e500 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e074:	2b01      	cmp	r3, #1
 800e076:	d101      	bne.n	800e07c <HAL_SPI_Receive+0x58>
 800e078:	2302      	movs	r3, #2
 800e07a:	e241      	b.n	800e500 <HAL_SPI_Receive+0x4dc>
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2204      	movs	r2, #4
 800e088:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2200      	movs	r2, #0
 800e090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	68ba      	ldr	r2, [r7, #8]
 800e098:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	88fa      	ldrh	r2, [r7, #6]
 800e09e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	88fa      	ldrh	r2, [r7, #6]
 800e0a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e0d4:	d108      	bne.n	800e0e8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e0e4:	601a      	str	r2, [r3, #0]
 800e0e6:	e009      	b.n	800e0fc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e0fa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	685a      	ldr	r2, [r3, #4]
 800e102:	4b95      	ldr	r3, [pc, #596]	; (800e358 <HAL_SPI_Receive+0x334>)
 800e104:	4013      	ands	r3, r2
 800e106:	88f9      	ldrh	r1, [r7, #6]
 800e108:	68fa      	ldr	r2, [r7, #12]
 800e10a:	6812      	ldr	r2, [r2, #0]
 800e10c:	430b      	orrs	r3, r1
 800e10e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	681a      	ldr	r2, [r3, #0]
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f042 0201 	orr.w	r2, r2, #1
 800e11e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e128:	d107      	bne.n	800e13a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e138:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	2b0f      	cmp	r3, #15
 800e140:	d96c      	bls.n	800e21c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e142:	e064      	b.n	800e20e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	695b      	ldr	r3, [r3, #20]
 800e14a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	f003 0301 	and.w	r3, r3, #1
 800e156:	2b01      	cmp	r3, #1
 800e158:	d114      	bne.n	800e184 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e162:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e164:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e16a:	1d1a      	adds	r2, r3, #4
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e176:	b29b      	uxth	r3, r3
 800e178:	3b01      	subs	r3, #1
 800e17a:	b29a      	uxth	r2, r3
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e182:	e044      	b.n	800e20e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	8bfa      	ldrh	r2, [r7, #30]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d919      	bls.n	800e1c6 <HAL_SPI_Receive+0x1a2>
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d014      	beq.n	800e1c6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e1a6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ac:	1d1a      	adds	r2, r3, #4
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	3b01      	subs	r3, #1
 800e1bc:	b29a      	uxth	r2, r3
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e1c4:	e023      	b.n	800e20e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1c6:	f7f5 fded 	bl	8003da4 <HAL_GetTick>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	1ad3      	subs	r3, r2, r3
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d803      	bhi.n	800e1de <HAL_SPI_Receive+0x1ba>
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1dc:	d102      	bne.n	800e1e4 <HAL_SPI_Receive+0x1c0>
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d114      	bne.n	800e20e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e1e4:	68f8      	ldr	r0, [r7, #12]
 800e1e6:	f000 f98f 	bl	800e508 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2200      	movs	r2, #0
 800e206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e20a:	2303      	movs	r3, #3
 800e20c:	e178      	b.n	800e500 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e214:	b29b      	uxth	r3, r3
 800e216:	2b00      	cmp	r3, #0
 800e218:	d194      	bne.n	800e144 <HAL_SPI_Receive+0x120>
 800e21a:	e15e      	b.n	800e4da <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	2b07      	cmp	r3, #7
 800e222:	f240 8153 	bls.w	800e4cc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e226:	e08f      	b.n	800e348 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	695b      	ldr	r3, [r3, #20]
 800e22e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	695b      	ldr	r3, [r3, #20]
 800e236:	f003 0301 	and.w	r3, r3, #1
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d114      	bne.n	800e268 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e242:	69ba      	ldr	r2, [r7, #24]
 800e244:	8812      	ldrh	r2, [r2, #0]
 800e246:	b292      	uxth	r2, r2
 800e248:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e24e:	1c9a      	adds	r2, r3, #2
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	3b01      	subs	r3, #1
 800e25e:	b29a      	uxth	r2, r3
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e266:	e06f      	b.n	800e348 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e26e:	b29b      	uxth	r3, r3
 800e270:	8bfa      	ldrh	r2, [r7, #30]
 800e272:	429a      	cmp	r2, r3
 800e274:	d924      	bls.n	800e2c0 <HAL_SPI_Receive+0x29c>
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d01f      	beq.n	800e2c0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e284:	69ba      	ldr	r2, [r7, #24]
 800e286:	8812      	ldrh	r2, [r2, #0]
 800e288:	b292      	uxth	r2, r2
 800e28a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e290:	1c9a      	adds	r2, r3, #2
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e29a:	69ba      	ldr	r2, [r7, #24]
 800e29c:	8812      	ldrh	r2, [r2, #0]
 800e29e:	b292      	uxth	r2, r2
 800e2a0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2a6:	1c9a      	adds	r2, r3, #2
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	3b02      	subs	r3, #2
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2be:	e043      	b.n	800e348 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d119      	bne.n	800e300 <HAL_SPI_Receive+0x2dc>
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d014      	beq.n	800e300 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2da:	69ba      	ldr	r2, [r7, #24]
 800e2dc:	8812      	ldrh	r2, [r2, #0]
 800e2de:	b292      	uxth	r2, r2
 800e2e0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2e6:	1c9a      	adds	r2, r3, #2
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	3b01      	subs	r3, #1
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2fe:	e023      	b.n	800e348 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e300:	f7f5 fd50 	bl	8003da4 <HAL_GetTick>
 800e304:	4602      	mov	r2, r0
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	1ad3      	subs	r3, r2, r3
 800e30a:	683a      	ldr	r2, [r7, #0]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d803      	bhi.n	800e318 <HAL_SPI_Receive+0x2f4>
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e316:	d102      	bne.n	800e31e <HAL_SPI_Receive+0x2fa>
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d114      	bne.n	800e348 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	f000 f8f2 	bl	800e508 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e32a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2200      	movs	r2, #0
 800e340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e344:	2303      	movs	r3, #3
 800e346:	e0db      	b.n	800e500 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e34e:	b29b      	uxth	r3, r3
 800e350:	2b00      	cmp	r3, #0
 800e352:	f47f af69 	bne.w	800e228 <HAL_SPI_Receive+0x204>
 800e356:	e0c0      	b.n	800e4da <HAL_SPI_Receive+0x4b6>
 800e358:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	695b      	ldr	r3, [r3, #20]
 800e362:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	695b      	ldr	r3, [r3, #20]
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d117      	bne.n	800e3a2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e37e:	7812      	ldrb	r2, [r2, #0]
 800e380:	b2d2      	uxtb	r2, r2
 800e382:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e388:	1c5a      	adds	r2, r3, #1
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e394:	b29b      	uxth	r3, r3
 800e396:	3b01      	subs	r3, #1
 800e398:	b29a      	uxth	r2, r3
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3a0:	e094      	b.n	800e4cc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	8bfa      	ldrh	r2, [r7, #30]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d946      	bls.n	800e43e <HAL_SPI_Receive+0x41a>
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d041      	beq.n	800e43e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3c6:	7812      	ldrb	r2, [r2, #0]
 800e3c8:	b2d2      	uxtb	r2, r2
 800e3ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3d0:	1c5a      	adds	r2, r3, #1
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3e2:	7812      	ldrb	r2, [r2, #0]
 800e3e4:	b2d2      	uxtb	r2, r2
 800e3e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3ec:	1c5a      	adds	r2, r3, #1
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3fe:	7812      	ldrb	r2, [r2, #0]
 800e400:	b2d2      	uxtb	r2, r2
 800e402:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e408:	1c5a      	adds	r2, r3, #1
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e41a:	7812      	ldrb	r2, [r2, #0]
 800e41c:	b2d2      	uxtb	r2, r2
 800e41e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e424:	1c5a      	adds	r2, r3, #1
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e430:	b29b      	uxth	r3, r3
 800e432:	3b04      	subs	r3, #4
 800e434:	b29a      	uxth	r2, r3
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e43c:	e046      	b.n	800e4cc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e444:	b29b      	uxth	r3, r3
 800e446:	2b03      	cmp	r3, #3
 800e448:	d81c      	bhi.n	800e484 <HAL_SPI_Receive+0x460>
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e450:	2b00      	cmp	r3, #0
 800e452:	d017      	beq.n	800e484 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e460:	7812      	ldrb	r2, [r2, #0]
 800e462:	b2d2      	uxtb	r2, r2
 800e464:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e46a:	1c5a      	adds	r2, r3, #1
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e476:	b29b      	uxth	r3, r3
 800e478:	3b01      	subs	r3, #1
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e482:	e023      	b.n	800e4cc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e484:	f7f5 fc8e 	bl	8003da4 <HAL_GetTick>
 800e488:	4602      	mov	r2, r0
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	683a      	ldr	r2, [r7, #0]
 800e490:	429a      	cmp	r2, r3
 800e492:	d803      	bhi.n	800e49c <HAL_SPI_Receive+0x478>
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e49a:	d102      	bne.n	800e4a2 <HAL_SPI_Receive+0x47e>
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d114      	bne.n	800e4cc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f000 f830 	bl	800e508 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e4c8:	2303      	movs	r3, #3
 800e4ca:	e019      	b.n	800e500 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f47f af41 	bne.w	800e35c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f000 f814 	bl	800e508 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d001      	beq.n	800e4fe <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e000      	b.n	800e500 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e4fe:	2300      	movs	r3, #0
  }
}
 800e500:	4618      	mov	r0, r3
 800e502:	3720      	adds	r7, #32
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	695b      	ldr	r3, [r3, #20]
 800e516:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	699a      	ldr	r2, [r3, #24]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f042 0208 	orr.w	r2, r2, #8
 800e526:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	699a      	ldr	r2, [r3, #24]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f042 0210 	orr.w	r2, r2, #16
 800e536:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f022 0201 	bic.w	r2, r2, #1
 800e546:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	6919      	ldr	r1, [r3, #16]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	4b3c      	ldr	r3, [pc, #240]	; (800e644 <SPI_CloseTransfer+0x13c>)
 800e554:	400b      	ands	r3, r1
 800e556:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	689a      	ldr	r2, [r3, #8]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e566:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	2b04      	cmp	r3, #4
 800e572:	d014      	beq.n	800e59e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f003 0320 	and.w	r3, r3, #32
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d00f      	beq.n	800e59e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e584:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	699a      	ldr	r2, [r3, #24]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f042 0220 	orr.w	r2, r2, #32
 800e59c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	2b03      	cmp	r3, #3
 800e5a8:	d014      	beq.n	800e5d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00f      	beq.n	800e5d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5ba:	f043 0204 	orr.w	r2, r3, #4
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	699a      	ldr	r2, [r3, #24]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e5d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00f      	beq.n	800e5fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5e4:	f043 0201 	orr.w	r2, r3, #1
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	699a      	ldr	r2, [r3, #24]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00f      	beq.n	800e628 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e60e:	f043 0208 	orr.w	r2, r3, #8
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	699a      	ldr	r2, [r3, #24]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e626:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e638:	bf00      	nop
 800e63a:	3714      	adds	r7, #20
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr
 800e644:	fffffc90 	.word	0xfffffc90

0800e648 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e648:	b480      	push	{r7}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e654:	095b      	lsrs	r3, r3, #5
 800e656:	3301      	adds	r3, #1
 800e658:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	68db      	ldr	r3, [r3, #12]
 800e65e:	3301      	adds	r3, #1
 800e660:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	3307      	adds	r3, #7
 800e666:	08db      	lsrs	r3, r3, #3
 800e668:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	fb02 f303 	mul.w	r3, r2, r3
}
 800e672:	4618      	mov	r0, r3
 800e674:	3714      	adds	r7, #20
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr

0800e67e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e67e:	b580      	push	{r7, lr}
 800e680:	b082      	sub	sp, #8
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d101      	bne.n	800e690 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e68c:	2301      	movs	r3, #1
 800e68e:	e049      	b.n	800e724 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e696:	b2db      	uxtb	r3, r3
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d106      	bne.n	800e6aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7f4 feff 	bl	80034a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2202      	movs	r2, #2
 800e6ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	3304      	adds	r3, #4
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	4610      	mov	r0, r2
 800e6be:	f000 fe7d 	bl	800f3bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2201      	movs	r2, #1
 800e6de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2201      	movs	r2, #1
 800e706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2201      	movs	r2, #1
 800e70e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2201      	movs	r2, #1
 800e716:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2201      	movs	r2, #1
 800e71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e722:	2300      	movs	r3, #0
}
 800e724:	4618      	mov	r0, r3
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b085      	sub	sp, #20
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d001      	beq.n	800e744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e740:	2301      	movs	r3, #1
 800e742:	e054      	b.n	800e7ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2202      	movs	r2, #2
 800e748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	68da      	ldr	r2, [r3, #12]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f042 0201 	orr.w	r2, r2, #1
 800e75a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a26      	ldr	r2, [pc, #152]	; (800e7fc <HAL_TIM_Base_Start_IT+0xd0>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d022      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e76e:	d01d      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4a22      	ldr	r2, [pc, #136]	; (800e800 <HAL_TIM_Base_Start_IT+0xd4>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d018      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a21      	ldr	r2, [pc, #132]	; (800e804 <HAL_TIM_Base_Start_IT+0xd8>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d013      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a1f      	ldr	r2, [pc, #124]	; (800e808 <HAL_TIM_Base_Start_IT+0xdc>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d00e      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4a1e      	ldr	r2, [pc, #120]	; (800e80c <HAL_TIM_Base_Start_IT+0xe0>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d009      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a1c      	ldr	r2, [pc, #112]	; (800e810 <HAL_TIM_Base_Start_IT+0xe4>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d004      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4a1b      	ldr	r2, [pc, #108]	; (800e814 <HAL_TIM_Base_Start_IT+0xe8>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d115      	bne.n	800e7d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	689a      	ldr	r2, [r3, #8]
 800e7b2:	4b19      	ldr	r3, [pc, #100]	; (800e818 <HAL_TIM_Base_Start_IT+0xec>)
 800e7b4:	4013      	ands	r3, r2
 800e7b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2b06      	cmp	r3, #6
 800e7bc:	d015      	beq.n	800e7ea <HAL_TIM_Base_Start_IT+0xbe>
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7c4:	d011      	beq.n	800e7ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f042 0201 	orr.w	r2, r2, #1
 800e7d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7d6:	e008      	b.n	800e7ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f042 0201 	orr.w	r2, r2, #1
 800e7e6:	601a      	str	r2, [r3, #0]
 800e7e8:	e000      	b.n	800e7ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7ec:	2300      	movs	r3, #0
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3714      	adds	r7, #20
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f8:	4770      	bx	lr
 800e7fa:	bf00      	nop
 800e7fc:	40010000 	.word	0x40010000
 800e800:	40000400 	.word	0x40000400
 800e804:	40000800 	.word	0x40000800
 800e808:	40000c00 	.word	0x40000c00
 800e80c:	40010400 	.word	0x40010400
 800e810:	40001800 	.word	0x40001800
 800e814:	40014000 	.word	0x40014000
 800e818:	00010007 	.word	0x00010007

0800e81c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e826:	2300      	movs	r3, #0
 800e828:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d109      	bne.n	800e844 <HAL_TIM_OC_Start_IT+0x28>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e836:	b2db      	uxtb	r3, r3
 800e838:	2b01      	cmp	r3, #1
 800e83a:	bf14      	ite	ne
 800e83c:	2301      	movne	r3, #1
 800e83e:	2300      	moveq	r3, #0
 800e840:	b2db      	uxtb	r3, r3
 800e842:	e03c      	b.n	800e8be <HAL_TIM_OC_Start_IT+0xa2>
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	2b04      	cmp	r3, #4
 800e848:	d109      	bne.n	800e85e <HAL_TIM_OC_Start_IT+0x42>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e850:	b2db      	uxtb	r3, r3
 800e852:	2b01      	cmp	r3, #1
 800e854:	bf14      	ite	ne
 800e856:	2301      	movne	r3, #1
 800e858:	2300      	moveq	r3, #0
 800e85a:	b2db      	uxtb	r3, r3
 800e85c:	e02f      	b.n	800e8be <HAL_TIM_OC_Start_IT+0xa2>
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	2b08      	cmp	r3, #8
 800e862:	d109      	bne.n	800e878 <HAL_TIM_OC_Start_IT+0x5c>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	bf14      	ite	ne
 800e870:	2301      	movne	r3, #1
 800e872:	2300      	moveq	r3, #0
 800e874:	b2db      	uxtb	r3, r3
 800e876:	e022      	b.n	800e8be <HAL_TIM_OC_Start_IT+0xa2>
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	2b0c      	cmp	r3, #12
 800e87c:	d109      	bne.n	800e892 <HAL_TIM_OC_Start_IT+0x76>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e884:	b2db      	uxtb	r3, r3
 800e886:	2b01      	cmp	r3, #1
 800e888:	bf14      	ite	ne
 800e88a:	2301      	movne	r3, #1
 800e88c:	2300      	moveq	r3, #0
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	e015      	b.n	800e8be <HAL_TIM_OC_Start_IT+0xa2>
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	2b10      	cmp	r3, #16
 800e896:	d109      	bne.n	800e8ac <HAL_TIM_OC_Start_IT+0x90>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	bf14      	ite	ne
 800e8a4:	2301      	movne	r3, #1
 800e8a6:	2300      	moveq	r3, #0
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	e008      	b.n	800e8be <HAL_TIM_OC_Start_IT+0xa2>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	bf14      	ite	ne
 800e8b8:	2301      	movne	r3, #1
 800e8ba:	2300      	moveq	r3, #0
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d001      	beq.n	800e8c6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e0ec      	b.n	800eaa0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d104      	bne.n	800e8d6 <HAL_TIM_OC_Start_IT+0xba>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2202      	movs	r2, #2
 800e8d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e8d4:	e023      	b.n	800e91e <HAL_TIM_OC_Start_IT+0x102>
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	2b04      	cmp	r3, #4
 800e8da:	d104      	bne.n	800e8e6 <HAL_TIM_OC_Start_IT+0xca>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2202      	movs	r2, #2
 800e8e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e8e4:	e01b      	b.n	800e91e <HAL_TIM_OC_Start_IT+0x102>
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	2b08      	cmp	r3, #8
 800e8ea:	d104      	bne.n	800e8f6 <HAL_TIM_OC_Start_IT+0xda>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2202      	movs	r2, #2
 800e8f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e8f4:	e013      	b.n	800e91e <HAL_TIM_OC_Start_IT+0x102>
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	2b0c      	cmp	r3, #12
 800e8fa:	d104      	bne.n	800e906 <HAL_TIM_OC_Start_IT+0xea>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2202      	movs	r2, #2
 800e900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e904:	e00b      	b.n	800e91e <HAL_TIM_OC_Start_IT+0x102>
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	2b10      	cmp	r3, #16
 800e90a:	d104      	bne.n	800e916 <HAL_TIM_OC_Start_IT+0xfa>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2202      	movs	r2, #2
 800e910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e914:	e003      	b.n	800e91e <HAL_TIM_OC_Start_IT+0x102>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2202      	movs	r2, #2
 800e91a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	2b0c      	cmp	r3, #12
 800e922:	d841      	bhi.n	800e9a8 <HAL_TIM_OC_Start_IT+0x18c>
 800e924:	a201      	add	r2, pc, #4	; (adr r2, 800e92c <HAL_TIM_OC_Start_IT+0x110>)
 800e926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e92a:	bf00      	nop
 800e92c:	0800e961 	.word	0x0800e961
 800e930:	0800e9a9 	.word	0x0800e9a9
 800e934:	0800e9a9 	.word	0x0800e9a9
 800e938:	0800e9a9 	.word	0x0800e9a9
 800e93c:	0800e973 	.word	0x0800e973
 800e940:	0800e9a9 	.word	0x0800e9a9
 800e944:	0800e9a9 	.word	0x0800e9a9
 800e948:	0800e9a9 	.word	0x0800e9a9
 800e94c:	0800e985 	.word	0x0800e985
 800e950:	0800e9a9 	.word	0x0800e9a9
 800e954:	0800e9a9 	.word	0x0800e9a9
 800e958:	0800e9a9 	.word	0x0800e9a9
 800e95c:	0800e997 	.word	0x0800e997
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68da      	ldr	r2, [r3, #12]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f042 0202 	orr.w	r2, r2, #2
 800e96e:	60da      	str	r2, [r3, #12]
      break;
 800e970:	e01d      	b.n	800e9ae <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	68da      	ldr	r2, [r3, #12]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f042 0204 	orr.w	r2, r2, #4
 800e980:	60da      	str	r2, [r3, #12]
      break;
 800e982:	e014      	b.n	800e9ae <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	68da      	ldr	r2, [r3, #12]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f042 0208 	orr.w	r2, r2, #8
 800e992:	60da      	str	r2, [r3, #12]
      break;
 800e994:	e00b      	b.n	800e9ae <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	68da      	ldr	r2, [r3, #12]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f042 0210 	orr.w	r2, r2, #16
 800e9a4:	60da      	str	r2, [r3, #12]
      break;
 800e9a6:	e002      	b.n	800e9ae <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	73fb      	strb	r3, [r7, #15]
      break;
 800e9ac:	bf00      	nop
  }

  if (status == HAL_OK)
 800e9ae:	7bfb      	ldrb	r3, [r7, #15]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d174      	bne.n	800ea9e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	6839      	ldr	r1, [r7, #0]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f001 f917 	bl	800fbf0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4a38      	ldr	r2, [pc, #224]	; (800eaa8 <HAL_TIM_OC_Start_IT+0x28c>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d013      	beq.n	800e9f4 <HAL_TIM_OC_Start_IT+0x1d8>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a36      	ldr	r2, [pc, #216]	; (800eaac <HAL_TIM_OC_Start_IT+0x290>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d00e      	beq.n	800e9f4 <HAL_TIM_OC_Start_IT+0x1d8>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a35      	ldr	r2, [pc, #212]	; (800eab0 <HAL_TIM_OC_Start_IT+0x294>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d009      	beq.n	800e9f4 <HAL_TIM_OC_Start_IT+0x1d8>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a33      	ldr	r2, [pc, #204]	; (800eab4 <HAL_TIM_OC_Start_IT+0x298>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d004      	beq.n	800e9f4 <HAL_TIM_OC_Start_IT+0x1d8>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a32      	ldr	r2, [pc, #200]	; (800eab8 <HAL_TIM_OC_Start_IT+0x29c>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d101      	bne.n	800e9f8 <HAL_TIM_OC_Start_IT+0x1dc>
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	e000      	b.n	800e9fa <HAL_TIM_OC_Start_IT+0x1de>
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d007      	beq.n	800ea0e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ea0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a25      	ldr	r2, [pc, #148]	; (800eaa8 <HAL_TIM_OC_Start_IT+0x28c>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d022      	beq.n	800ea5e <HAL_TIM_OC_Start_IT+0x242>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea20:	d01d      	beq.n	800ea5e <HAL_TIM_OC_Start_IT+0x242>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a25      	ldr	r2, [pc, #148]	; (800eabc <HAL_TIM_OC_Start_IT+0x2a0>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d018      	beq.n	800ea5e <HAL_TIM_OC_Start_IT+0x242>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a23      	ldr	r2, [pc, #140]	; (800eac0 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d013      	beq.n	800ea5e <HAL_TIM_OC_Start_IT+0x242>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a22      	ldr	r2, [pc, #136]	; (800eac4 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d00e      	beq.n	800ea5e <HAL_TIM_OC_Start_IT+0x242>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4a19      	ldr	r2, [pc, #100]	; (800eaac <HAL_TIM_OC_Start_IT+0x290>)
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d009      	beq.n	800ea5e <HAL_TIM_OC_Start_IT+0x242>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4a1e      	ldr	r2, [pc, #120]	; (800eac8 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d004      	beq.n	800ea5e <HAL_TIM_OC_Start_IT+0x242>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4a15      	ldr	r2, [pc, #84]	; (800eab0 <HAL_TIM_OC_Start_IT+0x294>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d115      	bne.n	800ea8a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	689a      	ldr	r2, [r3, #8]
 800ea64:	4b19      	ldr	r3, [pc, #100]	; (800eacc <HAL_TIM_OC_Start_IT+0x2b0>)
 800ea66:	4013      	ands	r3, r2
 800ea68:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	2b06      	cmp	r3, #6
 800ea6e:	d015      	beq.n	800ea9c <HAL_TIM_OC_Start_IT+0x280>
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea76:	d011      	beq.n	800ea9c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f042 0201 	orr.w	r2, r2, #1
 800ea86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea88:	e008      	b.n	800ea9c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f042 0201 	orr.w	r2, r2, #1
 800ea98:	601a      	str	r2, [r3, #0]
 800ea9a:	e000      	b.n	800ea9e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea9c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ea9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3710      	adds	r7, #16
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	40010000 	.word	0x40010000
 800eaac:	40010400 	.word	0x40010400
 800eab0:	40014000 	.word	0x40014000
 800eab4:	40014400 	.word	0x40014400
 800eab8:	40014800 	.word	0x40014800
 800eabc:	40000400 	.word	0x40000400
 800eac0:	40000800 	.word	0x40000800
 800eac4:	40000c00 	.word	0x40000c00
 800eac8:	40001800 	.word	0x40001800
 800eacc:	00010007 	.word	0x00010007

0800ead0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eada:	2300      	movs	r3, #0
 800eadc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	2b0c      	cmp	r3, #12
 800eae2:	d841      	bhi.n	800eb68 <HAL_TIM_OC_Stop_IT+0x98>
 800eae4:	a201      	add	r2, pc, #4	; (adr r2, 800eaec <HAL_TIM_OC_Stop_IT+0x1c>)
 800eae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaea:	bf00      	nop
 800eaec:	0800eb21 	.word	0x0800eb21
 800eaf0:	0800eb69 	.word	0x0800eb69
 800eaf4:	0800eb69 	.word	0x0800eb69
 800eaf8:	0800eb69 	.word	0x0800eb69
 800eafc:	0800eb33 	.word	0x0800eb33
 800eb00:	0800eb69 	.word	0x0800eb69
 800eb04:	0800eb69 	.word	0x0800eb69
 800eb08:	0800eb69 	.word	0x0800eb69
 800eb0c:	0800eb45 	.word	0x0800eb45
 800eb10:	0800eb69 	.word	0x0800eb69
 800eb14:	0800eb69 	.word	0x0800eb69
 800eb18:	0800eb69 	.word	0x0800eb69
 800eb1c:	0800eb57 	.word	0x0800eb57
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	68da      	ldr	r2, [r3, #12]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f022 0202 	bic.w	r2, r2, #2
 800eb2e:	60da      	str	r2, [r3, #12]
      break;
 800eb30:	e01d      	b.n	800eb6e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	68da      	ldr	r2, [r3, #12]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f022 0204 	bic.w	r2, r2, #4
 800eb40:	60da      	str	r2, [r3, #12]
      break;
 800eb42:	e014      	b.n	800eb6e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68da      	ldr	r2, [r3, #12]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f022 0208 	bic.w	r2, r2, #8
 800eb52:	60da      	str	r2, [r3, #12]
      break;
 800eb54:	e00b      	b.n	800eb6e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	68da      	ldr	r2, [r3, #12]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f022 0210 	bic.w	r2, r2, #16
 800eb64:	60da      	str	r2, [r3, #12]
      break;
 800eb66:	e002      	b.n	800eb6e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	73fb      	strb	r3, [r7, #15]
      break;
 800eb6c:	bf00      	nop
  }

  if (status == HAL_OK)
 800eb6e:	7bfb      	ldrb	r3, [r7, #15]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	f040 8081 	bne.w	800ec78 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	6839      	ldr	r1, [r7, #0]
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f001 f836 	bl	800fbf0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4a3e      	ldr	r2, [pc, #248]	; (800ec84 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d013      	beq.n	800ebb6 <HAL_TIM_OC_Stop_IT+0xe6>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4a3d      	ldr	r2, [pc, #244]	; (800ec88 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d00e      	beq.n	800ebb6 <HAL_TIM_OC_Stop_IT+0xe6>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4a3b      	ldr	r2, [pc, #236]	; (800ec8c <HAL_TIM_OC_Stop_IT+0x1bc>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d009      	beq.n	800ebb6 <HAL_TIM_OC_Stop_IT+0xe6>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	4a3a      	ldr	r2, [pc, #232]	; (800ec90 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d004      	beq.n	800ebb6 <HAL_TIM_OC_Stop_IT+0xe6>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	4a38      	ldr	r2, [pc, #224]	; (800ec94 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d101      	bne.n	800ebba <HAL_TIM_OC_Stop_IT+0xea>
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e000      	b.n	800ebbc <HAL_TIM_OC_Stop_IT+0xec>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d017      	beq.n	800ebf0 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	6a1a      	ldr	r2, [r3, #32]
 800ebc6:	f241 1311 	movw	r3, #4369	; 0x1111
 800ebca:	4013      	ands	r3, r2
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d10f      	bne.n	800ebf0 <HAL_TIM_OC_Stop_IT+0x120>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	6a1a      	ldr	r2, [r3, #32]
 800ebd6:	f240 4344 	movw	r3, #1092	; 0x444
 800ebda:	4013      	ands	r3, r2
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d107      	bne.n	800ebf0 <HAL_TIM_OC_Stop_IT+0x120>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ebee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	6a1a      	ldr	r2, [r3, #32]
 800ebf6:	f241 1311 	movw	r3, #4369	; 0x1111
 800ebfa:	4013      	ands	r3, r2
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d10f      	bne.n	800ec20 <HAL_TIM_OC_Stop_IT+0x150>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	6a1a      	ldr	r2, [r3, #32]
 800ec06:	f240 4344 	movw	r3, #1092	; 0x444
 800ec0a:	4013      	ands	r3, r2
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d107      	bne.n	800ec20 <HAL_TIM_OC_Stop_IT+0x150>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f022 0201 	bic.w	r2, r2, #1
 800ec1e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d104      	bne.n	800ec30 <HAL_TIM_OC_Stop_IT+0x160>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2201      	movs	r2, #1
 800ec2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec2e:	e023      	b.n	800ec78 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	2b04      	cmp	r3, #4
 800ec34:	d104      	bne.n	800ec40 <HAL_TIM_OC_Stop_IT+0x170>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2201      	movs	r2, #1
 800ec3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec3e:	e01b      	b.n	800ec78 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	2b08      	cmp	r3, #8
 800ec44:	d104      	bne.n	800ec50 <HAL_TIM_OC_Stop_IT+0x180>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2201      	movs	r2, #1
 800ec4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec4e:	e013      	b.n	800ec78 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	2b0c      	cmp	r3, #12
 800ec54:	d104      	bne.n	800ec60 <HAL_TIM_OC_Stop_IT+0x190>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec5e:	e00b      	b.n	800ec78 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	2b10      	cmp	r3, #16
 800ec64:	d104      	bne.n	800ec70 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2201      	movs	r2, #1
 800ec6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec6e:	e003      	b.n	800ec78 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2201      	movs	r2, #1
 800ec74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ec78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	40010000 	.word	0x40010000
 800ec88:	40010400 	.word	0x40010400
 800ec8c:	40014000 	.word	0x40014000
 800ec90:	40014400 	.word	0x40014400
 800ec94:	40014800 	.word	0x40014800

0800ec98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d101      	bne.n	800ecaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eca6:	2301      	movs	r3, #1
 800eca8:	e049      	b.n	800ed3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d106      	bne.n	800ecc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f000 f841 	bl	800ed46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2202      	movs	r2, #2
 800ecc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	3304      	adds	r3, #4
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	4610      	mov	r0, r2
 800ecd8:	f000 fb70 	bl	800f3bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2201      	movs	r2, #1
 800ece0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2201      	movs	r2, #1
 800ece8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2201      	movs	r2, #1
 800ed08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2201      	movs	r2, #1
 800ed18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2201      	movs	r2, #1
 800ed28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2201      	movs	r2, #1
 800ed38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed3c:	2300      	movs	r3, #0
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3708      	adds	r7, #8
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}

0800ed46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ed46:	b480      	push	{r7}
 800ed48:	b083      	sub	sp, #12
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ed4e:	bf00      	nop
 800ed50:	370c      	adds	r7, #12
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr

0800ed5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ed5a:	b580      	push	{r7, lr}
 800ed5c:	b084      	sub	sp, #16
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	691b      	ldr	r3, [r3, #16]
 800ed70:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	f003 0302 	and.w	r3, r3, #2
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d020      	beq.n	800edbe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f003 0302 	and.w	r3, r3, #2
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d01b      	beq.n	800edbe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f06f 0202 	mvn.w	r2, #2
 800ed8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2201      	movs	r2, #1
 800ed94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	699b      	ldr	r3, [r3, #24]
 800ed9c:	f003 0303 	and.w	r3, r3, #3
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d003      	beq.n	800edac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f000 faeb 	bl	800f380 <HAL_TIM_IC_CaptureCallback>
 800edaa:	e005      	b.n	800edb8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7f1 fc27 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 faee 	bl	800f394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	f003 0304 	and.w	r3, r3, #4
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d020      	beq.n	800ee0a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f003 0304 	and.w	r3, r3, #4
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d01b      	beq.n	800ee0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f06f 0204 	mvn.w	r2, #4
 800edda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2202      	movs	r2, #2
 800ede0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	699b      	ldr	r3, [r3, #24]
 800ede8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edec:	2b00      	cmp	r3, #0
 800edee:	d003      	beq.n	800edf8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f000 fac5 	bl	800f380 <HAL_TIM_IC_CaptureCallback>
 800edf6:	e005      	b.n	800ee04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f7f1 fc01 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 fac8 	bl	800f394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	f003 0308 	and.w	r3, r3, #8
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d020      	beq.n	800ee56 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f003 0308 	and.w	r3, r3, #8
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d01b      	beq.n	800ee56 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f06f 0208 	mvn.w	r2, #8
 800ee26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2204      	movs	r2, #4
 800ee2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	69db      	ldr	r3, [r3, #28]
 800ee34:	f003 0303 	and.w	r3, r3, #3
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d003      	beq.n	800ee44 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f000 fa9f 	bl	800f380 <HAL_TIM_IC_CaptureCallback>
 800ee42:	e005      	b.n	800ee50 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f7f1 fbdb 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 faa2 	bl	800f394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	f003 0310 	and.w	r3, r3, #16
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d020      	beq.n	800eea2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f003 0310 	and.w	r3, r3, #16
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d01b      	beq.n	800eea2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f06f 0210 	mvn.w	r2, #16
 800ee72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2208      	movs	r2, #8
 800ee78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	69db      	ldr	r3, [r3, #28]
 800ee80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d003      	beq.n	800ee90 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 fa79 	bl	800f380 <HAL_TIM_IC_CaptureCallback>
 800ee8e:	e005      	b.n	800ee9c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f7f1 fbb5 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f000 fa7c 	bl	800f394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	f003 0301 	and.w	r3, r3, #1
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d00c      	beq.n	800eec6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f003 0301 	and.w	r3, r3, #1
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d007      	beq.n	800eec6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f06f 0201 	mvn.w	r2, #1
 800eebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7f3 ffcb 	bl	8002e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d104      	bne.n	800eeda <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d00c      	beq.n	800eef4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d007      	beq.n	800eef4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800eeec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 ffba 	bl	800fe68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d00c      	beq.n	800ef18 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d007      	beq.n	800ef18 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ef10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 ffb2 	bl	800fe7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d00c      	beq.n	800ef3c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d007      	beq.n	800ef3c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 fa36 	bl	800f3a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	f003 0320 	and.w	r3, r3, #32
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d00c      	beq.n	800ef60 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f003 0320 	and.w	r3, r3, #32
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d007      	beq.n	800ef60 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f06f 0220 	mvn.w	r2, #32
 800ef58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 ff7a 	bl	800fe54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef60:	bf00      	nop
 800ef62:	3710      	adds	r7, #16
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b086      	sub	sp, #24
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d101      	bne.n	800ef86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ef82:	2302      	movs	r3, #2
 800ef84:	e0ff      	b.n	800f186 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2201      	movs	r2, #1
 800ef8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b14      	cmp	r3, #20
 800ef92:	f200 80f0 	bhi.w	800f176 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ef96:	a201      	add	r2, pc, #4	; (adr r2, 800ef9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ef98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef9c:	0800eff1 	.word	0x0800eff1
 800efa0:	0800f177 	.word	0x0800f177
 800efa4:	0800f177 	.word	0x0800f177
 800efa8:	0800f177 	.word	0x0800f177
 800efac:	0800f031 	.word	0x0800f031
 800efb0:	0800f177 	.word	0x0800f177
 800efb4:	0800f177 	.word	0x0800f177
 800efb8:	0800f177 	.word	0x0800f177
 800efbc:	0800f073 	.word	0x0800f073
 800efc0:	0800f177 	.word	0x0800f177
 800efc4:	0800f177 	.word	0x0800f177
 800efc8:	0800f177 	.word	0x0800f177
 800efcc:	0800f0b3 	.word	0x0800f0b3
 800efd0:	0800f177 	.word	0x0800f177
 800efd4:	0800f177 	.word	0x0800f177
 800efd8:	0800f177 	.word	0x0800f177
 800efdc:	0800f0f5 	.word	0x0800f0f5
 800efe0:	0800f177 	.word	0x0800f177
 800efe4:	0800f177 	.word	0x0800f177
 800efe8:	0800f177 	.word	0x0800f177
 800efec:	0800f135 	.word	0x0800f135
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	68b9      	ldr	r1, [r7, #8]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f000 fa86 	bl	800f508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	699a      	ldr	r2, [r3, #24]
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f042 0208 	orr.w	r2, r2, #8
 800f00a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	699a      	ldr	r2, [r3, #24]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f022 0204 	bic.w	r2, r2, #4
 800f01a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6999      	ldr	r1, [r3, #24]
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	691a      	ldr	r2, [r3, #16]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	430a      	orrs	r2, r1
 800f02c:	619a      	str	r2, [r3, #24]
      break;
 800f02e:	e0a5      	b.n	800f17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	68b9      	ldr	r1, [r7, #8]
 800f036:	4618      	mov	r0, r3
 800f038:	f000 faf6 	bl	800f628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	699a      	ldr	r2, [r3, #24]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f04a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	699a      	ldr	r2, [r3, #24]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f05a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	6999      	ldr	r1, [r3, #24]
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	691b      	ldr	r3, [r3, #16]
 800f066:	021a      	lsls	r2, r3, #8
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	430a      	orrs	r2, r1
 800f06e:	619a      	str	r2, [r3, #24]
      break;
 800f070:	e084      	b.n	800f17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	68b9      	ldr	r1, [r7, #8]
 800f078:	4618      	mov	r0, r3
 800f07a:	f000 fb5f 	bl	800f73c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	69da      	ldr	r2, [r3, #28]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f042 0208 	orr.w	r2, r2, #8
 800f08c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	69da      	ldr	r2, [r3, #28]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f022 0204 	bic.w	r2, r2, #4
 800f09c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	69d9      	ldr	r1, [r3, #28]
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	691a      	ldr	r2, [r3, #16]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	430a      	orrs	r2, r1
 800f0ae:	61da      	str	r2, [r3, #28]
      break;
 800f0b0:	e064      	b.n	800f17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	68b9      	ldr	r1, [r7, #8]
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f000 fbc7 	bl	800f84c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	69da      	ldr	r2, [r3, #28]
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	69da      	ldr	r2, [r3, #28]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	69d9      	ldr	r1, [r3, #28]
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	691b      	ldr	r3, [r3, #16]
 800f0e8:	021a      	lsls	r2, r3, #8
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	430a      	orrs	r2, r1
 800f0f0:	61da      	str	r2, [r3, #28]
      break;
 800f0f2:	e043      	b.n	800f17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	68b9      	ldr	r1, [r7, #8]
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f000 fc10 	bl	800f920 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f042 0208 	orr.w	r2, r2, #8
 800f10e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f022 0204 	bic.w	r2, r2, #4
 800f11e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	691a      	ldr	r2, [r3, #16]
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	430a      	orrs	r2, r1
 800f130:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f132:	e023      	b.n	800f17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	68b9      	ldr	r1, [r7, #8]
 800f13a:	4618      	mov	r0, r3
 800f13c:	f000 fc54 	bl	800f9e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f14e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f15e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	691b      	ldr	r3, [r3, #16]
 800f16a:	021a      	lsls	r2, r3, #8
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	430a      	orrs	r2, r1
 800f172:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f174:	e002      	b.n	800f17c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f176:	2301      	movs	r3, #1
 800f178:	75fb      	strb	r3, [r7, #23]
      break;
 800f17a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2200      	movs	r2, #0
 800f180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f184:	7dfb      	ldrb	r3, [r7, #23]
}
 800f186:	4618      	mov	r0, r3
 800f188:	3718      	adds	r7, #24
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop

0800f190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f19a:	2300      	movs	r3, #0
 800f19c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d101      	bne.n	800f1ac <HAL_TIM_ConfigClockSource+0x1c>
 800f1a8:	2302      	movs	r3, #2
 800f1aa:	e0dc      	b.n	800f366 <HAL_TIM_ConfigClockSource+0x1d6>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2202      	movs	r2, #2
 800f1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f1c4:	68ba      	ldr	r2, [r7, #8]
 800f1c6:	4b6a      	ldr	r3, [pc, #424]	; (800f370 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f1c8:	4013      	ands	r3, r2
 800f1ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f1d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a64      	ldr	r2, [pc, #400]	; (800f374 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	f000 80a9 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1aa>
 800f1e8:	4a62      	ldr	r2, [pc, #392]	; (800f374 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	f200 80ae 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f1f0:	4a61      	ldr	r2, [pc, #388]	; (800f378 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	f000 80a1 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1aa>
 800f1f8:	4a5f      	ldr	r2, [pc, #380]	; (800f378 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	f200 80a6 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f200:	4a5e      	ldr	r2, [pc, #376]	; (800f37c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f202:	4293      	cmp	r3, r2
 800f204:	f000 8099 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1aa>
 800f208:	4a5c      	ldr	r2, [pc, #368]	; (800f37c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	f200 809e 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f210:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f214:	f000 8091 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1aa>
 800f218:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f21c:	f200 8096 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f224:	f000 8089 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1aa>
 800f228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f22c:	f200 808e 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f234:	d03e      	beq.n	800f2b4 <HAL_TIM_ConfigClockSource+0x124>
 800f236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f23a:	f200 8087 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f23e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f242:	f000 8086 	beq.w	800f352 <HAL_TIM_ConfigClockSource+0x1c2>
 800f246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f24a:	d87f      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f24c:	2b70      	cmp	r3, #112	; 0x70
 800f24e:	d01a      	beq.n	800f286 <HAL_TIM_ConfigClockSource+0xf6>
 800f250:	2b70      	cmp	r3, #112	; 0x70
 800f252:	d87b      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f254:	2b60      	cmp	r3, #96	; 0x60
 800f256:	d050      	beq.n	800f2fa <HAL_TIM_ConfigClockSource+0x16a>
 800f258:	2b60      	cmp	r3, #96	; 0x60
 800f25a:	d877      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f25c:	2b50      	cmp	r3, #80	; 0x50
 800f25e:	d03c      	beq.n	800f2da <HAL_TIM_ConfigClockSource+0x14a>
 800f260:	2b50      	cmp	r3, #80	; 0x50
 800f262:	d873      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f264:	2b40      	cmp	r3, #64	; 0x40
 800f266:	d058      	beq.n	800f31a <HAL_TIM_ConfigClockSource+0x18a>
 800f268:	2b40      	cmp	r3, #64	; 0x40
 800f26a:	d86f      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f26c:	2b30      	cmp	r3, #48	; 0x30
 800f26e:	d064      	beq.n	800f33a <HAL_TIM_ConfigClockSource+0x1aa>
 800f270:	2b30      	cmp	r3, #48	; 0x30
 800f272:	d86b      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f274:	2b20      	cmp	r3, #32
 800f276:	d060      	beq.n	800f33a <HAL_TIM_ConfigClockSource+0x1aa>
 800f278:	2b20      	cmp	r3, #32
 800f27a:	d867      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d05c      	beq.n	800f33a <HAL_TIM_ConfigClockSource+0x1aa>
 800f280:	2b10      	cmp	r3, #16
 800f282:	d05a      	beq.n	800f33a <HAL_TIM_ConfigClockSource+0x1aa>
 800f284:	e062      	b.n	800f34c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6818      	ldr	r0, [r3, #0]
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	6899      	ldr	r1, [r3, #8]
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	685a      	ldr	r2, [r3, #4]
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	f000 fc8b 	bl	800fbb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	689b      	ldr	r3, [r3, #8]
 800f2a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f2a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68ba      	ldr	r2, [r7, #8]
 800f2b0:	609a      	str	r2, [r3, #8]
      break;
 800f2b2:	e04f      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6818      	ldr	r0, [r3, #0]
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	6899      	ldr	r1, [r3, #8]
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	685a      	ldr	r2, [r3, #4]
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	68db      	ldr	r3, [r3, #12]
 800f2c4:	f000 fc74 	bl	800fbb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	689a      	ldr	r2, [r3, #8]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f2d6:	609a      	str	r2, [r3, #8]
      break;
 800f2d8:	e03c      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6818      	ldr	r0, [r3, #0]
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	6859      	ldr	r1, [r3, #4]
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	f000 fbe4 	bl	800fab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2150      	movs	r1, #80	; 0x50
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f000 fc3e 	bl	800fb74 <TIM_ITRx_SetConfig>
      break;
 800f2f8:	e02c      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6818      	ldr	r0, [r3, #0]
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	6859      	ldr	r1, [r3, #4]
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	461a      	mov	r2, r3
 800f308:	f000 fc03 	bl	800fb12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2160      	movs	r1, #96	; 0x60
 800f312:	4618      	mov	r0, r3
 800f314:	f000 fc2e 	bl	800fb74 <TIM_ITRx_SetConfig>
      break;
 800f318:	e01c      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6818      	ldr	r0, [r3, #0]
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	6859      	ldr	r1, [r3, #4]
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	461a      	mov	r2, r3
 800f328:	f000 fbc4 	bl	800fab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2140      	movs	r1, #64	; 0x40
 800f332:	4618      	mov	r0, r3
 800f334:	f000 fc1e 	bl	800fb74 <TIM_ITRx_SetConfig>
      break;
 800f338:	e00c      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4619      	mov	r1, r3
 800f344:	4610      	mov	r0, r2
 800f346:	f000 fc15 	bl	800fb74 <TIM_ITRx_SetConfig>
      break;
 800f34a:	e003      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f34c:	2301      	movs	r3, #1
 800f34e:	73fb      	strb	r3, [r7, #15]
      break;
 800f350:	e000      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2201      	movs	r2, #1
 800f358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f364:	7bfb      	ldrb	r3, [r7, #15]
}
 800f366:	4618      	mov	r0, r3
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	ffceff88 	.word	0xffceff88
 800f374:	00100040 	.word	0x00100040
 800f378:	00100030 	.word	0x00100030
 800f37c:	00100020 	.word	0x00100020

0800f380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f380:	b480      	push	{r7}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f388:	bf00      	nop
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f394:	b480      	push	{r7}
 800f396:	b083      	sub	sp, #12
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f39c:	bf00      	nop
 800f39e:	370c      	adds	r7, #12
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a6:	4770      	bx	lr

0800f3a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f3b0:	bf00      	nop
 800f3b2:	370c      	adds	r7, #12
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	4a46      	ldr	r2, [pc, #280]	; (800f4e8 <TIM_Base_SetConfig+0x12c>)
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d013      	beq.n	800f3fc <TIM_Base_SetConfig+0x40>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3da:	d00f      	beq.n	800f3fc <TIM_Base_SetConfig+0x40>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4a43      	ldr	r2, [pc, #268]	; (800f4ec <TIM_Base_SetConfig+0x130>)
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d00b      	beq.n	800f3fc <TIM_Base_SetConfig+0x40>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4a42      	ldr	r2, [pc, #264]	; (800f4f0 <TIM_Base_SetConfig+0x134>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d007      	beq.n	800f3fc <TIM_Base_SetConfig+0x40>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4a41      	ldr	r2, [pc, #260]	; (800f4f4 <TIM_Base_SetConfig+0x138>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d003      	beq.n	800f3fc <TIM_Base_SetConfig+0x40>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	4a40      	ldr	r2, [pc, #256]	; (800f4f8 <TIM_Base_SetConfig+0x13c>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d108      	bne.n	800f40e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	4313      	orrs	r3, r2
 800f40c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4a35      	ldr	r2, [pc, #212]	; (800f4e8 <TIM_Base_SetConfig+0x12c>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d01f      	beq.n	800f456 <TIM_Base_SetConfig+0x9a>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f41c:	d01b      	beq.n	800f456 <TIM_Base_SetConfig+0x9a>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4a32      	ldr	r2, [pc, #200]	; (800f4ec <TIM_Base_SetConfig+0x130>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d017      	beq.n	800f456 <TIM_Base_SetConfig+0x9a>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	4a31      	ldr	r2, [pc, #196]	; (800f4f0 <TIM_Base_SetConfig+0x134>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d013      	beq.n	800f456 <TIM_Base_SetConfig+0x9a>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4a30      	ldr	r2, [pc, #192]	; (800f4f4 <TIM_Base_SetConfig+0x138>)
 800f432:	4293      	cmp	r3, r2
 800f434:	d00f      	beq.n	800f456 <TIM_Base_SetConfig+0x9a>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4a2f      	ldr	r2, [pc, #188]	; (800f4f8 <TIM_Base_SetConfig+0x13c>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d00b      	beq.n	800f456 <TIM_Base_SetConfig+0x9a>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4a2e      	ldr	r2, [pc, #184]	; (800f4fc <TIM_Base_SetConfig+0x140>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d007      	beq.n	800f456 <TIM_Base_SetConfig+0x9a>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4a2d      	ldr	r2, [pc, #180]	; (800f500 <TIM_Base_SetConfig+0x144>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d003      	beq.n	800f456 <TIM_Base_SetConfig+0x9a>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4a2c      	ldr	r2, [pc, #176]	; (800f504 <TIM_Base_SetConfig+0x148>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d108      	bne.n	800f468 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f45c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	68fa      	ldr	r2, [r7, #12]
 800f464:	4313      	orrs	r3, r2
 800f466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	695b      	ldr	r3, [r3, #20]
 800f472:	4313      	orrs	r3, r2
 800f474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	689a      	ldr	r2, [r3, #8]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	681a      	ldr	r2, [r3, #0]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4a16      	ldr	r2, [pc, #88]	; (800f4e8 <TIM_Base_SetConfig+0x12c>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d00f      	beq.n	800f4b4 <TIM_Base_SetConfig+0xf8>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a18      	ldr	r2, [pc, #96]	; (800f4f8 <TIM_Base_SetConfig+0x13c>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d00b      	beq.n	800f4b4 <TIM_Base_SetConfig+0xf8>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4a17      	ldr	r2, [pc, #92]	; (800f4fc <TIM_Base_SetConfig+0x140>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d007      	beq.n	800f4b4 <TIM_Base_SetConfig+0xf8>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4a16      	ldr	r2, [pc, #88]	; (800f500 <TIM_Base_SetConfig+0x144>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d003      	beq.n	800f4b4 <TIM_Base_SetConfig+0xf8>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4a15      	ldr	r2, [pc, #84]	; (800f504 <TIM_Base_SetConfig+0x148>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d103      	bne.n	800f4bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	691a      	ldr	r2, [r3, #16]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	691b      	ldr	r3, [r3, #16]
 800f4c6:	f003 0301 	and.w	r3, r3, #1
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	d105      	bne.n	800f4da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	691b      	ldr	r3, [r3, #16]
 800f4d2:	f023 0201 	bic.w	r2, r3, #1
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	611a      	str	r2, [r3, #16]
  }
}
 800f4da:	bf00      	nop
 800f4dc:	3714      	adds	r7, #20
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr
 800f4e6:	bf00      	nop
 800f4e8:	40010000 	.word	0x40010000
 800f4ec:	40000400 	.word	0x40000400
 800f4f0:	40000800 	.word	0x40000800
 800f4f4:	40000c00 	.word	0x40000c00
 800f4f8:	40010400 	.word	0x40010400
 800f4fc:	40014000 	.word	0x40014000
 800f500:	40014400 	.word	0x40014400
 800f504:	40014800 	.word	0x40014800

0800f508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f508:	b480      	push	{r7}
 800f50a:	b087      	sub	sp, #28
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6a1b      	ldr	r3, [r3, #32]
 800f516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6a1b      	ldr	r3, [r3, #32]
 800f51c:	f023 0201 	bic.w	r2, r3, #1
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	699b      	ldr	r3, [r3, #24]
 800f52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	4b37      	ldr	r3, [pc, #220]	; (800f610 <TIM_OC1_SetConfig+0x108>)
 800f534:	4013      	ands	r3, r2
 800f536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f023 0303 	bic.w	r3, r3, #3
 800f53e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	68fa      	ldr	r2, [r7, #12]
 800f546:	4313      	orrs	r3, r2
 800f548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	f023 0302 	bic.w	r3, r3, #2
 800f550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	697a      	ldr	r2, [r7, #20]
 800f558:	4313      	orrs	r3, r2
 800f55a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4a2d      	ldr	r2, [pc, #180]	; (800f614 <TIM_OC1_SetConfig+0x10c>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d00f      	beq.n	800f584 <TIM_OC1_SetConfig+0x7c>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4a2c      	ldr	r2, [pc, #176]	; (800f618 <TIM_OC1_SetConfig+0x110>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d00b      	beq.n	800f584 <TIM_OC1_SetConfig+0x7c>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4a2b      	ldr	r2, [pc, #172]	; (800f61c <TIM_OC1_SetConfig+0x114>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d007      	beq.n	800f584 <TIM_OC1_SetConfig+0x7c>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4a2a      	ldr	r2, [pc, #168]	; (800f620 <TIM_OC1_SetConfig+0x118>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d003      	beq.n	800f584 <TIM_OC1_SetConfig+0x7c>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	4a29      	ldr	r2, [pc, #164]	; (800f624 <TIM_OC1_SetConfig+0x11c>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d10c      	bne.n	800f59e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	f023 0308 	bic.w	r3, r3, #8
 800f58a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	697a      	ldr	r2, [r7, #20]
 800f592:	4313      	orrs	r3, r2
 800f594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	f023 0304 	bic.w	r3, r3, #4
 800f59c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4a1c      	ldr	r2, [pc, #112]	; (800f614 <TIM_OC1_SetConfig+0x10c>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d00f      	beq.n	800f5c6 <TIM_OC1_SetConfig+0xbe>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	4a1b      	ldr	r2, [pc, #108]	; (800f618 <TIM_OC1_SetConfig+0x110>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d00b      	beq.n	800f5c6 <TIM_OC1_SetConfig+0xbe>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4a1a      	ldr	r2, [pc, #104]	; (800f61c <TIM_OC1_SetConfig+0x114>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d007      	beq.n	800f5c6 <TIM_OC1_SetConfig+0xbe>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4a19      	ldr	r2, [pc, #100]	; (800f620 <TIM_OC1_SetConfig+0x118>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d003      	beq.n	800f5c6 <TIM_OC1_SetConfig+0xbe>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4a18      	ldr	r2, [pc, #96]	; (800f624 <TIM_OC1_SetConfig+0x11c>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d111      	bne.n	800f5ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f5cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f5d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	695b      	ldr	r3, [r3, #20]
 800f5da:	693a      	ldr	r2, [r7, #16]
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	699b      	ldr	r3, [r3, #24]
 800f5e4:	693a      	ldr	r2, [r7, #16]
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	693a      	ldr	r2, [r7, #16]
 800f5ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	685a      	ldr	r2, [r3, #4]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	697a      	ldr	r2, [r7, #20]
 800f602:	621a      	str	r2, [r3, #32]
}
 800f604:	bf00      	nop
 800f606:	371c      	adds	r7, #28
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr
 800f610:	fffeff8f 	.word	0xfffeff8f
 800f614:	40010000 	.word	0x40010000
 800f618:	40010400 	.word	0x40010400
 800f61c:	40014000 	.word	0x40014000
 800f620:	40014400 	.word	0x40014400
 800f624:	40014800 	.word	0x40014800

0800f628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f628:	b480      	push	{r7}
 800f62a:	b087      	sub	sp, #28
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6a1b      	ldr	r3, [r3, #32]
 800f636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6a1b      	ldr	r3, [r3, #32]
 800f63c:	f023 0210 	bic.w	r2, r3, #16
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	699b      	ldr	r3, [r3, #24]
 800f64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f650:	68fa      	ldr	r2, [r7, #12]
 800f652:	4b34      	ldr	r3, [pc, #208]	; (800f724 <TIM_OC2_SetConfig+0xfc>)
 800f654:	4013      	ands	r3, r2
 800f656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f65e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	021b      	lsls	r3, r3, #8
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	4313      	orrs	r3, r2
 800f66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	f023 0320 	bic.w	r3, r3, #32
 800f672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	689b      	ldr	r3, [r3, #8]
 800f678:	011b      	lsls	r3, r3, #4
 800f67a:	697a      	ldr	r2, [r7, #20]
 800f67c:	4313      	orrs	r3, r2
 800f67e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	4a29      	ldr	r2, [pc, #164]	; (800f728 <TIM_OC2_SetConfig+0x100>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d003      	beq.n	800f690 <TIM_OC2_SetConfig+0x68>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4a28      	ldr	r2, [pc, #160]	; (800f72c <TIM_OC2_SetConfig+0x104>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d10d      	bne.n	800f6ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	68db      	ldr	r3, [r3, #12]
 800f69c:	011b      	lsls	r3, r3, #4
 800f69e:	697a      	ldr	r2, [r7, #20]
 800f6a0:	4313      	orrs	r3, r2
 800f6a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	4a1e      	ldr	r2, [pc, #120]	; (800f728 <TIM_OC2_SetConfig+0x100>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d00f      	beq.n	800f6d4 <TIM_OC2_SetConfig+0xac>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4a1d      	ldr	r2, [pc, #116]	; (800f72c <TIM_OC2_SetConfig+0x104>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d00b      	beq.n	800f6d4 <TIM_OC2_SetConfig+0xac>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4a1c      	ldr	r2, [pc, #112]	; (800f730 <TIM_OC2_SetConfig+0x108>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d007      	beq.n	800f6d4 <TIM_OC2_SetConfig+0xac>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4a1b      	ldr	r2, [pc, #108]	; (800f734 <TIM_OC2_SetConfig+0x10c>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d003      	beq.n	800f6d4 <TIM_OC2_SetConfig+0xac>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4a1a      	ldr	r2, [pc, #104]	; (800f738 <TIM_OC2_SetConfig+0x110>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d113      	bne.n	800f6fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f6da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f6e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	695b      	ldr	r3, [r3, #20]
 800f6e8:	009b      	lsls	r3, r3, #2
 800f6ea:	693a      	ldr	r2, [r7, #16]
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	699b      	ldr	r3, [r3, #24]
 800f6f4:	009b      	lsls	r3, r3, #2
 800f6f6:	693a      	ldr	r2, [r7, #16]
 800f6f8:	4313      	orrs	r3, r2
 800f6fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	693a      	ldr	r2, [r7, #16]
 800f700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	68fa      	ldr	r2, [r7, #12]
 800f706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	685a      	ldr	r2, [r3, #4]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	697a      	ldr	r2, [r7, #20]
 800f714:	621a      	str	r2, [r3, #32]
}
 800f716:	bf00      	nop
 800f718:	371c      	adds	r7, #28
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr
 800f722:	bf00      	nop
 800f724:	feff8fff 	.word	0xfeff8fff
 800f728:	40010000 	.word	0x40010000
 800f72c:	40010400 	.word	0x40010400
 800f730:	40014000 	.word	0x40014000
 800f734:	40014400 	.word	0x40014400
 800f738:	40014800 	.word	0x40014800

0800f73c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b087      	sub	sp, #28
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a1b      	ldr	r3, [r3, #32]
 800f74a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6a1b      	ldr	r3, [r3, #32]
 800f750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	69db      	ldr	r3, [r3, #28]
 800f762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	4b33      	ldr	r3, [pc, #204]	; (800f834 <TIM_OC3_SetConfig+0xf8>)
 800f768:	4013      	ands	r3, r2
 800f76a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	f023 0303 	bic.w	r3, r3, #3
 800f772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	68fa      	ldr	r2, [r7, #12]
 800f77a:	4313      	orrs	r3, r2
 800f77c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	689b      	ldr	r3, [r3, #8]
 800f78a:	021b      	lsls	r3, r3, #8
 800f78c:	697a      	ldr	r2, [r7, #20]
 800f78e:	4313      	orrs	r3, r2
 800f790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	4a28      	ldr	r2, [pc, #160]	; (800f838 <TIM_OC3_SetConfig+0xfc>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d003      	beq.n	800f7a2 <TIM_OC3_SetConfig+0x66>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	4a27      	ldr	r2, [pc, #156]	; (800f83c <TIM_OC3_SetConfig+0x100>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d10d      	bne.n	800f7be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	021b      	lsls	r3, r3, #8
 800f7b0:	697a      	ldr	r2, [r7, #20]
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f7bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	4a1d      	ldr	r2, [pc, #116]	; (800f838 <TIM_OC3_SetConfig+0xfc>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d00f      	beq.n	800f7e6 <TIM_OC3_SetConfig+0xaa>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	4a1c      	ldr	r2, [pc, #112]	; (800f83c <TIM_OC3_SetConfig+0x100>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d00b      	beq.n	800f7e6 <TIM_OC3_SetConfig+0xaa>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4a1b      	ldr	r2, [pc, #108]	; (800f840 <TIM_OC3_SetConfig+0x104>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d007      	beq.n	800f7e6 <TIM_OC3_SetConfig+0xaa>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	4a1a      	ldr	r2, [pc, #104]	; (800f844 <TIM_OC3_SetConfig+0x108>)
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d003      	beq.n	800f7e6 <TIM_OC3_SetConfig+0xaa>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4a19      	ldr	r2, [pc, #100]	; (800f848 <TIM_OC3_SetConfig+0x10c>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d113      	bne.n	800f80e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f7ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f7f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	695b      	ldr	r3, [r3, #20]
 800f7fa:	011b      	lsls	r3, r3, #4
 800f7fc:	693a      	ldr	r2, [r7, #16]
 800f7fe:	4313      	orrs	r3, r2
 800f800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	699b      	ldr	r3, [r3, #24]
 800f806:	011b      	lsls	r3, r3, #4
 800f808:	693a      	ldr	r2, [r7, #16]
 800f80a:	4313      	orrs	r3, r2
 800f80c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	693a      	ldr	r2, [r7, #16]
 800f812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	685a      	ldr	r2, [r3, #4]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	697a      	ldr	r2, [r7, #20]
 800f826:	621a      	str	r2, [r3, #32]
}
 800f828:	bf00      	nop
 800f82a:	371c      	adds	r7, #28
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr
 800f834:	fffeff8f 	.word	0xfffeff8f
 800f838:	40010000 	.word	0x40010000
 800f83c:	40010400 	.word	0x40010400
 800f840:	40014000 	.word	0x40014000
 800f844:	40014400 	.word	0x40014400
 800f848:	40014800 	.word	0x40014800

0800f84c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b087      	sub	sp, #28
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6a1b      	ldr	r3, [r3, #32]
 800f85a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6a1b      	ldr	r3, [r3, #32]
 800f860:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	69db      	ldr	r3, [r3, #28]
 800f872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f874:	68fa      	ldr	r2, [r7, #12]
 800f876:	4b24      	ldr	r3, [pc, #144]	; (800f908 <TIM_OC4_SetConfig+0xbc>)
 800f878:	4013      	ands	r3, r2
 800f87a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	021b      	lsls	r3, r3, #8
 800f88a:	68fa      	ldr	r2, [r7, #12]
 800f88c:	4313      	orrs	r3, r2
 800f88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	031b      	lsls	r3, r3, #12
 800f89e:	693a      	ldr	r2, [r7, #16]
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	4a19      	ldr	r2, [pc, #100]	; (800f90c <TIM_OC4_SetConfig+0xc0>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d00f      	beq.n	800f8cc <TIM_OC4_SetConfig+0x80>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a18      	ldr	r2, [pc, #96]	; (800f910 <TIM_OC4_SetConfig+0xc4>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d00b      	beq.n	800f8cc <TIM_OC4_SetConfig+0x80>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	4a17      	ldr	r2, [pc, #92]	; (800f914 <TIM_OC4_SetConfig+0xc8>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d007      	beq.n	800f8cc <TIM_OC4_SetConfig+0x80>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4a16      	ldr	r2, [pc, #88]	; (800f918 <TIM_OC4_SetConfig+0xcc>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d003      	beq.n	800f8cc <TIM_OC4_SetConfig+0x80>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4a15      	ldr	r2, [pc, #84]	; (800f91c <TIM_OC4_SetConfig+0xd0>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d109      	bne.n	800f8e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f8d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	695b      	ldr	r3, [r3, #20]
 800f8d8:	019b      	lsls	r3, r3, #6
 800f8da:	697a      	ldr	r2, [r7, #20]
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	697a      	ldr	r2, [r7, #20]
 800f8e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	68fa      	ldr	r2, [r7, #12]
 800f8ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	685a      	ldr	r2, [r3, #4]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	693a      	ldr	r2, [r7, #16]
 800f8f8:	621a      	str	r2, [r3, #32]
}
 800f8fa:	bf00      	nop
 800f8fc:	371c      	adds	r7, #28
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr
 800f906:	bf00      	nop
 800f908:	feff8fff 	.word	0xfeff8fff
 800f90c:	40010000 	.word	0x40010000
 800f910:	40010400 	.word	0x40010400
 800f914:	40014000 	.word	0x40014000
 800f918:	40014400 	.word	0x40014400
 800f91c:	40014800 	.word	0x40014800

0800f920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f920:	b480      	push	{r7}
 800f922:	b087      	sub	sp, #28
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6a1b      	ldr	r3, [r3, #32]
 800f92e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6a1b      	ldr	r3, [r3, #32]
 800f934:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f948:	68fa      	ldr	r2, [r7, #12]
 800f94a:	4b21      	ldr	r3, [pc, #132]	; (800f9d0 <TIM_OC5_SetConfig+0xb0>)
 800f94c:	4013      	ands	r3, r2
 800f94e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	4313      	orrs	r3, r2
 800f958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f960:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	689b      	ldr	r3, [r3, #8]
 800f966:	041b      	lsls	r3, r3, #16
 800f968:	693a      	ldr	r2, [r7, #16]
 800f96a:	4313      	orrs	r3, r2
 800f96c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4a18      	ldr	r2, [pc, #96]	; (800f9d4 <TIM_OC5_SetConfig+0xb4>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d00f      	beq.n	800f996 <TIM_OC5_SetConfig+0x76>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4a17      	ldr	r2, [pc, #92]	; (800f9d8 <TIM_OC5_SetConfig+0xb8>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d00b      	beq.n	800f996 <TIM_OC5_SetConfig+0x76>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4a16      	ldr	r2, [pc, #88]	; (800f9dc <TIM_OC5_SetConfig+0xbc>)
 800f982:	4293      	cmp	r3, r2
 800f984:	d007      	beq.n	800f996 <TIM_OC5_SetConfig+0x76>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4a15      	ldr	r2, [pc, #84]	; (800f9e0 <TIM_OC5_SetConfig+0xc0>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d003      	beq.n	800f996 <TIM_OC5_SetConfig+0x76>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4a14      	ldr	r2, [pc, #80]	; (800f9e4 <TIM_OC5_SetConfig+0xc4>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d109      	bne.n	800f9aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f99c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	695b      	ldr	r3, [r3, #20]
 800f9a2:	021b      	lsls	r3, r3, #8
 800f9a4:	697a      	ldr	r2, [r7, #20]
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	697a      	ldr	r2, [r7, #20]
 800f9ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	68fa      	ldr	r2, [r7, #12]
 800f9b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	685a      	ldr	r2, [r3, #4]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	693a      	ldr	r2, [r7, #16]
 800f9c2:	621a      	str	r2, [r3, #32]
}
 800f9c4:	bf00      	nop
 800f9c6:	371c      	adds	r7, #28
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr
 800f9d0:	fffeff8f 	.word	0xfffeff8f
 800f9d4:	40010000 	.word	0x40010000
 800f9d8:	40010400 	.word	0x40010400
 800f9dc:	40014000 	.word	0x40014000
 800f9e0:	40014400 	.word	0x40014400
 800f9e4:	40014800 	.word	0x40014800

0800f9e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b087      	sub	sp, #28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6a1b      	ldr	r3, [r3, #32]
 800f9f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6a1b      	ldr	r3, [r3, #32]
 800f9fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	4b22      	ldr	r3, [pc, #136]	; (800fa9c <TIM_OC6_SetConfig+0xb4>)
 800fa14:	4013      	ands	r3, r2
 800fa16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	021b      	lsls	r3, r3, #8
 800fa1e:	68fa      	ldr	r2, [r7, #12]
 800fa20:	4313      	orrs	r3, r2
 800fa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	689b      	ldr	r3, [r3, #8]
 800fa30:	051b      	lsls	r3, r3, #20
 800fa32:	693a      	ldr	r2, [r7, #16]
 800fa34:	4313      	orrs	r3, r2
 800fa36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4a19      	ldr	r2, [pc, #100]	; (800faa0 <TIM_OC6_SetConfig+0xb8>)
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d00f      	beq.n	800fa60 <TIM_OC6_SetConfig+0x78>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4a18      	ldr	r2, [pc, #96]	; (800faa4 <TIM_OC6_SetConfig+0xbc>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d00b      	beq.n	800fa60 <TIM_OC6_SetConfig+0x78>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4a17      	ldr	r2, [pc, #92]	; (800faa8 <TIM_OC6_SetConfig+0xc0>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d007      	beq.n	800fa60 <TIM_OC6_SetConfig+0x78>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4a16      	ldr	r2, [pc, #88]	; (800faac <TIM_OC6_SetConfig+0xc4>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d003      	beq.n	800fa60 <TIM_OC6_SetConfig+0x78>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4a15      	ldr	r2, [pc, #84]	; (800fab0 <TIM_OC6_SetConfig+0xc8>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d109      	bne.n	800fa74 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fa66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	695b      	ldr	r3, [r3, #20]
 800fa6c:	029b      	lsls	r3, r3, #10
 800fa6e:	697a      	ldr	r2, [r7, #20]
 800fa70:	4313      	orrs	r3, r2
 800fa72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	697a      	ldr	r2, [r7, #20]
 800fa78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	685a      	ldr	r2, [r3, #4]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	693a      	ldr	r2, [r7, #16]
 800fa8c:	621a      	str	r2, [r3, #32]
}
 800fa8e:	bf00      	nop
 800fa90:	371c      	adds	r7, #28
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	feff8fff 	.word	0xfeff8fff
 800faa0:	40010000 	.word	0x40010000
 800faa4:	40010400 	.word	0x40010400
 800faa8:	40014000 	.word	0x40014000
 800faac:	40014400 	.word	0x40014400
 800fab0:	40014800 	.word	0x40014800

0800fab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b087      	sub	sp, #28
 800fab8:	af00      	add	r7, sp, #0
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	6a1b      	ldr	r3, [r3, #32]
 800fac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	6a1b      	ldr	r3, [r3, #32]
 800faca:	f023 0201 	bic.w	r2, r3, #1
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	699b      	ldr	r3, [r3, #24]
 800fad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	011b      	lsls	r3, r3, #4
 800fae4:	693a      	ldr	r2, [r7, #16]
 800fae6:	4313      	orrs	r3, r2
 800fae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	f023 030a 	bic.w	r3, r3, #10
 800faf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800faf2:	697a      	ldr	r2, [r7, #20]
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	4313      	orrs	r3, r2
 800faf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	693a      	ldr	r2, [r7, #16]
 800fafe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	697a      	ldr	r2, [r7, #20]
 800fb04:	621a      	str	r2, [r3, #32]
}
 800fb06:	bf00      	nop
 800fb08:	371c      	adds	r7, #28
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb12:	b480      	push	{r7}
 800fb14:	b087      	sub	sp, #28
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	60f8      	str	r0, [r7, #12]
 800fb1a:	60b9      	str	r1, [r7, #8]
 800fb1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	6a1b      	ldr	r3, [r3, #32]
 800fb22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6a1b      	ldr	r3, [r3, #32]
 800fb28:	f023 0210 	bic.w	r2, r3, #16
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	699b      	ldr	r3, [r3, #24]
 800fb34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fb3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	031b      	lsls	r3, r3, #12
 800fb42:	693a      	ldr	r2, [r7, #16]
 800fb44:	4313      	orrs	r3, r2
 800fb46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fb4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	011b      	lsls	r3, r3, #4
 800fb54:	697a      	ldr	r2, [r7, #20]
 800fb56:	4313      	orrs	r3, r2
 800fb58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	693a      	ldr	r2, [r7, #16]
 800fb5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	697a      	ldr	r2, [r7, #20]
 800fb64:	621a      	str	r2, [r3, #32]
}
 800fb66:	bf00      	nop
 800fb68:	371c      	adds	r7, #28
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
	...

0800fb74 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b085      	sub	sp, #20
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	689b      	ldr	r3, [r3, #8]
 800fb82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fb84:	68fa      	ldr	r2, [r7, #12]
 800fb86:	4b09      	ldr	r3, [pc, #36]	; (800fbac <TIM_ITRx_SetConfig+0x38>)
 800fb88:	4013      	ands	r3, r2
 800fb8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fb8c:	683a      	ldr	r2, [r7, #0]
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	4313      	orrs	r3, r2
 800fb92:	f043 0307 	orr.w	r3, r3, #7
 800fb96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68fa      	ldr	r2, [r7, #12]
 800fb9c:	609a      	str	r2, [r3, #8]
}
 800fb9e:	bf00      	nop
 800fba0:	3714      	adds	r7, #20
 800fba2:	46bd      	mov	sp, r7
 800fba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba8:	4770      	bx	lr
 800fbaa:	bf00      	nop
 800fbac:	ffcfff8f 	.word	0xffcfff8f

0800fbb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b087      	sub	sp, #28
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	607a      	str	r2, [r7, #4]
 800fbbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	689b      	ldr	r3, [r3, #8]
 800fbc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fbca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	021a      	lsls	r2, r3, #8
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	431a      	orrs	r2, r3
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	697a      	ldr	r2, [r7, #20]
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	697a      	ldr	r2, [r7, #20]
 800fbe2:	609a      	str	r2, [r3, #8]
}
 800fbe4:	bf00      	nop
 800fbe6:	371c      	adds	r7, #28
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b087      	sub	sp, #28
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	f003 031f 	and.w	r3, r3, #31
 800fc02:	2201      	movs	r2, #1
 800fc04:	fa02 f303 	lsl.w	r3, r2, r3
 800fc08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	6a1a      	ldr	r2, [r3, #32]
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	43db      	mvns	r3, r3
 800fc12:	401a      	ands	r2, r3
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	6a1a      	ldr	r2, [r3, #32]
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	f003 031f 	and.w	r3, r3, #31
 800fc22:	6879      	ldr	r1, [r7, #4]
 800fc24:	fa01 f303 	lsl.w	r3, r1, r3
 800fc28:	431a      	orrs	r2, r3
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	621a      	str	r2, [r3, #32]
}
 800fc2e:	bf00      	nop
 800fc30:	371c      	adds	r7, #28
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr
	...

0800fc3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d101      	bne.n	800fc54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc50:	2302      	movs	r3, #2
 800fc52:	e06d      	b.n	800fd30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2201      	movs	r2, #1
 800fc58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2202      	movs	r2, #2
 800fc60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	689b      	ldr	r3, [r3, #8]
 800fc72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4a30      	ldr	r2, [pc, #192]	; (800fd3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d004      	beq.n	800fc88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4a2f      	ldr	r2, [pc, #188]	; (800fd40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d108      	bne.n	800fc9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fc8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	68fa      	ldr	r2, [r7, #12]
 800fc96:	4313      	orrs	r3, r2
 800fc98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fca0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	68fa      	ldr	r2, [r7, #12]
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	68fa      	ldr	r2, [r7, #12]
 800fcb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a20      	ldr	r2, [pc, #128]	; (800fd3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d022      	beq.n	800fd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcc6:	d01d      	beq.n	800fd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a1d      	ldr	r2, [pc, #116]	; (800fd44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d018      	beq.n	800fd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a1c      	ldr	r2, [pc, #112]	; (800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d013      	beq.n	800fd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4a1a      	ldr	r2, [pc, #104]	; (800fd4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d00e      	beq.n	800fd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a15      	ldr	r2, [pc, #84]	; (800fd40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d009      	beq.n	800fd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a16      	ldr	r2, [pc, #88]	; (800fd50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d004      	beq.n	800fd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4a15      	ldr	r2, [pc, #84]	; (800fd54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d10c      	bne.n	800fd1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	689b      	ldr	r3, [r3, #8]
 800fd10:	68ba      	ldr	r2, [r7, #8]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	68ba      	ldr	r2, [r7, #8]
 800fd1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2201      	movs	r2, #1
 800fd22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3714      	adds	r7, #20
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr
 800fd3c:	40010000 	.word	0x40010000
 800fd40:	40010400 	.word	0x40010400
 800fd44:	40000400 	.word	0x40000400
 800fd48:	40000800 	.word	0x40000800
 800fd4c:	40000c00 	.word	0x40000c00
 800fd50:	40001800 	.word	0x40001800
 800fd54:	40014000 	.word	0x40014000

0800fd58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b085      	sub	sp, #20
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fd62:	2300      	movs	r3, #0
 800fd64:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	d101      	bne.n	800fd74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fd70:	2302      	movs	r3, #2
 800fd72:	e065      	b.n	800fe40 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2201      	movs	r2, #1
 800fd78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	68db      	ldr	r3, [r3, #12]
 800fd86:	4313      	orrs	r3, r2
 800fd88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	689b      	ldr	r3, [r3, #8]
 800fd94:	4313      	orrs	r3, r2
 800fd96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	4313      	orrs	r3, r2
 800fda4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	691b      	ldr	r3, [r3, #16]
 800fdbe:	4313      	orrs	r3, r2
 800fdc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	695b      	ldr	r3, [r3, #20]
 800fdcc:	4313      	orrs	r3, r2
 800fdce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdda:	4313      	orrs	r3, r2
 800fddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	699b      	ldr	r3, [r3, #24]
 800fde8:	041b      	lsls	r3, r3, #16
 800fdea:	4313      	orrs	r3, r2
 800fdec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4a16      	ldr	r2, [pc, #88]	; (800fe4c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d004      	beq.n	800fe02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a14      	ldr	r2, [pc, #80]	; (800fe50 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d115      	bne.n	800fe2e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0c:	051b      	lsls	r3, r3, #20
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	69db      	ldr	r3, [r3, #28]
 800fe1c:	4313      	orrs	r3, r2
 800fe1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	6a1b      	ldr	r3, [r3, #32]
 800fe2a:	4313      	orrs	r3, r2
 800fe2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	68fa      	ldr	r2, [r7, #12]
 800fe34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe3e:	2300      	movs	r3, #0
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3714      	adds	r7, #20
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr
 800fe4c:	40010000 	.word	0x40010000
 800fe50:	40010400 	.word	0x40010400

0800fe54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fe5c:	bf00      	nop
 800fe5e:	370c      	adds	r7, #12
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr

0800fe68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fe70:	bf00      	nop
 800fe72:	370c      	adds	r7, #12
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr

0800fe7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fe84:	bf00      	nop
 800fe86:	370c      	adds	r7, #12
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr

0800fe90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d101      	bne.n	800fea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fe9e:	2301      	movs	r3, #1
 800fea0:	e042      	b.n	800ff28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d106      	bne.n	800feba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f7f3 fbf7 	bl	80036a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2224      	movs	r2, #36	; 0x24
 800febe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f022 0201 	bic.w	r2, r2, #1
 800fed0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d002      	beq.n	800fee0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f001 fc42 	bl	8011764 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 fed7 	bl	8010c94 <UART_SetConfig>
 800fee6:	4603      	mov	r3, r0
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d101      	bne.n	800fef0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800feec:	2301      	movs	r3, #1
 800feee:	e01b      	b.n	800ff28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	685a      	ldr	r2, [r3, #4]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fefe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	689a      	ldr	r2, [r3, #8]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ff0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f042 0201 	orr.w	r2, r2, #1
 800ff1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f001 fcc1 	bl	80118a8 <UART_CheckIdleState>
 800ff26:	4603      	mov	r3, r0
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3708      	adds	r7, #8
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b08a      	sub	sp, #40	; 0x28
 800ff34:	af02      	add	r7, sp, #8
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	603b      	str	r3, [r7, #0]
 800ff3c:	4613      	mov	r3, r2
 800ff3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff46:	2b20      	cmp	r3, #32
 800ff48:	d17b      	bne.n	8010042 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d002      	beq.n	800ff56 <HAL_UART_Transmit+0x26>
 800ff50:	88fb      	ldrh	r3, [r7, #6]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d101      	bne.n	800ff5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ff56:	2301      	movs	r3, #1
 800ff58:	e074      	b.n	8010044 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2221      	movs	r2, #33	; 0x21
 800ff66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ff6a:	f7f3 ff1b 	bl	8003da4 <HAL_GetTick>
 800ff6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	88fa      	ldrh	r2, [r7, #6]
 800ff74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	88fa      	ldrh	r2, [r7, #6]
 800ff7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	689b      	ldr	r3, [r3, #8]
 800ff84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff88:	d108      	bne.n	800ff9c <HAL_UART_Transmit+0x6c>
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	691b      	ldr	r3, [r3, #16]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d104      	bne.n	800ff9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ff92:	2300      	movs	r3, #0
 800ff94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	61bb      	str	r3, [r7, #24]
 800ff9a:	e003      	b.n	800ffa4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ffa4:	e030      	b.n	8010008 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	9300      	str	r3, [sp, #0]
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	2200      	movs	r2, #0
 800ffae:	2180      	movs	r1, #128	; 0x80
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f001 fd23 	bl	80119fc <UART_WaitOnFlagUntilTimeout>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d005      	beq.n	800ffc8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2220      	movs	r2, #32
 800ffc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ffc4:	2303      	movs	r3, #3
 800ffc6:	e03d      	b.n	8010044 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d10b      	bne.n	800ffe6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	881b      	ldrh	r3, [r3, #0]
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ffdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ffde:	69bb      	ldr	r3, [r7, #24]
 800ffe0:	3302      	adds	r3, #2
 800ffe2:	61bb      	str	r3, [r7, #24]
 800ffe4:	e007      	b.n	800fff6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	781a      	ldrb	r2, [r3, #0]
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fff0:	69fb      	ldr	r3, [r7, #28]
 800fff2:	3301      	adds	r3, #1
 800fff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	3b01      	subs	r3, #1
 8010000:	b29a      	uxth	r2, r3
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801000e:	b29b      	uxth	r3, r3
 8010010:	2b00      	cmp	r3, #0
 8010012:	d1c8      	bne.n	800ffa6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	9300      	str	r3, [sp, #0]
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	2200      	movs	r2, #0
 801001c:	2140      	movs	r1, #64	; 0x40
 801001e:	68f8      	ldr	r0, [r7, #12]
 8010020:	f001 fcec 	bl	80119fc <UART_WaitOnFlagUntilTimeout>
 8010024:	4603      	mov	r3, r0
 8010026:	2b00      	cmp	r3, #0
 8010028:	d005      	beq.n	8010036 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2220      	movs	r2, #32
 801002e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010032:	2303      	movs	r3, #3
 8010034:	e006      	b.n	8010044 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2220      	movs	r2, #32
 801003a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801003e:	2300      	movs	r3, #0
 8010040:	e000      	b.n	8010044 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010042:	2302      	movs	r3, #2
  }
}
 8010044:	4618      	mov	r0, r3
 8010046:	3720      	adds	r7, #32
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}

0801004c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b08a      	sub	sp, #40	; 0x28
 8010050:	af02      	add	r7, sp, #8
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	603b      	str	r3, [r7, #0]
 8010058:	4613      	mov	r3, r2
 801005a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010062:	2b20      	cmp	r3, #32
 8010064:	f040 80b5 	bne.w	80101d2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d002      	beq.n	8010074 <HAL_UART_Receive+0x28>
 801006e:	88fb      	ldrh	r3, [r7, #6]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d101      	bne.n	8010078 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010074:	2301      	movs	r3, #1
 8010076:	e0ad      	b.n	80101d4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2200      	movs	r2, #0
 801007c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2222      	movs	r2, #34	; 0x22
 8010084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2200      	movs	r2, #0
 801008c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801008e:	f7f3 fe89 	bl	8003da4 <HAL_GetTick>
 8010092:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	88fa      	ldrh	r2, [r7, #6]
 8010098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	88fa      	ldrh	r2, [r7, #6]
 80100a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	689b      	ldr	r3, [r3, #8]
 80100a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100ac:	d10e      	bne.n	80100cc <HAL_UART_Receive+0x80>
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	691b      	ldr	r3, [r3, #16]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d105      	bne.n	80100c2 <HAL_UART_Receive+0x76>
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80100bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80100c0:	e02d      	b.n	801011e <HAL_UART_Receive+0xd2>
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	22ff      	movs	r2, #255	; 0xff
 80100c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80100ca:	e028      	b.n	801011e <HAL_UART_Receive+0xd2>
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	689b      	ldr	r3, [r3, #8]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d10d      	bne.n	80100f0 <HAL_UART_Receive+0xa4>
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	691b      	ldr	r3, [r3, #16]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d104      	bne.n	80100e6 <HAL_UART_Receive+0x9a>
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	22ff      	movs	r2, #255	; 0xff
 80100e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80100e4:	e01b      	b.n	801011e <HAL_UART_Receive+0xd2>
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	227f      	movs	r2, #127	; 0x7f
 80100ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80100ee:	e016      	b.n	801011e <HAL_UART_Receive+0xd2>
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80100f8:	d10d      	bne.n	8010116 <HAL_UART_Receive+0xca>
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	691b      	ldr	r3, [r3, #16]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d104      	bne.n	801010c <HAL_UART_Receive+0xc0>
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	227f      	movs	r2, #127	; 0x7f
 8010106:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801010a:	e008      	b.n	801011e <HAL_UART_Receive+0xd2>
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	223f      	movs	r2, #63	; 0x3f
 8010110:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010114:	e003      	b.n	801011e <HAL_UART_Receive+0xd2>
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2200      	movs	r2, #0
 801011a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010124:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	689b      	ldr	r3, [r3, #8]
 801012a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801012e:	d108      	bne.n	8010142 <HAL_UART_Receive+0xf6>
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	691b      	ldr	r3, [r3, #16]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d104      	bne.n	8010142 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010138:	2300      	movs	r3, #0
 801013a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	61bb      	str	r3, [r7, #24]
 8010140:	e003      	b.n	801014a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010146:	2300      	movs	r3, #0
 8010148:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801014a:	e036      	b.n	80101ba <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	9300      	str	r3, [sp, #0]
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	2200      	movs	r2, #0
 8010154:	2120      	movs	r1, #32
 8010156:	68f8      	ldr	r0, [r7, #12]
 8010158:	f001 fc50 	bl	80119fc <UART_WaitOnFlagUntilTimeout>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d005      	beq.n	801016e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2220      	movs	r2, #32
 8010166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801016a:	2303      	movs	r3, #3
 801016c:	e032      	b.n	80101d4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d10c      	bne.n	801018e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017a:	b29a      	uxth	r2, r3
 801017c:	8a7b      	ldrh	r3, [r7, #18]
 801017e:	4013      	ands	r3, r2
 8010180:	b29a      	uxth	r2, r3
 8010182:	69bb      	ldr	r3, [r7, #24]
 8010184:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	3302      	adds	r3, #2
 801018a:	61bb      	str	r3, [r7, #24]
 801018c:	e00c      	b.n	80101a8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010194:	b2da      	uxtb	r2, r3
 8010196:	8a7b      	ldrh	r3, [r7, #18]
 8010198:	b2db      	uxtb	r3, r3
 801019a:	4013      	ands	r3, r2
 801019c:	b2da      	uxtb	r2, r3
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80101a2:	69fb      	ldr	r3, [r7, #28]
 80101a4:	3301      	adds	r3, #1
 80101a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	3b01      	subs	r3, #1
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d1c2      	bne.n	801014c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	2220      	movs	r2, #32
 80101ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80101ce:	2300      	movs	r3, #0
 80101d0:	e000      	b.n	80101d4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80101d2:	2302      	movs	r3, #2
  }
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3720      	adds	r7, #32
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b08a      	sub	sp, #40	; 0x28
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	60f8      	str	r0, [r7, #12]
 80101e4:	60b9      	str	r1, [r7, #8]
 80101e6:	4613      	mov	r3, r2
 80101e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80101f0:	2b20      	cmp	r3, #32
 80101f2:	d137      	bne.n	8010264 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d002      	beq.n	8010200 <HAL_UART_Receive_IT+0x24>
 80101fa:	88fb      	ldrh	r3, [r7, #6]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d101      	bne.n	8010204 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010200:	2301      	movs	r3, #1
 8010202:	e030      	b.n	8010266 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2200      	movs	r2, #0
 8010208:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	4a18      	ldr	r2, [pc, #96]	; (8010270 <HAL_UART_Receive_IT+0x94>)
 8010210:	4293      	cmp	r3, r2
 8010212:	d01f      	beq.n	8010254 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801021e:	2b00      	cmp	r3, #0
 8010220:	d018      	beq.n	8010254 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	e853 3f00 	ldrex	r3, [r3]
 801022e:	613b      	str	r3, [r7, #16]
   return(result);
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010236:	627b      	str	r3, [r7, #36]	; 0x24
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	461a      	mov	r2, r3
 801023e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010240:	623b      	str	r3, [r7, #32]
 8010242:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010244:	69f9      	ldr	r1, [r7, #28]
 8010246:	6a3a      	ldr	r2, [r7, #32]
 8010248:	e841 2300 	strex	r3, r2, [r1]
 801024c:	61bb      	str	r3, [r7, #24]
   return(result);
 801024e:	69bb      	ldr	r3, [r7, #24]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1e6      	bne.n	8010222 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010254:	88fb      	ldrh	r3, [r7, #6]
 8010256:	461a      	mov	r2, r3
 8010258:	68b9      	ldr	r1, [r7, #8]
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	f001 fc3c 	bl	8011ad8 <UART_Start_Receive_IT>
 8010260:	4603      	mov	r3, r0
 8010262:	e000      	b.n	8010266 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010264:	2302      	movs	r3, #2
  }
}
 8010266:	4618      	mov	r0, r3
 8010268:	3728      	adds	r7, #40	; 0x28
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	58000c00 	.word	0x58000c00

08010274 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b08a      	sub	sp, #40	; 0x28
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	60b9      	str	r1, [r7, #8]
 801027e:	4613      	mov	r3, r2
 8010280:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010288:	2b20      	cmp	r3, #32
 801028a:	d167      	bne.n	801035c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d002      	beq.n	8010298 <HAL_UART_Transmit_DMA+0x24>
 8010292:	88fb      	ldrh	r3, [r7, #6]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d101      	bne.n	801029c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010298:	2301      	movs	r3, #1
 801029a:	e060      	b.n	801035e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	68ba      	ldr	r2, [r7, #8]
 80102a0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	88fa      	ldrh	r2, [r7, #6]
 80102a6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	88fa      	ldrh	r2, [r7, #6]
 80102ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2200      	movs	r2, #0
 80102b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2221      	movs	r2, #33	; 0x21
 80102be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d028      	beq.n	801031c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102ce:	4a26      	ldr	r2, [pc, #152]	; (8010368 <HAL_UART_Transmit_DMA+0xf4>)
 80102d0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102d6:	4a25      	ldr	r2, [pc, #148]	; (801036c <HAL_UART_Transmit_DMA+0xf8>)
 80102d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102de:	4a24      	ldr	r2, [pc, #144]	; (8010370 <HAL_UART_Transmit_DMA+0xfc>)
 80102e0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102e6:	2200      	movs	r2, #0
 80102e8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102f2:	4619      	mov	r1, r3
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	3328      	adds	r3, #40	; 0x28
 80102fa:	461a      	mov	r2, r3
 80102fc:	88fb      	ldrh	r3, [r7, #6]
 80102fe:	f7f6 f9d5 	bl	80066ac <HAL_DMA_Start_IT>
 8010302:	4603      	mov	r3, r0
 8010304:	2b00      	cmp	r3, #0
 8010306:	d009      	beq.n	801031c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2210      	movs	r2, #16
 801030c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2220      	movs	r2, #32
 8010314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010318:	2301      	movs	r3, #1
 801031a:	e020      	b.n	801035e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2240      	movs	r2, #64	; 0x40
 8010322:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	3308      	adds	r3, #8
 801032a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	e853 3f00 	ldrex	r3, [r3]
 8010332:	613b      	str	r3, [r7, #16]
   return(result);
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801033a:	627b      	str	r3, [r7, #36]	; 0x24
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	3308      	adds	r3, #8
 8010342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010344:	623a      	str	r2, [r7, #32]
 8010346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010348:	69f9      	ldr	r1, [r7, #28]
 801034a:	6a3a      	ldr	r2, [r7, #32]
 801034c:	e841 2300 	strex	r3, r2, [r1]
 8010350:	61bb      	str	r3, [r7, #24]
   return(result);
 8010352:	69bb      	ldr	r3, [r7, #24]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d1e5      	bne.n	8010324 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010358:	2300      	movs	r3, #0
 801035a:	e000      	b.n	801035e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 801035c:	2302      	movs	r3, #2
  }
}
 801035e:	4618      	mov	r0, r3
 8010360:	3728      	adds	r7, #40	; 0x28
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	08011e6d 	.word	0x08011e6d
 801036c:	08011f03 	.word	0x08011f03
 8010370:	08011f1f 	.word	0x08011f1f

08010374 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b09a      	sub	sp, #104	; 0x68
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010384:	e853 3f00 	ldrex	r3, [r3]
 8010388:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801038a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801038c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010390:	667b      	str	r3, [r7, #100]	; 0x64
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	461a      	mov	r2, r3
 8010398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801039a:	657b      	str	r3, [r7, #84]	; 0x54
 801039c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103a2:	e841 2300 	strex	r3, r2, [r1]
 80103a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80103a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1e6      	bne.n	801037c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	3308      	adds	r3, #8
 80103b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b8:	e853 3f00 	ldrex	r3, [r3]
 80103bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80103be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103c0:	4b46      	ldr	r3, [pc, #280]	; (80104dc <HAL_UART_AbortReceive+0x168>)
 80103c2:	4013      	ands	r3, r2
 80103c4:	663b      	str	r3, [r7, #96]	; 0x60
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	3308      	adds	r3, #8
 80103cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80103ce:	643a      	str	r2, [r7, #64]	; 0x40
 80103d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80103d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80103d6:	e841 2300 	strex	r3, r2, [r1]
 80103da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80103dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d1e5      	bne.n	80103ae <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d118      	bne.n	801041c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f0:	6a3b      	ldr	r3, [r7, #32]
 80103f2:	e853 3f00 	ldrex	r3, [r3]
 80103f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80103f8:	69fb      	ldr	r3, [r7, #28]
 80103fa:	f023 0310 	bic.w	r3, r3, #16
 80103fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	461a      	mov	r2, r3
 8010406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010408:	62fb      	str	r3, [r7, #44]	; 0x2c
 801040a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801040c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801040e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010410:	e841 2300 	strex	r3, r2, [r1]
 8010414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010418:	2b00      	cmp	r3, #0
 801041a:	d1e6      	bne.n	80103ea <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	689b      	ldr	r3, [r3, #8]
 8010422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010426:	2b40      	cmp	r3, #64	; 0x40
 8010428:	d13b      	bne.n	80104a2 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	3308      	adds	r3, #8
 8010430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	e853 3f00 	ldrex	r3, [r3]
 8010438:	60bb      	str	r3, [r7, #8]
   return(result);
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010440:	65bb      	str	r3, [r7, #88]	; 0x58
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	3308      	adds	r3, #8
 8010448:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801044a:	61ba      	str	r2, [r7, #24]
 801044c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044e:	6979      	ldr	r1, [r7, #20]
 8010450:	69ba      	ldr	r2, [r7, #24]
 8010452:	e841 2300 	strex	r3, r2, [r1]
 8010456:	613b      	str	r3, [r7, #16]
   return(result);
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d1e5      	bne.n	801042a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010464:	2b00      	cmp	r3, #0
 8010466:	d01c      	beq.n	80104a2 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801046e:	2200      	movs	r2, #0
 8010470:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010478:	4618      	mov	r0, r3
 801047a:	f7f6 fb81 	bl	8006b80 <HAL_DMA_Abort>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d00e      	beq.n	80104a2 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801048a:	4618      	mov	r0, r3
 801048c:	f7f8 f806 	bl	800849c <HAL_DMA_GetError>
 8010490:	4603      	mov	r3, r0
 8010492:	2b20      	cmp	r3, #32
 8010494:	d105      	bne.n	80104a2 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2210      	movs	r2, #16
 801049a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801049e:	2303      	movs	r3, #3
 80104a0:	e017      	b.n	80104d2 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2200      	movs	r2, #0
 80104a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	220f      	movs	r2, #15
 80104b0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	699a      	ldr	r2, [r3, #24]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	f042 0208 	orr.w	r2, r2, #8
 80104c0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2220      	movs	r2, #32
 80104c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2200      	movs	r2, #0
 80104ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80104d0:	2300      	movs	r3, #0
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3768      	adds	r7, #104	; 0x68
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop
 80104dc:	effffffe 	.word	0xeffffffe

080104e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b0ba      	sub	sp, #232	; 0xe8
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	69db      	ldr	r3, [r3, #28]
 80104ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	689b      	ldr	r3, [r3, #8]
 8010502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010506:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801050a:	f640 030f 	movw	r3, #2063	; 0x80f
 801050e:	4013      	ands	r3, r2
 8010510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010518:	2b00      	cmp	r3, #0
 801051a:	d11b      	bne.n	8010554 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801051c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010520:	f003 0320 	and.w	r3, r3, #32
 8010524:	2b00      	cmp	r3, #0
 8010526:	d015      	beq.n	8010554 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801052c:	f003 0320 	and.w	r3, r3, #32
 8010530:	2b00      	cmp	r3, #0
 8010532:	d105      	bne.n	8010540 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801053c:	2b00      	cmp	r3, #0
 801053e:	d009      	beq.n	8010554 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010544:	2b00      	cmp	r3, #0
 8010546:	f000 8377 	beq.w	8010c38 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	4798      	blx	r3
      }
      return;
 8010552:	e371      	b.n	8010c38 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 8123 	beq.w	80107a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801055e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010562:	4b8d      	ldr	r3, [pc, #564]	; (8010798 <HAL_UART_IRQHandler+0x2b8>)
 8010564:	4013      	ands	r3, r2
 8010566:	2b00      	cmp	r3, #0
 8010568:	d106      	bne.n	8010578 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801056a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801056e:	4b8b      	ldr	r3, [pc, #556]	; (801079c <HAL_UART_IRQHandler+0x2bc>)
 8010570:	4013      	ands	r3, r2
 8010572:	2b00      	cmp	r3, #0
 8010574:	f000 8116 	beq.w	80107a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801057c:	f003 0301 	and.w	r3, r3, #1
 8010580:	2b00      	cmp	r3, #0
 8010582:	d011      	beq.n	80105a8 <HAL_UART_IRQHandler+0xc8>
 8010584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801058c:	2b00      	cmp	r3, #0
 801058e:	d00b      	beq.n	80105a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2201      	movs	r2, #1
 8010596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801059e:	f043 0201 	orr.w	r2, r3, #1
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80105a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105ac:	f003 0302 	and.w	r3, r3, #2
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d011      	beq.n	80105d8 <HAL_UART_IRQHandler+0xf8>
 80105b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80105b8:	f003 0301 	and.w	r3, r3, #1
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d00b      	beq.n	80105d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2202      	movs	r2, #2
 80105c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105ce:	f043 0204 	orr.w	r2, r3, #4
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80105d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105dc:	f003 0304 	and.w	r3, r3, #4
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d011      	beq.n	8010608 <HAL_UART_IRQHandler+0x128>
 80105e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80105e8:	f003 0301 	and.w	r3, r3, #1
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00b      	beq.n	8010608 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	2204      	movs	r2, #4
 80105f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105fe:	f043 0202 	orr.w	r2, r3, #2
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801060c:	f003 0308 	and.w	r3, r3, #8
 8010610:	2b00      	cmp	r3, #0
 8010612:	d017      	beq.n	8010644 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010618:	f003 0320 	and.w	r3, r3, #32
 801061c:	2b00      	cmp	r3, #0
 801061e:	d105      	bne.n	801062c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010620:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010624:	4b5c      	ldr	r3, [pc, #368]	; (8010798 <HAL_UART_IRQHandler+0x2b8>)
 8010626:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010628:	2b00      	cmp	r3, #0
 801062a:	d00b      	beq.n	8010644 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2208      	movs	r2, #8
 8010632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801063a:	f043 0208 	orr.w	r2, r3, #8
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801064c:	2b00      	cmp	r3, #0
 801064e:	d012      	beq.n	8010676 <HAL_UART_IRQHandler+0x196>
 8010650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010658:	2b00      	cmp	r3, #0
 801065a:	d00c      	beq.n	8010676 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801066c:	f043 0220 	orr.w	r2, r3, #32
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801067c:	2b00      	cmp	r3, #0
 801067e:	f000 82dd 	beq.w	8010c3c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010686:	f003 0320 	and.w	r3, r3, #32
 801068a:	2b00      	cmp	r3, #0
 801068c:	d013      	beq.n	80106b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801068e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010692:	f003 0320 	and.w	r3, r3, #32
 8010696:	2b00      	cmp	r3, #0
 8010698:	d105      	bne.n	80106a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801069a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d007      	beq.n	80106b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d003      	beq.n	80106b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106ca:	2b40      	cmp	r3, #64	; 0x40
 80106cc:	d005      	beq.n	80106da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80106ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80106d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d054      	beq.n	8010784 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f001 fb60 	bl	8011da0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	689b      	ldr	r3, [r3, #8]
 80106e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106ea:	2b40      	cmp	r3, #64	; 0x40
 80106ec:	d146      	bne.n	801077c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	3308      	adds	r3, #8
 80106f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80106fc:	e853 3f00 	ldrex	r3, [r3]
 8010700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801070c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	3308      	adds	r3, #8
 8010716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801071a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801071e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801072a:	e841 2300 	strex	r3, r2, [r1]
 801072e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010736:	2b00      	cmp	r3, #0
 8010738:	d1d9      	bne.n	80106ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010740:	2b00      	cmp	r3, #0
 8010742:	d017      	beq.n	8010774 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801074a:	4a15      	ldr	r2, [pc, #84]	; (80107a0 <HAL_UART_IRQHandler+0x2c0>)
 801074c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010754:	4618      	mov	r0, r3
 8010756:	f7f6 fd31 	bl	80071bc <HAL_DMA_Abort_IT>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d019      	beq.n	8010794 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801076e:	4610      	mov	r0, r2
 8010770:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010772:	e00f      	b.n	8010794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 fa77 	bl	8010c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801077a:	e00b      	b.n	8010794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f000 fa73 	bl	8010c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010782:	e007      	b.n	8010794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f000 fa6f 	bl	8010c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2200      	movs	r2, #0
 801078e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010792:	e253      	b.n	8010c3c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010794:	bf00      	nop
    return;
 8010796:	e251      	b.n	8010c3c <HAL_UART_IRQHandler+0x75c>
 8010798:	10000001 	.word	0x10000001
 801079c:	04000120 	.word	0x04000120
 80107a0:	08011f9f 	.word	0x08011f9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	f040 81e7 	bne.w	8010b7c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80107ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107b2:	f003 0310 	and.w	r3, r3, #16
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	f000 81e0 	beq.w	8010b7c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80107bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107c0:	f003 0310 	and.w	r3, r3, #16
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	f000 81d9 	beq.w	8010b7c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	2210      	movs	r2, #16
 80107d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	689b      	ldr	r3, [r3, #8]
 80107d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107dc:	2b40      	cmp	r3, #64	; 0x40
 80107de:	f040 8151 	bne.w	8010a84 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4a96      	ldr	r2, [pc, #600]	; (8010a44 <HAL_UART_IRQHandler+0x564>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d068      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	4a93      	ldr	r2, [pc, #588]	; (8010a48 <HAL_UART_IRQHandler+0x568>)
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d061      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	4a91      	ldr	r2, [pc, #580]	; (8010a4c <HAL_UART_IRQHandler+0x56c>)
 8010808:	4293      	cmp	r3, r2
 801080a:	d05a      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	4a8e      	ldr	r2, [pc, #568]	; (8010a50 <HAL_UART_IRQHandler+0x570>)
 8010816:	4293      	cmp	r3, r2
 8010818:	d053      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4a8c      	ldr	r2, [pc, #560]	; (8010a54 <HAL_UART_IRQHandler+0x574>)
 8010824:	4293      	cmp	r3, r2
 8010826:	d04c      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	4a89      	ldr	r2, [pc, #548]	; (8010a58 <HAL_UART_IRQHandler+0x578>)
 8010832:	4293      	cmp	r3, r2
 8010834:	d045      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	4a87      	ldr	r2, [pc, #540]	; (8010a5c <HAL_UART_IRQHandler+0x57c>)
 8010840:	4293      	cmp	r3, r2
 8010842:	d03e      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	4a84      	ldr	r2, [pc, #528]	; (8010a60 <HAL_UART_IRQHandler+0x580>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d037      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4a82      	ldr	r2, [pc, #520]	; (8010a64 <HAL_UART_IRQHandler+0x584>)
 801085c:	4293      	cmp	r3, r2
 801085e:	d030      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4a7f      	ldr	r2, [pc, #508]	; (8010a68 <HAL_UART_IRQHandler+0x588>)
 801086a:	4293      	cmp	r3, r2
 801086c:	d029      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4a7d      	ldr	r2, [pc, #500]	; (8010a6c <HAL_UART_IRQHandler+0x58c>)
 8010878:	4293      	cmp	r3, r2
 801087a:	d022      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	4a7a      	ldr	r2, [pc, #488]	; (8010a70 <HAL_UART_IRQHandler+0x590>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d01b      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a78      	ldr	r2, [pc, #480]	; (8010a74 <HAL_UART_IRQHandler+0x594>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d014      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4a75      	ldr	r2, [pc, #468]	; (8010a78 <HAL_UART_IRQHandler+0x598>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d00d      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4a73      	ldr	r2, [pc, #460]	; (8010a7c <HAL_UART_IRQHandler+0x59c>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d006      	beq.n	80108c2 <HAL_UART_IRQHandler+0x3e2>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4a70      	ldr	r2, [pc, #448]	; (8010a80 <HAL_UART_IRQHandler+0x5a0>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	d106      	bne.n	80108d0 <HAL_UART_IRQHandler+0x3f0>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	685b      	ldr	r3, [r3, #4]
 80108cc:	b29b      	uxth	r3, r3
 80108ce:	e005      	b.n	80108dc <HAL_UART_IRQHandler+0x3fc>
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	b29b      	uxth	r3, r3
 80108dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80108e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f000 81ab 	beq.w	8010c40 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80108f4:	429a      	cmp	r2, r3
 80108f6:	f080 81a3 	bcs.w	8010c40 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010900:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801090a:	69db      	ldr	r3, [r3, #28]
 801090c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010910:	f000 8087 	beq.w	8010a22 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801091c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010920:	e853 3f00 	ldrex	r3, [r3]
 8010924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801092c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	461a      	mov	r2, r3
 801093a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801093e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010942:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010946:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801094a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801094e:	e841 2300 	strex	r3, r2, [r1]
 8010952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801095a:	2b00      	cmp	r3, #0
 801095c:	d1da      	bne.n	8010914 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	3308      	adds	r3, #8
 8010964:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010968:	e853 3f00 	ldrex	r3, [r3]
 801096c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801096e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010970:	f023 0301 	bic.w	r3, r3, #1
 8010974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	3308      	adds	r3, #8
 801097e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010982:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010986:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010988:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801098a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801098e:	e841 2300 	strex	r3, r2, [r1]
 8010992:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010996:	2b00      	cmp	r3, #0
 8010998:	d1e1      	bne.n	801095e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	3308      	adds	r3, #8
 80109a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109a4:	e853 3f00 	ldrex	r3, [r3]
 80109a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80109aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	3308      	adds	r3, #8
 80109ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80109be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80109c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80109c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80109c6:	e841 2300 	strex	r3, r2, [r1]
 80109ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80109cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d1e3      	bne.n	801099a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2220      	movs	r2, #32
 80109d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2200      	movs	r2, #0
 80109de:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109e8:	e853 3f00 	ldrex	r3, [r3]
 80109ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80109ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109f0:	f023 0310 	bic.w	r3, r3, #16
 80109f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	461a      	mov	r2, r3
 80109fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a02:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010a08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a0a:	e841 2300 	strex	r3, r2, [r1]
 8010a0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d1e4      	bne.n	80109e0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f7f6 f8af 	bl	8006b80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2202      	movs	r2, #2
 8010a26:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	1ad3      	subs	r3, r2, r3
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f000 f91d 	bl	8010c7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010a42:	e0fd      	b.n	8010c40 <HAL_UART_IRQHandler+0x760>
 8010a44:	40020010 	.word	0x40020010
 8010a48:	40020028 	.word	0x40020028
 8010a4c:	40020040 	.word	0x40020040
 8010a50:	40020058 	.word	0x40020058
 8010a54:	40020070 	.word	0x40020070
 8010a58:	40020088 	.word	0x40020088
 8010a5c:	400200a0 	.word	0x400200a0
 8010a60:	400200b8 	.word	0x400200b8
 8010a64:	40020410 	.word	0x40020410
 8010a68:	40020428 	.word	0x40020428
 8010a6c:	40020440 	.word	0x40020440
 8010a70:	40020458 	.word	0x40020458
 8010a74:	40020470 	.word	0x40020470
 8010a78:	40020488 	.word	0x40020488
 8010a7c:	400204a0 	.word	0x400204a0
 8010a80:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	1ad3      	subs	r3, r2, r3
 8010a94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	f000 80cf 	beq.w	8010c44 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010aa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f000 80ca 	beq.w	8010c44 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab8:	e853 3f00 	ldrex	r3, [r3]
 8010abc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	461a      	mov	r2, r3
 8010ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8010ad4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ada:	e841 2300 	strex	r3, r2, [r1]
 8010ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d1e4      	bne.n	8010ab0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	3308      	adds	r3, #8
 8010aec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af0:	e853 3f00 	ldrex	r3, [r3]
 8010af4:	623b      	str	r3, [r7, #32]
   return(result);
 8010af6:	6a3a      	ldr	r2, [r7, #32]
 8010af8:	4b55      	ldr	r3, [pc, #340]	; (8010c50 <HAL_UART_IRQHandler+0x770>)
 8010afa:	4013      	ands	r3, r2
 8010afc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	3308      	adds	r3, #8
 8010b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010b0a:	633a      	str	r2, [r7, #48]	; 0x30
 8010b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b12:	e841 2300 	strex	r3, r2, [r1]
 8010b16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d1e3      	bne.n	8010ae6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2220      	movs	r2, #32
 8010b22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	e853 3f00 	ldrex	r3, [r3]
 8010b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	f023 0310 	bic.w	r3, r3, #16
 8010b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	461a      	mov	r2, r3
 8010b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010b54:	61fb      	str	r3, [r7, #28]
 8010b56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b58:	69b9      	ldr	r1, [r7, #24]
 8010b5a:	69fa      	ldr	r2, [r7, #28]
 8010b5c:	e841 2300 	strex	r3, r2, [r1]
 8010b60:	617b      	str	r3, [r7, #20]
   return(result);
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1e4      	bne.n	8010b32 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2202      	movs	r2, #2
 8010b6c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010b6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010b72:	4619      	mov	r1, r3
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f000 f881 	bl	8010c7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010b7a:	e063      	b.n	8010c44 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d00e      	beq.n	8010ba6 <HAL_UART_IRQHandler+0x6c6>
 8010b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d008      	beq.n	8010ba6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010b9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f001 ff5a 	bl	8012a58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010ba4:	e051      	b.n	8010c4a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d014      	beq.n	8010bdc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d105      	bne.n	8010bca <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d008      	beq.n	8010bdc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d03a      	beq.n	8010c48 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	4798      	blx	r3
    }
    return;
 8010bda:	e035      	b.n	8010c48 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d009      	beq.n	8010bfc <HAL_UART_IRQHandler+0x71c>
 8010be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d003      	beq.n	8010bfc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f001 f9e8 	bl	8011fca <UART_EndTransmit_IT>
    return;
 8010bfa:	e026      	b.n	8010c4a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d009      	beq.n	8010c1c <HAL_UART_IRQHandler+0x73c>
 8010c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d003      	beq.n	8010c1c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f001 ff33 	bl	8012a80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010c1a:	e016      	b.n	8010c4a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d010      	beq.n	8010c4a <HAL_UART_IRQHandler+0x76a>
 8010c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	da0c      	bge.n	8010c4a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f001 ff1b 	bl	8012a6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010c36:	e008      	b.n	8010c4a <HAL_UART_IRQHandler+0x76a>
      return;
 8010c38:	bf00      	nop
 8010c3a:	e006      	b.n	8010c4a <HAL_UART_IRQHandler+0x76a>
    return;
 8010c3c:	bf00      	nop
 8010c3e:	e004      	b.n	8010c4a <HAL_UART_IRQHandler+0x76a>
      return;
 8010c40:	bf00      	nop
 8010c42:	e002      	b.n	8010c4a <HAL_UART_IRQHandler+0x76a>
      return;
 8010c44:	bf00      	nop
 8010c46:	e000      	b.n	8010c4a <HAL_UART_IRQHandler+0x76a>
    return;
 8010c48:	bf00      	nop
  }
}
 8010c4a:	37e8      	adds	r7, #232	; 0xe8
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	effffffe 	.word	0xeffffffe

08010c54 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010c54:	b480      	push	{r7}
 8010c56:	b083      	sub	sp, #12
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010c5c:	bf00      	nop
 8010c5e:	370c      	adds	r7, #12
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr

08010c68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010c70:	bf00      	nop
 8010c72:	370c      	adds	r7, #12
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	460b      	mov	r3, r1
 8010c86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010c88:	bf00      	nop
 8010c8a:	370c      	adds	r7, #12
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c92:	4770      	bx	lr

08010c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c98:	b092      	sub	sp, #72	; 0x48
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	689a      	ldr	r2, [r3, #8]
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	691b      	ldr	r3, [r3, #16]
 8010cac:	431a      	orrs	r2, r3
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	695b      	ldr	r3, [r3, #20]
 8010cb2:	431a      	orrs	r2, r3
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	69db      	ldr	r3, [r3, #28]
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	681a      	ldr	r2, [r3, #0]
 8010cc2:	4bbe      	ldr	r3, [pc, #760]	; (8010fbc <UART_SetConfig+0x328>)
 8010cc4:	4013      	ands	r3, r2
 8010cc6:	697a      	ldr	r2, [r7, #20]
 8010cc8:	6812      	ldr	r2, [r2, #0]
 8010cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ccc:	430b      	orrs	r3, r1
 8010cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	68da      	ldr	r2, [r3, #12]
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	430a      	orrs	r2, r1
 8010ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	699b      	ldr	r3, [r3, #24]
 8010cea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	4ab3      	ldr	r2, [pc, #716]	; (8010fc0 <UART_SetConfig+0x32c>)
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	d004      	beq.n	8010d00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	6a1b      	ldr	r3, [r3, #32]
 8010cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cfc:	4313      	orrs	r3, r2
 8010cfe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	689a      	ldr	r2, [r3, #8]
 8010d06:	4baf      	ldr	r3, [pc, #700]	; (8010fc4 <UART_SetConfig+0x330>)
 8010d08:	4013      	ands	r3, r2
 8010d0a:	697a      	ldr	r2, [r7, #20]
 8010d0c:	6812      	ldr	r2, [r2, #0]
 8010d0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d10:	430b      	orrs	r3, r1
 8010d12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d1a:	f023 010f 	bic.w	r1, r3, #15
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	430a      	orrs	r2, r1
 8010d28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	4aa6      	ldr	r2, [pc, #664]	; (8010fc8 <UART_SetConfig+0x334>)
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d177      	bne.n	8010e24 <UART_SetConfig+0x190>
 8010d34:	4ba5      	ldr	r3, [pc, #660]	; (8010fcc <UART_SetConfig+0x338>)
 8010d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010d3c:	2b28      	cmp	r3, #40	; 0x28
 8010d3e:	d86d      	bhi.n	8010e1c <UART_SetConfig+0x188>
 8010d40:	a201      	add	r2, pc, #4	; (adr r2, 8010d48 <UART_SetConfig+0xb4>)
 8010d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d46:	bf00      	nop
 8010d48:	08010ded 	.word	0x08010ded
 8010d4c:	08010e1d 	.word	0x08010e1d
 8010d50:	08010e1d 	.word	0x08010e1d
 8010d54:	08010e1d 	.word	0x08010e1d
 8010d58:	08010e1d 	.word	0x08010e1d
 8010d5c:	08010e1d 	.word	0x08010e1d
 8010d60:	08010e1d 	.word	0x08010e1d
 8010d64:	08010e1d 	.word	0x08010e1d
 8010d68:	08010df5 	.word	0x08010df5
 8010d6c:	08010e1d 	.word	0x08010e1d
 8010d70:	08010e1d 	.word	0x08010e1d
 8010d74:	08010e1d 	.word	0x08010e1d
 8010d78:	08010e1d 	.word	0x08010e1d
 8010d7c:	08010e1d 	.word	0x08010e1d
 8010d80:	08010e1d 	.word	0x08010e1d
 8010d84:	08010e1d 	.word	0x08010e1d
 8010d88:	08010dfd 	.word	0x08010dfd
 8010d8c:	08010e1d 	.word	0x08010e1d
 8010d90:	08010e1d 	.word	0x08010e1d
 8010d94:	08010e1d 	.word	0x08010e1d
 8010d98:	08010e1d 	.word	0x08010e1d
 8010d9c:	08010e1d 	.word	0x08010e1d
 8010da0:	08010e1d 	.word	0x08010e1d
 8010da4:	08010e1d 	.word	0x08010e1d
 8010da8:	08010e05 	.word	0x08010e05
 8010dac:	08010e1d 	.word	0x08010e1d
 8010db0:	08010e1d 	.word	0x08010e1d
 8010db4:	08010e1d 	.word	0x08010e1d
 8010db8:	08010e1d 	.word	0x08010e1d
 8010dbc:	08010e1d 	.word	0x08010e1d
 8010dc0:	08010e1d 	.word	0x08010e1d
 8010dc4:	08010e1d 	.word	0x08010e1d
 8010dc8:	08010e0d 	.word	0x08010e0d
 8010dcc:	08010e1d 	.word	0x08010e1d
 8010dd0:	08010e1d 	.word	0x08010e1d
 8010dd4:	08010e1d 	.word	0x08010e1d
 8010dd8:	08010e1d 	.word	0x08010e1d
 8010ddc:	08010e1d 	.word	0x08010e1d
 8010de0:	08010e1d 	.word	0x08010e1d
 8010de4:	08010e1d 	.word	0x08010e1d
 8010de8:	08010e15 	.word	0x08010e15
 8010dec:	2301      	movs	r3, #1
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df2:	e222      	b.n	801123a <UART_SetConfig+0x5a6>
 8010df4:	2304      	movs	r3, #4
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfa:	e21e      	b.n	801123a <UART_SetConfig+0x5a6>
 8010dfc:	2308      	movs	r3, #8
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e02:	e21a      	b.n	801123a <UART_SetConfig+0x5a6>
 8010e04:	2310      	movs	r3, #16
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0a:	e216      	b.n	801123a <UART_SetConfig+0x5a6>
 8010e0c:	2320      	movs	r3, #32
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e12:	e212      	b.n	801123a <UART_SetConfig+0x5a6>
 8010e14:	2340      	movs	r3, #64	; 0x40
 8010e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1a:	e20e      	b.n	801123a <UART_SetConfig+0x5a6>
 8010e1c:	2380      	movs	r3, #128	; 0x80
 8010e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e22:	e20a      	b.n	801123a <UART_SetConfig+0x5a6>
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	4a69      	ldr	r2, [pc, #420]	; (8010fd0 <UART_SetConfig+0x33c>)
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d130      	bne.n	8010e90 <UART_SetConfig+0x1fc>
 8010e2e:	4b67      	ldr	r3, [pc, #412]	; (8010fcc <UART_SetConfig+0x338>)
 8010e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e32:	f003 0307 	and.w	r3, r3, #7
 8010e36:	2b05      	cmp	r3, #5
 8010e38:	d826      	bhi.n	8010e88 <UART_SetConfig+0x1f4>
 8010e3a:	a201      	add	r2, pc, #4	; (adr r2, 8010e40 <UART_SetConfig+0x1ac>)
 8010e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e40:	08010e59 	.word	0x08010e59
 8010e44:	08010e61 	.word	0x08010e61
 8010e48:	08010e69 	.word	0x08010e69
 8010e4c:	08010e71 	.word	0x08010e71
 8010e50:	08010e79 	.word	0x08010e79
 8010e54:	08010e81 	.word	0x08010e81
 8010e58:	2300      	movs	r3, #0
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5e:	e1ec      	b.n	801123a <UART_SetConfig+0x5a6>
 8010e60:	2304      	movs	r3, #4
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e1e8      	b.n	801123a <UART_SetConfig+0x5a6>
 8010e68:	2308      	movs	r3, #8
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e1e4      	b.n	801123a <UART_SetConfig+0x5a6>
 8010e70:	2310      	movs	r3, #16
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e1e0      	b.n	801123a <UART_SetConfig+0x5a6>
 8010e78:	2320      	movs	r3, #32
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e1dc      	b.n	801123a <UART_SetConfig+0x5a6>
 8010e80:	2340      	movs	r3, #64	; 0x40
 8010e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e86:	e1d8      	b.n	801123a <UART_SetConfig+0x5a6>
 8010e88:	2380      	movs	r3, #128	; 0x80
 8010e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8e:	e1d4      	b.n	801123a <UART_SetConfig+0x5a6>
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4a4f      	ldr	r2, [pc, #316]	; (8010fd4 <UART_SetConfig+0x340>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d130      	bne.n	8010efc <UART_SetConfig+0x268>
 8010e9a:	4b4c      	ldr	r3, [pc, #304]	; (8010fcc <UART_SetConfig+0x338>)
 8010e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e9e:	f003 0307 	and.w	r3, r3, #7
 8010ea2:	2b05      	cmp	r3, #5
 8010ea4:	d826      	bhi.n	8010ef4 <UART_SetConfig+0x260>
 8010ea6:	a201      	add	r2, pc, #4	; (adr r2, 8010eac <UART_SetConfig+0x218>)
 8010ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eac:	08010ec5 	.word	0x08010ec5
 8010eb0:	08010ecd 	.word	0x08010ecd
 8010eb4:	08010ed5 	.word	0x08010ed5
 8010eb8:	08010edd 	.word	0x08010edd
 8010ebc:	08010ee5 	.word	0x08010ee5
 8010ec0:	08010eed 	.word	0x08010eed
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eca:	e1b6      	b.n	801123a <UART_SetConfig+0x5a6>
 8010ecc:	2304      	movs	r3, #4
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e1b2      	b.n	801123a <UART_SetConfig+0x5a6>
 8010ed4:	2308      	movs	r3, #8
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e1ae      	b.n	801123a <UART_SetConfig+0x5a6>
 8010edc:	2310      	movs	r3, #16
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e1aa      	b.n	801123a <UART_SetConfig+0x5a6>
 8010ee4:	2320      	movs	r3, #32
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eea:	e1a6      	b.n	801123a <UART_SetConfig+0x5a6>
 8010eec:	2340      	movs	r3, #64	; 0x40
 8010eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef2:	e1a2      	b.n	801123a <UART_SetConfig+0x5a6>
 8010ef4:	2380      	movs	r3, #128	; 0x80
 8010ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efa:	e19e      	b.n	801123a <UART_SetConfig+0x5a6>
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a35      	ldr	r2, [pc, #212]	; (8010fd8 <UART_SetConfig+0x344>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d130      	bne.n	8010f68 <UART_SetConfig+0x2d4>
 8010f06:	4b31      	ldr	r3, [pc, #196]	; (8010fcc <UART_SetConfig+0x338>)
 8010f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f0a:	f003 0307 	and.w	r3, r3, #7
 8010f0e:	2b05      	cmp	r3, #5
 8010f10:	d826      	bhi.n	8010f60 <UART_SetConfig+0x2cc>
 8010f12:	a201      	add	r2, pc, #4	; (adr r2, 8010f18 <UART_SetConfig+0x284>)
 8010f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f18:	08010f31 	.word	0x08010f31
 8010f1c:	08010f39 	.word	0x08010f39
 8010f20:	08010f41 	.word	0x08010f41
 8010f24:	08010f49 	.word	0x08010f49
 8010f28:	08010f51 	.word	0x08010f51
 8010f2c:	08010f59 	.word	0x08010f59
 8010f30:	2300      	movs	r3, #0
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e180      	b.n	801123a <UART_SetConfig+0x5a6>
 8010f38:	2304      	movs	r3, #4
 8010f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3e:	e17c      	b.n	801123a <UART_SetConfig+0x5a6>
 8010f40:	2308      	movs	r3, #8
 8010f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f46:	e178      	b.n	801123a <UART_SetConfig+0x5a6>
 8010f48:	2310      	movs	r3, #16
 8010f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4e:	e174      	b.n	801123a <UART_SetConfig+0x5a6>
 8010f50:	2320      	movs	r3, #32
 8010f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f56:	e170      	b.n	801123a <UART_SetConfig+0x5a6>
 8010f58:	2340      	movs	r3, #64	; 0x40
 8010f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f5e:	e16c      	b.n	801123a <UART_SetConfig+0x5a6>
 8010f60:	2380      	movs	r3, #128	; 0x80
 8010f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f66:	e168      	b.n	801123a <UART_SetConfig+0x5a6>
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	4a1b      	ldr	r2, [pc, #108]	; (8010fdc <UART_SetConfig+0x348>)
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d142      	bne.n	8010ff8 <UART_SetConfig+0x364>
 8010f72:	4b16      	ldr	r3, [pc, #88]	; (8010fcc <UART_SetConfig+0x338>)
 8010f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f76:	f003 0307 	and.w	r3, r3, #7
 8010f7a:	2b05      	cmp	r3, #5
 8010f7c:	d838      	bhi.n	8010ff0 <UART_SetConfig+0x35c>
 8010f7e:	a201      	add	r2, pc, #4	; (adr r2, 8010f84 <UART_SetConfig+0x2f0>)
 8010f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f84:	08010f9d 	.word	0x08010f9d
 8010f88:	08010fa5 	.word	0x08010fa5
 8010f8c:	08010fad 	.word	0x08010fad
 8010f90:	08010fb5 	.word	0x08010fb5
 8010f94:	08010fe1 	.word	0x08010fe1
 8010f98:	08010fe9 	.word	0x08010fe9
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fa2:	e14a      	b.n	801123a <UART_SetConfig+0x5a6>
 8010fa4:	2304      	movs	r3, #4
 8010fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010faa:	e146      	b.n	801123a <UART_SetConfig+0x5a6>
 8010fac:	2308      	movs	r3, #8
 8010fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fb2:	e142      	b.n	801123a <UART_SetConfig+0x5a6>
 8010fb4:	2310      	movs	r3, #16
 8010fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fba:	e13e      	b.n	801123a <UART_SetConfig+0x5a6>
 8010fbc:	cfff69f3 	.word	0xcfff69f3
 8010fc0:	58000c00 	.word	0x58000c00
 8010fc4:	11fff4ff 	.word	0x11fff4ff
 8010fc8:	40011000 	.word	0x40011000
 8010fcc:	58024400 	.word	0x58024400
 8010fd0:	40004400 	.word	0x40004400
 8010fd4:	40004800 	.word	0x40004800
 8010fd8:	40004c00 	.word	0x40004c00
 8010fdc:	40005000 	.word	0x40005000
 8010fe0:	2320      	movs	r3, #32
 8010fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe6:	e128      	b.n	801123a <UART_SetConfig+0x5a6>
 8010fe8:	2340      	movs	r3, #64	; 0x40
 8010fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fee:	e124      	b.n	801123a <UART_SetConfig+0x5a6>
 8010ff0:	2380      	movs	r3, #128	; 0x80
 8010ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ff6:	e120      	b.n	801123a <UART_SetConfig+0x5a6>
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	4acb      	ldr	r2, [pc, #812]	; (801132c <UART_SetConfig+0x698>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d176      	bne.n	80110f0 <UART_SetConfig+0x45c>
 8011002:	4bcb      	ldr	r3, [pc, #812]	; (8011330 <UART_SetConfig+0x69c>)
 8011004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801100a:	2b28      	cmp	r3, #40	; 0x28
 801100c:	d86c      	bhi.n	80110e8 <UART_SetConfig+0x454>
 801100e:	a201      	add	r2, pc, #4	; (adr r2, 8011014 <UART_SetConfig+0x380>)
 8011010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011014:	080110b9 	.word	0x080110b9
 8011018:	080110e9 	.word	0x080110e9
 801101c:	080110e9 	.word	0x080110e9
 8011020:	080110e9 	.word	0x080110e9
 8011024:	080110e9 	.word	0x080110e9
 8011028:	080110e9 	.word	0x080110e9
 801102c:	080110e9 	.word	0x080110e9
 8011030:	080110e9 	.word	0x080110e9
 8011034:	080110c1 	.word	0x080110c1
 8011038:	080110e9 	.word	0x080110e9
 801103c:	080110e9 	.word	0x080110e9
 8011040:	080110e9 	.word	0x080110e9
 8011044:	080110e9 	.word	0x080110e9
 8011048:	080110e9 	.word	0x080110e9
 801104c:	080110e9 	.word	0x080110e9
 8011050:	080110e9 	.word	0x080110e9
 8011054:	080110c9 	.word	0x080110c9
 8011058:	080110e9 	.word	0x080110e9
 801105c:	080110e9 	.word	0x080110e9
 8011060:	080110e9 	.word	0x080110e9
 8011064:	080110e9 	.word	0x080110e9
 8011068:	080110e9 	.word	0x080110e9
 801106c:	080110e9 	.word	0x080110e9
 8011070:	080110e9 	.word	0x080110e9
 8011074:	080110d1 	.word	0x080110d1
 8011078:	080110e9 	.word	0x080110e9
 801107c:	080110e9 	.word	0x080110e9
 8011080:	080110e9 	.word	0x080110e9
 8011084:	080110e9 	.word	0x080110e9
 8011088:	080110e9 	.word	0x080110e9
 801108c:	080110e9 	.word	0x080110e9
 8011090:	080110e9 	.word	0x080110e9
 8011094:	080110d9 	.word	0x080110d9
 8011098:	080110e9 	.word	0x080110e9
 801109c:	080110e9 	.word	0x080110e9
 80110a0:	080110e9 	.word	0x080110e9
 80110a4:	080110e9 	.word	0x080110e9
 80110a8:	080110e9 	.word	0x080110e9
 80110ac:	080110e9 	.word	0x080110e9
 80110b0:	080110e9 	.word	0x080110e9
 80110b4:	080110e1 	.word	0x080110e1
 80110b8:	2301      	movs	r3, #1
 80110ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110be:	e0bc      	b.n	801123a <UART_SetConfig+0x5a6>
 80110c0:	2304      	movs	r3, #4
 80110c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c6:	e0b8      	b.n	801123a <UART_SetConfig+0x5a6>
 80110c8:	2308      	movs	r3, #8
 80110ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ce:	e0b4      	b.n	801123a <UART_SetConfig+0x5a6>
 80110d0:	2310      	movs	r3, #16
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d6:	e0b0      	b.n	801123a <UART_SetConfig+0x5a6>
 80110d8:	2320      	movs	r3, #32
 80110da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110de:	e0ac      	b.n	801123a <UART_SetConfig+0x5a6>
 80110e0:	2340      	movs	r3, #64	; 0x40
 80110e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e6:	e0a8      	b.n	801123a <UART_SetConfig+0x5a6>
 80110e8:	2380      	movs	r3, #128	; 0x80
 80110ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ee:	e0a4      	b.n	801123a <UART_SetConfig+0x5a6>
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4a8f      	ldr	r2, [pc, #572]	; (8011334 <UART_SetConfig+0x6a0>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d130      	bne.n	801115c <UART_SetConfig+0x4c8>
 80110fa:	4b8d      	ldr	r3, [pc, #564]	; (8011330 <UART_SetConfig+0x69c>)
 80110fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110fe:	f003 0307 	and.w	r3, r3, #7
 8011102:	2b05      	cmp	r3, #5
 8011104:	d826      	bhi.n	8011154 <UART_SetConfig+0x4c0>
 8011106:	a201      	add	r2, pc, #4	; (adr r2, 801110c <UART_SetConfig+0x478>)
 8011108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801110c:	08011125 	.word	0x08011125
 8011110:	0801112d 	.word	0x0801112d
 8011114:	08011135 	.word	0x08011135
 8011118:	0801113d 	.word	0x0801113d
 801111c:	08011145 	.word	0x08011145
 8011120:	0801114d 	.word	0x0801114d
 8011124:	2300      	movs	r3, #0
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e086      	b.n	801123a <UART_SetConfig+0x5a6>
 801112c:	2304      	movs	r3, #4
 801112e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011132:	e082      	b.n	801123a <UART_SetConfig+0x5a6>
 8011134:	2308      	movs	r3, #8
 8011136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113a:	e07e      	b.n	801123a <UART_SetConfig+0x5a6>
 801113c:	2310      	movs	r3, #16
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e07a      	b.n	801123a <UART_SetConfig+0x5a6>
 8011144:	2320      	movs	r3, #32
 8011146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114a:	e076      	b.n	801123a <UART_SetConfig+0x5a6>
 801114c:	2340      	movs	r3, #64	; 0x40
 801114e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011152:	e072      	b.n	801123a <UART_SetConfig+0x5a6>
 8011154:	2380      	movs	r3, #128	; 0x80
 8011156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115a:	e06e      	b.n	801123a <UART_SetConfig+0x5a6>
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	4a75      	ldr	r2, [pc, #468]	; (8011338 <UART_SetConfig+0x6a4>)
 8011162:	4293      	cmp	r3, r2
 8011164:	d130      	bne.n	80111c8 <UART_SetConfig+0x534>
 8011166:	4b72      	ldr	r3, [pc, #456]	; (8011330 <UART_SetConfig+0x69c>)
 8011168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801116a:	f003 0307 	and.w	r3, r3, #7
 801116e:	2b05      	cmp	r3, #5
 8011170:	d826      	bhi.n	80111c0 <UART_SetConfig+0x52c>
 8011172:	a201      	add	r2, pc, #4	; (adr r2, 8011178 <UART_SetConfig+0x4e4>)
 8011174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011178:	08011191 	.word	0x08011191
 801117c:	08011199 	.word	0x08011199
 8011180:	080111a1 	.word	0x080111a1
 8011184:	080111a9 	.word	0x080111a9
 8011188:	080111b1 	.word	0x080111b1
 801118c:	080111b9 	.word	0x080111b9
 8011190:	2300      	movs	r3, #0
 8011192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011196:	e050      	b.n	801123a <UART_SetConfig+0x5a6>
 8011198:	2304      	movs	r3, #4
 801119a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119e:	e04c      	b.n	801123a <UART_SetConfig+0x5a6>
 80111a0:	2308      	movs	r3, #8
 80111a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a6:	e048      	b.n	801123a <UART_SetConfig+0x5a6>
 80111a8:	2310      	movs	r3, #16
 80111aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ae:	e044      	b.n	801123a <UART_SetConfig+0x5a6>
 80111b0:	2320      	movs	r3, #32
 80111b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b6:	e040      	b.n	801123a <UART_SetConfig+0x5a6>
 80111b8:	2340      	movs	r3, #64	; 0x40
 80111ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111be:	e03c      	b.n	801123a <UART_SetConfig+0x5a6>
 80111c0:	2380      	movs	r3, #128	; 0x80
 80111c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c6:	e038      	b.n	801123a <UART_SetConfig+0x5a6>
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	4a5b      	ldr	r2, [pc, #364]	; (801133c <UART_SetConfig+0x6a8>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d130      	bne.n	8011234 <UART_SetConfig+0x5a0>
 80111d2:	4b57      	ldr	r3, [pc, #348]	; (8011330 <UART_SetConfig+0x69c>)
 80111d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111d6:	f003 0307 	and.w	r3, r3, #7
 80111da:	2b05      	cmp	r3, #5
 80111dc:	d826      	bhi.n	801122c <UART_SetConfig+0x598>
 80111de:	a201      	add	r2, pc, #4	; (adr r2, 80111e4 <UART_SetConfig+0x550>)
 80111e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111e4:	080111fd 	.word	0x080111fd
 80111e8:	08011205 	.word	0x08011205
 80111ec:	0801120d 	.word	0x0801120d
 80111f0:	08011215 	.word	0x08011215
 80111f4:	0801121d 	.word	0x0801121d
 80111f8:	08011225 	.word	0x08011225
 80111fc:	2302      	movs	r3, #2
 80111fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011202:	e01a      	b.n	801123a <UART_SetConfig+0x5a6>
 8011204:	2304      	movs	r3, #4
 8011206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120a:	e016      	b.n	801123a <UART_SetConfig+0x5a6>
 801120c:	2308      	movs	r3, #8
 801120e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011212:	e012      	b.n	801123a <UART_SetConfig+0x5a6>
 8011214:	2310      	movs	r3, #16
 8011216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121a:	e00e      	b.n	801123a <UART_SetConfig+0x5a6>
 801121c:	2320      	movs	r3, #32
 801121e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011222:	e00a      	b.n	801123a <UART_SetConfig+0x5a6>
 8011224:	2340      	movs	r3, #64	; 0x40
 8011226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122a:	e006      	b.n	801123a <UART_SetConfig+0x5a6>
 801122c:	2380      	movs	r3, #128	; 0x80
 801122e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011232:	e002      	b.n	801123a <UART_SetConfig+0x5a6>
 8011234:	2380      	movs	r3, #128	; 0x80
 8011236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	4a3f      	ldr	r2, [pc, #252]	; (801133c <UART_SetConfig+0x6a8>)
 8011240:	4293      	cmp	r3, r2
 8011242:	f040 80f8 	bne.w	8011436 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011246:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801124a:	2b20      	cmp	r3, #32
 801124c:	dc46      	bgt.n	80112dc <UART_SetConfig+0x648>
 801124e:	2b02      	cmp	r3, #2
 8011250:	f2c0 8082 	blt.w	8011358 <UART_SetConfig+0x6c4>
 8011254:	3b02      	subs	r3, #2
 8011256:	2b1e      	cmp	r3, #30
 8011258:	d87e      	bhi.n	8011358 <UART_SetConfig+0x6c4>
 801125a:	a201      	add	r2, pc, #4	; (adr r2, 8011260 <UART_SetConfig+0x5cc>)
 801125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011260:	080112e3 	.word	0x080112e3
 8011264:	08011359 	.word	0x08011359
 8011268:	080112eb 	.word	0x080112eb
 801126c:	08011359 	.word	0x08011359
 8011270:	08011359 	.word	0x08011359
 8011274:	08011359 	.word	0x08011359
 8011278:	080112fb 	.word	0x080112fb
 801127c:	08011359 	.word	0x08011359
 8011280:	08011359 	.word	0x08011359
 8011284:	08011359 	.word	0x08011359
 8011288:	08011359 	.word	0x08011359
 801128c:	08011359 	.word	0x08011359
 8011290:	08011359 	.word	0x08011359
 8011294:	08011359 	.word	0x08011359
 8011298:	0801130b 	.word	0x0801130b
 801129c:	08011359 	.word	0x08011359
 80112a0:	08011359 	.word	0x08011359
 80112a4:	08011359 	.word	0x08011359
 80112a8:	08011359 	.word	0x08011359
 80112ac:	08011359 	.word	0x08011359
 80112b0:	08011359 	.word	0x08011359
 80112b4:	08011359 	.word	0x08011359
 80112b8:	08011359 	.word	0x08011359
 80112bc:	08011359 	.word	0x08011359
 80112c0:	08011359 	.word	0x08011359
 80112c4:	08011359 	.word	0x08011359
 80112c8:	08011359 	.word	0x08011359
 80112cc:	08011359 	.word	0x08011359
 80112d0:	08011359 	.word	0x08011359
 80112d4:	08011359 	.word	0x08011359
 80112d8:	0801134b 	.word	0x0801134b
 80112dc:	2b40      	cmp	r3, #64	; 0x40
 80112de:	d037      	beq.n	8011350 <UART_SetConfig+0x6bc>
 80112e0:	e03a      	b.n	8011358 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80112e2:	f7fb fce5 	bl	800ccb0 <HAL_RCCEx_GetD3PCLK1Freq>
 80112e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80112e8:	e03c      	b.n	8011364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80112ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7fb fcf4 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80112f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112f8:	e034      	b.n	8011364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80112fa:	f107 0318 	add.w	r3, r7, #24
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fb fe40 	bl	800cf84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011304:	69fb      	ldr	r3, [r7, #28]
 8011306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011308:	e02c      	b.n	8011364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801130a:	4b09      	ldr	r3, [pc, #36]	; (8011330 <UART_SetConfig+0x69c>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f003 0320 	and.w	r3, r3, #32
 8011312:	2b00      	cmp	r3, #0
 8011314:	d016      	beq.n	8011344 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011316:	4b06      	ldr	r3, [pc, #24]	; (8011330 <UART_SetConfig+0x69c>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	08db      	lsrs	r3, r3, #3
 801131c:	f003 0303 	and.w	r3, r3, #3
 8011320:	4a07      	ldr	r2, [pc, #28]	; (8011340 <UART_SetConfig+0x6ac>)
 8011322:	fa22 f303 	lsr.w	r3, r2, r3
 8011326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011328:	e01c      	b.n	8011364 <UART_SetConfig+0x6d0>
 801132a:	bf00      	nop
 801132c:	40011400 	.word	0x40011400
 8011330:	58024400 	.word	0x58024400
 8011334:	40007800 	.word	0x40007800
 8011338:	40007c00 	.word	0x40007c00
 801133c:	58000c00 	.word	0x58000c00
 8011340:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011344:	4b9d      	ldr	r3, [pc, #628]	; (80115bc <UART_SetConfig+0x928>)
 8011346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011348:	e00c      	b.n	8011364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801134a:	4b9d      	ldr	r3, [pc, #628]	; (80115c0 <UART_SetConfig+0x92c>)
 801134c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801134e:	e009      	b.n	8011364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011356:	e005      	b.n	8011364 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011358:	2300      	movs	r3, #0
 801135a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801135c:	2301      	movs	r3, #1
 801135e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011362:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011366:	2b00      	cmp	r3, #0
 8011368:	f000 81de 	beq.w	8011728 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011370:	4a94      	ldr	r2, [pc, #592]	; (80115c4 <UART_SetConfig+0x930>)
 8011372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011376:	461a      	mov	r2, r3
 8011378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801137a:	fbb3 f3f2 	udiv	r3, r3, r2
 801137e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	685a      	ldr	r2, [r3, #4]
 8011384:	4613      	mov	r3, r2
 8011386:	005b      	lsls	r3, r3, #1
 8011388:	4413      	add	r3, r2
 801138a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801138c:	429a      	cmp	r2, r3
 801138e:	d305      	bcc.n	801139c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011398:	429a      	cmp	r2, r3
 801139a:	d903      	bls.n	80113a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801139c:	2301      	movs	r3, #1
 801139e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80113a2:	e1c1      	b.n	8011728 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80113a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113a6:	2200      	movs	r2, #0
 80113a8:	60bb      	str	r3, [r7, #8]
 80113aa:	60fa      	str	r2, [r7, #12]
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b0:	4a84      	ldr	r2, [pc, #528]	; (80115c4 <UART_SetConfig+0x930>)
 80113b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	2200      	movs	r2, #0
 80113ba:	603b      	str	r3, [r7, #0]
 80113bc:	607a      	str	r2, [r7, #4]
 80113be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80113c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80113c6:	f7ee ff8b 	bl	80002e0 <__aeabi_uldivmod>
 80113ca:	4602      	mov	r2, r0
 80113cc:	460b      	mov	r3, r1
 80113ce:	4610      	mov	r0, r2
 80113d0:	4619      	mov	r1, r3
 80113d2:	f04f 0200 	mov.w	r2, #0
 80113d6:	f04f 0300 	mov.w	r3, #0
 80113da:	020b      	lsls	r3, r1, #8
 80113dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80113e0:	0202      	lsls	r2, r0, #8
 80113e2:	6979      	ldr	r1, [r7, #20]
 80113e4:	6849      	ldr	r1, [r1, #4]
 80113e6:	0849      	lsrs	r1, r1, #1
 80113e8:	2000      	movs	r0, #0
 80113ea:	460c      	mov	r4, r1
 80113ec:	4605      	mov	r5, r0
 80113ee:	eb12 0804 	adds.w	r8, r2, r4
 80113f2:	eb43 0905 	adc.w	r9, r3, r5
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	2200      	movs	r2, #0
 80113fc:	469a      	mov	sl, r3
 80113fe:	4693      	mov	fp, r2
 8011400:	4652      	mov	r2, sl
 8011402:	465b      	mov	r3, fp
 8011404:	4640      	mov	r0, r8
 8011406:	4649      	mov	r1, r9
 8011408:	f7ee ff6a 	bl	80002e0 <__aeabi_uldivmod>
 801140c:	4602      	mov	r2, r0
 801140e:	460b      	mov	r3, r1
 8011410:	4613      	mov	r3, r2
 8011412:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801141a:	d308      	bcc.n	801142e <UART_SetConfig+0x79a>
 801141c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011422:	d204      	bcs.n	801142e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801142a:	60da      	str	r2, [r3, #12]
 801142c:	e17c      	b.n	8011728 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801142e:	2301      	movs	r3, #1
 8011430:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011434:	e178      	b.n	8011728 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011436:	697b      	ldr	r3, [r7, #20]
 8011438:	69db      	ldr	r3, [r3, #28]
 801143a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801143e:	f040 80c5 	bne.w	80115cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011442:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011446:	2b20      	cmp	r3, #32
 8011448:	dc48      	bgt.n	80114dc <UART_SetConfig+0x848>
 801144a:	2b00      	cmp	r3, #0
 801144c:	db7b      	blt.n	8011546 <UART_SetConfig+0x8b2>
 801144e:	2b20      	cmp	r3, #32
 8011450:	d879      	bhi.n	8011546 <UART_SetConfig+0x8b2>
 8011452:	a201      	add	r2, pc, #4	; (adr r2, 8011458 <UART_SetConfig+0x7c4>)
 8011454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011458:	080114e3 	.word	0x080114e3
 801145c:	080114eb 	.word	0x080114eb
 8011460:	08011547 	.word	0x08011547
 8011464:	08011547 	.word	0x08011547
 8011468:	080114f3 	.word	0x080114f3
 801146c:	08011547 	.word	0x08011547
 8011470:	08011547 	.word	0x08011547
 8011474:	08011547 	.word	0x08011547
 8011478:	08011503 	.word	0x08011503
 801147c:	08011547 	.word	0x08011547
 8011480:	08011547 	.word	0x08011547
 8011484:	08011547 	.word	0x08011547
 8011488:	08011547 	.word	0x08011547
 801148c:	08011547 	.word	0x08011547
 8011490:	08011547 	.word	0x08011547
 8011494:	08011547 	.word	0x08011547
 8011498:	08011513 	.word	0x08011513
 801149c:	08011547 	.word	0x08011547
 80114a0:	08011547 	.word	0x08011547
 80114a4:	08011547 	.word	0x08011547
 80114a8:	08011547 	.word	0x08011547
 80114ac:	08011547 	.word	0x08011547
 80114b0:	08011547 	.word	0x08011547
 80114b4:	08011547 	.word	0x08011547
 80114b8:	08011547 	.word	0x08011547
 80114bc:	08011547 	.word	0x08011547
 80114c0:	08011547 	.word	0x08011547
 80114c4:	08011547 	.word	0x08011547
 80114c8:	08011547 	.word	0x08011547
 80114cc:	08011547 	.word	0x08011547
 80114d0:	08011547 	.word	0x08011547
 80114d4:	08011547 	.word	0x08011547
 80114d8:	08011539 	.word	0x08011539
 80114dc:	2b40      	cmp	r3, #64	; 0x40
 80114de:	d02e      	beq.n	801153e <UART_SetConfig+0x8aa>
 80114e0:	e031      	b.n	8011546 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80114e2:	f7f9 fbed 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 80114e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80114e8:	e033      	b.n	8011552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80114ea:	f7f9 fbff 	bl	800acec <HAL_RCC_GetPCLK2Freq>
 80114ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80114f0:	e02f      	b.n	8011552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fb fbf0 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80114fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011500:	e027      	b.n	8011552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011502:	f107 0318 	add.w	r3, r7, #24
 8011506:	4618      	mov	r0, r3
 8011508:	f7fb fd3c 	bl	800cf84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801150c:	69fb      	ldr	r3, [r7, #28]
 801150e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011510:	e01f      	b.n	8011552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011512:	4b2d      	ldr	r3, [pc, #180]	; (80115c8 <UART_SetConfig+0x934>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	f003 0320 	and.w	r3, r3, #32
 801151a:	2b00      	cmp	r3, #0
 801151c:	d009      	beq.n	8011532 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801151e:	4b2a      	ldr	r3, [pc, #168]	; (80115c8 <UART_SetConfig+0x934>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	08db      	lsrs	r3, r3, #3
 8011524:	f003 0303 	and.w	r3, r3, #3
 8011528:	4a24      	ldr	r2, [pc, #144]	; (80115bc <UART_SetConfig+0x928>)
 801152a:	fa22 f303 	lsr.w	r3, r2, r3
 801152e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011530:	e00f      	b.n	8011552 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011532:	4b22      	ldr	r3, [pc, #136]	; (80115bc <UART_SetConfig+0x928>)
 8011534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011536:	e00c      	b.n	8011552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011538:	4b21      	ldr	r3, [pc, #132]	; (80115c0 <UART_SetConfig+0x92c>)
 801153a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801153c:	e009      	b.n	8011552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801153e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011544:	e005      	b.n	8011552 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011546:	2300      	movs	r3, #0
 8011548:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801154a:	2301      	movs	r3, #1
 801154c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011550:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011554:	2b00      	cmp	r3, #0
 8011556:	f000 80e7 	beq.w	8011728 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801155e:	4a19      	ldr	r2, [pc, #100]	; (80115c4 <UART_SetConfig+0x930>)
 8011560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011564:	461a      	mov	r2, r3
 8011566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011568:	fbb3 f3f2 	udiv	r3, r3, r2
 801156c:	005a      	lsls	r2, r3, #1
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	085b      	lsrs	r3, r3, #1
 8011574:	441a      	add	r2, r3
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	fbb2 f3f3 	udiv	r3, r2, r3
 801157e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011582:	2b0f      	cmp	r3, #15
 8011584:	d916      	bls.n	80115b4 <UART_SetConfig+0x920>
 8011586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801158c:	d212      	bcs.n	80115b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801158e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011590:	b29b      	uxth	r3, r3
 8011592:	f023 030f 	bic.w	r3, r3, #15
 8011596:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159a:	085b      	lsrs	r3, r3, #1
 801159c:	b29b      	uxth	r3, r3
 801159e:	f003 0307 	and.w	r3, r3, #7
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80115a6:	4313      	orrs	r3, r2
 80115a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80115b0:	60da      	str	r2, [r3, #12]
 80115b2:	e0b9      	b.n	8011728 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80115b4:	2301      	movs	r3, #1
 80115b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80115ba:	e0b5      	b.n	8011728 <UART_SetConfig+0xa94>
 80115bc:	03d09000 	.word	0x03d09000
 80115c0:	003d0900 	.word	0x003d0900
 80115c4:	08017698 	.word	0x08017698
 80115c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80115cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80115d0:	2b20      	cmp	r3, #32
 80115d2:	dc49      	bgt.n	8011668 <UART_SetConfig+0x9d4>
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	db7c      	blt.n	80116d2 <UART_SetConfig+0xa3e>
 80115d8:	2b20      	cmp	r3, #32
 80115da:	d87a      	bhi.n	80116d2 <UART_SetConfig+0xa3e>
 80115dc:	a201      	add	r2, pc, #4	; (adr r2, 80115e4 <UART_SetConfig+0x950>)
 80115de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e2:	bf00      	nop
 80115e4:	0801166f 	.word	0x0801166f
 80115e8:	08011677 	.word	0x08011677
 80115ec:	080116d3 	.word	0x080116d3
 80115f0:	080116d3 	.word	0x080116d3
 80115f4:	0801167f 	.word	0x0801167f
 80115f8:	080116d3 	.word	0x080116d3
 80115fc:	080116d3 	.word	0x080116d3
 8011600:	080116d3 	.word	0x080116d3
 8011604:	0801168f 	.word	0x0801168f
 8011608:	080116d3 	.word	0x080116d3
 801160c:	080116d3 	.word	0x080116d3
 8011610:	080116d3 	.word	0x080116d3
 8011614:	080116d3 	.word	0x080116d3
 8011618:	080116d3 	.word	0x080116d3
 801161c:	080116d3 	.word	0x080116d3
 8011620:	080116d3 	.word	0x080116d3
 8011624:	0801169f 	.word	0x0801169f
 8011628:	080116d3 	.word	0x080116d3
 801162c:	080116d3 	.word	0x080116d3
 8011630:	080116d3 	.word	0x080116d3
 8011634:	080116d3 	.word	0x080116d3
 8011638:	080116d3 	.word	0x080116d3
 801163c:	080116d3 	.word	0x080116d3
 8011640:	080116d3 	.word	0x080116d3
 8011644:	080116d3 	.word	0x080116d3
 8011648:	080116d3 	.word	0x080116d3
 801164c:	080116d3 	.word	0x080116d3
 8011650:	080116d3 	.word	0x080116d3
 8011654:	080116d3 	.word	0x080116d3
 8011658:	080116d3 	.word	0x080116d3
 801165c:	080116d3 	.word	0x080116d3
 8011660:	080116d3 	.word	0x080116d3
 8011664:	080116c5 	.word	0x080116c5
 8011668:	2b40      	cmp	r3, #64	; 0x40
 801166a:	d02e      	beq.n	80116ca <UART_SetConfig+0xa36>
 801166c:	e031      	b.n	80116d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801166e:	f7f9 fb27 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 8011672:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011674:	e033      	b.n	80116de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011676:	f7f9 fb39 	bl	800acec <HAL_RCC_GetPCLK2Freq>
 801167a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801167c:	e02f      	b.n	80116de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011682:	4618      	mov	r0, r3
 8011684:	f7fb fb2a 	bl	800ccdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801168a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801168c:	e027      	b.n	80116de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801168e:	f107 0318 	add.w	r3, r7, #24
 8011692:	4618      	mov	r0, r3
 8011694:	f7fb fc76 	bl	800cf84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011698:	69fb      	ldr	r3, [r7, #28]
 801169a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801169c:	e01f      	b.n	80116de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801169e:	4b2d      	ldr	r3, [pc, #180]	; (8011754 <UART_SetConfig+0xac0>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f003 0320 	and.w	r3, r3, #32
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d009      	beq.n	80116be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80116aa:	4b2a      	ldr	r3, [pc, #168]	; (8011754 <UART_SetConfig+0xac0>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	08db      	lsrs	r3, r3, #3
 80116b0:	f003 0303 	and.w	r3, r3, #3
 80116b4:	4a28      	ldr	r2, [pc, #160]	; (8011758 <UART_SetConfig+0xac4>)
 80116b6:	fa22 f303 	lsr.w	r3, r2, r3
 80116ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80116bc:	e00f      	b.n	80116de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80116be:	4b26      	ldr	r3, [pc, #152]	; (8011758 <UART_SetConfig+0xac4>)
 80116c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116c2:	e00c      	b.n	80116de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80116c4:	4b25      	ldr	r3, [pc, #148]	; (801175c <UART_SetConfig+0xac8>)
 80116c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116c8:	e009      	b.n	80116de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116d0:	e005      	b.n	80116de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80116d2:	2300      	movs	r3, #0
 80116d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80116d6:	2301      	movs	r3, #1
 80116d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80116dc:	bf00      	nop
    }

    if (pclk != 0U)
 80116de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d021      	beq.n	8011728 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116e8:	4a1d      	ldr	r2, [pc, #116]	; (8011760 <UART_SetConfig+0xacc>)
 80116ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116ee:	461a      	mov	r2, r3
 80116f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	085b      	lsrs	r3, r3, #1
 80116fc:	441a      	add	r2, r3
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	fbb2 f3f3 	udiv	r3, r2, r3
 8011706:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170a:	2b0f      	cmp	r3, #15
 801170c:	d909      	bls.n	8011722 <UART_SetConfig+0xa8e>
 801170e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011714:	d205      	bcs.n	8011722 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011718:	b29a      	uxth	r2, r3
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	60da      	str	r2, [r3, #12]
 8011720:	e002      	b.n	8011728 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011722:	2301      	movs	r3, #1
 8011724:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	2201      	movs	r2, #1
 801172c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	2201      	movs	r2, #1
 8011734:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	2200      	movs	r2, #0
 801173c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	2200      	movs	r2, #0
 8011742:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011744:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011748:	4618      	mov	r0, r3
 801174a:	3748      	adds	r7, #72	; 0x48
 801174c:	46bd      	mov	sp, r7
 801174e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011752:	bf00      	nop
 8011754:	58024400 	.word	0x58024400
 8011758:	03d09000 	.word	0x03d09000
 801175c:	003d0900 	.word	0x003d0900
 8011760:	08017698 	.word	0x08017698

08011764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011764:	b480      	push	{r7}
 8011766:	b083      	sub	sp, #12
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011770:	f003 0308 	and.w	r3, r3, #8
 8011774:	2b00      	cmp	r3, #0
 8011776:	d00a      	beq.n	801178e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	430a      	orrs	r2, r1
 801178c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011792:	f003 0301 	and.w	r3, r3, #1
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00a      	beq.n	80117b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	430a      	orrs	r2, r1
 80117ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117b4:	f003 0302 	and.w	r3, r3, #2
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00a      	beq.n	80117d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	430a      	orrs	r2, r1
 80117d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117d6:	f003 0304 	and.w	r3, r3, #4
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00a      	beq.n	80117f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	430a      	orrs	r2, r1
 80117f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117f8:	f003 0310 	and.w	r3, r3, #16
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d00a      	beq.n	8011816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	689b      	ldr	r3, [r3, #8]
 8011806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	430a      	orrs	r2, r1
 8011814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801181a:	f003 0320 	and.w	r3, r3, #32
 801181e:	2b00      	cmp	r3, #0
 8011820:	d00a      	beq.n	8011838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	689b      	ldr	r3, [r3, #8]
 8011828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	430a      	orrs	r2, r1
 8011836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801183c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011840:	2b00      	cmp	r3, #0
 8011842:	d01a      	beq.n	801187a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	430a      	orrs	r2, r1
 8011858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801185e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011862:	d10a      	bne.n	801187a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	685b      	ldr	r3, [r3, #4]
 801186a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	430a      	orrs	r2, r1
 8011878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801187e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011882:	2b00      	cmp	r3, #0
 8011884:	d00a      	beq.n	801189c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	430a      	orrs	r2, r1
 801189a:	605a      	str	r2, [r3, #4]
  }
}
 801189c:	bf00      	nop
 801189e:	370c      	adds	r7, #12
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr

080118a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b098      	sub	sp, #96	; 0x60
 80118ac:	af02      	add	r7, sp, #8
 80118ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2200      	movs	r2, #0
 80118b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80118b8:	f7f2 fa74 	bl	8003da4 <HAL_GetTick>
 80118bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	f003 0308 	and.w	r3, r3, #8
 80118c8:	2b08      	cmp	r3, #8
 80118ca:	d12f      	bne.n	801192c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80118cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80118d0:	9300      	str	r3, [sp, #0]
 80118d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118d4:	2200      	movs	r2, #0
 80118d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f000 f88e 	bl	80119fc <UART_WaitOnFlagUntilTimeout>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d022      	beq.n	801192c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ee:	e853 3f00 	ldrex	r3, [r3]
 80118f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80118f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80118fa:	653b      	str	r3, [r7, #80]	; 0x50
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	461a      	mov	r2, r3
 8011902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011904:	647b      	str	r3, [r7, #68]	; 0x44
 8011906:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011908:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801190a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801190c:	e841 2300 	strex	r3, r2, [r1]
 8011910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1e6      	bne.n	80118e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2220      	movs	r2, #32
 801191c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2200      	movs	r2, #0
 8011924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011928:	2303      	movs	r3, #3
 801192a:	e063      	b.n	80119f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f003 0304 	and.w	r3, r3, #4
 8011936:	2b04      	cmp	r3, #4
 8011938:	d149      	bne.n	80119ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801193a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801193e:	9300      	str	r3, [sp, #0]
 8011940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011942:	2200      	movs	r2, #0
 8011944:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f000 f857 	bl	80119fc <UART_WaitOnFlagUntilTimeout>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	d03c      	beq.n	80119ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801195c:	e853 3f00 	ldrex	r3, [r3]
 8011960:	623b      	str	r3, [r7, #32]
   return(result);
 8011962:	6a3b      	ldr	r3, [r7, #32]
 8011964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011968:	64fb      	str	r3, [r7, #76]	; 0x4c
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	461a      	mov	r2, r3
 8011970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011972:	633b      	str	r3, [r7, #48]	; 0x30
 8011974:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801197a:	e841 2300 	strex	r3, r2, [r1]
 801197e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011982:	2b00      	cmp	r3, #0
 8011984:	d1e6      	bne.n	8011954 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	3308      	adds	r3, #8
 801198c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	e853 3f00 	ldrex	r3, [r3]
 8011994:	60fb      	str	r3, [r7, #12]
   return(result);
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f023 0301 	bic.w	r3, r3, #1
 801199c:	64bb      	str	r3, [r7, #72]	; 0x48
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	3308      	adds	r3, #8
 80119a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80119a6:	61fa      	str	r2, [r7, #28]
 80119a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119aa:	69b9      	ldr	r1, [r7, #24]
 80119ac:	69fa      	ldr	r2, [r7, #28]
 80119ae:	e841 2300 	strex	r3, r2, [r1]
 80119b2:	617b      	str	r3, [r7, #20]
   return(result);
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d1e5      	bne.n	8011986 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2220      	movs	r2, #32
 80119be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2200      	movs	r2, #0
 80119c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80119ca:	2303      	movs	r3, #3
 80119cc:	e012      	b.n	80119f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2220      	movs	r2, #32
 80119d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2220      	movs	r2, #32
 80119da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2200      	movs	r2, #0
 80119e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2200      	movs	r2, #0
 80119e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	2200      	movs	r2, #0
 80119ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80119f2:	2300      	movs	r3, #0
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3758      	adds	r7, #88	; 0x58
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}

080119fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	603b      	str	r3, [r7, #0]
 8011a08:	4613      	mov	r3, r2
 8011a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a0c:	e04f      	b.n	8011aae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a0e:	69bb      	ldr	r3, [r7, #24]
 8011a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a14:	d04b      	beq.n	8011aae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a16:	f7f2 f9c5 	bl	8003da4 <HAL_GetTick>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	1ad3      	subs	r3, r2, r3
 8011a20:	69ba      	ldr	r2, [r7, #24]
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d302      	bcc.n	8011a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d101      	bne.n	8011a30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011a2c:	2303      	movs	r3, #3
 8011a2e:	e04e      	b.n	8011ace <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	f003 0304 	and.w	r3, r3, #4
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d037      	beq.n	8011aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	2b80      	cmp	r3, #128	; 0x80
 8011a42:	d034      	beq.n	8011aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	2b40      	cmp	r3, #64	; 0x40
 8011a48:	d031      	beq.n	8011aae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	69db      	ldr	r3, [r3, #28]
 8011a50:	f003 0308 	and.w	r3, r3, #8
 8011a54:	2b08      	cmp	r3, #8
 8011a56:	d110      	bne.n	8011a7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	2208      	movs	r2, #8
 8011a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011a60:	68f8      	ldr	r0, [r7, #12]
 8011a62:	f000 f99d 	bl	8011da0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2208      	movs	r2, #8
 8011a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2200      	movs	r2, #0
 8011a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011a76:	2301      	movs	r3, #1
 8011a78:	e029      	b.n	8011ace <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	69db      	ldr	r3, [r3, #28]
 8011a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a88:	d111      	bne.n	8011aae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011a94:	68f8      	ldr	r0, [r7, #12]
 8011a96:	f000 f983 	bl	8011da0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2220      	movs	r2, #32
 8011a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011aaa:	2303      	movs	r3, #3
 8011aac:	e00f      	b.n	8011ace <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	69da      	ldr	r2, [r3, #28]
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	4013      	ands	r3, r2
 8011ab8:	68ba      	ldr	r2, [r7, #8]
 8011aba:	429a      	cmp	r2, r3
 8011abc:	bf0c      	ite	eq
 8011abe:	2301      	moveq	r3, #1
 8011ac0:	2300      	movne	r3, #0
 8011ac2:	b2db      	uxtb	r3, r3
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	79fb      	ldrb	r3, [r7, #7]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d0a0      	beq.n	8011a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011acc:	2300      	movs	r3, #0
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3710      	adds	r7, #16
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
	...

08011ad8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011ad8:	b480      	push	{r7}
 8011ada:	b0a3      	sub	sp, #140	; 0x8c
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	4613      	mov	r3, r2
 8011ae4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	68ba      	ldr	r2, [r7, #8]
 8011aea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	88fa      	ldrh	r2, [r7, #6]
 8011af0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	88fa      	ldrh	r2, [r7, #6]
 8011af8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2200      	movs	r2, #0
 8011b00:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	689b      	ldr	r3, [r3, #8]
 8011b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b0a:	d10e      	bne.n	8011b2a <UART_Start_Receive_IT+0x52>
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	691b      	ldr	r3, [r3, #16]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d105      	bne.n	8011b20 <UART_Start_Receive_IT+0x48>
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011b1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011b1e:	e02d      	b.n	8011b7c <UART_Start_Receive_IT+0xa4>
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	22ff      	movs	r2, #255	; 0xff
 8011b24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011b28:	e028      	b.n	8011b7c <UART_Start_Receive_IT+0xa4>
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	689b      	ldr	r3, [r3, #8]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d10d      	bne.n	8011b4e <UART_Start_Receive_IT+0x76>
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	691b      	ldr	r3, [r3, #16]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d104      	bne.n	8011b44 <UART_Start_Receive_IT+0x6c>
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	22ff      	movs	r2, #255	; 0xff
 8011b3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011b42:	e01b      	b.n	8011b7c <UART_Start_Receive_IT+0xa4>
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	227f      	movs	r2, #127	; 0x7f
 8011b48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011b4c:	e016      	b.n	8011b7c <UART_Start_Receive_IT+0xa4>
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	689b      	ldr	r3, [r3, #8]
 8011b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011b56:	d10d      	bne.n	8011b74 <UART_Start_Receive_IT+0x9c>
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	691b      	ldr	r3, [r3, #16]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d104      	bne.n	8011b6a <UART_Start_Receive_IT+0x92>
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	227f      	movs	r2, #127	; 0x7f
 8011b64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011b68:	e008      	b.n	8011b7c <UART_Start_Receive_IT+0xa4>
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	223f      	movs	r2, #63	; 0x3f
 8011b6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011b72:	e003      	b.n	8011b7c <UART_Start_Receive_IT+0xa4>
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	2200      	movs	r2, #0
 8011b78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2200      	movs	r2, #0
 8011b80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2222      	movs	r2, #34	; 0x22
 8011b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	3308      	adds	r3, #8
 8011b92:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b96:	e853 3f00 	ldrex	r3, [r3]
 8011b9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b9e:	f043 0301 	orr.w	r3, r3, #1
 8011ba2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	3308      	adds	r3, #8
 8011bac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011bb0:	673a      	str	r2, [r7, #112]	; 0x70
 8011bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bb4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011bb6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011bb8:	e841 2300 	strex	r3, r2, [r1]
 8011bbc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d1e3      	bne.n	8011b8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011bcc:	d14f      	bne.n	8011c6e <UART_Start_Receive_IT+0x196>
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011bd4:	88fa      	ldrh	r2, [r7, #6]
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d349      	bcc.n	8011c6e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011be2:	d107      	bne.n	8011bf4 <UART_Start_Receive_IT+0x11c>
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	691b      	ldr	r3, [r3, #16]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d103      	bne.n	8011bf4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	4a47      	ldr	r2, [pc, #284]	; (8011d0c <UART_Start_Receive_IT+0x234>)
 8011bf0:	675a      	str	r2, [r3, #116]	; 0x74
 8011bf2:	e002      	b.n	8011bfa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	4a46      	ldr	r2, [pc, #280]	; (8011d10 <UART_Start_Receive_IT+0x238>)
 8011bf8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	691b      	ldr	r3, [r3, #16]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d01a      	beq.n	8011c38 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c0a:	e853 3f00 	ldrex	r3, [r3]
 8011c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	461a      	mov	r2, r3
 8011c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011c26:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011c2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011c2c:	e841 2300 	strex	r3, r2, [r1]
 8011c30:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d1e4      	bne.n	8011c02 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	3308      	adds	r3, #8
 8011c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c42:	e853 3f00 	ldrex	r3, [r3]
 8011c46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	3308      	adds	r3, #8
 8011c56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011c58:	64ba      	str	r2, [r7, #72]	; 0x48
 8011c5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c60:	e841 2300 	strex	r3, r2, [r1]
 8011c64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d1e5      	bne.n	8011c38 <UART_Start_Receive_IT+0x160>
 8011c6c:	e046      	b.n	8011cfc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	689b      	ldr	r3, [r3, #8]
 8011c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c76:	d107      	bne.n	8011c88 <UART_Start_Receive_IT+0x1b0>
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	691b      	ldr	r3, [r3, #16]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d103      	bne.n	8011c88 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	4a24      	ldr	r2, [pc, #144]	; (8011d14 <UART_Start_Receive_IT+0x23c>)
 8011c84:	675a      	str	r2, [r3, #116]	; 0x74
 8011c86:	e002      	b.n	8011c8e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	4a23      	ldr	r2, [pc, #140]	; (8011d18 <UART_Start_Receive_IT+0x240>)
 8011c8c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	691b      	ldr	r3, [r3, #16]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d019      	beq.n	8011cca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c9e:	e853 3f00 	ldrex	r3, [r3]
 8011ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011caa:	677b      	str	r3, [r7, #116]	; 0x74
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	461a      	mov	r2, r3
 8011cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8011cb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011cbc:	e841 2300 	strex	r3, r2, [r1]
 8011cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d1e6      	bne.n	8011c96 <UART_Start_Receive_IT+0x1be>
 8011cc8:	e018      	b.n	8011cfc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	e853 3f00 	ldrex	r3, [r3]
 8011cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	f043 0320 	orr.w	r3, r3, #32
 8011cde:	67bb      	str	r3, [r7, #120]	; 0x78
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ce8:	623b      	str	r3, [r7, #32]
 8011cea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cec:	69f9      	ldr	r1, [r7, #28]
 8011cee:	6a3a      	ldr	r2, [r7, #32]
 8011cf0:	e841 2300 	strex	r3, r2, [r1]
 8011cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8011cf6:	69bb      	ldr	r3, [r7, #24]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d1e6      	bne.n	8011cca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011cfc:	2300      	movs	r3, #0
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	378c      	adds	r7, #140	; 0x8c
 8011d02:	46bd      	mov	sp, r7
 8011d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d08:	4770      	bx	lr
 8011d0a:	bf00      	nop
 8011d0c:	080126f1 	.word	0x080126f1
 8011d10:	08012391 	.word	0x08012391
 8011d14:	080121d9 	.word	0x080121d9
 8011d18:	08012021 	.word	0x08012021

08011d1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b08f      	sub	sp, #60	; 0x3c
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d2a:	6a3b      	ldr	r3, [r7, #32]
 8011d2c:	e853 3f00 	ldrex	r3, [r3]
 8011d30:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011d38:	637b      	str	r3, [r7, #52]	; 0x34
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	461a      	mov	r2, r3
 8011d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d44:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d4a:	e841 2300 	strex	r3, r2, [r1]
 8011d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d1e6      	bne.n	8011d24 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	3308      	adds	r3, #8
 8011d5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	e853 3f00 	ldrex	r3, [r3]
 8011d64:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	3308      	adds	r3, #8
 8011d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d76:	61ba      	str	r2, [r7, #24]
 8011d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d7a:	6979      	ldr	r1, [r7, #20]
 8011d7c:	69ba      	ldr	r2, [r7, #24]
 8011d7e:	e841 2300 	strex	r3, r2, [r1]
 8011d82:	613b      	str	r3, [r7, #16]
   return(result);
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d1e5      	bne.n	8011d56 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2220      	movs	r2, #32
 8011d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011d92:	bf00      	nop
 8011d94:	373c      	adds	r7, #60	; 0x3c
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr
	...

08011da0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b095      	sub	sp, #84	; 0x54
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011db0:	e853 3f00 	ldrex	r3, [r3]
 8011db4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dc6:	643b      	str	r3, [r7, #64]	; 0x40
 8011dc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011dcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011dce:	e841 2300 	strex	r3, r2, [r1]
 8011dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d1e6      	bne.n	8011da8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	3308      	adds	r3, #8
 8011de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011de2:	6a3b      	ldr	r3, [r7, #32]
 8011de4:	e853 3f00 	ldrex	r3, [r3]
 8011de8:	61fb      	str	r3, [r7, #28]
   return(result);
 8011dea:	69fa      	ldr	r2, [r7, #28]
 8011dec:	4b1e      	ldr	r3, [pc, #120]	; (8011e68 <UART_EndRxTransfer+0xc8>)
 8011dee:	4013      	ands	r3, r2
 8011df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	3308      	adds	r3, #8
 8011df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e02:	e841 2300 	strex	r3, r2, [r1]
 8011e06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d1e5      	bne.n	8011dda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e12:	2b01      	cmp	r3, #1
 8011e14:	d118      	bne.n	8011e48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	e853 3f00 	ldrex	r3, [r3]
 8011e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	f023 0310 	bic.w	r3, r3, #16
 8011e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	461a      	mov	r2, r3
 8011e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e34:	61bb      	str	r3, [r7, #24]
 8011e36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e38:	6979      	ldr	r1, [r7, #20]
 8011e3a:	69ba      	ldr	r2, [r7, #24]
 8011e3c:	e841 2300 	strex	r3, r2, [r1]
 8011e40:	613b      	str	r3, [r7, #16]
   return(result);
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d1e6      	bne.n	8011e16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2220      	movs	r2, #32
 8011e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2200      	movs	r2, #0
 8011e54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011e5c:	bf00      	nop
 8011e5e:	3754      	adds	r7, #84	; 0x54
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr
 8011e68:	effffffe 	.word	0xeffffffe

08011e6c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b090      	sub	sp, #64	; 0x40
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e78:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	69db      	ldr	r3, [r3, #28]
 8011e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e82:	d037      	beq.n	8011ef4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e86:	2200      	movs	r2, #0
 8011e88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	3308      	adds	r3, #8
 8011e92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e96:	e853 3f00 	ldrex	r3, [r3]
 8011e9a:	623b      	str	r3, [r7, #32]
   return(result);
 8011e9c:	6a3b      	ldr	r3, [r7, #32]
 8011e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	3308      	adds	r3, #8
 8011eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011eac:	633a      	str	r2, [r7, #48]	; 0x30
 8011eae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011eb4:	e841 2300 	strex	r3, r2, [r1]
 8011eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d1e5      	bne.n	8011e8c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	e853 3f00 	ldrex	r3, [r3]
 8011ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8011ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	461a      	mov	r2, r3
 8011edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ede:	61fb      	str	r3, [r7, #28]
 8011ee0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ee2:	69b9      	ldr	r1, [r7, #24]
 8011ee4:	69fa      	ldr	r2, [r7, #28]
 8011ee6:	e841 2300 	strex	r3, r2, [r1]
 8011eea:	617b      	str	r3, [r7, #20]
   return(result);
 8011eec:	697b      	ldr	r3, [r7, #20]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d1e6      	bne.n	8011ec0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011ef2:	e002      	b.n	8011efa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011ef4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011ef6:	f7f0 f9a7 	bl	8002248 <HAL_UART_TxCpltCallback>
}
 8011efa:	bf00      	nop
 8011efc:	3740      	adds	r7, #64	; 0x40
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}

08011f02 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b084      	sub	sp, #16
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011f10:	68f8      	ldr	r0, [r7, #12]
 8011f12:	f7fe fe9f 	bl	8010c54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f16:	bf00      	nop
 8011f18:	3710      	adds	r7, #16
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b086      	sub	sp, #24
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f2a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011f2c:	697b      	ldr	r3, [r7, #20]
 8011f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f32:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011f34:	697b      	ldr	r3, [r7, #20]
 8011f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f3a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	689b      	ldr	r3, [r3, #8]
 8011f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f46:	2b80      	cmp	r3, #128	; 0x80
 8011f48:	d109      	bne.n	8011f5e <UART_DMAError+0x40>
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	2b21      	cmp	r3, #33	; 0x21
 8011f4e:	d106      	bne.n	8011f5e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	2200      	movs	r2, #0
 8011f54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011f58:	6978      	ldr	r0, [r7, #20]
 8011f5a:	f7ff fedf 	bl	8011d1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011f5e:	697b      	ldr	r3, [r7, #20]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	689b      	ldr	r3, [r3, #8]
 8011f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f68:	2b40      	cmp	r3, #64	; 0x40
 8011f6a:	d109      	bne.n	8011f80 <UART_DMAError+0x62>
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2b22      	cmp	r3, #34	; 0x22
 8011f70:	d106      	bne.n	8011f80 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	2200      	movs	r2, #0
 8011f76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011f7a:	6978      	ldr	r0, [r7, #20]
 8011f7c:	f7ff ff10 	bl	8011da0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f86:	f043 0210 	orr.w	r2, r3, #16
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011f90:	6978      	ldr	r0, [r7, #20]
 8011f92:	f7fe fe69 	bl	8010c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f96:	bf00      	nop
 8011f98:	3718      	adds	r7, #24
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}

08011f9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011f9e:	b580      	push	{r7, lr}
 8011fa0:	b084      	sub	sp, #16
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011faa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011fbc:	68f8      	ldr	r0, [r7, #12]
 8011fbe:	f7fe fe53 	bl	8010c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011fc2:	bf00      	nop
 8011fc4:	3710      	adds	r7, #16
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}

08011fca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	b088      	sub	sp, #32
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	e853 3f00 	ldrex	r3, [r3]
 8011fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011fe6:	61fb      	str	r3, [r7, #28]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	461a      	mov	r2, r3
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	61bb      	str	r3, [r7, #24]
 8011ff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff4:	6979      	ldr	r1, [r7, #20]
 8011ff6:	69ba      	ldr	r2, [r7, #24]
 8011ff8:	e841 2300 	strex	r3, r2, [r1]
 8011ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d1e6      	bne.n	8011fd2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	2220      	movs	r2, #32
 8012008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2200      	movs	r2, #0
 8012010:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f7f0 f918 	bl	8002248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012018:	bf00      	nop
 801201a:	3720      	adds	r7, #32
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b09c      	sub	sp, #112	; 0x70
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801202e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012038:	2b22      	cmp	r3, #34	; 0x22
 801203a:	f040 80be 	bne.w	80121ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012044:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012048:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801204c:	b2d9      	uxtb	r1, r3
 801204e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012052:	b2da      	uxtb	r2, r3
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012058:	400a      	ands	r2, r1
 801205a:	b2d2      	uxtb	r2, r2
 801205c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012062:	1c5a      	adds	r2, r3, #1
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801206e:	b29b      	uxth	r3, r3
 8012070:	3b01      	subs	r3, #1
 8012072:	b29a      	uxth	r2, r3
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012080:	b29b      	uxth	r3, r3
 8012082:	2b00      	cmp	r3, #0
 8012084:	f040 80a1 	bne.w	80121ca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801208e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012090:	e853 3f00 	ldrex	r3, [r3]
 8012094:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801209c:	66bb      	str	r3, [r7, #104]	; 0x68
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	461a      	mov	r2, r3
 80120a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80120a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80120a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80120ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80120ae:	e841 2300 	strex	r3, r2, [r1]
 80120b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80120b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d1e6      	bne.n	8012088 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	3308      	adds	r3, #8
 80120c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c4:	e853 3f00 	ldrex	r3, [r3]
 80120c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80120ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120cc:	f023 0301 	bic.w	r3, r3, #1
 80120d0:	667b      	str	r3, [r7, #100]	; 0x64
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	3308      	adds	r3, #8
 80120d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80120da:	647a      	str	r2, [r7, #68]	; 0x44
 80120dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80120e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120e2:	e841 2300 	strex	r3, r2, [r1]
 80120e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80120e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d1e5      	bne.n	80120ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2220      	movs	r2, #32
 80120f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2200      	movs	r2, #0
 80120fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2200      	movs	r2, #0
 8012100:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	4a33      	ldr	r2, [pc, #204]	; (80121d4 <UART_RxISR_8BIT+0x1b4>)
 8012108:	4293      	cmp	r3, r2
 801210a:	d01f      	beq.n	801214c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012116:	2b00      	cmp	r3, #0
 8012118:	d018      	beq.n	801214c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012122:	e853 3f00 	ldrex	r3, [r3]
 8012126:	623b      	str	r3, [r7, #32]
   return(result);
 8012128:	6a3b      	ldr	r3, [r7, #32]
 801212a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801212e:	663b      	str	r3, [r7, #96]	; 0x60
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	461a      	mov	r2, r3
 8012136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012138:	633b      	str	r3, [r7, #48]	; 0x30
 801213a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801213c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801213e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012140:	e841 2300 	strex	r3, r2, [r1]
 8012144:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012148:	2b00      	cmp	r3, #0
 801214a:	d1e6      	bne.n	801211a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012150:	2b01      	cmp	r3, #1
 8012152:	d12e      	bne.n	80121b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2200      	movs	r2, #0
 8012158:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	e853 3f00 	ldrex	r3, [r3]
 8012166:	60fb      	str	r3, [r7, #12]
   return(result);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	f023 0310 	bic.w	r3, r3, #16
 801216e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	461a      	mov	r2, r3
 8012176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012178:	61fb      	str	r3, [r7, #28]
 801217a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801217c:	69b9      	ldr	r1, [r7, #24]
 801217e:	69fa      	ldr	r2, [r7, #28]
 8012180:	e841 2300 	strex	r3, r2, [r1]
 8012184:	617b      	str	r3, [r7, #20]
   return(result);
 8012186:	697b      	ldr	r3, [r7, #20]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d1e6      	bne.n	801215a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	69db      	ldr	r3, [r3, #28]
 8012192:	f003 0310 	and.w	r3, r3, #16
 8012196:	2b10      	cmp	r3, #16
 8012198:	d103      	bne.n	80121a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	2210      	movs	r2, #16
 80121a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80121a8:	4619      	mov	r1, r3
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f7fe fd66 	bl	8010c7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80121b0:	e00b      	b.n	80121ca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f7ee fa68 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 80121b8:	e007      	b.n	80121ca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	699a      	ldr	r2, [r3, #24]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	f042 0208 	orr.w	r2, r2, #8
 80121c8:	619a      	str	r2, [r3, #24]
}
 80121ca:	bf00      	nop
 80121cc:	3770      	adds	r7, #112	; 0x70
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}
 80121d2:	bf00      	nop
 80121d4:	58000c00 	.word	0x58000c00

080121d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b09c      	sub	sp, #112	; 0x70
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80121e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80121f0:	2b22      	cmp	r3, #34	; 0x22
 80121f2:	f040 80be 	bne.w	8012372 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012204:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012206:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801220a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801220e:	4013      	ands	r3, r2
 8012210:	b29a      	uxth	r2, r3
 8012212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012214:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801221a:	1c9a      	adds	r2, r3, #2
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012226:	b29b      	uxth	r3, r3
 8012228:	3b01      	subs	r3, #1
 801222a:	b29a      	uxth	r2, r3
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012238:	b29b      	uxth	r3, r3
 801223a:	2b00      	cmp	r3, #0
 801223c:	f040 80a1 	bne.w	8012382 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012248:	e853 3f00 	ldrex	r3, [r3]
 801224c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801224e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012254:	667b      	str	r3, [r7, #100]	; 0x64
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	461a      	mov	r2, r3
 801225c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801225e:	657b      	str	r3, [r7, #84]	; 0x54
 8012260:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012262:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012264:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012266:	e841 2300 	strex	r3, r2, [r1]
 801226a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801226c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801226e:	2b00      	cmp	r3, #0
 8012270:	d1e6      	bne.n	8012240 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	3308      	adds	r3, #8
 8012278:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801227a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801227c:	e853 3f00 	ldrex	r3, [r3]
 8012280:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012284:	f023 0301 	bic.w	r3, r3, #1
 8012288:	663b      	str	r3, [r7, #96]	; 0x60
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	3308      	adds	r3, #8
 8012290:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012292:	643a      	str	r2, [r7, #64]	; 0x40
 8012294:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012296:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012298:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801229a:	e841 2300 	strex	r3, r2, [r1]
 801229e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80122a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d1e5      	bne.n	8012272 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2220      	movs	r2, #32
 80122aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2200      	movs	r2, #0
 80122b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2200      	movs	r2, #0
 80122b8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	4a33      	ldr	r2, [pc, #204]	; (801238c <UART_RxISR_16BIT+0x1b4>)
 80122c0:	4293      	cmp	r3, r2
 80122c2:	d01f      	beq.n	8012304 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	685b      	ldr	r3, [r3, #4]
 80122ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d018      	beq.n	8012304 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122d8:	6a3b      	ldr	r3, [r7, #32]
 80122da:	e853 3f00 	ldrex	r3, [r3]
 80122de:	61fb      	str	r3, [r7, #28]
   return(result);
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80122e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	461a      	mov	r2, r3
 80122ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80122f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122f2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80122f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122f8:	e841 2300 	strex	r3, r2, [r1]
 80122fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80122fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012300:	2b00      	cmp	r3, #0
 8012302:	d1e6      	bne.n	80122d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012308:	2b01      	cmp	r3, #1
 801230a:	d12e      	bne.n	801236a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2200      	movs	r2, #0
 8012310:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	e853 3f00 	ldrex	r3, [r3]
 801231e:	60bb      	str	r3, [r7, #8]
   return(result);
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	f023 0310 	bic.w	r3, r3, #16
 8012326:	65bb      	str	r3, [r7, #88]	; 0x58
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	461a      	mov	r2, r3
 801232e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012330:	61bb      	str	r3, [r7, #24]
 8012332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012334:	6979      	ldr	r1, [r7, #20]
 8012336:	69ba      	ldr	r2, [r7, #24]
 8012338:	e841 2300 	strex	r3, r2, [r1]
 801233c:	613b      	str	r3, [r7, #16]
   return(result);
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d1e6      	bne.n	8012312 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	69db      	ldr	r3, [r3, #28]
 801234a:	f003 0310 	and.w	r3, r3, #16
 801234e:	2b10      	cmp	r3, #16
 8012350:	d103      	bne.n	801235a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	2210      	movs	r2, #16
 8012358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012360:	4619      	mov	r1, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f7fe fc8a 	bl	8010c7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012368:	e00b      	b.n	8012382 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f7ee f98c 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012370:	e007      	b.n	8012382 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	699a      	ldr	r2, [r3, #24]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f042 0208 	orr.w	r2, r2, #8
 8012380:	619a      	str	r2, [r3, #24]
}
 8012382:	bf00      	nop
 8012384:	3770      	adds	r7, #112	; 0x70
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	58000c00 	.word	0x58000c00

08012390 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b0ac      	sub	sp, #176	; 0xb0
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801239e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	69db      	ldr	r3, [r3, #28]
 80123a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	689b      	ldr	r3, [r3, #8]
 80123bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80123c6:	2b22      	cmp	r3, #34	; 0x22
 80123c8:	f040 8180 	bne.w	80126cc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80123d2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80123d6:	e123      	b.n	8012620 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123de:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80123e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80123e6:	b2d9      	uxtb	r1, r3
 80123e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80123ec:	b2da      	uxtb	r2, r3
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123f2:	400a      	ands	r2, r1
 80123f4:	b2d2      	uxtb	r2, r2
 80123f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123fc:	1c5a      	adds	r2, r3, #1
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012408:	b29b      	uxth	r3, r3
 801240a:	3b01      	subs	r3, #1
 801240c:	b29a      	uxth	r2, r3
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	69db      	ldr	r3, [r3, #28]
 801241a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801241e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012422:	f003 0307 	and.w	r3, r3, #7
 8012426:	2b00      	cmp	r3, #0
 8012428:	d053      	beq.n	80124d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801242a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801242e:	f003 0301 	and.w	r3, r3, #1
 8012432:	2b00      	cmp	r3, #0
 8012434:	d011      	beq.n	801245a <UART_RxISR_8BIT_FIFOEN+0xca>
 8012436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801243e:	2b00      	cmp	r3, #0
 8012440:	d00b      	beq.n	801245a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	2201      	movs	r2, #1
 8012448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012450:	f043 0201 	orr.w	r2, r3, #1
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801245a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801245e:	f003 0302 	and.w	r3, r3, #2
 8012462:	2b00      	cmp	r3, #0
 8012464:	d011      	beq.n	801248a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801246a:	f003 0301 	and.w	r3, r3, #1
 801246e:	2b00      	cmp	r3, #0
 8012470:	d00b      	beq.n	801248a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	2202      	movs	r2, #2
 8012478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012480:	f043 0204 	orr.w	r2, r3, #4
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801248a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801248e:	f003 0304 	and.w	r3, r3, #4
 8012492:	2b00      	cmp	r3, #0
 8012494:	d011      	beq.n	80124ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801249a:	f003 0301 	and.w	r3, r3, #1
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d00b      	beq.n	80124ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	2204      	movs	r2, #4
 80124a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124b0:	f043 0202 	orr.w	r2, r3, #2
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d006      	beq.n	80124d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f7fe fbcf 	bl	8010c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	2200      	movs	r2, #0
 80124ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124d8:	b29b      	uxth	r3, r3
 80124da:	2b00      	cmp	r3, #0
 80124dc:	f040 80a0 	bne.w	8012620 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80124e8:	e853 3f00 	ldrex	r3, [r3]
 80124ec:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80124ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80124f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	461a      	mov	r2, r3
 80124fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012502:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012504:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012506:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012508:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801250a:	e841 2300 	strex	r3, r2, [r1]
 801250e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012512:	2b00      	cmp	r3, #0
 8012514:	d1e4      	bne.n	80124e0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	3308      	adds	r3, #8
 801251c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801251e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012520:	e853 3f00 	ldrex	r3, [r3]
 8012524:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012526:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012528:	4b6e      	ldr	r3, [pc, #440]	; (80126e4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801252a:	4013      	ands	r3, r2
 801252c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	3308      	adds	r3, #8
 8012536:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801253a:	66ba      	str	r2, [r7, #104]	; 0x68
 801253c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801253e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012540:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012542:	e841 2300 	strex	r3, r2, [r1]
 8012546:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801254a:	2b00      	cmp	r3, #0
 801254c:	d1e3      	bne.n	8012516 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2220      	movs	r2, #32
 8012552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2200      	movs	r2, #0
 801255a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2200      	movs	r2, #0
 8012560:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	4a60      	ldr	r2, [pc, #384]	; (80126e8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012568:	4293      	cmp	r3, r2
 801256a:	d021      	beq.n	80125b0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012576:	2b00      	cmp	r3, #0
 8012578:	d01a      	beq.n	80125b0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012582:	e853 3f00 	ldrex	r3, [r3]
 8012586:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801258a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801258e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	461a      	mov	r2, r3
 8012598:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801259c:	657b      	str	r3, [r7, #84]	; 0x54
 801259e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80125a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80125a4:	e841 2300 	strex	r3, r2, [r1]
 80125a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80125aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d1e4      	bne.n	801257a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125b4:	2b01      	cmp	r3, #1
 80125b6:	d130      	bne.n	801261a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2200      	movs	r2, #0
 80125bc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125c6:	e853 3f00 	ldrex	r3, [r3]
 80125ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80125cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ce:	f023 0310 	bic.w	r3, r3, #16
 80125d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	461a      	mov	r2, r3
 80125dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80125e0:	643b      	str	r3, [r7, #64]	; 0x40
 80125e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80125e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125e8:	e841 2300 	strex	r3, r2, [r1]
 80125ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80125ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d1e4      	bne.n	80125be <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	69db      	ldr	r3, [r3, #28]
 80125fa:	f003 0310 	and.w	r3, r3, #16
 80125fe:	2b10      	cmp	r3, #16
 8012600:	d103      	bne.n	801260a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	2210      	movs	r2, #16
 8012608:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012610:	4619      	mov	r1, r3
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f7fe fb32 	bl	8010c7c <HAL_UARTEx_RxEventCallback>
 8012618:	e002      	b.n	8012620 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f7ee f834 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012620:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012624:	2b00      	cmp	r3, #0
 8012626:	d006      	beq.n	8012636 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801262c:	f003 0320 	and.w	r3, r3, #32
 8012630:	2b00      	cmp	r3, #0
 8012632:	f47f aed1 	bne.w	80123d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801263c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012640:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012644:	2b00      	cmp	r3, #0
 8012646:	d049      	beq.n	80126dc <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801264e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012652:	429a      	cmp	r2, r3
 8012654:	d242      	bcs.n	80126dc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	3308      	adds	r3, #8
 801265c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801265e:	6a3b      	ldr	r3, [r7, #32]
 8012660:	e853 3f00 	ldrex	r3, [r3]
 8012664:	61fb      	str	r3, [r7, #28]
   return(result);
 8012666:	69fb      	ldr	r3, [r7, #28]
 8012668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801266c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	3308      	adds	r3, #8
 8012676:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801267a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801267c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801267e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012682:	e841 2300 	strex	r3, r2, [r1]
 8012686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268a:	2b00      	cmp	r3, #0
 801268c:	d1e3      	bne.n	8012656 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	4a16      	ldr	r2, [pc, #88]	; (80126ec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012692:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	e853 3f00 	ldrex	r3, [r3]
 80126a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	f043 0320 	orr.w	r3, r3, #32
 80126a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	461a      	mov	r2, r3
 80126b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80126b6:	61bb      	str	r3, [r7, #24]
 80126b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126ba:	6979      	ldr	r1, [r7, #20]
 80126bc:	69ba      	ldr	r2, [r7, #24]
 80126be:	e841 2300 	strex	r3, r2, [r1]
 80126c2:	613b      	str	r3, [r7, #16]
   return(result);
 80126c4:	693b      	ldr	r3, [r7, #16]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d1e4      	bne.n	8012694 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80126ca:	e007      	b.n	80126dc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	699a      	ldr	r2, [r3, #24]
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	f042 0208 	orr.w	r2, r2, #8
 80126da:	619a      	str	r2, [r3, #24]
}
 80126dc:	bf00      	nop
 80126de:	37b0      	adds	r7, #176	; 0xb0
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}
 80126e4:	effffffe 	.word	0xeffffffe
 80126e8:	58000c00 	.word	0x58000c00
 80126ec:	08012021 	.word	0x08012021

080126f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b0ae      	sub	sp, #184	; 0xb8
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	69db      	ldr	r3, [r3, #28]
 8012708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	689b      	ldr	r3, [r3, #8]
 801271c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012726:	2b22      	cmp	r3, #34	; 0x22
 8012728:	f040 8184 	bne.w	8012a34 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012732:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012736:	e127      	b.n	8012988 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801273e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801274a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801274e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012752:	4013      	ands	r3, r2
 8012754:	b29a      	uxth	r2, r3
 8012756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801275a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012760:	1c9a      	adds	r2, r3, #2
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801276c:	b29b      	uxth	r3, r3
 801276e:	3b01      	subs	r3, #1
 8012770:	b29a      	uxth	r2, r3
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	69db      	ldr	r3, [r3, #28]
 801277e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012786:	f003 0307 	and.w	r3, r3, #7
 801278a:	2b00      	cmp	r3, #0
 801278c:	d053      	beq.n	8012836 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801278e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012792:	f003 0301 	and.w	r3, r3, #1
 8012796:	2b00      	cmp	r3, #0
 8012798:	d011      	beq.n	80127be <UART_RxISR_16BIT_FIFOEN+0xce>
 801279a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d00b      	beq.n	80127be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	2201      	movs	r2, #1
 80127ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127b4:	f043 0201 	orr.w	r2, r3, #1
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80127be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80127c2:	f003 0302 	and.w	r3, r3, #2
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d011      	beq.n	80127ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 80127ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80127ce:	f003 0301 	and.w	r3, r3, #1
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d00b      	beq.n	80127ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	2202      	movs	r2, #2
 80127dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127e4:	f043 0204 	orr.w	r2, r3, #4
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80127ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80127f2:	f003 0304 	and.w	r3, r3, #4
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d011      	beq.n	801281e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80127fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80127fe:	f003 0301 	and.w	r3, r3, #1
 8012802:	2b00      	cmp	r3, #0
 8012804:	d00b      	beq.n	801281e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	2204      	movs	r2, #4
 801280c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012814:	f043 0202 	orr.w	r2, r3, #2
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012824:	2b00      	cmp	r3, #0
 8012826:	d006      	beq.n	8012836 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f7fe fa1d 	bl	8010c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2200      	movs	r2, #0
 8012832:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801283c:	b29b      	uxth	r3, r3
 801283e:	2b00      	cmp	r3, #0
 8012840:	f040 80a2 	bne.w	8012988 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801284a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801284c:	e853 3f00 	ldrex	r3, [r3]
 8012850:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	461a      	mov	r2, r3
 8012862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801286a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801286c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801286e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012872:	e841 2300 	strex	r3, r2, [r1]
 8012876:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801287a:	2b00      	cmp	r3, #0
 801287c:	d1e2      	bne.n	8012844 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	3308      	adds	r3, #8
 8012884:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012888:	e853 3f00 	ldrex	r3, [r3]
 801288c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801288e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012890:	4b6e      	ldr	r3, [pc, #440]	; (8012a4c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012892:	4013      	ands	r3, r2
 8012894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	3308      	adds	r3, #8
 801289e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80128a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80128a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80128a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80128aa:	e841 2300 	strex	r3, r2, [r1]
 80128ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80128b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d1e3      	bne.n	801287e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2220      	movs	r2, #32
 80128ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2200      	movs	r2, #0
 80128c2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2200      	movs	r2, #0
 80128c8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	4a60      	ldr	r2, [pc, #384]	; (8012a50 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d021      	beq.n	8012918 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	685b      	ldr	r3, [r3, #4]
 80128da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d01a      	beq.n	8012918 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128ea:	e853 3f00 	ldrex	r3, [r3]
 80128ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80128f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80128f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	461a      	mov	r2, r3
 8012900:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012904:	65bb      	str	r3, [r7, #88]	; 0x58
 8012906:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801290a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801290c:	e841 2300 	strex	r3, r2, [r1]
 8012910:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012914:	2b00      	cmp	r3, #0
 8012916:	d1e4      	bne.n	80128e2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801291c:	2b01      	cmp	r3, #1
 801291e:	d130      	bne.n	8012982 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2200      	movs	r2, #0
 8012924:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801292e:	e853 3f00 	ldrex	r3, [r3]
 8012932:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012936:	f023 0310 	bic.w	r3, r3, #16
 801293a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	461a      	mov	r2, r3
 8012944:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012948:	647b      	str	r3, [r7, #68]	; 0x44
 801294a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801294c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801294e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012950:	e841 2300 	strex	r3, r2, [r1]
 8012954:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012958:	2b00      	cmp	r3, #0
 801295a:	d1e4      	bne.n	8012926 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	69db      	ldr	r3, [r3, #28]
 8012962:	f003 0310 	and.w	r3, r3, #16
 8012966:	2b10      	cmp	r3, #16
 8012968:	d103      	bne.n	8012972 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2210      	movs	r2, #16
 8012970:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012978:	4619      	mov	r1, r3
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f7fe f97e 	bl	8010c7c <HAL_UARTEx_RxEventCallback>
 8012980:	e002      	b.n	8012988 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f7ed fe80 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012988:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801298c:	2b00      	cmp	r3, #0
 801298e:	d006      	beq.n	801299e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012990:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012994:	f003 0320 	and.w	r3, r3, #32
 8012998:	2b00      	cmp	r3, #0
 801299a:	f47f aecd 	bne.w	8012738 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80129a4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80129a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d049      	beq.n	8012a44 <UART_RxISR_16BIT_FIFOEN+0x354>
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80129b6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d242      	bcs.n	8012a44 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	3308      	adds	r3, #8
 80129c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c8:	e853 3f00 	ldrex	r3, [r3]
 80129cc:	623b      	str	r3, [r7, #32]
   return(result);
 80129ce:	6a3b      	ldr	r3, [r7, #32]
 80129d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80129d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	3308      	adds	r3, #8
 80129de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80129e2:	633a      	str	r2, [r7, #48]	; 0x30
 80129e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129ea:	e841 2300 	strex	r3, r2, [r1]
 80129ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80129f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d1e3      	bne.n	80129be <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	4a16      	ldr	r2, [pc, #88]	; (8012a54 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80129fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	e853 3f00 	ldrex	r3, [r3]
 8012a08:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	f043 0320 	orr.w	r3, r3, #32
 8012a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	461a      	mov	r2, r3
 8012a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a1e:	61fb      	str	r3, [r7, #28]
 8012a20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a22:	69b9      	ldr	r1, [r7, #24]
 8012a24:	69fa      	ldr	r2, [r7, #28]
 8012a26:	e841 2300 	strex	r3, r2, [r1]
 8012a2a:	617b      	str	r3, [r7, #20]
   return(result);
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d1e4      	bne.n	80129fc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012a32:	e007      	b.n	8012a44 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	699a      	ldr	r2, [r3, #24]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	f042 0208 	orr.w	r2, r2, #8
 8012a42:	619a      	str	r2, [r3, #24]
}
 8012a44:	bf00      	nop
 8012a46:	37b8      	adds	r7, #184	; 0xb8
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	effffffe 	.word	0xeffffffe
 8012a50:	58000c00 	.word	0x58000c00
 8012a54:	080121d9 	.word	0x080121d9

08012a58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012a58:	b480      	push	{r7}
 8012a5a:	b083      	sub	sp, #12
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012a60:	bf00      	nop
 8012a62:	370c      	adds	r7, #12
 8012a64:	46bd      	mov	sp, r7
 8012a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6a:	4770      	bx	lr

08012a6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b083      	sub	sp, #12
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012a74:	bf00      	nop
 8012a76:	370c      	adds	r7, #12
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7e:	4770      	bx	lr

08012a80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012a80:	b480      	push	{r7}
 8012a82:	b083      	sub	sp, #12
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012a88:	bf00      	nop
 8012a8a:	370c      	adds	r7, #12
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr

08012a94 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012a94:	b480      	push	{r7}
 8012a96:	b089      	sub	sp, #36	; 0x24
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012aa2:	2b01      	cmp	r3, #1
 8012aa4:	d101      	bne.n	8012aaa <HAL_UARTEx_EnableStopMode+0x16>
 8012aa6:	2302      	movs	r3, #2
 8012aa8:	e021      	b.n	8012aee <HAL_UARTEx_EnableStopMode+0x5a>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2201      	movs	r2, #1
 8012aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	e853 3f00 	ldrex	r3, [r3]
 8012abe:	60bb      	str	r3, [r7, #8]
   return(result);
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	f043 0302 	orr.w	r3, r3, #2
 8012ac6:	61fb      	str	r3, [r7, #28]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	461a      	mov	r2, r3
 8012ace:	69fb      	ldr	r3, [r7, #28]
 8012ad0:	61bb      	str	r3, [r7, #24]
 8012ad2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ad4:	6979      	ldr	r1, [r7, #20]
 8012ad6:	69ba      	ldr	r2, [r7, #24]
 8012ad8:	e841 2300 	strex	r3, r2, [r1]
 8012adc:	613b      	str	r3, [r7, #16]
   return(result);
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d1e6      	bne.n	8012ab2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012aec:	2300      	movs	r3, #0
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3724      	adds	r7, #36	; 0x24
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr

08012afa <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012afa:	b580      	push	{r7, lr}
 8012afc:	b084      	sub	sp, #16
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d101      	bne.n	8012b10 <HAL_UARTEx_EnableFifoMode+0x16>
 8012b0c:	2302      	movs	r3, #2
 8012b0e:	e02b      	b.n	8012b68 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2201      	movs	r2, #1
 8012b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2224      	movs	r2, #36	; 0x24
 8012b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	681a      	ldr	r2, [r3, #0]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	f022 0201 	bic.w	r2, r2, #1
 8012b36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012b3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012b46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	68fa      	ldr	r2, [r7, #12]
 8012b4e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f000 f8c3 	bl	8012cdc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2220      	movs	r2, #32
 8012b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	2200      	movs	r2, #0
 8012b62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b66:	2300      	movs	r3, #0
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3710      	adds	r7, #16
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012b70:	b480      	push	{r7}
 8012b72:	b085      	sub	sp, #20
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b7e:	2b01      	cmp	r3, #1
 8012b80:	d101      	bne.n	8012b86 <HAL_UARTEx_DisableFifoMode+0x16>
 8012b82:	2302      	movs	r3, #2
 8012b84:	e027      	b.n	8012bd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2201      	movs	r2, #1
 8012b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2224      	movs	r2, #36	; 0x24
 8012b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	f022 0201 	bic.w	r2, r2, #1
 8012bac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012bb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	68fa      	ldr	r2, [r7, #12]
 8012bc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2220      	movs	r2, #32
 8012bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012bd4:	2300      	movs	r3, #0
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3714      	adds	r7, #20
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be0:	4770      	bx	lr

08012be2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012be2:	b580      	push	{r7, lr}
 8012be4:	b084      	sub	sp, #16
 8012be6:	af00      	add	r7, sp, #0
 8012be8:	6078      	str	r0, [r7, #4]
 8012bea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bf2:	2b01      	cmp	r3, #1
 8012bf4:	d101      	bne.n	8012bfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012bf6:	2302      	movs	r3, #2
 8012bf8:	e02d      	b.n	8012c56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2224      	movs	r2, #36	; 0x24
 8012c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	681a      	ldr	r2, [r3, #0]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	f022 0201 	bic.w	r2, r2, #1
 8012c20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	689b      	ldr	r3, [r3, #8]
 8012c28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	683a      	ldr	r2, [r7, #0]
 8012c32:	430a      	orrs	r2, r1
 8012c34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f000 f850 	bl	8012cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	68fa      	ldr	r2, [r7, #12]
 8012c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2220      	movs	r2, #32
 8012c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c54:	2300      	movs	r3, #0
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3710      	adds	r7, #16
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}

08012c5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c5e:	b580      	push	{r7, lr}
 8012c60:	b084      	sub	sp, #16
 8012c62:	af00      	add	r7, sp, #0
 8012c64:	6078      	str	r0, [r7, #4]
 8012c66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c6e:	2b01      	cmp	r3, #1
 8012c70:	d101      	bne.n	8012c76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012c72:	2302      	movs	r3, #2
 8012c74:	e02d      	b.n	8012cd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2201      	movs	r2, #1
 8012c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2224      	movs	r2, #36	; 0x24
 8012c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	f022 0201 	bic.w	r2, r2, #1
 8012c9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	689b      	ldr	r3, [r3, #8]
 8012ca4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	683a      	ldr	r2, [r7, #0]
 8012cae:	430a      	orrs	r2, r1
 8012cb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 f812 	bl	8012cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	68fa      	ldr	r2, [r7, #12]
 8012cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2220      	movs	r2, #32
 8012cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012cd0:	2300      	movs	r3, #0
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3710      	adds	r7, #16
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
	...

08012cdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b085      	sub	sp, #20
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d108      	bne.n	8012cfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2201      	movs	r2, #1
 8012cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012cfc:	e031      	b.n	8012d62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012cfe:	2310      	movs	r3, #16
 8012d00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012d02:	2310      	movs	r3, #16
 8012d04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	689b      	ldr	r3, [r3, #8]
 8012d0c:	0e5b      	lsrs	r3, r3, #25
 8012d0e:	b2db      	uxtb	r3, r3
 8012d10:	f003 0307 	and.w	r3, r3, #7
 8012d14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	689b      	ldr	r3, [r3, #8]
 8012d1c:	0f5b      	lsrs	r3, r3, #29
 8012d1e:	b2db      	uxtb	r3, r3
 8012d20:	f003 0307 	and.w	r3, r3, #7
 8012d24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d26:	7bbb      	ldrb	r3, [r7, #14]
 8012d28:	7b3a      	ldrb	r2, [r7, #12]
 8012d2a:	4911      	ldr	r1, [pc, #68]	; (8012d70 <UARTEx_SetNbDataToProcess+0x94>)
 8012d2c:	5c8a      	ldrb	r2, [r1, r2]
 8012d2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012d32:	7b3a      	ldrb	r2, [r7, #12]
 8012d34:	490f      	ldr	r1, [pc, #60]	; (8012d74 <UARTEx_SetNbDataToProcess+0x98>)
 8012d36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d3c:	b29a      	uxth	r2, r3
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d44:	7bfb      	ldrb	r3, [r7, #15]
 8012d46:	7b7a      	ldrb	r2, [r7, #13]
 8012d48:	4909      	ldr	r1, [pc, #36]	; (8012d70 <UARTEx_SetNbDataToProcess+0x94>)
 8012d4a:	5c8a      	ldrb	r2, [r1, r2]
 8012d4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012d50:	7b7a      	ldrb	r2, [r7, #13]
 8012d52:	4908      	ldr	r1, [pc, #32]	; (8012d74 <UARTEx_SetNbDataToProcess+0x98>)
 8012d54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d56:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d5a:	b29a      	uxth	r2, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012d62:	bf00      	nop
 8012d64:	3714      	adds	r7, #20
 8012d66:	46bd      	mov	sp, r7
 8012d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6c:	4770      	bx	lr
 8012d6e:	bf00      	nop
 8012d70:	080176b0 	.word	0x080176b0
 8012d74:	080176b8 	.word	0x080176b8

08012d78 <__NVIC_SetPriority>:
 8012d78:	b480      	push	{r7}
 8012d7a:	b083      	sub	sp, #12
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	4603      	mov	r3, r0
 8012d80:	6039      	str	r1, [r7, #0]
 8012d82:	80fb      	strh	r3, [r7, #6]
 8012d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	db0a      	blt.n	8012da2 <__NVIC_SetPriority+0x2a>
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	b2da      	uxtb	r2, r3
 8012d90:	490c      	ldr	r1, [pc, #48]	; (8012dc4 <__NVIC_SetPriority+0x4c>)
 8012d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d96:	0112      	lsls	r2, r2, #4
 8012d98:	b2d2      	uxtb	r2, r2
 8012d9a:	440b      	add	r3, r1
 8012d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8012da0:	e00a      	b.n	8012db8 <__NVIC_SetPriority+0x40>
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	b2da      	uxtb	r2, r3
 8012da6:	4908      	ldr	r1, [pc, #32]	; (8012dc8 <__NVIC_SetPriority+0x50>)
 8012da8:	88fb      	ldrh	r3, [r7, #6]
 8012daa:	f003 030f 	and.w	r3, r3, #15
 8012dae:	3b04      	subs	r3, #4
 8012db0:	0112      	lsls	r2, r2, #4
 8012db2:	b2d2      	uxtb	r2, r2
 8012db4:	440b      	add	r3, r1
 8012db6:	761a      	strb	r2, [r3, #24]
 8012db8:	bf00      	nop
 8012dba:	370c      	adds	r7, #12
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc2:	4770      	bx	lr
 8012dc4:	e000e100 	.word	0xe000e100
 8012dc8:	e000ed00 	.word	0xe000ed00

08012dcc <SysTick_Handler>:
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	4b05      	ldr	r3, [pc, #20]	; (8012de8 <SysTick_Handler+0x1c>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	f002 fc92 	bl	80156fc <xTaskGetSchedulerState>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	2b01      	cmp	r3, #1
 8012ddc:	d001      	beq.n	8012de2 <SysTick_Handler+0x16>
 8012dde:	f003 fab3 	bl	8016348 <xPortSysTickHandler>
 8012de2:	bf00      	nop
 8012de4:	bd80      	pop	{r7, pc}
 8012de6:	bf00      	nop
 8012de8:	e000e010 	.word	0xe000e010

08012dec <SVC_Setup>:
 8012dec:	b580      	push	{r7, lr}
 8012dee:	af00      	add	r7, sp, #0
 8012df0:	2100      	movs	r1, #0
 8012df2:	f06f 0004 	mvn.w	r0, #4
 8012df6:	f7ff ffbf 	bl	8012d78 <__NVIC_SetPriority>
 8012dfa:	bf00      	nop
 8012dfc:	bd80      	pop	{r7, pc}
	...

08012e00 <osKernelInitialize>:
 8012e00:	b480      	push	{r7}
 8012e02:	b083      	sub	sp, #12
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	f3ef 8305 	mrs	r3, IPSR
 8012e0a:	603b      	str	r3, [r7, #0]
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d003      	beq.n	8012e1a <osKernelInitialize+0x1a>
 8012e12:	f06f 0305 	mvn.w	r3, #5
 8012e16:	607b      	str	r3, [r7, #4]
 8012e18:	e00c      	b.n	8012e34 <osKernelInitialize+0x34>
 8012e1a:	4b0a      	ldr	r3, [pc, #40]	; (8012e44 <osKernelInitialize+0x44>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d105      	bne.n	8012e2e <osKernelInitialize+0x2e>
 8012e22:	4b08      	ldr	r3, [pc, #32]	; (8012e44 <osKernelInitialize+0x44>)
 8012e24:	2201      	movs	r2, #1
 8012e26:	601a      	str	r2, [r3, #0]
 8012e28:	2300      	movs	r3, #0
 8012e2a:	607b      	str	r3, [r7, #4]
 8012e2c:	e002      	b.n	8012e34 <osKernelInitialize+0x34>
 8012e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e32:	607b      	str	r3, [r7, #4]
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	4618      	mov	r0, r3
 8012e38:	370c      	adds	r7, #12
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e40:	4770      	bx	lr
 8012e42:	bf00      	nop
 8012e44:	24001110 	.word	0x24001110

08012e48 <osKernelStart>:
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	f3ef 8305 	mrs	r3, IPSR
 8012e52:	603b      	str	r3, [r7, #0]
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d003      	beq.n	8012e62 <osKernelStart+0x1a>
 8012e5a:	f06f 0305 	mvn.w	r3, #5
 8012e5e:	607b      	str	r3, [r7, #4]
 8012e60:	e010      	b.n	8012e84 <osKernelStart+0x3c>
 8012e62:	4b0b      	ldr	r3, [pc, #44]	; (8012e90 <osKernelStart+0x48>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d109      	bne.n	8012e7e <osKernelStart+0x36>
 8012e6a:	f7ff ffbf 	bl	8012dec <SVC_Setup>
 8012e6e:	4b08      	ldr	r3, [pc, #32]	; (8012e90 <osKernelStart+0x48>)
 8012e70:	2202      	movs	r2, #2
 8012e72:	601a      	str	r2, [r3, #0]
 8012e74:	f001 ff54 	bl	8014d20 <vTaskStartScheduler>
 8012e78:	2300      	movs	r3, #0
 8012e7a:	607b      	str	r3, [r7, #4]
 8012e7c:	e002      	b.n	8012e84 <osKernelStart+0x3c>
 8012e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e82:	607b      	str	r3, [r7, #4]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	4618      	mov	r0, r3
 8012e88:	3708      	adds	r7, #8
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	24001110 	.word	0x24001110

08012e94 <osThreadNew>:
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b08e      	sub	sp, #56	; 0x38
 8012e98:	af04      	add	r7, sp, #16
 8012e9a:	60f8      	str	r0, [r7, #12]
 8012e9c:	60b9      	str	r1, [r7, #8]
 8012e9e:	607a      	str	r2, [r7, #4]
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	613b      	str	r3, [r7, #16]
 8012ea4:	f3ef 8305 	mrs	r3, IPSR
 8012ea8:	617b      	str	r3, [r7, #20]
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d17e      	bne.n	8012fae <osThreadNew+0x11a>
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d07b      	beq.n	8012fae <osThreadNew+0x11a>
 8012eb6:	2380      	movs	r3, #128	; 0x80
 8012eb8:	623b      	str	r3, [r7, #32]
 8012eba:	2318      	movs	r3, #24
 8012ebc:	61fb      	str	r3, [r7, #28]
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8012ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ec6:	61bb      	str	r3, [r7, #24]
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d045      	beq.n	8012f5a <osThreadNew+0xc6>
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d002      	beq.n	8012edc <osThreadNew+0x48>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	627b      	str	r3, [r7, #36]	; 0x24
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	699b      	ldr	r3, [r3, #24]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d002      	beq.n	8012eea <osThreadNew+0x56>
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	699b      	ldr	r3, [r3, #24]
 8012ee8:	61fb      	str	r3, [r7, #28]
 8012eea:	69fb      	ldr	r3, [r7, #28]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d008      	beq.n	8012f02 <osThreadNew+0x6e>
 8012ef0:	69fb      	ldr	r3, [r7, #28]
 8012ef2:	2b38      	cmp	r3, #56	; 0x38
 8012ef4:	d805      	bhi.n	8012f02 <osThreadNew+0x6e>
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	f003 0301 	and.w	r3, r3, #1
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d001      	beq.n	8012f06 <osThreadNew+0x72>
 8012f02:	2300      	movs	r3, #0
 8012f04:	e054      	b.n	8012fb0 <osThreadNew+0x11c>
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	695b      	ldr	r3, [r3, #20]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d003      	beq.n	8012f16 <osThreadNew+0x82>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	695b      	ldr	r3, [r3, #20]
 8012f12:	089b      	lsrs	r3, r3, #2
 8012f14:	623b      	str	r3, [r7, #32]
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	689b      	ldr	r3, [r3, #8]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d00e      	beq.n	8012f3c <osThreadNew+0xa8>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	68db      	ldr	r3, [r3, #12]
 8012f22:	2b5b      	cmp	r3, #91	; 0x5b
 8012f24:	d90a      	bls.n	8012f3c <osThreadNew+0xa8>
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	691b      	ldr	r3, [r3, #16]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d006      	beq.n	8012f3c <osThreadNew+0xa8>
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	695b      	ldr	r3, [r3, #20]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d002      	beq.n	8012f3c <osThreadNew+0xa8>
 8012f36:	2301      	movs	r3, #1
 8012f38:	61bb      	str	r3, [r7, #24]
 8012f3a:	e010      	b.n	8012f5e <osThreadNew+0xca>
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	689b      	ldr	r3, [r3, #8]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d10c      	bne.n	8012f5e <osThreadNew+0xca>
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	68db      	ldr	r3, [r3, #12]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d108      	bne.n	8012f5e <osThreadNew+0xca>
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	691b      	ldr	r3, [r3, #16]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d104      	bne.n	8012f5e <osThreadNew+0xca>
 8012f54:	2300      	movs	r3, #0
 8012f56:	61bb      	str	r3, [r7, #24]
 8012f58:	e001      	b.n	8012f5e <osThreadNew+0xca>
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	61bb      	str	r3, [r7, #24]
 8012f5e:	69bb      	ldr	r3, [r7, #24]
 8012f60:	2b01      	cmp	r3, #1
 8012f62:	d110      	bne.n	8012f86 <osThreadNew+0xf2>
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	691b      	ldr	r3, [r3, #16]
 8012f68:	687a      	ldr	r2, [r7, #4]
 8012f6a:	6892      	ldr	r2, [r2, #8]
 8012f6c:	9202      	str	r2, [sp, #8]
 8012f6e:	9301      	str	r3, [sp, #4]
 8012f70:	69fb      	ldr	r3, [r7, #28]
 8012f72:	9300      	str	r3, [sp, #0]
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	6a3a      	ldr	r2, [r7, #32]
 8012f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f7a:	68f8      	ldr	r0, [r7, #12]
 8012f7c:	f001 fbe0 	bl	8014740 <xTaskCreateStatic>
 8012f80:	4603      	mov	r3, r0
 8012f82:	613b      	str	r3, [r7, #16]
 8012f84:	e013      	b.n	8012fae <osThreadNew+0x11a>
 8012f86:	69bb      	ldr	r3, [r7, #24]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d110      	bne.n	8012fae <osThreadNew+0x11a>
 8012f8c:	6a3b      	ldr	r3, [r7, #32]
 8012f8e:	b29a      	uxth	r2, r3
 8012f90:	f107 0310 	add.w	r3, r7, #16
 8012f94:	9301      	str	r3, [sp, #4]
 8012f96:	69fb      	ldr	r3, [r7, #28]
 8012f98:	9300      	str	r3, [sp, #0]
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f9e:	68f8      	ldr	r0, [r7, #12]
 8012fa0:	f001 fc2b 	bl	80147fa <xTaskCreate>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	d001      	beq.n	8012fae <osThreadNew+0x11a>
 8012faa:	2300      	movs	r3, #0
 8012fac:	613b      	str	r3, [r7, #16]
 8012fae:	693b      	ldr	r3, [r7, #16]
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3728      	adds	r7, #40	; 0x28
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}

08012fb8 <osThreadYield>:
 8012fb8:	b480      	push	{r7}
 8012fba:	b083      	sub	sp, #12
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	f3ef 8305 	mrs	r3, IPSR
 8012fc2:	603b      	str	r3, [r7, #0]
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d003      	beq.n	8012fd2 <osThreadYield+0x1a>
 8012fca:	f06f 0305 	mvn.w	r3, #5
 8012fce:	607b      	str	r3, [r7, #4]
 8012fd0:	e009      	b.n	8012fe6 <osThreadYield+0x2e>
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	607b      	str	r3, [r7, #4]
 8012fd6:	4b07      	ldr	r3, [pc, #28]	; (8012ff4 <osThreadYield+0x3c>)
 8012fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fdc:	601a      	str	r2, [r3, #0]
 8012fde:	f3bf 8f4f 	dsb	sy
 8012fe2:	f3bf 8f6f 	isb	sy
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	4618      	mov	r0, r3
 8012fea:	370c      	adds	r7, #12
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr
 8012ff4:	e000ed04 	.word	0xe000ed04

08012ff8 <osThreadSuspend>:
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b086      	sub	sp, #24
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	613b      	str	r3, [r7, #16]
 8013004:	f3ef 8305 	mrs	r3, IPSR
 8013008:	60fb      	str	r3, [r7, #12]
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d003      	beq.n	8013018 <osThreadSuspend+0x20>
 8013010:	f06f 0305 	mvn.w	r3, #5
 8013014:	617b      	str	r3, [r7, #20]
 8013016:	e00b      	b.n	8013030 <osThreadSuspend+0x38>
 8013018:	693b      	ldr	r3, [r7, #16]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d103      	bne.n	8013026 <osThreadSuspend+0x2e>
 801301e:	f06f 0303 	mvn.w	r3, #3
 8013022:	617b      	str	r3, [r7, #20]
 8013024:	e004      	b.n	8013030 <osThreadSuspend+0x38>
 8013026:	2300      	movs	r3, #0
 8013028:	617b      	str	r3, [r7, #20]
 801302a:	6938      	ldr	r0, [r7, #16]
 801302c:	f001 fd5e 	bl	8014aec <vTaskSuspend>
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	4618      	mov	r0, r3
 8013034:	3718      	adds	r7, #24
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}

0801303a <osDelay>:
 801303a:	b580      	push	{r7, lr}
 801303c:	b084      	sub	sp, #16
 801303e:	af00      	add	r7, sp, #0
 8013040:	6078      	str	r0, [r7, #4]
 8013042:	f3ef 8305 	mrs	r3, IPSR
 8013046:	60bb      	str	r3, [r7, #8]
 8013048:	68bb      	ldr	r3, [r7, #8]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d003      	beq.n	8013056 <osDelay+0x1c>
 801304e:	f06f 0305 	mvn.w	r3, #5
 8013052:	60fb      	str	r3, [r7, #12]
 8013054:	e007      	b.n	8013066 <osDelay+0x2c>
 8013056:	2300      	movs	r3, #0
 8013058:	60fb      	str	r3, [r7, #12]
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d002      	beq.n	8013066 <osDelay+0x2c>
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f001 fd0f 	bl	8014a84 <vTaskDelay>
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	4618      	mov	r0, r3
 801306a:	3710      	adds	r7, #16
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}

08013070 <osEventFlagsNew>:
 8013070:	b580      	push	{r7, lr}
 8013072:	b086      	sub	sp, #24
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	2300      	movs	r3, #0
 801307a:	617b      	str	r3, [r7, #20]
 801307c:	f3ef 8305 	mrs	r3, IPSR
 8013080:	60fb      	str	r3, [r7, #12]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d12d      	bne.n	80130e4 <osEventFlagsNew+0x74>
 8013088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801308c:	613b      	str	r3, [r7, #16]
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d015      	beq.n	80130c0 <osEventFlagsNew+0x50>
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	689b      	ldr	r3, [r3, #8]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d006      	beq.n	80130aa <osEventFlagsNew+0x3a>
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	68db      	ldr	r3, [r3, #12]
 80130a0:	2b1f      	cmp	r3, #31
 80130a2:	d902      	bls.n	80130aa <osEventFlagsNew+0x3a>
 80130a4:	2301      	movs	r3, #1
 80130a6:	613b      	str	r3, [r7, #16]
 80130a8:	e00c      	b.n	80130c4 <osEventFlagsNew+0x54>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	689b      	ldr	r3, [r3, #8]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d108      	bne.n	80130c4 <osEventFlagsNew+0x54>
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	68db      	ldr	r3, [r3, #12]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d104      	bne.n	80130c4 <osEventFlagsNew+0x54>
 80130ba:	2300      	movs	r3, #0
 80130bc:	613b      	str	r3, [r7, #16]
 80130be:	e001      	b.n	80130c4 <osEventFlagsNew+0x54>
 80130c0:	2300      	movs	r3, #0
 80130c2:	613b      	str	r3, [r7, #16]
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	2b01      	cmp	r3, #1
 80130c8:	d106      	bne.n	80130d8 <osEventFlagsNew+0x68>
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	689b      	ldr	r3, [r3, #8]
 80130ce:	4618      	mov	r0, r3
 80130d0:	f000 fa70 	bl	80135b4 <xEventGroupCreateStatic>
 80130d4:	6178      	str	r0, [r7, #20]
 80130d6:	e005      	b.n	80130e4 <osEventFlagsNew+0x74>
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d102      	bne.n	80130e4 <osEventFlagsNew+0x74>
 80130de:	f000 faa0 	bl	8013622 <xEventGroupCreate>
 80130e2:	6178      	str	r0, [r7, #20]
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	4618      	mov	r0, r3
 80130e8:	3718      	adds	r7, #24
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}
	...

080130f0 <osEventFlagsSet>:
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b086      	sub	sp, #24
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	6039      	str	r1, [r7, #0]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	613b      	str	r3, [r7, #16]
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d004      	beq.n	801310e <osEventFlagsSet+0x1e>
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801310a:	2b00      	cmp	r3, #0
 801310c:	d003      	beq.n	8013116 <osEventFlagsSet+0x26>
 801310e:	f06f 0303 	mvn.w	r3, #3
 8013112:	617b      	str	r3, [r7, #20]
 8013114:	e028      	b.n	8013168 <osEventFlagsSet+0x78>
 8013116:	f3ef 8305 	mrs	r3, IPSR
 801311a:	60fb      	str	r3, [r7, #12]
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d01d      	beq.n	801315e <osEventFlagsSet+0x6e>
 8013122:	2300      	movs	r3, #0
 8013124:	60bb      	str	r3, [r7, #8]
 8013126:	f107 0308 	add.w	r3, r7, #8
 801312a:	461a      	mov	r2, r3
 801312c:	6839      	ldr	r1, [r7, #0]
 801312e:	6938      	ldr	r0, [r7, #16]
 8013130:	f000 fc98 	bl	8013a64 <xEventGroupSetBitsFromISR>
 8013134:	4603      	mov	r3, r0
 8013136:	2b00      	cmp	r3, #0
 8013138:	d103      	bne.n	8013142 <osEventFlagsSet+0x52>
 801313a:	f06f 0302 	mvn.w	r3, #2
 801313e:	617b      	str	r3, [r7, #20]
 8013140:	e012      	b.n	8013168 <osEventFlagsSet+0x78>
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	617b      	str	r3, [r7, #20]
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00d      	beq.n	8013168 <osEventFlagsSet+0x78>
 801314c:	4b09      	ldr	r3, [pc, #36]	; (8013174 <osEventFlagsSet+0x84>)
 801314e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013152:	601a      	str	r2, [r3, #0]
 8013154:	f3bf 8f4f 	dsb	sy
 8013158:	f3bf 8f6f 	isb	sy
 801315c:	e004      	b.n	8013168 <osEventFlagsSet+0x78>
 801315e:	6839      	ldr	r1, [r7, #0]
 8013160:	6938      	ldr	r0, [r7, #16]
 8013162:	f000 fbb7 	bl	80138d4 <xEventGroupSetBits>
 8013166:	6178      	str	r0, [r7, #20]
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	4618      	mov	r0, r3
 801316c:	3718      	adds	r7, #24
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}
 8013172:	bf00      	nop
 8013174:	e000ed04 	.word	0xe000ed04

08013178 <osEventFlagsClear>:
 8013178:	b580      	push	{r7, lr}
 801317a:	b086      	sub	sp, #24
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	613b      	str	r3, [r7, #16]
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d004      	beq.n	8013196 <osEventFlagsClear+0x1e>
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013192:	2b00      	cmp	r3, #0
 8013194:	d003      	beq.n	801319e <osEventFlagsClear+0x26>
 8013196:	f06f 0303 	mvn.w	r3, #3
 801319a:	617b      	str	r3, [r7, #20]
 801319c:	e019      	b.n	80131d2 <osEventFlagsClear+0x5a>
 801319e:	f3ef 8305 	mrs	r3, IPSR
 80131a2:	60fb      	str	r3, [r7, #12]
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d00e      	beq.n	80131c8 <osEventFlagsClear+0x50>
 80131aa:	6938      	ldr	r0, [r7, #16]
 80131ac:	f000 fb6e 	bl	801388c <xEventGroupGetBitsFromISR>
 80131b0:	6178      	str	r0, [r7, #20]
 80131b2:	6839      	ldr	r1, [r7, #0]
 80131b4:	6938      	ldr	r0, [r7, #16]
 80131b6:	f000 fb55 	bl	8013864 <xEventGroupClearBitsFromISR>
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d108      	bne.n	80131d2 <osEventFlagsClear+0x5a>
 80131c0:	f06f 0302 	mvn.w	r3, #2
 80131c4:	617b      	str	r3, [r7, #20]
 80131c6:	e004      	b.n	80131d2 <osEventFlagsClear+0x5a>
 80131c8:	6839      	ldr	r1, [r7, #0]
 80131ca:	6938      	ldr	r0, [r7, #16]
 80131cc:	f000 fb12 	bl	80137f4 <xEventGroupClearBits>
 80131d0:	6178      	str	r0, [r7, #20]
 80131d2:	697b      	ldr	r3, [r7, #20]
 80131d4:	4618      	mov	r0, r3
 80131d6:	3718      	adds	r7, #24
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd80      	pop	{r7, pc}

080131dc <osEventFlagsGet>:
 80131dc:	b580      	push	{r7, lr}
 80131de:	b086      	sub	sp, #24
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	613b      	str	r3, [r7, #16]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d102      	bne.n	80131f4 <osEventFlagsGet+0x18>
 80131ee:	2300      	movs	r3, #0
 80131f0:	617b      	str	r3, [r7, #20]
 80131f2:	e00f      	b.n	8013214 <osEventFlagsGet+0x38>
 80131f4:	f3ef 8305 	mrs	r3, IPSR
 80131f8:	60fb      	str	r3, [r7, #12]
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d004      	beq.n	801320a <osEventFlagsGet+0x2e>
 8013200:	6938      	ldr	r0, [r7, #16]
 8013202:	f000 fb43 	bl	801388c <xEventGroupGetBitsFromISR>
 8013206:	6178      	str	r0, [r7, #20]
 8013208:	e004      	b.n	8013214 <osEventFlagsGet+0x38>
 801320a:	2100      	movs	r1, #0
 801320c:	6938      	ldr	r0, [r7, #16]
 801320e:	f000 faf1 	bl	80137f4 <xEventGroupClearBits>
 8013212:	6178      	str	r0, [r7, #20]
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	4618      	mov	r0, r3
 8013218:	3718      	adds	r7, #24
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}

0801321e <osEventFlagsWait>:
 801321e:	b580      	push	{r7, lr}
 8013220:	b08c      	sub	sp, #48	; 0x30
 8013222:	af02      	add	r7, sp, #8
 8013224:	60f8      	str	r0, [r7, #12]
 8013226:	60b9      	str	r1, [r7, #8]
 8013228:	607a      	str	r2, [r7, #4]
 801322a:	603b      	str	r3, [r7, #0]
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	61bb      	str	r3, [r7, #24]
 8013230:	69bb      	ldr	r3, [r7, #24]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d004      	beq.n	8013240 <osEventFlagsWait+0x22>
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801323c:	2b00      	cmp	r3, #0
 801323e:	d003      	beq.n	8013248 <osEventFlagsWait+0x2a>
 8013240:	f06f 0303 	mvn.w	r3, #3
 8013244:	61fb      	str	r3, [r7, #28]
 8013246:	e04b      	b.n	80132e0 <osEventFlagsWait+0xc2>
 8013248:	f3ef 8305 	mrs	r3, IPSR
 801324c:	617b      	str	r3, [r7, #20]
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d003      	beq.n	801325c <osEventFlagsWait+0x3e>
 8013254:	f06f 0305 	mvn.w	r3, #5
 8013258:	61fb      	str	r3, [r7, #28]
 801325a:	e041      	b.n	80132e0 <osEventFlagsWait+0xc2>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f003 0301 	and.w	r3, r3, #1
 8013262:	2b00      	cmp	r3, #0
 8013264:	d002      	beq.n	801326c <osEventFlagsWait+0x4e>
 8013266:	2301      	movs	r3, #1
 8013268:	627b      	str	r3, [r7, #36]	; 0x24
 801326a:	e001      	b.n	8013270 <osEventFlagsWait+0x52>
 801326c:	2300      	movs	r3, #0
 801326e:	627b      	str	r3, [r7, #36]	; 0x24
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f003 0302 	and.w	r3, r3, #2
 8013276:	2b00      	cmp	r3, #0
 8013278:	d002      	beq.n	8013280 <osEventFlagsWait+0x62>
 801327a:	2300      	movs	r3, #0
 801327c:	623b      	str	r3, [r7, #32]
 801327e:	e001      	b.n	8013284 <osEventFlagsWait+0x66>
 8013280:	2301      	movs	r3, #1
 8013282:	623b      	str	r3, [r7, #32]
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	9300      	str	r3, [sp, #0]
 8013288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801328a:	6a3a      	ldr	r2, [r7, #32]
 801328c:	68b9      	ldr	r1, [r7, #8]
 801328e:	69b8      	ldr	r0, [r7, #24]
 8013290:	f000 f9e2 	bl	8013658 <xEventGroupWaitBits>
 8013294:	61f8      	str	r0, [r7, #28]
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	f003 0301 	and.w	r3, r3, #1
 801329c:	2b00      	cmp	r3, #0
 801329e:	d010      	beq.n	80132c2 <osEventFlagsWait+0xa4>
 80132a0:	68ba      	ldr	r2, [r7, #8]
 80132a2:	69fb      	ldr	r3, [r7, #28]
 80132a4:	4013      	ands	r3, r2
 80132a6:	68ba      	ldr	r2, [r7, #8]
 80132a8:	429a      	cmp	r2, r3
 80132aa:	d019      	beq.n	80132e0 <osEventFlagsWait+0xc2>
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d003      	beq.n	80132ba <osEventFlagsWait+0x9c>
 80132b2:	f06f 0301 	mvn.w	r3, #1
 80132b6:	61fb      	str	r3, [r7, #28]
 80132b8:	e012      	b.n	80132e0 <osEventFlagsWait+0xc2>
 80132ba:	f06f 0302 	mvn.w	r3, #2
 80132be:	61fb      	str	r3, [r7, #28]
 80132c0:	e00e      	b.n	80132e0 <osEventFlagsWait+0xc2>
 80132c2:	68ba      	ldr	r2, [r7, #8]
 80132c4:	69fb      	ldr	r3, [r7, #28]
 80132c6:	4013      	ands	r3, r2
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d109      	bne.n	80132e0 <osEventFlagsWait+0xc2>
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d003      	beq.n	80132da <osEventFlagsWait+0xbc>
 80132d2:	f06f 0301 	mvn.w	r3, #1
 80132d6:	61fb      	str	r3, [r7, #28]
 80132d8:	e002      	b.n	80132e0 <osEventFlagsWait+0xc2>
 80132da:	f06f 0302 	mvn.w	r3, #2
 80132de:	61fb      	str	r3, [r7, #28]
 80132e0:	69fb      	ldr	r3, [r7, #28]
 80132e2:	4618      	mov	r0, r3
 80132e4:	3728      	adds	r7, #40	; 0x28
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}

080132ea <osMessageQueueNew>:
 80132ea:	b580      	push	{r7, lr}
 80132ec:	b08a      	sub	sp, #40	; 0x28
 80132ee:	af02      	add	r7, sp, #8
 80132f0:	60f8      	str	r0, [r7, #12]
 80132f2:	60b9      	str	r1, [r7, #8]
 80132f4:	607a      	str	r2, [r7, #4]
 80132f6:	2300      	movs	r3, #0
 80132f8:	61fb      	str	r3, [r7, #28]
 80132fa:	f3ef 8305 	mrs	r3, IPSR
 80132fe:	613b      	str	r3, [r7, #16]
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d15f      	bne.n	80133c6 <osMessageQueueNew+0xdc>
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d05c      	beq.n	80133c6 <osMessageQueueNew+0xdc>
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d059      	beq.n	80133c6 <osMessageQueueNew+0xdc>
 8013312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013316:	61bb      	str	r3, [r7, #24]
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d029      	beq.n	8013372 <osMessageQueueNew+0x88>
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	689b      	ldr	r3, [r3, #8]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d012      	beq.n	801334c <osMessageQueueNew+0x62>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	68db      	ldr	r3, [r3, #12]
 801332a:	2b4f      	cmp	r3, #79	; 0x4f
 801332c:	d90e      	bls.n	801334c <osMessageQueueNew+0x62>
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	691b      	ldr	r3, [r3, #16]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d00a      	beq.n	801334c <osMessageQueueNew+0x62>
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	695a      	ldr	r2, [r3, #20]
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	68b9      	ldr	r1, [r7, #8]
 801333e:	fb01 f303 	mul.w	r3, r1, r3
 8013342:	429a      	cmp	r2, r3
 8013344:	d302      	bcc.n	801334c <osMessageQueueNew+0x62>
 8013346:	2301      	movs	r3, #1
 8013348:	61bb      	str	r3, [r7, #24]
 801334a:	e014      	b.n	8013376 <osMessageQueueNew+0x8c>
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	689b      	ldr	r3, [r3, #8]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d110      	bne.n	8013376 <osMessageQueueNew+0x8c>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	68db      	ldr	r3, [r3, #12]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d10c      	bne.n	8013376 <osMessageQueueNew+0x8c>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	691b      	ldr	r3, [r3, #16]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d108      	bne.n	8013376 <osMessageQueueNew+0x8c>
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	695b      	ldr	r3, [r3, #20]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d104      	bne.n	8013376 <osMessageQueueNew+0x8c>
 801336c:	2300      	movs	r3, #0
 801336e:	61bb      	str	r3, [r7, #24]
 8013370:	e001      	b.n	8013376 <osMessageQueueNew+0x8c>
 8013372:	2300      	movs	r3, #0
 8013374:	61bb      	str	r3, [r7, #24]
 8013376:	69bb      	ldr	r3, [r7, #24]
 8013378:	2b01      	cmp	r3, #1
 801337a:	d10b      	bne.n	8013394 <osMessageQueueNew+0xaa>
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	691a      	ldr	r2, [r3, #16]
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	689b      	ldr	r3, [r3, #8]
 8013384:	2100      	movs	r1, #0
 8013386:	9100      	str	r1, [sp, #0]
 8013388:	68b9      	ldr	r1, [r7, #8]
 801338a:	68f8      	ldr	r0, [r7, #12]
 801338c:	f000 fc9a 	bl	8013cc4 <xQueueGenericCreateStatic>
 8013390:	61f8      	str	r0, [r7, #28]
 8013392:	e008      	b.n	80133a6 <osMessageQueueNew+0xbc>
 8013394:	69bb      	ldr	r3, [r7, #24]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d105      	bne.n	80133a6 <osMessageQueueNew+0xbc>
 801339a:	2200      	movs	r2, #0
 801339c:	68b9      	ldr	r1, [r7, #8]
 801339e:	68f8      	ldr	r0, [r7, #12]
 80133a0:	f000 fd08 	bl	8013db4 <xQueueGenericCreate>
 80133a4:	61f8      	str	r0, [r7, #28]
 80133a6:	69fb      	ldr	r3, [r7, #28]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d00c      	beq.n	80133c6 <osMessageQueueNew+0xdc>
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d003      	beq.n	80133ba <osMessageQueueNew+0xd0>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	617b      	str	r3, [r7, #20]
 80133b8:	e001      	b.n	80133be <osMessageQueueNew+0xd4>
 80133ba:	2300      	movs	r3, #0
 80133bc:	617b      	str	r3, [r7, #20]
 80133be:	6979      	ldr	r1, [r7, #20]
 80133c0:	69f8      	ldr	r0, [r7, #28]
 80133c2:	f001 f95f 	bl	8014684 <vQueueAddToRegistry>
 80133c6:	69fb      	ldr	r3, [r7, #28]
 80133c8:	4618      	mov	r0, r3
 80133ca:	3720      	adds	r7, #32
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}

080133d0 <osMessageQueuePut>:
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b088      	sub	sp, #32
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	60f8      	str	r0, [r7, #12]
 80133d8:	60b9      	str	r1, [r7, #8]
 80133da:	603b      	str	r3, [r7, #0]
 80133dc:	4613      	mov	r3, r2
 80133de:	71fb      	strb	r3, [r7, #7]
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	61bb      	str	r3, [r7, #24]
 80133e4:	2300      	movs	r3, #0
 80133e6:	61fb      	str	r3, [r7, #28]
 80133e8:	f3ef 8305 	mrs	r3, IPSR
 80133ec:	617b      	str	r3, [r7, #20]
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d028      	beq.n	8013446 <osMessageQueuePut+0x76>
 80133f4:	69bb      	ldr	r3, [r7, #24]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d005      	beq.n	8013406 <osMessageQueuePut+0x36>
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d002      	beq.n	8013406 <osMessageQueuePut+0x36>
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d003      	beq.n	801340e <osMessageQueuePut+0x3e>
 8013406:	f06f 0303 	mvn.w	r3, #3
 801340a:	61fb      	str	r3, [r7, #28]
 801340c:	e038      	b.n	8013480 <osMessageQueuePut+0xb0>
 801340e:	2300      	movs	r3, #0
 8013410:	613b      	str	r3, [r7, #16]
 8013412:	f107 0210 	add.w	r2, r7, #16
 8013416:	2300      	movs	r3, #0
 8013418:	68b9      	ldr	r1, [r7, #8]
 801341a:	69b8      	ldr	r0, [r7, #24]
 801341c:	f000 fe26 	bl	801406c <xQueueGenericSendFromISR>
 8013420:	4603      	mov	r3, r0
 8013422:	2b01      	cmp	r3, #1
 8013424:	d003      	beq.n	801342e <osMessageQueuePut+0x5e>
 8013426:	f06f 0302 	mvn.w	r3, #2
 801342a:	61fb      	str	r3, [r7, #28]
 801342c:	e028      	b.n	8013480 <osMessageQueuePut+0xb0>
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d025      	beq.n	8013480 <osMessageQueuePut+0xb0>
 8013434:	4b15      	ldr	r3, [pc, #84]	; (801348c <osMessageQueuePut+0xbc>)
 8013436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801343a:	601a      	str	r2, [r3, #0]
 801343c:	f3bf 8f4f 	dsb	sy
 8013440:	f3bf 8f6f 	isb	sy
 8013444:	e01c      	b.n	8013480 <osMessageQueuePut+0xb0>
 8013446:	69bb      	ldr	r3, [r7, #24]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d002      	beq.n	8013452 <osMessageQueuePut+0x82>
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d103      	bne.n	801345a <osMessageQueuePut+0x8a>
 8013452:	f06f 0303 	mvn.w	r3, #3
 8013456:	61fb      	str	r3, [r7, #28]
 8013458:	e012      	b.n	8013480 <osMessageQueuePut+0xb0>
 801345a:	2300      	movs	r3, #0
 801345c:	683a      	ldr	r2, [r7, #0]
 801345e:	68b9      	ldr	r1, [r7, #8]
 8013460:	69b8      	ldr	r0, [r7, #24]
 8013462:	f000 fd05 	bl	8013e70 <xQueueGenericSend>
 8013466:	4603      	mov	r3, r0
 8013468:	2b01      	cmp	r3, #1
 801346a:	d009      	beq.n	8013480 <osMessageQueuePut+0xb0>
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d003      	beq.n	801347a <osMessageQueuePut+0xaa>
 8013472:	f06f 0301 	mvn.w	r3, #1
 8013476:	61fb      	str	r3, [r7, #28]
 8013478:	e002      	b.n	8013480 <osMessageQueuePut+0xb0>
 801347a:	f06f 0302 	mvn.w	r3, #2
 801347e:	61fb      	str	r3, [r7, #28]
 8013480:	69fb      	ldr	r3, [r7, #28]
 8013482:	4618      	mov	r0, r3
 8013484:	3720      	adds	r7, #32
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
 801348a:	bf00      	nop
 801348c:	e000ed04 	.word	0xe000ed04

08013490 <osMessageQueueGet>:
 8013490:	b580      	push	{r7, lr}
 8013492:	b088      	sub	sp, #32
 8013494:	af00      	add	r7, sp, #0
 8013496:	60f8      	str	r0, [r7, #12]
 8013498:	60b9      	str	r1, [r7, #8]
 801349a:	607a      	str	r2, [r7, #4]
 801349c:	603b      	str	r3, [r7, #0]
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	61bb      	str	r3, [r7, #24]
 80134a2:	2300      	movs	r3, #0
 80134a4:	61fb      	str	r3, [r7, #28]
 80134a6:	f3ef 8305 	mrs	r3, IPSR
 80134aa:	617b      	str	r3, [r7, #20]
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d028      	beq.n	8013504 <osMessageQueueGet+0x74>
 80134b2:	69bb      	ldr	r3, [r7, #24]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d005      	beq.n	80134c4 <osMessageQueueGet+0x34>
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d002      	beq.n	80134c4 <osMessageQueueGet+0x34>
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d003      	beq.n	80134cc <osMessageQueueGet+0x3c>
 80134c4:	f06f 0303 	mvn.w	r3, #3
 80134c8:	61fb      	str	r3, [r7, #28]
 80134ca:	e037      	b.n	801353c <osMessageQueueGet+0xac>
 80134cc:	2300      	movs	r3, #0
 80134ce:	613b      	str	r3, [r7, #16]
 80134d0:	f107 0310 	add.w	r3, r7, #16
 80134d4:	461a      	mov	r2, r3
 80134d6:	68b9      	ldr	r1, [r7, #8]
 80134d8:	69b8      	ldr	r0, [r7, #24]
 80134da:	f000 ff43 	bl	8014364 <xQueueReceiveFromISR>
 80134de:	4603      	mov	r3, r0
 80134e0:	2b01      	cmp	r3, #1
 80134e2:	d003      	beq.n	80134ec <osMessageQueueGet+0x5c>
 80134e4:	f06f 0302 	mvn.w	r3, #2
 80134e8:	61fb      	str	r3, [r7, #28]
 80134ea:	e027      	b.n	801353c <osMessageQueueGet+0xac>
 80134ec:	693b      	ldr	r3, [r7, #16]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d024      	beq.n	801353c <osMessageQueueGet+0xac>
 80134f2:	4b15      	ldr	r3, [pc, #84]	; (8013548 <osMessageQueueGet+0xb8>)
 80134f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134f8:	601a      	str	r2, [r3, #0]
 80134fa:	f3bf 8f4f 	dsb	sy
 80134fe:	f3bf 8f6f 	isb	sy
 8013502:	e01b      	b.n	801353c <osMessageQueueGet+0xac>
 8013504:	69bb      	ldr	r3, [r7, #24]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d002      	beq.n	8013510 <osMessageQueueGet+0x80>
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d103      	bne.n	8013518 <osMessageQueueGet+0x88>
 8013510:	f06f 0303 	mvn.w	r3, #3
 8013514:	61fb      	str	r3, [r7, #28]
 8013516:	e011      	b.n	801353c <osMessageQueueGet+0xac>
 8013518:	683a      	ldr	r2, [r7, #0]
 801351a:	68b9      	ldr	r1, [r7, #8]
 801351c:	69b8      	ldr	r0, [r7, #24]
 801351e:	f000 fe41 	bl	80141a4 <xQueueReceive>
 8013522:	4603      	mov	r3, r0
 8013524:	2b01      	cmp	r3, #1
 8013526:	d009      	beq.n	801353c <osMessageQueueGet+0xac>
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d003      	beq.n	8013536 <osMessageQueueGet+0xa6>
 801352e:	f06f 0301 	mvn.w	r3, #1
 8013532:	61fb      	str	r3, [r7, #28]
 8013534:	e002      	b.n	801353c <osMessageQueueGet+0xac>
 8013536:	f06f 0302 	mvn.w	r3, #2
 801353a:	61fb      	str	r3, [r7, #28]
 801353c:	69fb      	ldr	r3, [r7, #28]
 801353e:	4618      	mov	r0, r3
 8013540:	3720      	adds	r7, #32
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
 8013546:	bf00      	nop
 8013548:	e000ed04 	.word	0xe000ed04

0801354c <vApplicationGetIdleTaskMemory>:
 801354c:	b480      	push	{r7}
 801354e:	b085      	sub	sp, #20
 8013550:	af00      	add	r7, sp, #0
 8013552:	60f8      	str	r0, [r7, #12]
 8013554:	60b9      	str	r1, [r7, #8]
 8013556:	607a      	str	r2, [r7, #4]
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	4a07      	ldr	r2, [pc, #28]	; (8013578 <vApplicationGetIdleTaskMemory+0x2c>)
 801355c:	601a      	str	r2, [r3, #0]
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	4a06      	ldr	r2, [pc, #24]	; (801357c <vApplicationGetIdleTaskMemory+0x30>)
 8013562:	601a      	str	r2, [r3, #0]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2280      	movs	r2, #128	; 0x80
 8013568:	601a      	str	r2, [r3, #0]
 801356a:	bf00      	nop
 801356c:	3714      	adds	r7, #20
 801356e:	46bd      	mov	sp, r7
 8013570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013574:	4770      	bx	lr
 8013576:	bf00      	nop
 8013578:	24001114 	.word	0x24001114
 801357c:	24001170 	.word	0x24001170

08013580 <vApplicationGetTimerTaskMemory>:
 8013580:	b480      	push	{r7}
 8013582:	b085      	sub	sp, #20
 8013584:	af00      	add	r7, sp, #0
 8013586:	60f8      	str	r0, [r7, #12]
 8013588:	60b9      	str	r1, [r7, #8]
 801358a:	607a      	str	r2, [r7, #4]
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	4a07      	ldr	r2, [pc, #28]	; (80135ac <vApplicationGetTimerTaskMemory+0x2c>)
 8013590:	601a      	str	r2, [r3, #0]
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	4a06      	ldr	r2, [pc, #24]	; (80135b0 <vApplicationGetTimerTaskMemory+0x30>)
 8013596:	601a      	str	r2, [r3, #0]
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801359e:	601a      	str	r2, [r3, #0]
 80135a0:	bf00      	nop
 80135a2:	3714      	adds	r7, #20
 80135a4:	46bd      	mov	sp, r7
 80135a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135aa:	4770      	bx	lr
 80135ac:	24001370 	.word	0x24001370
 80135b0:	240013cc 	.word	0x240013cc

080135b4 <xEventGroupCreateStatic>:
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b086      	sub	sp, #24
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d10a      	bne.n	80135d8 <xEventGroupCreateStatic+0x24>
 80135c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135c6:	f383 8811 	msr	BASEPRI, r3
 80135ca:	f3bf 8f6f 	isb	sy
 80135ce:	f3bf 8f4f 	dsb	sy
 80135d2:	613b      	str	r3, [r7, #16]
 80135d4:	bf00      	nop
 80135d6:	e7fe      	b.n	80135d6 <xEventGroupCreateStatic+0x22>
 80135d8:	2320      	movs	r3, #32
 80135da:	60bb      	str	r3, [r7, #8]
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	2b20      	cmp	r3, #32
 80135e0:	d00a      	beq.n	80135f8 <xEventGroupCreateStatic+0x44>
 80135e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e6:	f383 8811 	msr	BASEPRI, r3
 80135ea:	f3bf 8f6f 	isb	sy
 80135ee:	f3bf 8f4f 	dsb	sy
 80135f2:	60fb      	str	r3, [r7, #12]
 80135f4:	bf00      	nop
 80135f6:	e7fe      	b.n	80135f6 <xEventGroupCreateStatic+0x42>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	617b      	str	r3, [r7, #20]
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d00a      	beq.n	8013618 <xEventGroupCreateStatic+0x64>
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	2200      	movs	r2, #0
 8013606:	601a      	str	r2, [r3, #0]
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	3304      	adds	r3, #4
 801360c:	4618      	mov	r0, r3
 801360e:	f000 fa3d 	bl	8013a8c <vListInitialise>
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	2201      	movs	r2, #1
 8013616:	771a      	strb	r2, [r3, #28]
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	4618      	mov	r0, r3
 801361c:	3718      	adds	r7, #24
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}

08013622 <xEventGroupCreate>:
 8013622:	b580      	push	{r7, lr}
 8013624:	b082      	sub	sp, #8
 8013626:	af00      	add	r7, sp, #0
 8013628:	2020      	movs	r0, #32
 801362a:	f002 ff1d 	bl	8016468 <pvPortMalloc>
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d00a      	beq.n	801364c <xEventGroupCreate+0x2a>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	2200      	movs	r2, #0
 801363a:	601a      	str	r2, [r3, #0]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	3304      	adds	r3, #4
 8013640:	4618      	mov	r0, r3
 8013642:	f000 fa23 	bl	8013a8c <vListInitialise>
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2200      	movs	r2, #0
 801364a:	771a      	strb	r2, [r3, #28]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	4618      	mov	r0, r3
 8013650:	3708      	adds	r7, #8
 8013652:	46bd      	mov	sp, r7
 8013654:	bd80      	pop	{r7, pc}
	...

08013658 <xEventGroupWaitBits>:
 8013658:	b580      	push	{r7, lr}
 801365a:	b090      	sub	sp, #64	; 0x40
 801365c:	af00      	add	r7, sp, #0
 801365e:	60f8      	str	r0, [r7, #12]
 8013660:	60b9      	str	r1, [r7, #8]
 8013662:	607a      	str	r2, [r7, #4]
 8013664:	603b      	str	r3, [r7, #0]
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	637b      	str	r3, [r7, #52]	; 0x34
 801366a:	2300      	movs	r3, #0
 801366c:	63bb      	str	r3, [r7, #56]	; 0x38
 801366e:	2300      	movs	r3, #0
 8013670:	633b      	str	r3, [r7, #48]	; 0x30
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d10a      	bne.n	801368e <xEventGroupWaitBits+0x36>
 8013678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801367c:	f383 8811 	msr	BASEPRI, r3
 8013680:	f3bf 8f6f 	isb	sy
 8013684:	f3bf 8f4f 	dsb	sy
 8013688:	623b      	str	r3, [r7, #32]
 801368a:	bf00      	nop
 801368c:	e7fe      	b.n	801368c <xEventGroupWaitBits+0x34>
 801368e:	68bb      	ldr	r3, [r7, #8]
 8013690:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013694:	2b00      	cmp	r3, #0
 8013696:	d00a      	beq.n	80136ae <xEventGroupWaitBits+0x56>
 8013698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801369c:	f383 8811 	msr	BASEPRI, r3
 80136a0:	f3bf 8f6f 	isb	sy
 80136a4:	f3bf 8f4f 	dsb	sy
 80136a8:	61fb      	str	r3, [r7, #28]
 80136aa:	bf00      	nop
 80136ac:	e7fe      	b.n	80136ac <xEventGroupWaitBits+0x54>
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d10a      	bne.n	80136ca <xEventGroupWaitBits+0x72>
 80136b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136b8:	f383 8811 	msr	BASEPRI, r3
 80136bc:	f3bf 8f6f 	isb	sy
 80136c0:	f3bf 8f4f 	dsb	sy
 80136c4:	61bb      	str	r3, [r7, #24]
 80136c6:	bf00      	nop
 80136c8:	e7fe      	b.n	80136c8 <xEventGroupWaitBits+0x70>
 80136ca:	f002 f817 	bl	80156fc <xTaskGetSchedulerState>
 80136ce:	4603      	mov	r3, r0
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d102      	bne.n	80136da <xEventGroupWaitBits+0x82>
 80136d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d101      	bne.n	80136de <xEventGroupWaitBits+0x86>
 80136da:	2301      	movs	r3, #1
 80136dc:	e000      	b.n	80136e0 <xEventGroupWaitBits+0x88>
 80136de:	2300      	movs	r3, #0
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d10a      	bne.n	80136fa <xEventGroupWaitBits+0xa2>
 80136e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136e8:	f383 8811 	msr	BASEPRI, r3
 80136ec:	f3bf 8f6f 	isb	sy
 80136f0:	f3bf 8f4f 	dsb	sy
 80136f4:	617b      	str	r3, [r7, #20]
 80136f6:	bf00      	nop
 80136f8:	e7fe      	b.n	80136f8 <xEventGroupWaitBits+0xa0>
 80136fa:	f001 fb77 	bl	8014dec <vTaskSuspendAll>
 80136fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013704:	683a      	ldr	r2, [r7, #0]
 8013706:	68b9      	ldr	r1, [r7, #8]
 8013708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801370a:	f000 f988 	bl	8013a1e <prvTestWaitCondition>
 801370e:	62b8      	str	r0, [r7, #40]	; 0x28
 8013710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013712:	2b00      	cmp	r3, #0
 8013714:	d00e      	beq.n	8013734 <xEventGroupWaitBits+0xdc>
 8013716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013718:	63fb      	str	r3, [r7, #60]	; 0x3c
 801371a:	2300      	movs	r3, #0
 801371c:	64bb      	str	r3, [r7, #72]	; 0x48
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d028      	beq.n	8013776 <xEventGroupWaitBits+0x11e>
 8013724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013726:	681a      	ldr	r2, [r3, #0]
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	43db      	mvns	r3, r3
 801372c:	401a      	ands	r2, r3
 801372e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013730:	601a      	str	r2, [r3, #0]
 8013732:	e020      	b.n	8013776 <xEventGroupWaitBits+0x11e>
 8013734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013736:	2b00      	cmp	r3, #0
 8013738:	d104      	bne.n	8013744 <xEventGroupWaitBits+0xec>
 801373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801373c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801373e:	2301      	movs	r3, #1
 8013740:	633b      	str	r3, [r7, #48]	; 0x30
 8013742:	e018      	b.n	8013776 <xEventGroupWaitBits+0x11e>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d003      	beq.n	8013752 <xEventGroupWaitBits+0xfa>
 801374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801374c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013750:	63bb      	str	r3, [r7, #56]	; 0x38
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d003      	beq.n	8013760 <xEventGroupWaitBits+0x108>
 8013758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801375a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801375e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013762:	1d18      	adds	r0, r3, #4
 8013764:	68ba      	ldr	r2, [r7, #8]
 8013766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013768:	4313      	orrs	r3, r2
 801376a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801376c:	4619      	mov	r1, r3
 801376e:	f001 fd3d 	bl	80151ec <vTaskPlaceOnUnorderedEventList>
 8013772:	2300      	movs	r3, #0
 8013774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013776:	f001 fb47 	bl	8014e08 <xTaskResumeAll>
 801377a:	6278      	str	r0, [r7, #36]	; 0x24
 801377c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801377e:	2b00      	cmp	r3, #0
 8013780:	d031      	beq.n	80137e6 <xEventGroupWaitBits+0x18e>
 8013782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013784:	2b00      	cmp	r3, #0
 8013786:	d107      	bne.n	8013798 <xEventGroupWaitBits+0x140>
 8013788:	4b19      	ldr	r3, [pc, #100]	; (80137f0 <xEventGroupWaitBits+0x198>)
 801378a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801378e:	601a      	str	r2, [r3, #0]
 8013790:	f3bf 8f4f 	dsb	sy
 8013794:	f3bf 8f6f 	isb	sy
 8013798:	f002 f83c 	bl	8015814 <uxTaskResetEventItemValue>
 801379c:	63f8      	str	r0, [r7, #60]	; 0x3c
 801379e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d11a      	bne.n	80137de <xEventGroupWaitBits+0x186>
 80137a8:	f002 fd3c 	bl	8016224 <vPortEnterCritical>
 80137ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137b2:	683a      	ldr	r2, [r7, #0]
 80137b4:	68b9      	ldr	r1, [r7, #8]
 80137b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80137b8:	f000 f931 	bl	8013a1e <prvTestWaitCondition>
 80137bc:	4603      	mov	r3, r0
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d009      	beq.n	80137d6 <xEventGroupWaitBits+0x17e>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d006      	beq.n	80137d6 <xEventGroupWaitBits+0x17e>
 80137c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ca:	681a      	ldr	r2, [r3, #0]
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	43db      	mvns	r3, r3
 80137d0:	401a      	ands	r2, r3
 80137d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137d4:	601a      	str	r2, [r3, #0]
 80137d6:	2301      	movs	r3, #1
 80137d8:	633b      	str	r3, [r7, #48]	; 0x30
 80137da:	f002 fd53 	bl	8016284 <vPortExitCritical>
 80137de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80137e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137e8:	4618      	mov	r0, r3
 80137ea:	3740      	adds	r7, #64	; 0x40
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}
 80137f0:	e000ed04 	.word	0xe000ed04

080137f4 <xEventGroupClearBits>:
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b086      	sub	sp, #24
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	6039      	str	r1, [r7, #0]
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	617b      	str	r3, [r7, #20]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d10a      	bne.n	801381e <xEventGroupClearBits+0x2a>
 8013808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801380c:	f383 8811 	msr	BASEPRI, r3
 8013810:	f3bf 8f6f 	isb	sy
 8013814:	f3bf 8f4f 	dsb	sy
 8013818:	60fb      	str	r3, [r7, #12]
 801381a:	bf00      	nop
 801381c:	e7fe      	b.n	801381c <xEventGroupClearBits+0x28>
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013824:	2b00      	cmp	r3, #0
 8013826:	d00a      	beq.n	801383e <xEventGroupClearBits+0x4a>
 8013828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801382c:	f383 8811 	msr	BASEPRI, r3
 8013830:	f3bf 8f6f 	isb	sy
 8013834:	f3bf 8f4f 	dsb	sy
 8013838:	60bb      	str	r3, [r7, #8]
 801383a:	bf00      	nop
 801383c:	e7fe      	b.n	801383c <xEventGroupClearBits+0x48>
 801383e:	f002 fcf1 	bl	8016224 <vPortEnterCritical>
 8013842:	697b      	ldr	r3, [r7, #20]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	613b      	str	r3, [r7, #16]
 8013848:	697b      	ldr	r3, [r7, #20]
 801384a:	681a      	ldr	r2, [r3, #0]
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	43db      	mvns	r3, r3
 8013850:	401a      	ands	r2, r3
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	601a      	str	r2, [r3, #0]
 8013856:	f002 fd15 	bl	8016284 <vPortExitCritical>
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	4618      	mov	r0, r3
 801385e:	3718      	adds	r7, #24
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}

08013864 <xEventGroupClearBitsFromISR>:
 8013864:	b580      	push	{r7, lr}
 8013866:	b084      	sub	sp, #16
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	6039      	str	r1, [r7, #0]
 801386e:	2300      	movs	r3, #0
 8013870:	683a      	ldr	r2, [r7, #0]
 8013872:	6879      	ldr	r1, [r7, #4]
 8013874:	4804      	ldr	r0, [pc, #16]	; (8013888 <xEventGroupClearBitsFromISR+0x24>)
 8013876:	f002 fb87 	bl	8015f88 <xTimerPendFunctionCallFromISR>
 801387a:	60f8      	str	r0, [r7, #12]
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	4618      	mov	r0, r3
 8013880:	3710      	adds	r7, #16
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}
 8013886:	bf00      	nop
 8013888:	08013a05 	.word	0x08013a05

0801388c <xEventGroupGetBitsFromISR>:
 801388c:	b480      	push	{r7}
 801388e:	b089      	sub	sp, #36	; 0x24
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	61fb      	str	r3, [r7, #28]
 8013898:	f3ef 8211 	mrs	r2, BASEPRI
 801389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a0:	f383 8811 	msr	BASEPRI, r3
 80138a4:	f3bf 8f6f 	isb	sy
 80138a8:	f3bf 8f4f 	dsb	sy
 80138ac:	60fa      	str	r2, [r7, #12]
 80138ae:	60bb      	str	r3, [r7, #8]
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	61bb      	str	r3, [r7, #24]
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	617b      	str	r3, [r7, #20]
 80138ba:	69bb      	ldr	r3, [r7, #24]
 80138bc:	613b      	str	r3, [r7, #16]
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	f383 8811 	msr	BASEPRI, r3
 80138c4:	bf00      	nop
 80138c6:	697b      	ldr	r3, [r7, #20]
 80138c8:	4618      	mov	r0, r3
 80138ca:	3724      	adds	r7, #36	; 0x24
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr

080138d4 <xEventGroupSetBits>:
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b08e      	sub	sp, #56	; 0x38
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
 80138dc:	6039      	str	r1, [r7, #0]
 80138de:	2300      	movs	r3, #0
 80138e0:	633b      	str	r3, [r7, #48]	; 0x30
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80138e6:	2300      	movs	r3, #0
 80138e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d10a      	bne.n	8013906 <xEventGroupSetBits+0x32>
 80138f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f4:	f383 8811 	msr	BASEPRI, r3
 80138f8:	f3bf 8f6f 	isb	sy
 80138fc:	f3bf 8f4f 	dsb	sy
 8013900:	613b      	str	r3, [r7, #16]
 8013902:	bf00      	nop
 8013904:	e7fe      	b.n	8013904 <xEventGroupSetBits+0x30>
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801390c:	2b00      	cmp	r3, #0
 801390e:	d00a      	beq.n	8013926 <xEventGroupSetBits+0x52>
 8013910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013914:	f383 8811 	msr	BASEPRI, r3
 8013918:	f3bf 8f6f 	isb	sy
 801391c:	f3bf 8f4f 	dsb	sy
 8013920:	60fb      	str	r3, [r7, #12]
 8013922:	bf00      	nop
 8013924:	e7fe      	b.n	8013924 <xEventGroupSetBits+0x50>
 8013926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013928:	3304      	adds	r3, #4
 801392a:	627b      	str	r3, [r7, #36]	; 0x24
 801392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801392e:	3308      	adds	r3, #8
 8013930:	623b      	str	r3, [r7, #32]
 8013932:	f001 fa5b 	bl	8014dec <vTaskSuspendAll>
 8013936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	637b      	str	r3, [r7, #52]	; 0x34
 801393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	431a      	orrs	r2, r3
 8013944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013946:	601a      	str	r2, [r3, #0]
 8013948:	e03c      	b.n	80139c4 <xEventGroupSetBits+0xf0>
 801394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801394c:	685b      	ldr	r3, [r3, #4]
 801394e:	61fb      	str	r3, [r7, #28]
 8013950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	61bb      	str	r3, [r7, #24]
 8013956:	2300      	movs	r3, #0
 8013958:	62fb      	str	r3, [r7, #44]	; 0x2c
 801395a:	69bb      	ldr	r3, [r7, #24]
 801395c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013960:	617b      	str	r3, [r7, #20]
 8013962:	69bb      	ldr	r3, [r7, #24]
 8013964:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013968:	61bb      	str	r3, [r7, #24]
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013970:	2b00      	cmp	r3, #0
 8013972:	d108      	bne.n	8013986 <xEventGroupSetBits+0xb2>
 8013974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	69bb      	ldr	r3, [r7, #24]
 801397a:	4013      	ands	r3, r2
 801397c:	2b00      	cmp	r3, #0
 801397e:	d00b      	beq.n	8013998 <xEventGroupSetBits+0xc4>
 8013980:	2301      	movs	r3, #1
 8013982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013984:	e008      	b.n	8013998 <xEventGroupSetBits+0xc4>
 8013986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013988:	681a      	ldr	r2, [r3, #0]
 801398a:	69bb      	ldr	r3, [r7, #24]
 801398c:	4013      	ands	r3, r2
 801398e:	69ba      	ldr	r2, [r7, #24]
 8013990:	429a      	cmp	r2, r3
 8013992:	d101      	bne.n	8013998 <xEventGroupSetBits+0xc4>
 8013994:	2301      	movs	r3, #1
 8013996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801399a:	2b00      	cmp	r3, #0
 801399c:	d010      	beq.n	80139c0 <xEventGroupSetBits+0xec>
 801399e:	697b      	ldr	r3, [r7, #20]
 80139a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d003      	beq.n	80139b0 <xEventGroupSetBits+0xdc>
 80139a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	4313      	orrs	r3, r2
 80139ae:	633b      	str	r3, [r7, #48]	; 0x30
 80139b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80139b8:	4619      	mov	r1, r3
 80139ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80139bc:	f001 fce2 	bl	8015384 <vTaskRemoveFromUnorderedEventList>
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	637b      	str	r3, [r7, #52]	; 0x34
 80139c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80139c6:	6a3b      	ldr	r3, [r7, #32]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d1be      	bne.n	801394a <xEventGroupSetBits+0x76>
 80139cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ce:	681a      	ldr	r2, [r3, #0]
 80139d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d2:	43db      	mvns	r3, r3
 80139d4:	401a      	ands	r2, r3
 80139d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d8:	601a      	str	r2, [r3, #0]
 80139da:	f001 fa15 	bl	8014e08 <xTaskResumeAll>
 80139de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	4618      	mov	r0, r3
 80139e4:	3738      	adds	r7, #56	; 0x38
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}

080139ea <vEventGroupSetBitsCallback>:
 80139ea:	b580      	push	{r7, lr}
 80139ec:	b082      	sub	sp, #8
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	6078      	str	r0, [r7, #4]
 80139f2:	6039      	str	r1, [r7, #0]
 80139f4:	6839      	ldr	r1, [r7, #0]
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f7ff ff6c 	bl	80138d4 <xEventGroupSetBits>
 80139fc:	bf00      	nop
 80139fe:	3708      	adds	r7, #8
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}

08013a04 <vEventGroupClearBitsCallback>:
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b082      	sub	sp, #8
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
 8013a0c:	6039      	str	r1, [r7, #0]
 8013a0e:	6839      	ldr	r1, [r7, #0]
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f7ff feef 	bl	80137f4 <xEventGroupClearBits>
 8013a16:	bf00      	nop
 8013a18:	3708      	adds	r7, #8
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}

08013a1e <prvTestWaitCondition>:
 8013a1e:	b480      	push	{r7}
 8013a20:	b087      	sub	sp, #28
 8013a22:	af00      	add	r7, sp, #0
 8013a24:	60f8      	str	r0, [r7, #12]
 8013a26:	60b9      	str	r1, [r7, #8]
 8013a28:	607a      	str	r2, [r7, #4]
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	617b      	str	r3, [r7, #20]
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d107      	bne.n	8013a44 <prvTestWaitCondition+0x26>
 8013a34:	68fa      	ldr	r2, [r7, #12]
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	4013      	ands	r3, r2
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d00a      	beq.n	8013a54 <prvTestWaitCondition+0x36>
 8013a3e:	2301      	movs	r3, #1
 8013a40:	617b      	str	r3, [r7, #20]
 8013a42:	e007      	b.n	8013a54 <prvTestWaitCondition+0x36>
 8013a44:	68fa      	ldr	r2, [r7, #12]
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	4013      	ands	r3, r2
 8013a4a:	68ba      	ldr	r2, [r7, #8]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d101      	bne.n	8013a54 <prvTestWaitCondition+0x36>
 8013a50:	2301      	movs	r3, #1
 8013a52:	617b      	str	r3, [r7, #20]
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	4618      	mov	r0, r3
 8013a58:	371c      	adds	r7, #28
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a60:	4770      	bx	lr
	...

08013a64 <xEventGroupSetBitsFromISR>:
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b086      	sub	sp, #24
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	60f8      	str	r0, [r7, #12]
 8013a6c:	60b9      	str	r1, [r7, #8]
 8013a6e:	607a      	str	r2, [r7, #4]
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	68ba      	ldr	r2, [r7, #8]
 8013a74:	68f9      	ldr	r1, [r7, #12]
 8013a76:	4804      	ldr	r0, [pc, #16]	; (8013a88 <xEventGroupSetBitsFromISR+0x24>)
 8013a78:	f002 fa86 	bl	8015f88 <xTimerPendFunctionCallFromISR>
 8013a7c:	6178      	str	r0, [r7, #20]
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	4618      	mov	r0, r3
 8013a82:	3718      	adds	r7, #24
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	080139eb 	.word	0x080139eb

08013a8c <vListInitialise>:
 8013a8c:	b480      	push	{r7}
 8013a8e:	b083      	sub	sp, #12
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f103 0208 	add.w	r2, r3, #8
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	605a      	str	r2, [r3, #4]
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013aa4:	609a      	str	r2, [r3, #8]
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f103 0208 	add.w	r2, r3, #8
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	60da      	str	r2, [r3, #12]
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f103 0208 	add.w	r2, r3, #8
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	611a      	str	r2, [r3, #16]
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2200      	movs	r2, #0
 8013abe:	601a      	str	r2, [r3, #0]
 8013ac0:	bf00      	nop
 8013ac2:	370c      	adds	r7, #12
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aca:	4770      	bx	lr

08013acc <vListInitialiseItem>:
 8013acc:	b480      	push	{r7}
 8013ace:	b083      	sub	sp, #12
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	611a      	str	r2, [r3, #16]
 8013ada:	bf00      	nop
 8013adc:	370c      	adds	r7, #12
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae4:	4770      	bx	lr

08013ae6 <vListInsertEnd>:
 8013ae6:	b480      	push	{r7}
 8013ae8:	b085      	sub	sp, #20
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	6078      	str	r0, [r7, #4]
 8013aee:	6039      	str	r1, [r7, #0]
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	60fb      	str	r3, [r7, #12]
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	68fa      	ldr	r2, [r7, #12]
 8013afa:	605a      	str	r2, [r3, #4]
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	689a      	ldr	r2, [r3, #8]
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	609a      	str	r2, [r3, #8]
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	689b      	ldr	r3, [r3, #8]
 8013b08:	683a      	ldr	r2, [r7, #0]
 8013b0a:	605a      	str	r2, [r3, #4]
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	683a      	ldr	r2, [r7, #0]
 8013b10:	609a      	str	r2, [r3, #8]
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	611a      	str	r2, [r3, #16]
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	1c5a      	adds	r2, r3, #1
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	601a      	str	r2, [r3, #0]
 8013b22:	bf00      	nop
 8013b24:	3714      	adds	r7, #20
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr

08013b2e <vListInsert>:
 8013b2e:	b480      	push	{r7}
 8013b30:	b085      	sub	sp, #20
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	6078      	str	r0, [r7, #4]
 8013b36:	6039      	str	r1, [r7, #0]
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	60bb      	str	r3, [r7, #8]
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b44:	d103      	bne.n	8013b4e <vListInsert+0x20>
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	691b      	ldr	r3, [r3, #16]
 8013b4a:	60fb      	str	r3, [r7, #12]
 8013b4c:	e00c      	b.n	8013b68 <vListInsert+0x3a>
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	3308      	adds	r3, #8
 8013b52:	60fb      	str	r3, [r7, #12]
 8013b54:	e002      	b.n	8013b5c <vListInsert+0x2e>
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	685b      	ldr	r3, [r3, #4]
 8013b5a:	60fb      	str	r3, [r7, #12]
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	685b      	ldr	r3, [r3, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	68ba      	ldr	r2, [r7, #8]
 8013b64:	429a      	cmp	r2, r3
 8013b66:	d2f6      	bcs.n	8013b56 <vListInsert+0x28>
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	685a      	ldr	r2, [r3, #4]
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	605a      	str	r2, [r3, #4]
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	685b      	ldr	r3, [r3, #4]
 8013b74:	683a      	ldr	r2, [r7, #0]
 8013b76:	609a      	str	r2, [r3, #8]
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	68fa      	ldr	r2, [r7, #12]
 8013b7c:	609a      	str	r2, [r3, #8]
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	683a      	ldr	r2, [r7, #0]
 8013b82:	605a      	str	r2, [r3, #4]
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	611a      	str	r2, [r3, #16]
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	1c5a      	adds	r2, r3, #1
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	601a      	str	r2, [r3, #0]
 8013b94:	bf00      	nop
 8013b96:	3714      	adds	r7, #20
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9e:	4770      	bx	lr

08013ba0 <uxListRemove>:
 8013ba0:	b480      	push	{r7}
 8013ba2:	b085      	sub	sp, #20
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	691b      	ldr	r3, [r3, #16]
 8013bac:	60fb      	str	r3, [r7, #12]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	6892      	ldr	r2, [r2, #8]
 8013bb6:	609a      	str	r2, [r3, #8]
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	689b      	ldr	r3, [r3, #8]
 8013bbc:	687a      	ldr	r2, [r7, #4]
 8013bbe:	6852      	ldr	r2, [r2, #4]
 8013bc0:	605a      	str	r2, [r3, #4]
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	685b      	ldr	r3, [r3, #4]
 8013bc6:	687a      	ldr	r2, [r7, #4]
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d103      	bne.n	8013bd4 <uxListRemove+0x34>
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	689a      	ldr	r2, [r3, #8]
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	605a      	str	r2, [r3, #4]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	611a      	str	r2, [r3, #16]
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	1e5a      	subs	r2, r3, #1
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	601a      	str	r2, [r3, #0]
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	4618      	mov	r0, r3
 8013bea:	3714      	adds	r7, #20
 8013bec:	46bd      	mov	sp, r7
 8013bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf2:	4770      	bx	lr

08013bf4 <xQueueGenericReset>:
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b084      	sub	sp, #16
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	6039      	str	r1, [r7, #0]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	60fb      	str	r3, [r7, #12]
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d10a      	bne.n	8013c1e <xQueueGenericReset+0x2a>
 8013c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c0c:	f383 8811 	msr	BASEPRI, r3
 8013c10:	f3bf 8f6f 	isb	sy
 8013c14:	f3bf 8f4f 	dsb	sy
 8013c18:	60bb      	str	r3, [r7, #8]
 8013c1a:	bf00      	nop
 8013c1c:	e7fe      	b.n	8013c1c <xQueueGenericReset+0x28>
 8013c1e:	f002 fb01 	bl	8016224 <vPortEnterCritical>
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	681a      	ldr	r2, [r3, #0]
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c2a:	68f9      	ldr	r1, [r7, #12]
 8013c2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013c2e:	fb01 f303 	mul.w	r3, r1, r3
 8013c32:	441a      	add	r2, r3
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	609a      	str	r2, [r3, #8]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	681a      	ldr	r2, [r3, #0]
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	605a      	str	r2, [r3, #4]
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c4e:	3b01      	subs	r3, #1
 8013c50:	68f9      	ldr	r1, [r7, #12]
 8013c52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013c54:	fb01 f303 	mul.w	r3, r1, r3
 8013c58:	441a      	add	r2, r3
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	60da      	str	r2, [r3, #12]
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	22ff      	movs	r2, #255	; 0xff
 8013c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	22ff      	movs	r2, #255	; 0xff
 8013c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d114      	bne.n	8013c9e <xQueueGenericReset+0xaa>
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	691b      	ldr	r3, [r3, #16]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d01a      	beq.n	8013cb2 <xQueueGenericReset+0xbe>
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	3310      	adds	r3, #16
 8013c80:	4618      	mov	r0, r3
 8013c82:	f001 fb1b 	bl	80152bc <xTaskRemoveFromEventList>
 8013c86:	4603      	mov	r3, r0
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d012      	beq.n	8013cb2 <xQueueGenericReset+0xbe>
 8013c8c:	4b0c      	ldr	r3, [pc, #48]	; (8013cc0 <xQueueGenericReset+0xcc>)
 8013c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c92:	601a      	str	r2, [r3, #0]
 8013c94:	f3bf 8f4f 	dsb	sy
 8013c98:	f3bf 8f6f 	isb	sy
 8013c9c:	e009      	b.n	8013cb2 <xQueueGenericReset+0xbe>
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	3310      	adds	r3, #16
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f7ff fef2 	bl	8013a8c <vListInitialise>
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	3324      	adds	r3, #36	; 0x24
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7ff feed 	bl	8013a8c <vListInitialise>
 8013cb2:	f002 fae7 	bl	8016284 <vPortExitCritical>
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	4618      	mov	r0, r3
 8013cba:	3710      	adds	r7, #16
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}
 8013cc0:	e000ed04 	.word	0xe000ed04

08013cc4 <xQueueGenericCreateStatic>:
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b08e      	sub	sp, #56	; 0x38
 8013cc8:	af02      	add	r7, sp, #8
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	607a      	str	r2, [r7, #4]
 8013cd0:	603b      	str	r3, [r7, #0]
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d10a      	bne.n	8013cee <xQueueGenericCreateStatic+0x2a>
 8013cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cdc:	f383 8811 	msr	BASEPRI, r3
 8013ce0:	f3bf 8f6f 	isb	sy
 8013ce4:	f3bf 8f4f 	dsb	sy
 8013ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8013cea:	bf00      	nop
 8013cec:	e7fe      	b.n	8013cec <xQueueGenericCreateStatic+0x28>
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d10a      	bne.n	8013d0a <xQueueGenericCreateStatic+0x46>
 8013cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf8:	f383 8811 	msr	BASEPRI, r3
 8013cfc:	f3bf 8f6f 	isb	sy
 8013d00:	f3bf 8f4f 	dsb	sy
 8013d04:	627b      	str	r3, [r7, #36]	; 0x24
 8013d06:	bf00      	nop
 8013d08:	e7fe      	b.n	8013d08 <xQueueGenericCreateStatic+0x44>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d002      	beq.n	8013d16 <xQueueGenericCreateStatic+0x52>
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d001      	beq.n	8013d1a <xQueueGenericCreateStatic+0x56>
 8013d16:	2301      	movs	r3, #1
 8013d18:	e000      	b.n	8013d1c <xQueueGenericCreateStatic+0x58>
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d10a      	bne.n	8013d36 <xQueueGenericCreateStatic+0x72>
 8013d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d24:	f383 8811 	msr	BASEPRI, r3
 8013d28:	f3bf 8f6f 	isb	sy
 8013d2c:	f3bf 8f4f 	dsb	sy
 8013d30:	623b      	str	r3, [r7, #32]
 8013d32:	bf00      	nop
 8013d34:	e7fe      	b.n	8013d34 <xQueueGenericCreateStatic+0x70>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d102      	bne.n	8013d42 <xQueueGenericCreateStatic+0x7e>
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d101      	bne.n	8013d46 <xQueueGenericCreateStatic+0x82>
 8013d42:	2301      	movs	r3, #1
 8013d44:	e000      	b.n	8013d48 <xQueueGenericCreateStatic+0x84>
 8013d46:	2300      	movs	r3, #0
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d10a      	bne.n	8013d62 <xQueueGenericCreateStatic+0x9e>
 8013d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d50:	f383 8811 	msr	BASEPRI, r3
 8013d54:	f3bf 8f6f 	isb	sy
 8013d58:	f3bf 8f4f 	dsb	sy
 8013d5c:	61fb      	str	r3, [r7, #28]
 8013d5e:	bf00      	nop
 8013d60:	e7fe      	b.n	8013d60 <xQueueGenericCreateStatic+0x9c>
 8013d62:	2350      	movs	r3, #80	; 0x50
 8013d64:	617b      	str	r3, [r7, #20]
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	2b50      	cmp	r3, #80	; 0x50
 8013d6a:	d00a      	beq.n	8013d82 <xQueueGenericCreateStatic+0xbe>
 8013d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d70:	f383 8811 	msr	BASEPRI, r3
 8013d74:	f3bf 8f6f 	isb	sy
 8013d78:	f3bf 8f4f 	dsb	sy
 8013d7c:	61bb      	str	r3, [r7, #24]
 8013d7e:	bf00      	nop
 8013d80:	e7fe      	b.n	8013d80 <xQueueGenericCreateStatic+0xbc>
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d00d      	beq.n	8013daa <xQueueGenericCreateStatic+0xe6>
 8013d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d90:	2201      	movs	r2, #1
 8013d92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013d96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d9c:	9300      	str	r3, [sp, #0]
 8013d9e:	4613      	mov	r3, r2
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	68b9      	ldr	r1, [r7, #8]
 8013da4:	68f8      	ldr	r0, [r7, #12]
 8013da6:	f000 f83f 	bl	8013e28 <prvInitialiseNewQueue>
 8013daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dac:	4618      	mov	r0, r3
 8013dae:	3730      	adds	r7, #48	; 0x30
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}

08013db4 <xQueueGenericCreate>:
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b08a      	sub	sp, #40	; 0x28
 8013db8:	af02      	add	r7, sp, #8
 8013dba:	60f8      	str	r0, [r7, #12]
 8013dbc:	60b9      	str	r1, [r7, #8]
 8013dbe:	4613      	mov	r3, r2
 8013dc0:	71fb      	strb	r3, [r7, #7]
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d10a      	bne.n	8013dde <xQueueGenericCreate+0x2a>
 8013dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dcc:	f383 8811 	msr	BASEPRI, r3
 8013dd0:	f3bf 8f6f 	isb	sy
 8013dd4:	f3bf 8f4f 	dsb	sy
 8013dd8:	613b      	str	r3, [r7, #16]
 8013dda:	bf00      	nop
 8013ddc:	e7fe      	b.n	8013ddc <xQueueGenericCreate+0x28>
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	68ba      	ldr	r2, [r7, #8]
 8013de2:	fb02 f303 	mul.w	r3, r2, r3
 8013de6:	61fb      	str	r3, [r7, #28]
 8013de8:	69fb      	ldr	r3, [r7, #28]
 8013dea:	3350      	adds	r3, #80	; 0x50
 8013dec:	4618      	mov	r0, r3
 8013dee:	f002 fb3b 	bl	8016468 <pvPortMalloc>
 8013df2:	61b8      	str	r0, [r7, #24]
 8013df4:	69bb      	ldr	r3, [r7, #24]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d011      	beq.n	8013e1e <xQueueGenericCreate+0x6a>
 8013dfa:	69bb      	ldr	r3, [r7, #24]
 8013dfc:	617b      	str	r3, [r7, #20]
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	3350      	adds	r3, #80	; 0x50
 8013e02:	617b      	str	r3, [r7, #20]
 8013e04:	69bb      	ldr	r3, [r7, #24]
 8013e06:	2200      	movs	r2, #0
 8013e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013e0c:	79fa      	ldrb	r2, [r7, #7]
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	9300      	str	r3, [sp, #0]
 8013e12:	4613      	mov	r3, r2
 8013e14:	697a      	ldr	r2, [r7, #20]
 8013e16:	68b9      	ldr	r1, [r7, #8]
 8013e18:	68f8      	ldr	r0, [r7, #12]
 8013e1a:	f000 f805 	bl	8013e28 <prvInitialiseNewQueue>
 8013e1e:	69bb      	ldr	r3, [r7, #24]
 8013e20:	4618      	mov	r0, r3
 8013e22:	3720      	adds	r7, #32
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}

08013e28 <prvInitialiseNewQueue>:
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b084      	sub	sp, #16
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	60f8      	str	r0, [r7, #12]
 8013e30:	60b9      	str	r1, [r7, #8]
 8013e32:	607a      	str	r2, [r7, #4]
 8013e34:	70fb      	strb	r3, [r7, #3]
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d103      	bne.n	8013e44 <prvInitialiseNewQueue+0x1c>
 8013e3c:	69bb      	ldr	r3, [r7, #24]
 8013e3e:	69ba      	ldr	r2, [r7, #24]
 8013e40:	601a      	str	r2, [r3, #0]
 8013e42:	e002      	b.n	8013e4a <prvInitialiseNewQueue+0x22>
 8013e44:	69bb      	ldr	r3, [r7, #24]
 8013e46:	687a      	ldr	r2, [r7, #4]
 8013e48:	601a      	str	r2, [r3, #0]
 8013e4a:	69bb      	ldr	r3, [r7, #24]
 8013e4c:	68fa      	ldr	r2, [r7, #12]
 8013e4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8013e50:	69bb      	ldr	r3, [r7, #24]
 8013e52:	68ba      	ldr	r2, [r7, #8]
 8013e54:	641a      	str	r2, [r3, #64]	; 0x40
 8013e56:	2101      	movs	r1, #1
 8013e58:	69b8      	ldr	r0, [r7, #24]
 8013e5a:	f7ff fecb 	bl	8013bf4 <xQueueGenericReset>
 8013e5e:	69bb      	ldr	r3, [r7, #24]
 8013e60:	78fa      	ldrb	r2, [r7, #3]
 8013e62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8013e66:	bf00      	nop
 8013e68:	3710      	adds	r7, #16
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}
	...

08013e70 <xQueueGenericSend>:
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b08e      	sub	sp, #56	; 0x38
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	60f8      	str	r0, [r7, #12]
 8013e78:	60b9      	str	r1, [r7, #8]
 8013e7a:	607a      	str	r2, [r7, #4]
 8013e7c:	603b      	str	r3, [r7, #0]
 8013e7e:	2300      	movs	r3, #0
 8013e80:	637b      	str	r3, [r7, #52]	; 0x34
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	633b      	str	r3, [r7, #48]	; 0x30
 8013e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d10a      	bne.n	8013ea2 <xQueueGenericSend+0x32>
 8013e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e90:	f383 8811 	msr	BASEPRI, r3
 8013e94:	f3bf 8f6f 	isb	sy
 8013e98:	f3bf 8f4f 	dsb	sy
 8013e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e9e:	bf00      	nop
 8013ea0:	e7fe      	b.n	8013ea0 <xQueueGenericSend+0x30>
 8013ea2:	68bb      	ldr	r3, [r7, #8]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d103      	bne.n	8013eb0 <xQueueGenericSend+0x40>
 8013ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d101      	bne.n	8013eb4 <xQueueGenericSend+0x44>
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	e000      	b.n	8013eb6 <xQueueGenericSend+0x46>
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d10a      	bne.n	8013ed0 <xQueueGenericSend+0x60>
 8013eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ebe:	f383 8811 	msr	BASEPRI, r3
 8013ec2:	f3bf 8f6f 	isb	sy
 8013ec6:	f3bf 8f4f 	dsb	sy
 8013eca:	627b      	str	r3, [r7, #36]	; 0x24
 8013ecc:	bf00      	nop
 8013ece:	e7fe      	b.n	8013ece <xQueueGenericSend+0x5e>
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	2b02      	cmp	r3, #2
 8013ed4:	d103      	bne.n	8013ede <xQueueGenericSend+0x6e>
 8013ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013eda:	2b01      	cmp	r3, #1
 8013edc:	d101      	bne.n	8013ee2 <xQueueGenericSend+0x72>
 8013ede:	2301      	movs	r3, #1
 8013ee0:	e000      	b.n	8013ee4 <xQueueGenericSend+0x74>
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d10a      	bne.n	8013efe <xQueueGenericSend+0x8e>
 8013ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eec:	f383 8811 	msr	BASEPRI, r3
 8013ef0:	f3bf 8f6f 	isb	sy
 8013ef4:	f3bf 8f4f 	dsb	sy
 8013ef8:	623b      	str	r3, [r7, #32]
 8013efa:	bf00      	nop
 8013efc:	e7fe      	b.n	8013efc <xQueueGenericSend+0x8c>
 8013efe:	f001 fbfd 	bl	80156fc <xTaskGetSchedulerState>
 8013f02:	4603      	mov	r3, r0
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d102      	bne.n	8013f0e <xQueueGenericSend+0x9e>
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d101      	bne.n	8013f12 <xQueueGenericSend+0xa2>
 8013f0e:	2301      	movs	r3, #1
 8013f10:	e000      	b.n	8013f14 <xQueueGenericSend+0xa4>
 8013f12:	2300      	movs	r3, #0
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d10a      	bne.n	8013f2e <xQueueGenericSend+0xbe>
 8013f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f1c:	f383 8811 	msr	BASEPRI, r3
 8013f20:	f3bf 8f6f 	isb	sy
 8013f24:	f3bf 8f4f 	dsb	sy
 8013f28:	61fb      	str	r3, [r7, #28]
 8013f2a:	bf00      	nop
 8013f2c:	e7fe      	b.n	8013f2c <xQueueGenericSend+0xbc>
 8013f2e:	f002 f979 	bl	8016224 <vPortEnterCritical>
 8013f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d302      	bcc.n	8013f44 <xQueueGenericSend+0xd4>
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	2b02      	cmp	r3, #2
 8013f42:	d129      	bne.n	8013f98 <xQueueGenericSend+0x128>
 8013f44:	683a      	ldr	r2, [r7, #0]
 8013f46:	68b9      	ldr	r1, [r7, #8]
 8013f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f4a:	f000 fa8b 	bl	8014464 <prvCopyDataToQueue>
 8013f4e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8013f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d010      	beq.n	8013f7a <xQueueGenericSend+0x10a>
 8013f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f5a:	3324      	adds	r3, #36	; 0x24
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f001 f9ad 	bl	80152bc <xTaskRemoveFromEventList>
 8013f62:	4603      	mov	r3, r0
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d013      	beq.n	8013f90 <xQueueGenericSend+0x120>
 8013f68:	4b3f      	ldr	r3, [pc, #252]	; (8014068 <xQueueGenericSend+0x1f8>)
 8013f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f6e:	601a      	str	r2, [r3, #0]
 8013f70:	f3bf 8f4f 	dsb	sy
 8013f74:	f3bf 8f6f 	isb	sy
 8013f78:	e00a      	b.n	8013f90 <xQueueGenericSend+0x120>
 8013f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d007      	beq.n	8013f90 <xQueueGenericSend+0x120>
 8013f80:	4b39      	ldr	r3, [pc, #228]	; (8014068 <xQueueGenericSend+0x1f8>)
 8013f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f86:	601a      	str	r2, [r3, #0]
 8013f88:	f3bf 8f4f 	dsb	sy
 8013f8c:	f3bf 8f6f 	isb	sy
 8013f90:	f002 f978 	bl	8016284 <vPortExitCritical>
 8013f94:	2301      	movs	r3, #1
 8013f96:	e063      	b.n	8014060 <xQueueGenericSend+0x1f0>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d103      	bne.n	8013fa6 <xQueueGenericSend+0x136>
 8013f9e:	f002 f971 	bl	8016284 <vPortExitCritical>
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	e05c      	b.n	8014060 <xQueueGenericSend+0x1f0>
 8013fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d106      	bne.n	8013fba <xQueueGenericSend+0x14a>
 8013fac:	f107 0314 	add.w	r3, r7, #20
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f001 fa49 	bl	8015448 <vTaskInternalSetTimeOutState>
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8013fba:	f002 f963 	bl	8016284 <vPortExitCritical>
 8013fbe:	f000 ff15 	bl	8014dec <vTaskSuspendAll>
 8013fc2:	f002 f92f 	bl	8016224 <vPortEnterCritical>
 8013fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013fcc:	b25b      	sxtb	r3, r3
 8013fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fd2:	d103      	bne.n	8013fdc <xQueueGenericSend+0x16c>
 8013fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013fe2:	b25b      	sxtb	r3, r3
 8013fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fe8:	d103      	bne.n	8013ff2 <xQueueGenericSend+0x182>
 8013fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fec:	2200      	movs	r2, #0
 8013fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013ff2:	f002 f947 	bl	8016284 <vPortExitCritical>
 8013ff6:	1d3a      	adds	r2, r7, #4
 8013ff8:	f107 0314 	add.w	r3, r7, #20
 8013ffc:	4611      	mov	r1, r2
 8013ffe:	4618      	mov	r0, r3
 8014000:	f001 fa38 	bl	8015474 <xTaskCheckForTimeOut>
 8014004:	4603      	mov	r3, r0
 8014006:	2b00      	cmp	r3, #0
 8014008:	d124      	bne.n	8014054 <xQueueGenericSend+0x1e4>
 801400a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801400c:	f000 fb22 	bl	8014654 <prvIsQueueFull>
 8014010:	4603      	mov	r3, r0
 8014012:	2b00      	cmp	r3, #0
 8014014:	d018      	beq.n	8014048 <xQueueGenericSend+0x1d8>
 8014016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014018:	3310      	adds	r3, #16
 801401a:	687a      	ldr	r2, [r7, #4]
 801401c:	4611      	mov	r1, r2
 801401e:	4618      	mov	r0, r3
 8014020:	f001 f8c0 	bl	80151a4 <vTaskPlaceOnEventList>
 8014024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014026:	f000 faad 	bl	8014584 <prvUnlockQueue>
 801402a:	f000 feed 	bl	8014e08 <xTaskResumeAll>
 801402e:	4603      	mov	r3, r0
 8014030:	2b00      	cmp	r3, #0
 8014032:	f47f af7c 	bne.w	8013f2e <xQueueGenericSend+0xbe>
 8014036:	4b0c      	ldr	r3, [pc, #48]	; (8014068 <xQueueGenericSend+0x1f8>)
 8014038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801403c:	601a      	str	r2, [r3, #0]
 801403e:	f3bf 8f4f 	dsb	sy
 8014042:	f3bf 8f6f 	isb	sy
 8014046:	e772      	b.n	8013f2e <xQueueGenericSend+0xbe>
 8014048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801404a:	f000 fa9b 	bl	8014584 <prvUnlockQueue>
 801404e:	f000 fedb 	bl	8014e08 <xTaskResumeAll>
 8014052:	e76c      	b.n	8013f2e <xQueueGenericSend+0xbe>
 8014054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014056:	f000 fa95 	bl	8014584 <prvUnlockQueue>
 801405a:	f000 fed5 	bl	8014e08 <xTaskResumeAll>
 801405e:	2300      	movs	r3, #0
 8014060:	4618      	mov	r0, r3
 8014062:	3738      	adds	r7, #56	; 0x38
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}
 8014068:	e000ed04 	.word	0xe000ed04

0801406c <xQueueGenericSendFromISR>:
 801406c:	b580      	push	{r7, lr}
 801406e:	b090      	sub	sp, #64	; 0x40
 8014070:	af00      	add	r7, sp, #0
 8014072:	60f8      	str	r0, [r7, #12]
 8014074:	60b9      	str	r1, [r7, #8]
 8014076:	607a      	str	r2, [r7, #4]
 8014078:	603b      	str	r3, [r7, #0]
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	63bb      	str	r3, [r7, #56]	; 0x38
 801407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014080:	2b00      	cmp	r3, #0
 8014082:	d10a      	bne.n	801409a <xQueueGenericSendFromISR+0x2e>
 8014084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014088:	f383 8811 	msr	BASEPRI, r3
 801408c:	f3bf 8f6f 	isb	sy
 8014090:	f3bf 8f4f 	dsb	sy
 8014094:	62bb      	str	r3, [r7, #40]	; 0x28
 8014096:	bf00      	nop
 8014098:	e7fe      	b.n	8014098 <xQueueGenericSendFromISR+0x2c>
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d103      	bne.n	80140a8 <xQueueGenericSendFromISR+0x3c>
 80140a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d101      	bne.n	80140ac <xQueueGenericSendFromISR+0x40>
 80140a8:	2301      	movs	r3, #1
 80140aa:	e000      	b.n	80140ae <xQueueGenericSendFromISR+0x42>
 80140ac:	2300      	movs	r3, #0
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d10a      	bne.n	80140c8 <xQueueGenericSendFromISR+0x5c>
 80140b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140b6:	f383 8811 	msr	BASEPRI, r3
 80140ba:	f3bf 8f6f 	isb	sy
 80140be:	f3bf 8f4f 	dsb	sy
 80140c2:	627b      	str	r3, [r7, #36]	; 0x24
 80140c4:	bf00      	nop
 80140c6:	e7fe      	b.n	80140c6 <xQueueGenericSendFromISR+0x5a>
 80140c8:	683b      	ldr	r3, [r7, #0]
 80140ca:	2b02      	cmp	r3, #2
 80140cc:	d103      	bne.n	80140d6 <xQueueGenericSendFromISR+0x6a>
 80140ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140d2:	2b01      	cmp	r3, #1
 80140d4:	d101      	bne.n	80140da <xQueueGenericSendFromISR+0x6e>
 80140d6:	2301      	movs	r3, #1
 80140d8:	e000      	b.n	80140dc <xQueueGenericSendFromISR+0x70>
 80140da:	2300      	movs	r3, #0
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d10a      	bne.n	80140f6 <xQueueGenericSendFromISR+0x8a>
 80140e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140e4:	f383 8811 	msr	BASEPRI, r3
 80140e8:	f3bf 8f6f 	isb	sy
 80140ec:	f3bf 8f4f 	dsb	sy
 80140f0:	623b      	str	r3, [r7, #32]
 80140f2:	bf00      	nop
 80140f4:	e7fe      	b.n	80140f4 <xQueueGenericSendFromISR+0x88>
 80140f6:	f002 f977 	bl	80163e8 <vPortValidateInterruptPriority>
 80140fa:	f3ef 8211 	mrs	r2, BASEPRI
 80140fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014102:	f383 8811 	msr	BASEPRI, r3
 8014106:	f3bf 8f6f 	isb	sy
 801410a:	f3bf 8f4f 	dsb	sy
 801410e:	61fa      	str	r2, [r7, #28]
 8014110:	61bb      	str	r3, [r7, #24]
 8014112:	69fb      	ldr	r3, [r7, #28]
 8014114:	637b      	str	r3, [r7, #52]	; 0x34
 8014116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801411e:	429a      	cmp	r2, r3
 8014120:	d302      	bcc.n	8014128 <xQueueGenericSendFromISR+0xbc>
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	2b02      	cmp	r3, #2
 8014126:	d12f      	bne.n	8014188 <xQueueGenericSendFromISR+0x11c>
 8014128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801412a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801412e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8014132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014138:	683a      	ldr	r2, [r7, #0]
 801413a:	68b9      	ldr	r1, [r7, #8]
 801413c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801413e:	f000 f991 	bl	8014464 <prvCopyDataToQueue>
 8014142:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8014146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801414a:	d112      	bne.n	8014172 <xQueueGenericSendFromISR+0x106>
 801414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014150:	2b00      	cmp	r3, #0
 8014152:	d016      	beq.n	8014182 <xQueueGenericSendFromISR+0x116>
 8014154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014156:	3324      	adds	r3, #36	; 0x24
 8014158:	4618      	mov	r0, r3
 801415a:	f001 f8af 	bl	80152bc <xTaskRemoveFromEventList>
 801415e:	4603      	mov	r3, r0
 8014160:	2b00      	cmp	r3, #0
 8014162:	d00e      	beq.n	8014182 <xQueueGenericSendFromISR+0x116>
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d00b      	beq.n	8014182 <xQueueGenericSendFromISR+0x116>
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2201      	movs	r2, #1
 801416e:	601a      	str	r2, [r3, #0]
 8014170:	e007      	b.n	8014182 <xQueueGenericSendFromISR+0x116>
 8014172:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014176:	3301      	adds	r3, #1
 8014178:	b2db      	uxtb	r3, r3
 801417a:	b25a      	sxtb	r2, r3
 801417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801417e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014182:	2301      	movs	r3, #1
 8014184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014186:	e001      	b.n	801418c <xQueueGenericSendFromISR+0x120>
 8014188:	2300      	movs	r3, #0
 801418a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801418c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801418e:	617b      	str	r3, [r7, #20]
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	f383 8811 	msr	BASEPRI, r3
 8014196:	bf00      	nop
 8014198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801419a:	4618      	mov	r0, r3
 801419c:	3740      	adds	r7, #64	; 0x40
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
	...

080141a4 <xQueueReceive>:
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b08c      	sub	sp, #48	; 0x30
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	60f8      	str	r0, [r7, #12]
 80141ac:	60b9      	str	r1, [r7, #8]
 80141ae:	607a      	str	r2, [r7, #4]
 80141b0:	2300      	movs	r3, #0
 80141b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80141b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d10a      	bne.n	80141d4 <xQueueReceive+0x30>
 80141be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c2:	f383 8811 	msr	BASEPRI, r3
 80141c6:	f3bf 8f6f 	isb	sy
 80141ca:	f3bf 8f4f 	dsb	sy
 80141ce:	623b      	str	r3, [r7, #32]
 80141d0:	bf00      	nop
 80141d2:	e7fe      	b.n	80141d2 <xQueueReceive+0x2e>
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d103      	bne.n	80141e2 <xQueueReceive+0x3e>
 80141da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d101      	bne.n	80141e6 <xQueueReceive+0x42>
 80141e2:	2301      	movs	r3, #1
 80141e4:	e000      	b.n	80141e8 <xQueueReceive+0x44>
 80141e6:	2300      	movs	r3, #0
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d10a      	bne.n	8014202 <xQueueReceive+0x5e>
 80141ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141f0:	f383 8811 	msr	BASEPRI, r3
 80141f4:	f3bf 8f6f 	isb	sy
 80141f8:	f3bf 8f4f 	dsb	sy
 80141fc:	61fb      	str	r3, [r7, #28]
 80141fe:	bf00      	nop
 8014200:	e7fe      	b.n	8014200 <xQueueReceive+0x5c>
 8014202:	f001 fa7b 	bl	80156fc <xTaskGetSchedulerState>
 8014206:	4603      	mov	r3, r0
 8014208:	2b00      	cmp	r3, #0
 801420a:	d102      	bne.n	8014212 <xQueueReceive+0x6e>
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d101      	bne.n	8014216 <xQueueReceive+0x72>
 8014212:	2301      	movs	r3, #1
 8014214:	e000      	b.n	8014218 <xQueueReceive+0x74>
 8014216:	2300      	movs	r3, #0
 8014218:	2b00      	cmp	r3, #0
 801421a:	d10a      	bne.n	8014232 <xQueueReceive+0x8e>
 801421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014220:	f383 8811 	msr	BASEPRI, r3
 8014224:	f3bf 8f6f 	isb	sy
 8014228:	f3bf 8f4f 	dsb	sy
 801422c:	61bb      	str	r3, [r7, #24]
 801422e:	bf00      	nop
 8014230:	e7fe      	b.n	8014230 <xQueueReceive+0x8c>
 8014232:	f001 fff7 	bl	8016224 <vPortEnterCritical>
 8014236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801423a:	627b      	str	r3, [r7, #36]	; 0x24
 801423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423e:	2b00      	cmp	r3, #0
 8014240:	d01f      	beq.n	8014282 <xQueueReceive+0xde>
 8014242:	68b9      	ldr	r1, [r7, #8]
 8014244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014246:	f000 f977 	bl	8014538 <prvCopyDataFromQueue>
 801424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424c:	1e5a      	subs	r2, r3, #1
 801424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014250:	639a      	str	r2, [r3, #56]	; 0x38
 8014252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014254:	691b      	ldr	r3, [r3, #16]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d00f      	beq.n	801427a <xQueueReceive+0xd6>
 801425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801425c:	3310      	adds	r3, #16
 801425e:	4618      	mov	r0, r3
 8014260:	f001 f82c 	bl	80152bc <xTaskRemoveFromEventList>
 8014264:	4603      	mov	r3, r0
 8014266:	2b00      	cmp	r3, #0
 8014268:	d007      	beq.n	801427a <xQueueReceive+0xd6>
 801426a:	4b3d      	ldr	r3, [pc, #244]	; (8014360 <xQueueReceive+0x1bc>)
 801426c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014270:	601a      	str	r2, [r3, #0]
 8014272:	f3bf 8f4f 	dsb	sy
 8014276:	f3bf 8f6f 	isb	sy
 801427a:	f002 f803 	bl	8016284 <vPortExitCritical>
 801427e:	2301      	movs	r3, #1
 8014280:	e069      	b.n	8014356 <xQueueReceive+0x1b2>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d103      	bne.n	8014290 <xQueueReceive+0xec>
 8014288:	f001 fffc 	bl	8016284 <vPortExitCritical>
 801428c:	2300      	movs	r3, #0
 801428e:	e062      	b.n	8014356 <xQueueReceive+0x1b2>
 8014290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014292:	2b00      	cmp	r3, #0
 8014294:	d106      	bne.n	80142a4 <xQueueReceive+0x100>
 8014296:	f107 0310 	add.w	r3, r7, #16
 801429a:	4618      	mov	r0, r3
 801429c:	f001 f8d4 	bl	8015448 <vTaskInternalSetTimeOutState>
 80142a0:	2301      	movs	r3, #1
 80142a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80142a4:	f001 ffee 	bl	8016284 <vPortExitCritical>
 80142a8:	f000 fda0 	bl	8014dec <vTaskSuspendAll>
 80142ac:	f001 ffba 	bl	8016224 <vPortEnterCritical>
 80142b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142b6:	b25b      	sxtb	r3, r3
 80142b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142bc:	d103      	bne.n	80142c6 <xQueueReceive+0x122>
 80142be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142c0:	2200      	movs	r2, #0
 80142c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80142c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80142cc:	b25b      	sxtb	r3, r3
 80142ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142d2:	d103      	bne.n	80142dc <xQueueReceive+0x138>
 80142d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d6:	2200      	movs	r2, #0
 80142d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80142dc:	f001 ffd2 	bl	8016284 <vPortExitCritical>
 80142e0:	1d3a      	adds	r2, r7, #4
 80142e2:	f107 0310 	add.w	r3, r7, #16
 80142e6:	4611      	mov	r1, r2
 80142e8:	4618      	mov	r0, r3
 80142ea:	f001 f8c3 	bl	8015474 <xTaskCheckForTimeOut>
 80142ee:	4603      	mov	r3, r0
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d123      	bne.n	801433c <xQueueReceive+0x198>
 80142f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142f6:	f000 f997 	bl	8014628 <prvIsQueueEmpty>
 80142fa:	4603      	mov	r3, r0
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d017      	beq.n	8014330 <xQueueReceive+0x18c>
 8014300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014302:	3324      	adds	r3, #36	; 0x24
 8014304:	687a      	ldr	r2, [r7, #4]
 8014306:	4611      	mov	r1, r2
 8014308:	4618      	mov	r0, r3
 801430a:	f000 ff4b 	bl	80151a4 <vTaskPlaceOnEventList>
 801430e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014310:	f000 f938 	bl	8014584 <prvUnlockQueue>
 8014314:	f000 fd78 	bl	8014e08 <xTaskResumeAll>
 8014318:	4603      	mov	r3, r0
 801431a:	2b00      	cmp	r3, #0
 801431c:	d189      	bne.n	8014232 <xQueueReceive+0x8e>
 801431e:	4b10      	ldr	r3, [pc, #64]	; (8014360 <xQueueReceive+0x1bc>)
 8014320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014324:	601a      	str	r2, [r3, #0]
 8014326:	f3bf 8f4f 	dsb	sy
 801432a:	f3bf 8f6f 	isb	sy
 801432e:	e780      	b.n	8014232 <xQueueReceive+0x8e>
 8014330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014332:	f000 f927 	bl	8014584 <prvUnlockQueue>
 8014336:	f000 fd67 	bl	8014e08 <xTaskResumeAll>
 801433a:	e77a      	b.n	8014232 <xQueueReceive+0x8e>
 801433c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801433e:	f000 f921 	bl	8014584 <prvUnlockQueue>
 8014342:	f000 fd61 	bl	8014e08 <xTaskResumeAll>
 8014346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014348:	f000 f96e 	bl	8014628 <prvIsQueueEmpty>
 801434c:	4603      	mov	r3, r0
 801434e:	2b00      	cmp	r3, #0
 8014350:	f43f af6f 	beq.w	8014232 <xQueueReceive+0x8e>
 8014354:	2300      	movs	r3, #0
 8014356:	4618      	mov	r0, r3
 8014358:	3730      	adds	r7, #48	; 0x30
 801435a:	46bd      	mov	sp, r7
 801435c:	bd80      	pop	{r7, pc}
 801435e:	bf00      	nop
 8014360:	e000ed04 	.word	0xe000ed04

08014364 <xQueueReceiveFromISR>:
 8014364:	b580      	push	{r7, lr}
 8014366:	b08e      	sub	sp, #56	; 0x38
 8014368:	af00      	add	r7, sp, #0
 801436a:	60f8      	str	r0, [r7, #12]
 801436c:	60b9      	str	r1, [r7, #8]
 801436e:	607a      	str	r2, [r7, #4]
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	633b      	str	r3, [r7, #48]	; 0x30
 8014374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014376:	2b00      	cmp	r3, #0
 8014378:	d10a      	bne.n	8014390 <xQueueReceiveFromISR+0x2c>
 801437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801437e:	f383 8811 	msr	BASEPRI, r3
 8014382:	f3bf 8f6f 	isb	sy
 8014386:	f3bf 8f4f 	dsb	sy
 801438a:	623b      	str	r3, [r7, #32]
 801438c:	bf00      	nop
 801438e:	e7fe      	b.n	801438e <xQueueReceiveFromISR+0x2a>
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d103      	bne.n	801439e <xQueueReceiveFromISR+0x3a>
 8014396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801439a:	2b00      	cmp	r3, #0
 801439c:	d101      	bne.n	80143a2 <xQueueReceiveFromISR+0x3e>
 801439e:	2301      	movs	r3, #1
 80143a0:	e000      	b.n	80143a4 <xQueueReceiveFromISR+0x40>
 80143a2:	2300      	movs	r3, #0
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d10a      	bne.n	80143be <xQueueReceiveFromISR+0x5a>
 80143a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ac:	f383 8811 	msr	BASEPRI, r3
 80143b0:	f3bf 8f6f 	isb	sy
 80143b4:	f3bf 8f4f 	dsb	sy
 80143b8:	61fb      	str	r3, [r7, #28]
 80143ba:	bf00      	nop
 80143bc:	e7fe      	b.n	80143bc <xQueueReceiveFromISR+0x58>
 80143be:	f002 f813 	bl	80163e8 <vPortValidateInterruptPriority>
 80143c2:	f3ef 8211 	mrs	r2, BASEPRI
 80143c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ca:	f383 8811 	msr	BASEPRI, r3
 80143ce:	f3bf 8f6f 	isb	sy
 80143d2:	f3bf 8f4f 	dsb	sy
 80143d6:	61ba      	str	r2, [r7, #24]
 80143d8:	617b      	str	r3, [r7, #20]
 80143da:	69bb      	ldr	r3, [r7, #24]
 80143dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80143de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80143e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d02f      	beq.n	801444a <xQueueReceiveFromISR+0xe6>
 80143ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80143f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80143f4:	68b9      	ldr	r1, [r7, #8]
 80143f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80143f8:	f000 f89e 	bl	8014538 <prvCopyDataFromQueue>
 80143fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143fe:	1e5a      	subs	r2, r3, #1
 8014400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014402:	639a      	str	r2, [r3, #56]	; 0x38
 8014404:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801440c:	d112      	bne.n	8014434 <xQueueReceiveFromISR+0xd0>
 801440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014410:	691b      	ldr	r3, [r3, #16]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d016      	beq.n	8014444 <xQueueReceiveFromISR+0xe0>
 8014416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014418:	3310      	adds	r3, #16
 801441a:	4618      	mov	r0, r3
 801441c:	f000 ff4e 	bl	80152bc <xTaskRemoveFromEventList>
 8014420:	4603      	mov	r3, r0
 8014422:	2b00      	cmp	r3, #0
 8014424:	d00e      	beq.n	8014444 <xQueueReceiveFromISR+0xe0>
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d00b      	beq.n	8014444 <xQueueReceiveFromISR+0xe0>
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2201      	movs	r2, #1
 8014430:	601a      	str	r2, [r3, #0]
 8014432:	e007      	b.n	8014444 <xQueueReceiveFromISR+0xe0>
 8014434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014438:	3301      	adds	r3, #1
 801443a:	b2db      	uxtb	r3, r3
 801443c:	b25a      	sxtb	r2, r3
 801443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014444:	2301      	movs	r3, #1
 8014446:	637b      	str	r3, [r7, #52]	; 0x34
 8014448:	e001      	b.n	801444e <xQueueReceiveFromISR+0xea>
 801444a:	2300      	movs	r3, #0
 801444c:	637b      	str	r3, [r7, #52]	; 0x34
 801444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014450:	613b      	str	r3, [r7, #16]
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	f383 8811 	msr	BASEPRI, r3
 8014458:	bf00      	nop
 801445a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801445c:	4618      	mov	r0, r3
 801445e:	3738      	adds	r7, #56	; 0x38
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}

08014464 <prvCopyDataToQueue>:
 8014464:	b580      	push	{r7, lr}
 8014466:	b086      	sub	sp, #24
 8014468:	af00      	add	r7, sp, #0
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	60b9      	str	r1, [r7, #8]
 801446e:	607a      	str	r2, [r7, #4]
 8014470:	2300      	movs	r3, #0
 8014472:	617b      	str	r3, [r7, #20]
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014478:	613b      	str	r3, [r7, #16]
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801447e:	2b00      	cmp	r3, #0
 8014480:	d10d      	bne.n	801449e <prvCopyDataToQueue+0x3a>
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d14d      	bne.n	8014526 <prvCopyDataToQueue+0xc2>
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	689b      	ldr	r3, [r3, #8]
 801448e:	4618      	mov	r0, r3
 8014490:	f001 f952 	bl	8015738 <xTaskPriorityDisinherit>
 8014494:	6178      	str	r0, [r7, #20]
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	2200      	movs	r2, #0
 801449a:	609a      	str	r2, [r3, #8]
 801449c:	e043      	b.n	8014526 <prvCopyDataToQueue+0xc2>
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d119      	bne.n	80144d8 <prvCopyDataToQueue+0x74>
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	6858      	ldr	r0, [r3, #4]
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144ac:	461a      	mov	r2, r3
 80144ae:	68b9      	ldr	r1, [r7, #8]
 80144b0:	f002 f9fe 	bl	80168b0 <memcpy>
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	685a      	ldr	r2, [r3, #4]
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144bc:	441a      	add	r2, r3
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	605a      	str	r2, [r3, #4]
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	685a      	ldr	r2, [r3, #4]
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	689b      	ldr	r3, [r3, #8]
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d32b      	bcc.n	8014526 <prvCopyDataToQueue+0xc2>
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	681a      	ldr	r2, [r3, #0]
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	605a      	str	r2, [r3, #4]
 80144d6:	e026      	b.n	8014526 <prvCopyDataToQueue+0xc2>
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	68d8      	ldr	r0, [r3, #12]
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144e0:	461a      	mov	r2, r3
 80144e2:	68b9      	ldr	r1, [r7, #8]
 80144e4:	f002 f9e4 	bl	80168b0 <memcpy>
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	68da      	ldr	r2, [r3, #12]
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144f0:	425b      	negs	r3, r3
 80144f2:	441a      	add	r2, r3
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	60da      	str	r2, [r3, #12]
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	68da      	ldr	r2, [r3, #12]
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	429a      	cmp	r2, r3
 8014502:	d207      	bcs.n	8014514 <prvCopyDataToQueue+0xb0>
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	689a      	ldr	r2, [r3, #8]
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801450c:	425b      	negs	r3, r3
 801450e:	441a      	add	r2, r3
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	60da      	str	r2, [r3, #12]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2b02      	cmp	r3, #2
 8014518:	d105      	bne.n	8014526 <prvCopyDataToQueue+0xc2>
 801451a:	693b      	ldr	r3, [r7, #16]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d002      	beq.n	8014526 <prvCopyDataToQueue+0xc2>
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	3b01      	subs	r3, #1
 8014524:	613b      	str	r3, [r7, #16]
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	1c5a      	adds	r2, r3, #1
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	639a      	str	r2, [r3, #56]	; 0x38
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	4618      	mov	r0, r3
 8014532:	3718      	adds	r7, #24
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}

08014538 <prvCopyDataFromQueue>:
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014546:	2b00      	cmp	r3, #0
 8014548:	d018      	beq.n	801457c <prvCopyDataFromQueue+0x44>
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	68da      	ldr	r2, [r3, #12]
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014552:	441a      	add	r2, r3
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	60da      	str	r2, [r3, #12]
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	68da      	ldr	r2, [r3, #12]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	689b      	ldr	r3, [r3, #8]
 8014560:	429a      	cmp	r2, r3
 8014562:	d303      	bcc.n	801456c <prvCopyDataFromQueue+0x34>
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681a      	ldr	r2, [r3, #0]
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	60da      	str	r2, [r3, #12]
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	68d9      	ldr	r1, [r3, #12]
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014574:	461a      	mov	r2, r3
 8014576:	6838      	ldr	r0, [r7, #0]
 8014578:	f002 f99a 	bl	80168b0 <memcpy>
 801457c:	bf00      	nop
 801457e:	3708      	adds	r7, #8
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}

08014584 <prvUnlockQueue>:
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	f001 fe4a 	bl	8016224 <vPortEnterCritical>
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014596:	73fb      	strb	r3, [r7, #15]
 8014598:	e011      	b.n	80145be <prvUnlockQueue+0x3a>
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d012      	beq.n	80145c8 <prvUnlockQueue+0x44>
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	3324      	adds	r3, #36	; 0x24
 80145a6:	4618      	mov	r0, r3
 80145a8:	f000 fe88 	bl	80152bc <xTaskRemoveFromEventList>
 80145ac:	4603      	mov	r3, r0
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d001      	beq.n	80145b6 <prvUnlockQueue+0x32>
 80145b2:	f000 ffc1 	bl	8015538 <vTaskMissedYield>
 80145b6:	7bfb      	ldrb	r3, [r7, #15]
 80145b8:	3b01      	subs	r3, #1
 80145ba:	b2db      	uxtb	r3, r3
 80145bc:	73fb      	strb	r3, [r7, #15]
 80145be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	dce9      	bgt.n	801459a <prvUnlockQueue+0x16>
 80145c6:	e000      	b.n	80145ca <prvUnlockQueue+0x46>
 80145c8:	bf00      	nop
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	22ff      	movs	r2, #255	; 0xff
 80145ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80145d2:	f001 fe57 	bl	8016284 <vPortExitCritical>
 80145d6:	f001 fe25 	bl	8016224 <vPortEnterCritical>
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80145e0:	73bb      	strb	r3, [r7, #14]
 80145e2:	e011      	b.n	8014608 <prvUnlockQueue+0x84>
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	691b      	ldr	r3, [r3, #16]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d012      	beq.n	8014612 <prvUnlockQueue+0x8e>
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	3310      	adds	r3, #16
 80145f0:	4618      	mov	r0, r3
 80145f2:	f000 fe63 	bl	80152bc <xTaskRemoveFromEventList>
 80145f6:	4603      	mov	r3, r0
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d001      	beq.n	8014600 <prvUnlockQueue+0x7c>
 80145fc:	f000 ff9c 	bl	8015538 <vTaskMissedYield>
 8014600:	7bbb      	ldrb	r3, [r7, #14]
 8014602:	3b01      	subs	r3, #1
 8014604:	b2db      	uxtb	r3, r3
 8014606:	73bb      	strb	r3, [r7, #14]
 8014608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801460c:	2b00      	cmp	r3, #0
 801460e:	dce9      	bgt.n	80145e4 <prvUnlockQueue+0x60>
 8014610:	e000      	b.n	8014614 <prvUnlockQueue+0x90>
 8014612:	bf00      	nop
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	22ff      	movs	r2, #255	; 0xff
 8014618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801461c:	f001 fe32 	bl	8016284 <vPortExitCritical>
 8014620:	bf00      	nop
 8014622:	3710      	adds	r7, #16
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}

08014628 <prvIsQueueEmpty>:
 8014628:	b580      	push	{r7, lr}
 801462a:	b084      	sub	sp, #16
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
 8014630:	f001 fdf8 	bl	8016224 <vPortEnterCritical>
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014638:	2b00      	cmp	r3, #0
 801463a:	d102      	bne.n	8014642 <prvIsQueueEmpty+0x1a>
 801463c:	2301      	movs	r3, #1
 801463e:	60fb      	str	r3, [r7, #12]
 8014640:	e001      	b.n	8014646 <prvIsQueueEmpty+0x1e>
 8014642:	2300      	movs	r3, #0
 8014644:	60fb      	str	r3, [r7, #12]
 8014646:	f001 fe1d 	bl	8016284 <vPortExitCritical>
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	4618      	mov	r0, r3
 801464e:	3710      	adds	r7, #16
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}

08014654 <prvIsQueueFull>:
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	f001 fde2 	bl	8016224 <vPortEnterCritical>
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014668:	429a      	cmp	r2, r3
 801466a:	d102      	bne.n	8014672 <prvIsQueueFull+0x1e>
 801466c:	2301      	movs	r3, #1
 801466e:	60fb      	str	r3, [r7, #12]
 8014670:	e001      	b.n	8014676 <prvIsQueueFull+0x22>
 8014672:	2300      	movs	r3, #0
 8014674:	60fb      	str	r3, [r7, #12]
 8014676:	f001 fe05 	bl	8016284 <vPortExitCritical>
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	4618      	mov	r0, r3
 801467e:	3710      	adds	r7, #16
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <vQueueAddToRegistry>:
 8014684:	b480      	push	{r7}
 8014686:	b085      	sub	sp, #20
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	6039      	str	r1, [r7, #0]
 801468e:	2300      	movs	r3, #0
 8014690:	60fb      	str	r3, [r7, #12]
 8014692:	e014      	b.n	80146be <vQueueAddToRegistry+0x3a>
 8014694:	4a0f      	ldr	r2, [pc, #60]	; (80146d4 <vQueueAddToRegistry+0x50>)
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d10b      	bne.n	80146b8 <vQueueAddToRegistry+0x34>
 80146a0:	490c      	ldr	r1, [pc, #48]	; (80146d4 <vQueueAddToRegistry+0x50>)
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	683a      	ldr	r2, [r7, #0]
 80146a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80146aa:	4a0a      	ldr	r2, [pc, #40]	; (80146d4 <vQueueAddToRegistry+0x50>)
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	00db      	lsls	r3, r3, #3
 80146b0:	4413      	add	r3, r2
 80146b2:	687a      	ldr	r2, [r7, #4]
 80146b4:	605a      	str	r2, [r3, #4]
 80146b6:	e006      	b.n	80146c6 <vQueueAddToRegistry+0x42>
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	3301      	adds	r3, #1
 80146bc:	60fb      	str	r3, [r7, #12]
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	2b07      	cmp	r3, #7
 80146c2:	d9e7      	bls.n	8014694 <vQueueAddToRegistry+0x10>
 80146c4:	bf00      	nop
 80146c6:	bf00      	nop
 80146c8:	3714      	adds	r7, #20
 80146ca:	46bd      	mov	sp, r7
 80146cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d0:	4770      	bx	lr
 80146d2:	bf00      	nop
 80146d4:	240017cc 	.word	0x240017cc

080146d8 <vQueueWaitForMessageRestricted>:
 80146d8:	b580      	push	{r7, lr}
 80146da:	b086      	sub	sp, #24
 80146dc:	af00      	add	r7, sp, #0
 80146de:	60f8      	str	r0, [r7, #12]
 80146e0:	60b9      	str	r1, [r7, #8]
 80146e2:	607a      	str	r2, [r7, #4]
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	617b      	str	r3, [r7, #20]
 80146e8:	f001 fd9c 	bl	8016224 <vPortEnterCritical>
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80146f2:	b25b      	sxtb	r3, r3
 80146f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146f8:	d103      	bne.n	8014702 <vQueueWaitForMessageRestricted+0x2a>
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	2200      	movs	r2, #0
 80146fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014702:	697b      	ldr	r3, [r7, #20]
 8014704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014708:	b25b      	sxtb	r3, r3
 801470a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801470e:	d103      	bne.n	8014718 <vQueueWaitForMessageRestricted+0x40>
 8014710:	697b      	ldr	r3, [r7, #20]
 8014712:	2200      	movs	r2, #0
 8014714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014718:	f001 fdb4 	bl	8016284 <vPortExitCritical>
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014720:	2b00      	cmp	r3, #0
 8014722:	d106      	bne.n	8014732 <vQueueWaitForMessageRestricted+0x5a>
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	3324      	adds	r3, #36	; 0x24
 8014728:	687a      	ldr	r2, [r7, #4]
 801472a:	68b9      	ldr	r1, [r7, #8]
 801472c:	4618      	mov	r0, r3
 801472e:	f000 fd99 	bl	8015264 <vTaskPlaceOnEventListRestricted>
 8014732:	6978      	ldr	r0, [r7, #20]
 8014734:	f7ff ff26 	bl	8014584 <prvUnlockQueue>
 8014738:	bf00      	nop
 801473a:	3718      	adds	r7, #24
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}

08014740 <xTaskCreateStatic>:
 8014740:	b580      	push	{r7, lr}
 8014742:	b08e      	sub	sp, #56	; 0x38
 8014744:	af04      	add	r7, sp, #16
 8014746:	60f8      	str	r0, [r7, #12]
 8014748:	60b9      	str	r1, [r7, #8]
 801474a:	607a      	str	r2, [r7, #4]
 801474c:	603b      	str	r3, [r7, #0]
 801474e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014750:	2b00      	cmp	r3, #0
 8014752:	d10a      	bne.n	801476a <xTaskCreateStatic+0x2a>
 8014754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014758:	f383 8811 	msr	BASEPRI, r3
 801475c:	f3bf 8f6f 	isb	sy
 8014760:	f3bf 8f4f 	dsb	sy
 8014764:	623b      	str	r3, [r7, #32]
 8014766:	bf00      	nop
 8014768:	e7fe      	b.n	8014768 <xTaskCreateStatic+0x28>
 801476a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476c:	2b00      	cmp	r3, #0
 801476e:	d10a      	bne.n	8014786 <xTaskCreateStatic+0x46>
 8014770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014774:	f383 8811 	msr	BASEPRI, r3
 8014778:	f3bf 8f6f 	isb	sy
 801477c:	f3bf 8f4f 	dsb	sy
 8014780:	61fb      	str	r3, [r7, #28]
 8014782:	bf00      	nop
 8014784:	e7fe      	b.n	8014784 <xTaskCreateStatic+0x44>
 8014786:	235c      	movs	r3, #92	; 0x5c
 8014788:	613b      	str	r3, [r7, #16]
 801478a:	693b      	ldr	r3, [r7, #16]
 801478c:	2b5c      	cmp	r3, #92	; 0x5c
 801478e:	d00a      	beq.n	80147a6 <xTaskCreateStatic+0x66>
 8014790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014794:	f383 8811 	msr	BASEPRI, r3
 8014798:	f3bf 8f6f 	isb	sy
 801479c:	f3bf 8f4f 	dsb	sy
 80147a0:	61bb      	str	r3, [r7, #24]
 80147a2:	bf00      	nop
 80147a4:	e7fe      	b.n	80147a4 <xTaskCreateStatic+0x64>
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d01e      	beq.n	80147ec <xTaskCreateStatic+0xac>
 80147ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d01b      	beq.n	80147ec <xTaskCreateStatic+0xac>
 80147b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b6:	627b      	str	r3, [r7, #36]	; 0x24
 80147b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80147bc:	631a      	str	r2, [r3, #48]	; 0x30
 80147be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c0:	2202      	movs	r2, #2
 80147c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80147c6:	2300      	movs	r3, #0
 80147c8:	9303      	str	r3, [sp, #12]
 80147ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147cc:	9302      	str	r3, [sp, #8]
 80147ce:	f107 0314 	add.w	r3, r7, #20
 80147d2:	9301      	str	r3, [sp, #4]
 80147d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d6:	9300      	str	r3, [sp, #0]
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	687a      	ldr	r2, [r7, #4]
 80147dc:	68b9      	ldr	r1, [r7, #8]
 80147de:	68f8      	ldr	r0, [r7, #12]
 80147e0:	f000 f850 	bl	8014884 <prvInitialiseNewTask>
 80147e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147e6:	f000 f8dd 	bl	80149a4 <prvAddNewTaskToReadyList>
 80147ea:	e001      	b.n	80147f0 <xTaskCreateStatic+0xb0>
 80147ec:	2300      	movs	r3, #0
 80147ee:	617b      	str	r3, [r7, #20]
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	4618      	mov	r0, r3
 80147f4:	3728      	adds	r7, #40	; 0x28
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}

080147fa <xTaskCreate>:
 80147fa:	b580      	push	{r7, lr}
 80147fc:	b08c      	sub	sp, #48	; 0x30
 80147fe:	af04      	add	r7, sp, #16
 8014800:	60f8      	str	r0, [r7, #12]
 8014802:	60b9      	str	r1, [r7, #8]
 8014804:	603b      	str	r3, [r7, #0]
 8014806:	4613      	mov	r3, r2
 8014808:	80fb      	strh	r3, [r7, #6]
 801480a:	88fb      	ldrh	r3, [r7, #6]
 801480c:	009b      	lsls	r3, r3, #2
 801480e:	4618      	mov	r0, r3
 8014810:	f001 fe2a 	bl	8016468 <pvPortMalloc>
 8014814:	6178      	str	r0, [r7, #20]
 8014816:	697b      	ldr	r3, [r7, #20]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d00e      	beq.n	801483a <xTaskCreate+0x40>
 801481c:	205c      	movs	r0, #92	; 0x5c
 801481e:	f001 fe23 	bl	8016468 <pvPortMalloc>
 8014822:	61f8      	str	r0, [r7, #28]
 8014824:	69fb      	ldr	r3, [r7, #28]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d003      	beq.n	8014832 <xTaskCreate+0x38>
 801482a:	69fb      	ldr	r3, [r7, #28]
 801482c:	697a      	ldr	r2, [r7, #20]
 801482e:	631a      	str	r2, [r3, #48]	; 0x30
 8014830:	e005      	b.n	801483e <xTaskCreate+0x44>
 8014832:	6978      	ldr	r0, [r7, #20]
 8014834:	f001 fee4 	bl	8016600 <vPortFree>
 8014838:	e001      	b.n	801483e <xTaskCreate+0x44>
 801483a:	2300      	movs	r3, #0
 801483c:	61fb      	str	r3, [r7, #28]
 801483e:	69fb      	ldr	r3, [r7, #28]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d017      	beq.n	8014874 <xTaskCreate+0x7a>
 8014844:	69fb      	ldr	r3, [r7, #28]
 8014846:	2200      	movs	r2, #0
 8014848:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 801484c:	88fa      	ldrh	r2, [r7, #6]
 801484e:	2300      	movs	r3, #0
 8014850:	9303      	str	r3, [sp, #12]
 8014852:	69fb      	ldr	r3, [r7, #28]
 8014854:	9302      	str	r3, [sp, #8]
 8014856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014858:	9301      	str	r3, [sp, #4]
 801485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485c:	9300      	str	r3, [sp, #0]
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	68b9      	ldr	r1, [r7, #8]
 8014862:	68f8      	ldr	r0, [r7, #12]
 8014864:	f000 f80e 	bl	8014884 <prvInitialiseNewTask>
 8014868:	69f8      	ldr	r0, [r7, #28]
 801486a:	f000 f89b 	bl	80149a4 <prvAddNewTaskToReadyList>
 801486e:	2301      	movs	r3, #1
 8014870:	61bb      	str	r3, [r7, #24]
 8014872:	e002      	b.n	801487a <xTaskCreate+0x80>
 8014874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014878:	61bb      	str	r3, [r7, #24]
 801487a:	69bb      	ldr	r3, [r7, #24]
 801487c:	4618      	mov	r0, r3
 801487e:	3720      	adds	r7, #32
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}

08014884 <prvInitialiseNewTask>:
 8014884:	b580      	push	{r7, lr}
 8014886:	b088      	sub	sp, #32
 8014888:	af00      	add	r7, sp, #0
 801488a:	60f8      	str	r0, [r7, #12]
 801488c:	60b9      	str	r1, [r7, #8]
 801488e:	607a      	str	r2, [r7, #4]
 8014890:	603b      	str	r3, [r7, #0]
 8014892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014894:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	009b      	lsls	r3, r3, #2
 801489a:	461a      	mov	r2, r3
 801489c:	21a5      	movs	r1, #165	; 0xa5
 801489e:	f002 f815 	bl	80168cc <memset>
 80148a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80148a6:	6879      	ldr	r1, [r7, #4]
 80148a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80148ac:	440b      	add	r3, r1
 80148ae:	009b      	lsls	r3, r3, #2
 80148b0:	4413      	add	r3, r2
 80148b2:	61bb      	str	r3, [r7, #24]
 80148b4:	69bb      	ldr	r3, [r7, #24]
 80148b6:	f023 0307 	bic.w	r3, r3, #7
 80148ba:	61bb      	str	r3, [r7, #24]
 80148bc:	69bb      	ldr	r3, [r7, #24]
 80148be:	f003 0307 	and.w	r3, r3, #7
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d00a      	beq.n	80148dc <prvInitialiseNewTask+0x58>
 80148c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ca:	f383 8811 	msr	BASEPRI, r3
 80148ce:	f3bf 8f6f 	isb	sy
 80148d2:	f3bf 8f4f 	dsb	sy
 80148d6:	617b      	str	r3, [r7, #20]
 80148d8:	bf00      	nop
 80148da:	e7fe      	b.n	80148da <prvInitialiseNewTask+0x56>
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d01f      	beq.n	8014922 <prvInitialiseNewTask+0x9e>
 80148e2:	2300      	movs	r3, #0
 80148e4:	61fb      	str	r3, [r7, #28]
 80148e6:	e012      	b.n	801490e <prvInitialiseNewTask+0x8a>
 80148e8:	68ba      	ldr	r2, [r7, #8]
 80148ea:	69fb      	ldr	r3, [r7, #28]
 80148ec:	4413      	add	r3, r2
 80148ee:	7819      	ldrb	r1, [r3, #0]
 80148f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148f2:	69fb      	ldr	r3, [r7, #28]
 80148f4:	4413      	add	r3, r2
 80148f6:	3334      	adds	r3, #52	; 0x34
 80148f8:	460a      	mov	r2, r1
 80148fa:	701a      	strb	r2, [r3, #0]
 80148fc:	68ba      	ldr	r2, [r7, #8]
 80148fe:	69fb      	ldr	r3, [r7, #28]
 8014900:	4413      	add	r3, r2
 8014902:	781b      	ldrb	r3, [r3, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d006      	beq.n	8014916 <prvInitialiseNewTask+0x92>
 8014908:	69fb      	ldr	r3, [r7, #28]
 801490a:	3301      	adds	r3, #1
 801490c:	61fb      	str	r3, [r7, #28]
 801490e:	69fb      	ldr	r3, [r7, #28]
 8014910:	2b0f      	cmp	r3, #15
 8014912:	d9e9      	bls.n	80148e8 <prvInitialiseNewTask+0x64>
 8014914:	e000      	b.n	8014918 <prvInitialiseNewTask+0x94>
 8014916:	bf00      	nop
 8014918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801491a:	2200      	movs	r2, #0
 801491c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014920:	e003      	b.n	801492a <prvInitialiseNewTask+0xa6>
 8014922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014924:	2200      	movs	r2, #0
 8014926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801492c:	2b37      	cmp	r3, #55	; 0x37
 801492e:	d901      	bls.n	8014934 <prvInitialiseNewTask+0xb0>
 8014930:	2337      	movs	r3, #55	; 0x37
 8014932:	62bb      	str	r3, [r7, #40]	; 0x28
 8014934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014938:	62da      	str	r2, [r3, #44]	; 0x2c
 801493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801493c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801493e:	64da      	str	r2, [r3, #76]	; 0x4c
 8014940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014942:	2200      	movs	r2, #0
 8014944:	651a      	str	r2, [r3, #80]	; 0x50
 8014946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014948:	3304      	adds	r3, #4
 801494a:	4618      	mov	r0, r3
 801494c:	f7ff f8be 	bl	8013acc <vListInitialiseItem>
 8014950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014952:	3318      	adds	r3, #24
 8014954:	4618      	mov	r0, r3
 8014956:	f7ff f8b9 	bl	8013acc <vListInitialiseItem>
 801495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801495c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801495e:	611a      	str	r2, [r3, #16]
 8014960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014962:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014968:	619a      	str	r2, [r3, #24]
 801496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801496c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801496e:	625a      	str	r2, [r3, #36]	; 0x24
 8014970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014972:	2200      	movs	r2, #0
 8014974:	655a      	str	r2, [r3, #84]	; 0x54
 8014976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014978:	2200      	movs	r2, #0
 801497a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801497e:	683a      	ldr	r2, [r7, #0]
 8014980:	68f9      	ldr	r1, [r7, #12]
 8014982:	69b8      	ldr	r0, [r7, #24]
 8014984:	f001 fb20 	bl	8015fc8 <pxPortInitialiseStack>
 8014988:	4602      	mov	r2, r0
 801498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801498c:	601a      	str	r2, [r3, #0]
 801498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014990:	2b00      	cmp	r3, #0
 8014992:	d002      	beq.n	801499a <prvInitialiseNewTask+0x116>
 8014994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014998:	601a      	str	r2, [r3, #0]
 801499a:	bf00      	nop
 801499c:	3720      	adds	r7, #32
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}
	...

080149a4 <prvAddNewTaskToReadyList>:
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	f001 fc3a 	bl	8016224 <vPortEnterCritical>
 80149b0:	4b2d      	ldr	r3, [pc, #180]	; (8014a68 <prvAddNewTaskToReadyList+0xc4>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	3301      	adds	r3, #1
 80149b6:	4a2c      	ldr	r2, [pc, #176]	; (8014a68 <prvAddNewTaskToReadyList+0xc4>)
 80149b8:	6013      	str	r3, [r2, #0]
 80149ba:	4b2c      	ldr	r3, [pc, #176]	; (8014a6c <prvAddNewTaskToReadyList+0xc8>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d109      	bne.n	80149d6 <prvAddNewTaskToReadyList+0x32>
 80149c2:	4a2a      	ldr	r2, [pc, #168]	; (8014a6c <prvAddNewTaskToReadyList+0xc8>)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6013      	str	r3, [r2, #0]
 80149c8:	4b27      	ldr	r3, [pc, #156]	; (8014a68 <prvAddNewTaskToReadyList+0xc4>)
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	2b01      	cmp	r3, #1
 80149ce:	d110      	bne.n	80149f2 <prvAddNewTaskToReadyList+0x4e>
 80149d0:	f000 fdd6 	bl	8015580 <prvInitialiseTaskLists>
 80149d4:	e00d      	b.n	80149f2 <prvAddNewTaskToReadyList+0x4e>
 80149d6:	4b26      	ldr	r3, [pc, #152]	; (8014a70 <prvAddNewTaskToReadyList+0xcc>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d109      	bne.n	80149f2 <prvAddNewTaskToReadyList+0x4e>
 80149de:	4b23      	ldr	r3, [pc, #140]	; (8014a6c <prvAddNewTaskToReadyList+0xc8>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149e8:	429a      	cmp	r2, r3
 80149ea:	d802      	bhi.n	80149f2 <prvAddNewTaskToReadyList+0x4e>
 80149ec:	4a1f      	ldr	r2, [pc, #124]	; (8014a6c <prvAddNewTaskToReadyList+0xc8>)
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6013      	str	r3, [r2, #0]
 80149f2:	4b20      	ldr	r3, [pc, #128]	; (8014a74 <prvAddNewTaskToReadyList+0xd0>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	3301      	adds	r3, #1
 80149f8:	4a1e      	ldr	r2, [pc, #120]	; (8014a74 <prvAddNewTaskToReadyList+0xd0>)
 80149fa:	6013      	str	r3, [r2, #0]
 80149fc:	4b1d      	ldr	r3, [pc, #116]	; (8014a74 <prvAddNewTaskToReadyList+0xd0>)
 80149fe:	681a      	ldr	r2, [r3, #0]
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	645a      	str	r2, [r3, #68]	; 0x44
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a08:	4b1b      	ldr	r3, [pc, #108]	; (8014a78 <prvAddNewTaskToReadyList+0xd4>)
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d903      	bls.n	8014a18 <prvAddNewTaskToReadyList+0x74>
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a14:	4a18      	ldr	r2, [pc, #96]	; (8014a78 <prvAddNewTaskToReadyList+0xd4>)
 8014a16:	6013      	str	r3, [r2, #0]
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a1c:	4613      	mov	r3, r2
 8014a1e:	009b      	lsls	r3, r3, #2
 8014a20:	4413      	add	r3, r2
 8014a22:	009b      	lsls	r3, r3, #2
 8014a24:	4a15      	ldr	r2, [pc, #84]	; (8014a7c <prvAddNewTaskToReadyList+0xd8>)
 8014a26:	441a      	add	r2, r3
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	3304      	adds	r3, #4
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	4610      	mov	r0, r2
 8014a30:	f7ff f859 	bl	8013ae6 <vListInsertEnd>
 8014a34:	f001 fc26 	bl	8016284 <vPortExitCritical>
 8014a38:	4b0d      	ldr	r3, [pc, #52]	; (8014a70 <prvAddNewTaskToReadyList+0xcc>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d00e      	beq.n	8014a5e <prvAddNewTaskToReadyList+0xba>
 8014a40:	4b0a      	ldr	r3, [pc, #40]	; (8014a6c <prvAddNewTaskToReadyList+0xc8>)
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d207      	bcs.n	8014a5e <prvAddNewTaskToReadyList+0xba>
 8014a4e:	4b0c      	ldr	r3, [pc, #48]	; (8014a80 <prvAddNewTaskToReadyList+0xdc>)
 8014a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a54:	601a      	str	r2, [r3, #0]
 8014a56:	f3bf 8f4f 	dsb	sy
 8014a5a:	f3bf 8f6f 	isb	sy
 8014a5e:	bf00      	nop
 8014a60:	3708      	adds	r7, #8
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	24001ce0 	.word	0x24001ce0
 8014a6c:	2400180c 	.word	0x2400180c
 8014a70:	24001cec 	.word	0x24001cec
 8014a74:	24001cfc 	.word	0x24001cfc
 8014a78:	24001ce8 	.word	0x24001ce8
 8014a7c:	24001810 	.word	0x24001810
 8014a80:	e000ed04 	.word	0xe000ed04

08014a84 <vTaskDelay>:
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b084      	sub	sp, #16
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	60fb      	str	r3, [r7, #12]
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d017      	beq.n	8014ac6 <vTaskDelay+0x42>
 8014a96:	4b13      	ldr	r3, [pc, #76]	; (8014ae4 <vTaskDelay+0x60>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d00a      	beq.n	8014ab4 <vTaskDelay+0x30>
 8014a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aa2:	f383 8811 	msr	BASEPRI, r3
 8014aa6:	f3bf 8f6f 	isb	sy
 8014aaa:	f3bf 8f4f 	dsb	sy
 8014aae:	60bb      	str	r3, [r7, #8]
 8014ab0:	bf00      	nop
 8014ab2:	e7fe      	b.n	8014ab2 <vTaskDelay+0x2e>
 8014ab4:	f000 f99a 	bl	8014dec <vTaskSuspendAll>
 8014ab8:	2100      	movs	r1, #0
 8014aba:	6878      	ldr	r0, [r7, #4]
 8014abc:	f000 fec2 	bl	8015844 <prvAddCurrentTaskToDelayedList>
 8014ac0:	f000 f9a2 	bl	8014e08 <xTaskResumeAll>
 8014ac4:	60f8      	str	r0, [r7, #12]
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d107      	bne.n	8014adc <vTaskDelay+0x58>
 8014acc:	4b06      	ldr	r3, [pc, #24]	; (8014ae8 <vTaskDelay+0x64>)
 8014ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ad2:	601a      	str	r2, [r3, #0]
 8014ad4:	f3bf 8f4f 	dsb	sy
 8014ad8:	f3bf 8f6f 	isb	sy
 8014adc:	bf00      	nop
 8014ade:	3710      	adds	r7, #16
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	24001d08 	.word	0x24001d08
 8014ae8:	e000ed04 	.word	0xe000ed04

08014aec <vTaskSuspend>:
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b084      	sub	sp, #16
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	f001 fb96 	bl	8016224 <vPortEnterCritical>
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d102      	bne.n	8014b04 <vTaskSuspend+0x18>
 8014afe:	4b30      	ldr	r3, [pc, #192]	; (8014bc0 <vTaskSuspend+0xd4>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	e000      	b.n	8014b06 <vTaskSuspend+0x1a>
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	60fb      	str	r3, [r7, #12]
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	3304      	adds	r3, #4
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f7ff f847 	bl	8013ba0 <uxListRemove>
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d004      	beq.n	8014b24 <vTaskSuspend+0x38>
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	3318      	adds	r3, #24
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7ff f83e 	bl	8013ba0 <uxListRemove>
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	3304      	adds	r3, #4
 8014b28:	4619      	mov	r1, r3
 8014b2a:	4826      	ldr	r0, [pc, #152]	; (8014bc4 <vTaskSuspend+0xd8>)
 8014b2c:	f7fe ffdb 	bl	8013ae6 <vListInsertEnd>
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014b36:	b2db      	uxtb	r3, r3
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	d103      	bne.n	8014b44 <vTaskSuspend+0x58>
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8014b44:	f001 fb9e 	bl	8016284 <vPortExitCritical>
 8014b48:	4b1f      	ldr	r3, [pc, #124]	; (8014bc8 <vTaskSuspend+0xdc>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d005      	beq.n	8014b5c <vTaskSuspend+0x70>
 8014b50:	f001 fb68 	bl	8016224 <vPortEnterCritical>
 8014b54:	f000 fdb2 	bl	80156bc <prvResetNextTaskUnblockTime>
 8014b58:	f001 fb94 	bl	8016284 <vPortExitCritical>
 8014b5c:	4b18      	ldr	r3, [pc, #96]	; (8014bc0 <vTaskSuspend+0xd4>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	68fa      	ldr	r2, [r7, #12]
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d127      	bne.n	8014bb6 <vTaskSuspend+0xca>
 8014b66:	4b18      	ldr	r3, [pc, #96]	; (8014bc8 <vTaskSuspend+0xdc>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d017      	beq.n	8014b9e <vTaskSuspend+0xb2>
 8014b6e:	4b17      	ldr	r3, [pc, #92]	; (8014bcc <vTaskSuspend+0xe0>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d00a      	beq.n	8014b8c <vTaskSuspend+0xa0>
 8014b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b7a:	f383 8811 	msr	BASEPRI, r3
 8014b7e:	f3bf 8f6f 	isb	sy
 8014b82:	f3bf 8f4f 	dsb	sy
 8014b86:	60bb      	str	r3, [r7, #8]
 8014b88:	bf00      	nop
 8014b8a:	e7fe      	b.n	8014b8a <vTaskSuspend+0x9e>
 8014b8c:	4b10      	ldr	r3, [pc, #64]	; (8014bd0 <vTaskSuspend+0xe4>)
 8014b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b92:	601a      	str	r2, [r3, #0]
 8014b94:	f3bf 8f4f 	dsb	sy
 8014b98:	f3bf 8f6f 	isb	sy
 8014b9c:	e00b      	b.n	8014bb6 <vTaskSuspend+0xca>
 8014b9e:	4b09      	ldr	r3, [pc, #36]	; (8014bc4 <vTaskSuspend+0xd8>)
 8014ba0:	681a      	ldr	r2, [r3, #0]
 8014ba2:	4b0c      	ldr	r3, [pc, #48]	; (8014bd4 <vTaskSuspend+0xe8>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d103      	bne.n	8014bb2 <vTaskSuspend+0xc6>
 8014baa:	4b05      	ldr	r3, [pc, #20]	; (8014bc0 <vTaskSuspend+0xd4>)
 8014bac:	2200      	movs	r2, #0
 8014bae:	601a      	str	r2, [r3, #0]
 8014bb0:	e001      	b.n	8014bb6 <vTaskSuspend+0xca>
 8014bb2:	f000 fa99 	bl	80150e8 <vTaskSwitchContext>
 8014bb6:	bf00      	nop
 8014bb8:	3710      	adds	r7, #16
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	2400180c 	.word	0x2400180c
 8014bc4:	24001ccc 	.word	0x24001ccc
 8014bc8:	24001cec 	.word	0x24001cec
 8014bcc:	24001d08 	.word	0x24001d08
 8014bd0:	e000ed04 	.word	0xe000ed04
 8014bd4:	24001ce0 	.word	0x24001ce0

08014bd8 <prvTaskIsTaskSuspended>:
 8014bd8:	b480      	push	{r7}
 8014bda:	b087      	sub	sp, #28
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	2300      	movs	r3, #0
 8014be2:	617b      	str	r3, [r7, #20]
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	613b      	str	r3, [r7, #16]
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d10a      	bne.n	8014c04 <prvTaskIsTaskSuspended+0x2c>
 8014bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf2:	f383 8811 	msr	BASEPRI, r3
 8014bf6:	f3bf 8f6f 	isb	sy
 8014bfa:	f3bf 8f4f 	dsb	sy
 8014bfe:	60fb      	str	r3, [r7, #12]
 8014c00:	bf00      	nop
 8014c02:	e7fe      	b.n	8014c02 <prvTaskIsTaskSuspended+0x2a>
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	695b      	ldr	r3, [r3, #20]
 8014c08:	4a0a      	ldr	r2, [pc, #40]	; (8014c34 <prvTaskIsTaskSuspended+0x5c>)
 8014c0a:	4293      	cmp	r3, r2
 8014c0c:	d10a      	bne.n	8014c24 <prvTaskIsTaskSuspended+0x4c>
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c12:	4a09      	ldr	r2, [pc, #36]	; (8014c38 <prvTaskIsTaskSuspended+0x60>)
 8014c14:	4293      	cmp	r3, r2
 8014c16:	d005      	beq.n	8014c24 <prvTaskIsTaskSuspended+0x4c>
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d101      	bne.n	8014c24 <prvTaskIsTaskSuspended+0x4c>
 8014c20:	2301      	movs	r3, #1
 8014c22:	617b      	str	r3, [r7, #20]
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	4618      	mov	r0, r3
 8014c28:	371c      	adds	r7, #28
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c30:	4770      	bx	lr
 8014c32:	bf00      	nop
 8014c34:	24001ccc 	.word	0x24001ccc
 8014c38:	24001ca0 	.word	0x24001ca0

08014c3c <xTaskResumeFromISR>:
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b08a      	sub	sp, #40	; 0x28
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	2300      	movs	r3, #0
 8014c46:	627b      	str	r3, [r7, #36]	; 0x24
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	623b      	str	r3, [r7, #32]
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d10a      	bne.n	8014c68 <xTaskResumeFromISR+0x2c>
 8014c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c56:	f383 8811 	msr	BASEPRI, r3
 8014c5a:	f3bf 8f6f 	isb	sy
 8014c5e:	f3bf 8f4f 	dsb	sy
 8014c62:	61bb      	str	r3, [r7, #24]
 8014c64:	bf00      	nop
 8014c66:	e7fe      	b.n	8014c66 <xTaskResumeFromISR+0x2a>
 8014c68:	f001 fbbe 	bl	80163e8 <vPortValidateInterruptPriority>
 8014c6c:	f3ef 8211 	mrs	r2, BASEPRI
 8014c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c74:	f383 8811 	msr	BASEPRI, r3
 8014c78:	f3bf 8f6f 	isb	sy
 8014c7c:	f3bf 8f4f 	dsb	sy
 8014c80:	617a      	str	r2, [r7, #20]
 8014c82:	613b      	str	r3, [r7, #16]
 8014c84:	697b      	ldr	r3, [r7, #20]
 8014c86:	61fb      	str	r3, [r7, #28]
 8014c88:	6a38      	ldr	r0, [r7, #32]
 8014c8a:	f7ff ffa5 	bl	8014bd8 <prvTaskIsTaskSuspended>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d030      	beq.n	8014cf6 <xTaskResumeFromISR+0xba>
 8014c94:	4b1d      	ldr	r3, [pc, #116]	; (8014d0c <xTaskResumeFromISR+0xd0>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d126      	bne.n	8014cea <xTaskResumeFromISR+0xae>
 8014c9c:	6a3b      	ldr	r3, [r7, #32]
 8014c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ca0:	4b1b      	ldr	r3, [pc, #108]	; (8014d10 <xTaskResumeFromISR+0xd4>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d301      	bcc.n	8014cae <xTaskResumeFromISR+0x72>
 8014caa:	2301      	movs	r3, #1
 8014cac:	627b      	str	r3, [r7, #36]	; 0x24
 8014cae:	6a3b      	ldr	r3, [r7, #32]
 8014cb0:	3304      	adds	r3, #4
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7fe ff74 	bl	8013ba0 <uxListRemove>
 8014cb8:	6a3b      	ldr	r3, [r7, #32]
 8014cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cbc:	4b15      	ldr	r3, [pc, #84]	; (8014d14 <xTaskResumeFromISR+0xd8>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d903      	bls.n	8014ccc <xTaskResumeFromISR+0x90>
 8014cc4:	6a3b      	ldr	r3, [r7, #32]
 8014cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cc8:	4a12      	ldr	r2, [pc, #72]	; (8014d14 <xTaskResumeFromISR+0xd8>)
 8014cca:	6013      	str	r3, [r2, #0]
 8014ccc:	6a3b      	ldr	r3, [r7, #32]
 8014cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cd0:	4613      	mov	r3, r2
 8014cd2:	009b      	lsls	r3, r3, #2
 8014cd4:	4413      	add	r3, r2
 8014cd6:	009b      	lsls	r3, r3, #2
 8014cd8:	4a0f      	ldr	r2, [pc, #60]	; (8014d18 <xTaskResumeFromISR+0xdc>)
 8014cda:	441a      	add	r2, r3
 8014cdc:	6a3b      	ldr	r3, [r7, #32]
 8014cde:	3304      	adds	r3, #4
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	4610      	mov	r0, r2
 8014ce4:	f7fe feff 	bl	8013ae6 <vListInsertEnd>
 8014ce8:	e005      	b.n	8014cf6 <xTaskResumeFromISR+0xba>
 8014cea:	6a3b      	ldr	r3, [r7, #32]
 8014cec:	3318      	adds	r3, #24
 8014cee:	4619      	mov	r1, r3
 8014cf0:	480a      	ldr	r0, [pc, #40]	; (8014d1c <xTaskResumeFromISR+0xe0>)
 8014cf2:	f7fe fef8 	bl	8013ae6 <vListInsertEnd>
 8014cf6:	69fb      	ldr	r3, [r7, #28]
 8014cf8:	60fb      	str	r3, [r7, #12]
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	f383 8811 	msr	BASEPRI, r3
 8014d00:	bf00      	nop
 8014d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d04:	4618      	mov	r0, r3
 8014d06:	3728      	adds	r7, #40	; 0x28
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}
 8014d0c:	24001d08 	.word	0x24001d08
 8014d10:	2400180c 	.word	0x2400180c
 8014d14:	24001ce8 	.word	0x24001ce8
 8014d18:	24001810 	.word	0x24001810
 8014d1c:	24001ca0 	.word	0x24001ca0

08014d20 <vTaskStartScheduler>:
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b08a      	sub	sp, #40	; 0x28
 8014d24:	af04      	add	r7, sp, #16
 8014d26:	2300      	movs	r3, #0
 8014d28:	60bb      	str	r3, [r7, #8]
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	607b      	str	r3, [r7, #4]
 8014d2e:	463a      	mov	r2, r7
 8014d30:	1d39      	adds	r1, r7, #4
 8014d32:	f107 0308 	add.w	r3, r7, #8
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7fe fc08 	bl	801354c <vApplicationGetIdleTaskMemory>
 8014d3c:	6839      	ldr	r1, [r7, #0]
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	68ba      	ldr	r2, [r7, #8]
 8014d42:	9202      	str	r2, [sp, #8]
 8014d44:	9301      	str	r3, [sp, #4]
 8014d46:	2300      	movs	r3, #0
 8014d48:	9300      	str	r3, [sp, #0]
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	460a      	mov	r2, r1
 8014d4e:	4921      	ldr	r1, [pc, #132]	; (8014dd4 <vTaskStartScheduler+0xb4>)
 8014d50:	4821      	ldr	r0, [pc, #132]	; (8014dd8 <vTaskStartScheduler+0xb8>)
 8014d52:	f7ff fcf5 	bl	8014740 <xTaskCreateStatic>
 8014d56:	4603      	mov	r3, r0
 8014d58:	4a20      	ldr	r2, [pc, #128]	; (8014ddc <vTaskStartScheduler+0xbc>)
 8014d5a:	6013      	str	r3, [r2, #0]
 8014d5c:	4b1f      	ldr	r3, [pc, #124]	; (8014ddc <vTaskStartScheduler+0xbc>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d002      	beq.n	8014d6a <vTaskStartScheduler+0x4a>
 8014d64:	2301      	movs	r3, #1
 8014d66:	617b      	str	r3, [r7, #20]
 8014d68:	e001      	b.n	8014d6e <vTaskStartScheduler+0x4e>
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	617b      	str	r3, [r7, #20]
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	2b01      	cmp	r3, #1
 8014d72:	d102      	bne.n	8014d7a <vTaskStartScheduler+0x5a>
 8014d74:	f000 fdba 	bl	80158ec <xTimerCreateTimerTask>
 8014d78:	6178      	str	r0, [r7, #20]
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	2b01      	cmp	r3, #1
 8014d7e:	d116      	bne.n	8014dae <vTaskStartScheduler+0x8e>
 8014d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d84:	f383 8811 	msr	BASEPRI, r3
 8014d88:	f3bf 8f6f 	isb	sy
 8014d8c:	f3bf 8f4f 	dsb	sy
 8014d90:	613b      	str	r3, [r7, #16]
 8014d92:	bf00      	nop
 8014d94:	4b12      	ldr	r3, [pc, #72]	; (8014de0 <vTaskStartScheduler+0xc0>)
 8014d96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d9a:	601a      	str	r2, [r3, #0]
 8014d9c:	4b11      	ldr	r3, [pc, #68]	; (8014de4 <vTaskStartScheduler+0xc4>)
 8014d9e:	2201      	movs	r2, #1
 8014da0:	601a      	str	r2, [r3, #0]
 8014da2:	4b11      	ldr	r3, [pc, #68]	; (8014de8 <vTaskStartScheduler+0xc8>)
 8014da4:	2200      	movs	r2, #0
 8014da6:	601a      	str	r2, [r3, #0]
 8014da8:	f001 f99a 	bl	80160e0 <xPortStartScheduler>
 8014dac:	e00e      	b.n	8014dcc <vTaskStartScheduler+0xac>
 8014dae:	697b      	ldr	r3, [r7, #20]
 8014db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014db4:	d10a      	bne.n	8014dcc <vTaskStartScheduler+0xac>
 8014db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dba:	f383 8811 	msr	BASEPRI, r3
 8014dbe:	f3bf 8f6f 	isb	sy
 8014dc2:	f3bf 8f4f 	dsb	sy
 8014dc6:	60fb      	str	r3, [r7, #12]
 8014dc8:	bf00      	nop
 8014dca:	e7fe      	b.n	8014dca <vTaskStartScheduler+0xaa>
 8014dcc:	bf00      	nop
 8014dce:	3718      	adds	r7, #24
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd80      	pop	{r7, pc}
 8014dd4:	08017548 	.word	0x08017548
 8014dd8:	08015551 	.word	0x08015551
 8014ddc:	24001d04 	.word	0x24001d04
 8014de0:	24001d00 	.word	0x24001d00
 8014de4:	24001cec 	.word	0x24001cec
 8014de8:	24001ce4 	.word	0x24001ce4

08014dec <vTaskSuspendAll>:
 8014dec:	b480      	push	{r7}
 8014dee:	af00      	add	r7, sp, #0
 8014df0:	4b04      	ldr	r3, [pc, #16]	; (8014e04 <vTaskSuspendAll+0x18>)
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	3301      	adds	r3, #1
 8014df6:	4a03      	ldr	r2, [pc, #12]	; (8014e04 <vTaskSuspendAll+0x18>)
 8014df8:	6013      	str	r3, [r2, #0]
 8014dfa:	bf00      	nop
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr
 8014e04:	24001d08 	.word	0x24001d08

08014e08 <xTaskResumeAll>:
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b084      	sub	sp, #16
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	2300      	movs	r3, #0
 8014e10:	60fb      	str	r3, [r7, #12]
 8014e12:	2300      	movs	r3, #0
 8014e14:	60bb      	str	r3, [r7, #8]
 8014e16:	4b42      	ldr	r3, [pc, #264]	; (8014f20 <xTaskResumeAll+0x118>)
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d10a      	bne.n	8014e34 <xTaskResumeAll+0x2c>
 8014e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e22:	f383 8811 	msr	BASEPRI, r3
 8014e26:	f3bf 8f6f 	isb	sy
 8014e2a:	f3bf 8f4f 	dsb	sy
 8014e2e:	603b      	str	r3, [r7, #0]
 8014e30:	bf00      	nop
 8014e32:	e7fe      	b.n	8014e32 <xTaskResumeAll+0x2a>
 8014e34:	f001 f9f6 	bl	8016224 <vPortEnterCritical>
 8014e38:	4b39      	ldr	r3, [pc, #228]	; (8014f20 <xTaskResumeAll+0x118>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	3b01      	subs	r3, #1
 8014e3e:	4a38      	ldr	r2, [pc, #224]	; (8014f20 <xTaskResumeAll+0x118>)
 8014e40:	6013      	str	r3, [r2, #0]
 8014e42:	4b37      	ldr	r3, [pc, #220]	; (8014f20 <xTaskResumeAll+0x118>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d162      	bne.n	8014f10 <xTaskResumeAll+0x108>
 8014e4a:	4b36      	ldr	r3, [pc, #216]	; (8014f24 <xTaskResumeAll+0x11c>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d05e      	beq.n	8014f10 <xTaskResumeAll+0x108>
 8014e52:	e02f      	b.n	8014eb4 <xTaskResumeAll+0xac>
 8014e54:	4b34      	ldr	r3, [pc, #208]	; (8014f28 <xTaskResumeAll+0x120>)
 8014e56:	68db      	ldr	r3, [r3, #12]
 8014e58:	68db      	ldr	r3, [r3, #12]
 8014e5a:	60fb      	str	r3, [r7, #12]
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	3318      	adds	r3, #24
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7fe fe9d 	bl	8013ba0 <uxListRemove>
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	3304      	adds	r3, #4
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7fe fe98 	bl	8013ba0 <uxListRemove>
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e74:	4b2d      	ldr	r3, [pc, #180]	; (8014f2c <xTaskResumeAll+0x124>)
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d903      	bls.n	8014e84 <xTaskResumeAll+0x7c>
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e80:	4a2a      	ldr	r2, [pc, #168]	; (8014f2c <xTaskResumeAll+0x124>)
 8014e82:	6013      	str	r3, [r2, #0]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e88:	4613      	mov	r3, r2
 8014e8a:	009b      	lsls	r3, r3, #2
 8014e8c:	4413      	add	r3, r2
 8014e8e:	009b      	lsls	r3, r3, #2
 8014e90:	4a27      	ldr	r2, [pc, #156]	; (8014f30 <xTaskResumeAll+0x128>)
 8014e92:	441a      	add	r2, r3
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	3304      	adds	r3, #4
 8014e98:	4619      	mov	r1, r3
 8014e9a:	4610      	mov	r0, r2
 8014e9c:	f7fe fe23 	bl	8013ae6 <vListInsertEnd>
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ea4:	4b23      	ldr	r3, [pc, #140]	; (8014f34 <xTaskResumeAll+0x12c>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d302      	bcc.n	8014eb4 <xTaskResumeAll+0xac>
 8014eae:	4b22      	ldr	r3, [pc, #136]	; (8014f38 <xTaskResumeAll+0x130>)
 8014eb0:	2201      	movs	r2, #1
 8014eb2:	601a      	str	r2, [r3, #0]
 8014eb4:	4b1c      	ldr	r3, [pc, #112]	; (8014f28 <xTaskResumeAll+0x120>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d1cb      	bne.n	8014e54 <xTaskResumeAll+0x4c>
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d001      	beq.n	8014ec6 <xTaskResumeAll+0xbe>
 8014ec2:	f000 fbfb 	bl	80156bc <prvResetNextTaskUnblockTime>
 8014ec6:	4b1d      	ldr	r3, [pc, #116]	; (8014f3c <xTaskResumeAll+0x134>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	607b      	str	r3, [r7, #4]
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d010      	beq.n	8014ef4 <xTaskResumeAll+0xec>
 8014ed2:	f000 f847 	bl	8014f64 <xTaskIncrementTick>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d002      	beq.n	8014ee2 <xTaskResumeAll+0xda>
 8014edc:	4b16      	ldr	r3, [pc, #88]	; (8014f38 <xTaskResumeAll+0x130>)
 8014ede:	2201      	movs	r2, #1
 8014ee0:	601a      	str	r2, [r3, #0]
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	3b01      	subs	r3, #1
 8014ee6:	607b      	str	r3, [r7, #4]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d1f1      	bne.n	8014ed2 <xTaskResumeAll+0xca>
 8014eee:	4b13      	ldr	r3, [pc, #76]	; (8014f3c <xTaskResumeAll+0x134>)
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	601a      	str	r2, [r3, #0]
 8014ef4:	4b10      	ldr	r3, [pc, #64]	; (8014f38 <xTaskResumeAll+0x130>)
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d009      	beq.n	8014f10 <xTaskResumeAll+0x108>
 8014efc:	2301      	movs	r3, #1
 8014efe:	60bb      	str	r3, [r7, #8]
 8014f00:	4b0f      	ldr	r3, [pc, #60]	; (8014f40 <xTaskResumeAll+0x138>)
 8014f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f06:	601a      	str	r2, [r3, #0]
 8014f08:	f3bf 8f4f 	dsb	sy
 8014f0c:	f3bf 8f6f 	isb	sy
 8014f10:	f001 f9b8 	bl	8016284 <vPortExitCritical>
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	4618      	mov	r0, r3
 8014f18:	3710      	adds	r7, #16
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}
 8014f1e:	bf00      	nop
 8014f20:	24001d08 	.word	0x24001d08
 8014f24:	24001ce0 	.word	0x24001ce0
 8014f28:	24001ca0 	.word	0x24001ca0
 8014f2c:	24001ce8 	.word	0x24001ce8
 8014f30:	24001810 	.word	0x24001810
 8014f34:	2400180c 	.word	0x2400180c
 8014f38:	24001cf4 	.word	0x24001cf4
 8014f3c:	24001cf0 	.word	0x24001cf0
 8014f40:	e000ed04 	.word	0xe000ed04

08014f44 <xTaskGetTickCount>:
 8014f44:	b480      	push	{r7}
 8014f46:	b083      	sub	sp, #12
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	4b05      	ldr	r3, [pc, #20]	; (8014f60 <xTaskGetTickCount+0x1c>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	607b      	str	r3, [r7, #4]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	4618      	mov	r0, r3
 8014f54:	370c      	adds	r7, #12
 8014f56:	46bd      	mov	sp, r7
 8014f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5c:	4770      	bx	lr
 8014f5e:	bf00      	nop
 8014f60:	24001ce4 	.word	0x24001ce4

08014f64 <xTaskIncrementTick>:
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b086      	sub	sp, #24
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	617b      	str	r3, [r7, #20]
 8014f6e:	4b53      	ldr	r3, [pc, #332]	; (80150bc <xTaskIncrementTick+0x158>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	f040 8095 	bne.w	80150a2 <xTaskIncrementTick+0x13e>
 8014f78:	4b51      	ldr	r3, [pc, #324]	; (80150c0 <xTaskIncrementTick+0x15c>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	3301      	adds	r3, #1
 8014f7e:	613b      	str	r3, [r7, #16]
 8014f80:	4a4f      	ldr	r2, [pc, #316]	; (80150c0 <xTaskIncrementTick+0x15c>)
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	6013      	str	r3, [r2, #0]
 8014f86:	693b      	ldr	r3, [r7, #16]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d120      	bne.n	8014fce <xTaskIncrementTick+0x6a>
 8014f8c:	4b4d      	ldr	r3, [pc, #308]	; (80150c4 <xTaskIncrementTick+0x160>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d00a      	beq.n	8014fac <xTaskIncrementTick+0x48>
 8014f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f9a:	f383 8811 	msr	BASEPRI, r3
 8014f9e:	f3bf 8f6f 	isb	sy
 8014fa2:	f3bf 8f4f 	dsb	sy
 8014fa6:	603b      	str	r3, [r7, #0]
 8014fa8:	bf00      	nop
 8014faa:	e7fe      	b.n	8014faa <xTaskIncrementTick+0x46>
 8014fac:	4b45      	ldr	r3, [pc, #276]	; (80150c4 <xTaskIncrementTick+0x160>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	60fb      	str	r3, [r7, #12]
 8014fb2:	4b45      	ldr	r3, [pc, #276]	; (80150c8 <xTaskIncrementTick+0x164>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	4a43      	ldr	r2, [pc, #268]	; (80150c4 <xTaskIncrementTick+0x160>)
 8014fb8:	6013      	str	r3, [r2, #0]
 8014fba:	4a43      	ldr	r2, [pc, #268]	; (80150c8 <xTaskIncrementTick+0x164>)
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	6013      	str	r3, [r2, #0]
 8014fc0:	4b42      	ldr	r3, [pc, #264]	; (80150cc <xTaskIncrementTick+0x168>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	3301      	adds	r3, #1
 8014fc6:	4a41      	ldr	r2, [pc, #260]	; (80150cc <xTaskIncrementTick+0x168>)
 8014fc8:	6013      	str	r3, [r2, #0]
 8014fca:	f000 fb77 	bl	80156bc <prvResetNextTaskUnblockTime>
 8014fce:	4b40      	ldr	r3, [pc, #256]	; (80150d0 <xTaskIncrementTick+0x16c>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	693a      	ldr	r2, [r7, #16]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d349      	bcc.n	801506c <xTaskIncrementTick+0x108>
 8014fd8:	4b3a      	ldr	r3, [pc, #232]	; (80150c4 <xTaskIncrementTick+0x160>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d104      	bne.n	8014fec <xTaskIncrementTick+0x88>
 8014fe2:	4b3b      	ldr	r3, [pc, #236]	; (80150d0 <xTaskIncrementTick+0x16c>)
 8014fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014fe8:	601a      	str	r2, [r3, #0]
 8014fea:	e03f      	b.n	801506c <xTaskIncrementTick+0x108>
 8014fec:	4b35      	ldr	r3, [pc, #212]	; (80150c4 <xTaskIncrementTick+0x160>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	68db      	ldr	r3, [r3, #12]
 8014ff2:	68db      	ldr	r3, [r3, #12]
 8014ff4:	60bb      	str	r3, [r7, #8]
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	685b      	ldr	r3, [r3, #4]
 8014ffa:	607b      	str	r3, [r7, #4]
 8014ffc:	693a      	ldr	r2, [r7, #16]
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	429a      	cmp	r2, r3
 8015002:	d203      	bcs.n	801500c <xTaskIncrementTick+0xa8>
 8015004:	4a32      	ldr	r2, [pc, #200]	; (80150d0 <xTaskIncrementTick+0x16c>)
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6013      	str	r3, [r2, #0]
 801500a:	e02f      	b.n	801506c <xTaskIncrementTick+0x108>
 801500c:	68bb      	ldr	r3, [r7, #8]
 801500e:	3304      	adds	r3, #4
 8015010:	4618      	mov	r0, r3
 8015012:	f7fe fdc5 	bl	8013ba0 <uxListRemove>
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801501a:	2b00      	cmp	r3, #0
 801501c:	d004      	beq.n	8015028 <xTaskIncrementTick+0xc4>
 801501e:	68bb      	ldr	r3, [r7, #8]
 8015020:	3318      	adds	r3, #24
 8015022:	4618      	mov	r0, r3
 8015024:	f7fe fdbc 	bl	8013ba0 <uxListRemove>
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801502c:	4b29      	ldr	r3, [pc, #164]	; (80150d4 <xTaskIncrementTick+0x170>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	429a      	cmp	r2, r3
 8015032:	d903      	bls.n	801503c <xTaskIncrementTick+0xd8>
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015038:	4a26      	ldr	r2, [pc, #152]	; (80150d4 <xTaskIncrementTick+0x170>)
 801503a:	6013      	str	r3, [r2, #0]
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015040:	4613      	mov	r3, r2
 8015042:	009b      	lsls	r3, r3, #2
 8015044:	4413      	add	r3, r2
 8015046:	009b      	lsls	r3, r3, #2
 8015048:	4a23      	ldr	r2, [pc, #140]	; (80150d8 <xTaskIncrementTick+0x174>)
 801504a:	441a      	add	r2, r3
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	3304      	adds	r3, #4
 8015050:	4619      	mov	r1, r3
 8015052:	4610      	mov	r0, r2
 8015054:	f7fe fd47 	bl	8013ae6 <vListInsertEnd>
 8015058:	68bb      	ldr	r3, [r7, #8]
 801505a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801505c:	4b1f      	ldr	r3, [pc, #124]	; (80150dc <xTaskIncrementTick+0x178>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015062:	429a      	cmp	r2, r3
 8015064:	d3b8      	bcc.n	8014fd8 <xTaskIncrementTick+0x74>
 8015066:	2301      	movs	r3, #1
 8015068:	617b      	str	r3, [r7, #20]
 801506a:	e7b5      	b.n	8014fd8 <xTaskIncrementTick+0x74>
 801506c:	4b1b      	ldr	r3, [pc, #108]	; (80150dc <xTaskIncrementTick+0x178>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015072:	4919      	ldr	r1, [pc, #100]	; (80150d8 <xTaskIncrementTick+0x174>)
 8015074:	4613      	mov	r3, r2
 8015076:	009b      	lsls	r3, r3, #2
 8015078:	4413      	add	r3, r2
 801507a:	009b      	lsls	r3, r3, #2
 801507c:	440b      	add	r3, r1
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2b01      	cmp	r3, #1
 8015082:	d901      	bls.n	8015088 <xTaskIncrementTick+0x124>
 8015084:	2301      	movs	r3, #1
 8015086:	617b      	str	r3, [r7, #20]
 8015088:	4b15      	ldr	r3, [pc, #84]	; (80150e0 <xTaskIncrementTick+0x17c>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d101      	bne.n	8015094 <xTaskIncrementTick+0x130>
 8015090:	f7eb faa8 	bl	80005e4 <vApplicationTickHook>
 8015094:	4b13      	ldr	r3, [pc, #76]	; (80150e4 <xTaskIncrementTick+0x180>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d009      	beq.n	80150b0 <xTaskIncrementTick+0x14c>
 801509c:	2301      	movs	r3, #1
 801509e:	617b      	str	r3, [r7, #20]
 80150a0:	e006      	b.n	80150b0 <xTaskIncrementTick+0x14c>
 80150a2:	4b0f      	ldr	r3, [pc, #60]	; (80150e0 <xTaskIncrementTick+0x17c>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	3301      	adds	r3, #1
 80150a8:	4a0d      	ldr	r2, [pc, #52]	; (80150e0 <xTaskIncrementTick+0x17c>)
 80150aa:	6013      	str	r3, [r2, #0]
 80150ac:	f7eb fa9a 	bl	80005e4 <vApplicationTickHook>
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	4618      	mov	r0, r3
 80150b4:	3718      	adds	r7, #24
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}
 80150ba:	bf00      	nop
 80150bc:	24001d08 	.word	0x24001d08
 80150c0:	24001ce4 	.word	0x24001ce4
 80150c4:	24001c98 	.word	0x24001c98
 80150c8:	24001c9c 	.word	0x24001c9c
 80150cc:	24001cf8 	.word	0x24001cf8
 80150d0:	24001d00 	.word	0x24001d00
 80150d4:	24001ce8 	.word	0x24001ce8
 80150d8:	24001810 	.word	0x24001810
 80150dc:	2400180c 	.word	0x2400180c
 80150e0:	24001cf0 	.word	0x24001cf0
 80150e4:	24001cf4 	.word	0x24001cf4

080150e8 <vTaskSwitchContext>:
 80150e8:	b480      	push	{r7}
 80150ea:	b085      	sub	sp, #20
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	4b28      	ldr	r3, [pc, #160]	; (8015190 <vTaskSwitchContext+0xa8>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d003      	beq.n	80150fe <vTaskSwitchContext+0x16>
 80150f6:	4b27      	ldr	r3, [pc, #156]	; (8015194 <vTaskSwitchContext+0xac>)
 80150f8:	2201      	movs	r2, #1
 80150fa:	601a      	str	r2, [r3, #0]
 80150fc:	e041      	b.n	8015182 <vTaskSwitchContext+0x9a>
 80150fe:	4b25      	ldr	r3, [pc, #148]	; (8015194 <vTaskSwitchContext+0xac>)
 8015100:	2200      	movs	r2, #0
 8015102:	601a      	str	r2, [r3, #0]
 8015104:	4b24      	ldr	r3, [pc, #144]	; (8015198 <vTaskSwitchContext+0xb0>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	60fb      	str	r3, [r7, #12]
 801510a:	e010      	b.n	801512e <vTaskSwitchContext+0x46>
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d10a      	bne.n	8015128 <vTaskSwitchContext+0x40>
 8015112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015116:	f383 8811 	msr	BASEPRI, r3
 801511a:	f3bf 8f6f 	isb	sy
 801511e:	f3bf 8f4f 	dsb	sy
 8015122:	607b      	str	r3, [r7, #4]
 8015124:	bf00      	nop
 8015126:	e7fe      	b.n	8015126 <vTaskSwitchContext+0x3e>
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	3b01      	subs	r3, #1
 801512c:	60fb      	str	r3, [r7, #12]
 801512e:	491b      	ldr	r1, [pc, #108]	; (801519c <vTaskSwitchContext+0xb4>)
 8015130:	68fa      	ldr	r2, [r7, #12]
 8015132:	4613      	mov	r3, r2
 8015134:	009b      	lsls	r3, r3, #2
 8015136:	4413      	add	r3, r2
 8015138:	009b      	lsls	r3, r3, #2
 801513a:	440b      	add	r3, r1
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d0e4      	beq.n	801510c <vTaskSwitchContext+0x24>
 8015142:	68fa      	ldr	r2, [r7, #12]
 8015144:	4613      	mov	r3, r2
 8015146:	009b      	lsls	r3, r3, #2
 8015148:	4413      	add	r3, r2
 801514a:	009b      	lsls	r3, r3, #2
 801514c:	4a13      	ldr	r2, [pc, #76]	; (801519c <vTaskSwitchContext+0xb4>)
 801514e:	4413      	add	r3, r2
 8015150:	60bb      	str	r3, [r7, #8]
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	685b      	ldr	r3, [r3, #4]
 8015156:	685a      	ldr	r2, [r3, #4]
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	605a      	str	r2, [r3, #4]
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	685a      	ldr	r2, [r3, #4]
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	3308      	adds	r3, #8
 8015164:	429a      	cmp	r2, r3
 8015166:	d104      	bne.n	8015172 <vTaskSwitchContext+0x8a>
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	685b      	ldr	r3, [r3, #4]
 801516c:	685a      	ldr	r2, [r3, #4]
 801516e:	68bb      	ldr	r3, [r7, #8]
 8015170:	605a      	str	r2, [r3, #4]
 8015172:	68bb      	ldr	r3, [r7, #8]
 8015174:	685b      	ldr	r3, [r3, #4]
 8015176:	68db      	ldr	r3, [r3, #12]
 8015178:	4a09      	ldr	r2, [pc, #36]	; (80151a0 <vTaskSwitchContext+0xb8>)
 801517a:	6013      	str	r3, [r2, #0]
 801517c:	4a06      	ldr	r2, [pc, #24]	; (8015198 <vTaskSwitchContext+0xb0>)
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	6013      	str	r3, [r2, #0]
 8015182:	bf00      	nop
 8015184:	3714      	adds	r7, #20
 8015186:	46bd      	mov	sp, r7
 8015188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518c:	4770      	bx	lr
 801518e:	bf00      	nop
 8015190:	24001d08 	.word	0x24001d08
 8015194:	24001cf4 	.word	0x24001cf4
 8015198:	24001ce8 	.word	0x24001ce8
 801519c:	24001810 	.word	0x24001810
 80151a0:	2400180c 	.word	0x2400180c

080151a4 <vTaskPlaceOnEventList>:
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b084      	sub	sp, #16
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
 80151ac:	6039      	str	r1, [r7, #0]
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d10a      	bne.n	80151ca <vTaskPlaceOnEventList+0x26>
 80151b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151b8:	f383 8811 	msr	BASEPRI, r3
 80151bc:	f3bf 8f6f 	isb	sy
 80151c0:	f3bf 8f4f 	dsb	sy
 80151c4:	60fb      	str	r3, [r7, #12]
 80151c6:	bf00      	nop
 80151c8:	e7fe      	b.n	80151c8 <vTaskPlaceOnEventList+0x24>
 80151ca:	4b07      	ldr	r3, [pc, #28]	; (80151e8 <vTaskPlaceOnEventList+0x44>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	3318      	adds	r3, #24
 80151d0:	4619      	mov	r1, r3
 80151d2:	6878      	ldr	r0, [r7, #4]
 80151d4:	f7fe fcab 	bl	8013b2e <vListInsert>
 80151d8:	2101      	movs	r1, #1
 80151da:	6838      	ldr	r0, [r7, #0]
 80151dc:	f000 fb32 	bl	8015844 <prvAddCurrentTaskToDelayedList>
 80151e0:	bf00      	nop
 80151e2:	3710      	adds	r7, #16
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}
 80151e8:	2400180c 	.word	0x2400180c

080151ec <vTaskPlaceOnUnorderedEventList>:
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b086      	sub	sp, #24
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	60f8      	str	r0, [r7, #12]
 80151f4:	60b9      	str	r1, [r7, #8]
 80151f6:	607a      	str	r2, [r7, #4]
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d10a      	bne.n	8015214 <vTaskPlaceOnUnorderedEventList+0x28>
 80151fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015202:	f383 8811 	msr	BASEPRI, r3
 8015206:	f3bf 8f6f 	isb	sy
 801520a:	f3bf 8f4f 	dsb	sy
 801520e:	617b      	str	r3, [r7, #20]
 8015210:	bf00      	nop
 8015212:	e7fe      	b.n	8015212 <vTaskPlaceOnUnorderedEventList+0x26>
 8015214:	4b11      	ldr	r3, [pc, #68]	; (801525c <vTaskPlaceOnUnorderedEventList+0x70>)
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d10a      	bne.n	8015232 <vTaskPlaceOnUnorderedEventList+0x46>
 801521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015220:	f383 8811 	msr	BASEPRI, r3
 8015224:	f3bf 8f6f 	isb	sy
 8015228:	f3bf 8f4f 	dsb	sy
 801522c:	613b      	str	r3, [r7, #16]
 801522e:	bf00      	nop
 8015230:	e7fe      	b.n	8015230 <vTaskPlaceOnUnorderedEventList+0x44>
 8015232:	4b0b      	ldr	r3, [pc, #44]	; (8015260 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	68ba      	ldr	r2, [r7, #8]
 8015238:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801523c:	619a      	str	r2, [r3, #24]
 801523e:	4b08      	ldr	r3, [pc, #32]	; (8015260 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	3318      	adds	r3, #24
 8015244:	4619      	mov	r1, r3
 8015246:	68f8      	ldr	r0, [r7, #12]
 8015248:	f7fe fc4d 	bl	8013ae6 <vListInsertEnd>
 801524c:	2101      	movs	r1, #1
 801524e:	6878      	ldr	r0, [r7, #4]
 8015250:	f000 faf8 	bl	8015844 <prvAddCurrentTaskToDelayedList>
 8015254:	bf00      	nop
 8015256:	3718      	adds	r7, #24
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}
 801525c:	24001d08 	.word	0x24001d08
 8015260:	2400180c 	.word	0x2400180c

08015264 <vTaskPlaceOnEventListRestricted>:
 8015264:	b580      	push	{r7, lr}
 8015266:	b086      	sub	sp, #24
 8015268:	af00      	add	r7, sp, #0
 801526a:	60f8      	str	r0, [r7, #12]
 801526c:	60b9      	str	r1, [r7, #8]
 801526e:	607a      	str	r2, [r7, #4]
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d10a      	bne.n	801528c <vTaskPlaceOnEventListRestricted+0x28>
 8015276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801527a:	f383 8811 	msr	BASEPRI, r3
 801527e:	f3bf 8f6f 	isb	sy
 8015282:	f3bf 8f4f 	dsb	sy
 8015286:	617b      	str	r3, [r7, #20]
 8015288:	bf00      	nop
 801528a:	e7fe      	b.n	801528a <vTaskPlaceOnEventListRestricted+0x26>
 801528c:	4b0a      	ldr	r3, [pc, #40]	; (80152b8 <vTaskPlaceOnEventListRestricted+0x54>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	3318      	adds	r3, #24
 8015292:	4619      	mov	r1, r3
 8015294:	68f8      	ldr	r0, [r7, #12]
 8015296:	f7fe fc26 	bl	8013ae6 <vListInsertEnd>
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d002      	beq.n	80152a6 <vTaskPlaceOnEventListRestricted+0x42>
 80152a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152a4:	60bb      	str	r3, [r7, #8]
 80152a6:	6879      	ldr	r1, [r7, #4]
 80152a8:	68b8      	ldr	r0, [r7, #8]
 80152aa:	f000 facb 	bl	8015844 <prvAddCurrentTaskToDelayedList>
 80152ae:	bf00      	nop
 80152b0:	3718      	adds	r7, #24
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}
 80152b6:	bf00      	nop
 80152b8:	2400180c 	.word	0x2400180c

080152bc <xTaskRemoveFromEventList>:
 80152bc:	b580      	push	{r7, lr}
 80152be:	b086      	sub	sp, #24
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	68db      	ldr	r3, [r3, #12]
 80152c8:	68db      	ldr	r3, [r3, #12]
 80152ca:	613b      	str	r3, [r7, #16]
 80152cc:	693b      	ldr	r3, [r7, #16]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d10a      	bne.n	80152e8 <xTaskRemoveFromEventList+0x2c>
 80152d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152d6:	f383 8811 	msr	BASEPRI, r3
 80152da:	f3bf 8f6f 	isb	sy
 80152de:	f3bf 8f4f 	dsb	sy
 80152e2:	60fb      	str	r3, [r7, #12]
 80152e4:	bf00      	nop
 80152e6:	e7fe      	b.n	80152e6 <xTaskRemoveFromEventList+0x2a>
 80152e8:	693b      	ldr	r3, [r7, #16]
 80152ea:	3318      	adds	r3, #24
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7fe fc57 	bl	8013ba0 <uxListRemove>
 80152f2:	4b1e      	ldr	r3, [pc, #120]	; (801536c <xTaskRemoveFromEventList+0xb0>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d11d      	bne.n	8015336 <xTaskRemoveFromEventList+0x7a>
 80152fa:	693b      	ldr	r3, [r7, #16]
 80152fc:	3304      	adds	r3, #4
 80152fe:	4618      	mov	r0, r3
 8015300:	f7fe fc4e 	bl	8013ba0 <uxListRemove>
 8015304:	693b      	ldr	r3, [r7, #16]
 8015306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015308:	4b19      	ldr	r3, [pc, #100]	; (8015370 <xTaskRemoveFromEventList+0xb4>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	429a      	cmp	r2, r3
 801530e:	d903      	bls.n	8015318 <xTaskRemoveFromEventList+0x5c>
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015314:	4a16      	ldr	r2, [pc, #88]	; (8015370 <xTaskRemoveFromEventList+0xb4>)
 8015316:	6013      	str	r3, [r2, #0]
 8015318:	693b      	ldr	r3, [r7, #16]
 801531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801531c:	4613      	mov	r3, r2
 801531e:	009b      	lsls	r3, r3, #2
 8015320:	4413      	add	r3, r2
 8015322:	009b      	lsls	r3, r3, #2
 8015324:	4a13      	ldr	r2, [pc, #76]	; (8015374 <xTaskRemoveFromEventList+0xb8>)
 8015326:	441a      	add	r2, r3
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	3304      	adds	r3, #4
 801532c:	4619      	mov	r1, r3
 801532e:	4610      	mov	r0, r2
 8015330:	f7fe fbd9 	bl	8013ae6 <vListInsertEnd>
 8015334:	e005      	b.n	8015342 <xTaskRemoveFromEventList+0x86>
 8015336:	693b      	ldr	r3, [r7, #16]
 8015338:	3318      	adds	r3, #24
 801533a:	4619      	mov	r1, r3
 801533c:	480e      	ldr	r0, [pc, #56]	; (8015378 <xTaskRemoveFromEventList+0xbc>)
 801533e:	f7fe fbd2 	bl	8013ae6 <vListInsertEnd>
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015346:	4b0d      	ldr	r3, [pc, #52]	; (801537c <xTaskRemoveFromEventList+0xc0>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801534c:	429a      	cmp	r2, r3
 801534e:	d905      	bls.n	801535c <xTaskRemoveFromEventList+0xa0>
 8015350:	2301      	movs	r3, #1
 8015352:	617b      	str	r3, [r7, #20]
 8015354:	4b0a      	ldr	r3, [pc, #40]	; (8015380 <xTaskRemoveFromEventList+0xc4>)
 8015356:	2201      	movs	r2, #1
 8015358:	601a      	str	r2, [r3, #0]
 801535a:	e001      	b.n	8015360 <xTaskRemoveFromEventList+0xa4>
 801535c:	2300      	movs	r3, #0
 801535e:	617b      	str	r3, [r7, #20]
 8015360:	697b      	ldr	r3, [r7, #20]
 8015362:	4618      	mov	r0, r3
 8015364:	3718      	adds	r7, #24
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
 801536a:	bf00      	nop
 801536c:	24001d08 	.word	0x24001d08
 8015370:	24001ce8 	.word	0x24001ce8
 8015374:	24001810 	.word	0x24001810
 8015378:	24001ca0 	.word	0x24001ca0
 801537c:	2400180c 	.word	0x2400180c
 8015380:	24001cf4 	.word	0x24001cf4

08015384 <vTaskRemoveFromUnorderedEventList>:
 8015384:	b580      	push	{r7, lr}
 8015386:	b086      	sub	sp, #24
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]
 801538e:	4b29      	ldr	r3, [pc, #164]	; (8015434 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d10a      	bne.n	80153ac <vTaskRemoveFromUnorderedEventList+0x28>
 8015396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801539a:	f383 8811 	msr	BASEPRI, r3
 801539e:	f3bf 8f6f 	isb	sy
 80153a2:	f3bf 8f4f 	dsb	sy
 80153a6:	613b      	str	r3, [r7, #16]
 80153a8:	bf00      	nop
 80153aa:	e7fe      	b.n	80153aa <vTaskRemoveFromUnorderedEventList+0x26>
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	601a      	str	r2, [r3, #0]
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	68db      	ldr	r3, [r3, #12]
 80153ba:	617b      	str	r3, [r7, #20]
 80153bc:	697b      	ldr	r3, [r7, #20]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d10a      	bne.n	80153d8 <vTaskRemoveFromUnorderedEventList+0x54>
 80153c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c6:	f383 8811 	msr	BASEPRI, r3
 80153ca:	f3bf 8f6f 	isb	sy
 80153ce:	f3bf 8f4f 	dsb	sy
 80153d2:	60fb      	str	r3, [r7, #12]
 80153d4:	bf00      	nop
 80153d6:	e7fe      	b.n	80153d6 <vTaskRemoveFromUnorderedEventList+0x52>
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	f7fe fbe1 	bl	8013ba0 <uxListRemove>
 80153de:	697b      	ldr	r3, [r7, #20]
 80153e0:	3304      	adds	r3, #4
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7fe fbdc 	bl	8013ba0 <uxListRemove>
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153ec:	4b12      	ldr	r3, [pc, #72]	; (8015438 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	429a      	cmp	r2, r3
 80153f2:	d903      	bls.n	80153fc <vTaskRemoveFromUnorderedEventList+0x78>
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153f8:	4a0f      	ldr	r2, [pc, #60]	; (8015438 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80153fa:	6013      	str	r3, [r2, #0]
 80153fc:	697b      	ldr	r3, [r7, #20]
 80153fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015400:	4613      	mov	r3, r2
 8015402:	009b      	lsls	r3, r3, #2
 8015404:	4413      	add	r3, r2
 8015406:	009b      	lsls	r3, r3, #2
 8015408:	4a0c      	ldr	r2, [pc, #48]	; (801543c <vTaskRemoveFromUnorderedEventList+0xb8>)
 801540a:	441a      	add	r2, r3
 801540c:	697b      	ldr	r3, [r7, #20]
 801540e:	3304      	adds	r3, #4
 8015410:	4619      	mov	r1, r3
 8015412:	4610      	mov	r0, r2
 8015414:	f7fe fb67 	bl	8013ae6 <vListInsertEnd>
 8015418:	697b      	ldr	r3, [r7, #20]
 801541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801541c:	4b08      	ldr	r3, [pc, #32]	; (8015440 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015422:	429a      	cmp	r2, r3
 8015424:	d902      	bls.n	801542c <vTaskRemoveFromUnorderedEventList+0xa8>
 8015426:	4b07      	ldr	r3, [pc, #28]	; (8015444 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015428:	2201      	movs	r2, #1
 801542a:	601a      	str	r2, [r3, #0]
 801542c:	bf00      	nop
 801542e:	3718      	adds	r7, #24
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}
 8015434:	24001d08 	.word	0x24001d08
 8015438:	24001ce8 	.word	0x24001ce8
 801543c:	24001810 	.word	0x24001810
 8015440:	2400180c 	.word	0x2400180c
 8015444:	24001cf4 	.word	0x24001cf4

08015448 <vTaskInternalSetTimeOutState>:
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	4b06      	ldr	r3, [pc, #24]	; (801546c <vTaskInternalSetTimeOutState+0x24>)
 8015452:	681a      	ldr	r2, [r3, #0]
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	601a      	str	r2, [r3, #0]
 8015458:	4b05      	ldr	r3, [pc, #20]	; (8015470 <vTaskInternalSetTimeOutState+0x28>)
 801545a:	681a      	ldr	r2, [r3, #0]
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	605a      	str	r2, [r3, #4]
 8015460:	bf00      	nop
 8015462:	370c      	adds	r7, #12
 8015464:	46bd      	mov	sp, r7
 8015466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546a:	4770      	bx	lr
 801546c:	24001cf8 	.word	0x24001cf8
 8015470:	24001ce4 	.word	0x24001ce4

08015474 <xTaskCheckForTimeOut>:
 8015474:	b580      	push	{r7, lr}
 8015476:	b088      	sub	sp, #32
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
 801547c:	6039      	str	r1, [r7, #0]
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d10a      	bne.n	801549a <xTaskCheckForTimeOut+0x26>
 8015484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015488:	f383 8811 	msr	BASEPRI, r3
 801548c:	f3bf 8f6f 	isb	sy
 8015490:	f3bf 8f4f 	dsb	sy
 8015494:	613b      	str	r3, [r7, #16]
 8015496:	bf00      	nop
 8015498:	e7fe      	b.n	8015498 <xTaskCheckForTimeOut+0x24>
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d10a      	bne.n	80154b6 <xTaskCheckForTimeOut+0x42>
 80154a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a4:	f383 8811 	msr	BASEPRI, r3
 80154a8:	f3bf 8f6f 	isb	sy
 80154ac:	f3bf 8f4f 	dsb	sy
 80154b0:	60fb      	str	r3, [r7, #12]
 80154b2:	bf00      	nop
 80154b4:	e7fe      	b.n	80154b4 <xTaskCheckForTimeOut+0x40>
 80154b6:	f000 feb5 	bl	8016224 <vPortEnterCritical>
 80154ba:	4b1d      	ldr	r3, [pc, #116]	; (8015530 <xTaskCheckForTimeOut+0xbc>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	61bb      	str	r3, [r7, #24]
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	685b      	ldr	r3, [r3, #4]
 80154c4:	69ba      	ldr	r2, [r7, #24]
 80154c6:	1ad3      	subs	r3, r2, r3
 80154c8:	617b      	str	r3, [r7, #20]
 80154ca:	683b      	ldr	r3, [r7, #0]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80154d2:	d102      	bne.n	80154da <xTaskCheckForTimeOut+0x66>
 80154d4:	2300      	movs	r3, #0
 80154d6:	61fb      	str	r3, [r7, #28]
 80154d8:	e023      	b.n	8015522 <xTaskCheckForTimeOut+0xae>
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	681a      	ldr	r2, [r3, #0]
 80154de:	4b15      	ldr	r3, [pc, #84]	; (8015534 <xTaskCheckForTimeOut+0xc0>)
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d007      	beq.n	80154f6 <xTaskCheckForTimeOut+0x82>
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	69ba      	ldr	r2, [r7, #24]
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d302      	bcc.n	80154f6 <xTaskCheckForTimeOut+0x82>
 80154f0:	2301      	movs	r3, #1
 80154f2:	61fb      	str	r3, [r7, #28]
 80154f4:	e015      	b.n	8015522 <xTaskCheckForTimeOut+0xae>
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	697a      	ldr	r2, [r7, #20]
 80154fc:	429a      	cmp	r2, r3
 80154fe:	d20b      	bcs.n	8015518 <xTaskCheckForTimeOut+0xa4>
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	681a      	ldr	r2, [r3, #0]
 8015504:	697b      	ldr	r3, [r7, #20]
 8015506:	1ad2      	subs	r2, r2, r3
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	601a      	str	r2, [r3, #0]
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f7ff ff9b 	bl	8015448 <vTaskInternalSetTimeOutState>
 8015512:	2300      	movs	r3, #0
 8015514:	61fb      	str	r3, [r7, #28]
 8015516:	e004      	b.n	8015522 <xTaskCheckForTimeOut+0xae>
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	2200      	movs	r2, #0
 801551c:	601a      	str	r2, [r3, #0]
 801551e:	2301      	movs	r3, #1
 8015520:	61fb      	str	r3, [r7, #28]
 8015522:	f000 feaf 	bl	8016284 <vPortExitCritical>
 8015526:	69fb      	ldr	r3, [r7, #28]
 8015528:	4618      	mov	r0, r3
 801552a:	3720      	adds	r7, #32
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}
 8015530:	24001ce4 	.word	0x24001ce4
 8015534:	24001cf8 	.word	0x24001cf8

08015538 <vTaskMissedYield>:
 8015538:	b480      	push	{r7}
 801553a:	af00      	add	r7, sp, #0
 801553c:	4b03      	ldr	r3, [pc, #12]	; (801554c <vTaskMissedYield+0x14>)
 801553e:	2201      	movs	r2, #1
 8015540:	601a      	str	r2, [r3, #0]
 8015542:	bf00      	nop
 8015544:	46bd      	mov	sp, r7
 8015546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554a:	4770      	bx	lr
 801554c:	24001cf4 	.word	0x24001cf4

08015550 <prvIdleTask>:
 8015550:	b580      	push	{r7, lr}
 8015552:	b082      	sub	sp, #8
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	f000 f852 	bl	8015600 <prvCheckTasksWaitingTermination>
 801555c:	4b06      	ldr	r3, [pc, #24]	; (8015578 <prvIdleTask+0x28>)
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	2b01      	cmp	r3, #1
 8015562:	d9f9      	bls.n	8015558 <prvIdleTask+0x8>
 8015564:	4b05      	ldr	r3, [pc, #20]	; (801557c <prvIdleTask+0x2c>)
 8015566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801556a:	601a      	str	r2, [r3, #0]
 801556c:	f3bf 8f4f 	dsb	sy
 8015570:	f3bf 8f6f 	isb	sy
 8015574:	e7f0      	b.n	8015558 <prvIdleTask+0x8>
 8015576:	bf00      	nop
 8015578:	24001810 	.word	0x24001810
 801557c:	e000ed04 	.word	0xe000ed04

08015580 <prvInitialiseTaskLists>:
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
 8015586:	2300      	movs	r3, #0
 8015588:	607b      	str	r3, [r7, #4]
 801558a:	e00c      	b.n	80155a6 <prvInitialiseTaskLists+0x26>
 801558c:	687a      	ldr	r2, [r7, #4]
 801558e:	4613      	mov	r3, r2
 8015590:	009b      	lsls	r3, r3, #2
 8015592:	4413      	add	r3, r2
 8015594:	009b      	lsls	r3, r3, #2
 8015596:	4a12      	ldr	r2, [pc, #72]	; (80155e0 <prvInitialiseTaskLists+0x60>)
 8015598:	4413      	add	r3, r2
 801559a:	4618      	mov	r0, r3
 801559c:	f7fe fa76 	bl	8013a8c <vListInitialise>
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	3301      	adds	r3, #1
 80155a4:	607b      	str	r3, [r7, #4]
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	2b37      	cmp	r3, #55	; 0x37
 80155aa:	d9ef      	bls.n	801558c <prvInitialiseTaskLists+0xc>
 80155ac:	480d      	ldr	r0, [pc, #52]	; (80155e4 <prvInitialiseTaskLists+0x64>)
 80155ae:	f7fe fa6d 	bl	8013a8c <vListInitialise>
 80155b2:	480d      	ldr	r0, [pc, #52]	; (80155e8 <prvInitialiseTaskLists+0x68>)
 80155b4:	f7fe fa6a 	bl	8013a8c <vListInitialise>
 80155b8:	480c      	ldr	r0, [pc, #48]	; (80155ec <prvInitialiseTaskLists+0x6c>)
 80155ba:	f7fe fa67 	bl	8013a8c <vListInitialise>
 80155be:	480c      	ldr	r0, [pc, #48]	; (80155f0 <prvInitialiseTaskLists+0x70>)
 80155c0:	f7fe fa64 	bl	8013a8c <vListInitialise>
 80155c4:	480b      	ldr	r0, [pc, #44]	; (80155f4 <prvInitialiseTaskLists+0x74>)
 80155c6:	f7fe fa61 	bl	8013a8c <vListInitialise>
 80155ca:	4b0b      	ldr	r3, [pc, #44]	; (80155f8 <prvInitialiseTaskLists+0x78>)
 80155cc:	4a05      	ldr	r2, [pc, #20]	; (80155e4 <prvInitialiseTaskLists+0x64>)
 80155ce:	601a      	str	r2, [r3, #0]
 80155d0:	4b0a      	ldr	r3, [pc, #40]	; (80155fc <prvInitialiseTaskLists+0x7c>)
 80155d2:	4a05      	ldr	r2, [pc, #20]	; (80155e8 <prvInitialiseTaskLists+0x68>)
 80155d4:	601a      	str	r2, [r3, #0]
 80155d6:	bf00      	nop
 80155d8:	3708      	adds	r7, #8
 80155da:	46bd      	mov	sp, r7
 80155dc:	bd80      	pop	{r7, pc}
 80155de:	bf00      	nop
 80155e0:	24001810 	.word	0x24001810
 80155e4:	24001c70 	.word	0x24001c70
 80155e8:	24001c84 	.word	0x24001c84
 80155ec:	24001ca0 	.word	0x24001ca0
 80155f0:	24001cb4 	.word	0x24001cb4
 80155f4:	24001ccc 	.word	0x24001ccc
 80155f8:	24001c98 	.word	0x24001c98
 80155fc:	24001c9c 	.word	0x24001c9c

08015600 <prvCheckTasksWaitingTermination>:
 8015600:	b580      	push	{r7, lr}
 8015602:	b082      	sub	sp, #8
 8015604:	af00      	add	r7, sp, #0
 8015606:	e019      	b.n	801563c <prvCheckTasksWaitingTermination+0x3c>
 8015608:	f000 fe0c 	bl	8016224 <vPortEnterCritical>
 801560c:	4b10      	ldr	r3, [pc, #64]	; (8015650 <prvCheckTasksWaitingTermination+0x50>)
 801560e:	68db      	ldr	r3, [r3, #12]
 8015610:	68db      	ldr	r3, [r3, #12]
 8015612:	607b      	str	r3, [r7, #4]
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	3304      	adds	r3, #4
 8015618:	4618      	mov	r0, r3
 801561a:	f7fe fac1 	bl	8013ba0 <uxListRemove>
 801561e:	4b0d      	ldr	r3, [pc, #52]	; (8015654 <prvCheckTasksWaitingTermination+0x54>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	3b01      	subs	r3, #1
 8015624:	4a0b      	ldr	r2, [pc, #44]	; (8015654 <prvCheckTasksWaitingTermination+0x54>)
 8015626:	6013      	str	r3, [r2, #0]
 8015628:	4b0b      	ldr	r3, [pc, #44]	; (8015658 <prvCheckTasksWaitingTermination+0x58>)
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	3b01      	subs	r3, #1
 801562e:	4a0a      	ldr	r2, [pc, #40]	; (8015658 <prvCheckTasksWaitingTermination+0x58>)
 8015630:	6013      	str	r3, [r2, #0]
 8015632:	f000 fe27 	bl	8016284 <vPortExitCritical>
 8015636:	6878      	ldr	r0, [r7, #4]
 8015638:	f000 f810 	bl	801565c <prvDeleteTCB>
 801563c:	4b06      	ldr	r3, [pc, #24]	; (8015658 <prvCheckTasksWaitingTermination+0x58>)
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d1e1      	bne.n	8015608 <prvCheckTasksWaitingTermination+0x8>
 8015644:	bf00      	nop
 8015646:	bf00      	nop
 8015648:	3708      	adds	r7, #8
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}
 801564e:	bf00      	nop
 8015650:	24001cb4 	.word	0x24001cb4
 8015654:	24001ce0 	.word	0x24001ce0
 8015658:	24001cc8 	.word	0x24001cc8

0801565c <prvDeleteTCB>:
 801565c:	b580      	push	{r7, lr}
 801565e:	b084      	sub	sp, #16
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801566a:	2b00      	cmp	r3, #0
 801566c:	d108      	bne.n	8015680 <prvDeleteTCB+0x24>
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015672:	4618      	mov	r0, r3
 8015674:	f000 ffc4 	bl	8016600 <vPortFree>
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	f000 ffc1 	bl	8016600 <vPortFree>
 801567e:	e018      	b.n	80156b2 <prvDeleteTCB+0x56>
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015686:	2b01      	cmp	r3, #1
 8015688:	d103      	bne.n	8015692 <prvDeleteTCB+0x36>
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f000 ffb8 	bl	8016600 <vPortFree>
 8015690:	e00f      	b.n	80156b2 <prvDeleteTCB+0x56>
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015698:	2b02      	cmp	r3, #2
 801569a:	d00a      	beq.n	80156b2 <prvDeleteTCB+0x56>
 801569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156a0:	f383 8811 	msr	BASEPRI, r3
 80156a4:	f3bf 8f6f 	isb	sy
 80156a8:	f3bf 8f4f 	dsb	sy
 80156ac:	60fb      	str	r3, [r7, #12]
 80156ae:	bf00      	nop
 80156b0:	e7fe      	b.n	80156b0 <prvDeleteTCB+0x54>
 80156b2:	bf00      	nop
 80156b4:	3710      	adds	r7, #16
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}
	...

080156bc <prvResetNextTaskUnblockTime>:
 80156bc:	b480      	push	{r7}
 80156be:	b083      	sub	sp, #12
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	4b0c      	ldr	r3, [pc, #48]	; (80156f4 <prvResetNextTaskUnblockTime+0x38>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d104      	bne.n	80156d6 <prvResetNextTaskUnblockTime+0x1a>
 80156cc:	4b0a      	ldr	r3, [pc, #40]	; (80156f8 <prvResetNextTaskUnblockTime+0x3c>)
 80156ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80156d2:	601a      	str	r2, [r3, #0]
 80156d4:	e008      	b.n	80156e8 <prvResetNextTaskUnblockTime+0x2c>
 80156d6:	4b07      	ldr	r3, [pc, #28]	; (80156f4 <prvResetNextTaskUnblockTime+0x38>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	68db      	ldr	r3, [r3, #12]
 80156dc:	68db      	ldr	r3, [r3, #12]
 80156de:	607b      	str	r3, [r7, #4]
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	685b      	ldr	r3, [r3, #4]
 80156e4:	4a04      	ldr	r2, [pc, #16]	; (80156f8 <prvResetNextTaskUnblockTime+0x3c>)
 80156e6:	6013      	str	r3, [r2, #0]
 80156e8:	bf00      	nop
 80156ea:	370c      	adds	r7, #12
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr
 80156f4:	24001c98 	.word	0x24001c98
 80156f8:	24001d00 	.word	0x24001d00

080156fc <xTaskGetSchedulerState>:
 80156fc:	b480      	push	{r7}
 80156fe:	b083      	sub	sp, #12
 8015700:	af00      	add	r7, sp, #0
 8015702:	4b0b      	ldr	r3, [pc, #44]	; (8015730 <xTaskGetSchedulerState+0x34>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d102      	bne.n	8015710 <xTaskGetSchedulerState+0x14>
 801570a:	2301      	movs	r3, #1
 801570c:	607b      	str	r3, [r7, #4]
 801570e:	e008      	b.n	8015722 <xTaskGetSchedulerState+0x26>
 8015710:	4b08      	ldr	r3, [pc, #32]	; (8015734 <xTaskGetSchedulerState+0x38>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d102      	bne.n	801571e <xTaskGetSchedulerState+0x22>
 8015718:	2302      	movs	r3, #2
 801571a:	607b      	str	r3, [r7, #4]
 801571c:	e001      	b.n	8015722 <xTaskGetSchedulerState+0x26>
 801571e:	2300      	movs	r3, #0
 8015720:	607b      	str	r3, [r7, #4]
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	4618      	mov	r0, r3
 8015726:	370c      	adds	r7, #12
 8015728:	46bd      	mov	sp, r7
 801572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572e:	4770      	bx	lr
 8015730:	24001cec 	.word	0x24001cec
 8015734:	24001d08 	.word	0x24001d08

08015738 <xTaskPriorityDisinherit>:
 8015738:	b580      	push	{r7, lr}
 801573a:	b086      	sub	sp, #24
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	613b      	str	r3, [r7, #16]
 8015744:	2300      	movs	r3, #0
 8015746:	617b      	str	r3, [r7, #20]
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d056      	beq.n	80157fc <xTaskPriorityDisinherit+0xc4>
 801574e:	4b2e      	ldr	r3, [pc, #184]	; (8015808 <xTaskPriorityDisinherit+0xd0>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	693a      	ldr	r2, [r7, #16]
 8015754:	429a      	cmp	r2, r3
 8015756:	d00a      	beq.n	801576e <xTaskPriorityDisinherit+0x36>
 8015758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801575c:	f383 8811 	msr	BASEPRI, r3
 8015760:	f3bf 8f6f 	isb	sy
 8015764:	f3bf 8f4f 	dsb	sy
 8015768:	60fb      	str	r3, [r7, #12]
 801576a:	bf00      	nop
 801576c:	e7fe      	b.n	801576c <xTaskPriorityDisinherit+0x34>
 801576e:	693b      	ldr	r3, [r7, #16]
 8015770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015772:	2b00      	cmp	r3, #0
 8015774:	d10a      	bne.n	801578c <xTaskPriorityDisinherit+0x54>
 8015776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801577a:	f383 8811 	msr	BASEPRI, r3
 801577e:	f3bf 8f6f 	isb	sy
 8015782:	f3bf 8f4f 	dsb	sy
 8015786:	60bb      	str	r3, [r7, #8]
 8015788:	bf00      	nop
 801578a:	e7fe      	b.n	801578a <xTaskPriorityDisinherit+0x52>
 801578c:	693b      	ldr	r3, [r7, #16]
 801578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015790:	1e5a      	subs	r2, r3, #1
 8015792:	693b      	ldr	r3, [r7, #16]
 8015794:	651a      	str	r2, [r3, #80]	; 0x50
 8015796:	693b      	ldr	r3, [r7, #16]
 8015798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801579a:	693b      	ldr	r3, [r7, #16]
 801579c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801579e:	429a      	cmp	r2, r3
 80157a0:	d02c      	beq.n	80157fc <xTaskPriorityDisinherit+0xc4>
 80157a2:	693b      	ldr	r3, [r7, #16]
 80157a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d128      	bne.n	80157fc <xTaskPriorityDisinherit+0xc4>
 80157aa:	693b      	ldr	r3, [r7, #16]
 80157ac:	3304      	adds	r3, #4
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7fe f9f6 	bl	8013ba0 <uxListRemove>
 80157b4:	693b      	ldr	r3, [r7, #16]
 80157b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80157b8:	693b      	ldr	r3, [r7, #16]
 80157ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80157bc:	693b      	ldr	r3, [r7, #16]
 80157be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80157c4:	693b      	ldr	r3, [r7, #16]
 80157c6:	619a      	str	r2, [r3, #24]
 80157c8:	693b      	ldr	r3, [r7, #16]
 80157ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157cc:	4b0f      	ldr	r3, [pc, #60]	; (801580c <xTaskPriorityDisinherit+0xd4>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d903      	bls.n	80157dc <xTaskPriorityDisinherit+0xa4>
 80157d4:	693b      	ldr	r3, [r7, #16]
 80157d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157d8:	4a0c      	ldr	r2, [pc, #48]	; (801580c <xTaskPriorityDisinherit+0xd4>)
 80157da:	6013      	str	r3, [r2, #0]
 80157dc:	693b      	ldr	r3, [r7, #16]
 80157de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157e0:	4613      	mov	r3, r2
 80157e2:	009b      	lsls	r3, r3, #2
 80157e4:	4413      	add	r3, r2
 80157e6:	009b      	lsls	r3, r3, #2
 80157e8:	4a09      	ldr	r2, [pc, #36]	; (8015810 <xTaskPriorityDisinherit+0xd8>)
 80157ea:	441a      	add	r2, r3
 80157ec:	693b      	ldr	r3, [r7, #16]
 80157ee:	3304      	adds	r3, #4
 80157f0:	4619      	mov	r1, r3
 80157f2:	4610      	mov	r0, r2
 80157f4:	f7fe f977 	bl	8013ae6 <vListInsertEnd>
 80157f8:	2301      	movs	r3, #1
 80157fa:	617b      	str	r3, [r7, #20]
 80157fc:	697b      	ldr	r3, [r7, #20]
 80157fe:	4618      	mov	r0, r3
 8015800:	3718      	adds	r7, #24
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}
 8015806:	bf00      	nop
 8015808:	2400180c 	.word	0x2400180c
 801580c:	24001ce8 	.word	0x24001ce8
 8015810:	24001810 	.word	0x24001810

08015814 <uxTaskResetEventItemValue>:
 8015814:	b480      	push	{r7}
 8015816:	b083      	sub	sp, #12
 8015818:	af00      	add	r7, sp, #0
 801581a:	4b09      	ldr	r3, [pc, #36]	; (8015840 <uxTaskResetEventItemValue+0x2c>)
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	699b      	ldr	r3, [r3, #24]
 8015820:	607b      	str	r3, [r7, #4]
 8015822:	4b07      	ldr	r3, [pc, #28]	; (8015840 <uxTaskResetEventItemValue+0x2c>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015828:	4b05      	ldr	r3, [pc, #20]	; (8015840 <uxTaskResetEventItemValue+0x2c>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015830:	619a      	str	r2, [r3, #24]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	4618      	mov	r0, r3
 8015836:	370c      	adds	r7, #12
 8015838:	46bd      	mov	sp, r7
 801583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583e:	4770      	bx	lr
 8015840:	2400180c 	.word	0x2400180c

08015844 <prvAddCurrentTaskToDelayedList>:
 8015844:	b580      	push	{r7, lr}
 8015846:	b084      	sub	sp, #16
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	6039      	str	r1, [r7, #0]
 801584e:	4b21      	ldr	r3, [pc, #132]	; (80158d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	60fb      	str	r3, [r7, #12]
 8015854:	4b20      	ldr	r3, [pc, #128]	; (80158d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	3304      	adds	r3, #4
 801585a:	4618      	mov	r0, r3
 801585c:	f7fe f9a0 	bl	8013ba0 <uxListRemove>
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015866:	d10a      	bne.n	801587e <prvAddCurrentTaskToDelayedList+0x3a>
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d007      	beq.n	801587e <prvAddCurrentTaskToDelayedList+0x3a>
 801586e:	4b1a      	ldr	r3, [pc, #104]	; (80158d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	3304      	adds	r3, #4
 8015874:	4619      	mov	r1, r3
 8015876:	4819      	ldr	r0, [pc, #100]	; (80158dc <prvAddCurrentTaskToDelayedList+0x98>)
 8015878:	f7fe f935 	bl	8013ae6 <vListInsertEnd>
 801587c:	e026      	b.n	80158cc <prvAddCurrentTaskToDelayedList+0x88>
 801587e:	68fa      	ldr	r2, [r7, #12]
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	4413      	add	r3, r2
 8015884:	60bb      	str	r3, [r7, #8]
 8015886:	4b14      	ldr	r3, [pc, #80]	; (80158d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	68ba      	ldr	r2, [r7, #8]
 801588c:	605a      	str	r2, [r3, #4]
 801588e:	68ba      	ldr	r2, [r7, #8]
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	429a      	cmp	r2, r3
 8015894:	d209      	bcs.n	80158aa <prvAddCurrentTaskToDelayedList+0x66>
 8015896:	4b12      	ldr	r3, [pc, #72]	; (80158e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015898:	681a      	ldr	r2, [r3, #0]
 801589a:	4b0f      	ldr	r3, [pc, #60]	; (80158d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	3304      	adds	r3, #4
 80158a0:	4619      	mov	r1, r3
 80158a2:	4610      	mov	r0, r2
 80158a4:	f7fe f943 	bl	8013b2e <vListInsert>
 80158a8:	e010      	b.n	80158cc <prvAddCurrentTaskToDelayedList+0x88>
 80158aa:	4b0e      	ldr	r3, [pc, #56]	; (80158e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80158ac:	681a      	ldr	r2, [r3, #0]
 80158ae:	4b0a      	ldr	r3, [pc, #40]	; (80158d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	3304      	adds	r3, #4
 80158b4:	4619      	mov	r1, r3
 80158b6:	4610      	mov	r0, r2
 80158b8:	f7fe f939 	bl	8013b2e <vListInsert>
 80158bc:	4b0a      	ldr	r3, [pc, #40]	; (80158e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	68ba      	ldr	r2, [r7, #8]
 80158c2:	429a      	cmp	r2, r3
 80158c4:	d202      	bcs.n	80158cc <prvAddCurrentTaskToDelayedList+0x88>
 80158c6:	4a08      	ldr	r2, [pc, #32]	; (80158e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	6013      	str	r3, [r2, #0]
 80158cc:	bf00      	nop
 80158ce:	3710      	adds	r7, #16
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}
 80158d4:	24001ce4 	.word	0x24001ce4
 80158d8:	2400180c 	.word	0x2400180c
 80158dc:	24001ccc 	.word	0x24001ccc
 80158e0:	24001c9c 	.word	0x24001c9c
 80158e4:	24001c98 	.word	0x24001c98
 80158e8:	24001d00 	.word	0x24001d00

080158ec <xTimerCreateTimerTask>:
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b08a      	sub	sp, #40	; 0x28
 80158f0:	af04      	add	r7, sp, #16
 80158f2:	2300      	movs	r3, #0
 80158f4:	617b      	str	r3, [r7, #20]
 80158f6:	f000 fb07 	bl	8015f08 <prvCheckForValidListAndQueue>
 80158fa:	4b1c      	ldr	r3, [pc, #112]	; (801596c <xTimerCreateTimerTask+0x80>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d021      	beq.n	8015946 <xTimerCreateTimerTask+0x5a>
 8015902:	2300      	movs	r3, #0
 8015904:	60fb      	str	r3, [r7, #12]
 8015906:	2300      	movs	r3, #0
 8015908:	60bb      	str	r3, [r7, #8]
 801590a:	1d3a      	adds	r2, r7, #4
 801590c:	f107 0108 	add.w	r1, r7, #8
 8015910:	f107 030c 	add.w	r3, r7, #12
 8015914:	4618      	mov	r0, r3
 8015916:	f7fd fe33 	bl	8013580 <vApplicationGetTimerTaskMemory>
 801591a:	6879      	ldr	r1, [r7, #4]
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	68fa      	ldr	r2, [r7, #12]
 8015920:	9202      	str	r2, [sp, #8]
 8015922:	9301      	str	r3, [sp, #4]
 8015924:	2302      	movs	r3, #2
 8015926:	9300      	str	r3, [sp, #0]
 8015928:	2300      	movs	r3, #0
 801592a:	460a      	mov	r2, r1
 801592c:	4910      	ldr	r1, [pc, #64]	; (8015970 <xTimerCreateTimerTask+0x84>)
 801592e:	4811      	ldr	r0, [pc, #68]	; (8015974 <xTimerCreateTimerTask+0x88>)
 8015930:	f7fe ff06 	bl	8014740 <xTaskCreateStatic>
 8015934:	4603      	mov	r3, r0
 8015936:	4a10      	ldr	r2, [pc, #64]	; (8015978 <xTimerCreateTimerTask+0x8c>)
 8015938:	6013      	str	r3, [r2, #0]
 801593a:	4b0f      	ldr	r3, [pc, #60]	; (8015978 <xTimerCreateTimerTask+0x8c>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d001      	beq.n	8015946 <xTimerCreateTimerTask+0x5a>
 8015942:	2301      	movs	r3, #1
 8015944:	617b      	str	r3, [r7, #20]
 8015946:	697b      	ldr	r3, [r7, #20]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d10a      	bne.n	8015962 <xTimerCreateTimerTask+0x76>
 801594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015950:	f383 8811 	msr	BASEPRI, r3
 8015954:	f3bf 8f6f 	isb	sy
 8015958:	f3bf 8f4f 	dsb	sy
 801595c:	613b      	str	r3, [r7, #16]
 801595e:	bf00      	nop
 8015960:	e7fe      	b.n	8015960 <xTimerCreateTimerTask+0x74>
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	4618      	mov	r0, r3
 8015966:	3718      	adds	r7, #24
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}
 801596c:	24001d3c 	.word	0x24001d3c
 8015970:	08017550 	.word	0x08017550
 8015974:	08015ab1 	.word	0x08015ab1
 8015978:	24001d40 	.word	0x24001d40

0801597c <xTimerGenericCommand>:
 801597c:	b580      	push	{r7, lr}
 801597e:	b08a      	sub	sp, #40	; 0x28
 8015980:	af00      	add	r7, sp, #0
 8015982:	60f8      	str	r0, [r7, #12]
 8015984:	60b9      	str	r1, [r7, #8]
 8015986:	607a      	str	r2, [r7, #4]
 8015988:	603b      	str	r3, [r7, #0]
 801598a:	2300      	movs	r3, #0
 801598c:	627b      	str	r3, [r7, #36]	; 0x24
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d10a      	bne.n	80159aa <xTimerGenericCommand+0x2e>
 8015994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015998:	f383 8811 	msr	BASEPRI, r3
 801599c:	f3bf 8f6f 	isb	sy
 80159a0:	f3bf 8f4f 	dsb	sy
 80159a4:	623b      	str	r3, [r7, #32]
 80159a6:	bf00      	nop
 80159a8:	e7fe      	b.n	80159a8 <xTimerGenericCommand+0x2c>
 80159aa:	4b1a      	ldr	r3, [pc, #104]	; (8015a14 <xTimerGenericCommand+0x98>)
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d02a      	beq.n	8015a08 <xTimerGenericCommand+0x8c>
 80159b2:	68bb      	ldr	r3, [r7, #8]
 80159b4:	613b      	str	r3, [r7, #16]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	617b      	str	r3, [r7, #20]
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	61bb      	str	r3, [r7, #24]
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	2b05      	cmp	r3, #5
 80159c2:	dc18      	bgt.n	80159f6 <xTimerGenericCommand+0x7a>
 80159c4:	f7ff fe9a 	bl	80156fc <xTaskGetSchedulerState>
 80159c8:	4603      	mov	r3, r0
 80159ca:	2b02      	cmp	r3, #2
 80159cc:	d109      	bne.n	80159e2 <xTimerGenericCommand+0x66>
 80159ce:	4b11      	ldr	r3, [pc, #68]	; (8015a14 <xTimerGenericCommand+0x98>)
 80159d0:	6818      	ldr	r0, [r3, #0]
 80159d2:	f107 0110 	add.w	r1, r7, #16
 80159d6:	2300      	movs	r3, #0
 80159d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159da:	f7fe fa49 	bl	8013e70 <xQueueGenericSend>
 80159de:	6278      	str	r0, [r7, #36]	; 0x24
 80159e0:	e012      	b.n	8015a08 <xTimerGenericCommand+0x8c>
 80159e2:	4b0c      	ldr	r3, [pc, #48]	; (8015a14 <xTimerGenericCommand+0x98>)
 80159e4:	6818      	ldr	r0, [r3, #0]
 80159e6:	f107 0110 	add.w	r1, r7, #16
 80159ea:	2300      	movs	r3, #0
 80159ec:	2200      	movs	r2, #0
 80159ee:	f7fe fa3f 	bl	8013e70 <xQueueGenericSend>
 80159f2:	6278      	str	r0, [r7, #36]	; 0x24
 80159f4:	e008      	b.n	8015a08 <xTimerGenericCommand+0x8c>
 80159f6:	4b07      	ldr	r3, [pc, #28]	; (8015a14 <xTimerGenericCommand+0x98>)
 80159f8:	6818      	ldr	r0, [r3, #0]
 80159fa:	f107 0110 	add.w	r1, r7, #16
 80159fe:	2300      	movs	r3, #0
 8015a00:	683a      	ldr	r2, [r7, #0]
 8015a02:	f7fe fb33 	bl	801406c <xQueueGenericSendFromISR>
 8015a06:	6278      	str	r0, [r7, #36]	; 0x24
 8015a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3728      	adds	r7, #40	; 0x28
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
 8015a12:	bf00      	nop
 8015a14:	24001d3c 	.word	0x24001d3c

08015a18 <prvProcessExpiredTimer>:
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b088      	sub	sp, #32
 8015a1c:	af02      	add	r7, sp, #8
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	6039      	str	r1, [r7, #0]
 8015a22:	4b22      	ldr	r3, [pc, #136]	; (8015aac <prvProcessExpiredTimer+0x94>)
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	68db      	ldr	r3, [r3, #12]
 8015a28:	68db      	ldr	r3, [r3, #12]
 8015a2a:	617b      	str	r3, [r7, #20]
 8015a2c:	697b      	ldr	r3, [r7, #20]
 8015a2e:	3304      	adds	r3, #4
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7fe f8b5 	bl	8013ba0 <uxListRemove>
 8015a36:	697b      	ldr	r3, [r7, #20]
 8015a38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a3c:	f003 0304 	and.w	r3, r3, #4
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d022      	beq.n	8015a8a <prvProcessExpiredTimer+0x72>
 8015a44:	697b      	ldr	r3, [r7, #20]
 8015a46:	699a      	ldr	r2, [r3, #24]
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	18d1      	adds	r1, r2, r3
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	683a      	ldr	r2, [r7, #0]
 8015a50:	6978      	ldr	r0, [r7, #20]
 8015a52:	f000 f8d1 	bl	8015bf8 <prvInsertTimerInActiveList>
 8015a56:	4603      	mov	r3, r0
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d01f      	beq.n	8015a9c <prvProcessExpiredTimer+0x84>
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	9300      	str	r3, [sp, #0]
 8015a60:	2300      	movs	r3, #0
 8015a62:	687a      	ldr	r2, [r7, #4]
 8015a64:	2100      	movs	r1, #0
 8015a66:	6978      	ldr	r0, [r7, #20]
 8015a68:	f7ff ff88 	bl	801597c <xTimerGenericCommand>
 8015a6c:	6138      	str	r0, [r7, #16]
 8015a6e:	693b      	ldr	r3, [r7, #16]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d113      	bne.n	8015a9c <prvProcessExpiredTimer+0x84>
 8015a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a78:	f383 8811 	msr	BASEPRI, r3
 8015a7c:	f3bf 8f6f 	isb	sy
 8015a80:	f3bf 8f4f 	dsb	sy
 8015a84:	60fb      	str	r3, [r7, #12]
 8015a86:	bf00      	nop
 8015a88:	e7fe      	b.n	8015a88 <prvProcessExpiredTimer+0x70>
 8015a8a:	697b      	ldr	r3, [r7, #20]
 8015a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a90:	f023 0301 	bic.w	r3, r3, #1
 8015a94:	b2da      	uxtb	r2, r3
 8015a96:	697b      	ldr	r3, [r7, #20]
 8015a98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015a9c:	697b      	ldr	r3, [r7, #20]
 8015a9e:	6a1b      	ldr	r3, [r3, #32]
 8015aa0:	6978      	ldr	r0, [r7, #20]
 8015aa2:	4798      	blx	r3
 8015aa4:	bf00      	nop
 8015aa6:	3718      	adds	r7, #24
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	bd80      	pop	{r7, pc}
 8015aac:	24001d34 	.word	0x24001d34

08015ab0 <prvTimerTask>:
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b084      	sub	sp, #16
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
 8015ab8:	f107 0308 	add.w	r3, r7, #8
 8015abc:	4618      	mov	r0, r3
 8015abe:	f000 f857 	bl	8015b70 <prvGetNextExpireTime>
 8015ac2:	60f8      	str	r0, [r7, #12]
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	68f8      	ldr	r0, [r7, #12]
 8015aca:	f000 f803 	bl	8015ad4 <prvProcessTimerOrBlockTask>
 8015ace:	f000 f8d5 	bl	8015c7c <prvProcessReceivedCommands>
 8015ad2:	e7f1      	b.n	8015ab8 <prvTimerTask+0x8>

08015ad4 <prvProcessTimerOrBlockTask>:
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b084      	sub	sp, #16
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
 8015adc:	6039      	str	r1, [r7, #0]
 8015ade:	f7ff f985 	bl	8014dec <vTaskSuspendAll>
 8015ae2:	f107 0308 	add.w	r3, r7, #8
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f000 f866 	bl	8015bb8 <prvSampleTimeNow>
 8015aec:	60f8      	str	r0, [r7, #12]
 8015aee:	68bb      	ldr	r3, [r7, #8]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d130      	bne.n	8015b56 <prvProcessTimerOrBlockTask+0x82>
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d10a      	bne.n	8015b10 <prvProcessTimerOrBlockTask+0x3c>
 8015afa:	687a      	ldr	r2, [r7, #4]
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	429a      	cmp	r2, r3
 8015b00:	d806      	bhi.n	8015b10 <prvProcessTimerOrBlockTask+0x3c>
 8015b02:	f7ff f981 	bl	8014e08 <xTaskResumeAll>
 8015b06:	68f9      	ldr	r1, [r7, #12]
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f7ff ff85 	bl	8015a18 <prvProcessExpiredTimer>
 8015b0e:	e024      	b.n	8015b5a <prvProcessTimerOrBlockTask+0x86>
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d008      	beq.n	8015b28 <prvProcessTimerOrBlockTask+0x54>
 8015b16:	4b13      	ldr	r3, [pc, #76]	; (8015b64 <prvProcessTimerOrBlockTask+0x90>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d101      	bne.n	8015b24 <prvProcessTimerOrBlockTask+0x50>
 8015b20:	2301      	movs	r3, #1
 8015b22:	e000      	b.n	8015b26 <prvProcessTimerOrBlockTask+0x52>
 8015b24:	2300      	movs	r3, #0
 8015b26:	603b      	str	r3, [r7, #0]
 8015b28:	4b0f      	ldr	r3, [pc, #60]	; (8015b68 <prvProcessTimerOrBlockTask+0x94>)
 8015b2a:	6818      	ldr	r0, [r3, #0]
 8015b2c:	687a      	ldr	r2, [r7, #4]
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	1ad3      	subs	r3, r2, r3
 8015b32:	683a      	ldr	r2, [r7, #0]
 8015b34:	4619      	mov	r1, r3
 8015b36:	f7fe fdcf 	bl	80146d8 <vQueueWaitForMessageRestricted>
 8015b3a:	f7ff f965 	bl	8014e08 <xTaskResumeAll>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d10a      	bne.n	8015b5a <prvProcessTimerOrBlockTask+0x86>
 8015b44:	4b09      	ldr	r3, [pc, #36]	; (8015b6c <prvProcessTimerOrBlockTask+0x98>)
 8015b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b4a:	601a      	str	r2, [r3, #0]
 8015b4c:	f3bf 8f4f 	dsb	sy
 8015b50:	f3bf 8f6f 	isb	sy
 8015b54:	e001      	b.n	8015b5a <prvProcessTimerOrBlockTask+0x86>
 8015b56:	f7ff f957 	bl	8014e08 <xTaskResumeAll>
 8015b5a:	bf00      	nop
 8015b5c:	3710      	adds	r7, #16
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}
 8015b62:	bf00      	nop
 8015b64:	24001d38 	.word	0x24001d38
 8015b68:	24001d3c 	.word	0x24001d3c
 8015b6c:	e000ed04 	.word	0xe000ed04

08015b70 <prvGetNextExpireTime>:
 8015b70:	b480      	push	{r7}
 8015b72:	b085      	sub	sp, #20
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	4b0e      	ldr	r3, [pc, #56]	; (8015bb4 <prvGetNextExpireTime+0x44>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d101      	bne.n	8015b86 <prvGetNextExpireTime+0x16>
 8015b82:	2201      	movs	r2, #1
 8015b84:	e000      	b.n	8015b88 <prvGetNextExpireTime+0x18>
 8015b86:	2200      	movs	r2, #0
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	601a      	str	r2, [r3, #0]
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d105      	bne.n	8015ba0 <prvGetNextExpireTime+0x30>
 8015b94:	4b07      	ldr	r3, [pc, #28]	; (8015bb4 <prvGetNextExpireTime+0x44>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	68db      	ldr	r3, [r3, #12]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	60fb      	str	r3, [r7, #12]
 8015b9e:	e001      	b.n	8015ba4 <prvGetNextExpireTime+0x34>
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	60fb      	str	r3, [r7, #12]
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3714      	adds	r7, #20
 8015baa:	46bd      	mov	sp, r7
 8015bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb0:	4770      	bx	lr
 8015bb2:	bf00      	nop
 8015bb4:	24001d34 	.word	0x24001d34

08015bb8 <prvSampleTimeNow>:
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b084      	sub	sp, #16
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
 8015bc0:	f7ff f9c0 	bl	8014f44 <xTaskGetTickCount>
 8015bc4:	60f8      	str	r0, [r7, #12]
 8015bc6:	4b0b      	ldr	r3, [pc, #44]	; (8015bf4 <prvSampleTimeNow+0x3c>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	68fa      	ldr	r2, [r7, #12]
 8015bcc:	429a      	cmp	r2, r3
 8015bce:	d205      	bcs.n	8015bdc <prvSampleTimeNow+0x24>
 8015bd0:	f000 f936 	bl	8015e40 <prvSwitchTimerLists>
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2201      	movs	r2, #1
 8015bd8:	601a      	str	r2, [r3, #0]
 8015bda:	e002      	b.n	8015be2 <prvSampleTimeNow+0x2a>
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	2200      	movs	r2, #0
 8015be0:	601a      	str	r2, [r3, #0]
 8015be2:	4a04      	ldr	r2, [pc, #16]	; (8015bf4 <prvSampleTimeNow+0x3c>)
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	6013      	str	r3, [r2, #0]
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	4618      	mov	r0, r3
 8015bec:	3710      	adds	r7, #16
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}
 8015bf2:	bf00      	nop
 8015bf4:	24001d44 	.word	0x24001d44

08015bf8 <prvInsertTimerInActiveList>:
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b086      	sub	sp, #24
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	60f8      	str	r0, [r7, #12]
 8015c00:	60b9      	str	r1, [r7, #8]
 8015c02:	607a      	str	r2, [r7, #4]
 8015c04:	603b      	str	r3, [r7, #0]
 8015c06:	2300      	movs	r3, #0
 8015c08:	617b      	str	r3, [r7, #20]
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	68ba      	ldr	r2, [r7, #8]
 8015c0e:	605a      	str	r2, [r3, #4]
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	68fa      	ldr	r2, [r7, #12]
 8015c14:	611a      	str	r2, [r3, #16]
 8015c16:	68ba      	ldr	r2, [r7, #8]
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d812      	bhi.n	8015c44 <prvInsertTimerInActiveList+0x4c>
 8015c1e:	687a      	ldr	r2, [r7, #4]
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	1ad2      	subs	r2, r2, r3
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	699b      	ldr	r3, [r3, #24]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d302      	bcc.n	8015c32 <prvInsertTimerInActiveList+0x3a>
 8015c2c:	2301      	movs	r3, #1
 8015c2e:	617b      	str	r3, [r7, #20]
 8015c30:	e01b      	b.n	8015c6a <prvInsertTimerInActiveList+0x72>
 8015c32:	4b10      	ldr	r3, [pc, #64]	; (8015c74 <prvInsertTimerInActiveList+0x7c>)
 8015c34:	681a      	ldr	r2, [r3, #0]
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	3304      	adds	r3, #4
 8015c3a:	4619      	mov	r1, r3
 8015c3c:	4610      	mov	r0, r2
 8015c3e:	f7fd ff76 	bl	8013b2e <vListInsert>
 8015c42:	e012      	b.n	8015c6a <prvInsertTimerInActiveList+0x72>
 8015c44:	687a      	ldr	r2, [r7, #4]
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d206      	bcs.n	8015c5a <prvInsertTimerInActiveList+0x62>
 8015c4c:	68ba      	ldr	r2, [r7, #8]
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	429a      	cmp	r2, r3
 8015c52:	d302      	bcc.n	8015c5a <prvInsertTimerInActiveList+0x62>
 8015c54:	2301      	movs	r3, #1
 8015c56:	617b      	str	r3, [r7, #20]
 8015c58:	e007      	b.n	8015c6a <prvInsertTimerInActiveList+0x72>
 8015c5a:	4b07      	ldr	r3, [pc, #28]	; (8015c78 <prvInsertTimerInActiveList+0x80>)
 8015c5c:	681a      	ldr	r2, [r3, #0]
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	3304      	adds	r3, #4
 8015c62:	4619      	mov	r1, r3
 8015c64:	4610      	mov	r0, r2
 8015c66:	f7fd ff62 	bl	8013b2e <vListInsert>
 8015c6a:	697b      	ldr	r3, [r7, #20]
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	3718      	adds	r7, #24
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd80      	pop	{r7, pc}
 8015c74:	24001d38 	.word	0x24001d38
 8015c78:	24001d34 	.word	0x24001d34

08015c7c <prvProcessReceivedCommands>:
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b08e      	sub	sp, #56	; 0x38
 8015c80:	af02      	add	r7, sp, #8
 8015c82:	e0ca      	b.n	8015e1a <prvProcessReceivedCommands+0x19e>
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	da18      	bge.n	8015cbc <prvProcessReceivedCommands+0x40>
 8015c8a:	1d3b      	adds	r3, r7, #4
 8015c8c:	3304      	adds	r3, #4
 8015c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d10a      	bne.n	8015cac <prvProcessReceivedCommands+0x30>
 8015c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c9a:	f383 8811 	msr	BASEPRI, r3
 8015c9e:	f3bf 8f6f 	isb	sy
 8015ca2:	f3bf 8f4f 	dsb	sy
 8015ca6:	61fb      	str	r3, [r7, #28]
 8015ca8:	bf00      	nop
 8015caa:	e7fe      	b.n	8015caa <prvProcessReceivedCommands+0x2e>
 8015cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cb2:	6850      	ldr	r0, [r2, #4]
 8015cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cb6:	6892      	ldr	r2, [r2, #8]
 8015cb8:	4611      	mov	r1, r2
 8015cba:	4798      	blx	r3
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	f2c0 80aa 	blt.w	8015e18 <prvProcessReceivedCommands+0x19c>
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8015cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cca:	695b      	ldr	r3, [r3, #20]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d004      	beq.n	8015cda <prvProcessReceivedCommands+0x5e>
 8015cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd2:	3304      	adds	r3, #4
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7fd ff63 	bl	8013ba0 <uxListRemove>
 8015cda:	463b      	mov	r3, r7
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f7ff ff6b 	bl	8015bb8 <prvSampleTimeNow>
 8015ce2:	6278      	str	r0, [r7, #36]	; 0x24
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2b09      	cmp	r3, #9
 8015ce8:	f200 8097 	bhi.w	8015e1a <prvProcessReceivedCommands+0x19e>
 8015cec:	a201      	add	r2, pc, #4	; (adr r2, 8015cf4 <prvProcessReceivedCommands+0x78>)
 8015cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cf2:	bf00      	nop
 8015cf4:	08015d1d 	.word	0x08015d1d
 8015cf8:	08015d1d 	.word	0x08015d1d
 8015cfc:	08015d1d 	.word	0x08015d1d
 8015d00:	08015d91 	.word	0x08015d91
 8015d04:	08015da5 	.word	0x08015da5
 8015d08:	08015def 	.word	0x08015def
 8015d0c:	08015d1d 	.word	0x08015d1d
 8015d10:	08015d1d 	.word	0x08015d1d
 8015d14:	08015d91 	.word	0x08015d91
 8015d18:	08015da5 	.word	0x08015da5
 8015d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d22:	f043 0301 	orr.w	r3, r3, #1
 8015d26:	b2da      	uxtb	r2, r3
 8015d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015d2e:	68ba      	ldr	r2, [r7, #8]
 8015d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d32:	699b      	ldr	r3, [r3, #24]
 8015d34:	18d1      	adds	r1, r2, r3
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d3c:	f7ff ff5c 	bl	8015bf8 <prvInsertTimerInActiveList>
 8015d40:	4603      	mov	r3, r0
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d069      	beq.n	8015e1a <prvProcessReceivedCommands+0x19e>
 8015d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d48:	6a1b      	ldr	r3, [r3, #32]
 8015d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d4c:	4798      	blx	r3
 8015d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d54:	f003 0304 	and.w	r3, r3, #4
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d05e      	beq.n	8015e1a <prvProcessReceivedCommands+0x19e>
 8015d5c:	68ba      	ldr	r2, [r7, #8]
 8015d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d60:	699b      	ldr	r3, [r3, #24]
 8015d62:	441a      	add	r2, r3
 8015d64:	2300      	movs	r3, #0
 8015d66:	9300      	str	r3, [sp, #0]
 8015d68:	2300      	movs	r3, #0
 8015d6a:	2100      	movs	r1, #0
 8015d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d6e:	f7ff fe05 	bl	801597c <xTimerGenericCommand>
 8015d72:	6238      	str	r0, [r7, #32]
 8015d74:	6a3b      	ldr	r3, [r7, #32]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d14f      	bne.n	8015e1a <prvProcessReceivedCommands+0x19e>
 8015d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d7e:	f383 8811 	msr	BASEPRI, r3
 8015d82:	f3bf 8f6f 	isb	sy
 8015d86:	f3bf 8f4f 	dsb	sy
 8015d8a:	61bb      	str	r3, [r7, #24]
 8015d8c:	bf00      	nop
 8015d8e:	e7fe      	b.n	8015d8e <prvProcessReceivedCommands+0x112>
 8015d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d96:	f023 0301 	bic.w	r3, r3, #1
 8015d9a:	b2da      	uxtb	r2, r3
 8015d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015da2:	e03a      	b.n	8015e1a <prvProcessReceivedCommands+0x19e>
 8015da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015daa:	f043 0301 	orr.w	r3, r3, #1
 8015dae:	b2da      	uxtb	r2, r3
 8015db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015db6:	68ba      	ldr	r2, [r7, #8]
 8015db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dba:	619a      	str	r2, [r3, #24]
 8015dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dbe:	699b      	ldr	r3, [r3, #24]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d10a      	bne.n	8015dda <prvProcessReceivedCommands+0x15e>
 8015dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dc8:	f383 8811 	msr	BASEPRI, r3
 8015dcc:	f3bf 8f6f 	isb	sy
 8015dd0:	f3bf 8f4f 	dsb	sy
 8015dd4:	617b      	str	r3, [r7, #20]
 8015dd6:	bf00      	nop
 8015dd8:	e7fe      	b.n	8015dd8 <prvProcessReceivedCommands+0x15c>
 8015dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ddc:	699a      	ldr	r2, [r3, #24]
 8015dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de0:	18d1      	adds	r1, r2, r3
 8015de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015de8:	f7ff ff06 	bl	8015bf8 <prvInsertTimerInActiveList>
 8015dec:	e015      	b.n	8015e1a <prvProcessReceivedCommands+0x19e>
 8015dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015df4:	f003 0302 	and.w	r3, r3, #2
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d103      	bne.n	8015e04 <prvProcessReceivedCommands+0x188>
 8015dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015dfe:	f000 fbff 	bl	8016600 <vPortFree>
 8015e02:	e00a      	b.n	8015e1a <prvProcessReceivedCommands+0x19e>
 8015e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e0a:	f023 0301 	bic.w	r3, r3, #1
 8015e0e:	b2da      	uxtb	r2, r3
 8015e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015e16:	e000      	b.n	8015e1a <prvProcessReceivedCommands+0x19e>
 8015e18:	bf00      	nop
 8015e1a:	4b08      	ldr	r3, [pc, #32]	; (8015e3c <prvProcessReceivedCommands+0x1c0>)
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	1d39      	adds	r1, r7, #4
 8015e20:	2200      	movs	r2, #0
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7fe f9be 	bl	80141a4 <xQueueReceive>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	f47f af2a 	bne.w	8015c84 <prvProcessReceivedCommands+0x8>
 8015e30:	bf00      	nop
 8015e32:	bf00      	nop
 8015e34:	3730      	adds	r7, #48	; 0x30
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}
 8015e3a:	bf00      	nop
 8015e3c:	24001d3c 	.word	0x24001d3c

08015e40 <prvSwitchTimerLists>:
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b088      	sub	sp, #32
 8015e44:	af02      	add	r7, sp, #8
 8015e46:	e048      	b.n	8015eda <prvSwitchTimerLists+0x9a>
 8015e48:	4b2d      	ldr	r3, [pc, #180]	; (8015f00 <prvSwitchTimerLists+0xc0>)
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	68db      	ldr	r3, [r3, #12]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	613b      	str	r3, [r7, #16]
 8015e52:	4b2b      	ldr	r3, [pc, #172]	; (8015f00 <prvSwitchTimerLists+0xc0>)
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	68db      	ldr	r3, [r3, #12]
 8015e58:	68db      	ldr	r3, [r3, #12]
 8015e5a:	60fb      	str	r3, [r7, #12]
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	3304      	adds	r3, #4
 8015e60:	4618      	mov	r0, r3
 8015e62:	f7fd fe9d 	bl	8013ba0 <uxListRemove>
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	6a1b      	ldr	r3, [r3, #32]
 8015e6a:	68f8      	ldr	r0, [r7, #12]
 8015e6c:	4798      	blx	r3
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e74:	f003 0304 	and.w	r3, r3, #4
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d02e      	beq.n	8015eda <prvSwitchTimerLists+0x9a>
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	699b      	ldr	r3, [r3, #24]
 8015e80:	693a      	ldr	r2, [r7, #16]
 8015e82:	4413      	add	r3, r2
 8015e84:	60bb      	str	r3, [r7, #8]
 8015e86:	68ba      	ldr	r2, [r7, #8]
 8015e88:	693b      	ldr	r3, [r7, #16]
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	d90e      	bls.n	8015eac <prvSwitchTimerLists+0x6c>
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	68ba      	ldr	r2, [r7, #8]
 8015e92:	605a      	str	r2, [r3, #4]
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	68fa      	ldr	r2, [r7, #12]
 8015e98:	611a      	str	r2, [r3, #16]
 8015e9a:	4b19      	ldr	r3, [pc, #100]	; (8015f00 <prvSwitchTimerLists+0xc0>)
 8015e9c:	681a      	ldr	r2, [r3, #0]
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	3304      	adds	r3, #4
 8015ea2:	4619      	mov	r1, r3
 8015ea4:	4610      	mov	r0, r2
 8015ea6:	f7fd fe42 	bl	8013b2e <vListInsert>
 8015eaa:	e016      	b.n	8015eda <prvSwitchTimerLists+0x9a>
 8015eac:	2300      	movs	r3, #0
 8015eae:	9300      	str	r3, [sp, #0]
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	693a      	ldr	r2, [r7, #16]
 8015eb4:	2100      	movs	r1, #0
 8015eb6:	68f8      	ldr	r0, [r7, #12]
 8015eb8:	f7ff fd60 	bl	801597c <xTimerGenericCommand>
 8015ebc:	6078      	str	r0, [r7, #4]
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d10a      	bne.n	8015eda <prvSwitchTimerLists+0x9a>
 8015ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ec8:	f383 8811 	msr	BASEPRI, r3
 8015ecc:	f3bf 8f6f 	isb	sy
 8015ed0:	f3bf 8f4f 	dsb	sy
 8015ed4:	603b      	str	r3, [r7, #0]
 8015ed6:	bf00      	nop
 8015ed8:	e7fe      	b.n	8015ed8 <prvSwitchTimerLists+0x98>
 8015eda:	4b09      	ldr	r3, [pc, #36]	; (8015f00 <prvSwitchTimerLists+0xc0>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d1b1      	bne.n	8015e48 <prvSwitchTimerLists+0x8>
 8015ee4:	4b06      	ldr	r3, [pc, #24]	; (8015f00 <prvSwitchTimerLists+0xc0>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	617b      	str	r3, [r7, #20]
 8015eea:	4b06      	ldr	r3, [pc, #24]	; (8015f04 <prvSwitchTimerLists+0xc4>)
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	4a04      	ldr	r2, [pc, #16]	; (8015f00 <prvSwitchTimerLists+0xc0>)
 8015ef0:	6013      	str	r3, [r2, #0]
 8015ef2:	4a04      	ldr	r2, [pc, #16]	; (8015f04 <prvSwitchTimerLists+0xc4>)
 8015ef4:	697b      	ldr	r3, [r7, #20]
 8015ef6:	6013      	str	r3, [r2, #0]
 8015ef8:	bf00      	nop
 8015efa:	3718      	adds	r7, #24
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bd80      	pop	{r7, pc}
 8015f00:	24001d34 	.word	0x24001d34
 8015f04:	24001d38 	.word	0x24001d38

08015f08 <prvCheckForValidListAndQueue>:
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af02      	add	r7, sp, #8
 8015f0e:	f000 f989 	bl	8016224 <vPortEnterCritical>
 8015f12:	4b15      	ldr	r3, [pc, #84]	; (8015f68 <prvCheckForValidListAndQueue+0x60>)
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d120      	bne.n	8015f5c <prvCheckForValidListAndQueue+0x54>
 8015f1a:	4814      	ldr	r0, [pc, #80]	; (8015f6c <prvCheckForValidListAndQueue+0x64>)
 8015f1c:	f7fd fdb6 	bl	8013a8c <vListInitialise>
 8015f20:	4813      	ldr	r0, [pc, #76]	; (8015f70 <prvCheckForValidListAndQueue+0x68>)
 8015f22:	f7fd fdb3 	bl	8013a8c <vListInitialise>
 8015f26:	4b13      	ldr	r3, [pc, #76]	; (8015f74 <prvCheckForValidListAndQueue+0x6c>)
 8015f28:	4a10      	ldr	r2, [pc, #64]	; (8015f6c <prvCheckForValidListAndQueue+0x64>)
 8015f2a:	601a      	str	r2, [r3, #0]
 8015f2c:	4b12      	ldr	r3, [pc, #72]	; (8015f78 <prvCheckForValidListAndQueue+0x70>)
 8015f2e:	4a10      	ldr	r2, [pc, #64]	; (8015f70 <prvCheckForValidListAndQueue+0x68>)
 8015f30:	601a      	str	r2, [r3, #0]
 8015f32:	2300      	movs	r3, #0
 8015f34:	9300      	str	r3, [sp, #0]
 8015f36:	4b11      	ldr	r3, [pc, #68]	; (8015f7c <prvCheckForValidListAndQueue+0x74>)
 8015f38:	4a11      	ldr	r2, [pc, #68]	; (8015f80 <prvCheckForValidListAndQueue+0x78>)
 8015f3a:	2110      	movs	r1, #16
 8015f3c:	200a      	movs	r0, #10
 8015f3e:	f7fd fec1 	bl	8013cc4 <xQueueGenericCreateStatic>
 8015f42:	4603      	mov	r3, r0
 8015f44:	4a08      	ldr	r2, [pc, #32]	; (8015f68 <prvCheckForValidListAndQueue+0x60>)
 8015f46:	6013      	str	r3, [r2, #0]
 8015f48:	4b07      	ldr	r3, [pc, #28]	; (8015f68 <prvCheckForValidListAndQueue+0x60>)
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d005      	beq.n	8015f5c <prvCheckForValidListAndQueue+0x54>
 8015f50:	4b05      	ldr	r3, [pc, #20]	; (8015f68 <prvCheckForValidListAndQueue+0x60>)
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	490b      	ldr	r1, [pc, #44]	; (8015f84 <prvCheckForValidListAndQueue+0x7c>)
 8015f56:	4618      	mov	r0, r3
 8015f58:	f7fe fb94 	bl	8014684 <vQueueAddToRegistry>
 8015f5c:	f000 f992 	bl	8016284 <vPortExitCritical>
 8015f60:	bf00      	nop
 8015f62:	46bd      	mov	sp, r7
 8015f64:	bd80      	pop	{r7, pc}
 8015f66:	bf00      	nop
 8015f68:	24001d3c 	.word	0x24001d3c
 8015f6c:	24001d0c 	.word	0x24001d0c
 8015f70:	24001d20 	.word	0x24001d20
 8015f74:	24001d34 	.word	0x24001d34
 8015f78:	24001d38 	.word	0x24001d38
 8015f7c:	24001de8 	.word	0x24001de8
 8015f80:	24001d48 	.word	0x24001d48
 8015f84:	08017558 	.word	0x08017558

08015f88 <xTimerPendFunctionCallFromISR>:
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b08a      	sub	sp, #40	; 0x28
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	60f8      	str	r0, [r7, #12]
 8015f90:	60b9      	str	r1, [r7, #8]
 8015f92:	607a      	str	r2, [r7, #4]
 8015f94:	603b      	str	r3, [r7, #0]
 8015f96:	f06f 0301 	mvn.w	r3, #1
 8015f9a:	617b      	str	r3, [r7, #20]
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	61bb      	str	r3, [r7, #24]
 8015fa0:	68bb      	ldr	r3, [r7, #8]
 8015fa2:	61fb      	str	r3, [r7, #28]
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	623b      	str	r3, [r7, #32]
 8015fa8:	4b06      	ldr	r3, [pc, #24]	; (8015fc4 <xTimerPendFunctionCallFromISR+0x3c>)
 8015faa:	6818      	ldr	r0, [r3, #0]
 8015fac:	f107 0114 	add.w	r1, r7, #20
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	683a      	ldr	r2, [r7, #0]
 8015fb4:	f7fe f85a 	bl	801406c <xQueueGenericSendFromISR>
 8015fb8:	6278      	str	r0, [r7, #36]	; 0x24
 8015fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	3728      	adds	r7, #40	; 0x28
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}
 8015fc4:	24001d3c 	.word	0x24001d3c

08015fc8 <pxPortInitialiseStack>:
 8015fc8:	b480      	push	{r7}
 8015fca:	b085      	sub	sp, #20
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	60f8      	str	r0, [r7, #12]
 8015fd0:	60b9      	str	r1, [r7, #8]
 8015fd2:	607a      	str	r2, [r7, #4]
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	3b04      	subs	r3, #4
 8015fd8:	60fb      	str	r3, [r7, #12]
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015fe0:	601a      	str	r2, [r3, #0]
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	3b04      	subs	r3, #4
 8015fe6:	60fb      	str	r3, [r7, #12]
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	f023 0201 	bic.w	r2, r3, #1
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	601a      	str	r2, [r3, #0]
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	3b04      	subs	r3, #4
 8015ff6:	60fb      	str	r3, [r7, #12]
 8015ff8:	4a0c      	ldr	r2, [pc, #48]	; (801602c <pxPortInitialiseStack+0x64>)
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	601a      	str	r2, [r3, #0]
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	3b14      	subs	r3, #20
 8016002:	60fb      	str	r3, [r7, #12]
 8016004:	687a      	ldr	r2, [r7, #4]
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	601a      	str	r2, [r3, #0]
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	3b04      	subs	r3, #4
 801600e:	60fb      	str	r3, [r7, #12]
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	f06f 0202 	mvn.w	r2, #2
 8016016:	601a      	str	r2, [r3, #0]
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	3b20      	subs	r3, #32
 801601c:	60fb      	str	r3, [r7, #12]
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	4618      	mov	r0, r3
 8016022:	3714      	adds	r7, #20
 8016024:	46bd      	mov	sp, r7
 8016026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602a:	4770      	bx	lr
 801602c:	08016031 	.word	0x08016031

08016030 <prvTaskExitError>:
 8016030:	b480      	push	{r7}
 8016032:	b085      	sub	sp, #20
 8016034:	af00      	add	r7, sp, #0
 8016036:	2300      	movs	r3, #0
 8016038:	607b      	str	r3, [r7, #4]
 801603a:	4b12      	ldr	r3, [pc, #72]	; (8016084 <prvTaskExitError+0x54>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016042:	d00a      	beq.n	801605a <prvTaskExitError+0x2a>
 8016044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016048:	f383 8811 	msr	BASEPRI, r3
 801604c:	f3bf 8f6f 	isb	sy
 8016050:	f3bf 8f4f 	dsb	sy
 8016054:	60fb      	str	r3, [r7, #12]
 8016056:	bf00      	nop
 8016058:	e7fe      	b.n	8016058 <prvTaskExitError+0x28>
 801605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801605e:	f383 8811 	msr	BASEPRI, r3
 8016062:	f3bf 8f6f 	isb	sy
 8016066:	f3bf 8f4f 	dsb	sy
 801606a:	60bb      	str	r3, [r7, #8]
 801606c:	bf00      	nop
 801606e:	bf00      	nop
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d0fc      	beq.n	8016070 <prvTaskExitError+0x40>
 8016076:	bf00      	nop
 8016078:	bf00      	nop
 801607a:	3714      	adds	r7, #20
 801607c:	46bd      	mov	sp, r7
 801607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016082:	4770      	bx	lr
 8016084:	240000a0 	.word	0x240000a0
	...

08016090 <SVC_Handler>:
 8016090:	4b07      	ldr	r3, [pc, #28]	; (80160b0 <pxCurrentTCBConst2>)
 8016092:	6819      	ldr	r1, [r3, #0]
 8016094:	6808      	ldr	r0, [r1, #0]
 8016096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801609a:	f380 8809 	msr	PSP, r0
 801609e:	f3bf 8f6f 	isb	sy
 80160a2:	f04f 0000 	mov.w	r0, #0
 80160a6:	f380 8811 	msr	BASEPRI, r0
 80160aa:	4770      	bx	lr
 80160ac:	f3af 8000 	nop.w

080160b0 <pxCurrentTCBConst2>:
 80160b0:	2400180c 	.word	0x2400180c
 80160b4:	bf00      	nop
 80160b6:	bf00      	nop

080160b8 <prvPortStartFirstTask>:
 80160b8:	4808      	ldr	r0, [pc, #32]	; (80160dc <prvPortStartFirstTask+0x24>)
 80160ba:	6800      	ldr	r0, [r0, #0]
 80160bc:	6800      	ldr	r0, [r0, #0]
 80160be:	f380 8808 	msr	MSP, r0
 80160c2:	f04f 0000 	mov.w	r0, #0
 80160c6:	f380 8814 	msr	CONTROL, r0
 80160ca:	b662      	cpsie	i
 80160cc:	b661      	cpsie	f
 80160ce:	f3bf 8f4f 	dsb	sy
 80160d2:	f3bf 8f6f 	isb	sy
 80160d6:	df00      	svc	0
 80160d8:	bf00      	nop
 80160da:	bf00      	nop
 80160dc:	e000ed08 	.word	0xe000ed08

080160e0 <xPortStartScheduler>:
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b086      	sub	sp, #24
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	4b46      	ldr	r3, [pc, #280]	; (8016200 <xPortStartScheduler+0x120>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	4a46      	ldr	r2, [pc, #280]	; (8016204 <xPortStartScheduler+0x124>)
 80160ec:	4293      	cmp	r3, r2
 80160ee:	d10a      	bne.n	8016106 <xPortStartScheduler+0x26>
 80160f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160f4:	f383 8811 	msr	BASEPRI, r3
 80160f8:	f3bf 8f6f 	isb	sy
 80160fc:	f3bf 8f4f 	dsb	sy
 8016100:	613b      	str	r3, [r7, #16]
 8016102:	bf00      	nop
 8016104:	e7fe      	b.n	8016104 <xPortStartScheduler+0x24>
 8016106:	4b3e      	ldr	r3, [pc, #248]	; (8016200 <xPortStartScheduler+0x120>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	4a3f      	ldr	r2, [pc, #252]	; (8016208 <xPortStartScheduler+0x128>)
 801610c:	4293      	cmp	r3, r2
 801610e:	d10a      	bne.n	8016126 <xPortStartScheduler+0x46>
 8016110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016114:	f383 8811 	msr	BASEPRI, r3
 8016118:	f3bf 8f6f 	isb	sy
 801611c:	f3bf 8f4f 	dsb	sy
 8016120:	60fb      	str	r3, [r7, #12]
 8016122:	bf00      	nop
 8016124:	e7fe      	b.n	8016124 <xPortStartScheduler+0x44>
 8016126:	4b39      	ldr	r3, [pc, #228]	; (801620c <xPortStartScheduler+0x12c>)
 8016128:	617b      	str	r3, [r7, #20]
 801612a:	697b      	ldr	r3, [r7, #20]
 801612c:	781b      	ldrb	r3, [r3, #0]
 801612e:	b2db      	uxtb	r3, r3
 8016130:	607b      	str	r3, [r7, #4]
 8016132:	697b      	ldr	r3, [r7, #20]
 8016134:	22ff      	movs	r2, #255	; 0xff
 8016136:	701a      	strb	r2, [r3, #0]
 8016138:	697b      	ldr	r3, [r7, #20]
 801613a:	781b      	ldrb	r3, [r3, #0]
 801613c:	b2db      	uxtb	r3, r3
 801613e:	70fb      	strb	r3, [r7, #3]
 8016140:	78fb      	ldrb	r3, [r7, #3]
 8016142:	b2db      	uxtb	r3, r3
 8016144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016148:	b2da      	uxtb	r2, r3
 801614a:	4b31      	ldr	r3, [pc, #196]	; (8016210 <xPortStartScheduler+0x130>)
 801614c:	701a      	strb	r2, [r3, #0]
 801614e:	4b31      	ldr	r3, [pc, #196]	; (8016214 <xPortStartScheduler+0x134>)
 8016150:	2207      	movs	r2, #7
 8016152:	601a      	str	r2, [r3, #0]
 8016154:	e009      	b.n	801616a <xPortStartScheduler+0x8a>
 8016156:	4b2f      	ldr	r3, [pc, #188]	; (8016214 <xPortStartScheduler+0x134>)
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	3b01      	subs	r3, #1
 801615c:	4a2d      	ldr	r2, [pc, #180]	; (8016214 <xPortStartScheduler+0x134>)
 801615e:	6013      	str	r3, [r2, #0]
 8016160:	78fb      	ldrb	r3, [r7, #3]
 8016162:	b2db      	uxtb	r3, r3
 8016164:	005b      	lsls	r3, r3, #1
 8016166:	b2db      	uxtb	r3, r3
 8016168:	70fb      	strb	r3, [r7, #3]
 801616a:	78fb      	ldrb	r3, [r7, #3]
 801616c:	b2db      	uxtb	r3, r3
 801616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016172:	2b80      	cmp	r3, #128	; 0x80
 8016174:	d0ef      	beq.n	8016156 <xPortStartScheduler+0x76>
 8016176:	4b27      	ldr	r3, [pc, #156]	; (8016214 <xPortStartScheduler+0x134>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	f1c3 0307 	rsb	r3, r3, #7
 801617e:	2b04      	cmp	r3, #4
 8016180:	d00a      	beq.n	8016198 <xPortStartScheduler+0xb8>
 8016182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016186:	f383 8811 	msr	BASEPRI, r3
 801618a:	f3bf 8f6f 	isb	sy
 801618e:	f3bf 8f4f 	dsb	sy
 8016192:	60bb      	str	r3, [r7, #8]
 8016194:	bf00      	nop
 8016196:	e7fe      	b.n	8016196 <xPortStartScheduler+0xb6>
 8016198:	4b1e      	ldr	r3, [pc, #120]	; (8016214 <xPortStartScheduler+0x134>)
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	021b      	lsls	r3, r3, #8
 801619e:	4a1d      	ldr	r2, [pc, #116]	; (8016214 <xPortStartScheduler+0x134>)
 80161a0:	6013      	str	r3, [r2, #0]
 80161a2:	4b1c      	ldr	r3, [pc, #112]	; (8016214 <xPortStartScheduler+0x134>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80161aa:	4a1a      	ldr	r2, [pc, #104]	; (8016214 <xPortStartScheduler+0x134>)
 80161ac:	6013      	str	r3, [r2, #0]
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	b2da      	uxtb	r2, r3
 80161b2:	697b      	ldr	r3, [r7, #20]
 80161b4:	701a      	strb	r2, [r3, #0]
 80161b6:	4b18      	ldr	r3, [pc, #96]	; (8016218 <xPortStartScheduler+0x138>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	4a17      	ldr	r2, [pc, #92]	; (8016218 <xPortStartScheduler+0x138>)
 80161bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80161c0:	6013      	str	r3, [r2, #0]
 80161c2:	4b15      	ldr	r3, [pc, #84]	; (8016218 <xPortStartScheduler+0x138>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	4a14      	ldr	r2, [pc, #80]	; (8016218 <xPortStartScheduler+0x138>)
 80161c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80161cc:	6013      	str	r3, [r2, #0]
 80161ce:	f000 f8dd 	bl	801638c <vPortSetupTimerInterrupt>
 80161d2:	4b12      	ldr	r3, [pc, #72]	; (801621c <xPortStartScheduler+0x13c>)
 80161d4:	2200      	movs	r2, #0
 80161d6:	601a      	str	r2, [r3, #0]
 80161d8:	f000 f8fc 	bl	80163d4 <vPortEnableVFP>
 80161dc:	4b10      	ldr	r3, [pc, #64]	; (8016220 <xPortStartScheduler+0x140>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	4a0f      	ldr	r2, [pc, #60]	; (8016220 <xPortStartScheduler+0x140>)
 80161e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80161e6:	6013      	str	r3, [r2, #0]
 80161e8:	f7ff ff66 	bl	80160b8 <prvPortStartFirstTask>
 80161ec:	f7fe ff7c 	bl	80150e8 <vTaskSwitchContext>
 80161f0:	f7ff ff1e 	bl	8016030 <prvTaskExitError>
 80161f4:	2300      	movs	r3, #0
 80161f6:	4618      	mov	r0, r3
 80161f8:	3718      	adds	r7, #24
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}
 80161fe:	bf00      	nop
 8016200:	e000ed00 	.word	0xe000ed00
 8016204:	410fc271 	.word	0x410fc271
 8016208:	410fc270 	.word	0x410fc270
 801620c:	e000e400 	.word	0xe000e400
 8016210:	24001e38 	.word	0x24001e38
 8016214:	24001e3c 	.word	0x24001e3c
 8016218:	e000ed20 	.word	0xe000ed20
 801621c:	240000a0 	.word	0x240000a0
 8016220:	e000ef34 	.word	0xe000ef34

08016224 <vPortEnterCritical>:
 8016224:	b480      	push	{r7}
 8016226:	b083      	sub	sp, #12
 8016228:	af00      	add	r7, sp, #0
 801622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801622e:	f383 8811 	msr	BASEPRI, r3
 8016232:	f3bf 8f6f 	isb	sy
 8016236:	f3bf 8f4f 	dsb	sy
 801623a:	607b      	str	r3, [r7, #4]
 801623c:	bf00      	nop
 801623e:	4b0f      	ldr	r3, [pc, #60]	; (801627c <vPortEnterCritical+0x58>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	3301      	adds	r3, #1
 8016244:	4a0d      	ldr	r2, [pc, #52]	; (801627c <vPortEnterCritical+0x58>)
 8016246:	6013      	str	r3, [r2, #0]
 8016248:	4b0c      	ldr	r3, [pc, #48]	; (801627c <vPortEnterCritical+0x58>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	2b01      	cmp	r3, #1
 801624e:	d10f      	bne.n	8016270 <vPortEnterCritical+0x4c>
 8016250:	4b0b      	ldr	r3, [pc, #44]	; (8016280 <vPortEnterCritical+0x5c>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	b2db      	uxtb	r3, r3
 8016256:	2b00      	cmp	r3, #0
 8016258:	d00a      	beq.n	8016270 <vPortEnterCritical+0x4c>
 801625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801625e:	f383 8811 	msr	BASEPRI, r3
 8016262:	f3bf 8f6f 	isb	sy
 8016266:	f3bf 8f4f 	dsb	sy
 801626a:	603b      	str	r3, [r7, #0]
 801626c:	bf00      	nop
 801626e:	e7fe      	b.n	801626e <vPortEnterCritical+0x4a>
 8016270:	bf00      	nop
 8016272:	370c      	adds	r7, #12
 8016274:	46bd      	mov	sp, r7
 8016276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627a:	4770      	bx	lr
 801627c:	240000a0 	.word	0x240000a0
 8016280:	e000ed04 	.word	0xe000ed04

08016284 <vPortExitCritical>:
 8016284:	b480      	push	{r7}
 8016286:	b083      	sub	sp, #12
 8016288:	af00      	add	r7, sp, #0
 801628a:	4b12      	ldr	r3, [pc, #72]	; (80162d4 <vPortExitCritical+0x50>)
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d10a      	bne.n	80162a8 <vPortExitCritical+0x24>
 8016292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016296:	f383 8811 	msr	BASEPRI, r3
 801629a:	f3bf 8f6f 	isb	sy
 801629e:	f3bf 8f4f 	dsb	sy
 80162a2:	607b      	str	r3, [r7, #4]
 80162a4:	bf00      	nop
 80162a6:	e7fe      	b.n	80162a6 <vPortExitCritical+0x22>
 80162a8:	4b0a      	ldr	r3, [pc, #40]	; (80162d4 <vPortExitCritical+0x50>)
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	3b01      	subs	r3, #1
 80162ae:	4a09      	ldr	r2, [pc, #36]	; (80162d4 <vPortExitCritical+0x50>)
 80162b0:	6013      	str	r3, [r2, #0]
 80162b2:	4b08      	ldr	r3, [pc, #32]	; (80162d4 <vPortExitCritical+0x50>)
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d105      	bne.n	80162c6 <vPortExitCritical+0x42>
 80162ba:	2300      	movs	r3, #0
 80162bc:	603b      	str	r3, [r7, #0]
 80162be:	683b      	ldr	r3, [r7, #0]
 80162c0:	f383 8811 	msr	BASEPRI, r3
 80162c4:	bf00      	nop
 80162c6:	bf00      	nop
 80162c8:	370c      	adds	r7, #12
 80162ca:	46bd      	mov	sp, r7
 80162cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d0:	4770      	bx	lr
 80162d2:	bf00      	nop
 80162d4:	240000a0 	.word	0x240000a0
	...

080162e0 <PendSV_Handler>:
 80162e0:	f3ef 8009 	mrs	r0, PSP
 80162e4:	f3bf 8f6f 	isb	sy
 80162e8:	4b15      	ldr	r3, [pc, #84]	; (8016340 <pxCurrentTCBConst>)
 80162ea:	681a      	ldr	r2, [r3, #0]
 80162ec:	f01e 0f10 	tst.w	lr, #16
 80162f0:	bf08      	it	eq
 80162f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80162f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162fa:	6010      	str	r0, [r2, #0]
 80162fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016304:	f380 8811 	msr	BASEPRI, r0
 8016308:	f3bf 8f4f 	dsb	sy
 801630c:	f3bf 8f6f 	isb	sy
 8016310:	f7fe feea 	bl	80150e8 <vTaskSwitchContext>
 8016314:	f04f 0000 	mov.w	r0, #0
 8016318:	f380 8811 	msr	BASEPRI, r0
 801631c:	bc09      	pop	{r0, r3}
 801631e:	6819      	ldr	r1, [r3, #0]
 8016320:	6808      	ldr	r0, [r1, #0]
 8016322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016326:	f01e 0f10 	tst.w	lr, #16
 801632a:	bf08      	it	eq
 801632c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016330:	f380 8809 	msr	PSP, r0
 8016334:	f3bf 8f6f 	isb	sy
 8016338:	4770      	bx	lr
 801633a:	bf00      	nop
 801633c:	f3af 8000 	nop.w

08016340 <pxCurrentTCBConst>:
 8016340:	2400180c 	.word	0x2400180c
 8016344:	bf00      	nop
 8016346:	bf00      	nop

08016348 <xPortSysTickHandler>:
 8016348:	b580      	push	{r7, lr}
 801634a:	b082      	sub	sp, #8
 801634c:	af00      	add	r7, sp, #0
 801634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016352:	f383 8811 	msr	BASEPRI, r3
 8016356:	f3bf 8f6f 	isb	sy
 801635a:	f3bf 8f4f 	dsb	sy
 801635e:	607b      	str	r3, [r7, #4]
 8016360:	bf00      	nop
 8016362:	f7fe fdff 	bl	8014f64 <xTaskIncrementTick>
 8016366:	4603      	mov	r3, r0
 8016368:	2b00      	cmp	r3, #0
 801636a:	d003      	beq.n	8016374 <xPortSysTickHandler+0x2c>
 801636c:	4b06      	ldr	r3, [pc, #24]	; (8016388 <xPortSysTickHandler+0x40>)
 801636e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016372:	601a      	str	r2, [r3, #0]
 8016374:	2300      	movs	r3, #0
 8016376:	603b      	str	r3, [r7, #0]
 8016378:	683b      	ldr	r3, [r7, #0]
 801637a:	f383 8811 	msr	BASEPRI, r3
 801637e:	bf00      	nop
 8016380:	bf00      	nop
 8016382:	3708      	adds	r7, #8
 8016384:	46bd      	mov	sp, r7
 8016386:	bd80      	pop	{r7, pc}
 8016388:	e000ed04 	.word	0xe000ed04

0801638c <vPortSetupTimerInterrupt>:
 801638c:	b480      	push	{r7}
 801638e:	af00      	add	r7, sp, #0
 8016390:	4b0b      	ldr	r3, [pc, #44]	; (80163c0 <vPortSetupTimerInterrupt+0x34>)
 8016392:	2200      	movs	r2, #0
 8016394:	601a      	str	r2, [r3, #0]
 8016396:	4b0b      	ldr	r3, [pc, #44]	; (80163c4 <vPortSetupTimerInterrupt+0x38>)
 8016398:	2200      	movs	r2, #0
 801639a:	601a      	str	r2, [r3, #0]
 801639c:	4b0a      	ldr	r3, [pc, #40]	; (80163c8 <vPortSetupTimerInterrupt+0x3c>)
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	4a0a      	ldr	r2, [pc, #40]	; (80163cc <vPortSetupTimerInterrupt+0x40>)
 80163a2:	fba2 2303 	umull	r2, r3, r2, r3
 80163a6:	099b      	lsrs	r3, r3, #6
 80163a8:	4a09      	ldr	r2, [pc, #36]	; (80163d0 <vPortSetupTimerInterrupt+0x44>)
 80163aa:	3b01      	subs	r3, #1
 80163ac:	6013      	str	r3, [r2, #0]
 80163ae:	4b04      	ldr	r3, [pc, #16]	; (80163c0 <vPortSetupTimerInterrupt+0x34>)
 80163b0:	2207      	movs	r2, #7
 80163b2:	601a      	str	r2, [r3, #0]
 80163b4:	bf00      	nop
 80163b6:	46bd      	mov	sp, r7
 80163b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163bc:	4770      	bx	lr
 80163be:	bf00      	nop
 80163c0:	e000e010 	.word	0xe000e010
 80163c4:	e000e018 	.word	0xe000e018
 80163c8:	24000090 	.word	0x24000090
 80163cc:	10624dd3 	.word	0x10624dd3
 80163d0:	e000e014 	.word	0xe000e014

080163d4 <vPortEnableVFP>:
 80163d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80163e4 <vPortEnableVFP+0x10>
 80163d8:	6801      	ldr	r1, [r0, #0]
 80163da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80163de:	6001      	str	r1, [r0, #0]
 80163e0:	4770      	bx	lr
 80163e2:	bf00      	nop
 80163e4:	e000ed88 	.word	0xe000ed88

080163e8 <vPortValidateInterruptPriority>:
 80163e8:	b480      	push	{r7}
 80163ea:	b085      	sub	sp, #20
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	f3ef 8305 	mrs	r3, IPSR
 80163f2:	60fb      	str	r3, [r7, #12]
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	2b0f      	cmp	r3, #15
 80163f8:	d914      	bls.n	8016424 <vPortValidateInterruptPriority+0x3c>
 80163fa:	4a17      	ldr	r2, [pc, #92]	; (8016458 <vPortValidateInterruptPriority+0x70>)
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	4413      	add	r3, r2
 8016400:	781b      	ldrb	r3, [r3, #0]
 8016402:	72fb      	strb	r3, [r7, #11]
 8016404:	4b15      	ldr	r3, [pc, #84]	; (801645c <vPortValidateInterruptPriority+0x74>)
 8016406:	781b      	ldrb	r3, [r3, #0]
 8016408:	7afa      	ldrb	r2, [r7, #11]
 801640a:	429a      	cmp	r2, r3
 801640c:	d20a      	bcs.n	8016424 <vPortValidateInterruptPriority+0x3c>
 801640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016412:	f383 8811 	msr	BASEPRI, r3
 8016416:	f3bf 8f6f 	isb	sy
 801641a:	f3bf 8f4f 	dsb	sy
 801641e:	607b      	str	r3, [r7, #4]
 8016420:	bf00      	nop
 8016422:	e7fe      	b.n	8016422 <vPortValidateInterruptPriority+0x3a>
 8016424:	4b0e      	ldr	r3, [pc, #56]	; (8016460 <vPortValidateInterruptPriority+0x78>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801642c:	4b0d      	ldr	r3, [pc, #52]	; (8016464 <vPortValidateInterruptPriority+0x7c>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	429a      	cmp	r2, r3
 8016432:	d90a      	bls.n	801644a <vPortValidateInterruptPriority+0x62>
 8016434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016438:	f383 8811 	msr	BASEPRI, r3
 801643c:	f3bf 8f6f 	isb	sy
 8016440:	f3bf 8f4f 	dsb	sy
 8016444:	603b      	str	r3, [r7, #0]
 8016446:	bf00      	nop
 8016448:	e7fe      	b.n	8016448 <vPortValidateInterruptPriority+0x60>
 801644a:	bf00      	nop
 801644c:	3714      	adds	r7, #20
 801644e:	46bd      	mov	sp, r7
 8016450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016454:	4770      	bx	lr
 8016456:	bf00      	nop
 8016458:	e000e3f0 	.word	0xe000e3f0
 801645c:	24001e38 	.word	0x24001e38
 8016460:	e000ed0c 	.word	0xe000ed0c
 8016464:	24001e3c 	.word	0x24001e3c

08016468 <pvPortMalloc>:
 8016468:	b580      	push	{r7, lr}
 801646a:	b08a      	sub	sp, #40	; 0x28
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
 8016470:	2300      	movs	r3, #0
 8016472:	61fb      	str	r3, [r7, #28]
 8016474:	f7fe fcba 	bl	8014dec <vTaskSuspendAll>
 8016478:	4b5b      	ldr	r3, [pc, #364]	; (80165e8 <pvPortMalloc+0x180>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d101      	bne.n	8016484 <pvPortMalloc+0x1c>
 8016480:	f000 f920 	bl	80166c4 <prvHeapInit>
 8016484:	4b59      	ldr	r3, [pc, #356]	; (80165ec <pvPortMalloc+0x184>)
 8016486:	681a      	ldr	r2, [r3, #0]
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	4013      	ands	r3, r2
 801648c:	2b00      	cmp	r3, #0
 801648e:	f040 8093 	bne.w	80165b8 <pvPortMalloc+0x150>
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d01d      	beq.n	80164d4 <pvPortMalloc+0x6c>
 8016498:	2208      	movs	r2, #8
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	4413      	add	r3, r2
 801649e:	607b      	str	r3, [r7, #4]
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	f003 0307 	and.w	r3, r3, #7
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d014      	beq.n	80164d4 <pvPortMalloc+0x6c>
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	f023 0307 	bic.w	r3, r3, #7
 80164b0:	3308      	adds	r3, #8
 80164b2:	607b      	str	r3, [r7, #4]
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	f003 0307 	and.w	r3, r3, #7
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d00a      	beq.n	80164d4 <pvPortMalloc+0x6c>
 80164be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c2:	f383 8811 	msr	BASEPRI, r3
 80164c6:	f3bf 8f6f 	isb	sy
 80164ca:	f3bf 8f4f 	dsb	sy
 80164ce:	617b      	str	r3, [r7, #20]
 80164d0:	bf00      	nop
 80164d2:	e7fe      	b.n	80164d2 <pvPortMalloc+0x6a>
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d06e      	beq.n	80165b8 <pvPortMalloc+0x150>
 80164da:	4b45      	ldr	r3, [pc, #276]	; (80165f0 <pvPortMalloc+0x188>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	687a      	ldr	r2, [r7, #4]
 80164e0:	429a      	cmp	r2, r3
 80164e2:	d869      	bhi.n	80165b8 <pvPortMalloc+0x150>
 80164e4:	4b43      	ldr	r3, [pc, #268]	; (80165f4 <pvPortMalloc+0x18c>)
 80164e6:	623b      	str	r3, [r7, #32]
 80164e8:	4b42      	ldr	r3, [pc, #264]	; (80165f4 <pvPortMalloc+0x18c>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	627b      	str	r3, [r7, #36]	; 0x24
 80164ee:	e004      	b.n	80164fa <pvPortMalloc+0x92>
 80164f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f2:	623b      	str	r3, [r7, #32]
 80164f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	627b      	str	r3, [r7, #36]	; 0x24
 80164fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fc:	685b      	ldr	r3, [r3, #4]
 80164fe:	687a      	ldr	r2, [r7, #4]
 8016500:	429a      	cmp	r2, r3
 8016502:	d903      	bls.n	801650c <pvPortMalloc+0xa4>
 8016504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d1f1      	bne.n	80164f0 <pvPortMalloc+0x88>
 801650c:	4b36      	ldr	r3, [pc, #216]	; (80165e8 <pvPortMalloc+0x180>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016512:	429a      	cmp	r2, r3
 8016514:	d050      	beq.n	80165b8 <pvPortMalloc+0x150>
 8016516:	6a3b      	ldr	r3, [r7, #32]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	2208      	movs	r2, #8
 801651c:	4413      	add	r3, r2
 801651e:	61fb      	str	r3, [r7, #28]
 8016520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016522:	681a      	ldr	r2, [r3, #0]
 8016524:	6a3b      	ldr	r3, [r7, #32]
 8016526:	601a      	str	r2, [r3, #0]
 8016528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652a:	685a      	ldr	r2, [r3, #4]
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	1ad2      	subs	r2, r2, r3
 8016530:	2308      	movs	r3, #8
 8016532:	005b      	lsls	r3, r3, #1
 8016534:	429a      	cmp	r2, r3
 8016536:	d91f      	bls.n	8016578 <pvPortMalloc+0x110>
 8016538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	4413      	add	r3, r2
 801653e:	61bb      	str	r3, [r7, #24]
 8016540:	69bb      	ldr	r3, [r7, #24]
 8016542:	f003 0307 	and.w	r3, r3, #7
 8016546:	2b00      	cmp	r3, #0
 8016548:	d00a      	beq.n	8016560 <pvPortMalloc+0xf8>
 801654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801654e:	f383 8811 	msr	BASEPRI, r3
 8016552:	f3bf 8f6f 	isb	sy
 8016556:	f3bf 8f4f 	dsb	sy
 801655a:	613b      	str	r3, [r7, #16]
 801655c:	bf00      	nop
 801655e:	e7fe      	b.n	801655e <pvPortMalloc+0xf6>
 8016560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016562:	685a      	ldr	r2, [r3, #4]
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	1ad2      	subs	r2, r2, r3
 8016568:	69bb      	ldr	r3, [r7, #24]
 801656a:	605a      	str	r2, [r3, #4]
 801656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801656e:	687a      	ldr	r2, [r7, #4]
 8016570:	605a      	str	r2, [r3, #4]
 8016572:	69b8      	ldr	r0, [r7, #24]
 8016574:	f000 f908 	bl	8016788 <prvInsertBlockIntoFreeList>
 8016578:	4b1d      	ldr	r3, [pc, #116]	; (80165f0 <pvPortMalloc+0x188>)
 801657a:	681a      	ldr	r2, [r3, #0]
 801657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801657e:	685b      	ldr	r3, [r3, #4]
 8016580:	1ad3      	subs	r3, r2, r3
 8016582:	4a1b      	ldr	r2, [pc, #108]	; (80165f0 <pvPortMalloc+0x188>)
 8016584:	6013      	str	r3, [r2, #0]
 8016586:	4b1a      	ldr	r3, [pc, #104]	; (80165f0 <pvPortMalloc+0x188>)
 8016588:	681a      	ldr	r2, [r3, #0]
 801658a:	4b1b      	ldr	r3, [pc, #108]	; (80165f8 <pvPortMalloc+0x190>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	429a      	cmp	r2, r3
 8016590:	d203      	bcs.n	801659a <pvPortMalloc+0x132>
 8016592:	4b17      	ldr	r3, [pc, #92]	; (80165f0 <pvPortMalloc+0x188>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	4a18      	ldr	r2, [pc, #96]	; (80165f8 <pvPortMalloc+0x190>)
 8016598:	6013      	str	r3, [r2, #0]
 801659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801659c:	685a      	ldr	r2, [r3, #4]
 801659e:	4b13      	ldr	r3, [pc, #76]	; (80165ec <pvPortMalloc+0x184>)
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	431a      	orrs	r2, r3
 80165a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a6:	605a      	str	r2, [r3, #4]
 80165a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165aa:	2200      	movs	r2, #0
 80165ac:	601a      	str	r2, [r3, #0]
 80165ae:	4b13      	ldr	r3, [pc, #76]	; (80165fc <pvPortMalloc+0x194>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	3301      	adds	r3, #1
 80165b4:	4a11      	ldr	r2, [pc, #68]	; (80165fc <pvPortMalloc+0x194>)
 80165b6:	6013      	str	r3, [r2, #0]
 80165b8:	f7fe fc26 	bl	8014e08 <xTaskResumeAll>
 80165bc:	69fb      	ldr	r3, [r7, #28]
 80165be:	f003 0307 	and.w	r3, r3, #7
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d00a      	beq.n	80165dc <pvPortMalloc+0x174>
 80165c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165ca:	f383 8811 	msr	BASEPRI, r3
 80165ce:	f3bf 8f6f 	isb	sy
 80165d2:	f3bf 8f4f 	dsb	sy
 80165d6:	60fb      	str	r3, [r7, #12]
 80165d8:	bf00      	nop
 80165da:	e7fe      	b.n	80165da <pvPortMalloc+0x172>
 80165dc:	69fb      	ldr	r3, [r7, #28]
 80165de:	4618      	mov	r0, r3
 80165e0:	3728      	adds	r7, #40	; 0x28
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}
 80165e6:	bf00      	nop
 80165e8:	24005a48 	.word	0x24005a48
 80165ec:	24005a5c 	.word	0x24005a5c
 80165f0:	24005a4c 	.word	0x24005a4c
 80165f4:	24005a40 	.word	0x24005a40
 80165f8:	24005a50 	.word	0x24005a50
 80165fc:	24005a54 	.word	0x24005a54

08016600 <vPortFree>:
 8016600:	b580      	push	{r7, lr}
 8016602:	b086      	sub	sp, #24
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	617b      	str	r3, [r7, #20]
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d04d      	beq.n	80166ae <vPortFree+0xae>
 8016612:	2308      	movs	r3, #8
 8016614:	425b      	negs	r3, r3
 8016616:	697a      	ldr	r2, [r7, #20]
 8016618:	4413      	add	r3, r2
 801661a:	617b      	str	r3, [r7, #20]
 801661c:	697b      	ldr	r3, [r7, #20]
 801661e:	613b      	str	r3, [r7, #16]
 8016620:	693b      	ldr	r3, [r7, #16]
 8016622:	685a      	ldr	r2, [r3, #4]
 8016624:	4b24      	ldr	r3, [pc, #144]	; (80166b8 <vPortFree+0xb8>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	4013      	ands	r3, r2
 801662a:	2b00      	cmp	r3, #0
 801662c:	d10a      	bne.n	8016644 <vPortFree+0x44>
 801662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016632:	f383 8811 	msr	BASEPRI, r3
 8016636:	f3bf 8f6f 	isb	sy
 801663a:	f3bf 8f4f 	dsb	sy
 801663e:	60fb      	str	r3, [r7, #12]
 8016640:	bf00      	nop
 8016642:	e7fe      	b.n	8016642 <vPortFree+0x42>
 8016644:	693b      	ldr	r3, [r7, #16]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d00a      	beq.n	8016662 <vPortFree+0x62>
 801664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016650:	f383 8811 	msr	BASEPRI, r3
 8016654:	f3bf 8f6f 	isb	sy
 8016658:	f3bf 8f4f 	dsb	sy
 801665c:	60bb      	str	r3, [r7, #8]
 801665e:	bf00      	nop
 8016660:	e7fe      	b.n	8016660 <vPortFree+0x60>
 8016662:	693b      	ldr	r3, [r7, #16]
 8016664:	685a      	ldr	r2, [r3, #4]
 8016666:	4b14      	ldr	r3, [pc, #80]	; (80166b8 <vPortFree+0xb8>)
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	4013      	ands	r3, r2
 801666c:	2b00      	cmp	r3, #0
 801666e:	d01e      	beq.n	80166ae <vPortFree+0xae>
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d11a      	bne.n	80166ae <vPortFree+0xae>
 8016678:	693b      	ldr	r3, [r7, #16]
 801667a:	685a      	ldr	r2, [r3, #4]
 801667c:	4b0e      	ldr	r3, [pc, #56]	; (80166b8 <vPortFree+0xb8>)
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	43db      	mvns	r3, r3
 8016682:	401a      	ands	r2, r3
 8016684:	693b      	ldr	r3, [r7, #16]
 8016686:	605a      	str	r2, [r3, #4]
 8016688:	f7fe fbb0 	bl	8014dec <vTaskSuspendAll>
 801668c:	693b      	ldr	r3, [r7, #16]
 801668e:	685a      	ldr	r2, [r3, #4]
 8016690:	4b0a      	ldr	r3, [pc, #40]	; (80166bc <vPortFree+0xbc>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	4413      	add	r3, r2
 8016696:	4a09      	ldr	r2, [pc, #36]	; (80166bc <vPortFree+0xbc>)
 8016698:	6013      	str	r3, [r2, #0]
 801669a:	6938      	ldr	r0, [r7, #16]
 801669c:	f000 f874 	bl	8016788 <prvInsertBlockIntoFreeList>
 80166a0:	4b07      	ldr	r3, [pc, #28]	; (80166c0 <vPortFree+0xc0>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	3301      	adds	r3, #1
 80166a6:	4a06      	ldr	r2, [pc, #24]	; (80166c0 <vPortFree+0xc0>)
 80166a8:	6013      	str	r3, [r2, #0]
 80166aa:	f7fe fbad 	bl	8014e08 <xTaskResumeAll>
 80166ae:	bf00      	nop
 80166b0:	3718      	adds	r7, #24
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	24005a5c 	.word	0x24005a5c
 80166bc:	24005a4c 	.word	0x24005a4c
 80166c0:	24005a58 	.word	0x24005a58

080166c4 <prvHeapInit>:
 80166c4:	b480      	push	{r7}
 80166c6:	b085      	sub	sp, #20
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80166ce:	60bb      	str	r3, [r7, #8]
 80166d0:	4b27      	ldr	r3, [pc, #156]	; (8016770 <prvHeapInit+0xac>)
 80166d2:	60fb      	str	r3, [r7, #12]
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	f003 0307 	and.w	r3, r3, #7
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d00c      	beq.n	80166f8 <prvHeapInit+0x34>
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	3307      	adds	r3, #7
 80166e2:	60fb      	str	r3, [r7, #12]
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	f023 0307 	bic.w	r3, r3, #7
 80166ea:	60fb      	str	r3, [r7, #12]
 80166ec:	68ba      	ldr	r2, [r7, #8]
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	1ad3      	subs	r3, r2, r3
 80166f2:	4a1f      	ldr	r2, [pc, #124]	; (8016770 <prvHeapInit+0xac>)
 80166f4:	4413      	add	r3, r2
 80166f6:	60bb      	str	r3, [r7, #8]
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	607b      	str	r3, [r7, #4]
 80166fc:	4a1d      	ldr	r2, [pc, #116]	; (8016774 <prvHeapInit+0xb0>)
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	6013      	str	r3, [r2, #0]
 8016702:	4b1c      	ldr	r3, [pc, #112]	; (8016774 <prvHeapInit+0xb0>)
 8016704:	2200      	movs	r2, #0
 8016706:	605a      	str	r2, [r3, #4]
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	68ba      	ldr	r2, [r7, #8]
 801670c:	4413      	add	r3, r2
 801670e:	60fb      	str	r3, [r7, #12]
 8016710:	2208      	movs	r2, #8
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	1a9b      	subs	r3, r3, r2
 8016716:	60fb      	str	r3, [r7, #12]
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	f023 0307 	bic.w	r3, r3, #7
 801671e:	60fb      	str	r3, [r7, #12]
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	4a15      	ldr	r2, [pc, #84]	; (8016778 <prvHeapInit+0xb4>)
 8016724:	6013      	str	r3, [r2, #0]
 8016726:	4b14      	ldr	r3, [pc, #80]	; (8016778 <prvHeapInit+0xb4>)
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	2200      	movs	r2, #0
 801672c:	605a      	str	r2, [r3, #4]
 801672e:	4b12      	ldr	r3, [pc, #72]	; (8016778 <prvHeapInit+0xb4>)
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	2200      	movs	r2, #0
 8016734:	601a      	str	r2, [r3, #0]
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	603b      	str	r3, [r7, #0]
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	68fa      	ldr	r2, [r7, #12]
 801673e:	1ad2      	subs	r2, r2, r3
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	605a      	str	r2, [r3, #4]
 8016744:	4b0c      	ldr	r3, [pc, #48]	; (8016778 <prvHeapInit+0xb4>)
 8016746:	681a      	ldr	r2, [r3, #0]
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	601a      	str	r2, [r3, #0]
 801674c:	683b      	ldr	r3, [r7, #0]
 801674e:	685b      	ldr	r3, [r3, #4]
 8016750:	4a0a      	ldr	r2, [pc, #40]	; (801677c <prvHeapInit+0xb8>)
 8016752:	6013      	str	r3, [r2, #0]
 8016754:	683b      	ldr	r3, [r7, #0]
 8016756:	685b      	ldr	r3, [r3, #4]
 8016758:	4a09      	ldr	r2, [pc, #36]	; (8016780 <prvHeapInit+0xbc>)
 801675a:	6013      	str	r3, [r2, #0]
 801675c:	4b09      	ldr	r3, [pc, #36]	; (8016784 <prvHeapInit+0xc0>)
 801675e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016762:	601a      	str	r2, [r3, #0]
 8016764:	bf00      	nop
 8016766:	3714      	adds	r7, #20
 8016768:	46bd      	mov	sp, r7
 801676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676e:	4770      	bx	lr
 8016770:	24001e40 	.word	0x24001e40
 8016774:	24005a40 	.word	0x24005a40
 8016778:	24005a48 	.word	0x24005a48
 801677c:	24005a50 	.word	0x24005a50
 8016780:	24005a4c 	.word	0x24005a4c
 8016784:	24005a5c 	.word	0x24005a5c

08016788 <prvInsertBlockIntoFreeList>:
 8016788:	b480      	push	{r7}
 801678a:	b085      	sub	sp, #20
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	4b28      	ldr	r3, [pc, #160]	; (8016834 <prvInsertBlockIntoFreeList+0xac>)
 8016792:	60fb      	str	r3, [r7, #12]
 8016794:	e002      	b.n	801679c <prvInsertBlockIntoFreeList+0x14>
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	60fb      	str	r3, [r7, #12]
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	687a      	ldr	r2, [r7, #4]
 80167a2:	429a      	cmp	r2, r3
 80167a4:	d8f7      	bhi.n	8016796 <prvInsertBlockIntoFreeList+0xe>
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	60bb      	str	r3, [r7, #8]
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	685b      	ldr	r3, [r3, #4]
 80167ae:	68ba      	ldr	r2, [r7, #8]
 80167b0:	4413      	add	r3, r2
 80167b2:	687a      	ldr	r2, [r7, #4]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d108      	bne.n	80167ca <prvInsertBlockIntoFreeList+0x42>
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	685a      	ldr	r2, [r3, #4]
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	685b      	ldr	r3, [r3, #4]
 80167c0:	441a      	add	r2, r3
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	605a      	str	r2, [r3, #4]
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	607b      	str	r3, [r7, #4]
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	60bb      	str	r3, [r7, #8]
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	68ba      	ldr	r2, [r7, #8]
 80167d4:	441a      	add	r2, r3
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	429a      	cmp	r2, r3
 80167dc:	d118      	bne.n	8016810 <prvInsertBlockIntoFreeList+0x88>
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	681a      	ldr	r2, [r3, #0]
 80167e2:	4b15      	ldr	r3, [pc, #84]	; (8016838 <prvInsertBlockIntoFreeList+0xb0>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	429a      	cmp	r2, r3
 80167e8:	d00d      	beq.n	8016806 <prvInsertBlockIntoFreeList+0x7e>
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	685a      	ldr	r2, [r3, #4]
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	685b      	ldr	r3, [r3, #4]
 80167f4:	441a      	add	r2, r3
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	605a      	str	r2, [r3, #4]
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	681a      	ldr	r2, [r3, #0]
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	601a      	str	r2, [r3, #0]
 8016804:	e008      	b.n	8016818 <prvInsertBlockIntoFreeList+0x90>
 8016806:	4b0c      	ldr	r3, [pc, #48]	; (8016838 <prvInsertBlockIntoFreeList+0xb0>)
 8016808:	681a      	ldr	r2, [r3, #0]
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	601a      	str	r2, [r3, #0]
 801680e:	e003      	b.n	8016818 <prvInsertBlockIntoFreeList+0x90>
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	681a      	ldr	r2, [r3, #0]
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	601a      	str	r2, [r3, #0]
 8016818:	68fa      	ldr	r2, [r7, #12]
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	429a      	cmp	r2, r3
 801681e:	d002      	beq.n	8016826 <prvInsertBlockIntoFreeList+0x9e>
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	687a      	ldr	r2, [r7, #4]
 8016824:	601a      	str	r2, [r3, #0]
 8016826:	bf00      	nop
 8016828:	3714      	adds	r7, #20
 801682a:	46bd      	mov	sp, r7
 801682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016830:	4770      	bx	lr
 8016832:	bf00      	nop
 8016834:	24005a40 	.word	0x24005a40
 8016838:	24005a48 	.word	0x24005a48

0801683c <__errno>:
 801683c:	4b01      	ldr	r3, [pc, #4]	; (8016844 <__errno+0x8>)
 801683e:	6818      	ldr	r0, [r3, #0]
 8016840:	4770      	bx	lr
 8016842:	bf00      	nop
 8016844:	240000a4 	.word	0x240000a4

08016848 <__libc_init_array>:
 8016848:	b570      	push	{r4, r5, r6, lr}
 801684a:	4d0d      	ldr	r5, [pc, #52]	; (8016880 <__libc_init_array+0x38>)
 801684c:	4c0d      	ldr	r4, [pc, #52]	; (8016884 <__libc_init_array+0x3c>)
 801684e:	1b64      	subs	r4, r4, r5
 8016850:	10a4      	asrs	r4, r4, #2
 8016852:	2600      	movs	r6, #0
 8016854:	42a6      	cmp	r6, r4
 8016856:	d109      	bne.n	801686c <__libc_init_array+0x24>
 8016858:	4d0b      	ldr	r5, [pc, #44]	; (8016888 <__libc_init_array+0x40>)
 801685a:	4c0c      	ldr	r4, [pc, #48]	; (801688c <__libc_init_array+0x44>)
 801685c:	f000 fd3c 	bl	80172d8 <_init>
 8016860:	1b64      	subs	r4, r4, r5
 8016862:	10a4      	asrs	r4, r4, #2
 8016864:	2600      	movs	r6, #0
 8016866:	42a6      	cmp	r6, r4
 8016868:	d105      	bne.n	8016876 <__libc_init_array+0x2e>
 801686a:	bd70      	pop	{r4, r5, r6, pc}
 801686c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016870:	4798      	blx	r3
 8016872:	3601      	adds	r6, #1
 8016874:	e7ee      	b.n	8016854 <__libc_init_array+0xc>
 8016876:	f855 3b04 	ldr.w	r3, [r5], #4
 801687a:	4798      	blx	r3
 801687c:	3601      	adds	r6, #1
 801687e:	e7f2      	b.n	8016866 <__libc_init_array+0x1e>
 8016880:	0801772c 	.word	0x0801772c
 8016884:	0801772c 	.word	0x0801772c
 8016888:	0801772c 	.word	0x0801772c
 801688c:	08017730 	.word	0x08017730

08016890 <malloc>:
 8016890:	4b02      	ldr	r3, [pc, #8]	; (801689c <malloc+0xc>)
 8016892:	4601      	mov	r1, r0
 8016894:	6818      	ldr	r0, [r3, #0]
 8016896:	f000 b88d 	b.w	80169b4 <_malloc_r>
 801689a:	bf00      	nop
 801689c:	240000a4 	.word	0x240000a4

080168a0 <free>:
 80168a0:	4b02      	ldr	r3, [pc, #8]	; (80168ac <free+0xc>)
 80168a2:	4601      	mov	r1, r0
 80168a4:	6818      	ldr	r0, [r3, #0]
 80168a6:	f000 b819 	b.w	80168dc <_free_r>
 80168aa:	bf00      	nop
 80168ac:	240000a4 	.word	0x240000a4

080168b0 <memcpy>:
 80168b0:	440a      	add	r2, r1
 80168b2:	4291      	cmp	r1, r2
 80168b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80168b8:	d100      	bne.n	80168bc <memcpy+0xc>
 80168ba:	4770      	bx	lr
 80168bc:	b510      	push	{r4, lr}
 80168be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80168c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80168c6:	4291      	cmp	r1, r2
 80168c8:	d1f9      	bne.n	80168be <memcpy+0xe>
 80168ca:	bd10      	pop	{r4, pc}

080168cc <memset>:
 80168cc:	4402      	add	r2, r0
 80168ce:	4603      	mov	r3, r0
 80168d0:	4293      	cmp	r3, r2
 80168d2:	d100      	bne.n	80168d6 <memset+0xa>
 80168d4:	4770      	bx	lr
 80168d6:	f803 1b01 	strb.w	r1, [r3], #1
 80168da:	e7f9      	b.n	80168d0 <memset+0x4>

080168dc <_free_r>:
 80168dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80168de:	2900      	cmp	r1, #0
 80168e0:	d044      	beq.n	801696c <_free_r+0x90>
 80168e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168e6:	9001      	str	r0, [sp, #4]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	f1a1 0404 	sub.w	r4, r1, #4
 80168ee:	bfb8      	it	lt
 80168f0:	18e4      	addlt	r4, r4, r3
 80168f2:	f000 fc39 	bl	8017168 <__malloc_lock>
 80168f6:	4a1e      	ldr	r2, [pc, #120]	; (8016970 <_free_r+0x94>)
 80168f8:	9801      	ldr	r0, [sp, #4]
 80168fa:	6813      	ldr	r3, [r2, #0]
 80168fc:	b933      	cbnz	r3, 801690c <_free_r+0x30>
 80168fe:	6063      	str	r3, [r4, #4]
 8016900:	6014      	str	r4, [r2, #0]
 8016902:	b003      	add	sp, #12
 8016904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016908:	f000 bc34 	b.w	8017174 <__malloc_unlock>
 801690c:	42a3      	cmp	r3, r4
 801690e:	d908      	bls.n	8016922 <_free_r+0x46>
 8016910:	6825      	ldr	r5, [r4, #0]
 8016912:	1961      	adds	r1, r4, r5
 8016914:	428b      	cmp	r3, r1
 8016916:	bf01      	itttt	eq
 8016918:	6819      	ldreq	r1, [r3, #0]
 801691a:	685b      	ldreq	r3, [r3, #4]
 801691c:	1949      	addeq	r1, r1, r5
 801691e:	6021      	streq	r1, [r4, #0]
 8016920:	e7ed      	b.n	80168fe <_free_r+0x22>
 8016922:	461a      	mov	r2, r3
 8016924:	685b      	ldr	r3, [r3, #4]
 8016926:	b10b      	cbz	r3, 801692c <_free_r+0x50>
 8016928:	42a3      	cmp	r3, r4
 801692a:	d9fa      	bls.n	8016922 <_free_r+0x46>
 801692c:	6811      	ldr	r1, [r2, #0]
 801692e:	1855      	adds	r5, r2, r1
 8016930:	42a5      	cmp	r5, r4
 8016932:	d10b      	bne.n	801694c <_free_r+0x70>
 8016934:	6824      	ldr	r4, [r4, #0]
 8016936:	4421      	add	r1, r4
 8016938:	1854      	adds	r4, r2, r1
 801693a:	42a3      	cmp	r3, r4
 801693c:	6011      	str	r1, [r2, #0]
 801693e:	d1e0      	bne.n	8016902 <_free_r+0x26>
 8016940:	681c      	ldr	r4, [r3, #0]
 8016942:	685b      	ldr	r3, [r3, #4]
 8016944:	6053      	str	r3, [r2, #4]
 8016946:	4421      	add	r1, r4
 8016948:	6011      	str	r1, [r2, #0]
 801694a:	e7da      	b.n	8016902 <_free_r+0x26>
 801694c:	d902      	bls.n	8016954 <_free_r+0x78>
 801694e:	230c      	movs	r3, #12
 8016950:	6003      	str	r3, [r0, #0]
 8016952:	e7d6      	b.n	8016902 <_free_r+0x26>
 8016954:	6825      	ldr	r5, [r4, #0]
 8016956:	1961      	adds	r1, r4, r5
 8016958:	428b      	cmp	r3, r1
 801695a:	bf04      	itt	eq
 801695c:	6819      	ldreq	r1, [r3, #0]
 801695e:	685b      	ldreq	r3, [r3, #4]
 8016960:	6063      	str	r3, [r4, #4]
 8016962:	bf04      	itt	eq
 8016964:	1949      	addeq	r1, r1, r5
 8016966:	6021      	streq	r1, [r4, #0]
 8016968:	6054      	str	r4, [r2, #4]
 801696a:	e7ca      	b.n	8016902 <_free_r+0x26>
 801696c:	b003      	add	sp, #12
 801696e:	bd30      	pop	{r4, r5, pc}
 8016970:	24005a60 	.word	0x24005a60

08016974 <sbrk_aligned>:
 8016974:	b570      	push	{r4, r5, r6, lr}
 8016976:	4e0e      	ldr	r6, [pc, #56]	; (80169b0 <sbrk_aligned+0x3c>)
 8016978:	460c      	mov	r4, r1
 801697a:	6831      	ldr	r1, [r6, #0]
 801697c:	4605      	mov	r5, r0
 801697e:	b911      	cbnz	r1, 8016986 <sbrk_aligned+0x12>
 8016980:	f000 f902 	bl	8016b88 <_sbrk_r>
 8016984:	6030      	str	r0, [r6, #0]
 8016986:	4621      	mov	r1, r4
 8016988:	4628      	mov	r0, r5
 801698a:	f000 f8fd 	bl	8016b88 <_sbrk_r>
 801698e:	1c43      	adds	r3, r0, #1
 8016990:	d00a      	beq.n	80169a8 <sbrk_aligned+0x34>
 8016992:	1cc4      	adds	r4, r0, #3
 8016994:	f024 0403 	bic.w	r4, r4, #3
 8016998:	42a0      	cmp	r0, r4
 801699a:	d007      	beq.n	80169ac <sbrk_aligned+0x38>
 801699c:	1a21      	subs	r1, r4, r0
 801699e:	4628      	mov	r0, r5
 80169a0:	f000 f8f2 	bl	8016b88 <_sbrk_r>
 80169a4:	3001      	adds	r0, #1
 80169a6:	d101      	bne.n	80169ac <sbrk_aligned+0x38>
 80169a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80169ac:	4620      	mov	r0, r4
 80169ae:	bd70      	pop	{r4, r5, r6, pc}
 80169b0:	24005a64 	.word	0x24005a64

080169b4 <_malloc_r>:
 80169b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169b8:	1ccd      	adds	r5, r1, #3
 80169ba:	f025 0503 	bic.w	r5, r5, #3
 80169be:	3508      	adds	r5, #8
 80169c0:	2d0c      	cmp	r5, #12
 80169c2:	bf38      	it	cc
 80169c4:	250c      	movcc	r5, #12
 80169c6:	2d00      	cmp	r5, #0
 80169c8:	4607      	mov	r7, r0
 80169ca:	db01      	blt.n	80169d0 <_malloc_r+0x1c>
 80169cc:	42a9      	cmp	r1, r5
 80169ce:	d905      	bls.n	80169dc <_malloc_r+0x28>
 80169d0:	230c      	movs	r3, #12
 80169d2:	603b      	str	r3, [r7, #0]
 80169d4:	2600      	movs	r6, #0
 80169d6:	4630      	mov	r0, r6
 80169d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169dc:	4e2e      	ldr	r6, [pc, #184]	; (8016a98 <_malloc_r+0xe4>)
 80169de:	f000 fbc3 	bl	8017168 <__malloc_lock>
 80169e2:	6833      	ldr	r3, [r6, #0]
 80169e4:	461c      	mov	r4, r3
 80169e6:	bb34      	cbnz	r4, 8016a36 <_malloc_r+0x82>
 80169e8:	4629      	mov	r1, r5
 80169ea:	4638      	mov	r0, r7
 80169ec:	f7ff ffc2 	bl	8016974 <sbrk_aligned>
 80169f0:	1c43      	adds	r3, r0, #1
 80169f2:	4604      	mov	r4, r0
 80169f4:	d14d      	bne.n	8016a92 <_malloc_r+0xde>
 80169f6:	6834      	ldr	r4, [r6, #0]
 80169f8:	4626      	mov	r6, r4
 80169fa:	2e00      	cmp	r6, #0
 80169fc:	d140      	bne.n	8016a80 <_malloc_r+0xcc>
 80169fe:	6823      	ldr	r3, [r4, #0]
 8016a00:	4631      	mov	r1, r6
 8016a02:	4638      	mov	r0, r7
 8016a04:	eb04 0803 	add.w	r8, r4, r3
 8016a08:	f000 f8be 	bl	8016b88 <_sbrk_r>
 8016a0c:	4580      	cmp	r8, r0
 8016a0e:	d13a      	bne.n	8016a86 <_malloc_r+0xd2>
 8016a10:	6821      	ldr	r1, [r4, #0]
 8016a12:	3503      	adds	r5, #3
 8016a14:	1a6d      	subs	r5, r5, r1
 8016a16:	f025 0503 	bic.w	r5, r5, #3
 8016a1a:	3508      	adds	r5, #8
 8016a1c:	2d0c      	cmp	r5, #12
 8016a1e:	bf38      	it	cc
 8016a20:	250c      	movcc	r5, #12
 8016a22:	4629      	mov	r1, r5
 8016a24:	4638      	mov	r0, r7
 8016a26:	f7ff ffa5 	bl	8016974 <sbrk_aligned>
 8016a2a:	3001      	adds	r0, #1
 8016a2c:	d02b      	beq.n	8016a86 <_malloc_r+0xd2>
 8016a2e:	6823      	ldr	r3, [r4, #0]
 8016a30:	442b      	add	r3, r5
 8016a32:	6023      	str	r3, [r4, #0]
 8016a34:	e00e      	b.n	8016a54 <_malloc_r+0xa0>
 8016a36:	6822      	ldr	r2, [r4, #0]
 8016a38:	1b52      	subs	r2, r2, r5
 8016a3a:	d41e      	bmi.n	8016a7a <_malloc_r+0xc6>
 8016a3c:	2a0b      	cmp	r2, #11
 8016a3e:	d916      	bls.n	8016a6e <_malloc_r+0xba>
 8016a40:	1961      	adds	r1, r4, r5
 8016a42:	42a3      	cmp	r3, r4
 8016a44:	6025      	str	r5, [r4, #0]
 8016a46:	bf18      	it	ne
 8016a48:	6059      	strne	r1, [r3, #4]
 8016a4a:	6863      	ldr	r3, [r4, #4]
 8016a4c:	bf08      	it	eq
 8016a4e:	6031      	streq	r1, [r6, #0]
 8016a50:	5162      	str	r2, [r4, r5]
 8016a52:	604b      	str	r3, [r1, #4]
 8016a54:	4638      	mov	r0, r7
 8016a56:	f104 060b 	add.w	r6, r4, #11
 8016a5a:	f000 fb8b 	bl	8017174 <__malloc_unlock>
 8016a5e:	f026 0607 	bic.w	r6, r6, #7
 8016a62:	1d23      	adds	r3, r4, #4
 8016a64:	1af2      	subs	r2, r6, r3
 8016a66:	d0b6      	beq.n	80169d6 <_malloc_r+0x22>
 8016a68:	1b9b      	subs	r3, r3, r6
 8016a6a:	50a3      	str	r3, [r4, r2]
 8016a6c:	e7b3      	b.n	80169d6 <_malloc_r+0x22>
 8016a6e:	6862      	ldr	r2, [r4, #4]
 8016a70:	42a3      	cmp	r3, r4
 8016a72:	bf0c      	ite	eq
 8016a74:	6032      	streq	r2, [r6, #0]
 8016a76:	605a      	strne	r2, [r3, #4]
 8016a78:	e7ec      	b.n	8016a54 <_malloc_r+0xa0>
 8016a7a:	4623      	mov	r3, r4
 8016a7c:	6864      	ldr	r4, [r4, #4]
 8016a7e:	e7b2      	b.n	80169e6 <_malloc_r+0x32>
 8016a80:	4634      	mov	r4, r6
 8016a82:	6876      	ldr	r6, [r6, #4]
 8016a84:	e7b9      	b.n	80169fa <_malloc_r+0x46>
 8016a86:	230c      	movs	r3, #12
 8016a88:	603b      	str	r3, [r7, #0]
 8016a8a:	4638      	mov	r0, r7
 8016a8c:	f000 fb72 	bl	8017174 <__malloc_unlock>
 8016a90:	e7a1      	b.n	80169d6 <_malloc_r+0x22>
 8016a92:	6025      	str	r5, [r4, #0]
 8016a94:	e7de      	b.n	8016a54 <_malloc_r+0xa0>
 8016a96:	bf00      	nop
 8016a98:	24005a60 	.word	0x24005a60

08016a9c <_puts_r>:
 8016a9c:	b570      	push	{r4, r5, r6, lr}
 8016a9e:	460e      	mov	r6, r1
 8016aa0:	4605      	mov	r5, r0
 8016aa2:	b118      	cbz	r0, 8016aac <_puts_r+0x10>
 8016aa4:	6983      	ldr	r3, [r0, #24]
 8016aa6:	b90b      	cbnz	r3, 8016aac <_puts_r+0x10>
 8016aa8:	f000 fa58 	bl	8016f5c <__sinit>
 8016aac:	69ab      	ldr	r3, [r5, #24]
 8016aae:	68ac      	ldr	r4, [r5, #8]
 8016ab0:	b913      	cbnz	r3, 8016ab8 <_puts_r+0x1c>
 8016ab2:	4628      	mov	r0, r5
 8016ab4:	f000 fa52 	bl	8016f5c <__sinit>
 8016ab8:	4b2c      	ldr	r3, [pc, #176]	; (8016b6c <_puts_r+0xd0>)
 8016aba:	429c      	cmp	r4, r3
 8016abc:	d120      	bne.n	8016b00 <_puts_r+0x64>
 8016abe:	686c      	ldr	r4, [r5, #4]
 8016ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ac2:	07db      	lsls	r3, r3, #31
 8016ac4:	d405      	bmi.n	8016ad2 <_puts_r+0x36>
 8016ac6:	89a3      	ldrh	r3, [r4, #12]
 8016ac8:	0598      	lsls	r0, r3, #22
 8016aca:	d402      	bmi.n	8016ad2 <_puts_r+0x36>
 8016acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ace:	f000 fae3 	bl	8017098 <__retarget_lock_acquire_recursive>
 8016ad2:	89a3      	ldrh	r3, [r4, #12]
 8016ad4:	0719      	lsls	r1, r3, #28
 8016ad6:	d51d      	bpl.n	8016b14 <_puts_r+0x78>
 8016ad8:	6923      	ldr	r3, [r4, #16]
 8016ada:	b1db      	cbz	r3, 8016b14 <_puts_r+0x78>
 8016adc:	3e01      	subs	r6, #1
 8016ade:	68a3      	ldr	r3, [r4, #8]
 8016ae0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016ae4:	3b01      	subs	r3, #1
 8016ae6:	60a3      	str	r3, [r4, #8]
 8016ae8:	bb39      	cbnz	r1, 8016b3a <_puts_r+0x9e>
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	da38      	bge.n	8016b60 <_puts_r+0xc4>
 8016aee:	4622      	mov	r2, r4
 8016af0:	210a      	movs	r1, #10
 8016af2:	4628      	mov	r0, r5
 8016af4:	f000 f858 	bl	8016ba8 <__swbuf_r>
 8016af8:	3001      	adds	r0, #1
 8016afa:	d011      	beq.n	8016b20 <_puts_r+0x84>
 8016afc:	250a      	movs	r5, #10
 8016afe:	e011      	b.n	8016b24 <_puts_r+0x88>
 8016b00:	4b1b      	ldr	r3, [pc, #108]	; (8016b70 <_puts_r+0xd4>)
 8016b02:	429c      	cmp	r4, r3
 8016b04:	d101      	bne.n	8016b0a <_puts_r+0x6e>
 8016b06:	68ac      	ldr	r4, [r5, #8]
 8016b08:	e7da      	b.n	8016ac0 <_puts_r+0x24>
 8016b0a:	4b1a      	ldr	r3, [pc, #104]	; (8016b74 <_puts_r+0xd8>)
 8016b0c:	429c      	cmp	r4, r3
 8016b0e:	bf08      	it	eq
 8016b10:	68ec      	ldreq	r4, [r5, #12]
 8016b12:	e7d5      	b.n	8016ac0 <_puts_r+0x24>
 8016b14:	4621      	mov	r1, r4
 8016b16:	4628      	mov	r0, r5
 8016b18:	f000 f898 	bl	8016c4c <__swsetup_r>
 8016b1c:	2800      	cmp	r0, #0
 8016b1e:	d0dd      	beq.n	8016adc <_puts_r+0x40>
 8016b20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b26:	07da      	lsls	r2, r3, #31
 8016b28:	d405      	bmi.n	8016b36 <_puts_r+0x9a>
 8016b2a:	89a3      	ldrh	r3, [r4, #12]
 8016b2c:	059b      	lsls	r3, r3, #22
 8016b2e:	d402      	bmi.n	8016b36 <_puts_r+0x9a>
 8016b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b32:	f000 fab2 	bl	801709a <__retarget_lock_release_recursive>
 8016b36:	4628      	mov	r0, r5
 8016b38:	bd70      	pop	{r4, r5, r6, pc}
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	da04      	bge.n	8016b48 <_puts_r+0xac>
 8016b3e:	69a2      	ldr	r2, [r4, #24]
 8016b40:	429a      	cmp	r2, r3
 8016b42:	dc06      	bgt.n	8016b52 <_puts_r+0xb6>
 8016b44:	290a      	cmp	r1, #10
 8016b46:	d004      	beq.n	8016b52 <_puts_r+0xb6>
 8016b48:	6823      	ldr	r3, [r4, #0]
 8016b4a:	1c5a      	adds	r2, r3, #1
 8016b4c:	6022      	str	r2, [r4, #0]
 8016b4e:	7019      	strb	r1, [r3, #0]
 8016b50:	e7c5      	b.n	8016ade <_puts_r+0x42>
 8016b52:	4622      	mov	r2, r4
 8016b54:	4628      	mov	r0, r5
 8016b56:	f000 f827 	bl	8016ba8 <__swbuf_r>
 8016b5a:	3001      	adds	r0, #1
 8016b5c:	d1bf      	bne.n	8016ade <_puts_r+0x42>
 8016b5e:	e7df      	b.n	8016b20 <_puts_r+0x84>
 8016b60:	6823      	ldr	r3, [r4, #0]
 8016b62:	250a      	movs	r5, #10
 8016b64:	1c5a      	adds	r2, r3, #1
 8016b66:	6022      	str	r2, [r4, #0]
 8016b68:	701d      	strb	r5, [r3, #0]
 8016b6a:	e7db      	b.n	8016b24 <_puts_r+0x88>
 8016b6c:	080176e4 	.word	0x080176e4
 8016b70:	08017704 	.word	0x08017704
 8016b74:	080176c4 	.word	0x080176c4

08016b78 <puts>:
 8016b78:	4b02      	ldr	r3, [pc, #8]	; (8016b84 <puts+0xc>)
 8016b7a:	4601      	mov	r1, r0
 8016b7c:	6818      	ldr	r0, [r3, #0]
 8016b7e:	f7ff bf8d 	b.w	8016a9c <_puts_r>
 8016b82:	bf00      	nop
 8016b84:	240000a4 	.word	0x240000a4

08016b88 <_sbrk_r>:
 8016b88:	b538      	push	{r3, r4, r5, lr}
 8016b8a:	4d06      	ldr	r5, [pc, #24]	; (8016ba4 <_sbrk_r+0x1c>)
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	4604      	mov	r4, r0
 8016b90:	4608      	mov	r0, r1
 8016b92:	602b      	str	r3, [r5, #0]
 8016b94:	f7ec ffce 	bl	8003b34 <_sbrk>
 8016b98:	1c43      	adds	r3, r0, #1
 8016b9a:	d102      	bne.n	8016ba2 <_sbrk_r+0x1a>
 8016b9c:	682b      	ldr	r3, [r5, #0]
 8016b9e:	b103      	cbz	r3, 8016ba2 <_sbrk_r+0x1a>
 8016ba0:	6023      	str	r3, [r4, #0]
 8016ba2:	bd38      	pop	{r3, r4, r5, pc}
 8016ba4:	24005a6c 	.word	0x24005a6c

08016ba8 <__swbuf_r>:
 8016ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016baa:	460e      	mov	r6, r1
 8016bac:	4614      	mov	r4, r2
 8016bae:	4605      	mov	r5, r0
 8016bb0:	b118      	cbz	r0, 8016bba <__swbuf_r+0x12>
 8016bb2:	6983      	ldr	r3, [r0, #24]
 8016bb4:	b90b      	cbnz	r3, 8016bba <__swbuf_r+0x12>
 8016bb6:	f000 f9d1 	bl	8016f5c <__sinit>
 8016bba:	4b21      	ldr	r3, [pc, #132]	; (8016c40 <__swbuf_r+0x98>)
 8016bbc:	429c      	cmp	r4, r3
 8016bbe:	d12b      	bne.n	8016c18 <__swbuf_r+0x70>
 8016bc0:	686c      	ldr	r4, [r5, #4]
 8016bc2:	69a3      	ldr	r3, [r4, #24]
 8016bc4:	60a3      	str	r3, [r4, #8]
 8016bc6:	89a3      	ldrh	r3, [r4, #12]
 8016bc8:	071a      	lsls	r2, r3, #28
 8016bca:	d52f      	bpl.n	8016c2c <__swbuf_r+0x84>
 8016bcc:	6923      	ldr	r3, [r4, #16]
 8016bce:	b36b      	cbz	r3, 8016c2c <__swbuf_r+0x84>
 8016bd0:	6923      	ldr	r3, [r4, #16]
 8016bd2:	6820      	ldr	r0, [r4, #0]
 8016bd4:	1ac0      	subs	r0, r0, r3
 8016bd6:	6963      	ldr	r3, [r4, #20]
 8016bd8:	b2f6      	uxtb	r6, r6
 8016bda:	4283      	cmp	r3, r0
 8016bdc:	4637      	mov	r7, r6
 8016bde:	dc04      	bgt.n	8016bea <__swbuf_r+0x42>
 8016be0:	4621      	mov	r1, r4
 8016be2:	4628      	mov	r0, r5
 8016be4:	f000 f926 	bl	8016e34 <_fflush_r>
 8016be8:	bb30      	cbnz	r0, 8016c38 <__swbuf_r+0x90>
 8016bea:	68a3      	ldr	r3, [r4, #8]
 8016bec:	3b01      	subs	r3, #1
 8016bee:	60a3      	str	r3, [r4, #8]
 8016bf0:	6823      	ldr	r3, [r4, #0]
 8016bf2:	1c5a      	adds	r2, r3, #1
 8016bf4:	6022      	str	r2, [r4, #0]
 8016bf6:	701e      	strb	r6, [r3, #0]
 8016bf8:	6963      	ldr	r3, [r4, #20]
 8016bfa:	3001      	adds	r0, #1
 8016bfc:	4283      	cmp	r3, r0
 8016bfe:	d004      	beq.n	8016c0a <__swbuf_r+0x62>
 8016c00:	89a3      	ldrh	r3, [r4, #12]
 8016c02:	07db      	lsls	r3, r3, #31
 8016c04:	d506      	bpl.n	8016c14 <__swbuf_r+0x6c>
 8016c06:	2e0a      	cmp	r6, #10
 8016c08:	d104      	bne.n	8016c14 <__swbuf_r+0x6c>
 8016c0a:	4621      	mov	r1, r4
 8016c0c:	4628      	mov	r0, r5
 8016c0e:	f000 f911 	bl	8016e34 <_fflush_r>
 8016c12:	b988      	cbnz	r0, 8016c38 <__swbuf_r+0x90>
 8016c14:	4638      	mov	r0, r7
 8016c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c18:	4b0a      	ldr	r3, [pc, #40]	; (8016c44 <__swbuf_r+0x9c>)
 8016c1a:	429c      	cmp	r4, r3
 8016c1c:	d101      	bne.n	8016c22 <__swbuf_r+0x7a>
 8016c1e:	68ac      	ldr	r4, [r5, #8]
 8016c20:	e7cf      	b.n	8016bc2 <__swbuf_r+0x1a>
 8016c22:	4b09      	ldr	r3, [pc, #36]	; (8016c48 <__swbuf_r+0xa0>)
 8016c24:	429c      	cmp	r4, r3
 8016c26:	bf08      	it	eq
 8016c28:	68ec      	ldreq	r4, [r5, #12]
 8016c2a:	e7ca      	b.n	8016bc2 <__swbuf_r+0x1a>
 8016c2c:	4621      	mov	r1, r4
 8016c2e:	4628      	mov	r0, r5
 8016c30:	f000 f80c 	bl	8016c4c <__swsetup_r>
 8016c34:	2800      	cmp	r0, #0
 8016c36:	d0cb      	beq.n	8016bd0 <__swbuf_r+0x28>
 8016c38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016c3c:	e7ea      	b.n	8016c14 <__swbuf_r+0x6c>
 8016c3e:	bf00      	nop
 8016c40:	080176e4 	.word	0x080176e4
 8016c44:	08017704 	.word	0x08017704
 8016c48:	080176c4 	.word	0x080176c4

08016c4c <__swsetup_r>:
 8016c4c:	4b32      	ldr	r3, [pc, #200]	; (8016d18 <__swsetup_r+0xcc>)
 8016c4e:	b570      	push	{r4, r5, r6, lr}
 8016c50:	681d      	ldr	r5, [r3, #0]
 8016c52:	4606      	mov	r6, r0
 8016c54:	460c      	mov	r4, r1
 8016c56:	b125      	cbz	r5, 8016c62 <__swsetup_r+0x16>
 8016c58:	69ab      	ldr	r3, [r5, #24]
 8016c5a:	b913      	cbnz	r3, 8016c62 <__swsetup_r+0x16>
 8016c5c:	4628      	mov	r0, r5
 8016c5e:	f000 f97d 	bl	8016f5c <__sinit>
 8016c62:	4b2e      	ldr	r3, [pc, #184]	; (8016d1c <__swsetup_r+0xd0>)
 8016c64:	429c      	cmp	r4, r3
 8016c66:	d10f      	bne.n	8016c88 <__swsetup_r+0x3c>
 8016c68:	686c      	ldr	r4, [r5, #4]
 8016c6a:	89a3      	ldrh	r3, [r4, #12]
 8016c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c70:	0719      	lsls	r1, r3, #28
 8016c72:	d42c      	bmi.n	8016cce <__swsetup_r+0x82>
 8016c74:	06dd      	lsls	r5, r3, #27
 8016c76:	d411      	bmi.n	8016c9c <__swsetup_r+0x50>
 8016c78:	2309      	movs	r3, #9
 8016c7a:	6033      	str	r3, [r6, #0]
 8016c7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016c80:	81a3      	strh	r3, [r4, #12]
 8016c82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c86:	e03e      	b.n	8016d06 <__swsetup_r+0xba>
 8016c88:	4b25      	ldr	r3, [pc, #148]	; (8016d20 <__swsetup_r+0xd4>)
 8016c8a:	429c      	cmp	r4, r3
 8016c8c:	d101      	bne.n	8016c92 <__swsetup_r+0x46>
 8016c8e:	68ac      	ldr	r4, [r5, #8]
 8016c90:	e7eb      	b.n	8016c6a <__swsetup_r+0x1e>
 8016c92:	4b24      	ldr	r3, [pc, #144]	; (8016d24 <__swsetup_r+0xd8>)
 8016c94:	429c      	cmp	r4, r3
 8016c96:	bf08      	it	eq
 8016c98:	68ec      	ldreq	r4, [r5, #12]
 8016c9a:	e7e6      	b.n	8016c6a <__swsetup_r+0x1e>
 8016c9c:	0758      	lsls	r0, r3, #29
 8016c9e:	d512      	bpl.n	8016cc6 <__swsetup_r+0x7a>
 8016ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ca2:	b141      	cbz	r1, 8016cb6 <__swsetup_r+0x6a>
 8016ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ca8:	4299      	cmp	r1, r3
 8016caa:	d002      	beq.n	8016cb2 <__swsetup_r+0x66>
 8016cac:	4630      	mov	r0, r6
 8016cae:	f7ff fe15 	bl	80168dc <_free_r>
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	6363      	str	r3, [r4, #52]	; 0x34
 8016cb6:	89a3      	ldrh	r3, [r4, #12]
 8016cb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016cbc:	81a3      	strh	r3, [r4, #12]
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	6063      	str	r3, [r4, #4]
 8016cc2:	6923      	ldr	r3, [r4, #16]
 8016cc4:	6023      	str	r3, [r4, #0]
 8016cc6:	89a3      	ldrh	r3, [r4, #12]
 8016cc8:	f043 0308 	orr.w	r3, r3, #8
 8016ccc:	81a3      	strh	r3, [r4, #12]
 8016cce:	6923      	ldr	r3, [r4, #16]
 8016cd0:	b94b      	cbnz	r3, 8016ce6 <__swsetup_r+0x9a>
 8016cd2:	89a3      	ldrh	r3, [r4, #12]
 8016cd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016cdc:	d003      	beq.n	8016ce6 <__swsetup_r+0x9a>
 8016cde:	4621      	mov	r1, r4
 8016ce0:	4630      	mov	r0, r6
 8016ce2:	f000 fa01 	bl	80170e8 <__smakebuf_r>
 8016ce6:	89a0      	ldrh	r0, [r4, #12]
 8016ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016cec:	f010 0301 	ands.w	r3, r0, #1
 8016cf0:	d00a      	beq.n	8016d08 <__swsetup_r+0xbc>
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	60a3      	str	r3, [r4, #8]
 8016cf6:	6963      	ldr	r3, [r4, #20]
 8016cf8:	425b      	negs	r3, r3
 8016cfa:	61a3      	str	r3, [r4, #24]
 8016cfc:	6923      	ldr	r3, [r4, #16]
 8016cfe:	b943      	cbnz	r3, 8016d12 <__swsetup_r+0xc6>
 8016d00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016d04:	d1ba      	bne.n	8016c7c <__swsetup_r+0x30>
 8016d06:	bd70      	pop	{r4, r5, r6, pc}
 8016d08:	0781      	lsls	r1, r0, #30
 8016d0a:	bf58      	it	pl
 8016d0c:	6963      	ldrpl	r3, [r4, #20]
 8016d0e:	60a3      	str	r3, [r4, #8]
 8016d10:	e7f4      	b.n	8016cfc <__swsetup_r+0xb0>
 8016d12:	2000      	movs	r0, #0
 8016d14:	e7f7      	b.n	8016d06 <__swsetup_r+0xba>
 8016d16:	bf00      	nop
 8016d18:	240000a4 	.word	0x240000a4
 8016d1c:	080176e4 	.word	0x080176e4
 8016d20:	08017704 	.word	0x08017704
 8016d24:	080176c4 	.word	0x080176c4

08016d28 <__sflush_r>:
 8016d28:	898a      	ldrh	r2, [r1, #12]
 8016d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d2e:	4605      	mov	r5, r0
 8016d30:	0710      	lsls	r0, r2, #28
 8016d32:	460c      	mov	r4, r1
 8016d34:	d458      	bmi.n	8016de8 <__sflush_r+0xc0>
 8016d36:	684b      	ldr	r3, [r1, #4]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	dc05      	bgt.n	8016d48 <__sflush_r+0x20>
 8016d3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	dc02      	bgt.n	8016d48 <__sflush_r+0x20>
 8016d42:	2000      	movs	r0, #0
 8016d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d4a:	2e00      	cmp	r6, #0
 8016d4c:	d0f9      	beq.n	8016d42 <__sflush_r+0x1a>
 8016d4e:	2300      	movs	r3, #0
 8016d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016d54:	682f      	ldr	r7, [r5, #0]
 8016d56:	602b      	str	r3, [r5, #0]
 8016d58:	d032      	beq.n	8016dc0 <__sflush_r+0x98>
 8016d5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016d5c:	89a3      	ldrh	r3, [r4, #12]
 8016d5e:	075a      	lsls	r2, r3, #29
 8016d60:	d505      	bpl.n	8016d6e <__sflush_r+0x46>
 8016d62:	6863      	ldr	r3, [r4, #4]
 8016d64:	1ac0      	subs	r0, r0, r3
 8016d66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016d68:	b10b      	cbz	r3, 8016d6e <__sflush_r+0x46>
 8016d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016d6c:	1ac0      	subs	r0, r0, r3
 8016d6e:	2300      	movs	r3, #0
 8016d70:	4602      	mov	r2, r0
 8016d72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d74:	6a21      	ldr	r1, [r4, #32]
 8016d76:	4628      	mov	r0, r5
 8016d78:	47b0      	blx	r6
 8016d7a:	1c43      	adds	r3, r0, #1
 8016d7c:	89a3      	ldrh	r3, [r4, #12]
 8016d7e:	d106      	bne.n	8016d8e <__sflush_r+0x66>
 8016d80:	6829      	ldr	r1, [r5, #0]
 8016d82:	291d      	cmp	r1, #29
 8016d84:	d82c      	bhi.n	8016de0 <__sflush_r+0xb8>
 8016d86:	4a2a      	ldr	r2, [pc, #168]	; (8016e30 <__sflush_r+0x108>)
 8016d88:	40ca      	lsrs	r2, r1
 8016d8a:	07d6      	lsls	r6, r2, #31
 8016d8c:	d528      	bpl.n	8016de0 <__sflush_r+0xb8>
 8016d8e:	2200      	movs	r2, #0
 8016d90:	6062      	str	r2, [r4, #4]
 8016d92:	04d9      	lsls	r1, r3, #19
 8016d94:	6922      	ldr	r2, [r4, #16]
 8016d96:	6022      	str	r2, [r4, #0]
 8016d98:	d504      	bpl.n	8016da4 <__sflush_r+0x7c>
 8016d9a:	1c42      	adds	r2, r0, #1
 8016d9c:	d101      	bne.n	8016da2 <__sflush_r+0x7a>
 8016d9e:	682b      	ldr	r3, [r5, #0]
 8016da0:	b903      	cbnz	r3, 8016da4 <__sflush_r+0x7c>
 8016da2:	6560      	str	r0, [r4, #84]	; 0x54
 8016da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016da6:	602f      	str	r7, [r5, #0]
 8016da8:	2900      	cmp	r1, #0
 8016daa:	d0ca      	beq.n	8016d42 <__sflush_r+0x1a>
 8016dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016db0:	4299      	cmp	r1, r3
 8016db2:	d002      	beq.n	8016dba <__sflush_r+0x92>
 8016db4:	4628      	mov	r0, r5
 8016db6:	f7ff fd91 	bl	80168dc <_free_r>
 8016dba:	2000      	movs	r0, #0
 8016dbc:	6360      	str	r0, [r4, #52]	; 0x34
 8016dbe:	e7c1      	b.n	8016d44 <__sflush_r+0x1c>
 8016dc0:	6a21      	ldr	r1, [r4, #32]
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	4628      	mov	r0, r5
 8016dc6:	47b0      	blx	r6
 8016dc8:	1c41      	adds	r1, r0, #1
 8016dca:	d1c7      	bne.n	8016d5c <__sflush_r+0x34>
 8016dcc:	682b      	ldr	r3, [r5, #0]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d0c4      	beq.n	8016d5c <__sflush_r+0x34>
 8016dd2:	2b1d      	cmp	r3, #29
 8016dd4:	d001      	beq.n	8016dda <__sflush_r+0xb2>
 8016dd6:	2b16      	cmp	r3, #22
 8016dd8:	d101      	bne.n	8016dde <__sflush_r+0xb6>
 8016dda:	602f      	str	r7, [r5, #0]
 8016ddc:	e7b1      	b.n	8016d42 <__sflush_r+0x1a>
 8016dde:	89a3      	ldrh	r3, [r4, #12]
 8016de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016de4:	81a3      	strh	r3, [r4, #12]
 8016de6:	e7ad      	b.n	8016d44 <__sflush_r+0x1c>
 8016de8:	690f      	ldr	r7, [r1, #16]
 8016dea:	2f00      	cmp	r7, #0
 8016dec:	d0a9      	beq.n	8016d42 <__sflush_r+0x1a>
 8016dee:	0793      	lsls	r3, r2, #30
 8016df0:	680e      	ldr	r6, [r1, #0]
 8016df2:	bf08      	it	eq
 8016df4:	694b      	ldreq	r3, [r1, #20]
 8016df6:	600f      	str	r7, [r1, #0]
 8016df8:	bf18      	it	ne
 8016dfa:	2300      	movne	r3, #0
 8016dfc:	eba6 0807 	sub.w	r8, r6, r7
 8016e00:	608b      	str	r3, [r1, #8]
 8016e02:	f1b8 0f00 	cmp.w	r8, #0
 8016e06:	dd9c      	ble.n	8016d42 <__sflush_r+0x1a>
 8016e08:	6a21      	ldr	r1, [r4, #32]
 8016e0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016e0c:	4643      	mov	r3, r8
 8016e0e:	463a      	mov	r2, r7
 8016e10:	4628      	mov	r0, r5
 8016e12:	47b0      	blx	r6
 8016e14:	2800      	cmp	r0, #0
 8016e16:	dc06      	bgt.n	8016e26 <__sflush_r+0xfe>
 8016e18:	89a3      	ldrh	r3, [r4, #12]
 8016e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e1e:	81a3      	strh	r3, [r4, #12]
 8016e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e24:	e78e      	b.n	8016d44 <__sflush_r+0x1c>
 8016e26:	4407      	add	r7, r0
 8016e28:	eba8 0800 	sub.w	r8, r8, r0
 8016e2c:	e7e9      	b.n	8016e02 <__sflush_r+0xda>
 8016e2e:	bf00      	nop
 8016e30:	20400001 	.word	0x20400001

08016e34 <_fflush_r>:
 8016e34:	b538      	push	{r3, r4, r5, lr}
 8016e36:	690b      	ldr	r3, [r1, #16]
 8016e38:	4605      	mov	r5, r0
 8016e3a:	460c      	mov	r4, r1
 8016e3c:	b913      	cbnz	r3, 8016e44 <_fflush_r+0x10>
 8016e3e:	2500      	movs	r5, #0
 8016e40:	4628      	mov	r0, r5
 8016e42:	bd38      	pop	{r3, r4, r5, pc}
 8016e44:	b118      	cbz	r0, 8016e4e <_fflush_r+0x1a>
 8016e46:	6983      	ldr	r3, [r0, #24]
 8016e48:	b90b      	cbnz	r3, 8016e4e <_fflush_r+0x1a>
 8016e4a:	f000 f887 	bl	8016f5c <__sinit>
 8016e4e:	4b14      	ldr	r3, [pc, #80]	; (8016ea0 <_fflush_r+0x6c>)
 8016e50:	429c      	cmp	r4, r3
 8016e52:	d11b      	bne.n	8016e8c <_fflush_r+0x58>
 8016e54:	686c      	ldr	r4, [r5, #4]
 8016e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d0ef      	beq.n	8016e3e <_fflush_r+0xa>
 8016e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016e60:	07d0      	lsls	r0, r2, #31
 8016e62:	d404      	bmi.n	8016e6e <_fflush_r+0x3a>
 8016e64:	0599      	lsls	r1, r3, #22
 8016e66:	d402      	bmi.n	8016e6e <_fflush_r+0x3a>
 8016e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e6a:	f000 f915 	bl	8017098 <__retarget_lock_acquire_recursive>
 8016e6e:	4628      	mov	r0, r5
 8016e70:	4621      	mov	r1, r4
 8016e72:	f7ff ff59 	bl	8016d28 <__sflush_r>
 8016e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e78:	07da      	lsls	r2, r3, #31
 8016e7a:	4605      	mov	r5, r0
 8016e7c:	d4e0      	bmi.n	8016e40 <_fflush_r+0xc>
 8016e7e:	89a3      	ldrh	r3, [r4, #12]
 8016e80:	059b      	lsls	r3, r3, #22
 8016e82:	d4dd      	bmi.n	8016e40 <_fflush_r+0xc>
 8016e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e86:	f000 f908 	bl	801709a <__retarget_lock_release_recursive>
 8016e8a:	e7d9      	b.n	8016e40 <_fflush_r+0xc>
 8016e8c:	4b05      	ldr	r3, [pc, #20]	; (8016ea4 <_fflush_r+0x70>)
 8016e8e:	429c      	cmp	r4, r3
 8016e90:	d101      	bne.n	8016e96 <_fflush_r+0x62>
 8016e92:	68ac      	ldr	r4, [r5, #8]
 8016e94:	e7df      	b.n	8016e56 <_fflush_r+0x22>
 8016e96:	4b04      	ldr	r3, [pc, #16]	; (8016ea8 <_fflush_r+0x74>)
 8016e98:	429c      	cmp	r4, r3
 8016e9a:	bf08      	it	eq
 8016e9c:	68ec      	ldreq	r4, [r5, #12]
 8016e9e:	e7da      	b.n	8016e56 <_fflush_r+0x22>
 8016ea0:	080176e4 	.word	0x080176e4
 8016ea4:	08017704 	.word	0x08017704
 8016ea8:	080176c4 	.word	0x080176c4

08016eac <std>:
 8016eac:	2300      	movs	r3, #0
 8016eae:	b510      	push	{r4, lr}
 8016eb0:	4604      	mov	r4, r0
 8016eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8016eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016eba:	6083      	str	r3, [r0, #8]
 8016ebc:	8181      	strh	r1, [r0, #12]
 8016ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8016ec0:	81c2      	strh	r2, [r0, #14]
 8016ec2:	6183      	str	r3, [r0, #24]
 8016ec4:	4619      	mov	r1, r3
 8016ec6:	2208      	movs	r2, #8
 8016ec8:	305c      	adds	r0, #92	; 0x5c
 8016eca:	f7ff fcff 	bl	80168cc <memset>
 8016ece:	4b05      	ldr	r3, [pc, #20]	; (8016ee4 <std+0x38>)
 8016ed0:	6263      	str	r3, [r4, #36]	; 0x24
 8016ed2:	4b05      	ldr	r3, [pc, #20]	; (8016ee8 <std+0x3c>)
 8016ed4:	62a3      	str	r3, [r4, #40]	; 0x28
 8016ed6:	4b05      	ldr	r3, [pc, #20]	; (8016eec <std+0x40>)
 8016ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016eda:	4b05      	ldr	r3, [pc, #20]	; (8016ef0 <std+0x44>)
 8016edc:	6224      	str	r4, [r4, #32]
 8016ede:	6323      	str	r3, [r4, #48]	; 0x30
 8016ee0:	bd10      	pop	{r4, pc}
 8016ee2:	bf00      	nop
 8016ee4:	08017181 	.word	0x08017181
 8016ee8:	080171a3 	.word	0x080171a3
 8016eec:	080171db 	.word	0x080171db
 8016ef0:	080171ff 	.word	0x080171ff

08016ef4 <_cleanup_r>:
 8016ef4:	4901      	ldr	r1, [pc, #4]	; (8016efc <_cleanup_r+0x8>)
 8016ef6:	f000 b8af 	b.w	8017058 <_fwalk_reent>
 8016efa:	bf00      	nop
 8016efc:	08016e35 	.word	0x08016e35

08016f00 <__sfmoreglue>:
 8016f00:	b570      	push	{r4, r5, r6, lr}
 8016f02:	2268      	movs	r2, #104	; 0x68
 8016f04:	1e4d      	subs	r5, r1, #1
 8016f06:	4355      	muls	r5, r2
 8016f08:	460e      	mov	r6, r1
 8016f0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016f0e:	f7ff fd51 	bl	80169b4 <_malloc_r>
 8016f12:	4604      	mov	r4, r0
 8016f14:	b140      	cbz	r0, 8016f28 <__sfmoreglue+0x28>
 8016f16:	2100      	movs	r1, #0
 8016f18:	e9c0 1600 	strd	r1, r6, [r0]
 8016f1c:	300c      	adds	r0, #12
 8016f1e:	60a0      	str	r0, [r4, #8]
 8016f20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016f24:	f7ff fcd2 	bl	80168cc <memset>
 8016f28:	4620      	mov	r0, r4
 8016f2a:	bd70      	pop	{r4, r5, r6, pc}

08016f2c <__sfp_lock_acquire>:
 8016f2c:	4801      	ldr	r0, [pc, #4]	; (8016f34 <__sfp_lock_acquire+0x8>)
 8016f2e:	f000 b8b3 	b.w	8017098 <__retarget_lock_acquire_recursive>
 8016f32:	bf00      	nop
 8016f34:	24005a69 	.word	0x24005a69

08016f38 <__sfp_lock_release>:
 8016f38:	4801      	ldr	r0, [pc, #4]	; (8016f40 <__sfp_lock_release+0x8>)
 8016f3a:	f000 b8ae 	b.w	801709a <__retarget_lock_release_recursive>
 8016f3e:	bf00      	nop
 8016f40:	24005a69 	.word	0x24005a69

08016f44 <__sinit_lock_acquire>:
 8016f44:	4801      	ldr	r0, [pc, #4]	; (8016f4c <__sinit_lock_acquire+0x8>)
 8016f46:	f000 b8a7 	b.w	8017098 <__retarget_lock_acquire_recursive>
 8016f4a:	bf00      	nop
 8016f4c:	24005a6a 	.word	0x24005a6a

08016f50 <__sinit_lock_release>:
 8016f50:	4801      	ldr	r0, [pc, #4]	; (8016f58 <__sinit_lock_release+0x8>)
 8016f52:	f000 b8a2 	b.w	801709a <__retarget_lock_release_recursive>
 8016f56:	bf00      	nop
 8016f58:	24005a6a 	.word	0x24005a6a

08016f5c <__sinit>:
 8016f5c:	b510      	push	{r4, lr}
 8016f5e:	4604      	mov	r4, r0
 8016f60:	f7ff fff0 	bl	8016f44 <__sinit_lock_acquire>
 8016f64:	69a3      	ldr	r3, [r4, #24]
 8016f66:	b11b      	cbz	r3, 8016f70 <__sinit+0x14>
 8016f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f6c:	f7ff bff0 	b.w	8016f50 <__sinit_lock_release>
 8016f70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016f74:	6523      	str	r3, [r4, #80]	; 0x50
 8016f76:	4b13      	ldr	r3, [pc, #76]	; (8016fc4 <__sinit+0x68>)
 8016f78:	4a13      	ldr	r2, [pc, #76]	; (8016fc8 <__sinit+0x6c>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8016f7e:	42a3      	cmp	r3, r4
 8016f80:	bf04      	itt	eq
 8016f82:	2301      	moveq	r3, #1
 8016f84:	61a3      	streq	r3, [r4, #24]
 8016f86:	4620      	mov	r0, r4
 8016f88:	f000 f820 	bl	8016fcc <__sfp>
 8016f8c:	6060      	str	r0, [r4, #4]
 8016f8e:	4620      	mov	r0, r4
 8016f90:	f000 f81c 	bl	8016fcc <__sfp>
 8016f94:	60a0      	str	r0, [r4, #8]
 8016f96:	4620      	mov	r0, r4
 8016f98:	f000 f818 	bl	8016fcc <__sfp>
 8016f9c:	2200      	movs	r2, #0
 8016f9e:	60e0      	str	r0, [r4, #12]
 8016fa0:	2104      	movs	r1, #4
 8016fa2:	6860      	ldr	r0, [r4, #4]
 8016fa4:	f7ff ff82 	bl	8016eac <std>
 8016fa8:	68a0      	ldr	r0, [r4, #8]
 8016faa:	2201      	movs	r2, #1
 8016fac:	2109      	movs	r1, #9
 8016fae:	f7ff ff7d 	bl	8016eac <std>
 8016fb2:	68e0      	ldr	r0, [r4, #12]
 8016fb4:	2202      	movs	r2, #2
 8016fb6:	2112      	movs	r1, #18
 8016fb8:	f7ff ff78 	bl	8016eac <std>
 8016fbc:	2301      	movs	r3, #1
 8016fbe:	61a3      	str	r3, [r4, #24]
 8016fc0:	e7d2      	b.n	8016f68 <__sinit+0xc>
 8016fc2:	bf00      	nop
 8016fc4:	080176c0 	.word	0x080176c0
 8016fc8:	08016ef5 	.word	0x08016ef5

08016fcc <__sfp>:
 8016fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fce:	4607      	mov	r7, r0
 8016fd0:	f7ff ffac 	bl	8016f2c <__sfp_lock_acquire>
 8016fd4:	4b1e      	ldr	r3, [pc, #120]	; (8017050 <__sfp+0x84>)
 8016fd6:	681e      	ldr	r6, [r3, #0]
 8016fd8:	69b3      	ldr	r3, [r6, #24]
 8016fda:	b913      	cbnz	r3, 8016fe2 <__sfp+0x16>
 8016fdc:	4630      	mov	r0, r6
 8016fde:	f7ff ffbd 	bl	8016f5c <__sinit>
 8016fe2:	3648      	adds	r6, #72	; 0x48
 8016fe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016fe8:	3b01      	subs	r3, #1
 8016fea:	d503      	bpl.n	8016ff4 <__sfp+0x28>
 8016fec:	6833      	ldr	r3, [r6, #0]
 8016fee:	b30b      	cbz	r3, 8017034 <__sfp+0x68>
 8016ff0:	6836      	ldr	r6, [r6, #0]
 8016ff2:	e7f7      	b.n	8016fe4 <__sfp+0x18>
 8016ff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016ff8:	b9d5      	cbnz	r5, 8017030 <__sfp+0x64>
 8016ffa:	4b16      	ldr	r3, [pc, #88]	; (8017054 <__sfp+0x88>)
 8016ffc:	60e3      	str	r3, [r4, #12]
 8016ffe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017002:	6665      	str	r5, [r4, #100]	; 0x64
 8017004:	f000 f847 	bl	8017096 <__retarget_lock_init_recursive>
 8017008:	f7ff ff96 	bl	8016f38 <__sfp_lock_release>
 801700c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017010:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017014:	6025      	str	r5, [r4, #0]
 8017016:	61a5      	str	r5, [r4, #24]
 8017018:	2208      	movs	r2, #8
 801701a:	4629      	mov	r1, r5
 801701c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017020:	f7ff fc54 	bl	80168cc <memset>
 8017024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801702c:	4620      	mov	r0, r4
 801702e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017030:	3468      	adds	r4, #104	; 0x68
 8017032:	e7d9      	b.n	8016fe8 <__sfp+0x1c>
 8017034:	2104      	movs	r1, #4
 8017036:	4638      	mov	r0, r7
 8017038:	f7ff ff62 	bl	8016f00 <__sfmoreglue>
 801703c:	4604      	mov	r4, r0
 801703e:	6030      	str	r0, [r6, #0]
 8017040:	2800      	cmp	r0, #0
 8017042:	d1d5      	bne.n	8016ff0 <__sfp+0x24>
 8017044:	f7ff ff78 	bl	8016f38 <__sfp_lock_release>
 8017048:	230c      	movs	r3, #12
 801704a:	603b      	str	r3, [r7, #0]
 801704c:	e7ee      	b.n	801702c <__sfp+0x60>
 801704e:	bf00      	nop
 8017050:	080176c0 	.word	0x080176c0
 8017054:	ffff0001 	.word	0xffff0001

08017058 <_fwalk_reent>:
 8017058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801705c:	4606      	mov	r6, r0
 801705e:	4688      	mov	r8, r1
 8017060:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017064:	2700      	movs	r7, #0
 8017066:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801706a:	f1b9 0901 	subs.w	r9, r9, #1
 801706e:	d505      	bpl.n	801707c <_fwalk_reent+0x24>
 8017070:	6824      	ldr	r4, [r4, #0]
 8017072:	2c00      	cmp	r4, #0
 8017074:	d1f7      	bne.n	8017066 <_fwalk_reent+0xe>
 8017076:	4638      	mov	r0, r7
 8017078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801707c:	89ab      	ldrh	r3, [r5, #12]
 801707e:	2b01      	cmp	r3, #1
 8017080:	d907      	bls.n	8017092 <_fwalk_reent+0x3a>
 8017082:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017086:	3301      	adds	r3, #1
 8017088:	d003      	beq.n	8017092 <_fwalk_reent+0x3a>
 801708a:	4629      	mov	r1, r5
 801708c:	4630      	mov	r0, r6
 801708e:	47c0      	blx	r8
 8017090:	4307      	orrs	r7, r0
 8017092:	3568      	adds	r5, #104	; 0x68
 8017094:	e7e9      	b.n	801706a <_fwalk_reent+0x12>

08017096 <__retarget_lock_init_recursive>:
 8017096:	4770      	bx	lr

08017098 <__retarget_lock_acquire_recursive>:
 8017098:	4770      	bx	lr

0801709a <__retarget_lock_release_recursive>:
 801709a:	4770      	bx	lr

0801709c <__swhatbuf_r>:
 801709c:	b570      	push	{r4, r5, r6, lr}
 801709e:	460e      	mov	r6, r1
 80170a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170a4:	2900      	cmp	r1, #0
 80170a6:	b096      	sub	sp, #88	; 0x58
 80170a8:	4614      	mov	r4, r2
 80170aa:	461d      	mov	r5, r3
 80170ac:	da08      	bge.n	80170c0 <__swhatbuf_r+0x24>
 80170ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80170b2:	2200      	movs	r2, #0
 80170b4:	602a      	str	r2, [r5, #0]
 80170b6:	061a      	lsls	r2, r3, #24
 80170b8:	d410      	bmi.n	80170dc <__swhatbuf_r+0x40>
 80170ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80170be:	e00e      	b.n	80170de <__swhatbuf_r+0x42>
 80170c0:	466a      	mov	r2, sp
 80170c2:	f000 f8c3 	bl	801724c <_fstat_r>
 80170c6:	2800      	cmp	r0, #0
 80170c8:	dbf1      	blt.n	80170ae <__swhatbuf_r+0x12>
 80170ca:	9a01      	ldr	r2, [sp, #4]
 80170cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80170d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80170d4:	425a      	negs	r2, r3
 80170d6:	415a      	adcs	r2, r3
 80170d8:	602a      	str	r2, [r5, #0]
 80170da:	e7ee      	b.n	80170ba <__swhatbuf_r+0x1e>
 80170dc:	2340      	movs	r3, #64	; 0x40
 80170de:	2000      	movs	r0, #0
 80170e0:	6023      	str	r3, [r4, #0]
 80170e2:	b016      	add	sp, #88	; 0x58
 80170e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080170e8 <__smakebuf_r>:
 80170e8:	898b      	ldrh	r3, [r1, #12]
 80170ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80170ec:	079d      	lsls	r5, r3, #30
 80170ee:	4606      	mov	r6, r0
 80170f0:	460c      	mov	r4, r1
 80170f2:	d507      	bpl.n	8017104 <__smakebuf_r+0x1c>
 80170f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80170f8:	6023      	str	r3, [r4, #0]
 80170fa:	6123      	str	r3, [r4, #16]
 80170fc:	2301      	movs	r3, #1
 80170fe:	6163      	str	r3, [r4, #20]
 8017100:	b002      	add	sp, #8
 8017102:	bd70      	pop	{r4, r5, r6, pc}
 8017104:	ab01      	add	r3, sp, #4
 8017106:	466a      	mov	r2, sp
 8017108:	f7ff ffc8 	bl	801709c <__swhatbuf_r>
 801710c:	9900      	ldr	r1, [sp, #0]
 801710e:	4605      	mov	r5, r0
 8017110:	4630      	mov	r0, r6
 8017112:	f7ff fc4f 	bl	80169b4 <_malloc_r>
 8017116:	b948      	cbnz	r0, 801712c <__smakebuf_r+0x44>
 8017118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801711c:	059a      	lsls	r2, r3, #22
 801711e:	d4ef      	bmi.n	8017100 <__smakebuf_r+0x18>
 8017120:	f023 0303 	bic.w	r3, r3, #3
 8017124:	f043 0302 	orr.w	r3, r3, #2
 8017128:	81a3      	strh	r3, [r4, #12]
 801712a:	e7e3      	b.n	80170f4 <__smakebuf_r+0xc>
 801712c:	4b0d      	ldr	r3, [pc, #52]	; (8017164 <__smakebuf_r+0x7c>)
 801712e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017130:	89a3      	ldrh	r3, [r4, #12]
 8017132:	6020      	str	r0, [r4, #0]
 8017134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017138:	81a3      	strh	r3, [r4, #12]
 801713a:	9b00      	ldr	r3, [sp, #0]
 801713c:	6163      	str	r3, [r4, #20]
 801713e:	9b01      	ldr	r3, [sp, #4]
 8017140:	6120      	str	r0, [r4, #16]
 8017142:	b15b      	cbz	r3, 801715c <__smakebuf_r+0x74>
 8017144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017148:	4630      	mov	r0, r6
 801714a:	f000 f891 	bl	8017270 <_isatty_r>
 801714e:	b128      	cbz	r0, 801715c <__smakebuf_r+0x74>
 8017150:	89a3      	ldrh	r3, [r4, #12]
 8017152:	f023 0303 	bic.w	r3, r3, #3
 8017156:	f043 0301 	orr.w	r3, r3, #1
 801715a:	81a3      	strh	r3, [r4, #12]
 801715c:	89a0      	ldrh	r0, [r4, #12]
 801715e:	4305      	orrs	r5, r0
 8017160:	81a5      	strh	r5, [r4, #12]
 8017162:	e7cd      	b.n	8017100 <__smakebuf_r+0x18>
 8017164:	08016ef5 	.word	0x08016ef5

08017168 <__malloc_lock>:
 8017168:	4801      	ldr	r0, [pc, #4]	; (8017170 <__malloc_lock+0x8>)
 801716a:	f7ff bf95 	b.w	8017098 <__retarget_lock_acquire_recursive>
 801716e:	bf00      	nop
 8017170:	24005a68 	.word	0x24005a68

08017174 <__malloc_unlock>:
 8017174:	4801      	ldr	r0, [pc, #4]	; (801717c <__malloc_unlock+0x8>)
 8017176:	f7ff bf90 	b.w	801709a <__retarget_lock_release_recursive>
 801717a:	bf00      	nop
 801717c:	24005a68 	.word	0x24005a68

08017180 <__sread>:
 8017180:	b510      	push	{r4, lr}
 8017182:	460c      	mov	r4, r1
 8017184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017188:	f000 f894 	bl	80172b4 <_read_r>
 801718c:	2800      	cmp	r0, #0
 801718e:	bfab      	itete	ge
 8017190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017192:	89a3      	ldrhlt	r3, [r4, #12]
 8017194:	181b      	addge	r3, r3, r0
 8017196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801719a:	bfac      	ite	ge
 801719c:	6563      	strge	r3, [r4, #84]	; 0x54
 801719e:	81a3      	strhlt	r3, [r4, #12]
 80171a0:	bd10      	pop	{r4, pc}

080171a2 <__swrite>:
 80171a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171a6:	461f      	mov	r7, r3
 80171a8:	898b      	ldrh	r3, [r1, #12]
 80171aa:	05db      	lsls	r3, r3, #23
 80171ac:	4605      	mov	r5, r0
 80171ae:	460c      	mov	r4, r1
 80171b0:	4616      	mov	r6, r2
 80171b2:	d505      	bpl.n	80171c0 <__swrite+0x1e>
 80171b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171b8:	2302      	movs	r3, #2
 80171ba:	2200      	movs	r2, #0
 80171bc:	f000 f868 	bl	8017290 <_lseek_r>
 80171c0:	89a3      	ldrh	r3, [r4, #12]
 80171c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80171c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80171ca:	81a3      	strh	r3, [r4, #12]
 80171cc:	4632      	mov	r2, r6
 80171ce:	463b      	mov	r3, r7
 80171d0:	4628      	mov	r0, r5
 80171d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171d6:	f000 b817 	b.w	8017208 <_write_r>

080171da <__sseek>:
 80171da:	b510      	push	{r4, lr}
 80171dc:	460c      	mov	r4, r1
 80171de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171e2:	f000 f855 	bl	8017290 <_lseek_r>
 80171e6:	1c43      	adds	r3, r0, #1
 80171e8:	89a3      	ldrh	r3, [r4, #12]
 80171ea:	bf15      	itete	ne
 80171ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80171ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80171f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80171f6:	81a3      	strheq	r3, [r4, #12]
 80171f8:	bf18      	it	ne
 80171fa:	81a3      	strhne	r3, [r4, #12]
 80171fc:	bd10      	pop	{r4, pc}

080171fe <__sclose>:
 80171fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017202:	f000 b813 	b.w	801722c <_close_r>
	...

08017208 <_write_r>:
 8017208:	b538      	push	{r3, r4, r5, lr}
 801720a:	4d07      	ldr	r5, [pc, #28]	; (8017228 <_write_r+0x20>)
 801720c:	4604      	mov	r4, r0
 801720e:	4608      	mov	r0, r1
 8017210:	4611      	mov	r1, r2
 8017212:	2200      	movs	r2, #0
 8017214:	602a      	str	r2, [r5, #0]
 8017216:	461a      	mov	r2, r3
 8017218:	f7ec fc3b 	bl	8003a92 <_write>
 801721c:	1c43      	adds	r3, r0, #1
 801721e:	d102      	bne.n	8017226 <_write_r+0x1e>
 8017220:	682b      	ldr	r3, [r5, #0]
 8017222:	b103      	cbz	r3, 8017226 <_write_r+0x1e>
 8017224:	6023      	str	r3, [r4, #0]
 8017226:	bd38      	pop	{r3, r4, r5, pc}
 8017228:	24005a6c 	.word	0x24005a6c

0801722c <_close_r>:
 801722c:	b538      	push	{r3, r4, r5, lr}
 801722e:	4d06      	ldr	r5, [pc, #24]	; (8017248 <_close_r+0x1c>)
 8017230:	2300      	movs	r3, #0
 8017232:	4604      	mov	r4, r0
 8017234:	4608      	mov	r0, r1
 8017236:	602b      	str	r3, [r5, #0]
 8017238:	f7ec fc47 	bl	8003aca <_close>
 801723c:	1c43      	adds	r3, r0, #1
 801723e:	d102      	bne.n	8017246 <_close_r+0x1a>
 8017240:	682b      	ldr	r3, [r5, #0]
 8017242:	b103      	cbz	r3, 8017246 <_close_r+0x1a>
 8017244:	6023      	str	r3, [r4, #0]
 8017246:	bd38      	pop	{r3, r4, r5, pc}
 8017248:	24005a6c 	.word	0x24005a6c

0801724c <_fstat_r>:
 801724c:	b538      	push	{r3, r4, r5, lr}
 801724e:	4d07      	ldr	r5, [pc, #28]	; (801726c <_fstat_r+0x20>)
 8017250:	2300      	movs	r3, #0
 8017252:	4604      	mov	r4, r0
 8017254:	4608      	mov	r0, r1
 8017256:	4611      	mov	r1, r2
 8017258:	602b      	str	r3, [r5, #0]
 801725a:	f7ec fc42 	bl	8003ae2 <_fstat>
 801725e:	1c43      	adds	r3, r0, #1
 8017260:	d102      	bne.n	8017268 <_fstat_r+0x1c>
 8017262:	682b      	ldr	r3, [r5, #0]
 8017264:	b103      	cbz	r3, 8017268 <_fstat_r+0x1c>
 8017266:	6023      	str	r3, [r4, #0]
 8017268:	bd38      	pop	{r3, r4, r5, pc}
 801726a:	bf00      	nop
 801726c:	24005a6c 	.word	0x24005a6c

08017270 <_isatty_r>:
 8017270:	b538      	push	{r3, r4, r5, lr}
 8017272:	4d06      	ldr	r5, [pc, #24]	; (801728c <_isatty_r+0x1c>)
 8017274:	2300      	movs	r3, #0
 8017276:	4604      	mov	r4, r0
 8017278:	4608      	mov	r0, r1
 801727a:	602b      	str	r3, [r5, #0]
 801727c:	f7ec fc41 	bl	8003b02 <_isatty>
 8017280:	1c43      	adds	r3, r0, #1
 8017282:	d102      	bne.n	801728a <_isatty_r+0x1a>
 8017284:	682b      	ldr	r3, [r5, #0]
 8017286:	b103      	cbz	r3, 801728a <_isatty_r+0x1a>
 8017288:	6023      	str	r3, [r4, #0]
 801728a:	bd38      	pop	{r3, r4, r5, pc}
 801728c:	24005a6c 	.word	0x24005a6c

08017290 <_lseek_r>:
 8017290:	b538      	push	{r3, r4, r5, lr}
 8017292:	4d07      	ldr	r5, [pc, #28]	; (80172b0 <_lseek_r+0x20>)
 8017294:	4604      	mov	r4, r0
 8017296:	4608      	mov	r0, r1
 8017298:	4611      	mov	r1, r2
 801729a:	2200      	movs	r2, #0
 801729c:	602a      	str	r2, [r5, #0]
 801729e:	461a      	mov	r2, r3
 80172a0:	f7ec fc3a 	bl	8003b18 <_lseek>
 80172a4:	1c43      	adds	r3, r0, #1
 80172a6:	d102      	bne.n	80172ae <_lseek_r+0x1e>
 80172a8:	682b      	ldr	r3, [r5, #0]
 80172aa:	b103      	cbz	r3, 80172ae <_lseek_r+0x1e>
 80172ac:	6023      	str	r3, [r4, #0]
 80172ae:	bd38      	pop	{r3, r4, r5, pc}
 80172b0:	24005a6c 	.word	0x24005a6c

080172b4 <_read_r>:
 80172b4:	b538      	push	{r3, r4, r5, lr}
 80172b6:	4d07      	ldr	r5, [pc, #28]	; (80172d4 <_read_r+0x20>)
 80172b8:	4604      	mov	r4, r0
 80172ba:	4608      	mov	r0, r1
 80172bc:	4611      	mov	r1, r2
 80172be:	2200      	movs	r2, #0
 80172c0:	602a      	str	r2, [r5, #0]
 80172c2:	461a      	mov	r2, r3
 80172c4:	f7ec fbc8 	bl	8003a58 <_read>
 80172c8:	1c43      	adds	r3, r0, #1
 80172ca:	d102      	bne.n	80172d2 <_read_r+0x1e>
 80172cc:	682b      	ldr	r3, [r5, #0]
 80172ce:	b103      	cbz	r3, 80172d2 <_read_r+0x1e>
 80172d0:	6023      	str	r3, [r4, #0]
 80172d2:	bd38      	pop	{r3, r4, r5, pc}
 80172d4:	24005a6c 	.word	0x24005a6c

080172d8 <_init>:
 80172d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172da:	bf00      	nop
 80172dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172de:	bc08      	pop	{r3}
 80172e0:	469e      	mov	lr, r3
 80172e2:	4770      	bx	lr

080172e4 <_fini>:
 80172e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172e6:	bf00      	nop
 80172e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172ea:	bc08      	pop	{r3}
 80172ec:	469e      	mov	lr, r3
 80172ee:	4770      	bx	lr
