
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a480  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801a720  0801a720  0002a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801abb8  0801abb8  0002abb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801abc0  0801abc0  0002abc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801abc4  0801abc4  0002abc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  0801abc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000067fc  24000120  0801acd0  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400691c  0801acd0  0003691c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040327  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007ab3  00000000  00000000  0007045d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b48  00000000  00000000  00077f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002820  00000000  00000000  0007aa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045d3e  00000000  00000000  0007d278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00041650  00000000  00000000  000c2fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196380  00000000  00000000  00104606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029a986  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bba0  00000000  00000000  0029a9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a708 	.word	0x0801a708

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0801a708 	.word	0x0801a708

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fa8b 	bl	8005b84 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 f836 	bl	80036e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 fba6 	bl	8006dd4 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f829 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 fce9 	bl	800608c <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f810 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 fcdb 	bl	800608c <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f802 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 fccd 	bl	800608c <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f002 fff4 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 fcbf 	bl	800608c <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f002 ffe6 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f005 fcb0 	bl	800608c <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f002 ffd7 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f005 fca1 	bl	800608c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f002 ffc8 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f005 fc92 	bl	800608c <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f002 ffb9 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f005 fc83 	bl	800608c <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f002 ffaa 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f005 fc74 	bl	800608c <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f002 ff9b 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 fc65 	bl	800608c <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f002 ff8c 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 fc56 	bl	800608c <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f002 ff7d 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400013c 	.word	0x2400013c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 f973 	bl	8005b84 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f002 ff1e 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 fbde 	bl	800608c <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f002 ff05 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 fbd0 	bl	800608c <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f002 fef7 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 fbc2 	bl	800608c <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f002 fee9 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 fbb4 	bl	800608c <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f002 fedb 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001a0 	.word	0x240001a0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a f956 	bl	800acac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a f94a 	bl	800acac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a f93e 	bl	800acac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f006 ffe9 	bl	8007a4c <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 fe30 	bl	80036e4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f004 fe2c 	bl	800573c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f004 fe26 	bl	800573c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f006 ff89 	bl	8007a4c <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 fdd0 	bl	80036e4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000204 	.word	0x24000204
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400027c 	.word	0x2400027c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 f8b5 	bl	8019cfc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 fb51 	bl	8007240 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 fd9e 	bl	80036e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 fd6c 	bl	80076a0 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 fd89 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002f4 	.word	0x240002f4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a f829 	bl	800acac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f006 fed4 	bl	8007a4c <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fd1b 	bl	80036e4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fa1e 	bl	8007100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fa35 	bl	8007134 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000308 	.word	0x24000308
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 f9f5 	bl	8007100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fa0c 	bl	8007134 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 f9ed 	bl	8007100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fa04 	bl	8007134 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 f9e5 	bl	8007100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 f9fc 	bl	8007134 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 f9dd 	bl	8007100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 f9f4 	bl	8007134 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 f9d5 	bl	8007100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 f9ec 	bl	8007134 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 f9cd 	bl	8007100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 f9e4 	bl	8007134 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 f9c5 	bl	8007100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 f9dc 	bl	8007134 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 f9bd 	bl	8007100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 f9d4 	bl	8007134 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f018 ff96 	bl	8019cfc <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f009 fdac 	bl	800a9c8 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fd51 	bl	800a9c8 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 fb9e 	bl	800a6f8 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	24000380 	.word	0x24000380
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 faf2 	bl	800a6f8 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fbfe 	bl	800a9c8 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fb9b 	bl	800a9c8 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 f9e8 	bl	800a6f8 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fac6 	bl	800a9c8 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b04      	cmp	r3, #4
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 f8d1 	bl	800a6f8 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 f9de 	bl	800a9c8 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	24000380 	.word	0x24000380
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 fa82 	bl	8019cfc <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 f8b9 	bl	800a9c8 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f008 ff07 	bl	800a6f8 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 f81b 	bl	800a9c8 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 f91d 	bl	8019cfc <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 f914 	bl	8019cfc <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f008 fdd3 	bl	800a6f8 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f008 fdc0 	bl	800a6f8 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 f85f 	bl	8019cfc <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 f858 	bl	8019cfc <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f008 fd19 	bl	800a6f8 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f008 fd31 	bl	800a81c <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 fdd9 	bl	800a9c8 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fc25 	bl	800a6f8 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	24000380 	.word	0x24000380
 8001f2c:	52002000 	.word	0x52002000

08001f30 <handle_error>:
#include "eeprom.h"

uint16_t VirtAddVarTab[NB_OF_VAR] = { 0x5555, 0x6666, 0x7777, 0x8888, 0x9999 };
uint16_t VarDataTab[NB_OF_VAR] = { 0, 0, 0, 0, 0 };

void handle_error(ERROR_STRUCT error) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	80b8      	strh	r0, [r7, #4]
	switch (error.detail) {
 8001f38:	797b      	ldrb	r3, [r7, #5]
 8001f3a:	2b14      	cmp	r3, #20
 8001f3c:	d831      	bhi.n	8001fa2 <handle_error+0x72>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <handle_error+0x14>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f99 	.word	0x08001f99
 8001f48:	08001f99 	.word	0x08001f99
 8001f4c:	08001f99 	.word	0x08001f99
 8001f50:	08001f99 	.word	0x08001f99
 8001f54:	08001f99 	.word	0x08001f99
 8001f58:	08001f99 	.word	0x08001f99
 8001f5c:	08001f99 	.word	0x08001f99
 8001f60:	08001f99 	.word	0x08001f99
 8001f64:	08001f99 	.word	0x08001f99
 8001f68:	08001f99 	.word	0x08001f99
 8001f6c:	08001f99 	.word	0x08001f99
 8001f70:	08001f99 	.word	0x08001f99
 8001f74:	08001f99 	.word	0x08001f99
 8001f78:	08001f99 	.word	0x08001f99
 8001f7c:	08001f99 	.word	0x08001f99
 8001f80:	08001f99 	.word	0x08001f99
 8001f84:	08001f99 	.word	0x08001f99
 8001f88:	08001f99 	.word	0x08001f99
 8001f8c:	08001fa3 	.word	0x08001fa3
 8001f90:	08001fa3 	.word	0x08001fa3
 8001f94:	08001fa3 	.word	0x08001fa3
	case ED_5vref:
	case ED_n200v:
	case ED_n800v:
	case ED_TMP1:
		// TODO: system reset?
		increment_error_counter(error.category);
 8001f98:	793b      	ldrb	r3, [r7, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f806 	bl	8001fac <increment_error_counter>
		break;
 8001fa0:	e000      	b.n	8001fa4 <handle_error+0x74>
		break;
	case ED_UNDEFINED:
		// TODO: send error packet?
		break;
	default:
		break;
 8001fa2:	bf00      	nop
	}
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <increment_error_counter>:

void increment_error_counter(ERROR_CATEGORY category) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
	uint16_t counter_value;
	counter_value = get_eeprom_error_counter(category);
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f80f 	bl	8001fdc <get_eeprom_error_counter>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	81fb      	strh	r3, [r7, #14]
	counter_value++;
 8001fc2:	89fb      	ldrh	r3, [r7, #14]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	81fb      	strh	r3, [r7, #14]
	set_eeprom_error_counter(category, counter_value);
 8001fc8:	89fa      	ldrh	r2, [r7, #14]
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f82a 	bl	8002028 <set_eeprom_error_counter>

}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <get_eeprom_error_counter>:

uint16_t get_eeprom_error_counter(ERROR_CATEGORY category) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
	uint16_t retval = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	81fb      	strh	r3, [r7, #14]
	HAL_FLASH_Unlock();
 8001fea:	f008 fc17 	bl	800a81c <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001fee:	f7fe fed3 	bl	8000d98 <EE_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <get_eeprom_error_counter+0x20>
		Error_Handler();
 8001ff8:	f001 fb74 	bl	80036e4 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[category], &retval)) != HAL_OK) {
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	4a09      	ldr	r2, [pc, #36]	; (8002024 <get_eeprom_error_counter+0x48>)
 8002000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002004:	f107 020e 	add.w	r2, r7, #14
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fb7c 	bl	8001708 <EE_ReadVariable>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <get_eeprom_error_counter+0x3e>
		Error_Handler();
 8002016:	f001 fb65 	bl	80036e4 <Error_Handler>
	}
	return retval;
 800201a:	89fb      	ldrh	r3, [r7, #14]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	24000000 	.word	0x24000000

08002028 <set_eeprom_error_counter>:

void set_eeprom_error_counter(ERROR_CATEGORY category, uint16_t new_counter_value) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	460a      	mov	r2, r1
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	4613      	mov	r3, r2
 8002036:	80bb      	strh	r3, [r7, #4]
	if ((EE_WriteVariable(VirtAddVarTab[category], new_counter_value))
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <set_eeprom_error_counter+0x34>)
 800203c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002040:	88ba      	ldrh	r2, [r7, #4]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fba7 	bl	8001798 <EE_WriteVariable>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <set_eeprom_error_counter+0x2c>
			!= HAL_OK) {
		Error_Handler();
 8002050:	f001 fb48 	bl	80036e4 <Error_Handler>
	}
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	24000000 	.word	0x24000000

08002060 <reset_eeprom_error_counters>:


void reset_eeprom_error_counters() {
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_VAR; i++) {
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	e00f      	b.n	800208c <reset_eeprom_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0))
 800206c:	4a0b      	ldr	r2, [pc, #44]	; (800209c <reset_eeprom_error_counters+0x3c>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fb8e 	bl	8001798 <EE_WriteVariable>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <reset_eeprom_error_counters+0x26>
				!= HAL_OK) {
			Error_Handler();
 8002082:	f001 fb2f 	bl	80036e4 <Error_Handler>
	for (int i = 0; i < NB_OF_VAR; i++) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3301      	adds	r3, #1
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b04      	cmp	r3, #4
 8002090:	ddec      	ble.n	800206c <reset_eeprom_error_counters+0xc>
		}
	}
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	24000000 	.word	0x24000000

080020a0 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <vApplicationTickHook+0x18>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	4a03      	ldr	r2, [pc, #12]	; (80020b8 <vApplicationTickHook+0x18>)
 80020ac:	6013      	str	r3, [r2, #0]
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	24001a78 	.word	0x24001a78

080020bc <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80020d8:	4a24      	ldr	r2, [pc, #144]	; (800216c <MX_FREERTOS_Init+0x98>)
 80020da:	2100      	movs	r1, #0
 80020dc:	4824      	ldr	r0, [pc, #144]	; (8002170 <MX_FREERTOS_Init+0x9c>)
 80020de:	f014 fc39 	bl	8016954 <osThreadNew>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a23      	ldr	r2, [pc, #140]	; (8002174 <MX_FREERTOS_Init+0xa0>)
 80020e6:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80020e8:	4a23      	ldr	r2, [pc, #140]	; (8002178 <MX_FREERTOS_Init+0xa4>)
 80020ea:	2100      	movs	r1, #0
 80020ec:	4823      	ldr	r0, [pc, #140]	; (800217c <MX_FREERTOS_Init+0xa8>)
 80020ee:	f014 fc31 	bl	8016954 <osThreadNew>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a22      	ldr	r2, [pc, #136]	; (8002180 <MX_FREERTOS_Init+0xac>)
 80020f6:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80020f8:	4a22      	ldr	r2, [pc, #136]	; (8002184 <MX_FREERTOS_Init+0xb0>)
 80020fa:	2100      	movs	r1, #0
 80020fc:	4822      	ldr	r0, [pc, #136]	; (8002188 <MX_FREERTOS_Init+0xb4>)
 80020fe:	f014 fc29 	bl	8016954 <osThreadNew>
 8002102:	4603      	mov	r3, r0
 8002104:	4a21      	ldr	r2, [pc, #132]	; (800218c <MX_FREERTOS_Init+0xb8>)
 8002106:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002108:	4a21      	ldr	r2, [pc, #132]	; (8002190 <MX_FREERTOS_Init+0xbc>)
 800210a:	2100      	movs	r1, #0
 800210c:	4821      	ldr	r0, [pc, #132]	; (8002194 <MX_FREERTOS_Init+0xc0>)
 800210e:	f014 fc21 	bl	8016954 <osThreadNew>
 8002112:	4603      	mov	r3, r0
 8002114:	4a20      	ldr	r2, [pc, #128]	; (8002198 <MX_FREERTOS_Init+0xc4>)
 8002116:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002118:	4a20      	ldr	r2, [pc, #128]	; (800219c <MX_FREERTOS_Init+0xc8>)
 800211a:	2100      	movs	r1, #0
 800211c:	4820      	ldr	r0, [pc, #128]	; (80021a0 <MX_FREERTOS_Init+0xcc>)
 800211e:	f014 fc19 	bl	8016954 <osThreadNew>
 8002122:	4603      	mov	r3, r0
 8002124:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <MX_FREERTOS_Init+0xd0>)
 8002126:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002128:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <MX_FREERTOS_Init+0xd4>)
 800212a:	2100      	movs	r1, #0
 800212c:	481f      	ldr	r0, [pc, #124]	; (80021ac <MX_FREERTOS_Init+0xd8>)
 800212e:	f014 fc11 	bl	8016954 <osThreadNew>
 8002132:	4603      	mov	r3, r0
 8002134:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <MX_FREERTOS_Init+0xdc>)
 8002136:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <MX_FREERTOS_Init+0xe0>)
 800213a:	2100      	movs	r1, #0
 800213c:	481e      	ldr	r0, [pc, #120]	; (80021b8 <MX_FREERTOS_Init+0xe4>)
 800213e:	f014 fc09 	bl	8016954 <osThreadNew>
 8002142:	4603      	mov	r3, r0
 8002144:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <MX_FREERTOS_Init+0xe8>)
 8002146:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002148:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <MX_FREERTOS_Init+0xec>)
 800214a:	2100      	movs	r1, #0
 800214c:	481d      	ldr	r0, [pc, #116]	; (80021c4 <MX_FREERTOS_Init+0xf0>)
 800214e:	f014 fc01 	bl	8016954 <osThreadNew>
 8002152:	4603      	mov	r3, r0
 8002154:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <MX_FREERTOS_Init+0xf4>)
 8002156:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002158:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <MX_FREERTOS_Init+0xf8>)
 800215a:	2100      	movs	r1, #0
 800215c:	481c      	ldr	r0, [pc, #112]	; (80021d0 <MX_FREERTOS_Init+0xfc>)
 800215e:	f014 fbf9 	bl	8016954 <osThreadNew>
 8002162:	4603      	mov	r3, r0
 8002164:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <MX_FREERTOS_Init+0x100>)
 8002166:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	0801a988 	.word	0x0801a988
 8002170:	080021d9 	.word	0x080021d9
 8002174:	24000384 	.word	0x24000384
 8002178:	0801a9ac 	.word	0x0801a9ac
 800217c:	08002201 	.word	0x08002201
 8002180:	240005e4 	.word	0x240005e4
 8002184:	0801a9d0 	.word	0x0801a9d0
 8002188:	08002229 	.word	0x08002229
 800218c:	24000844 	.word	0x24000844
 8002190:	0801a9f4 	.word	0x0801a9f4
 8002194:	08002251 	.word	0x08002251
 8002198:	24000aa4 	.word	0x24000aa4
 800219c:	0801aa18 	.word	0x0801aa18
 80021a0:	080022c9 	.word	0x080022c9
 80021a4:	24000d04 	.word	0x24000d04
 80021a8:	0801aa3c 	.word	0x0801aa3c
 80021ac:	08002341 	.word	0x08002341
 80021b0:	24000f64 	.word	0x24000f64
 80021b4:	0801aa60 	.word	0x0801aa60
 80021b8:	08002369 	.word	0x08002369
 80021bc:	240011c4 	.word	0x240011c4
 80021c0:	0801aa84 	.word	0x0801aa84
 80021c4:	08002399 	.word	0x08002399
 80021c8:	24001424 	.word	0x24001424
 80021cc:	0801aaa8 	.word	0x0801aaa8
 80021d0:	08002469 	.word	0x08002469
 80021d4:	24001684 	.word	0x24001684

080021d8 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <PMT_init+0x24>)
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021e8:	2200      	movs	r2, #0
 80021ea:	2101      	movs	r1, #1
 80021ec:	f014 fd34 	bl	8016c58 <osEventFlagsWait>

		create_pmt_packet();
 80021f0:	f001 fa7e 	bl	80036f0 <create_pmt_packet>

		osThreadYield();
 80021f4:	f014 fc40 	bl	8016a78 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80021f8:	e7f2      	b.n	80021e0 <PMT_init+0x8>
 80021fa:	bf00      	nop
 80021fc:	24001a28 	.word	0x24001a28

08002200 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <ERPA_init+0x24>)
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002210:	2200      	movs	r2, #0
 8002212:	2102      	movs	r1, #2
 8002214:	f014 fd20 	bl	8016c58 <osEventFlagsWait>

		create_erpa_packet();
 8002218:	f001 fab0 	bl	800377c <create_erpa_packet>

		osThreadYield();
 800221c:	f014 fc2c 	bl	8016a78 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002220:	e7f2      	b.n	8002208 <ERPA_init+0x8>
 8002222:	bf00      	nop
 8002224:	24001a28 	.word	0x24001a28

08002228 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HK_init+0x24>)
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002238:	2200      	movs	r2, #0
 800223a:	2104      	movs	r1, #4
 800223c:	f014 fd0c 	bl	8016c58 <osEventFlagsWait>

		create_hk_packet();
 8002240:	f001 fafa 	bl	8003838 <create_hk_packet>

		osThreadYield();
 8002244:	f014 fc18 	bl	8016a78 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002248:	e7f2      	b.n	8002230 <HK_init+0x8>
 800224a:	bf00      	nop
 800224c:	24001a28 	.word	0x24001a28

08002250 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <AUTOINIT_init+0x70>)
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002260:	2200      	movs	r2, #0
 8002262:	2104      	movs	r1, #4
 8002264:	f014 fcf8 	bl	8016c58 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	e012      	b.n	8002294 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800226e:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <AUTOINIT_init+0x74>)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002276:	4a13      	ldr	r2, [pc, #76]	; (80022c4 <AUTOINIT_init+0x74>)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	889b      	ldrh	r3, [r3, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	4619      	mov	r1, r3
 8002284:	f008 feda 	bl	800b03c <HAL_GPIO_WritePin>
			osDelay(100);
 8002288:	2064      	movs	r0, #100	; 0x64
 800228a:	f014 fc15 	bl	8016ab8 <osDelay>
		for (int i = 0; i < 7; i++) {
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3301      	adds	r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b06      	cmp	r3, #6
 8002298:	dde9      	ble.n	800226e <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 800229a:	2308      	movs	r3, #8
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	e008      	b.n	80022b2 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2101      	movs	r1, #1
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 f842 	bl	8005330 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	3301      	adds	r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b0d      	cmp	r3, #13
 80022b6:	ddf3      	ble.n	80022a0 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80022b8:	f014 fbde 	bl	8016a78 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80022bc:	e7cc      	b.n	8002258 <AUTOINIT_init+0x8>
 80022be:	bf00      	nop
 80022c0:	24001a2c 	.word	0x24001a2c
 80022c4:	0801aacc 	.word	0x0801aacc

080022c8 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <AUTODEINIT_init+0x70>)
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022d8:	2200      	movs	r2, #0
 80022da:	2108      	movs	r1, #8
 80022dc:	f014 fcbc 	bl	8016c58 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80022e0:	230d      	movs	r3, #13
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e008      	b.n	80022f8 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 f81f 	bl	8005330 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b07      	cmp	r3, #7
 80022fc:	dcf3      	bgt.n	80022e6 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 80022fe:	2306      	movs	r3, #6
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	e012      	b.n	800232a <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <AUTODEINIT_init+0x74>)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800230c:	4a0b      	ldr	r2, [pc, #44]	; (800233c <AUTODEINIT_init+0x74>)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	889b      	ldrh	r3, [r3, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	4619      	mov	r1, r3
 800231a:	f008 fe8f 	bl	800b03c <HAL_GPIO_WritePin>
			osDelay(100);
 800231e:	2064      	movs	r0, #100	; 0x64
 8002320:	f014 fbca 	bl	8016ab8 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	3b01      	subs	r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	dae9      	bge.n	8002304 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8002330:	f014 fba2 	bl	8016a78 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002334:	e7cc      	b.n	80022d0 <AUTODEINIT_init+0x8>
 8002336:	bf00      	nop
 8002338:	24001a2c 	.word	0x24001a2c
 800233c:	0801aacc 	.word	0x0801aacc

08002340 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <Voltage_Monitor_init+0x24>)
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002350:	2200      	movs	r2, #0
 8002352:	2101      	movs	r1, #1
 8002354:	f014 fc80 	bl	8016c58 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8002358:	f003 f80a 	bl	8005370 <set_rail_monitor>
	  monitor_rails();
 800235c:	f003 f88c 	bl	8005478 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002360:	e7f2      	b.n	8002348 <Voltage_Monitor_init+0x8>
 8002362:	bf00      	nop
 8002364:	24001a2c 	.word	0x24001a2c

08002368 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <STOP_init+0x2c>)
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002378:	2200      	movs	r2, #0
 800237a:	2102      	movs	r1, #2
 800237c:	f014 fc6c 	bl	8016c58 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <STOP_init+0x2c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2102      	movs	r1, #2
 8002386:	4618      	mov	r0, r3
 8002388:	f014 fc34 	bl	8016bf4 <osEventFlagsClear>

	  enter_stop();
 800238c:	f001 f94a 	bl	8003624 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002390:	e7ee      	b.n	8002370 <STOP_init+0x8>
 8002392:	bf00      	nop
 8002394:	24001a2c 	.word	0x24001a2c

08002398 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af02      	add	r7, sp, #8
 800239e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <Science_init+0xb0>)
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a8:	2200      	movs	r2, #0
 80023aa:	2101      	movs	r1, #1
 80023ac:	f014 fc54 	bl	8016c58 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e012      	b.n	80023dc <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80023b6:	4a25      	ldr	r2, [pc, #148]	; (800244c <Science_init+0xb4>)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80023be:	4a23      	ldr	r2, [pc, #140]	; (800244c <Science_init+0xb4>)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	889b      	ldrh	r3, [r3, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4619      	mov	r1, r3
 80023cc:	f008 fe36 	bl	800b03c <HAL_GPIO_WritePin>
			osDelay(200);
 80023d0:	20c8      	movs	r0, #200	; 0xc8
 80023d2:	f014 fb71 	bl	8016ab8 <osDelay>
		for (int i = 0; i < 9; i++) {
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3301      	adds	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b08      	cmp	r3, #8
 80023e0:	dde9      	ble.n	80023b6 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80023e2:	2308      	movs	r3, #8
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	e008      	b.n	80023fa <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2101      	movs	r1, #1
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 ff9e 	bl	8005330 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	3301      	adds	r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	ddf3      	ble.n	80023e8 <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8002400:	b672      	cpsid	i
}
 8002402:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8002404:	2300      	movs	r3, #0
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2320      	movs	r3, #32
 800240a:	4a11      	ldr	r2, [pc, #68]	; (8002450 <Science_init+0xb8>)
 800240c:	2100      	movs	r1, #0
 800240e:	4811      	ldr	r0, [pc, #68]	; (8002454 <Science_init+0xbc>)
 8002410:	f004 ff90 	bl	8007334 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8002414:	4b10      	ldr	r3, [pc, #64]	; (8002458 <Science_init+0xc0>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <Science_init+0xc4>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <Science_init+0xc8>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 8002426:	f001 fb55 	bl	8003ad4 <reset_packet_sequence_numbers>
		TIM2->CCR4 = 312;
 800242a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800242e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8002434:	2100      	movs	r1, #0
 8002436:	480b      	ldr	r0, [pc, #44]	; (8002464 <Science_init+0xcc>)
 8002438:	f010 f8aa 	bl	8012590 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800243c:	b662      	cpsie	i
}
 800243e:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002440:	f014 fb1a 	bl	8016a78 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002444:	e7ac      	b.n	80023a0 <Science_init+0x8>
 8002446:	bf00      	nop
 8002448:	24001a30 	.word	0x24001a30
 800244c:	0801aacc 	.word	0x0801aacc
 8002450:	2400000c 	.word	0x2400000c
 8002454:	240002f4 	.word	0x240002f4
 8002458:	24001a74 	.word	0x24001a74
 800245c:	24001a75 	.word	0x24001a75
 8002460:	24001a78 	.word	0x24001a78
 8002464:	24001d44 	.word	0x24001d44

08002468 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <Idle_init+0x94>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002478:	2200      	movs	r2, #0
 800247a:	2102      	movs	r1, #2
 800247c:	f014 fbec 	bl	8016c58 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <Idle_init+0x98>)
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800248a:	2200      	movs	r2, #0
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 800248e:	2100      	movs	r1, #0
 8002490:	481c      	ldr	r0, [pc, #112]	; (8002504 <Idle_init+0x9c>)
 8002492:	f010 f9d7 	bl	8012844 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <Idle_init+0xa0>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 800249c:	2100      	movs	r1, #0
 800249e:	481b      	ldr	r0, [pc, #108]	; (800250c <Idle_init+0xa4>)
 80024a0:	f005 f808 	bl	80074b4 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80024a4:	2310      	movs	r3, #16
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e008      	b.n	80024bc <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 ff3d 	bl	8005330 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b07      	cmp	r3, #7
 80024c0:	dcf3      	bgt.n	80024aa <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 80024c2:	2308      	movs	r3, #8
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	e012      	b.n	80024ee <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80024c8:	4a11      	ldr	r2, [pc, #68]	; (8002510 <Idle_init+0xa8>)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80024d0:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <Idle_init+0xa8>)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	889b      	ldrh	r3, [r3, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	4619      	mov	r1, r3
 80024de:	f008 fdad 	bl	800b03c <HAL_GPIO_WritePin>
			osDelay(200);
 80024e2:	20c8      	movs	r0, #200	; 0xc8
 80024e4:	f014 fae8 	bl	8016ab8 <osDelay>
		for (int i = 8; i >= 0; i--) {
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	dae9      	bge.n	80024c8 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 80024f4:	f014 fac0 	bl	8016a78 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80024f8:	e7ba      	b.n	8002470 <Idle_init+0x8>
 80024fa:	bf00      	nop
 80024fc:	24001a30 	.word	0x24001a30
 8002500:	24001a75 	.word	0x24001a75
 8002504:	24001d44 	.word	0x24001d44
 8002508:	24001a74 	.word	0x24001a74
 800250c:	240002f4 	.word	0x240002f4
 8002510:	0801aacc 	.word	0x0801aacc

08002514 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252a:	4b34      	ldr	r3, [pc, #208]	; (80025fc <MX_GPIO_Init+0xe8>)
 800252c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002530:	4a32      	ldr	r2, [pc, #200]	; (80025fc <MX_GPIO_Init+0xe8>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800253a:	4b30      	ldr	r3, [pc, #192]	; (80025fc <MX_GPIO_Init+0xe8>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002548:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <MX_GPIO_Init+0xe8>)
 800254a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254e:	4a2b      	ldr	r2, [pc, #172]	; (80025fc <MX_GPIO_Init+0xe8>)
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <MX_GPIO_Init+0xe8>)
 800255a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	4b25      	ldr	r3, [pc, #148]	; (80025fc <MX_GPIO_Init+0xe8>)
 8002568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800256c:	4a23      	ldr	r2, [pc, #140]	; (80025fc <MX_GPIO_Init+0xe8>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002576:	4b21      	ldr	r3, [pc, #132]	; (80025fc <MX_GPIO_Init+0xe8>)
 8002578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <MX_GPIO_Init+0xe8>)
 8002586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258a:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <MX_GPIO_Init+0xe8>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <MX_GPIO_Init+0xe8>)
 8002596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80025a2:	2200      	movs	r2, #0
 80025a4:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80025a8:	4815      	ldr	r0, [pc, #84]	; (8002600 <MX_GPIO_Init+0xec>)
 80025aa:	f008 fd47 	bl	800b03c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2164      	movs	r1, #100	; 0x64
 80025b2:	4814      	ldr	r0, [pc, #80]	; (8002604 <MX_GPIO_Init+0xf0>)
 80025b4:	f008 fd42 	bl	800b03c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80025b8:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80025bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025be:	2301      	movs	r3, #1
 80025c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025c2:	2302      	movs	r3, #2
 80025c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2300      	movs	r3, #0
 80025c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	480b      	ldr	r0, [pc, #44]	; (8002600 <MX_GPIO_Init+0xec>)
 80025d2:	f008 fb6b 	bl	800acac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80025d6:	2364      	movs	r3, #100	; 0x64
 80025d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025da:	2301      	movs	r3, #1
 80025dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025de:	2302      	movs	r3, #2
 80025e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_GPIO_Init+0xf0>)
 80025ee:	f008 fb5d 	bl	800acac <HAL_GPIO_Init>

}
 80025f2:	bf00      	nop
 80025f4:	3728      	adds	r7, #40	; 0x28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	58024400 	.word	0x58024400
 8002600:	58020800 	.word	0x58020800
 8002604:	58020400 	.word	0x58020400

08002608 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800260c:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <MX_I2C1_Init+0x78>)
 800260e:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <MX_I2C1_Init+0x7c>)
 8002610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <MX_I2C1_Init+0x78>)
 8002614:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <MX_I2C1_Init+0x80>)
 8002616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <MX_I2C1_Init+0x78>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <MX_I2C1_Init+0x78>)
 8002620:	2201      	movs	r2, #1
 8002622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <MX_I2C1_Init+0x78>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <MX_I2C1_Init+0x78>)
 800262c:	2200      	movs	r2, #0
 800262e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <MX_I2C1_Init+0x78>)
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <MX_I2C1_Init+0x78>)
 8002638:	2200      	movs	r2, #0
 800263a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <MX_I2C1_Init+0x78>)
 800263e:	2200      	movs	r2, #0
 8002640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002642:	480f      	ldr	r0, [pc, #60]	; (8002680 <MX_I2C1_Init+0x78>)
 8002644:	f008 fd14 	bl	800b070 <HAL_I2C_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800264e:	f001 f849 	bl	80036e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002652:	2100      	movs	r1, #0
 8002654:	480a      	ldr	r0, [pc, #40]	; (8002680 <MX_I2C1_Init+0x78>)
 8002656:	f00a ffb3 	bl	800d5c0 <HAL_I2CEx_ConfigAnalogFilter>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002660:	f001 f840 	bl	80036e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002664:	2100      	movs	r1, #0
 8002666:	4806      	ldr	r0, [pc, #24]	; (8002680 <MX_I2C1_Init+0x78>)
 8002668:	f00a fff5 	bl	800d656 <HAL_I2CEx_ConfigDigitalFilter>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002672:	f001 f837 	bl	80036e4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002676:	2001      	movs	r0, #1
 8002678:	f00b f83a 	bl	800d6f0 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	240018e4 	.word	0x240018e4
 8002684:	40005400 	.word	0x40005400
 8002688:	00100517 	.word	0x00100517

0800268c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b0ba      	sub	sp, #232	; 0xe8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	22c0      	movs	r2, #192	; 0xc0
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f017 fb25 	bl	8019cfc <memset>
  if(i2cHandle->Instance==I2C1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a5d      	ldr	r2, [pc, #372]	; (800282c <HAL_I2C_MspInit+0x1a0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	f040 80b3 	bne.w	8002824 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026be:	f04f 0208 	mov.w	r2, #8
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	4618      	mov	r0, r3
 80026d6:	f00c f8cd 	bl	800e874 <HAL_RCCEx_PeriphCLKConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80026e0:	f001 f800 	bl	80036e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e4:	4b52      	ldr	r3, [pc, #328]	; (8002830 <HAL_I2C_MspInit+0x1a4>)
 80026e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ea:	4a51      	ldr	r2, [pc, #324]	; (8002830 <HAL_I2C_MspInit+0x1a4>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f4:	4b4e      	ldr	r3, [pc, #312]	; (8002830 <HAL_I2C_MspInit+0x1a4>)
 80026f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002702:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800270a:	2312      	movs	r3, #18
 800270c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800271c:	2304      	movs	r3, #4
 800271e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002722:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002726:	4619      	mov	r1, r3
 8002728:	4842      	ldr	r0, [pc, #264]	; (8002834 <HAL_I2C_MspInit+0x1a8>)
 800272a:	f008 fabf 	bl	800acac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800272e:	4b40      	ldr	r3, [pc, #256]	; (8002830 <HAL_I2C_MspInit+0x1a4>)
 8002730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002734:	4a3e      	ldr	r2, [pc, #248]	; (8002830 <HAL_I2C_MspInit+0x1a4>)
 8002736:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800273a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800273e:	4b3c      	ldr	r3, [pc, #240]	; (8002830 <HAL_I2C_MspInit+0x1a4>)
 8002740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800274c:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 800274e:	4a3b      	ldr	r2, [pc, #236]	; (800283c <HAL_I2C_MspInit+0x1b0>)
 8002750:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002752:	4b39      	ldr	r3, [pc, #228]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 8002754:	2222      	movs	r2, #34	; 0x22
 8002756:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002758:	4b37      	ldr	r3, [pc, #220]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 800275a:	2240      	movs	r2, #64	; 0x40
 800275c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800275e:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002764:	4b34      	ldr	r3, [pc, #208]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 8002766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800276a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800276c:	4b32      	ldr	r3, [pc, #200]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 800276e:	2200      	movs	r2, #0
 8002770:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002772:	4b31      	ldr	r3, [pc, #196]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002778:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800277e:	4b2e      	ldr	r3, [pc, #184]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 8002780:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002784:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002786:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 8002788:	2200      	movs	r2, #0
 800278a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800278c:	482a      	ldr	r0, [pc, #168]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 800278e:	f005 f95d 	bl	8007a4c <HAL_DMA_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002798:	f000 ffa4 	bl	80036e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a26      	ldr	r2, [pc, #152]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
 80027a2:	4a25      	ldr	r2, [pc, #148]	; (8002838 <HAL_I2C_MspInit+0x1ac>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 80027a8:	4b25      	ldr	r3, [pc, #148]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 80027aa:	4a26      	ldr	r2, [pc, #152]	; (8002844 <HAL_I2C_MspInit+0x1b8>)
 80027ac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 80027b0:	2221      	movs	r2, #33	; 0x21
 80027b2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ba:	4b21      	ldr	r3, [pc, #132]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 80027bc:	2200      	movs	r2, #0
 80027be:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027c0:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 80027c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 80027dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80027e0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80027e8:	4815      	ldr	r0, [pc, #84]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 80027ea:	f005 f92f 	bl	8007a4c <HAL_DMA_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 80027f4:	f000 ff76 	bl	80036e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 80027fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80027fe:	4a10      	ldr	r2, [pc, #64]	; (8002840 <HAL_I2C_MspInit+0x1b4>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	2105      	movs	r1, #5
 8002808:	201f      	movs	r0, #31
 800280a:	f004 fc79 	bl	8007100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800280e:	201f      	movs	r0, #31
 8002810:	f004 fc90 	bl	8007134 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002814:	2200      	movs	r2, #0
 8002816:	2105      	movs	r1, #5
 8002818:	2020      	movs	r0, #32
 800281a:	f004 fc71 	bl	8007100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800281e:	2020      	movs	r0, #32
 8002820:	f004 fc88 	bl	8007134 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002824:	bf00      	nop
 8002826:	37e8      	adds	r7, #232	; 0xe8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40005400 	.word	0x40005400
 8002830:	58024400 	.word	0x58024400
 8002834:	58020400 	.word	0x58020400
 8002838:	24001938 	.word	0x24001938
 800283c:	400200a0 	.word	0x400200a0
 8002840:	240019b0 	.word	0x240019b0
 8002844:	400200b8 	.word	0x400200b8

08002848 <__NVIC_SystemReset>:
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800284c:	f3bf 8f4f 	dsb	sy
}
 8002850:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <__NVIC_SystemReset+0x24>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800285a:	4904      	ldr	r1, [pc, #16]	; (800286c <__NVIC_SystemReset+0x24>)
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <__NVIC_SystemReset+0x28>)
 800285e:	4313      	orrs	r3, r2
 8002860:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002862:	f3bf 8f4f 	dsb	sy
}
 8002866:	bf00      	nop
    __NOP();
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <__NVIC_SystemReset+0x20>
 800286c:	e000ed00 	.word	0xe000ed00
 8002870:	05fa0004 	.word	0x05fa0004

08002874 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a20      	ldr	r2, [pc, #128]	; (8002900 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d106      	bne.n	8002892 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002884:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	4618      	mov	r0, r3
 800288c:	f014 f96e 	bl	8016b6c <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002890:	e032      	b.n	80028f8 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d12b      	bne.n	80028f2 <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2102      	movs	r1, #2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f014 f95e 	bl	8016b6c <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 80028b0:	4b17      	ldr	r3, [pc, #92]	; (8002910 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d113      	bne.n	80028e2 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2101      	movs	r1, #1
 80028c0:	4618      	mov	r0, r3
 80028c2:	f014 f953 	bl	8016b6c <osEventFlagsSet>
			if (HK_ENABLED){
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2104      	movs	r1, #4
 80028d6:	4618      	mov	r0, r3
 80028d8:	f014 f948 	bl	8016b6c <osEventFlagsSet>
			HK_100_ms_counter = 0;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80028ee:	701a      	strb	r2, [r3, #0]
}
 80028f0:	e002      	b.n	80028f8 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 80028f2:	480a      	ldr	r0, [pc, #40]	; (800291c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 80028f4:	f017 fa78 	bl	8019de8 <puts>
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	24001d44 	.word	0x24001d44
 8002904:	24001a28 	.word	0x24001a28
 8002908:	24001d90 	.word	0x24001d90
 800290c:	24001a75 	.word	0x24001a75
 8002910:	24001a7c 	.word	0x24001a7c
 8002914:	24001a2c 	.word	0x24001a2c
 8002918:	24001a74 	.word	0x24001a74
 800291c:	0801a798 	.word	0x0801a798

08002920 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af02      	add	r7, sp, #8
 8002926:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002928:	2201      	movs	r2, #1
 800292a:	49f2      	ldr	r1, [pc, #968]	; (8002cf4 <HAL_UART_RxCpltCallback+0x3d4>)
 800292c:	48f2      	ldr	r0, [pc, #968]	; (8002cf8 <HAL_UART_RxCpltCallback+0x3d8>)
 800292e:	f011 fb0f 	bl	8013f50 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002932:	4bf0      	ldr	r3, [pc, #960]	; (8002cf4 <HAL_UART_RxCpltCallback+0x3d4>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2be0      	cmp	r3, #224	; 0xe0
 800293c:	f200 8424 	bhi.w	8003188 <HAL_UART_RxCpltCallback+0x868>
 8002940:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <HAL_UART_RxCpltCallback+0x28>)
 8002942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002946:	bf00      	nop
 8002948:	08002ce1 	.word	0x08002ce1
 800294c:	08002d25 	.word	0x08002d25
 8002950:	08002d95 	.word	0x08002d95
 8002954:	08002dcf 	.word	0x08002dcf
 8002958:	08002e07 	.word	0x08002e07
 800295c:	08002e41 	.word	0x08002e41
 8002960:	08002e7d 	.word	0x08002e7d
 8002964:	08002eb9 	.word	0x08002eb9
 8002968:	08002ef3 	.word	0x08002ef3
 800296c:	08002f27 	.word	0x08002f27
 8002970:	08002f5b 	.word	0x08002f5b
 8002974:	08002f8d 	.word	0x08002f8d
 8002978:	08002fb7 	.word	0x08002fb7
 800297c:	08003095 	.word	0x08003095
 8002980:	080030fd 	.word	0x080030fd
 8002984:	08003125 	.word	0x08003125
 8002988:	08002ccd 	.word	0x08002ccd
 800298c:	08002d09 	.word	0x08002d09
 8002990:	08002d77 	.word	0x08002d77
 8002994:	08002db3 	.word	0x08002db3
 8002998:	08002deb 	.word	0x08002deb
 800299c:	08002e23 	.word	0x08002e23
 80029a0:	08002e5f 	.word	0x08002e5f
 80029a4:	08002e9b 	.word	0x08002e9b
 80029a8:	08002ed7 	.word	0x08002ed7
 80029ac:	08002f0f 	.word	0x08002f0f
 80029b0:	08002f37 	.word	0x08002f37
 80029b4:	08002f71 	.word	0x08002f71
 80029b8:	08002f9d 	.word	0x08002f9d
 80029bc:	08002fc5 	.word	0x08002fc5
 80029c0:	080030d5 	.word	0x080030d5
 80029c4:	08003189 	.word	0x08003189
 80029c8:	08003189 	.word	0x08003189
 80029cc:	08003189 	.word	0x08003189
 80029d0:	08003189 	.word	0x08003189
 80029d4:	08003189 	.word	0x08003189
 80029d8:	08003189 	.word	0x08003189
 80029dc:	08003189 	.word	0x08003189
 80029e0:	08003189 	.word	0x08003189
 80029e4:	08003189 	.word	0x08003189
 80029e8:	08003189 	.word	0x08003189
 80029ec:	08003189 	.word	0x08003189
 80029f0:	08003189 	.word	0x08003189
 80029f4:	08003189 	.word	0x08003189
 80029f8:	08003189 	.word	0x08003189
 80029fc:	08003189 	.word	0x08003189
 8002a00:	08003189 	.word	0x08003189
 8002a04:	08003189 	.word	0x08003189
 8002a08:	08003189 	.word	0x08003189
 8002a0c:	08003189 	.word	0x08003189
 8002a10:	08003189 	.word	0x08003189
 8002a14:	08003189 	.word	0x08003189
 8002a18:	08003189 	.word	0x08003189
 8002a1c:	08003189 	.word	0x08003189
 8002a20:	08003189 	.word	0x08003189
 8002a24:	08003189 	.word	0x08003189
 8002a28:	08003189 	.word	0x08003189
 8002a2c:	08003189 	.word	0x08003189
 8002a30:	08003189 	.word	0x08003189
 8002a34:	08003189 	.word	0x08003189
 8002a38:	08003189 	.word	0x08003189
 8002a3c:	08003189 	.word	0x08003189
 8002a40:	08003189 	.word	0x08003189
 8002a44:	08003189 	.word	0x08003189
 8002a48:	08003189 	.word	0x08003189
 8002a4c:	08003189 	.word	0x08003189
 8002a50:	08003189 	.word	0x08003189
 8002a54:	08003189 	.word	0x08003189
 8002a58:	08003189 	.word	0x08003189
 8002a5c:	08003189 	.word	0x08003189
 8002a60:	08003189 	.word	0x08003189
 8002a64:	08003189 	.word	0x08003189
 8002a68:	08003189 	.word	0x08003189
 8002a6c:	08003189 	.word	0x08003189
 8002a70:	08003189 	.word	0x08003189
 8002a74:	08003189 	.word	0x08003189
 8002a78:	08003189 	.word	0x08003189
 8002a7c:	08003189 	.word	0x08003189
 8002a80:	08003189 	.word	0x08003189
 8002a84:	08003189 	.word	0x08003189
 8002a88:	08003189 	.word	0x08003189
 8002a8c:	08003189 	.word	0x08003189
 8002a90:	08003189 	.word	0x08003189
 8002a94:	08003189 	.word	0x08003189
 8002a98:	08003189 	.word	0x08003189
 8002a9c:	08003189 	.word	0x08003189
 8002aa0:	08003189 	.word	0x08003189
 8002aa4:	08003189 	.word	0x08003189
 8002aa8:	08003189 	.word	0x08003189
 8002aac:	08003189 	.word	0x08003189
 8002ab0:	08003189 	.word	0x08003189
 8002ab4:	08003189 	.word	0x08003189
 8002ab8:	08003189 	.word	0x08003189
 8002abc:	08003189 	.word	0x08003189
 8002ac0:	08003189 	.word	0x08003189
 8002ac4:	08003189 	.word	0x08003189
 8002ac8:	08003189 	.word	0x08003189
 8002acc:	08003189 	.word	0x08003189
 8002ad0:	08003189 	.word	0x08003189
 8002ad4:	08003189 	.word	0x08003189
 8002ad8:	08003189 	.word	0x08003189
 8002adc:	08003189 	.word	0x08003189
 8002ae0:	08003189 	.word	0x08003189
 8002ae4:	08003189 	.word	0x08003189
 8002ae8:	08003189 	.word	0x08003189
 8002aec:	08003189 	.word	0x08003189
 8002af0:	08003189 	.word	0x08003189
 8002af4:	08003189 	.word	0x08003189
 8002af8:	08003189 	.word	0x08003189
 8002afc:	08003189 	.word	0x08003189
 8002b00:	08003189 	.word	0x08003189
 8002b04:	08003189 	.word	0x08003189
 8002b08:	08003189 	.word	0x08003189
 8002b0c:	08003189 	.word	0x08003189
 8002b10:	08003189 	.word	0x08003189
 8002b14:	08003189 	.word	0x08003189
 8002b18:	08003189 	.word	0x08003189
 8002b1c:	08003189 	.word	0x08003189
 8002b20:	08003189 	.word	0x08003189
 8002b24:	08003189 	.word	0x08003189
 8002b28:	08003189 	.word	0x08003189
 8002b2c:	08003189 	.word	0x08003189
 8002b30:	08003189 	.word	0x08003189
 8002b34:	08003189 	.word	0x08003189
 8002b38:	08003189 	.word	0x08003189
 8002b3c:	08003189 	.word	0x08003189
 8002b40:	08003189 	.word	0x08003189
 8002b44:	08003189 	.word	0x08003189
 8002b48:	08003189 	.word	0x08003189
 8002b4c:	08003189 	.word	0x08003189
 8002b50:	08003189 	.word	0x08003189
 8002b54:	08003189 	.word	0x08003189
 8002b58:	08003189 	.word	0x08003189
 8002b5c:	08003189 	.word	0x08003189
 8002b60:	08003189 	.word	0x08003189
 8002b64:	08003189 	.word	0x08003189
 8002b68:	08003189 	.word	0x08003189
 8002b6c:	08003189 	.word	0x08003189
 8002b70:	08003189 	.word	0x08003189
 8002b74:	08003189 	.word	0x08003189
 8002b78:	08003189 	.word	0x08003189
 8002b7c:	08003189 	.word	0x08003189
 8002b80:	08003189 	.word	0x08003189
 8002b84:	08003189 	.word	0x08003189
 8002b88:	08003189 	.word	0x08003189
 8002b8c:	08003189 	.word	0x08003189
 8002b90:	08003189 	.word	0x08003189
 8002b94:	08003189 	.word	0x08003189
 8002b98:	08003189 	.word	0x08003189
 8002b9c:	08003189 	.word	0x08003189
 8002ba0:	08003189 	.word	0x08003189
 8002ba4:	08003189 	.word	0x08003189
 8002ba8:	08003189 	.word	0x08003189
 8002bac:	08003189 	.word	0x08003189
 8002bb0:	08003189 	.word	0x08003189
 8002bb4:	08003189 	.word	0x08003189
 8002bb8:	08003189 	.word	0x08003189
 8002bbc:	08003189 	.word	0x08003189
 8002bc0:	08003189 	.word	0x08003189
 8002bc4:	08003189 	.word	0x08003189
 8002bc8:	08003189 	.word	0x08003189
 8002bcc:	08003189 	.word	0x08003189
 8002bd0:	08003189 	.word	0x08003189
 8002bd4:	08003189 	.word	0x08003189
 8002bd8:	08003189 	.word	0x08003189
 8002bdc:	08003189 	.word	0x08003189
 8002be0:	08003189 	.word	0x08003189
 8002be4:	08003189 	.word	0x08003189
 8002be8:	08003189 	.word	0x08003189
 8002bec:	08003189 	.word	0x08003189
 8002bf0:	08003189 	.word	0x08003189
 8002bf4:	08003189 	.word	0x08003189
 8002bf8:	08003189 	.word	0x08003189
 8002bfc:	08003189 	.word	0x08003189
 8002c00:	08003189 	.word	0x08003189
 8002c04:	08003161 	.word	0x08003161
 8002c08:	08003189 	.word	0x08003189
 8002c0c:	08003189 	.word	0x08003189
 8002c10:	08003189 	.word	0x08003189
 8002c14:	08003189 	.word	0x08003189
 8002c18:	08003189 	.word	0x08003189
 8002c1c:	08003189 	.word	0x08003189
 8002c20:	08003189 	.word	0x08003189
 8002c24:	08003189 	.word	0x08003189
 8002c28:	08003189 	.word	0x08003189
 8002c2c:	08003189 	.word	0x08003189
 8002c30:	08003189 	.word	0x08003189
 8002c34:	08003189 	.word	0x08003189
 8002c38:	08003189 	.word	0x08003189
 8002c3c:	08003189 	.word	0x08003189
 8002c40:	08003189 	.word	0x08003189
 8002c44:	08003167 	.word	0x08003167
 8002c48:	08003189 	.word	0x08003189
 8002c4c:	08003189 	.word	0x08003189
 8002c50:	08003189 	.word	0x08003189
 8002c54:	08003189 	.word	0x08003189
 8002c58:	08003189 	.word	0x08003189
 8002c5c:	08003189 	.word	0x08003189
 8002c60:	08003189 	.word	0x08003189
 8002c64:	08003189 	.word	0x08003189
 8002c68:	08003189 	.word	0x08003189
 8002c6c:	08003189 	.word	0x08003189
 8002c70:	08003189 	.word	0x08003189
 8002c74:	08003189 	.word	0x08003189
 8002c78:	08003189 	.word	0x08003189
 8002c7c:	08003189 	.word	0x08003189
 8002c80:	08003189 	.word	0x08003189
 8002c84:	08003175 	.word	0x08003175
 8002c88:	0800314d 	.word	0x0800314d
 8002c8c:	08003189 	.word	0x08003189
 8002c90:	08003189 	.word	0x08003189
 8002c94:	08003189 	.word	0x08003189
 8002c98:	08003189 	.word	0x08003189
 8002c9c:	08003189 	.word	0x08003189
 8002ca0:	08003189 	.word	0x08003189
 8002ca4:	08003189 	.word	0x08003189
 8002ca8:	08003189 	.word	0x08003189
 8002cac:	08003189 	.word	0x08003189
 8002cb0:	08003189 	.word	0x08003189
 8002cb4:	08003189 	.word	0x08003189
 8002cb8:	08003189 	.word	0x08003189
 8002cbc:	08003189 	.word	0x08003189
 8002cc0:	08003189 	.word	0x08003189
 8002cc4:	08003183 	.word	0x08003183
 8002cc8:	08003139 	.word	0x08003139
	case 0x10: {
		printf("SDN1 ON\n");
 8002ccc:	480b      	ldr	r0, [pc, #44]	; (8002cfc <HAL_UART_RxCpltCallback+0x3dc>)
 8002cce:	f017 f88b 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_UART_RxCpltCallback+0x3e0>)
 8002cd4:	2104      	movs	r1, #4
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f008 f9af 	bl	800b03c <HAL_GPIO_WritePin>
		break;
 8002cde:	e25e      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8002ce0:	4808      	ldr	r0, [pc, #32]	; (8002d04 <HAL_UART_RxCpltCallback+0x3e4>)
 8002ce2:	f017 f881 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_UART_RxCpltCallback+0x3e0>)
 8002ce8:	2104      	movs	r1, #4
 8002cea:	2200      	movs	r2, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f008 f9a5 	bl	800b03c <HAL_GPIO_WritePin>
		break;
 8002cf2:	e254      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
 8002cf4:	24001a34 	.word	0x24001a34
 8002cf8:	24001ddc 	.word	0x24001ddc
 8002cfc:	0801a7b0 	.word	0x0801a7b0
 8002d00:	58020400 	.word	0x58020400
 8002d04:	0801a7b8 	.word	0x0801a7b8
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8002d08:	48bf      	ldr	r0, [pc, #764]	; (8003008 <HAL_UART_RxCpltCallback+0x6e8>)
 8002d0a:	f017 f86d 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8002d0e:	4bbf      	ldr	r3, [pc, #764]	; (800300c <HAL_UART_RxCpltCallback+0x6ec>)
 8002d10:	2120      	movs	r1, #32
 8002d12:	2201      	movs	r2, #1
 8002d14:	4618      	mov	r0, r3
 8002d16:	f008 f991 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	2008      	movs	r0, #8
 8002d1e:	f002 fb07 	bl	8005330 <set_rail_monitor_enable>
		break;
 8002d22:	e23c      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8002d24:	48ba      	ldr	r0, [pc, #744]	; (8003010 <HAL_UART_RxCpltCallback+0x6f0>)
 8002d26:	f017 f85f 	bl	8019de8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e00f      	b.n	8002d50 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002d30:	4ab8      	ldr	r2, [pc, #736]	; (8003014 <HAL_UART_RxCpltCallback+0x6f4>)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002d38:	4ab6      	ldr	r2, [pc, #728]	; (8003014 <HAL_UART_RxCpltCallback+0x6f4>)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	889b      	ldrh	r3, [r3, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	4619      	mov	r1, r3
 8002d46:	f008 f979 	bl	800b03c <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	dcec      	bgt.n	8002d30 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002d56:	2310      	movs	r3, #16
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	e008      	b.n	8002d6e <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f002 fae4 	bl	8005330 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b07      	cmp	r3, #7
 8002d72:	dcf3      	bgt.n	8002d5c <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8002d74:	e213      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8002d76:	48a8      	ldr	r0, [pc, #672]	; (8003018 <HAL_UART_RxCpltCallback+0x6f8>)
 8002d78:	f017 f836 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8002d7c:	4ba7      	ldr	r3, [pc, #668]	; (800301c <HAL_UART_RxCpltCallback+0x6fc>)
 8002d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d82:	2201      	movs	r2, #1
 8002d84:	4618      	mov	r0, r3
 8002d86:	f008 f959 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	2009      	movs	r0, #9
 8002d8e:	f002 facf 	bl	8005330 <set_rail_monitor_enable>

		break;
 8002d92:	e204      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8002d94:	48a2      	ldr	r0, [pc, #648]	; (8003020 <HAL_UART_RxCpltCallback+0x700>)
 8002d96:	f017 f827 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8002d9a:	4ba0      	ldr	r3, [pc, #640]	; (800301c <HAL_UART_RxCpltCallback+0x6fc>)
 8002d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002da0:	2200      	movs	r2, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f008 f94a 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8002da8:	2100      	movs	r1, #0
 8002daa:	2009      	movs	r0, #9
 8002dac:	f002 fac0 	bl	8005330 <set_rail_monitor_enable>
		break;
 8002db0:	e1f5      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8002db2:	489c      	ldr	r0, [pc, #624]	; (8003024 <HAL_UART_RxCpltCallback+0x704>)
 8002db4:	f017 f818 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8002db8:	4b98      	ldr	r3, [pc, #608]	; (800301c <HAL_UART_RxCpltCallback+0x6fc>)
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f008 f93c 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	200a      	movs	r0, #10
 8002dc8:	f002 fab2 	bl	8005330 <set_rail_monitor_enable>

		break;
 8002dcc:	e1e7      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8002dce:	4896      	ldr	r0, [pc, #600]	; (8003028 <HAL_UART_RxCpltCallback+0x708>)
 8002dd0:	f017 f80a 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8002dd4:	4b91      	ldr	r3, [pc, #580]	; (800301c <HAL_UART_RxCpltCallback+0x6fc>)
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f008 f92e 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8002de0:	2100      	movs	r1, #0
 8002de2:	200a      	movs	r0, #10
 8002de4:	f002 faa4 	bl	8005330 <set_rail_monitor_enable>
		break;
 8002de8:	e1d9      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8002dea:	4890      	ldr	r0, [pc, #576]	; (800302c <HAL_UART_RxCpltCallback+0x70c>)
 8002dec:	f016 fffc 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8002df0:	4b8a      	ldr	r3, [pc, #552]	; (800301c <HAL_UART_RxCpltCallback+0x6fc>)
 8002df2:	2140      	movs	r1, #64	; 0x40
 8002df4:	2201      	movs	r2, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f008 f920 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	200b      	movs	r0, #11
 8002e00:	f002 fa96 	bl	8005330 <set_rail_monitor_enable>

		break;
 8002e04:	e1cb      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8002e06:	488a      	ldr	r0, [pc, #552]	; (8003030 <HAL_UART_RxCpltCallback+0x710>)
 8002e08:	f016 ffee 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8002e0c:	4b83      	ldr	r3, [pc, #524]	; (800301c <HAL_UART_RxCpltCallback+0x6fc>)
 8002e0e:	2140      	movs	r1, #64	; 0x40
 8002e10:	2200      	movs	r2, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f008 f912 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8002e18:	2100      	movs	r1, #0
 8002e1a:	200b      	movs	r0, #11
 8002e1c:	f002 fa88 	bl	8005330 <set_rail_monitor_enable>
		break;
 8002e20:	e1bd      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8002e22:	4884      	ldr	r0, [pc, #528]	; (8003034 <HAL_UART_RxCpltCallback+0x714>)
 8002e24:	f016 ffe0 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8002e28:	4b7c      	ldr	r3, [pc, #496]	; (800301c <HAL_UART_RxCpltCallback+0x6fc>)
 8002e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f008 f903 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8002e36:	2101      	movs	r1, #1
 8002e38:	200c      	movs	r0, #12
 8002e3a:	f002 fa79 	bl	8005330 <set_rail_monitor_enable>

		break;
 8002e3e:	e1ae      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8002e40:	487d      	ldr	r0, [pc, #500]	; (8003038 <HAL_UART_RxCpltCallback+0x718>)
 8002e42:	f016 ffd1 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8002e46:	4b75      	ldr	r3, [pc, #468]	; (800301c <HAL_UART_RxCpltCallback+0x6fc>)
 8002e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f008 f8f4 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8002e54:	2100      	movs	r1, #0
 8002e56:	200c      	movs	r0, #12
 8002e58:	f002 fa6a 	bl	8005330 <set_rail_monitor_enable>
		break;
 8002e5c:	e19f      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8002e5e:	4877      	ldr	r0, [pc, #476]	; (800303c <HAL_UART_RxCpltCallback+0x71c>)
 8002e60:	f016 ffc2 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8002e64:	4b6d      	ldr	r3, [pc, #436]	; (800301c <HAL_UART_RxCpltCallback+0x6fc>)
 8002e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f008 f8e5 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8002e72:	2101      	movs	r1, #1
 8002e74:	200d      	movs	r0, #13
 8002e76:	f002 fa5b 	bl	8005330 <set_rail_monitor_enable>

		break;
 8002e7a:	e190      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8002e7c:	4870      	ldr	r0, [pc, #448]	; (8003040 <HAL_UART_RxCpltCallback+0x720>)
 8002e7e:	f016 ffb3 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8002e82:	4b66      	ldr	r3, [pc, #408]	; (800301c <HAL_UART_RxCpltCallback+0x6fc>)
 8002e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e88:	2200      	movs	r2, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f008 f8d6 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8002e90:	2100      	movs	r1, #0
 8002e92:	200d      	movs	r0, #13
 8002e94:	f002 fa4c 	bl	8005330 <set_rail_monitor_enable>
		break;
 8002e98:	e181      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8002e9a:	486a      	ldr	r0, [pc, #424]	; (8003044 <HAL_UART_RxCpltCallback+0x724>)
 8002e9c:	f016 ffa4 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8002ea0:	4b5e      	ldr	r3, [pc, #376]	; (800301c <HAL_UART_RxCpltCallback+0x6fc>)
 8002ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f008 f8c7 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8002eae:	2101      	movs	r1, #1
 8002eb0:	200f      	movs	r0, #15
 8002eb2:	f002 fa3d 	bl	8005330 <set_rail_monitor_enable>

		break;
 8002eb6:	e172      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8002eb8:	4863      	ldr	r0, [pc, #396]	; (8003048 <HAL_UART_RxCpltCallback+0x728>)
 8002eba:	f016 ff95 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8002ebe:	4b57      	ldr	r3, [pc, #348]	; (800301c <HAL_UART_RxCpltCallback+0x6fc>)
 8002ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f008 f8b8 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8002ecc:	2100      	movs	r1, #0
 8002ece:	200f      	movs	r0, #15
 8002ed0:	f002 fa2e 	bl	8005330 <set_rail_monitor_enable>
		break;
 8002ed4:	e163      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8002ed6:	485d      	ldr	r0, [pc, #372]	; (800304c <HAL_UART_RxCpltCallback+0x72c>)
 8002ed8:	f016 ff86 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8002edc:	4b4b      	ldr	r3, [pc, #300]	; (800300c <HAL_UART_RxCpltCallback+0x6ec>)
 8002ede:	2140      	movs	r1, #64	; 0x40
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f008 f8aa 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8002ee8:	2101      	movs	r1, #1
 8002eea:	2010      	movs	r0, #16
 8002eec:	f002 fa20 	bl	8005330 <set_rail_monitor_enable>

		break;
 8002ef0:	e155      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8002ef2:	4857      	ldr	r0, [pc, #348]	; (8003050 <HAL_UART_RxCpltCallback+0x730>)
 8002ef4:	f016 ff78 	bl	8019de8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8002ef8:	4b44      	ldr	r3, [pc, #272]	; (800300c <HAL_UART_RxCpltCallback+0x6ec>)
 8002efa:	2140      	movs	r1, #64	; 0x40
 8002efc:	2200      	movs	r2, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f008 f89c 	bl	800b03c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8002f04:	2100      	movs	r1, #0
 8002f06:	2010      	movs	r0, #16
 8002f08:	f002 fa12 	bl	8005330 <set_rail_monitor_enable>
		break;
 8002f0c:	e147      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8002f0e:	4851      	ldr	r0, [pc, #324]	; (8003054 <HAL_UART_RxCpltCallback+0x734>)
 8002f10:	f016 ff6a 	bl	8019de8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2320      	movs	r3, #32
 8002f1a:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_UART_RxCpltCallback+0x738>)
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	484f      	ldr	r0, [pc, #316]	; (800305c <HAL_UART_RxCpltCallback+0x73c>)
 8002f20:	f004 fa08 	bl	8007334 <HAL_DAC_Start_DMA>
		break;
 8002f24:	e13b      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8002f26:	484e      	ldr	r0, [pc, #312]	; (8003060 <HAL_UART_RxCpltCallback+0x740>)
 8002f28:	f016 ff5e 	bl	8019de8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	484b      	ldr	r0, [pc, #300]	; (800305c <HAL_UART_RxCpltCallback+0x73c>)
 8002f30:	f004 fac0 	bl	80074b4 <HAL_DAC_Stop_DMA>
		break;
 8002f34:	e133      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8002f36:	484b      	ldr	r0, [pc, #300]	; (8003064 <HAL_UART_RxCpltCallback+0x744>)
 8002f38:	f016 ff56 	bl	8019de8 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002f3c:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_UART_RxCpltCallback+0x748>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2102      	movs	r1, #2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f013 fe12 	bl	8016b6c <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8002f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f4c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 8002f52:	4b46      	ldr	r3, [pc, #280]	; (800306c <HAL_UART_RxCpltCallback+0x74c>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]

		break;
 8002f58:	e121      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8002f5a:	4845      	ldr	r0, [pc, #276]	; (8003070 <HAL_UART_RxCpltCallback+0x750>)
 8002f5c:	f016 ff44 	bl	8019de8 <puts>
		ERPA_ENABLED = 0;
 8002f60:	4b42      	ldr	r3, [pc, #264]	; (800306c <HAL_UART_RxCpltCallback+0x74c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002f66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002f6e:	e116      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8002f70:	4840      	ldr	r0, [pc, #256]	; (8003074 <HAL_UART_RxCpltCallback+0x754>)
 8002f72:	f016 ff39 	bl	8019de8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002f76:	2100      	movs	r1, #0
 8002f78:	483f      	ldr	r0, [pc, #252]	; (8003078 <HAL_UART_RxCpltCallback+0x758>)
 8002f7a:	f00f fb09 	bl	8012590 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	; (8003068 <HAL_UART_RxCpltCallback+0x748>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2101      	movs	r1, #1
 8002f84:	4618      	mov	r0, r3
 8002f86:	f013 fdf1 	bl	8016b6c <osEventFlagsSet>
		break;
 8002f8a:	e108      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8002f8c:	483b      	ldr	r0, [pc, #236]	; (800307c <HAL_UART_RxCpltCallback+0x75c>)
 8002f8e:	f016 ff2b 	bl	8019de8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8002f92:	2100      	movs	r1, #0
 8002f94:	4838      	ldr	r0, [pc, #224]	; (8003078 <HAL_UART_RxCpltCallback+0x758>)
 8002f96:	f00f fc55 	bl	8012844 <HAL_TIM_OC_Stop_IT>
		break;
 8002f9a:	e100      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1C: {
		printf("HK ON \n");
 8002f9c:	4838      	ldr	r0, [pc, #224]	; (8003080 <HAL_UART_RxCpltCallback+0x760>)
 8002f9e:	f016 ff23 	bl	8019de8 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002fa2:	4b31      	ldr	r3, [pc, #196]	; (8003068 <HAL_UART_RxCpltCallback+0x748>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2104      	movs	r1, #4
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f013 fddf 	bl	8016b6c <osEventFlagsSet>
		HK_ENABLED = 1;
 8002fae:	4b35      	ldr	r3, [pc, #212]	; (8003084 <HAL_UART_RxCpltCallback+0x764>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
		break;
 8002fb4:	e0f3      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8002fb6:	4834      	ldr	r0, [pc, #208]	; (8003088 <HAL_UART_RxCpltCallback+0x768>)
 8002fb8:	f016 ff16 	bl	8019de8 <puts>
		HK_ENABLED = 0;
 8002fbc:	4b31      	ldr	r3, [pc, #196]	; (8003084 <HAL_UART_RxCpltCallback+0x764>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
		break;
 8002fc2:	e0ec      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1D: {
		printf("Step Up\n");
 8002fc4:	4831      	ldr	r0, [pc, #196]	; (800308c <HAL_UART_RxCpltCallback+0x76c>)
 8002fc6:	f016 ff0f 	bl	8019de8 <puts>
		if (step < 14) {
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_UART_RxCpltCallback+0x770>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b0d      	cmp	r3, #13
 8002fd2:	f200 80dd 	bhi.w	8003190 <HAL_UART_RxCpltCallback+0x870>
			step += 2;
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_UART_RxCpltCallback+0x770>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	3302      	adds	r3, #2
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_UART_RxCpltCallback+0x770>)
 8002fe2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8002fe4:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <HAL_UART_RxCpltCallback+0x770>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_UART_RxCpltCallback+0x738>)
 8002fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4819      	ldr	r0, [pc, #100]	; (800305c <HAL_UART_RxCpltCallback+0x73c>)
 8002ff8:	f004 faff 	bl	80075fa <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4817      	ldr	r0, [pc, #92]	; (800305c <HAL_UART_RxCpltCallback+0x73c>)
 8003000:	f004 f940 	bl	8007284 <HAL_DAC_Start>
		}
		break;
 8003004:	e0c4      	b.n	8003190 <HAL_UART_RxCpltCallback+0x870>
 8003006:	bf00      	nop
 8003008:	0801a7c4 	.word	0x0801a7c4
 800300c:	58020400 	.word	0x58020400
 8003010:	0801a7d0 	.word	0x0801a7d0
 8003014:	0801aacc 	.word	0x0801aacc
 8003018:	0801a7dc 	.word	0x0801a7dc
 800301c:	58020800 	.word	0x58020800
 8003020:	0801a7e8 	.word	0x0801a7e8
 8003024:	0801a7f8 	.word	0x0801a7f8
 8003028:	0801a804 	.word	0x0801a804
 800302c:	0801a810 	.word	0x0801a810
 8003030:	0801a81c 	.word	0x0801a81c
 8003034:	0801a82c 	.word	0x0801a82c
 8003038:	0801a838 	.word	0x0801a838
 800303c:	0801a844 	.word	0x0801a844
 8003040:	0801a850 	.word	0x0801a850
 8003044:	0801a85c 	.word	0x0801a85c
 8003048:	0801a86c 	.word	0x0801a86c
 800304c:	0801a87c 	.word	0x0801a87c
 8003050:	0801a888 	.word	0x0801a888
 8003054:	0801a898 	.word	0x0801a898
 8003058:	2400000c 	.word	0x2400000c
 800305c:	240002f4 	.word	0x240002f4
 8003060:	0801a8a8 	.word	0x0801a8a8
 8003064:	0801a8b8 	.word	0x0801a8b8
 8003068:	24001a28 	.word	0x24001a28
 800306c:	24001a75 	.word	0x24001a75
 8003070:	0801a8c0 	.word	0x0801a8c0
 8003074:	0801a8cc 	.word	0x0801a8cc
 8003078:	24001d44 	.word	0x24001d44
 800307c:	0801a8d4 	.word	0x0801a8d4
 8003080:	0801a8dc 	.word	0x0801a8dc
 8003084:	24001a74 	.word	0x24001a74
 8003088:	0801a8e4 	.word	0x0801a8e4
 800308c:	0801a8ec 	.word	0x0801a8ec
 8003090:	24001a76 	.word	0x24001a76
	}
	case 0x0D: {
		printf("Step Down\n");
 8003094:	4844      	ldr	r0, [pc, #272]	; (80031a8 <HAL_UART_RxCpltCallback+0x888>)
 8003096:	f016 fea7 	bl	8019de8 <puts>
		if (step > 1) {
 800309a:	4b44      	ldr	r3, [pc, #272]	; (80031ac <HAL_UART_RxCpltCallback+0x88c>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d977      	bls.n	8003194 <HAL_UART_RxCpltCallback+0x874>
			step -= 2;
 80030a4:	4b41      	ldr	r3, [pc, #260]	; (80031ac <HAL_UART_RxCpltCallback+0x88c>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	3b02      	subs	r3, #2
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <HAL_UART_RxCpltCallback+0x88c>)
 80030b0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80030b2:	4b3e      	ldr	r3, [pc, #248]	; (80031ac <HAL_UART_RxCpltCallback+0x88c>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <HAL_UART_RxCpltCallback+0x890>)
 80030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2100      	movs	r1, #0
 80030c4:	483b      	ldr	r0, [pc, #236]	; (80031b4 <HAL_UART_RxCpltCallback+0x894>)
 80030c6:	f004 fa98 	bl	80075fa <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80030ca:	2100      	movs	r1, #0
 80030cc:	4839      	ldr	r0, [pc, #228]	; (80031b4 <HAL_UART_RxCpltCallback+0x894>)
 80030ce:	f004 f8d9 	bl	8007284 <HAL_DAC_Start>
		}
		break;
 80030d2:	e05f      	b.n	8003194 <HAL_UART_RxCpltCallback+0x874>
	}
	case 0x1E: {
		printf("Factor Up\n");
 80030d4:	4838      	ldr	r0, [pc, #224]	; (80031b8 <HAL_UART_RxCpltCallback+0x898>)
 80030d6:	f016 fe87 	bl	8019de8 <puts>
		if (cadence <= 50000) {
 80030da:	4b38      	ldr	r3, [pc, #224]	; (80031bc <HAL_UART_RxCpltCallback+0x89c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f24c 3250 	movw	r2, #50000	; 0xc350
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d858      	bhi.n	8003198 <HAL_UART_RxCpltCallback+0x878>
			cadence *= 2;
 80030e6:	4b35      	ldr	r3, [pc, #212]	; (80031bc <HAL_UART_RxCpltCallback+0x89c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4a33      	ldr	r2, [pc, #204]	; (80031bc <HAL_UART_RxCpltCallback+0x89c>)
 80030ee:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80030f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_UART_RxCpltCallback+0x89c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80030fa:	e04d      	b.n	8003198 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0E: {
		printf("Factor Down\n");
 80030fc:	4830      	ldr	r0, [pc, #192]	; (80031c0 <HAL_UART_RxCpltCallback+0x8a0>)
 80030fe:	f016 fe73 	bl	8019de8 <puts>
		if (cadence >= 6250) {
 8003102:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <HAL_UART_RxCpltCallback+0x89c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f641 0269 	movw	r2, #6249	; 0x1869
 800310a:	4293      	cmp	r3, r2
 800310c:	d946      	bls.n	800319c <HAL_UART_RxCpltCallback+0x87c>
			cadence /= 2;
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_UART_RxCpltCallback+0x89c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	085b      	lsrs	r3, r3, #1
 8003114:	4a29      	ldr	r2, [pc, #164]	; (80031bc <HAL_UART_RxCpltCallback+0x89c>)
 8003116:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003118:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <HAL_UART_RxCpltCallback+0x89c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003122:	e03b      	b.n	800319c <HAL_UART_RxCpltCallback+0x87c>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8003124:	4827      	ldr	r0, [pc, #156]	; (80031c4 <HAL_UART_RxCpltCallback+0x8a4>)
 8003126:	f016 fe5f 	bl	8019de8 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 800312a:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <HAL_UART_RxCpltCallback+0x8a8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2102      	movs	r1, #2
 8003130:	4618      	mov	r0, r3
 8003132:	f013 fd1b 	bl	8016b6c <osEventFlagsSet>
		break;
 8003136:	e032      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8003138:	4824      	ldr	r0, [pc, #144]	; (80031cc <HAL_UART_RxCpltCallback+0x8ac>)
 800313a:	f016 fe55 	bl	8019de8 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 800313e:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <HAL_UART_RxCpltCallback+0x8a8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2104      	movs	r1, #4
 8003144:	4618      	mov	r0, r3
 8003146:	f013 fd11 	bl	8016b6c <osEventFlagsSet>
		break;
 800314a:	e028      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 800314c:	4820      	ldr	r0, [pc, #128]	; (80031d0 <HAL_UART_RxCpltCallback+0x8b0>)
 800314e:	f016 fe4b 	bl	8019de8 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8003152:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <HAL_UART_RxCpltCallback+0x8a8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2108      	movs	r1, #8
 8003158:	4618      	mov	r0, r3
 800315a:	f013 fd07 	bl	8016b6c <osEventFlagsSet>
		break;
 800315e:	e01e      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xAF: {
		sync();
 8003160:	f000 f9c8 	bl	80034f4 <sync>
		break;
 8003164:	e01b      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8003166:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_UART_RxCpltCallback+0x8b4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2101      	movs	r1, #1
 800316c:	4618      	mov	r0, r3
 800316e:	f013 fcfd 	bl	8016b6c <osEventFlagsSet>
		break;
 8003172:	e014      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8003174:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_UART_RxCpltCallback+0x8b4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2102      	movs	r1, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f013 fcf6 	bl	8016b6c <osEventFlagsSet>
		break;
 8003180:	e00d      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xDF: {
		reset_eeprom_error_counters();
 8003182:	f7fe ff6d 	bl	8002060 <reset_eeprom_error_counters>
		break;
 8003186:	e00a      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
	}
	default: {
		printf("Unknown Command\n");
 8003188:	4813      	ldr	r0, [pc, #76]	; (80031d8 <HAL_UART_RxCpltCallback+0x8b8>)
 800318a:	f016 fe2d 	bl	8019de8 <puts>
		break;
 800318e:	e006      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
		break;
 8003190:	bf00      	nop
 8003192:	e004      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
		break;
 8003194:	bf00      	nop
 8003196:	e002      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
		break;
 8003198:	bf00      	nop
 800319a:	e000      	b.n	800319e <HAL_UART_RxCpltCallback+0x87e>
		break;
 800319c:	bf00      	nop
	}
	}
}
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	0801a8f4 	.word	0x0801a8f4
 80031ac:	24001a76 	.word	0x24001a76
 80031b0:	2400000c 	.word	0x2400000c
 80031b4:	240002f4 	.word	0x240002f4
 80031b8:	0801a900 	.word	0x0801a900
 80031bc:	2400008c 	.word	0x2400008c
 80031c0:	0801a90c 	.word	0x0801a90c
 80031c4:	0801a918 	.word	0x0801a918
 80031c8:	24001a2c 	.word	0x24001a2c
 80031cc:	0801a928 	.word	0x0801a928
 80031d0:	0801a934 	.word	0x0801a934
 80031d4:	24001a30 	.word	0x24001a30
 80031d8:	0801a940 	.word	0x0801a940

080031dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80031e2:	f000 fa2b 	bl	800363c <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80031e6:	4b45      	ldr	r3, [pc, #276]	; (80032fc <main+0x120>)
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d11b      	bne.n	800322a <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 80031f2:	f3bf 8f4f 	dsb	sy
}
 80031f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031f8:	f3bf 8f6f 	isb	sy
}
 80031fc:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80031fe:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <main+0x120>)
 8003200:	2200      	movs	r2, #0
 8003202:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003206:	f3bf 8f4f 	dsb	sy
}
 800320a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800320c:	f3bf 8f6f 	isb	sy
}
 8003210:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003212:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <main+0x120>)
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4a39      	ldr	r2, [pc, #228]	; (80032fc <main+0x120>)
 8003218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800321e:	f3bf 8f4f 	dsb	sy
}
 8003222:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003224:	f3bf 8f6f 	isb	sy
}
 8003228:	e000      	b.n	800322c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800322a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800322c:	4b33      	ldr	r3, [pc, #204]	; (80032fc <main+0x120>)
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d138      	bne.n	80032aa <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003238:	4b30      	ldr	r3, [pc, #192]	; (80032fc <main+0x120>)
 800323a:	2200      	movs	r2, #0
 800323c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003240:	f3bf 8f4f 	dsb	sy
}
 8003244:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003246:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <main+0x120>)
 8003248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800324c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	0b5b      	lsrs	r3, r3, #13
 8003252:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003256:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	08db      	lsrs	r3, r3, #3
 800325c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003260:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800326a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003270:	4922      	ldr	r1, [pc, #136]	; (80032fc <main+0x120>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	1e5a      	subs	r2, r3, #1
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ef      	bne.n	8003262 <main+0x86>
    } while(sets-- != 0U);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	1e5a      	subs	r2, r3, #1
 8003286:	60ba      	str	r2, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e5      	bne.n	8003258 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800328c:	f3bf 8f4f 	dsb	sy
}
 8003290:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003292:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <main+0x120>)
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	4a19      	ldr	r2, [pc, #100]	; (80032fc <main+0x120>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800329e:	f3bf 8f4f 	dsb	sy
}
 80032a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032a4:	f3bf 8f6f 	isb	sy
}
 80032a8:	e000      	b.n	80032ac <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80032aa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032ac:	f002 f9de 	bl	800566c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032b0:	f000 f826 	bl	8003300 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80032b4:	f000 f8a4 	bl	8003400 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032b8:	f7ff f92c 	bl	8002514 <MX_GPIO_Init>
  MX_DMA_Init();
 80032bc:	f7fd fd14 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80032c0:	f001 fd6e 	bl	8004da0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80032c4:	f7ff f9a0 	bl	8002608 <MX_I2C1_Init>
  MX_SPI2_Init();
 80032c8:	f000 fea4 	bl	8004014 <MX_SPI2_Init>
  MX_TIM2_Init();
 80032cc:	f001 fb90 	bl	80049f0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80032d0:	f001 fae0 	bl	8004894 <MX_TIM1_Init>
  MX_ADC3_Init();
 80032d4:	f7fd faa8 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80032d8:	f7fd f984 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80032dc:	f7fd fc50 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80032e0:	f000 fe40 	bl	8003f64 <MX_SPI1_Init>
  MX_RTC_Init();
 80032e4:	f000 fc0c 	bl	8003b00 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 80032e8:	f000 f8ba 	bl	8003460 <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80032ec:	f013 fae8 	bl	80168c0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80032f0:	f7fe fef0 	bl	80020d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80032f4:	f013 fb08 	bl	8016908 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80032f8:	e7fe      	b.n	80032f8 <main+0x11c>
 80032fa:	bf00      	nop
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b09c      	sub	sp, #112	; 0x70
 8003304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800330a:	224c      	movs	r2, #76	; 0x4c
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f016 fcf4 	bl	8019cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003314:	1d3b      	adds	r3, r7, #4
 8003316:	2220      	movs	r2, #32
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f016 fcee 	bl	8019cfc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003320:	2002      	movs	r0, #2
 8003322:	f00a fa45 	bl	800d7b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003326:	2300      	movs	r3, #0
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4b33      	ldr	r3, [pc, #204]	; (80033f8 <SystemClock_Config+0xf8>)
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	4a32      	ldr	r2, [pc, #200]	; (80033f8 <SystemClock_Config+0xf8>)
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003336:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <SystemClock_Config+0xf8>)
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <SystemClock_Config+0xfc>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003348:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <SystemClock_Config+0xfc>)
 800334a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800334e:	6193      	str	r3, [r2, #24]
 8003350:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <SystemClock_Config+0xfc>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800335c:	bf00      	nop
 800335e:	4b27      	ldr	r3, [pc, #156]	; (80033fc <SystemClock_Config+0xfc>)
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336a:	d1f8      	bne.n	800335e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800336c:	2303      	movs	r3, #3
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8003376:	2309      	movs	r3, #9
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800337a:	2340      	movs	r3, #64	; 0x40
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800337e:	2302      	movs	r3, #2
 8003380:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003382:	2302      	movs	r3, #2
 8003384:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003386:	2304      	movs	r3, #4
 8003388:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800338a:	2318      	movs	r3, #24
 800338c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800338e:	2302      	movs	r3, #2
 8003390:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003392:	2302      	movs	r3, #2
 8003394:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003396:	2302      	movs	r3, #2
 8003398:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800339a:	2308      	movs	r3, #8
 800339c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800339e:	2302      	movs	r3, #2
 80033a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033aa:	4618      	mov	r0, r3
 80033ac:	f00a fa3a 	bl	800d824 <HAL_RCC_OscConfig>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <SystemClock_Config+0xba>
  {
    Error_Handler();
 80033b6:	f000 f995 	bl	80036e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033ba:	233f      	movs	r3, #63	; 0x3f
 80033bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033be:	2303      	movs	r3, #3
 80033c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80033ce:	2340      	movs	r3, #64	; 0x40
 80033d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80033da:	1d3b      	adds	r3, r7, #4
 80033dc:	2101      	movs	r1, #1
 80033de:	4618      	mov	r0, r3
 80033e0:	f00a fe7a 	bl	800e0d8 <HAL_RCC_ClockConfig>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <SystemClock_Config+0xee>
  {
    Error_Handler();
 80033ea:	f000 f97b 	bl	80036e4 <Error_Handler>
  }
}
 80033ee:	bf00      	nop
 80033f0:	3770      	adds	r7, #112	; 0x70
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	58000400 	.word	0x58000400
 80033fc:	58024800 	.word	0x58024800

08003400 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b0b0      	sub	sp, #192	; 0xc0
 8003404:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003406:	463b      	mov	r3, r7
 8003408:	22c0      	movs	r2, #192	; 0xc0
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f016 fc75 	bl	8019cfc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003412:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800341e:	2304      	movs	r3, #4
 8003420:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8003422:	2318      	movs	r3, #24
 8003424:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8003426:	2308      	movs	r3, #8
 8003428:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800342a:	2302      	movs	r3, #2
 800342c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800342e:	2302      	movs	r3, #2
 8003430:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003436:	2320      	movs	r3, #32
 8003438:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800343e:	2300      	movs	r3, #0
 8003440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003444:	463b      	mov	r3, r7
 8003446:	4618      	mov	r0, r3
 8003448:	f00b fa14 	bl	800e874 <HAL_RCCEx_PeriphCLKConfig>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8003452:	f000 f947 	bl	80036e4 <Error_Handler>
  }
}
 8003456:	bf00      	nop
 8003458:	37c0      	adds	r7, #192	; 0xc0
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	packet_event_flags = osEventFlagsNew(NULL);
 8003464:	2000      	movs	r0, #0
 8003466:	f013 fb42 	bl	8016aee <osEventFlagsNew>
 800346a:	4603      	mov	r3, r0
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <system_setup+0x7c>)
 800346e:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003470:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <system_setup+0x7c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d100      	bne.n	800347a <system_setup+0x1a>
        while (1);
 8003478:	e7fe      	b.n	8003478 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800347a:	2000      	movs	r0, #0
 800347c:	f013 fb37 	bl	8016aee <osEventFlagsNew>
 8003480:	4603      	mov	r3, r0
 8003482:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <system_setup+0x80>)
 8003484:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8003486:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <system_setup+0x80>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d100      	bne.n	8003490 <system_setup+0x30>
        while (1);
 800348e:	e7fe      	b.n	800348e <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003490:	2000      	movs	r0, #0
 8003492:	f013 fb2c 	bl	8016aee <osEventFlagsNew>
 8003496:	4603      	mov	r3, r0
 8003498:	4a12      	ldr	r2, [pc, #72]	; (80034e4 <system_setup+0x84>)
 800349a:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <system_setup+0x84>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d100      	bne.n	80034a6 <system_setup+0x46>
        while (1);
 80034a4:	e7fe      	b.n	80034a4 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 80034a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034aa:	2200      	movs	r2, #0
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80034ae:	210c      	movs	r1, #12
 80034b0:	480d      	ldr	r0, [pc, #52]	; (80034e8 <system_setup+0x88>)
 80034b2:	f00f f86d 	bl	8012590 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 80034b6:	f001 fd7d 	bl	8004fb4 <voltage_monitor_init>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d100      	bne.n	80034c2 <system_setup+0x62>
		while (1);
 80034c0:	e7fe      	b.n	80034c0 <system_setup+0x60>
	}




	if (!init_adc_dma()) {
 80034c2:	f000 fbaf 	bl	8003c24 <init_adc_dma>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d100      	bne.n	80034ce <system_setup+0x6e>
		while (1);
 80034cc:	e7fe      	b.n	80034cc <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80034ce:	2201      	movs	r2, #1
 80034d0:	4906      	ldr	r1, [pc, #24]	; (80034ec <system_setup+0x8c>)
 80034d2:	4807      	ldr	r0, [pc, #28]	; (80034f0 <system_setup+0x90>)
 80034d4:	f010 fd3c 	bl	8013f50 <HAL_UART_Receive_IT>

}
 80034d8:	bf00      	nop
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	24001a28 	.word	0x24001a28
 80034e0:	24001a2c 	.word	0x24001a2c
 80034e4:	24001a30 	.word	0x24001a30
 80034e8:	24001d90 	.word	0x24001d90
 80034ec:	24001a34 	.word	0x24001a34
 80034f0:	24001ddc 	.word	0x24001ddc

080034f4 <sync>:

void sync() {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
	send_ACK();
 80034fa:	f000 f81f 	bl	800353c <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80034fe:	480d      	ldr	r0, [pc, #52]	; (8003534 <sync+0x40>)
 8003500:	f010 fd72 	bl	8013fe8 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8003504:	2364      	movs	r3, #100	; 0x64
 8003506:	2209      	movs	r2, #9
 8003508:	490b      	ldr	r1, [pc, #44]	; (8003538 <sync+0x44>)
 800350a:	480a      	ldr	r0, [pc, #40]	; (8003534 <sync+0x40>)
 800350c:	f010 fc58 	bl	8013dc0 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8003510:	4b09      	ldr	r3, [pc, #36]	; (8003538 <sync+0x44>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	2bff      	cmp	r3, #255	; 0xff
 800351a:	d1f3      	bne.n	8003504 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800351c:	2201      	movs	r2, #1
 800351e:	4906      	ldr	r1, [pc, #24]	; (8003538 <sync+0x44>)
 8003520:	4804      	ldr	r0, [pc, #16]	; (8003534 <sync+0x40>)
 8003522:	f010 fd15 	bl	8013f50 <HAL_UART_Receive_IT>

	send_ACK();
 8003526:	f000 f809 	bl	800353c <send_ACK>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	24001ddc 	.word	0x24001ddc
 8003538:	24001a34 	.word	0x24001a34

0800353c <send_ACK>:

void send_ACK() {
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <send_ACK+0x1c>)
 8003542:	22ff      	movs	r2, #255	; 0xff
 8003544:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8003546:	2364      	movs	r3, #100	; 0x64
 8003548:	2201      	movs	r2, #1
 800354a:	4903      	ldr	r1, [pc, #12]	; (8003558 <send_ACK+0x1c>)
 800354c:	4803      	ldr	r0, [pc, #12]	; (800355c <send_ACK+0x20>)
 800354e:	f010 fba9 	bl	8013ca4 <HAL_UART_Transmit>
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	24001a80 	.word	0x24001a80
 800355c:	24001ddc 	.word	0x24001ddc

08003560 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003566:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <get_current_step+0xc0>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003572:	4293      	cmp	r3, r2
 8003574:	d04a      	beq.n	800360c <get_current_step+0xac>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357c:	da48      	bge.n	8003610 <get_current_step+0xb0>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003584:	4293      	cmp	r3, r2
 8003586:	d03f      	beq.n	8003608 <get_current_step+0xa8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f640 628b 	movw	r2, #3723	; 0xe8b
 800358e:	4293      	cmp	r3, r2
 8003590:	dc3e      	bgt.n	8003610 <get_current_step+0xb0>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003598:	4293      	cmp	r3, r2
 800359a:	d033      	beq.n	8003604 <get_current_step+0xa4>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80035a2:	da35      	bge.n	8003610 <get_current_step+0xb0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d028      	beq.n	8003600 <get_current_step+0xa0>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80035b4:	4293      	cmp	r3, r2
 80035b6:	dc2b      	bgt.n	8003610 <get_current_step+0xb0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f240 7245 	movw	r2, #1861	; 0x745
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01c      	beq.n	80035fc <get_current_step+0x9c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f240 7245 	movw	r2, #1861	; 0x745
 80035c8:	4293      	cmp	r3, r2
 80035ca:	dc21      	bgt.n	8003610 <get_current_step+0xb0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d010      	beq.n	80035f8 <get_current_step+0x98>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80035dc:	4293      	cmp	r3, r2
 80035de:	dc17      	bgt.n	8003610 <get_current_step+0xb0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <get_current_step+0x90>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80035ec:	d002      	beq.n	80035f4 <get_current_step+0x94>
 80035ee:	e00f      	b.n	8003610 <get_current_step+0xb0>
	case 0:
		return 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e00e      	b.n	8003612 <get_current_step+0xb2>
	case 620:
		return 1;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e00c      	b.n	8003612 <get_current_step+0xb2>
	case 1241:
		return 2;
 80035f8:	2302      	movs	r3, #2
 80035fa:	e00a      	b.n	8003612 <get_current_step+0xb2>
	case 1861:
		return 3;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e008      	b.n	8003612 <get_current_step+0xb2>
	case 2482:
		return 4;
 8003600:	2304      	movs	r3, #4
 8003602:	e006      	b.n	8003612 <get_current_step+0xb2>
	case 3103:
		return 5;
 8003604:	2305      	movs	r3, #5
 8003606:	e004      	b.n	8003612 <get_current_step+0xb2>
	case 3723:
		return 6;
 8003608:	2306      	movs	r3, #6
 800360a:	e002      	b.n	8003612 <get_current_step+0xb2>
	case 4095:
		return 7;
 800360c:	2307      	movs	r3, #7
 800360e:	e000      	b.n	8003612 <get_current_step+0xb2>
	default:
		return -1;
 8003610:	23ff      	movs	r3, #255	; 0xff
	}
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40007400 	.word	0x40007400

08003624 <enter_stop>:

void enter_stop() {
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
	  send_ACK();
 8003628:	f7ff ff88 	bl	800353c <send_ACK>

	  vTaskSuspendAll();
 800362c:	f014 fdf6 	bl	801821c <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003630:	2101      	movs	r1, #1
 8003632:	2001      	movs	r0, #1
 8003634:	f00a f880 	bl	800d738 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8003638:	f7ff f906 	bl	8002848 <__NVIC_SystemReset>

0800363c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003642:	463b      	mov	r3, r7
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800364e:	f003 fd7f 	bl	8007150 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003652:	2301      	movs	r3, #1
 8003654:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003656:	2300      	movs	r3, #0
 8003658:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800365e:	231f      	movs	r3, #31
 8003660:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003662:	2387      	movs	r3, #135	; 0x87
 8003664:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003666:	2300      	movs	r3, #0
 8003668:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800366a:	2300      	movs	r3, #0
 800366c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800366e:	2301      	movs	r3, #1
 8003670:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003672:	2301      	movs	r3, #1
 8003674:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003676:	2300      	movs	r3, #0
 8003678:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800367e:	463b      	mov	r3, r7
 8003680:	4618      	mov	r0, r3
 8003682:	f003 fd9d 	bl	80071c0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003686:	2301      	movs	r3, #1
 8003688:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x081C0000;
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <MPU_Config+0x80>)
 800368c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800368e:	2311      	movs	r3, #17
 8003690:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8003692:	2300      	movs	r3, #0
 8003694:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8003696:	2301      	movs	r3, #1
 8003698:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800369a:	2303      	movs	r3, #3
 800369c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800369e:	2300      	movs	r3, #0
 80036a0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80036a6:	463b      	mov	r3, r7
 80036a8:	4618      	mov	r0, r3
 80036aa:	f003 fd89 	bl	80071c0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80036ae:	2004      	movs	r0, #4
 80036b0:	f003 fd66 	bl	8007180 <HAL_MPU_Enable>

}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	081c0000 	.word	0x081c0000

080036c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036d2:	f002 f807 	bl	80056e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40001000 	.word	0x40001000

080036e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80036e8:	b672      	cpsid	i
}
 80036ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80036ec:	e7fe      	b.n	80036ec <Error_Handler+0x8>
	...

080036f0 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80036f6:	bf00      	nop
 80036f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036fc:	481c      	ldr	r0, [pc, #112]	; (8003770 <create_pmt_packet+0x80>)
 80036fe:	f007 fc85 	bl	800b00c <HAL_GPIO_ReadPin>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f7      	bne.n	80036f8 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	4618      	mov	r0, r3
 800370c:	f001 faa8 	bl	8004c60 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003710:	f107 0308 	add.w	r3, r7, #8
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fad9 	bl	8003ccc <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 800371a:	23bb      	movs	r3, #187	; 0xbb
 800371c:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 800371e:	23bb      	movs	r3, #187	; 0xbb
 8003720:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <create_pmt_packet+0x84>)
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	b29b      	uxth	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <create_pmt_packet+0x84>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003736:	7a3b      	ldrb	r3, [r7, #8]
 8003738:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 800373a:	7a7b      	ldrb	r3, [r7, #9]
 800373c:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 800373e:	793b      	ldrb	r3, [r7, #4]
 8003740:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003742:	797b      	ldrb	r3, [r7, #5]
 8003744:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003746:	79bb      	ldrb	r3, [r7, #6]
 8003748:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 800374e:	f107 010c 	add.w	r1, r7, #12
 8003752:	2364      	movs	r3, #100	; 0x64
 8003754:	220a      	movs	r2, #10
 8003756:	4808      	ldr	r0, [pc, #32]	; (8003778 <create_pmt_packet+0x88>)
 8003758:	f010 faa4 	bl	8013ca4 <HAL_UART_Transmit>

	pmt_seq++;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <create_pmt_packet+0x84>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <create_pmt_packet+0x84>)
 8003766:	801a      	strh	r2, [r3, #0]
}
 8003768:	bf00      	nop
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	58020000 	.word	0x58020000
 8003774:	24001a82 	.word	0x24001a82
 8003778:	24001ddc 	.word	0x24001ddc

0800377c <create_erpa_packet>:


void create_erpa_packet() {
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003782:	bf00      	nop
 8003784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003788:	4828      	ldr	r0, [pc, #160]	; (800382c <create_erpa_packet+0xb0>)
 800378a:	f007 fc3f 	bl	800b00c <HAL_GPIO_ReadPin>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f7      	bne.n	8003784 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003794:	23ff      	movs	r3, #255	; 0xff
 8003796:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	4618      	mov	r0, r3
 800379c:	f001 fa60 	bl	8004c60 <get_uptime>
	sweep_step = get_current_step();
 80037a0:	f7ff fede 	bl	8003560 <get_current_step>
 80037a4:	4603      	mov	r3, r0
 80037a6:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 80037a8:	f107 030c 	add.w	r3, r7, #12
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 faad 	bl	8003d0c <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 80037b2:	f107 0308 	add.w	r3, r7, #8
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fac8 	bl	8003d4c <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 80037bc:	23aa      	movs	r3, #170	; 0xaa
 80037be:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 80037c0:	23aa      	movs	r3, #170	; 0xaa
 80037c2:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <create_erpa_packet+0xb4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80037ce:	4b18      	ldr	r3, [pc, #96]	; (8003830 <create_erpa_packet+0xb4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 80037d8:	4b15      	ldr	r3, [pc, #84]	; (8003830 <create_erpa_packet+0xb4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 80037e0:	7ffb      	ldrb	r3, [r7, #31]
 80037e2:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80037e4:	893b      	ldrh	r3, [r7, #8]
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80037ee:	893b      	ldrh	r3, [r7, #8]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80037f4:	7b3b      	ldrb	r3, [r7, #12]
 80037f6:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80037f8:	7b7b      	ldrb	r3, [r7, #13]
 80037fa:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 80037fc:	793b      	ldrb	r3, [r7, #4]
 80037fe:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003800:	797b      	ldrb	r3, [r7, #5]
 8003802:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003804:	79bb      	ldrb	r3, [r7, #6]
 8003806:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 800380c:	f107 0110 	add.w	r1, r7, #16
 8003810:	2364      	movs	r3, #100	; 0x64
 8003812:	220e      	movs	r2, #14
 8003814:	4807      	ldr	r0, [pc, #28]	; (8003834 <create_erpa_packet+0xb8>)
 8003816:	f010 fa45 	bl	8013ca4 <HAL_UART_Transmit>

	erpa_seq++;
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <create_erpa_packet+0xb4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3301      	adds	r3, #1
 8003820:	4a03      	ldr	r2, [pc, #12]	; (8003830 <create_erpa_packet+0xb4>)
 8003822:	6013      	str	r3, [r2, #0]
}
 8003824:	bf00      	nop
 8003826:	3720      	adds	r7, #32
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	58020400 	.word	0x58020400
 8003830:	24001a84 	.word	0x24001a84
 8003834:	24001ddc 	.word	0x24001ddc

08003838 <create_hk_packet>:


void create_hk_packet() {
 8003838:	b580      	push	{r7, lr}
 800383a:	b094      	sub	sp, #80	; 0x50
 800383c:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 800383e:	1d3b      	adds	r3, r7, #4
 8003840:	4618      	mov	r0, r3
 8003842:	f001 fa0d 	bl	8004c60 <get_uptime>
	get_timestamp(timestamp);
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	4618      	mov	r0, r3
 800384c:	f001 fa58 	bl	8004d00 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8003850:	f001 fdf0 	bl	8005434 <get_rail_monitor>
 8003854:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003856:	23cc      	movs	r3, #204	; 0xcc
 8003858:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800385a:	23cc      	movs	r3, #204	; 0xcc
 800385c:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800385e:	4b9b      	ldr	r3, [pc, #620]	; (8003acc <create_hk_packet+0x294>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	b29b      	uxth	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800386a:	4b98      	ldr	r3, [pc, #608]	; (8003acc <create_hk_packet+0x294>)
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003874:	889b      	ldrh	r3, [r3, #4]
 8003876:	0a1b      	lsrs	r3, r3, #8
 8003878:	b29b      	uxth	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 800387e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003880:	889b      	ldrh	r3, [r3, #4]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003888:	330a      	adds	r3, #10
 800388a:	889b      	ldrh	r3, [r3, #4]
 800388c:	0a1b      	lsrs	r3, r3, #8
 800388e:	b29b      	uxth	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003896:	330a      	adds	r3, #10
 8003898:	889b      	ldrh	r3, [r3, #4]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 800389e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a0:	3314      	adds	r3, #20
 80038a2:	889b      	ldrh	r3, [r3, #4]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 80038ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ae:	3314      	adds	r3, #20
 80038b0:	889b      	ldrh	r3, [r3, #4]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 80038b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b8:	331e      	adds	r3, #30
 80038ba:	889b      	ldrh	r3, [r3, #4]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	b29b      	uxth	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 80038c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c6:	331e      	adds	r3, #30
 80038c8:	889b      	ldrh	r3, [r3, #4]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80038ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d0:	3328      	adds	r3, #40	; 0x28
 80038d2:	889b      	ldrh	r3, [r3, #4]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 80038de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e0:	3328      	adds	r3, #40	; 0x28
 80038e2:	889b      	ldrh	r3, [r3, #4]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80038ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ec:	3332      	adds	r3, #50	; 0x32
 80038ee:	889b      	ldrh	r3, [r3, #4]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	3332      	adds	r3, #50	; 0x32
 80038fe:	889b      	ldrh	r3, [r3, #4]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003908:	333c      	adds	r3, #60	; 0x3c
 800390a:	889b      	ldrh	r3, [r3, #4]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	b29b      	uxth	r3, r3
 8003910:	b2db      	uxtb	r3, r3
 8003912:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003918:	333c      	adds	r3, #60	; 0x3c
 800391a:	889b      	ldrh	r3, [r3, #4]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003924:	3346      	adds	r3, #70	; 0x46
 8003926:	889b      	ldrh	r3, [r3, #4]
 8003928:	0a1b      	lsrs	r3, r3, #8
 800392a:	b29b      	uxth	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003934:	3346      	adds	r3, #70	; 0x46
 8003936:	889b      	ldrh	r3, [r3, #4]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 800393e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003940:	3350      	adds	r3, #80	; 0x50
 8003942:	889b      	ldrh	r3, [r3, #4]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	b29b      	uxth	r3, r3
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 800394e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003950:	3350      	adds	r3, #80	; 0x50
 8003952:	889b      	ldrh	r3, [r3, #4]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 800395a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395c:	335a      	adds	r3, #90	; 0x5a
 800395e:	889b      	ldrh	r3, [r3, #4]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	b29b      	uxth	r3, r3
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 800396a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396c:	335a      	adds	r3, #90	; 0x5a
 800396e:	889b      	ldrh	r3, [r3, #4]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003978:	3364      	adds	r3, #100	; 0x64
 800397a:	889b      	ldrh	r3, [r3, #4]
 800397c:	0a1b      	lsrs	r3, r3, #8
 800397e:	b29b      	uxth	r3, r3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003988:	3364      	adds	r3, #100	; 0x64
 800398a:	889b      	ldrh	r3, [r3, #4]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003994:	336e      	adds	r3, #110	; 0x6e
 8003996:	889b      	ldrh	r3, [r3, #4]
 8003998:	0a1b      	lsrs	r3, r3, #8
 800399a:	b29b      	uxth	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 80039a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a4:	336e      	adds	r3, #110	; 0x6e
 80039a6:	889b      	ldrh	r3, [r3, #4]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 80039ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b0:	3378      	adds	r3, #120	; 0x78
 80039b2:	889b      	ldrh	r3, [r3, #4]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 80039be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c0:	3378      	adds	r3, #120	; 0x78
 80039c2:	889b      	ldrh	r3, [r3, #4]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 80039ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039cc:	3382      	adds	r3, #130	; 0x82
 80039ce:	889b      	ldrh	r3, [r3, #4]
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 80039da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039dc:	3382      	adds	r3, #130	; 0x82
 80039de:	889b      	ldrh	r3, [r3, #4]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80039e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e8:	338c      	adds	r3, #140	; 0x8c
 80039ea:	889b      	ldrh	r3, [r3, #4]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 80039f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f8:	338c      	adds	r3, #140	; 0x8c
 80039fa:	889b      	ldrh	r3, [r3, #4]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a04:	3396      	adds	r3, #150	; 0x96
 8003a06:	889b      	ldrh	r3, [r3, #4]
 8003a08:	0a1b      	lsrs	r3, r3, #8
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a14:	3396      	adds	r3, #150	; 0x96
 8003a16:	889b      	ldrh	r3, [r3, #4]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a20:	33a0      	adds	r3, #160	; 0xa0
 8003a22:	889b      	ldrh	r3, [r3, #4]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a30:	33a0      	adds	r3, #160	; 0xa0
 8003a32:	889b      	ldrh	r3, [r3, #4]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3c:	33aa      	adds	r3, #170	; 0xaa
 8003a3e:	889b      	ldrh	r3, [r3, #4]
 8003a40:	0a1b      	lsrs	r3, r3, #8
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	33aa      	adds	r3, #170	; 0xaa
 8003a4e:	889b      	ldrh	r3, [r3, #4]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8003a56:	7a3b      	ldrb	r3, [r7, #8]
 8003a58:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8003a5c:	7a7b      	ldrb	r3, [r7, #9]
 8003a5e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8003a62:	7abb      	ldrb	r3, [r7, #10]
 8003a64:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8003a68:	7afb      	ldrb	r3, [r7, #11]
 8003a6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8003a6e:	7b3b      	ldrb	r3, [r7, #12]
 8003a70:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8003a74:	7b7b      	ldrb	r3, [r7, #13]
 8003a76:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8003a7a:	7bbb      	ldrb	r3, [r7, #14]
 8003a7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8003a86:	7c3b      	ldrb	r3, [r7, #16]
 8003a88:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8003a8c:	7c7b      	ldrb	r3, [r7, #17]
 8003a8e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8003a92:	793b      	ldrb	r3, [r7, #4]
 8003a94:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8003a98:	797b      	ldrb	r3, [r7, #5]
 8003a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8003a9e:	79bb      	ldrb	r3, [r7, #6]
 8003aa0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003aaa:	f107 0114 	add.w	r1, r7, #20
 8003aae:	2364      	movs	r3, #100	; 0x64
 8003ab0:	2236      	movs	r2, #54	; 0x36
 8003ab2:	4807      	ldr	r0, [pc, #28]	; (8003ad0 <create_hk_packet+0x298>)
 8003ab4:	f010 f8f6 	bl	8013ca4 <HAL_UART_Transmit>

	hk_seq++;
 8003ab8:	4b04      	ldr	r3, [pc, #16]	; (8003acc <create_hk_packet+0x294>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	4b02      	ldr	r3, [pc, #8]	; (8003acc <create_hk_packet+0x294>)
 8003ac2:	801a      	strh	r2, [r3, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	3750      	adds	r7, #80	; 0x50
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	24001a88 	.word	0x24001a88
 8003ad0:	24001ddc 	.word	0x24001ddc

08003ad4 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <reset_packet_sequence_numbers+0x20>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <reset_packet_sequence_numbers+0x24>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <reset_packet_sequence_numbers+0x28>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	801a      	strh	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	24001a82 	.word	0x24001a82
 8003af8:	24001a84 	.word	0x24001a84
 8003afc:	24001a88 	.word	0x24001a88

08003b00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003b06:	1d3b      	adds	r3, r7, #4
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	60da      	str	r2, [r3, #12]
 8003b12:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003b14:	2300      	movs	r3, #0
 8003b16:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003b18:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <MX_RTC_Init+0xb4>)
 8003b1a:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <MX_RTC_Init+0xb8>)
 8003b1c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003b1e:	4b25      	ldr	r3, [pc, #148]	; (8003bb4 <MX_RTC_Init+0xb4>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003b24:	4b23      	ldr	r3, [pc, #140]	; (8003bb4 <MX_RTC_Init+0xb4>)
 8003b26:	2263      	movs	r2, #99	; 0x63
 8003b28:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003b2a:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <MX_RTC_Init+0xb4>)
 8003b2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003b30:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <MX_RTC_Init+0xb4>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003b38:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <MX_RTC_Init+0xb4>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <MX_RTC_Init+0xb4>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <MX_RTC_Init+0xb4>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003b4a:	481a      	ldr	r0, [pc, #104]	; (8003bb4 <MX_RTC_Init+0xb4>)
 8003b4c:	f00d fb90 	bl	8011270 <HAL_RTC_Init>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003b56:	f7ff fdc5 	bl	80036e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003b6e:	1d3b      	adds	r3, r7, #4
 8003b70:	2201      	movs	r2, #1
 8003b72:	4619      	mov	r1, r3
 8003b74:	480f      	ldr	r0, [pc, #60]	; (8003bb4 <MX_RTC_Init+0xb4>)
 8003b76:	f00d fbfd 	bl	8011374 <HAL_RTC_SetTime>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003b80:	f7ff fdb0 	bl	80036e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003b84:	2301      	movs	r3, #1
 8003b86:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003b94:	463b      	mov	r3, r7
 8003b96:	2201      	movs	r2, #1
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4806      	ldr	r0, [pc, #24]	; (8003bb4 <MX_RTC_Init+0xb4>)
 8003b9c:	f00d fce4 	bl	8011568 <HAL_RTC_SetDate>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003ba6:	f7ff fd9d 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	24001a8c 	.word	0x24001a8c
 8003bb8:	58004000 	.word	0x58004000

08003bbc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b0b2      	sub	sp, #200	; 0xc8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bc4:	f107 0308 	add.w	r3, r7, #8
 8003bc8:	22c0      	movs	r2, #192	; 0xc0
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f016 f895 	bl	8019cfc <memset>
  if(rtcHandle->Instance==RTC)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <HAL_RTC_MspInit+0x5c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d118      	bne.n	8003c0e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003bdc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <HAL_RTC_MspInit+0x60>)
 8003bea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bee:	f107 0308 	add.w	r3, r7, #8
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f00a fe3e 	bl	800e874 <HAL_RCCEx_PeriphCLKConfig>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003bfe:	f7ff fd71 	bl	80036e4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c02:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <HAL_RTC_MspInit+0x64>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	4a06      	ldr	r2, [pc, #24]	; (8003c20 <HAL_RTC_MspInit+0x64>)
 8003c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003c0e:	bf00      	nop
 8003c10:	37c8      	adds	r7, #200	; 0xc8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	58004000 	.word	0x58004000
 8003c1c:	00019300 	.word	0x00019300
 8003c20:	58024400 	.word	0x58024400

08003c24 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003c2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003c32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c36:	481f      	ldr	r0, [pc, #124]	; (8003cb4 <init_adc_dma+0x90>)
 8003c38:	f003 f868 	bl	8006d0c <HAL_ADCEx_Calibration_Start>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003c42:	f7ff fd4f 	bl	80036e4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003c46:	220b      	movs	r2, #11
 8003c48:	491b      	ldr	r1, [pc, #108]	; (8003cb8 <init_adc_dma+0x94>)
 8003c4a:	481a      	ldr	r0, [pc, #104]	; (8003cb4 <init_adc_dma+0x90>)
 8003c4c:	f002 f93c 	bl	8005ec8 <HAL_ADC_Start_DMA>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003c56:	f7ff fd45 	bl	80036e4 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003c5a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003c5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c62:	4816      	ldr	r0, [pc, #88]	; (8003cbc <init_adc_dma+0x98>)
 8003c64:	f003 f852 	bl	8006d0c <HAL_ADCEx_Calibration_Start>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003c6e:	f7ff fd39 	bl	80036e4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003c72:	2204      	movs	r2, #4
 8003c74:	4912      	ldr	r1, [pc, #72]	; (8003cc0 <init_adc_dma+0x9c>)
 8003c76:	4811      	ldr	r0, [pc, #68]	; (8003cbc <init_adc_dma+0x98>)
 8003c78:	f002 f926 	bl	8005ec8 <HAL_ADC_Start_DMA>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003c82:	f7ff fd2f 	bl	80036e4 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <init_adc_dma+0xa0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <init_adc_dma+0xa0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c94:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <init_adc_dma+0xa4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <init_adc_dma+0xa4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ca4:	601a      	str	r2, [r3, #0]


	status = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	71fb      	strb	r3, [r7, #7]

	return status;
 8003caa:	79fb      	ldrb	r3, [r7, #7]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	2400013c 	.word	0x2400013c
 8003cb8:	24001ac0 	.word	0x24001ac0
 8003cbc:	240001a0 	.word	0x240001a0
 8003cc0:	24001ae0 	.word	0x24001ae0
 8003cc4:	24001b7c 	.word	0x24001b7c
 8003cc8:	24001af4 	.word	0x24001af4

08003ccc <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	490b      	ldr	r1, [pc, #44]	; (8003d04 <sample_pmt_spi+0x38>)
 8003cd8:	480b      	ldr	r0, [pc, #44]	; (8003d08 <sample_pmt_spi+0x3c>)
 8003cda:	f00d ff0f 	bl	8011afc <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <sample_pmt_spi+0x38>)
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <sample_pmt_spi+0x38>)
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	7bba      	ldrb	r2, [r7, #14]
 8003cfa:	701a      	strb	r2, [r3, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	24001aec 	.word	0x24001aec
 8003d08:	24001af4 	.word	0x24001af4

08003d0c <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8003d14:	2201      	movs	r2, #1
 8003d16:	490b      	ldr	r1, [pc, #44]	; (8003d44 <sample_erpa_spi+0x38>)
 8003d18:	480b      	ldr	r0, [pc, #44]	; (8003d48 <sample_erpa_spi+0x3c>)
 8003d1a:	f00d feef 	bl	8011afc <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <sample_erpa_spi+0x38>)
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8003d28:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <sample_erpa_spi+0x38>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3301      	adds	r3, #1
 8003d38:	7bba      	ldrb	r2, [r7, #14]
 8003d3a:	701a      	strb	r2, [r3, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	24001ae8 	.word	0x24001ae8
 8003d48:	24001b7c 	.word	0x24001b7c

08003d4c <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <sample_erpa_adc+0x20>)
 8003d56:	885b      	ldrh	r3, [r3, #2]
 8003d58:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	89fa      	ldrh	r2, [r7, #14]
 8003d5e:	801a      	strh	r2, [r3, #0]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	24001ac0 	.word	0x24001ac0

08003d70 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8003d78:	2390      	movs	r3, #144	; 0x90
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f8a2 	bl	8003ec4 <poll_i2c_sensor>
 8003d80:	4603      	mov	r3, r0
 8003d82:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8003d84:	2394      	movs	r3, #148	; 0x94
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f89c 	bl	8003ec4 <poll_i2c_sensor>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8003d90:	2392      	movs	r3, #146	; 0x92
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f896 	bl	8003ec4 <poll_i2c_sensor>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8003d9c:	2396      	movs	r3, #150	; 0x96
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f890 	bl	8003ec4 <poll_i2c_sensor>
 8003da4:	4603      	mov	r3, r0
 8003da6:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	89fa      	ldrh	r2, [r7, #14]
 8003dac:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3302      	adds	r3, #2
 8003db2:	89ba      	ldrh	r2, [r7, #12]
 8003db4:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	897a      	ldrh	r2, [r7, #10]
 8003dbc:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3306      	adds	r3, #6
 8003dc2:	893a      	ldrh	r2, [r7, #8]
 8003dc4:	801a      	strh	r2, [r3, #0]
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8003dd0:	b480      	push	{r7}
 8003dd2:	b089      	sub	sp, #36	; 0x24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <sample_hk_adc1+0xa0>)
 8003dda:	8a9b      	ldrh	r3, [r3, #20]
 8003ddc:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <sample_hk_adc1+0xa0>)
 8003de0:	8a1b      	ldrh	r3, [r3, #16]
 8003de2:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8003de4:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <sample_hk_adc1+0xa0>)
 8003de6:	899b      	ldrh	r3, [r3, #12]
 8003de8:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8003dea:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <sample_hk_adc1+0xa0>)
 8003dec:	8a5b      	ldrh	r3, [r3, #18]
 8003dee:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8003df0:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <sample_hk_adc1+0xa0>)
 8003df2:	889b      	ldrh	r3, [r3, #4]
 8003df4:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8003df6:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <sample_hk_adc1+0xa0>)
 8003df8:	88db      	ldrh	r3, [r3, #6]
 8003dfa:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8003dfc:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <sample_hk_adc1+0xa0>)
 8003dfe:	89db      	ldrh	r3, [r3, #14]
 8003e00:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8003e02:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <sample_hk_adc1+0xa0>)
 8003e04:	891b      	ldrh	r3, [r3, #8]
 8003e06:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8003e08:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <sample_hk_adc1+0xa0>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8003e0e:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <sample_hk_adc1+0xa0>)
 8003e10:	895b      	ldrh	r3, [r3, #10]
 8003e12:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8bfa      	ldrh	r2, [r7, #30]
 8003e18:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	8bba      	ldrh	r2, [r7, #28]
 8003e20:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3304      	adds	r3, #4
 8003e26:	8b7a      	ldrh	r2, [r7, #26]
 8003e28:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3306      	adds	r3, #6
 8003e2e:	8b3a      	ldrh	r2, [r7, #24]
 8003e30:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3308      	adds	r3, #8
 8003e36:	8afa      	ldrh	r2, [r7, #22]
 8003e38:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	330a      	adds	r3, #10
 8003e3e:	8aba      	ldrh	r2, [r7, #20]
 8003e40:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	330c      	adds	r3, #12
 8003e46:	8a7a      	ldrh	r2, [r7, #18]
 8003e48:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	330e      	adds	r3, #14
 8003e4e:	8a3a      	ldrh	r2, [r7, #16]
 8003e50:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3310      	adds	r3, #16
 8003e56:	89fa      	ldrh	r2, [r7, #14]
 8003e58:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3312      	adds	r3, #18
 8003e5e:	89ba      	ldrh	r2, [r7, #12]
 8003e60:	801a      	strh	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	3724      	adds	r7, #36	; 0x24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	24001ac0 	.word	0x24001ac0

08003e74 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8003e7c:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <sample_hk_adc3+0x4c>)
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8003e82:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <sample_hk_adc3+0x4c>)
 8003e84:	885b      	ldrh	r3, [r3, #2]
 8003e86:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <sample_hk_adc3+0x4c>)
 8003e8a:	889b      	ldrh	r3, [r3, #4]
 8003e8c:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <sample_hk_adc3+0x4c>)
 8003e90:	88db      	ldrh	r3, [r3, #6]
 8003e92:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	89fa      	ldrh	r2, [r7, #14]
 8003e98:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3302      	adds	r3, #2
 8003e9e:	89ba      	ldrh	r2, [r7, #12]
 8003ea0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	897a      	ldrh	r2, [r7, #10]
 8003ea8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3306      	adds	r3, #6
 8003eae:	893a      	ldrh	r2, [r7, #8]
 8003eb0:	801a      	strh	r2, [r3, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	24001ae0 	.word	0x24001ae0

08003ec4 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8003ece:	2200      	movs	r2, #0
 8003ed0:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <poll_i2c_sensor+0x90>)
 8003ed2:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	b299      	uxth	r1, r3
 8003ed8:	2301      	movs	r3, #1
 8003eda:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <poll_i2c_sensor+0x90>)
 8003edc:	481e      	ldr	r0, [pc, #120]	; (8003f58 <poll_i2c_sensor+0x94>)
 8003ede:	f007 f963 	bl	800b1a8 <HAL_I2C_Master_Transmit_DMA>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8003ee6:	7b7b      	ldrb	r3, [r7, #13]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8003eec:	481b      	ldr	r0, [pc, #108]	; (8003f5c <poll_i2c_sensor+0x98>)
 8003eee:	f015 ff7b 	bl	8019de8 <puts>
 8003ef2:	e028      	b.n	8003f46 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8003ef4:	bf00      	nop
 8003ef6:	4818      	ldr	r0, [pc, #96]	; (8003f58 <poll_i2c_sensor+0x94>)
 8003ef8:	f007 fc3d 	bl	800b776 <HAL_I2C_GetState>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d1f9      	bne.n	8003ef6 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	b299      	uxth	r1, r3
 8003f06:	2302      	movs	r3, #2
 8003f08:	4a12      	ldr	r2, [pc, #72]	; (8003f54 <poll_i2c_sensor+0x90>)
 8003f0a:	4813      	ldr	r0, [pc, #76]	; (8003f58 <poll_i2c_sensor+0x94>)
 8003f0c:	f007 fa60 	bl	800b3d0 <HAL_I2C_Master_Receive_DMA>
 8003f10:	4603      	mov	r3, r0
 8003f12:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8003f14:	7b7b      	ldrb	r3, [r7, #13]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8003f1a:	4811      	ldr	r0, [pc, #68]	; (8003f60 <poll_i2c_sensor+0x9c>)
 8003f1c:	f015 ff64 	bl	8019de8 <puts>
 8003f20:	e011      	b.n	8003f46 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8003f22:	bf00      	nop
 8003f24:	480c      	ldr	r0, [pc, #48]	; (8003f58 <poll_i2c_sensor+0x94>)
 8003f26:	f007 fc26 	bl	800b776 <HAL_I2C_GetState>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d1f9      	bne.n	8003f24 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <poll_i2c_sensor+0x90>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8003f38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f3c:	4a05      	ldr	r2, [pc, #20]	; (8003f54 <poll_i2c_sensor+0x90>)
 8003f3e:	7852      	ldrb	r2, [r2, #1]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	10db      	asrs	r3, r3, #3
 8003f44:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8003f46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	24001af0 	.word	0x24001af0
 8003f58:	240018e4 	.word	0x240018e4
 8003f5c:	0801a950 	.word	0x0801a950
 8003f60:	0801a960 	.word	0x0801a960

08003f64 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003f68:	4b28      	ldr	r3, [pc, #160]	; (800400c <MX_SPI1_Init+0xa8>)
 8003f6a:	4a29      	ldr	r2, [pc, #164]	; (8004010 <MX_SPI1_Init+0xac>)
 8003f6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f6e:	4b27      	ldr	r3, [pc, #156]	; (800400c <MX_SPI1_Init+0xa8>)
 8003f70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003f74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003f76:	4b25      	ldr	r3, [pc, #148]	; (800400c <MX_SPI1_Init+0xa8>)
 8003f78:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003f7c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003f7e:	4b23      	ldr	r3, [pc, #140]	; (800400c <MX_SPI1_Init+0xa8>)
 8003f80:	220f      	movs	r2, #15
 8003f82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <MX_SPI1_Init+0xa8>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f8a:	4b20      	ldr	r3, [pc, #128]	; (800400c <MX_SPI1_Init+0xa8>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f90:	4b1e      	ldr	r3, [pc, #120]	; (800400c <MX_SPI1_Init+0xa8>)
 8003f92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003f96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003f98:	4b1c      	ldr	r3, [pc, #112]	; (800400c <MX_SPI1_Init+0xa8>)
 8003f9a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003f9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fa6:	4b19      	ldr	r3, [pc, #100]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fac:	4b17      	ldr	r3, [pc, #92]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003fb2:	4b16      	ldr	r3, [pc, #88]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003fb8:	4b14      	ldr	r3, [pc, #80]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fbe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003fc6:	4b11      	ldr	r3, [pc, #68]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003fd2:	4b0e      	ldr	r3, [pc, #56]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003fe4:	4b09      	ldr	r3, [pc, #36]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003fea:	4b08      	ldr	r3, [pc, #32]	; (800400c <MX_SPI1_Init+0xa8>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <MX_SPI1_Init+0xa8>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ff6:	4805      	ldr	r0, [pc, #20]	; (800400c <MX_SPI1_Init+0xa8>)
 8003ff8:	f00d fc5c 	bl	80118b4 <HAL_SPI_Init>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8004002:	f7ff fb6f 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	24001af4 	.word	0x24001af4
 8004010:	40013000 	.word	0x40013000

08004014 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004018:	4b28      	ldr	r3, [pc, #160]	; (80040bc <MX_SPI2_Init+0xa8>)
 800401a:	4a29      	ldr	r2, [pc, #164]	; (80040c0 <MX_SPI2_Init+0xac>)
 800401c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800401e:	4b27      	ldr	r3, [pc, #156]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004020:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004024:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004026:	4b25      	ldr	r3, [pc, #148]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004028:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800402c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800402e:	4b23      	ldr	r3, [pc, #140]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004030:	220f      	movs	r2, #15
 8004032:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <MX_SPI2_Init+0xa8>)
 800403c:	2200      	movs	r2, #0
 800403e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004040:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004042:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004046:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004048:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <MX_SPI2_Init+0xa8>)
 800404a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800404e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004050:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004052:	2200      	movs	r2, #0
 8004054:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004056:	4b19      	ldr	r3, [pc, #100]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004058:	2200      	movs	r2, #0
 800405a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800405c:	4b17      	ldr	r3, [pc, #92]	; (80040bc <MX_SPI2_Init+0xa8>)
 800405e:	2200      	movs	r2, #0
 8004060:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004062:	4b16      	ldr	r3, [pc, #88]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004064:	2200      	movs	r2, #0
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <MX_SPI2_Init+0xa8>)
 800406a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800406e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004072:	2200      	movs	r2, #0
 8004074:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004076:	4b11      	ldr	r3, [pc, #68]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004078:	2200      	movs	r2, #0
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <MX_SPI2_Init+0xa8>)
 800407e:	2200      	movs	r2, #0
 8004080:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004082:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004084:	2200      	movs	r2, #0
 8004086:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <MX_SPI2_Init+0xa8>)
 800408a:	2200      	movs	r2, #0
 800408c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800408e:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004090:	2200      	movs	r2, #0
 8004092:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <MX_SPI2_Init+0xa8>)
 8004096:	2200      	movs	r2, #0
 8004098:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <MX_SPI2_Init+0xa8>)
 800409c:	2200      	movs	r2, #0
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <MX_SPI2_Init+0xa8>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040a6:	4805      	ldr	r0, [pc, #20]	; (80040bc <MX_SPI2_Init+0xa8>)
 80040a8:	f00d fc04 	bl	80118b4 <HAL_SPI_Init>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80040b2:	f7ff fb17 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	24001b7c 	.word	0x24001b7c
 80040c0:	40003800 	.word	0x40003800

080040c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b0bc      	sub	sp, #240	; 0xf0
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040dc:	f107 0318 	add.w	r3, r7, #24
 80040e0:	22c0      	movs	r2, #192	; 0xc0
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f015 fe09 	bl	8019cfc <memset>
  if(spiHandle->Instance==SPI1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a83      	ldr	r2, [pc, #524]	; (80042fc <HAL_SPI_MspInit+0x238>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d17c      	bne.n	80041ee <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80040f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004100:	2300      	movs	r3, #0
 8004102:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004104:	f107 0318 	add.w	r3, r7, #24
 8004108:	4618      	mov	r0, r3
 800410a:	f00a fbb3 	bl	800e874 <HAL_RCCEx_PeriphCLKConfig>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004114:	f7ff fae6 	bl	80036e4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004118:	4b79      	ldr	r3, [pc, #484]	; (8004300 <HAL_SPI_MspInit+0x23c>)
 800411a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800411e:	4a78      	ldr	r2, [pc, #480]	; (8004300 <HAL_SPI_MspInit+0x23c>)
 8004120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004124:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004128:	4b75      	ldr	r3, [pc, #468]	; (8004300 <HAL_SPI_MspInit+0x23c>)
 800412a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800412e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004136:	4b72      	ldr	r3, [pc, #456]	; (8004300 <HAL_SPI_MspInit+0x23c>)
 8004138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800413c:	4a70      	ldr	r2, [pc, #448]	; (8004300 <HAL_SPI_MspInit+0x23c>)
 800413e:	f043 0302 	orr.w	r3, r3, #2
 8004142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004146:	4b6e      	ldr	r3, [pc, #440]	; (8004300 <HAL_SPI_MspInit+0x23c>)
 8004148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004154:	2318      	movs	r3, #24
 8004156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004166:	2300      	movs	r3, #0
 8004168:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800416c:	2305      	movs	r3, #5
 800416e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004172:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004176:	4619      	mov	r1, r3
 8004178:	4862      	ldr	r0, [pc, #392]	; (8004304 <HAL_SPI_MspInit+0x240>)
 800417a:	f006 fd97 	bl	800acac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800417e:	4b62      	ldr	r3, [pc, #392]	; (8004308 <HAL_SPI_MspInit+0x244>)
 8004180:	4a62      	ldr	r2, [pc, #392]	; (800430c <HAL_SPI_MspInit+0x248>)
 8004182:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004184:	4b60      	ldr	r3, [pc, #384]	; (8004308 <HAL_SPI_MspInit+0x244>)
 8004186:	2225      	movs	r2, #37	; 0x25
 8004188:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800418a:	4b5f      	ldr	r3, [pc, #380]	; (8004308 <HAL_SPI_MspInit+0x244>)
 800418c:	2200      	movs	r2, #0
 800418e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004190:	4b5d      	ldr	r3, [pc, #372]	; (8004308 <HAL_SPI_MspInit+0x244>)
 8004192:	2200      	movs	r2, #0
 8004194:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004196:	4b5c      	ldr	r3, [pc, #368]	; (8004308 <HAL_SPI_MspInit+0x244>)
 8004198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800419c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800419e:	4b5a      	ldr	r3, [pc, #360]	; (8004308 <HAL_SPI_MspInit+0x244>)
 80041a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041a6:	4b58      	ldr	r3, [pc, #352]	; (8004308 <HAL_SPI_MspInit+0x244>)
 80041a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041ac:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80041ae:	4b56      	ldr	r3, [pc, #344]	; (8004308 <HAL_SPI_MspInit+0x244>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041b4:	4b54      	ldr	r3, [pc, #336]	; (8004308 <HAL_SPI_MspInit+0x244>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041ba:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_SPI_MspInit+0x244>)
 80041bc:	2200      	movs	r2, #0
 80041be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80041c0:	4851      	ldr	r0, [pc, #324]	; (8004308 <HAL_SPI_MspInit+0x244>)
 80041c2:	f003 fc43 	bl	8007a4c <HAL_DMA_Init>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80041cc:	f7ff fa8a 	bl	80036e4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a4d      	ldr	r2, [pc, #308]	; (8004308 <HAL_SPI_MspInit+0x244>)
 80041d4:	67da      	str	r2, [r3, #124]	; 0x7c
 80041d6:	4a4c      	ldr	r2, [pc, #304]	; (8004308 <HAL_SPI_MspInit+0x244>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80041dc:	2200      	movs	r2, #0
 80041de:	2105      	movs	r1, #5
 80041e0:	2023      	movs	r0, #35	; 0x23
 80041e2:	f002 ff8d 	bl	8007100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80041e6:	2023      	movs	r0, #35	; 0x23
 80041e8:	f002 ffa4 	bl	8007134 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80041ec:	e081      	b.n	80042f2 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a47      	ldr	r2, [pc, #284]	; (8004310 <HAL_SPI_MspInit+0x24c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d17c      	bne.n	80042f2 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80041f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004204:	2300      	movs	r3, #0
 8004206:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004208:	f107 0318 	add.w	r3, r7, #24
 800420c:	4618      	mov	r0, r3
 800420e:	f00a fb31 	bl	800e874 <HAL_RCCEx_PeriphCLKConfig>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8004218:	f7ff fa64 	bl	80036e4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800421c:	4b38      	ldr	r3, [pc, #224]	; (8004300 <HAL_SPI_MspInit+0x23c>)
 800421e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004222:	4a37      	ldr	r2, [pc, #220]	; (8004300 <HAL_SPI_MspInit+0x23c>)
 8004224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004228:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800422c:	4b34      	ldr	r3, [pc, #208]	; (8004300 <HAL_SPI_MspInit+0x23c>)
 800422e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800423a:	4b31      	ldr	r3, [pc, #196]	; (8004300 <HAL_SPI_MspInit+0x23c>)
 800423c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004240:	4a2f      	ldr	r2, [pc, #188]	; (8004300 <HAL_SPI_MspInit+0x23c>)
 8004242:	f043 0302 	orr.w	r3, r3, #2
 8004246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800424a:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <HAL_SPI_MspInit+0x23c>)
 800424c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004258:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800425c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004260:	2302      	movs	r3, #2
 8004262:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004272:	2305      	movs	r3, #5
 8004274:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004278:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800427c:	4619      	mov	r1, r3
 800427e:	4821      	ldr	r0, [pc, #132]	; (8004304 <HAL_SPI_MspInit+0x240>)
 8004280:	f006 fd14 	bl	800acac <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004284:	4b23      	ldr	r3, [pc, #140]	; (8004314 <HAL_SPI_MspInit+0x250>)
 8004286:	4a24      	ldr	r2, [pc, #144]	; (8004318 <HAL_SPI_MspInit+0x254>)
 8004288:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800428a:	4b22      	ldr	r3, [pc, #136]	; (8004314 <HAL_SPI_MspInit+0x250>)
 800428c:	2227      	movs	r2, #39	; 0x27
 800428e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004290:	4b20      	ldr	r3, [pc, #128]	; (8004314 <HAL_SPI_MspInit+0x250>)
 8004292:	2200      	movs	r2, #0
 8004294:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004296:	4b1f      	ldr	r3, [pc, #124]	; (8004314 <HAL_SPI_MspInit+0x250>)
 8004298:	2200      	movs	r2, #0
 800429a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800429c:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <HAL_SPI_MspInit+0x250>)
 800429e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042a2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <HAL_SPI_MspInit+0x250>)
 80042a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042aa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042ac:	4b19      	ldr	r3, [pc, #100]	; (8004314 <HAL_SPI_MspInit+0x250>)
 80042ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042b2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80042b4:	4b17      	ldr	r3, [pc, #92]	; (8004314 <HAL_SPI_MspInit+0x250>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042ba:	4b16      	ldr	r3, [pc, #88]	; (8004314 <HAL_SPI_MspInit+0x250>)
 80042bc:	2200      	movs	r2, #0
 80042be:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <HAL_SPI_MspInit+0x250>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80042c6:	4813      	ldr	r0, [pc, #76]	; (8004314 <HAL_SPI_MspInit+0x250>)
 80042c8:	f003 fbc0 	bl	8007a4c <HAL_DMA_Init>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 80042d2:	f7ff fa07 	bl	80036e4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a0e      	ldr	r2, [pc, #56]	; (8004314 <HAL_SPI_MspInit+0x250>)
 80042da:	67da      	str	r2, [r3, #124]	; 0x7c
 80042dc:	4a0d      	ldr	r2, [pc, #52]	; (8004314 <HAL_SPI_MspInit+0x250>)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80042e2:	2200      	movs	r2, #0
 80042e4:	2105      	movs	r1, #5
 80042e6:	2024      	movs	r0, #36	; 0x24
 80042e8:	f002 ff0a 	bl	8007100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80042ec:	2024      	movs	r0, #36	; 0x24
 80042ee:	f002 ff21 	bl	8007134 <HAL_NVIC_EnableIRQ>
}
 80042f2:	bf00      	nop
 80042f4:	37f0      	adds	r7, #240	; 0xf0
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40013000 	.word	0x40013000
 8004300:	58024400 	.word	0x58024400
 8004304:	58020400 	.word	0x58020400
 8004308:	24001c04 	.word	0x24001c04
 800430c:	40020070 	.word	0x40020070
 8004310:	40003800 	.word	0x40003800
 8004314:	24001c7c 	.word	0x24001c7c
 8004318:	40020058 	.word	0x40020058

0800431c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004322:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <HAL_MspInit+0x38>)
 8004324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004328:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <HAL_MspInit+0x38>)
 800432a:	f043 0302 	orr.w	r3, r3, #2
 800432e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_MspInit+0x38>)
 8004334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	607b      	str	r3, [r7, #4]
 800433e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004340:	2200      	movs	r2, #0
 8004342:	210f      	movs	r1, #15
 8004344:	f06f 0001 	mvn.w	r0, #1
 8004348:	f002 feda 	bl	8007100 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	58024400 	.word	0x58024400

08004358 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b090      	sub	sp, #64	; 0x40
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b0f      	cmp	r3, #15
 8004364:	d827      	bhi.n	80043b6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004366:	2200      	movs	r2, #0
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	2036      	movs	r0, #54	; 0x36
 800436c:	f002 fec8 	bl	8007100 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004370:	2036      	movs	r0, #54	; 0x36
 8004372:	f002 fedf 	bl	8007134 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004376:	4a29      	ldr	r2, [pc, #164]	; (800441c <HAL_InitTick+0xc4>)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800437c:	4b28      	ldr	r3, [pc, #160]	; (8004420 <HAL_InitTick+0xc8>)
 800437e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004382:	4a27      	ldr	r2, [pc, #156]	; (8004420 <HAL_InitTick+0xc8>)
 8004384:	f043 0310 	orr.w	r3, r3, #16
 8004388:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800438c:	4b24      	ldr	r3, [pc, #144]	; (8004420 <HAL_InitTick+0xc8>)
 800438e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800439a:	f107 0210 	add.w	r2, r7, #16
 800439e:	f107 0314 	add.w	r3, r7, #20
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f00a fa23 	bl	800e7f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <HAL_InitTick+0x6a>
 80043b4:	e001      	b.n	80043ba <HAL_InitTick+0x62>
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e02b      	b.n	8004412 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80043ba:	f00a f9ed 	bl	800e798 <HAL_RCC_GetPCLK1Freq>
 80043be:	63f8      	str	r0, [r7, #60]	; 0x3c
 80043c0:	e004      	b.n	80043cc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80043c2:	f00a f9e9 	bl	800e798 <HAL_RCC_GetPCLK1Freq>
 80043c6:	4603      	mov	r3, r0
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80043cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ce:	4a15      	ldr	r2, [pc, #84]	; (8004424 <HAL_InitTick+0xcc>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	0c9b      	lsrs	r3, r3, #18
 80043d6:	3b01      	subs	r3, #1
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <HAL_InitTick+0xd0>)
 80043dc:	4a13      	ldr	r2, [pc, #76]	; (800442c <HAL_InitTick+0xd4>)
 80043de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <HAL_InitTick+0xd0>)
 80043e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80043e8:	4a0f      	ldr	r2, [pc, #60]	; (8004428 <HAL_InitTick+0xd0>)
 80043ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80043ee:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <HAL_InitTick+0xd0>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <HAL_InitTick+0xd0>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80043fa:	480b      	ldr	r0, [pc, #44]	; (8004428 <HAL_InitTick+0xd0>)
 80043fc:	f00d fff9 	bl	80123f2 <HAL_TIM_Base_Init>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d104      	bne.n	8004410 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004406:	4808      	ldr	r0, [pc, #32]	; (8004428 <HAL_InitTick+0xd0>)
 8004408:	f00e f84a 	bl	80124a0 <HAL_TIM_Base_Start_IT>
 800440c:	4603      	mov	r3, r0
 800440e:	e000      	b.n	8004412 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
}
 8004412:	4618      	mov	r0, r3
 8004414:	3740      	adds	r7, #64	; 0x40
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	24000098 	.word	0x24000098
 8004420:	58024400 	.word	0x58024400
 8004424:	431bde83 	.word	0x431bde83
 8004428:	24001cf4 	.word	0x24001cf4
 800442c:	40001000 	.word	0x40001000

08004430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004434:	e7fe      	b.n	8004434 <NMI_Handler+0x4>

08004436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800443a:	e7fe      	b.n	800443a <HardFault_Handler+0x4>

0800443c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004440:	e7fe      	b.n	8004440 <MemManage_Handler+0x4>

08004442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004442:	b480      	push	{r7}
 8004444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004446:	e7fe      	b.n	8004446 <BusFault_Handler+0x4>

08004448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800444c:	e7fe      	b.n	800444c <UsageFault_Handler+0x4>

0800444e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800444e:	b480      	push	{r7}
 8004450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004452:	bf00      	nop
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004460:	4802      	ldr	r0, [pc, #8]	; (800446c <DMA1_Stream0_IRQHandler+0x10>)
 8004462:	f004 fe1d 	bl	80090a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	24000204 	.word	0x24000204

08004470 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004474:	4802      	ldr	r0, [pc, #8]	; (8004480 <DMA1_Stream1_IRQHandler+0x10>)
 8004476:	f004 fe13 	bl	80090a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	2400027c 	.word	0x2400027c

08004484 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004488:	4802      	ldr	r0, [pc, #8]	; (8004494 <DMA1_Stream2_IRQHandler+0x10>)
 800448a:	f004 fe09 	bl	80090a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	24001e70 	.word	0x24001e70

08004498 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800449c:	4802      	ldr	r0, [pc, #8]	; (80044a8 <DMA1_Stream3_IRQHandler+0x10>)
 800449e:	f004 fdff 	bl	80090a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	24001c7c 	.word	0x24001c7c

080044ac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80044b0:	4802      	ldr	r0, [pc, #8]	; (80044bc <DMA1_Stream4_IRQHandler+0x10>)
 80044b2:	f004 fdf5 	bl	80090a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	24001c04 	.word	0x24001c04

080044c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80044c4:	4802      	ldr	r0, [pc, #8]	; (80044d0 <DMA1_Stream5_IRQHandler+0x10>)
 80044c6:	f004 fdeb 	bl	80090a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	24000308 	.word	0x24000308

080044d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80044d8:	4802      	ldr	r0, [pc, #8]	; (80044e4 <DMA1_Stream6_IRQHandler+0x10>)
 80044da:	f004 fde1 	bl	80090a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80044de:	bf00      	nop
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	24001938 	.word	0x24001938

080044e8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044ec:	4802      	ldr	r0, [pc, #8]	; (80044f8 <TIM1_BRK_IRQHandler+0x10>)
 80044ee:	f00e faee 	bl	8012ace <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	24001d44 	.word	0x24001d44

080044fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004500:	4802      	ldr	r0, [pc, #8]	; (800450c <TIM1_UP_IRQHandler+0x10>)
 8004502:	f00e fae4 	bl	8012ace <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	24001d44 	.word	0x24001d44

08004510 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004514:	4802      	ldr	r0, [pc, #8]	; (8004520 <TIM1_TRG_COM_IRQHandler+0x10>)
 8004516:	f00e fada 	bl	8012ace <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800451a:	bf00      	nop
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	24001d44 	.word	0x24001d44

08004524 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004528:	4802      	ldr	r0, [pc, #8]	; (8004534 <TIM1_CC_IRQHandler+0x10>)
 800452a:	f00e fad0 	bl	8012ace <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800452e:	bf00      	nop
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	24001d44 	.word	0x24001d44

08004538 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800453c:	4802      	ldr	r0, [pc, #8]	; (8004548 <TIM2_IRQHandler+0x10>)
 800453e:	f00e fac6 	bl	8012ace <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	24001d90 	.word	0x24001d90

0800454c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004550:	4802      	ldr	r0, [pc, #8]	; (800455c <I2C1_EV_IRQHandler+0x10>)
 8004552:	f007 f82d 	bl	800b5b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	240018e4 	.word	0x240018e4

08004560 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004564:	4802      	ldr	r0, [pc, #8]	; (8004570 <I2C1_ER_IRQHandler+0x10>)
 8004566:	f007 f83d 	bl	800b5e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800456a:	bf00      	nop
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	240018e4 	.word	0x240018e4

08004574 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004578:	4802      	ldr	r0, [pc, #8]	; (8004584 <SPI1_IRQHandler+0x10>)
 800457a:	f00d fc07 	bl	8011d8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800457e:	bf00      	nop
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	24001af4 	.word	0x24001af4

08004588 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800458c:	4802      	ldr	r0, [pc, #8]	; (8004598 <SPI2_IRQHandler+0x10>)
 800458e:	f00d fbfd 	bl	8011d8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004592:	bf00      	nop
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	24001b7c 	.word	0x24001b7c

0800459c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045a0:	4802      	ldr	r0, [pc, #8]	; (80045ac <USART1_IRQHandler+0x10>)
 80045a2:	f00f fdd7 	bl	8014154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045a6:	bf00      	nop
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	24001ddc 	.word	0x24001ddc

080045b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80045b4:	4802      	ldr	r0, [pc, #8]	; (80045c0 <DMA1_Stream7_IRQHandler+0x10>)
 80045b6:	f004 fd73 	bl	80090a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	240019b0 	.word	0x240019b0

080045c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <TIM6_DAC_IRQHandler+0x20>)
 80045ca:	791b      	ldrb	r3, [r3, #4]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80045d2:	4804      	ldr	r0, [pc, #16]	; (80045e4 <TIM6_DAC_IRQHandler+0x20>)
 80045d4:	f002 ffbb 	bl	800754e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80045d8:	4803      	ldr	r0, [pc, #12]	; (80045e8 <TIM6_DAC_IRQHandler+0x24>)
 80045da:	f00e fa78 	bl	8012ace <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	240002f4 	.word	0x240002f4
 80045e8:	24001cf4 	.word	0x24001cf4

080045ec <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <ITM_SendChar+0x48>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a0e      	ldr	r2, [pc, #56]	; (8004634 <ITM_SendChar+0x48>)
 80045fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004600:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8004602:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <ITM_SendChar+0x4c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a0c      	ldr	r2, [pc, #48]	; (8004638 <ITM_SendChar+0x4c>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800460e:	bf00      	nop
 8004610:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f8      	beq.n	8004610 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800461e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	6013      	str	r3, [r2, #0]
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	e000edfc 	.word	0xe000edfc
 8004638:	e0000e00 	.word	0xe0000e00

0800463c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e00a      	b.n	8004664 <_read+0x28>
		*ptr++ = __io_getchar();
 800464e:	f3af 8000 	nop.w
 8004652:	4601      	mov	r1, r0
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	60ba      	str	r2, [r7, #8]
 800465a:	b2ca      	uxtb	r2, r1
 800465c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	3301      	adds	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	dbf0      	blt.n	800464e <_read+0x12>
	}

	return len;
 800466c:	687b      	ldr	r3, [r7, #4]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	e009      	b.n	800469c <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	60ba      	str	r2, [r7, #8]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ffab 	bl	80045ec <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	3301      	adds	r3, #1
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	dbf1      	blt.n	8004688 <_write+0x12>
	}
	return len;
 80046a4:	687b      	ldr	r3, [r7, #4]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <_close>:

int _close(int file) {
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <_fstat>:

int _fstat(int file, struct stat *st) {
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046d6:	605a      	str	r2, [r3, #4]
	return 0;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <_isatty>:

int _isatty(int file) {
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80046ee:	2301      	movs	r3, #1
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004720:	4a14      	ldr	r2, [pc, #80]	; (8004774 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800472c:	4b13      	ldr	r3, [pc, #76]	; (800477c <_sbrk+0x64>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004734:	4b11      	ldr	r3, [pc, #68]	; (800477c <_sbrk+0x64>)
 8004736:	4a12      	ldr	r2, [pc, #72]	; (8004780 <_sbrk+0x68>)
 8004738:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800473a:	4b10      	ldr	r3, [pc, #64]	; (800477c <_sbrk+0x64>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4413      	add	r3, r2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	429a      	cmp	r2, r3
 8004746:	d207      	bcs.n	8004758 <_sbrk+0x40>
		errno = ENOMEM;
 8004748:	f015 faa0 	bl	8019c8c <__errno>
 800474c:	4603      	mov	r3, r0
 800474e:	220c      	movs	r2, #12
 8004750:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004756:	e009      	b.n	800476c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004758:	4b08      	ldr	r3, [pc, #32]	; (800477c <_sbrk+0x64>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <_sbrk+0x64>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	4a05      	ldr	r2, [pc, #20]	; (800477c <_sbrk+0x64>)
 8004768:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800476a:	68fb      	ldr	r3, [r7, #12]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	24080000 	.word	0x24080000
 8004778:	00000400 	.word	0x00000400
 800477c:	24001d40 	.word	0x24001d40
 8004780:	24006920 	.word	0x24006920

08004784 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004788:	4b37      	ldr	r3, [pc, #220]	; (8004868 <SystemInit+0xe4>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	4a36      	ldr	r2, [pc, #216]	; (8004868 <SystemInit+0xe4>)
 8004790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004798:	4b34      	ldr	r3, [pc, #208]	; (800486c <SystemInit+0xe8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	2b06      	cmp	r3, #6
 80047a2:	d807      	bhi.n	80047b4 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80047a4:	4b31      	ldr	r3, [pc, #196]	; (800486c <SystemInit+0xe8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f023 030f 	bic.w	r3, r3, #15
 80047ac:	4a2f      	ldr	r2, [pc, #188]	; (800486c <SystemInit+0xe8>)
 80047ae:	f043 0307 	orr.w	r3, r3, #7
 80047b2:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80047b4:	4b2e      	ldr	r3, [pc, #184]	; (8004870 <SystemInit+0xec>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a2d      	ldr	r2, [pc, #180]	; (8004870 <SystemInit+0xec>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <SystemInit+0xec>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80047c6:	4b2a      	ldr	r3, [pc, #168]	; (8004870 <SystemInit+0xec>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4929      	ldr	r1, [pc, #164]	; (8004870 <SystemInit+0xec>)
 80047cc:	4b29      	ldr	r3, [pc, #164]	; (8004874 <SystemInit+0xf0>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80047d2:	4b26      	ldr	r3, [pc, #152]	; (800486c <SystemInit+0xe8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80047de:	4b23      	ldr	r3, [pc, #140]	; (800486c <SystemInit+0xe8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 030f 	bic.w	r3, r3, #15
 80047e6:	4a21      	ldr	r2, [pc, #132]	; (800486c <SystemInit+0xe8>)
 80047e8:	f043 0307 	orr.w	r3, r3, #7
 80047ec:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80047ee:	4b20      	ldr	r3, [pc, #128]	; (8004870 <SystemInit+0xec>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80047f4:	4b1e      	ldr	r3, [pc, #120]	; (8004870 <SystemInit+0xec>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80047fa:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <SystemInit+0xec>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004800:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <SystemInit+0xec>)
 8004802:	4a1d      	ldr	r2, [pc, #116]	; (8004878 <SystemInit+0xf4>)
 8004804:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004806:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <SystemInit+0xec>)
 8004808:	4a1c      	ldr	r2, [pc, #112]	; (800487c <SystemInit+0xf8>)
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 800480c:	4b18      	ldr	r3, [pc, #96]	; (8004870 <SystemInit+0xec>)
 800480e:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <SystemInit+0xfc>)
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004812:	4b17      	ldr	r3, [pc, #92]	; (8004870 <SystemInit+0xec>)
 8004814:	2200      	movs	r2, #0
 8004816:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004818:	4b15      	ldr	r3, [pc, #84]	; (8004870 <SystemInit+0xec>)
 800481a:	4a19      	ldr	r2, [pc, #100]	; (8004880 <SystemInit+0xfc>)
 800481c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800481e:	4b14      	ldr	r3, [pc, #80]	; (8004870 <SystemInit+0xec>)
 8004820:	2200      	movs	r2, #0
 8004822:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004824:	4b12      	ldr	r3, [pc, #72]	; (8004870 <SystemInit+0xec>)
 8004826:	4a16      	ldr	r2, [pc, #88]	; (8004880 <SystemInit+0xfc>)
 8004828:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <SystemInit+0xec>)
 800482c:	2200      	movs	r2, #0
 800482e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004830:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <SystemInit+0xec>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a0e      	ldr	r2, [pc, #56]	; (8004870 <SystemInit+0xec>)
 8004836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 800483c:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <SystemInit+0xec>)
 800483e:	2200      	movs	r2, #0
 8004840:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <SystemInit+0x100>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <SystemInit+0x104>)
 8004848:	4013      	ands	r3, r2
 800484a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800484e:	d202      	bcs.n	8004856 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004850:	4b0e      	ldr	r3, [pc, #56]	; (800488c <SystemInit+0x108>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004856:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <SystemInit+0x10c>)
 8004858:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800485c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00
 800486c:	52002000 	.word	0x52002000
 8004870:	58024400 	.word	0x58024400
 8004874:	eaf6ed7f 	.word	0xeaf6ed7f
 8004878:	02020200 	.word	0x02020200
 800487c:	01ff0000 	.word	0x01ff0000
 8004880:	01010280 	.word	0x01010280
 8004884:	5c001000 	.word	0x5c001000
 8004888:	ffff0000 	.word	0xffff0000
 800488c:	51008108 	.word	0x51008108
 8004890:	52004000 	.word	0x52004000

08004894 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b09a      	sub	sp, #104	; 0x68
 8004898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800489a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	605a      	str	r2, [r3, #4]
 80048a4:	609a      	str	r2, [r3, #8]
 80048a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	605a      	str	r2, [r3, #4]
 80048b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]
 80048c4:	615a      	str	r2, [r3, #20]
 80048c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80048c8:	1d3b      	adds	r3, r7, #4
 80048ca:	222c      	movs	r2, #44	; 0x2c
 80048cc:	2100      	movs	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f015 fa14 	bl	8019cfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80048d4:	4b44      	ldr	r3, [pc, #272]	; (80049e8 <MX_TIM1_Init+0x154>)
 80048d6:	4a45      	ldr	r2, [pc, #276]	; (80049ec <MX_TIM1_Init+0x158>)
 80048d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 80048da:	4b43      	ldr	r3, [pc, #268]	; (80049e8 <MX_TIM1_Init+0x154>)
 80048dc:	224a      	movs	r2, #74	; 0x4a
 80048de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048e0:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <MX_TIM1_Init+0x154>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80048e6:	4b40      	ldr	r3, [pc, #256]	; (80049e8 <MX_TIM1_Init+0x154>)
 80048e8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80048ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048ee:	4b3e      	ldr	r3, [pc, #248]	; (80049e8 <MX_TIM1_Init+0x154>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80048f4:	4b3c      	ldr	r3, [pc, #240]	; (80049e8 <MX_TIM1_Init+0x154>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048fa:	4b3b      	ldr	r3, [pc, #236]	; (80049e8 <MX_TIM1_Init+0x154>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004900:	4839      	ldr	r0, [pc, #228]	; (80049e8 <MX_TIM1_Init+0x154>)
 8004902:	f00d fd76 	bl	80123f2 <HAL_TIM_Base_Init>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800490c:	f7fe feea 	bl	80036e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004914:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004916:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800491a:	4619      	mov	r1, r3
 800491c:	4832      	ldr	r0, [pc, #200]	; (80049e8 <MX_TIM1_Init+0x154>)
 800491e:	f00e faf1 	bl	8012f04 <HAL_TIM_ConfigClockSource>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004928:	f7fe fedc 	bl	80036e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800492c:	482e      	ldr	r0, [pc, #184]	; (80049e8 <MX_TIM1_Init+0x154>)
 800492e:	f00e f86d 	bl	8012a0c <HAL_TIM_PWM_Init>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004938:	f7fe fed4 	bl	80036e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800493c:	2300      	movs	r3, #0
 800493e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004940:	2300      	movs	r3, #0
 8004942:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004944:	2300      	movs	r3, #0
 8004946:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004948:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800494c:	4619      	mov	r1, r3
 800494e:	4826      	ldr	r0, [pc, #152]	; (80049e8 <MX_TIM1_Init+0x154>)
 8004950:	f00f f82e 	bl	80139b0 <HAL_TIMEx_MasterConfigSynchronization>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800495a:	f7fe fec3 	bl	80036e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800495e:	2360      	movs	r3, #96	; 0x60
 8004960:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004962:	f240 13df 	movw	r3, #479	; 0x1df
 8004966:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004968:	2300      	movs	r3, #0
 800496a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800496c:	2300      	movs	r3, #0
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004970:	2300      	movs	r3, #0
 8004972:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004974:	2300      	movs	r3, #0
 8004976:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004978:	2300      	movs	r3, #0
 800497a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800497c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004980:	2200      	movs	r2, #0
 8004982:	4619      	mov	r1, r3
 8004984:	4818      	ldr	r0, [pc, #96]	; (80049e8 <MX_TIM1_Init+0x154>)
 8004986:	f00e f9a9 	bl	8012cdc <HAL_TIM_PWM_ConfigChannel>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004990:	f7fe fea8 	bl	80036e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004994:	2300      	movs	r3, #0
 8004996:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004998:	2300      	movs	r3, #0
 800499a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80049a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80049b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80049c4:	1d3b      	adds	r3, r7, #4
 80049c6:	4619      	mov	r1, r3
 80049c8:	4807      	ldr	r0, [pc, #28]	; (80049e8 <MX_TIM1_Init+0x154>)
 80049ca:	f00f f87f 	bl	8013acc <HAL_TIMEx_ConfigBreakDeadTime>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80049d4:	f7fe fe86 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80049d8:	4803      	ldr	r0, [pc, #12]	; (80049e8 <MX_TIM1_Init+0x154>)
 80049da:	f000 f8dd 	bl	8004b98 <HAL_TIM_MspPostInit>

}
 80049de:	bf00      	nop
 80049e0:	3768      	adds	r7, #104	; 0x68
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	24001d44 	.word	0x24001d44
 80049ec:	40010000 	.word	0x40010000

080049f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08e      	sub	sp, #56	; 0x38
 80049f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	609a      	str	r2, [r3, #8]
 8004a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a04:	f107 031c 	add.w	r3, r7, #28
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a10:	463b      	mov	r3, r7
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	605a      	str	r2, [r3, #4]
 8004a18:	609a      	str	r2, [r3, #8]
 8004a1a:	60da      	str	r2, [r3, #12]
 8004a1c:	611a      	str	r2, [r3, #16]
 8004a1e:	615a      	str	r2, [r3, #20]
 8004a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <MX_TIM2_Init+0xe8>)
 8004a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004a2a:	4b2b      	ldr	r3, [pc, #172]	; (8004ad8 <MX_TIM2_Init+0xe8>)
 8004a2c:	224a      	movs	r2, #74	; 0x4a
 8004a2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a30:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <MX_TIM2_Init+0xe8>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004a36:	4b28      	ldr	r3, [pc, #160]	; (8004ad8 <MX_TIM2_Init+0xe8>)
 8004a38:	f640 4234 	movw	r2, #3124	; 0xc34
 8004a3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a3e:	4b26      	ldr	r3, [pc, #152]	; (8004ad8 <MX_TIM2_Init+0xe8>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a44:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <MX_TIM2_Init+0xe8>)
 8004a46:	2280      	movs	r2, #128	; 0x80
 8004a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a4a:	4823      	ldr	r0, [pc, #140]	; (8004ad8 <MX_TIM2_Init+0xe8>)
 8004a4c:	f00d fcd1 	bl	80123f2 <HAL_TIM_Base_Init>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004a56:	f7fe fe45 	bl	80036e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a64:	4619      	mov	r1, r3
 8004a66:	481c      	ldr	r0, [pc, #112]	; (8004ad8 <MX_TIM2_Init+0xe8>)
 8004a68:	f00e fa4c 	bl	8012f04 <HAL_TIM_ConfigClockSource>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004a72:	f7fe fe37 	bl	80036e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004a76:	4818      	ldr	r0, [pc, #96]	; (8004ad8 <MX_TIM2_Init+0xe8>)
 8004a78:	f00d ffc8 	bl	8012a0c <HAL_TIM_PWM_Init>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004a82:	f7fe fe2f 	bl	80036e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a86:	2320      	movs	r3, #32
 8004a88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a8e:	f107 031c 	add.w	r3, r7, #28
 8004a92:	4619      	mov	r1, r3
 8004a94:	4810      	ldr	r0, [pc, #64]	; (8004ad8 <MX_TIM2_Init+0xe8>)
 8004a96:	f00e ff8b 	bl	80139b0 <HAL_TIMEx_MasterConfigSynchronization>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004aa0:	f7fe fe20 	bl	80036e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004aa4:	2360      	movs	r3, #96	; 0x60
 8004aa6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	220c      	movs	r2, #12
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4807      	ldr	r0, [pc, #28]	; (8004ad8 <MX_TIM2_Init+0xe8>)
 8004abc:	f00e f90e 	bl	8012cdc <HAL_TIM_PWM_ConfigChannel>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004ac6:	f7fe fe0d 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004aca:	4803      	ldr	r0, [pc, #12]	; (8004ad8 <MX_TIM2_Init+0xe8>)
 8004acc:	f000 f864 	bl	8004b98 <HAL_TIM_MspPostInit>

}
 8004ad0:	bf00      	nop
 8004ad2:	3738      	adds	r7, #56	; 0x38
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	24001d90 	.word	0x24001d90

08004adc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a29      	ldr	r2, [pc, #164]	; (8004b90 <HAL_TIM_Base_MspInit+0xb4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d12f      	bne.n	8004b4e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004aee:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <HAL_TIM_Base_MspInit+0xb8>)
 8004af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004af4:	4a27      	ldr	r2, [pc, #156]	; (8004b94 <HAL_TIM_Base_MspInit+0xb8>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004afe:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <HAL_TIM_Base_MspInit+0xb8>)
 8004b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2105      	movs	r1, #5
 8004b10:	2018      	movs	r0, #24
 8004b12:	f002 faf5 	bl	8007100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004b16:	2018      	movs	r0, #24
 8004b18:	f002 fb0c 	bl	8007134 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2105      	movs	r1, #5
 8004b20:	2019      	movs	r0, #25
 8004b22:	f002 faed 	bl	8007100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004b26:	2019      	movs	r0, #25
 8004b28:	f002 fb04 	bl	8007134 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2105      	movs	r1, #5
 8004b30:	201a      	movs	r0, #26
 8004b32:	f002 fae5 	bl	8007100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004b36:	201a      	movs	r0, #26
 8004b38:	f002 fafc 	bl	8007134 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2105      	movs	r1, #5
 8004b40:	201b      	movs	r0, #27
 8004b42:	f002 fadd 	bl	8007100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004b46:	201b      	movs	r0, #27
 8004b48:	f002 faf4 	bl	8007134 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004b4c:	e01b      	b.n	8004b86 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d116      	bne.n	8004b86 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b58:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <HAL_TIM_Base_MspInit+0xb8>)
 8004b5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b5e:	4a0d      	ldr	r2, [pc, #52]	; (8004b94 <HAL_TIM_Base_MspInit+0xb8>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <HAL_TIM_Base_MspInit+0xb8>)
 8004b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004b76:	2200      	movs	r2, #0
 8004b78:	2105      	movs	r1, #5
 8004b7a:	201c      	movs	r0, #28
 8004b7c:	f002 fac0 	bl	8007100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004b80:	201c      	movs	r0, #28
 8004b82:	f002 fad7 	bl	8007134 <HAL_NVIC_EnableIRQ>
}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40010000 	.word	0x40010000
 8004b94:	58024400 	.word	0x58024400

08004b98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	60da      	str	r2, [r3, #12]
 8004bae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a26      	ldr	r2, [pc, #152]	; (8004c50 <HAL_TIM_MspPostInit+0xb8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d120      	bne.n	8004bfc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bba:	4b26      	ldr	r3, [pc, #152]	; (8004c54 <HAL_TIM_MspPostInit+0xbc>)
 8004bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bc0:	4a24      	ldr	r2, [pc, #144]	; (8004c54 <HAL_TIM_MspPostInit+0xbc>)
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bca:	4b22      	ldr	r3, [pc, #136]	; (8004c54 <HAL_TIM_MspPostInit+0xbc>)
 8004bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bde:	2302      	movs	r3, #2
 8004be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be6:	2300      	movs	r3, #0
 8004be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bea:	2301      	movs	r3, #1
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bee:	f107 0314 	add.w	r3, r7, #20
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4818      	ldr	r0, [pc, #96]	; (8004c58 <HAL_TIM_MspPostInit+0xc0>)
 8004bf6:	f006 f859 	bl	800acac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004bfa:	e024      	b.n	8004c46 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c04:	d11f      	bne.n	8004c46 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <HAL_TIM_MspPostInit+0xbc>)
 8004c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c0c:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <HAL_TIM_MspPostInit+0xbc>)
 8004c0e:	f043 0302 	orr.w	r3, r3, #2
 8004c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c16:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <HAL_TIM_MspPostInit+0xbc>)
 8004c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004c24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c32:	2300      	movs	r3, #0
 8004c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c36:	2301      	movs	r3, #1
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c3a:	f107 0314 	add.w	r3, r7, #20
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4806      	ldr	r0, [pc, #24]	; (8004c5c <HAL_TIM_MspPostInit+0xc4>)
 8004c42:	f006 f833 	bl	800acac <HAL_GPIO_Init>
}
 8004c46:	bf00      	nop
 8004c48:	3728      	adds	r7, #40	; 0x28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40010000 	.word	0x40010000
 8004c54:	58024400 	.word	0x58024400
 8004c58:	58020000 	.word	0x58020000
 8004c5c:	58020400 	.word	0x58020400

08004c60 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004c6c:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <get_uptime+0x94>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004c72:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <get_uptime+0x98>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004c78:	4b1e      	ldr	r3, [pc, #120]	; (8004cf4 <get_uptime+0x94>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d005      	beq.n	8004c8e <get_uptime+0x2e>
		ms = uptime_millis;
 8004c82:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <get_uptime+0x94>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004c88:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <get_uptime+0x98>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c94:	fb03 f202 	mul.w	r2, r3, r2
 8004c98:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <get_uptime+0x98>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	4917      	ldr	r1, [pc, #92]	; (8004cfc <get_uptime+0x9c>)
 8004ca0:	fba1 1303 	umull	r1, r3, r1, r3
 8004ca4:	099b      	lsrs	r3, r3, #6
 8004ca6:	68f9      	ldr	r1, [r7, #12]
 8004ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <get_uptime+0x5a>
		uptime = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	0e1b      	lsrs	r3, r3, #24
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	0c1a      	lsrs	r2, r3, #16
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	0a1a      	lsrs	r2, r3, #8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3303      	adds	r3, #3
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	24001a78 	.word	0x24001a78
 8004cf8:	e000e010 	.word	0xe000e010
 8004cfc:	10624dd3 	.word	0x10624dd3

08004d00 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	; 0x28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8004d08:	f107 0310 	add.w	r3, r7, #16
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4821      	ldr	r0, [pc, #132]	; (8004d98 <get_timestamp+0x98>)
 8004d12:	f00c fbcd 	bl	80114b0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8004d16:	f107 030c 	add.w	r3, r7, #12
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	481e      	ldr	r0, [pc, #120]	; (8004d98 <get_timestamp+0x98>)
 8004d20:	f00c fcaa 	bl	8011678 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2264      	movs	r2, #100	; 0x64
 8004d28:	fb03 f202 	mul.w	r2, r3, r2
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <get_timestamp+0x9c>)
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8004d32:	7bfa      	ldrb	r2, [r7, #15]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	7b7a      	ldrb	r2, [r7, #13]
 8004d3e:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3302      	adds	r3, #2
 8004d44:	7bba      	ldrb	r2, [r7, #14]
 8004d46:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3303      	adds	r3, #3
 8004d4c:	7c3a      	ldrb	r2, [r7, #16]
 8004d4e:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	7c7a      	ldrb	r2, [r7, #17]
 8004d56:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3305      	adds	r3, #5
 8004d5c:	7cba      	ldrb	r2, [r7, #18]
 8004d5e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	0e1a      	lsrs	r2, r3, #24
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3306      	adds	r3, #6
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	0c1a      	lsrs	r2, r3, #16
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3307      	adds	r3, #7
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	0a1a      	lsrs	r2, r3, #8
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3308      	adds	r3, #8
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3309      	adds	r3, #9
 8004d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	3728      	adds	r7, #40	; 0x28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	24001a8c 	.word	0x24001a8c
 8004d9c:	000f4240 	.word	0x000f4240

08004da0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004da4:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004da6:	4a31      	ldr	r2, [pc, #196]	; (8004e6c <MX_USART1_UART_Init+0xcc>)
 8004da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8004daa:	4b2f      	ldr	r3, [pc, #188]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004dac:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004db2:	4b2d      	ldr	r3, [pc, #180]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004db8:	4b2b      	ldr	r3, [pc, #172]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004dbe:	4b2a      	ldr	r3, [pc, #168]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004dc4:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004dc6:	220c      	movs	r2, #12
 8004dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dca:	4b27      	ldr	r3, [pc, #156]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dd0:	4b25      	ldr	r3, [pc, #148]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004dd6:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ddc:	4b22      	ldr	r3, [pc, #136]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004de2:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004de8:	481f      	ldr	r0, [pc, #124]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004dea:	f00e ff0b 	bl	8013c04 <HAL_UART_Init>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004df4:	f7fe fc76 	bl	80036e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004df8:	2100      	movs	r1, #0
 8004dfa:	481b      	ldr	r0, [pc, #108]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004dfc:	f011 fc51 	bl	80166a2 <HAL_UARTEx_SetTxFifoThreshold>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004e06:	f7fe fc6d 	bl	80036e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4816      	ldr	r0, [pc, #88]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004e0e:	f011 fc86 	bl	801671e <HAL_UARTEx_SetRxFifoThreshold>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004e18:	f7fe fc64 	bl	80036e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004e1c:	4812      	ldr	r0, [pc, #72]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004e1e:	f011 fc07 	bl	8016630 <HAL_UARTEx_DisableFifoMode>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004e28:	f7fe fc5c 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8004e2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e30:	480d      	ldr	r0, [pc, #52]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004e32:	f011 fc74 	bl	801671e <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8004e36:	480c      	ldr	r0, [pc, #48]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004e38:	f011 fbbf 	bl	80165ba <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8004e3c:	480a      	ldr	r0, [pc, #40]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004e3e:	f011 fb89 	bl	8016554 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e50:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <MX_USART1_UART_Init+0xc8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004e60:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	24001ddc 	.word	0x24001ddc
 8004e6c:	40011000 	.word	0x40011000

08004e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b0ba      	sub	sp, #232	; 0xe8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e88:	f107 0310 	add.w	r3, r7, #16
 8004e8c:	22c0      	movs	r2, #192	; 0xc0
 8004e8e:	2100      	movs	r1, #0
 8004e90:	4618      	mov	r0, r3
 8004e92:	f014 ff33 	bl	8019cfc <memset>
  if(uartHandle->Instance==USART1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a41      	ldr	r2, [pc, #260]	; (8004fa0 <HAL_UART_MspInit+0x130>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d17b      	bne.n	8004f98 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004ea0:	f04f 0201 	mov.w	r2, #1
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8004eac:	2318      	movs	r3, #24
 8004eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004eb2:	f107 0310 	add.w	r3, r7, #16
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f009 fcdc 	bl	800e874 <HAL_RCCEx_PeriphCLKConfig>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004ec2:	f7fe fc0f 	bl	80036e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ec6:	4b37      	ldr	r3, [pc, #220]	; (8004fa4 <HAL_UART_MspInit+0x134>)
 8004ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ecc:	4a35      	ldr	r2, [pc, #212]	; (8004fa4 <HAL_UART_MspInit+0x134>)
 8004ece:	f043 0310 	orr.w	r3, r3, #16
 8004ed2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004ed6:	4b33      	ldr	r3, [pc, #204]	; (8004fa4 <HAL_UART_MspInit+0x134>)
 8004ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ee4:	4b2f      	ldr	r3, [pc, #188]	; (8004fa4 <HAL_UART_MspInit+0x134>)
 8004ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eea:	4a2e      	ldr	r2, [pc, #184]	; (8004fa4 <HAL_UART_MspInit+0x134>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ef4:	4b2b      	ldr	r3, [pc, #172]	; (8004fa4 <HAL_UART_MspInit+0x134>)
 8004ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004f02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f16:	2300      	movs	r3, #0
 8004f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f1c:	2307      	movs	r3, #7
 8004f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004f26:	4619      	mov	r1, r3
 8004f28:	481f      	ldr	r0, [pc, #124]	; (8004fa8 <HAL_UART_MspInit+0x138>)
 8004f2a:	f005 febf 	bl	800acac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f30:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <HAL_UART_MspInit+0x140>)
 8004f32:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004f34:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f36:	222a      	movs	r2, #42	; 0x2a
 8004f38:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f3a:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f3c:	2240      	movs	r2, #64	; 0x40
 8004f3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f40:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f46:	4b19      	ldr	r3, [pc, #100]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f4c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f4e:	4b17      	ldr	r3, [pc, #92]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f54:	4b15      	ldr	r3, [pc, #84]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004f5a:	4b14      	ldr	r3, [pc, #80]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f60:	4b12      	ldr	r3, [pc, #72]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f66:	4b11      	ldr	r3, [pc, #68]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004f6c:	480f      	ldr	r0, [pc, #60]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f6e:	f002 fd6d 	bl	8007a4c <HAL_DMA_Init>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004f78:	f7fe fbb4 	bl	80036e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a0b      	ldr	r2, [pc, #44]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f80:	67da      	str	r2, [r3, #124]	; 0x7c
 8004f82:	4a0a      	ldr	r2, [pc, #40]	; (8004fac <HAL_UART_MspInit+0x13c>)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2105      	movs	r1, #5
 8004f8c:	2025      	movs	r0, #37	; 0x25
 8004f8e:	f002 f8b7 	bl	8007100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004f92:	2025      	movs	r0, #37	; 0x25
 8004f94:	f002 f8ce 	bl	8007134 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004f98:	bf00      	nop
 8004f9a:	37e8      	adds	r7, #232	; 0xe8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40011000 	.word	0x40011000
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	58020000 	.word	0x58020000
 8004fac:	24001e70 	.word	0x24001e70
 8004fb0:	40020040 	.word	0x40020040

08004fb4 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8004fbe:	4bc2      	ldr	r3, [pc, #776]	; (80052c8 <voltage_monitor_init+0x314>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8004fc4:	4bc0      	ldr	r3, [pc, #768]	; (80052c8 <voltage_monitor_init+0x314>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8004fca:	4bbf      	ldr	r3, [pc, #764]	; (80052c8 <voltage_monitor_init+0x314>)
 8004fcc:	2201      	movs	r2, #1
 8004fce:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8004fd0:	4bbd      	ldr	r3, [pc, #756]	; (80052c8 <voltage_monitor_init+0x314>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004fd6:	4bbc      	ldr	r3, [pc, #752]	; (80052c8 <voltage_monitor_init+0x314>)
 8004fd8:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fdc:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8004fde:	4bba      	ldr	r3, [pc, #744]	; (80052c8 <voltage_monitor_init+0x314>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8004fe4:	4bb8      	ldr	r3, [pc, #736]	; (80052c8 <voltage_monitor_init+0x314>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8004fea:	4bb7      	ldr	r3, [pc, #732]	; (80052c8 <voltage_monitor_init+0x314>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8004ff0:	4bb5      	ldr	r3, [pc, #724]	; (80052c8 <voltage_monitor_init+0x314>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8004ff6:	4bb4      	ldr	r3, [pc, #720]	; (80052c8 <voltage_monitor_init+0x314>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004ffc:	4bb2      	ldr	r3, [pc, #712]	; (80052c8 <voltage_monitor_init+0x314>)
 8004ffe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005002:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8005004:	4bb0      	ldr	r3, [pc, #704]	; (80052c8 <voltage_monitor_init+0x314>)
 8005006:	2200      	movs	r2, #0
 8005008:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 800500a:	4baf      	ldr	r3, [pc, #700]	; (80052c8 <voltage_monitor_init+0x314>)
 800500c:	2202      	movs	r2, #2
 800500e:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005010:	4bad      	ldr	r3, [pc, #692]	; (80052c8 <voltage_monitor_init+0x314>)
 8005012:	2200      	movs	r2, #0
 8005014:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8005016:	4bac      	ldr	r3, [pc, #688]	; (80052c8 <voltage_monitor_init+0x314>)
 8005018:	2201      	movs	r2, #1
 800501a:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 800501c:	4baa      	ldr	r3, [pc, #680]	; (80052c8 <voltage_monitor_init+0x314>)
 800501e:	2200      	movs	r2, #0
 8005020:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005022:	4ba9      	ldr	r3, [pc, #676]	; (80052c8 <voltage_monitor_init+0x314>)
 8005024:	f242 7210 	movw	r2, #10000	; 0x2710
 8005028:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 800502a:	4ba7      	ldr	r3, [pc, #668]	; (80052c8 <voltage_monitor_init+0x314>)
 800502c:	2200      	movs	r2, #0
 800502e:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8005030:	4ba5      	ldr	r3, [pc, #660]	; (80052c8 <voltage_monitor_init+0x314>)
 8005032:	2203      	movs	r2, #3
 8005034:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8005036:	4ba4      	ldr	r3, [pc, #656]	; (80052c8 <voltage_monitor_init+0x314>)
 8005038:	2200      	movs	r2, #0
 800503a:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 800503c:	4ba2      	ldr	r3, [pc, #648]	; (80052c8 <voltage_monitor_init+0x314>)
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8005044:	4ba0      	ldr	r3, [pc, #640]	; (80052c8 <voltage_monitor_init+0x314>)
 8005046:	2200      	movs	r2, #0
 8005048:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 800504a:	4b9f      	ldr	r3, [pc, #636]	; (80052c8 <voltage_monitor_init+0x314>)
 800504c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005050:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8005052:	4b9d      	ldr	r3, [pc, #628]	; (80052c8 <voltage_monitor_init+0x314>)
 8005054:	2200      	movs	r2, #0
 8005056:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8005058:	4b9b      	ldr	r3, [pc, #620]	; (80052c8 <voltage_monitor_init+0x314>)
 800505a:	2204      	movs	r2, #4
 800505c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005060:	4b99      	ldr	r3, [pc, #612]	; (80052c8 <voltage_monitor_init+0x314>)
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8005068:	4b97      	ldr	r3, [pc, #604]	; (80052c8 <voltage_monitor_init+0x314>)
 800506a:	2201      	movs	r2, #1
 800506c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005070:	4b95      	ldr	r3, [pc, #596]	; (80052c8 <voltage_monitor_init+0x314>)
 8005072:	2200      	movs	r2, #0
 8005074:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005076:	4b94      	ldr	r3, [pc, #592]	; (80052c8 <voltage_monitor_init+0x314>)
 8005078:	f242 7210 	movw	r2, #10000	; 0x2710
 800507c:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 800507e:	4b92      	ldr	r3, [pc, #584]	; (80052c8 <voltage_monitor_init+0x314>)
 8005080:	2200      	movs	r2, #0
 8005082:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8005084:	4b90      	ldr	r3, [pc, #576]	; (80052c8 <voltage_monitor_init+0x314>)
 8005086:	2205      	movs	r2, #5
 8005088:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 800508c:	4b8e      	ldr	r3, [pc, #568]	; (80052c8 <voltage_monitor_init+0x314>)
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8005094:	4b8c      	ldr	r3, [pc, #560]	; (80052c8 <voltage_monitor_init+0x314>)
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 800509c:	4b8a      	ldr	r3, [pc, #552]	; (80052c8 <voltage_monitor_init+0x314>)
 800509e:	2200      	movs	r2, #0
 80050a0:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 80050a2:	4b89      	ldr	r3, [pc, #548]	; (80052c8 <voltage_monitor_init+0x314>)
 80050a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80050a8:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 80050aa:	4b87      	ldr	r3, [pc, #540]	; (80052c8 <voltage_monitor_init+0x314>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 80050b0:	4b85      	ldr	r3, [pc, #532]	; (80052c8 <voltage_monitor_init+0x314>)
 80050b2:	2206      	movs	r2, #6
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 80050b8:	4b83      	ldr	r3, [pc, #524]	; (80052c8 <voltage_monitor_init+0x314>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 80050c0:	4b81      	ldr	r3, [pc, #516]	; (80052c8 <voltage_monitor_init+0x314>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 80050c8:	4b7f      	ldr	r3, [pc, #508]	; (80052c8 <voltage_monitor_init+0x314>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80050d0:	4b7d      	ldr	r3, [pc, #500]	; (80052c8 <voltage_monitor_init+0x314>)
 80050d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80050d6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 80050da:	4b7b      	ldr	r3, [pc, #492]	; (80052c8 <voltage_monitor_init+0x314>)
 80050dc:	2200      	movs	r2, #0
 80050de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80050e2:	4b79      	ldr	r3, [pc, #484]	; (80052c8 <voltage_monitor_init+0x314>)
 80050e4:	2207      	movs	r2, #7
 80050e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 80050ea:	4b77      	ldr	r3, [pc, #476]	; (80052c8 <voltage_monitor_init+0x314>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 80050f2:	4b75      	ldr	r3, [pc, #468]	; (80052c8 <voltage_monitor_init+0x314>)
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 80050fa:	4b73      	ldr	r3, [pc, #460]	; (80052c8 <voltage_monitor_init+0x314>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005102:	4b71      	ldr	r3, [pc, #452]	; (80052c8 <voltage_monitor_init+0x314>)
 8005104:	f242 7210 	movw	r2, #10000	; 0x2710
 8005108:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 800510c:	4b6e      	ldr	r3, [pc, #440]	; (80052c8 <voltage_monitor_init+0x314>)
 800510e:	2200      	movs	r2, #0
 8005110:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8005114:	4b6c      	ldr	r3, [pc, #432]	; (80052c8 <voltage_monitor_init+0x314>)
 8005116:	2208      	movs	r2, #8
 8005118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 800511c:	4b6a      	ldr	r3, [pc, #424]	; (80052c8 <voltage_monitor_init+0x314>)
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8005124:	4b68      	ldr	r3, [pc, #416]	; (80052c8 <voltage_monitor_init+0x314>)
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 800512c:	4b66      	ldr	r3, [pc, #408]	; (80052c8 <voltage_monitor_init+0x314>)
 800512e:	2200      	movs	r2, #0
 8005130:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8005134:	4b64      	ldr	r3, [pc, #400]	; (80052c8 <voltage_monitor_init+0x314>)
 8005136:	f640 42b9 	movw	r2, #3257	; 0xcb9
 800513a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 800513e:	4b62      	ldr	r3, [pc, #392]	; (80052c8 <voltage_monitor_init+0x314>)
 8005140:	f640 3283 	movw	r2, #2947	; 0xb83
 8005144:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8005148:	4b5f      	ldr	r3, [pc, #380]	; (80052c8 <voltage_monitor_init+0x314>)
 800514a:	2209      	movs	r2, #9
 800514c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005150:	4b5d      	ldr	r3, [pc, #372]	; (80052c8 <voltage_monitor_init+0x314>)
 8005152:	2200      	movs	r2, #0
 8005154:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8005158:	4b5b      	ldr	r3, [pc, #364]	; (80052c8 <voltage_monitor_init+0x314>)
 800515a:	2200      	movs	r2, #0
 800515c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005160:	4b59      	ldr	r3, [pc, #356]	; (80052c8 <voltage_monitor_init+0x314>)
 8005162:	2200      	movs	r2, #0
 8005164:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8005168:	4b57      	ldr	r3, [pc, #348]	; (80052c8 <voltage_monitor_init+0x314>)
 800516a:	f640 7245 	movw	r2, #3909	; 0xf45
 800516e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005172:	4b55      	ldr	r3, [pc, #340]	; (80052c8 <voltage_monitor_init+0x314>)
 8005174:	2200      	movs	r2, #0
 8005176:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 800517a:	4b53      	ldr	r3, [pc, #332]	; (80052c8 <voltage_monitor_init+0x314>)
 800517c:	220a      	movs	r2, #10
 800517e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8005182:	4b51      	ldr	r3, [pc, #324]	; (80052c8 <voltage_monitor_init+0x314>)
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 800518a:	4b4f      	ldr	r3, [pc, #316]	; (80052c8 <voltage_monitor_init+0x314>)
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8005192:	4b4d      	ldr	r3, [pc, #308]	; (80052c8 <voltage_monitor_init+0x314>)
 8005194:	2200      	movs	r2, #0
 8005196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 800519a:	4b4b      	ldr	r3, [pc, #300]	; (80052c8 <voltage_monitor_init+0x314>)
 800519c:	f640 7245 	movw	r2, #3909	; 0xf45
 80051a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 80051a4:	4b48      	ldr	r3, [pc, #288]	; (80052c8 <voltage_monitor_init+0x314>)
 80051a6:	f640 52d1 	movw	r2, #3537	; 0xdd1
 80051aa:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 80051ae:	4b46      	ldr	r3, [pc, #280]	; (80052c8 <voltage_monitor_init+0x314>)
 80051b0:	220b      	movs	r2, #11
 80051b2:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 80051b6:	4b44      	ldr	r3, [pc, #272]	; (80052c8 <voltage_monitor_init+0x314>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 80051be:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <voltage_monitor_init+0x314>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 80051c6:	4b40      	ldr	r3, [pc, #256]	; (80052c8 <voltage_monitor_init+0x314>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 80051ce:	4b3e      	ldr	r3, [pc, #248]	; (80052c8 <voltage_monitor_init+0x314>)
 80051d0:	f640 72fb 	movw	r2, #4091	; 0xffb
 80051d4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 80051d8:	4b3b      	ldr	r3, [pc, #236]	; (80052c8 <voltage_monitor_init+0x314>)
 80051da:	f640 6276 	movw	r2, #3702	; 0xe76
 80051de:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80051e2:	4b39      	ldr	r3, [pc, #228]	; (80052c8 <voltage_monitor_init+0x314>)
 80051e4:	220c      	movs	r2, #12
 80051e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 80051ea:	4b37      	ldr	r3, [pc, #220]	; (80052c8 <voltage_monitor_init+0x314>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 80051f2:	4b35      	ldr	r3, [pc, #212]	; (80052c8 <voltage_monitor_init+0x314>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 80051fa:	4b33      	ldr	r3, [pc, #204]	; (80052c8 <voltage_monitor_init+0x314>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8005202:	4b31      	ldr	r3, [pc, #196]	; (80052c8 <voltage_monitor_init+0x314>)
 8005204:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8005208:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 800520c:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <voltage_monitor_init+0x314>)
 800520e:	2200      	movs	r2, #0
 8005210:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8005214:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <voltage_monitor_init+0x314>)
 8005216:	220d      	movs	r2, #13
 8005218:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 800521c:	4b2a      	ldr	r3, [pc, #168]	; (80052c8 <voltage_monitor_init+0x314>)
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8005224:	4b28      	ldr	r3, [pc, #160]	; (80052c8 <voltage_monitor_init+0x314>)
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 800522c:	4b26      	ldr	r3, [pc, #152]	; (80052c8 <voltage_monitor_init+0x314>)
 800522e:	2200      	movs	r2, #0
 8005230:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8005234:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <voltage_monitor_init+0x314>)
 8005236:	f640 7238 	movw	r2, #3896	; 0xf38
 800523a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 800523e:	4b22      	ldr	r3, [pc, #136]	; (80052c8 <voltage_monitor_init+0x314>)
 8005240:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8005244:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8005248:	4b1f      	ldr	r3, [pc, #124]	; (80052c8 <voltage_monitor_init+0x314>)
 800524a:	220e      	movs	r2, #14
 800524c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005250:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <voltage_monitor_init+0x314>)
 8005252:	2200      	movs	r2, #0
 8005254:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8005258:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <voltage_monitor_init+0x314>)
 800525a:	2200      	movs	r2, #0
 800525c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005260:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <voltage_monitor_init+0x314>)
 8005262:	2200      	movs	r2, #0
 8005264:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8005268:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <voltage_monitor_init+0x314>)
 800526a:	f640 7245 	movw	r2, #3909	; 0xf45
 800526e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8005272:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <voltage_monitor_init+0x314>)
 8005274:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005278:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 800527c:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <voltage_monitor_init+0x314>)
 800527e:	220f      	movs	r2, #15
 8005280:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8005284:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <voltage_monitor_init+0x314>)
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 800528c:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <voltage_monitor_init+0x314>)
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8005294:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <voltage_monitor_init+0x314>)
 8005296:	2200      	movs	r2, #0
 8005298:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <voltage_monitor_init+0x314>)
 800529e:	f241 0264 	movw	r2, #4196	; 0x1064
 80052a2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 80052a6:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <voltage_monitor_init+0x314>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <voltage_monitor_init+0x314>)
 80052b0:	2210      	movs	r2, #16
 80052b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 80052b6:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <voltage_monitor_init+0x314>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 80052be:	4b02      	ldr	r3, [pc, #8]	; (80052c8 <voltage_monitor_init+0x314>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80052c6:	e001      	b.n	80052cc <voltage_monitor_init+0x318>
 80052c8:	24001ee8 	.word	0x24001ee8
	rail_monitor[RAIL_n800v].data = 0;
 80052cc:	4b17      	ldr	r3, [pc, #92]	; (800532c <voltage_monitor_init+0x378>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 80052d4:	4b15      	ldr	r3, [pc, #84]	; (800532c <voltage_monitor_init+0x378>)
 80052d6:	f640 5208 	movw	r2, #3336	; 0xd08
 80052da:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 80052de:	4b13      	ldr	r3, [pc, #76]	; (800532c <voltage_monitor_init+0x378>)
 80052e0:	f640 32ca 	movw	r2, #3018	; 0xbca
 80052e4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80052e8:	4b10      	ldr	r3, [pc, #64]	; (800532c <voltage_monitor_init+0x378>)
 80052ea:	2211      	movs	r2, #17
 80052ec:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 80052f0:	4b0e      	ldr	r3, [pc, #56]	; (800532c <voltage_monitor_init+0x378>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <voltage_monitor_init+0x378>)
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <voltage_monitor_init+0x378>)
 8005302:	2200      	movs	r2, #0
 8005304:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005308:	4b08      	ldr	r3, [pc, #32]	; (800532c <voltage_monitor_init+0x378>)
 800530a:	f242 7210 	movw	r2, #10000	; 0x2710
 800530e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8005312:	4b06      	ldr	r3, [pc, #24]	; (800532c <voltage_monitor_init+0x378>)
 8005314:	2200      	movs	r2, #0
 8005316:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 800531a:	2301      	movs	r3, #1
 800531c:	71fb      	strb	r3, [r7, #7]

	return status;
 800531e:	79fb      	ldrb	r3, [r7, #7]
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	24001ee8 	.word	0x24001ee8

08005330 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	460a      	mov	r2, r1
 800533a:	71fb      	strb	r3, [r7, #7]
 800533c:	4613      	mov	r3, r2
 800533e:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005344:	79fa      	ldrb	r2, [r7, #7]
 8005346:	4909      	ldr	r1, [pc, #36]	; (800536c <set_rail_monitor_enable+0x3c>)
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	440b      	add	r3, r1
 8005352:	3302      	adds	r3, #2
 8005354:	79ba      	ldrb	r2, [r7, #6]
 8005356:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]

	return status;
 800535c:	7bfb      	ldrb	r3, [r7, #15]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	24001ee8 	.word	0x24001ee8

08005370 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 800537c:	463b      	mov	r3, r7
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe fcf6 	bl	8003d70 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005384:	f107 0310 	add.w	r3, r7, #16
 8005388:	4618      	mov	r0, r3
 800538a:	f7fe fd21 	bl	8003dd0 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 800538e:	f107 0308 	add.w	r3, r7, #8
 8005392:	4618      	mov	r0, r3
 8005394:	f7fe fd6e 	bl	8003e74 <sample_hk_adc3>
 8005398:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 800539a:	4b25      	ldr	r3, [pc, #148]	; (8005430 <set_rail_monitor+0xc0>)
 800539c:	809a      	strh	r2, [r3, #4]
 800539e:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 80053a0:	4b23      	ldr	r3, [pc, #140]	; (8005430 <set_rail_monitor+0xc0>)
 80053a2:	81da      	strh	r2, [r3, #14]
 80053a4:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 80053a6:	4b22      	ldr	r3, [pc, #136]	; (8005430 <set_rail_monitor+0xc0>)
 80053a8:	831a      	strh	r2, [r3, #24]
 80053aa:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 80053ac:	4b20      	ldr	r3, [pc, #128]	; (8005430 <set_rail_monitor+0xc0>)
 80053ae:	845a      	strh	r2, [r3, #34]	; 0x22
 80053b0:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 80053b2:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <set_rail_monitor+0xc0>)
 80053b4:	859a      	strh	r2, [r3, #44]	; 0x2c
 80053b6:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 80053b8:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <set_rail_monitor+0xc0>)
 80053ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80053bc:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 80053be:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <set_rail_monitor+0xc0>)
 80053c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80053c4:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 80053c6:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <set_rail_monitor+0xc0>)
 80053c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80053cc:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 80053ce:	4b18      	ldr	r3, [pc, #96]	; (8005430 <set_rail_monitor+0xc0>)
 80053d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80053d4:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 80053d6:	4b16      	ldr	r3, [pc, #88]	; (8005430 <set_rail_monitor+0xc0>)
 80053d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80053dc:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <set_rail_monitor+0xc0>)
 80053e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80053e4:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 80053e6:	4b12      	ldr	r3, [pc, #72]	; (8005430 <set_rail_monitor+0xc0>)
 80053e8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80053ec:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <set_rail_monitor+0xc0>)
 80053f0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80053f4:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 80053f6:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <set_rail_monitor+0xc0>)
 80053f8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80053fc:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 80053fe:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <set_rail_monitor+0xc0>)
 8005400:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005404:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <set_rail_monitor+0xc0>)
 8005408:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800540c:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 800540e:	4b08      	ldr	r3, [pc, #32]	; (8005430 <set_rail_monitor+0xc0>)
 8005410:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005414:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <set_rail_monitor+0xc0>)
 8005418:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005426:	4618      	mov	r0, r3
 8005428:	3728      	adds	r7, #40	; 0x28
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	24001ee8 	.word	0x24001ee8

08005434 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005438:	4b02      	ldr	r3, [pc, #8]	; (8005444 <get_rail_monitor+0x10>)
}
 800543a:	4618      	mov	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	24001ee8 	.word	0x24001ee8

08005448 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8005456:	89fb      	ldrh	r3, [r7, #14]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	429a      	cmp	r2, r3
 800545c:	db05      	blt.n	800546a <in_range+0x22>
 800545e:	89fb      	ldrh	r3, [r7, #14]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	429a      	cmp	r2, r3
 8005464:	dc01      	bgt.n	800546a <in_range+0x22>
		return 1;
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <in_range+0x24>
	}
	return 0;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <monitor_rails>:


void monitor_rails() {
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800547e:	2300      	movs	r3, #0
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	e062      	b.n	800554a <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 8005484:	4935      	ldr	r1, [pc, #212]	; (800555c <monitor_rails+0xe4>)
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	440b      	add	r3, r1
 8005492:	3302      	adds	r3, #2
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d054      	beq.n	8005544 <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 800549a:	4930      	ldr	r1, [pc, #192]	; (800555c <monitor_rails+0xe4>)
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4613      	mov	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	440b      	add	r3, r1
 80054a8:	3304      	adds	r3, #4
 80054aa:	8818      	ldrh	r0, [r3, #0]
 80054ac:	492b      	ldr	r1, [pc, #172]	; (800555c <monitor_rails+0xe4>)
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	440b      	add	r3, r1
 80054ba:	3308      	adds	r3, #8
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	461c      	mov	r4, r3
 80054c0:	4926      	ldr	r1, [pc, #152]	; (800555c <monitor_rails+0xe4>)
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	440b      	add	r3, r1
 80054ce:	3306      	adds	r3, #6
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	4621      	mov	r1, r4
 80054d6:	f7ff ffb7 	bl	8005448 <in_range>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d131      	bne.n	8005544 <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 80054e0:	491e      	ldr	r1, [pc, #120]	; (800555c <monitor_rails+0xe4>)
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	440b      	add	r3, r1
 80054ee:	3301      	adds	r3, #1
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	b2d8      	uxtb	r0, r3
 80054f6:	4919      	ldr	r1, [pc, #100]	; (800555c <monitor_rails+0xe4>)
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	440b      	add	r3, r1
 8005504:	3301      	adds	r3, #1
 8005506:	4602      	mov	r2, r0
 8005508:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 800550a:	4914      	ldr	r1, [pc, #80]	; (800555c <monitor_rails+0xe4>)
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	440b      	add	r3, r1
 8005518:	3301      	adds	r3, #1
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d111      	bne.n	8005544 <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005520:	490e      	ldr	r1, [pc, #56]	; (800555c <monitor_rails+0xe4>)
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	440b      	add	r3, r1
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	4618      	mov	r0, r3
 8005532:	f000 f815 	bl	8005560 <get_rail_name_error_detail>
 8005536:	4603      	mov	r3, r0
 8005538:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 800553a:	2300      	movs	r3, #0
 800553c:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 800553e:	6838      	ldr	r0, [r7, #0]
 8005540:	f7fc fcf6 	bl	8001f30 <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3301      	adds	r3, #1
 8005548:	607b      	str	r3, [r7, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b11      	cmp	r3, #17
 800554e:	dd99      	ble.n	8005484 <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	bd90      	pop	{r4, r7, pc}
 800555a:	bf00      	nop
 800555c:	24001ee8 	.word	0x24001ee8

08005560 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	2b11      	cmp	r3, #17
 800556e:	d84b      	bhi.n	8005608 <get_rail_name_error_detail+0xa8>
 8005570:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <get_rail_name_error_detail+0x18>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	080055c1 	.word	0x080055c1
 800557c:	080055c5 	.word	0x080055c5
 8005580:	080055c9 	.word	0x080055c9
 8005584:	080055cd 	.word	0x080055cd
 8005588:	080055d1 	.word	0x080055d1
 800558c:	080055d5 	.word	0x080055d5
 8005590:	080055d9 	.word	0x080055d9
 8005594:	080055dd 	.word	0x080055dd
 8005598:	080055e1 	.word	0x080055e1
 800559c:	080055e5 	.word	0x080055e5
 80055a0:	080055e9 	.word	0x080055e9
 80055a4:	080055ed 	.word	0x080055ed
 80055a8:	080055f1 	.word	0x080055f1
 80055ac:	080055f5 	.word	0x080055f5
 80055b0:	080055f9 	.word	0x080055f9
 80055b4:	080055fd 	.word	0x080055fd
 80055b8:	08005601 	.word	0x08005601
 80055bc:	08005605 	.word	0x08005605
	case RAIL_vsense:
		return ED_vsense;
 80055c0:	2300      	movs	r3, #0
 80055c2:	e022      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e020      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 80055c8:	2302      	movs	r3, #2
 80055ca:	e01e      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e01c      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 80055d0:	2304      	movs	r3, #4
 80055d2:	e01a      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 80055d4:	2305      	movs	r3, #5
 80055d6:	e018      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 80055d8:	2306      	movs	r3, #6
 80055da:	e016      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 80055dc:	2307      	movs	r3, #7
 80055de:	e014      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 80055e0:	2308      	movs	r3, #8
 80055e2:	e012      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 80055e4:	2309      	movs	r3, #9
 80055e6:	e010      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 80055e8:	230a      	movs	r3, #10
 80055ea:	e00e      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 80055ec:	230b      	movs	r3, #11
 80055ee:	e00c      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 80055f0:	230c      	movs	r3, #12
 80055f2:	e00a      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 80055f4:	230d      	movs	r3, #13
 80055f6:	e008      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 80055f8:	230e      	movs	r3, #14
 80055fa:	e006      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 80055fc:	230f      	movs	r3, #15
 80055fe:	e004      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8005600:	2310      	movs	r3, #16
 8005602:	e002      	b.n	800560a <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8005604:	2311      	movs	r3, #17
 8005606:	e000      	b.n	800560a <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8005608:	2314      	movs	r3, #20
	}
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop

08005618 <Reset_Handler>:
 8005618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005650 <LoopFillZerobss+0xe>
 800561c:	f7ff f8b2 	bl	8004784 <SystemInit>
 8005620:	480c      	ldr	r0, [pc, #48]	; (8005654 <LoopFillZerobss+0x12>)
 8005622:	490d      	ldr	r1, [pc, #52]	; (8005658 <LoopFillZerobss+0x16>)
 8005624:	4a0d      	ldr	r2, [pc, #52]	; (800565c <LoopFillZerobss+0x1a>)
 8005626:	2300      	movs	r3, #0
 8005628:	e002      	b.n	8005630 <LoopCopyDataInit>

0800562a <CopyDataInit>:
 800562a:	58d4      	ldr	r4, [r2, r3]
 800562c:	50c4      	str	r4, [r0, r3]
 800562e:	3304      	adds	r3, #4

08005630 <LoopCopyDataInit>:
 8005630:	18c4      	adds	r4, r0, r3
 8005632:	428c      	cmp	r4, r1
 8005634:	d3f9      	bcc.n	800562a <CopyDataInit>
 8005636:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <LoopFillZerobss+0x1e>)
 8005638:	4c0a      	ldr	r4, [pc, #40]	; (8005664 <LoopFillZerobss+0x22>)
 800563a:	2300      	movs	r3, #0
 800563c:	e001      	b.n	8005642 <LoopFillZerobss>

0800563e <FillZerobss>:
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	3204      	adds	r2, #4

08005642 <LoopFillZerobss>:
 8005642:	42a2      	cmp	r2, r4
 8005644:	d3fb      	bcc.n	800563e <FillZerobss>
 8005646:	f014 fb27 	bl	8019c98 <__libc_init_array>
 800564a:	f7fd fdc7 	bl	80031dc <main>
 800564e:	4770      	bx	lr
 8005650:	24080000 	.word	0x24080000
 8005654:	24000000 	.word	0x24000000
 8005658:	24000108 	.word	0x24000108
 800565c:	0801abc8 	.word	0x0801abc8
 8005660:	24000120 	.word	0x24000120
 8005664:	2400691c 	.word	0x2400691c

08005668 <ADC3_IRQHandler>:
 8005668:	e7fe      	b.n	8005668 <ADC3_IRQHandler>
	...

0800566c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005672:	2003      	movs	r0, #3
 8005674:	f001 fd39 	bl	80070ea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005678:	f008 fee4 	bl	800e444 <HAL_RCC_GetSysClockFreq>
 800567c:	4602      	mov	r2, r0
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <HAL_Init+0x68>)
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	0a1b      	lsrs	r3, r3, #8
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	4913      	ldr	r1, [pc, #76]	; (80056d8 <HAL_Init+0x6c>)
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005696:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <HAL_Init+0x68>)
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	4a0e      	ldr	r2, [pc, #56]	; (80056d8 <HAL_Init+0x6c>)
 80056a0:	5cd3      	ldrb	r3, [r2, r3]
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ac:	4a0b      	ldr	r2, [pc, #44]	; (80056dc <HAL_Init+0x70>)
 80056ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056b0:	4a0b      	ldr	r2, [pc, #44]	; (80056e0 <HAL_Init+0x74>)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056b6:	2005      	movs	r0, #5
 80056b8:	f7fe fe4e 	bl	8004358 <HAL_InitTick>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e002      	b.n	80056cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80056c6:	f7fe fe29 	bl	800431c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	58024400 	.word	0x58024400
 80056d8:	0801ab14 	.word	0x0801ab14
 80056dc:	24000094 	.word	0x24000094
 80056e0:	24000090 	.word	0x24000090

080056e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80056e8:	4b06      	ldr	r3, [pc, #24]	; (8005704 <HAL_IncTick+0x20>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	4b06      	ldr	r3, [pc, #24]	; (8005708 <HAL_IncTick+0x24>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4413      	add	r3, r2
 80056f4:	4a04      	ldr	r2, [pc, #16]	; (8005708 <HAL_IncTick+0x24>)
 80056f6:	6013      	str	r3, [r2, #0]
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	2400009c 	.word	0x2400009c
 8005708:	24001f9c 	.word	0x24001f9c

0800570c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return uwTick;
 8005710:	4b03      	ldr	r3, [pc, #12]	; (8005720 <HAL_GetTick+0x14>)
 8005712:	681b      	ldr	r3, [r3, #0]
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	24001f9c 	.word	0x24001f9c

08005724 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005728:	4b03      	ldr	r3, [pc, #12]	; (8005738 <HAL_GetREVID+0x14>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	0c1b      	lsrs	r3, r3, #16
}
 800572e:	4618      	mov	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	5c001000 	.word	0x5c001000

0800573c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005746:	4b07      	ldr	r3, [pc, #28]	; (8005764 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	43db      	mvns	r3, r3
 800574e:	401a      	ands	r2, r3
 8005750:	4904      	ldr	r1, [pc, #16]	; (8005764 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	58000400 	.word	0x58000400

08005768 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	609a      	str	r2, [r3, #8]
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	609a      	str	r2, [r3, #8]
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3360      	adds	r3, #96	; 0x60
 80057e2:	461a      	mov	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	430b      	orrs	r3, r1
 80057fe:	431a      	orrs	r2, r3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005804:	bf00      	nop
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 031f 	and.w	r3, r3, #31
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	fa01 f303 	lsl.w	r3, r1, r3
 8005830:	431a      	orrs	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	611a      	str	r2, [r3, #16]
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005842:	b480      	push	{r7}
 8005844:	b087      	sub	sp, #28
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3360      	adds	r3, #96	; 0x60
 8005852:	461a      	mov	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	431a      	orrs	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	601a      	str	r2, [r3, #0]
  }
}
 800586c:	bf00      	nop
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800589e:	b480      	push	{r7}
 80058a0:	b087      	sub	sp, #28
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3330      	adds	r3, #48	; 0x30
 80058ae:	461a      	mov	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	0a1b      	lsrs	r3, r3, #8
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	f003 030c 	and.w	r3, r3, #12
 80058ba:	4413      	add	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f003 031f 	and.w	r3, r3, #31
 80058c8:	211f      	movs	r1, #31
 80058ca:	fa01 f303 	lsl.w	r3, r1, r3
 80058ce:	43db      	mvns	r3, r3
 80058d0:	401a      	ands	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	0e9b      	lsrs	r3, r3, #26
 80058d6:	f003 011f 	and.w	r1, r3, #31
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	fa01 f303 	lsl.w	r3, r1, r3
 80058e4:	431a      	orrs	r2, r3
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f023 0203 	bic.w	r2, r3, #3
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	60da      	str	r2, [r3, #12]
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3314      	adds	r3, #20
 800592c:	461a      	mov	r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	0e5b      	lsrs	r3, r3, #25
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	4413      	add	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	0d1b      	lsrs	r3, r3, #20
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	2107      	movs	r1, #7
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	43db      	mvns	r3, r3
 8005950:	401a      	ands	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	0d1b      	lsrs	r3, r3, #20
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	fa01 f303 	lsl.w	r3, r1, r3
 8005960:	431a      	orrs	r2, r3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800598c:	43db      	mvns	r3, r3
 800598e:	401a      	ands	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f003 0318 	and.w	r3, r3, #24
 8005996:	4908      	ldr	r1, [pc, #32]	; (80059b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005998:	40d9      	lsrs	r1, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	400b      	ands	r3, r1
 800599e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059a2:	431a      	orrs	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	000fffff 	.word	0x000fffff

080059bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 031f 	and.w	r3, r3, #31
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	4b04      	ldr	r3, [pc, #16]	; (80059f8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6093      	str	r3, [r2, #8]
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	5fffffc0 	.word	0x5fffffc0

080059fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a10:	d101      	bne.n	8005a16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <LL_ADC_EnableInternalRegulator+0x24>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	6fffffc0 	.word	0x6fffffc0

08005a4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a60:	d101      	bne.n	8005a66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <LL_ADC_Enable+0x24>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	f043 0201 	orr.w	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	7fffffc0 	.word	0x7fffffc0

08005a9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <LL_ADC_Disable+0x24>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	f043 0202 	orr.w	r2, r3, #2
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	7fffffc0 	.word	0x7fffffc0

08005ac4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <LL_ADC_IsEnabled+0x18>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <LL_ADC_IsEnabled+0x1a>
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d101      	bne.n	8005b02 <LL_ADC_IsDisableOngoing+0x18>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e000      	b.n	8005b04 <LL_ADC_IsDisableOngoing+0x1a>
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <LL_ADC_REG_StartConversion+0x24>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	f043 0204 	orr.w	r2, r3, #4
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	7fffffc0 	.word	0x7fffffc0

08005b38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d101      	bne.n	8005b50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d101      	bne.n	8005b76 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b84:	b590      	push	{r4, r7, lr}
 8005b86:	b089      	sub	sp, #36	; 0x24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e18f      	b.n	8005ebe <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d109      	bne.n	8005bc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7fa fecd 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff ff19 	bl	80059fc <LL_ADC_IsDeepPowerDownEnabled>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff feff 	bl	80059d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7ff ff34 	bl	8005a4c <LL_ADC_IsInternalRegulatorEnabled>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d114      	bne.n	8005c14 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff ff18 	bl	8005a24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bf4:	4b87      	ldr	r3, [pc, #540]	; (8005e14 <HAL_ADC_Init+0x290>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	099b      	lsrs	r3, r3, #6
 8005bfa:	4a87      	ldr	r2, [pc, #540]	; (8005e18 <HAL_ADC_Init+0x294>)
 8005bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005c00:	099b      	lsrs	r3, r3, #6
 8005c02:	3301      	adds	r3, #1
 8005c04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c06:	e002      	b.n	8005c0e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f9      	bne.n	8005c08 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff ff17 	bl	8005a4c <LL_ADC_IsInternalRegulatorEnabled>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10d      	bne.n	8005c40 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c28:	f043 0210 	orr.w	r2, r3, #16
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c34:	f043 0201 	orr.w	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff ff77 	bl	8005b38 <LL_ADC_REG_IsConversionOngoing>
 8005c4a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f040 8129 	bne.w	8005eac <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 8125 	bne.w	8005eac <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c66:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005c6a:	f043 0202 	orr.w	r2, r3, #2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff ff24 	bl	8005ac4 <LL_ADC_IsEnabled>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d136      	bne.n	8005cf0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a65      	ldr	r2, [pc, #404]	; (8005e1c <HAL_ADC_Init+0x298>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_ADC_Init+0x112>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a63      	ldr	r2, [pc, #396]	; (8005e20 <HAL_ADC_Init+0x29c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d10e      	bne.n	8005cb4 <HAL_ADC_Init+0x130>
 8005c96:	4861      	ldr	r0, [pc, #388]	; (8005e1c <HAL_ADC_Init+0x298>)
 8005c98:	f7ff ff14 	bl	8005ac4 <LL_ADC_IsEnabled>
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	4860      	ldr	r0, [pc, #384]	; (8005e20 <HAL_ADC_Init+0x29c>)
 8005ca0:	f7ff ff10 	bl	8005ac4 <LL_ADC_IsEnabled>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	4323      	orrs	r3, r4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	e008      	b.n	8005cc6 <HAL_ADC_Init+0x142>
 8005cb4:	485b      	ldr	r0, [pc, #364]	; (8005e24 <HAL_ADC_Init+0x2a0>)
 8005cb6:	f7ff ff05 	bl	8005ac4 <LL_ADC_IsEnabled>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d012      	beq.n	8005cf0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a53      	ldr	r2, [pc, #332]	; (8005e1c <HAL_ADC_Init+0x298>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_ADC_Init+0x15a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a51      	ldr	r2, [pc, #324]	; (8005e20 <HAL_ADC_Init+0x29c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_ADC_Init+0x15e>
 8005cde:	4a52      	ldr	r2, [pc, #328]	; (8005e28 <HAL_ADC_Init+0x2a4>)
 8005ce0:	e000      	b.n	8005ce4 <HAL_ADC_Init+0x160>
 8005ce2:	4a52      	ldr	r2, [pc, #328]	; (8005e2c <HAL_ADC_Init+0x2a8>)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7ff fd3c 	bl	8005768 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005cf0:	f7ff fd18 	bl	8005724 <HAL_GetREVID>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d914      	bls.n	8005d28 <HAL_ADC_Init+0x1a4>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	2b10      	cmp	r3, #16
 8005d04:	d110      	bne.n	8005d28 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	7d5b      	ldrb	r3, [r3, #21]
 8005d0a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d10:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005d16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	7f1b      	ldrb	r3, [r3, #28]
 8005d1c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005d1e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d20:	f043 030c 	orr.w	r3, r3, #12
 8005d24:	61bb      	str	r3, [r7, #24]
 8005d26:	e00d      	b.n	8005d44 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	7d5b      	ldrb	r3, [r3, #21]
 8005d2c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d32:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005d38:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	7f1b      	ldrb	r3, [r3, #28]
 8005d3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d40:	4313      	orrs	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	7f1b      	ldrb	r3, [r3, #28]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d106      	bne.n	8005d5a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	045b      	lsls	r3, r3, #17
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	4b2c      	ldr	r3, [pc, #176]	; (8005e30 <HAL_ADC_Init+0x2ac>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	69b9      	ldr	r1, [r7, #24]
 8005d86:	430b      	orrs	r3, r1
 8005d88:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fed2 	bl	8005b38 <LL_ADC_REG_IsConversionOngoing>
 8005d94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fedf 	bl	8005b5e <LL_ADC_INJ_IsConversionOngoing>
 8005da0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d15f      	bne.n	8005e68 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d15c      	bne.n	8005e68 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	7d1b      	ldrb	r3, [r3, #20]
 8005db2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005db8:	4313      	orrs	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <HAL_ADC_Init+0x2b0>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	69b9      	ldr	r1, [r7, #24]
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d130      	bne.n	8005e3c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <HAL_ADC_Init+0x2b4>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dee:	3a01      	subs	r2, #1
 8005df0:	0411      	lsls	r1, r2, #16
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005df6:	4311      	orrs	r1, r2
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005dfc:	4311      	orrs	r1, r2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e02:	430a      	orrs	r2, r1
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	611a      	str	r2, [r3, #16]
 8005e10:	e01c      	b.n	8005e4c <HAL_ADC_Init+0x2c8>
 8005e12:	bf00      	nop
 8005e14:	24000090 	.word	0x24000090
 8005e18:	053e2d63 	.word	0x053e2d63
 8005e1c:	40022000 	.word	0x40022000
 8005e20:	40022100 	.word	0x40022100
 8005e24:	58026000 	.word	0x58026000
 8005e28:	40022300 	.word	0x40022300
 8005e2c:	58026300 	.word	0x58026300
 8005e30:	fff0c003 	.word	0xfff0c003
 8005e34:	ffffbffc 	.word	0xffffbffc
 8005e38:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0201 	bic.w	r2, r2, #1
 8005e4a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fdec 	bl	8006a40 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d10c      	bne.n	8005e8a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	f023 010f 	bic.w	r1, r3, #15
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	1e5a      	subs	r2, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
 8005e88:	e007      	b.n	8005e9a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 020f 	bic.w	r2, r2, #15
 8005e98:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9e:	f023 0303 	bic.w	r3, r3, #3
 8005ea2:	f043 0201 	orr.w	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	655a      	str	r2, [r3, #84]	; 0x54
 8005eaa:	e007      	b.n	8005ebc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb0:	f043 0210 	orr.w	r2, r3, #16
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ebc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3724      	adds	r7, #36	; 0x24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd90      	pop	{r4, r7, pc}
 8005ec6:	bf00      	nop

08005ec8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a55      	ldr	r2, [pc, #340]	; (8006030 <HAL_ADC_Start_DMA+0x168>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_ADC_Start_DMA+0x20>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a54      	ldr	r2, [pc, #336]	; (8006034 <HAL_ADC_Start_DMA+0x16c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d101      	bne.n	8005eec <HAL_ADC_Start_DMA+0x24>
 8005ee8:	4b53      	ldr	r3, [pc, #332]	; (8006038 <HAL_ADC_Start_DMA+0x170>)
 8005eea:	e000      	b.n	8005eee <HAL_ADC_Start_DMA+0x26>
 8005eec:	4b53      	ldr	r3, [pc, #332]	; (800603c <HAL_ADC_Start_DMA+0x174>)
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff fd64 	bl	80059bc <LL_ADC_GetMultimode>
 8005ef4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fe1c 	bl	8005b38 <LL_ADC_REG_IsConversionOngoing>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 808c 	bne.w	8006020 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_ADC_Start_DMA+0x4e>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e087      	b.n	8006026 <HAL_ADC_Start_DMA+0x15e>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d002      	beq.n	8005f30 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b09      	cmp	r3, #9
 8005f2e:	d170      	bne.n	8006012 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fc07 	bl	8006744 <ADC_Enable>
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d163      	bne.n	8006008 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f44:	4b3e      	ldr	r3, [pc, #248]	; (8006040 <HAL_ADC_Start_DMA+0x178>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a37      	ldr	r2, [pc, #220]	; (8006034 <HAL_ADC_Start_DMA+0x16c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d002      	beq.n	8005f60 <HAL_ADC_Start_DMA+0x98>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	e000      	b.n	8005f62 <HAL_ADC_Start_DMA+0x9a>
 8005f60:	4b33      	ldr	r3, [pc, #204]	; (8006030 <HAL_ADC_Start_DMA+0x168>)
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	6812      	ldr	r2, [r2, #0]
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d002      	beq.n	8005f70 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d105      	bne.n	8005f7c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d006      	beq.n	8005f96 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8c:	f023 0206 	bic.w	r2, r3, #6
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	659a      	str	r2, [r3, #88]	; 0x58
 8005f94:	e002      	b.n	8005f9c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa0:	4a28      	ldr	r2, [pc, #160]	; (8006044 <HAL_ADC_Start_DMA+0x17c>)
 8005fa2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa8:	4a27      	ldr	r2, [pc, #156]	; (8006048 <HAL_ADC_Start_DMA+0x180>)
 8005faa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb0:	4a26      	ldr	r2, [pc, #152]	; (800604c <HAL_ADC_Start_DMA+0x184>)
 8005fb2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	221c      	movs	r2, #28
 8005fba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0210 	orr.w	r2, r2, #16
 8005fd2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	f7ff fc89 	bl	80058f6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3340      	adds	r3, #64	; 0x40
 8005fee:	4619      	mov	r1, r3
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f002 f886 	bl	8008104 <HAL_DMA_Start_IT>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff fd85 	bl	8005b10 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006006:	e00d      	b.n	8006024 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8006010:	e008      	b.n	8006024 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800601e:	e001      	b.n	8006024 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006020:	2302      	movs	r3, #2
 8006022:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006024:	7dfb      	ldrb	r3, [r7, #23]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40022000 	.word	0x40022000
 8006034:	40022100 	.word	0x40022100
 8006038:	40022300 	.word	0x40022300
 800603c:	58026300 	.word	0x58026300
 8006040:	fffff0fe 	.word	0xfffff0fe
 8006044:	08006917 	.word	0x08006917
 8006048:	080069ef 	.word	0x080069ef
 800604c:	08006a0b 	.word	0x08006a0b

08006050 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b0a1      	sub	sp, #132	; 0x84
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	4a65      	ldr	r2, [pc, #404]	; (800623c <HAL_ADC_ConfigChannel+0x1b0>)
 80060a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_ADC_ConfigChannel+0x2a>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e32e      	b.n	8006714 <HAL_ADC_ConfigChannel+0x688>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff fd38 	bl	8005b38 <LL_ADC_REG_IsConversionOngoing>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f040 8313 	bne.w	80066f6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	db2c      	blt.n	8006132 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d108      	bne.n	80060f6 <HAL_ADC_ConfigChannel+0x6a>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	0e9b      	lsrs	r3, r3, #26
 80060ea:	f003 031f 	and.w	r3, r3, #31
 80060ee:	2201      	movs	r2, #1
 80060f0:	fa02 f303 	lsl.w	r3, r2, r3
 80060f4:	e016      	b.n	8006124 <HAL_ADC_ConfigChannel+0x98>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060fe:	fa93 f3a3 	rbit	r3, r3
 8006102:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006106:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800610e:	2320      	movs	r3, #32
 8006110:	e003      	b.n	800611a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8006112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006114:	fab3 f383 	clz	r3, r3
 8006118:	b2db      	uxtb	r3, r3
 800611a:	f003 031f 	and.w	r3, r3, #31
 800611e:	2201      	movs	r2, #1
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	69d1      	ldr	r1, [r2, #28]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6812      	ldr	r2, [r2, #0]
 800612e:	430b      	orrs	r3, r1
 8006130:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6859      	ldr	r1, [r3, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	f7ff fbad 	bl	800589e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fcf5 	bl	8005b38 <LL_ADC_REG_IsConversionOngoing>
 800614e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fd02 	bl	8005b5e <LL_ADC_INJ_IsConversionOngoing>
 800615a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800615c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 80b8 	bne.w	80062d4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006166:	2b00      	cmp	r3, #0
 8006168:	f040 80b4 	bne.w	80062d4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	6819      	ldr	r1, [r3, #0]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	461a      	mov	r2, r3
 800617a:	f7ff fbcf 	bl	800591c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800617e:	4b30      	ldr	r3, [pc, #192]	; (8006240 <HAL_ADC_ConfigChannel+0x1b4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800618a:	d10b      	bne.n	80061a4 <HAL_ADC_ConfigChannel+0x118>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	695a      	ldr	r2, [r3, #20]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	089b      	lsrs	r3, r3, #2
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	e01d      	b.n	80061e0 <HAL_ADC_ConfigChannel+0x154>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10b      	bne.n	80061ca <HAL_ADC_ConfigChannel+0x13e>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695a      	ldr	r2, [r3, #20]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	089b      	lsrs	r3, r3, #2
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	e00a      	b.n	80061e0 <HAL_ADC_ConfigChannel+0x154>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	695a      	ldr	r2, [r3, #20]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	089b      	lsrs	r3, r3, #2
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d02c      	beq.n	8006244 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6919      	ldr	r1, [r3, #16]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f8:	f7ff faea 	bl	80057d0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6818      	ldr	r0, [r3, #0]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	6919      	ldr	r1, [r3, #16]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	7e5b      	ldrb	r3, [r3, #25]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d102      	bne.n	8006212 <HAL_ADC_ConfigChannel+0x186>
 800620c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006210:	e000      	b.n	8006214 <HAL_ADC_ConfigChannel+0x188>
 8006212:	2300      	movs	r3, #0
 8006214:	461a      	mov	r2, r3
 8006216:	f7ff fb14 	bl	8005842 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6818      	ldr	r0, [r3, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	6919      	ldr	r1, [r3, #16]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	7e1b      	ldrb	r3, [r3, #24]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d102      	bne.n	8006230 <HAL_ADC_ConfigChannel+0x1a4>
 800622a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800622e:	e000      	b.n	8006232 <HAL_ADC_ConfigChannel+0x1a6>
 8006230:	2300      	movs	r3, #0
 8006232:	461a      	mov	r2, r3
 8006234:	f7ff faec 	bl	8005810 <LL_ADC_SetDataRightShift>
 8006238:	e04c      	b.n	80062d4 <HAL_ADC_ConfigChannel+0x248>
 800623a:	bf00      	nop
 800623c:	47ff0000 	.word	0x47ff0000
 8006240:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	069b      	lsls	r3, r3, #26
 8006254:	429a      	cmp	r2, r3
 8006256:	d107      	bne.n	8006268 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006266:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800626e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	069b      	lsls	r3, r3, #26
 8006278:	429a      	cmp	r2, r3
 800627a:	d107      	bne.n	800628c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800628a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006292:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	069b      	lsls	r3, r3, #26
 800629c:	429a      	cmp	r2, r3
 800629e:	d107      	bne.n	80062b0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062ae:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	069b      	lsls	r3, r3, #26
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d107      	bne.n	80062d4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062d2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fbf3 	bl	8005ac4 <LL_ADC_IsEnabled>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f040 8211 	bne.w	8006708 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6819      	ldr	r1, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	461a      	mov	r2, r3
 80062f4:	f7ff fb3e 	bl	8005974 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	4aa1      	ldr	r2, [pc, #644]	; (8006584 <HAL_ADC_ConfigChannel+0x4f8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	f040 812e 	bne.w	8006560 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10b      	bne.n	800632c <HAL_ADC_ConfigChannel+0x2a0>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	0e9b      	lsrs	r3, r3, #26
 800631a:	3301      	adds	r3, #1
 800631c:	f003 031f 	and.w	r3, r3, #31
 8006320:	2b09      	cmp	r3, #9
 8006322:	bf94      	ite	ls
 8006324:	2301      	movls	r3, #1
 8006326:	2300      	movhi	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	e019      	b.n	8006360 <HAL_ADC_ConfigChannel+0x2d4>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006334:	fa93 f3a3 	rbit	r3, r3
 8006338:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800633a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800633c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800633e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006344:	2320      	movs	r3, #32
 8006346:	e003      	b.n	8006350 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800634a:	fab3 f383 	clz	r3, r3
 800634e:	b2db      	uxtb	r3, r3
 8006350:	3301      	adds	r3, #1
 8006352:	f003 031f 	and.w	r3, r3, #31
 8006356:	2b09      	cmp	r3, #9
 8006358:	bf94      	ite	ls
 800635a:	2301      	movls	r3, #1
 800635c:	2300      	movhi	r3, #0
 800635e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006360:	2b00      	cmp	r3, #0
 8006362:	d079      	beq.n	8006458 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800636c:	2b00      	cmp	r3, #0
 800636e:	d107      	bne.n	8006380 <HAL_ADC_ConfigChannel+0x2f4>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	0e9b      	lsrs	r3, r3, #26
 8006376:	3301      	adds	r3, #1
 8006378:	069b      	lsls	r3, r3, #26
 800637a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800637e:	e015      	b.n	80063ac <HAL_ADC_ConfigChannel+0x320>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006388:	fa93 f3a3 	rbit	r3, r3
 800638c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800638e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006390:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006398:	2320      	movs	r3, #32
 800639a:	e003      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800639c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800639e:	fab3 f383 	clz	r3, r3
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	3301      	adds	r3, #1
 80063a6:	069b      	lsls	r3, r3, #26
 80063a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d109      	bne.n	80063cc <HAL_ADC_ConfigChannel+0x340>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	0e9b      	lsrs	r3, r3, #26
 80063be:	3301      	adds	r3, #1
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2101      	movs	r1, #1
 80063c6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ca:	e017      	b.n	80063fc <HAL_ADC_ConfigChannel+0x370>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d4:	fa93 f3a3 	rbit	r3, r3
 80063d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80063da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80063de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80063e4:	2320      	movs	r3, #32
 80063e6:	e003      	b.n	80063f0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80063e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ea:	fab3 f383 	clz	r3, r3
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	3301      	adds	r3, #1
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	2101      	movs	r1, #1
 80063f8:	fa01 f303 	lsl.w	r3, r1, r3
 80063fc:	ea42 0103 	orr.w	r1, r2, r3
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <HAL_ADC_ConfigChannel+0x396>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	0e9b      	lsrs	r3, r3, #26
 8006412:	3301      	adds	r3, #1
 8006414:	f003 021f 	and.w	r2, r3, #31
 8006418:	4613      	mov	r3, r2
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	4413      	add	r3, r2
 800641e:	051b      	lsls	r3, r3, #20
 8006420:	e018      	b.n	8006454 <HAL_ADC_ConfigChannel+0x3c8>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642a:	fa93 f3a3 	rbit	r3, r3
 800642e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800643a:	2320      	movs	r3, #32
 800643c:	e003      	b.n	8006446 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	fab3 f383 	clz	r3, r3
 8006444:	b2db      	uxtb	r3, r3
 8006446:	3301      	adds	r3, #1
 8006448:	f003 021f 	and.w	r2, r3, #31
 800644c:	4613      	mov	r3, r2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	4413      	add	r3, r2
 8006452:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006454:	430b      	orrs	r3, r1
 8006456:	e07e      	b.n	8006556 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006460:	2b00      	cmp	r3, #0
 8006462:	d107      	bne.n	8006474 <HAL_ADC_ConfigChannel+0x3e8>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	0e9b      	lsrs	r3, r3, #26
 800646a:	3301      	adds	r3, #1
 800646c:	069b      	lsls	r3, r3, #26
 800646e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006472:	e015      	b.n	80064a0 <HAL_ADC_ConfigChannel+0x414>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	fa93 f3a3 	rbit	r3, r3
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800648c:	2320      	movs	r3, #32
 800648e:	e003      	b.n	8006498 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	fab3 f383 	clz	r3, r3
 8006496:	b2db      	uxtb	r3, r3
 8006498:	3301      	adds	r3, #1
 800649a:	069b      	lsls	r3, r3, #26
 800649c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d109      	bne.n	80064c0 <HAL_ADC_ConfigChannel+0x434>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	0e9b      	lsrs	r3, r3, #26
 80064b2:	3301      	adds	r3, #1
 80064b4:	f003 031f 	and.w	r3, r3, #31
 80064b8:	2101      	movs	r1, #1
 80064ba:	fa01 f303 	lsl.w	r3, r1, r3
 80064be:	e017      	b.n	80064f0 <HAL_ADC_ConfigChannel+0x464>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	fa93 f3a3 	rbit	r3, r3
 80064cc:	61bb      	str	r3, [r7, #24]
  return result;
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80064d8:	2320      	movs	r3, #32
 80064da:	e003      	b.n	80064e4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	fab3 f383 	clz	r3, r3
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	3301      	adds	r3, #1
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	2101      	movs	r1, #1
 80064ec:	fa01 f303 	lsl.w	r3, r1, r3
 80064f0:	ea42 0103 	orr.w	r1, r2, r3
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10d      	bne.n	800651c <HAL_ADC_ConfigChannel+0x490>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	0e9b      	lsrs	r3, r3, #26
 8006506:	3301      	adds	r3, #1
 8006508:	f003 021f 	and.w	r2, r3, #31
 800650c:	4613      	mov	r3, r2
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	4413      	add	r3, r2
 8006512:	3b1e      	subs	r3, #30
 8006514:	051b      	lsls	r3, r3, #20
 8006516:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800651a:	e01b      	b.n	8006554 <HAL_ADC_ConfigChannel+0x4c8>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	fa93 f3a3 	rbit	r3, r3
 8006528:	60fb      	str	r3, [r7, #12]
  return result;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006534:	2320      	movs	r3, #32
 8006536:	e003      	b.n	8006540 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	fab3 f383 	clz	r3, r3
 800653e:	b2db      	uxtb	r3, r3
 8006540:	3301      	adds	r3, #1
 8006542:	f003 021f 	and.w	r2, r3, #31
 8006546:	4613      	mov	r3, r2
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	4413      	add	r3, r2
 800654c:	3b1e      	subs	r3, #30
 800654e:	051b      	lsls	r3, r3, #20
 8006550:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006554:	430b      	orrs	r3, r1
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	6892      	ldr	r2, [r2, #8]
 800655a:	4619      	mov	r1, r3
 800655c:	f7ff f9de 	bl	800591c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f280 80cf 	bge.w	8006708 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a06      	ldr	r2, [pc, #24]	; (8006588 <HAL_ADC_ConfigChannel+0x4fc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d004      	beq.n	800657e <HAL_ADC_ConfigChannel+0x4f2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a04      	ldr	r2, [pc, #16]	; (800658c <HAL_ADC_ConfigChannel+0x500>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d10a      	bne.n	8006594 <HAL_ADC_ConfigChannel+0x508>
 800657e:	4b04      	ldr	r3, [pc, #16]	; (8006590 <HAL_ADC_ConfigChannel+0x504>)
 8006580:	e009      	b.n	8006596 <HAL_ADC_ConfigChannel+0x50a>
 8006582:	bf00      	nop
 8006584:	47ff0000 	.word	0x47ff0000
 8006588:	40022000 	.word	0x40022000
 800658c:	40022100 	.word	0x40022100
 8006590:	40022300 	.word	0x40022300
 8006594:	4b61      	ldr	r3, [pc, #388]	; (800671c <HAL_ADC_ConfigChannel+0x690>)
 8006596:	4618      	mov	r0, r3
 8006598:	f7ff f90c 	bl	80057b4 <LL_ADC_GetCommonPathInternalCh>
 800659c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a5f      	ldr	r2, [pc, #380]	; (8006720 <HAL_ADC_ConfigChannel+0x694>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d004      	beq.n	80065b2 <HAL_ADC_ConfigChannel+0x526>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a5d      	ldr	r2, [pc, #372]	; (8006724 <HAL_ADC_ConfigChannel+0x698>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d10e      	bne.n	80065d0 <HAL_ADC_ConfigChannel+0x544>
 80065b2:	485b      	ldr	r0, [pc, #364]	; (8006720 <HAL_ADC_ConfigChannel+0x694>)
 80065b4:	f7ff fa86 	bl	8005ac4 <LL_ADC_IsEnabled>
 80065b8:	4604      	mov	r4, r0
 80065ba:	485a      	ldr	r0, [pc, #360]	; (8006724 <HAL_ADC_ConfigChannel+0x698>)
 80065bc:	f7ff fa82 	bl	8005ac4 <LL_ADC_IsEnabled>
 80065c0:	4603      	mov	r3, r0
 80065c2:	4323      	orrs	r3, r4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bf0c      	ite	eq
 80065c8:	2301      	moveq	r3, #1
 80065ca:	2300      	movne	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	e008      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x556>
 80065d0:	4855      	ldr	r0, [pc, #340]	; (8006728 <HAL_ADC_ConfigChannel+0x69c>)
 80065d2:	f7ff fa77 	bl	8005ac4 <LL_ADC_IsEnabled>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bf0c      	ite	eq
 80065dc:	2301      	moveq	r3, #1
 80065de:	2300      	movne	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d07d      	beq.n	80066e2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a50      	ldr	r2, [pc, #320]	; (800672c <HAL_ADC_ConfigChannel+0x6a0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d130      	bne.n	8006652 <HAL_ADC_ConfigChannel+0x5c6>
 80065f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d12b      	bne.n	8006652 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a4a      	ldr	r2, [pc, #296]	; (8006728 <HAL_ADC_ConfigChannel+0x69c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	f040 8081 	bne.w	8006708 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a45      	ldr	r2, [pc, #276]	; (8006720 <HAL_ADC_ConfigChannel+0x694>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d004      	beq.n	800661a <HAL_ADC_ConfigChannel+0x58e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a43      	ldr	r2, [pc, #268]	; (8006724 <HAL_ADC_ConfigChannel+0x698>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d101      	bne.n	800661e <HAL_ADC_ConfigChannel+0x592>
 800661a:	4a45      	ldr	r2, [pc, #276]	; (8006730 <HAL_ADC_ConfigChannel+0x6a4>)
 800661c:	e000      	b.n	8006620 <HAL_ADC_ConfigChannel+0x594>
 800661e:	4a3f      	ldr	r2, [pc, #252]	; (800671c <HAL_ADC_ConfigChannel+0x690>)
 8006620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006622:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f7ff f8b0 	bl	800578e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800662e:	4b41      	ldr	r3, [pc, #260]	; (8006734 <HAL_ADC_ConfigChannel+0x6a8>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	099b      	lsrs	r3, r3, #6
 8006634:	4a40      	ldr	r2, [pc, #256]	; (8006738 <HAL_ADC_ConfigChannel+0x6ac>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	099b      	lsrs	r3, r3, #6
 800663c:	3301      	adds	r3, #1
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006642:	e002      	b.n	800664a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	3b01      	subs	r3, #1
 8006648:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f9      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006650:	e05a      	b.n	8006708 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a39      	ldr	r2, [pc, #228]	; (800673c <HAL_ADC_ConfigChannel+0x6b0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d11e      	bne.n	800669a <HAL_ADC_ConfigChannel+0x60e>
 800665c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d119      	bne.n	800669a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a2f      	ldr	r2, [pc, #188]	; (8006728 <HAL_ADC_ConfigChannel+0x69c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d14b      	bne.n	8006708 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a2a      	ldr	r2, [pc, #168]	; (8006720 <HAL_ADC_ConfigChannel+0x694>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <HAL_ADC_ConfigChannel+0x5f8>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a29      	ldr	r2, [pc, #164]	; (8006724 <HAL_ADC_ConfigChannel+0x698>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d101      	bne.n	8006688 <HAL_ADC_ConfigChannel+0x5fc>
 8006684:	4a2a      	ldr	r2, [pc, #168]	; (8006730 <HAL_ADC_ConfigChannel+0x6a4>)
 8006686:	e000      	b.n	800668a <HAL_ADC_ConfigChannel+0x5fe>
 8006688:	4a24      	ldr	r2, [pc, #144]	; (800671c <HAL_ADC_ConfigChannel+0x690>)
 800668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006690:	4619      	mov	r1, r3
 8006692:	4610      	mov	r0, r2
 8006694:	f7ff f87b 	bl	800578e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006698:	e036      	b.n	8006708 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a28      	ldr	r2, [pc, #160]	; (8006740 <HAL_ADC_ConfigChannel+0x6b4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d131      	bne.n	8006708 <HAL_ADC_ConfigChannel+0x67c>
 80066a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d12c      	bne.n	8006708 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1d      	ldr	r2, [pc, #116]	; (8006728 <HAL_ADC_ConfigChannel+0x69c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d127      	bne.n	8006708 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a18      	ldr	r2, [pc, #96]	; (8006720 <HAL_ADC_ConfigChannel+0x694>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_ADC_ConfigChannel+0x640>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a17      	ldr	r2, [pc, #92]	; (8006724 <HAL_ADC_ConfigChannel+0x698>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d101      	bne.n	80066d0 <HAL_ADC_ConfigChannel+0x644>
 80066cc:	4a18      	ldr	r2, [pc, #96]	; (8006730 <HAL_ADC_ConfigChannel+0x6a4>)
 80066ce:	e000      	b.n	80066d2 <HAL_ADC_ConfigChannel+0x646>
 80066d0:	4a12      	ldr	r2, [pc, #72]	; (800671c <HAL_ADC_ConfigChannel+0x690>)
 80066d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f7ff f857 	bl	800578e <LL_ADC_SetCommonPathInternalCh>
 80066e0:	e012      	b.n	8006708 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e6:	f043 0220 	orr.w	r2, r3, #32
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80066f4:	e008      	b.n	8006708 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006710:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006714:	4618      	mov	r0, r3
 8006716:	3784      	adds	r7, #132	; 0x84
 8006718:	46bd      	mov	sp, r7
 800671a:	bd90      	pop	{r4, r7, pc}
 800671c:	58026300 	.word	0x58026300
 8006720:	40022000 	.word	0x40022000
 8006724:	40022100 	.word	0x40022100
 8006728:	58026000 	.word	0x58026000
 800672c:	cb840000 	.word	0xcb840000
 8006730:	40022300 	.word	0x40022300
 8006734:	24000090 	.word	0x24000090
 8006738:	053e2d63 	.word	0x053e2d63
 800673c:	c7520000 	.word	0xc7520000
 8006740:	cfb80000 	.word	0xcfb80000

08006744 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff f9b7 	bl	8005ac4 <LL_ADC_IsEnabled>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d16e      	bne.n	800683a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	4b38      	ldr	r3, [pc, #224]	; (8006844 <ADC_Enable+0x100>)
 8006764:	4013      	ands	r3, r2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00d      	beq.n	8006786 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	f043 0210 	orr.w	r2, r3, #16
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677a:	f043 0201 	orr.w	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e05a      	b.n	800683c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff f972 	bl	8005a74 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006790:	f7fe ffbc 	bl	800570c <HAL_GetTick>
 8006794:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a2b      	ldr	r2, [pc, #172]	; (8006848 <ADC_Enable+0x104>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <ADC_Enable+0x66>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a29      	ldr	r2, [pc, #164]	; (800684c <ADC_Enable+0x108>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <ADC_Enable+0x6a>
 80067aa:	4b29      	ldr	r3, [pc, #164]	; (8006850 <ADC_Enable+0x10c>)
 80067ac:	e000      	b.n	80067b0 <ADC_Enable+0x6c>
 80067ae:	4b29      	ldr	r3, [pc, #164]	; (8006854 <ADC_Enable+0x110>)
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff f903 	bl	80059bc <LL_ADC_GetMultimode>
 80067b6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a23      	ldr	r2, [pc, #140]	; (800684c <ADC_Enable+0x108>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d002      	beq.n	80067c8 <ADC_Enable+0x84>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	e000      	b.n	80067ca <ADC_Enable+0x86>
 80067c8:	4b1f      	ldr	r3, [pc, #124]	; (8006848 <ADC_Enable+0x104>)
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d02c      	beq.n	800682c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d130      	bne.n	800683a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067d8:	e028      	b.n	800682c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff f970 	bl	8005ac4 <LL_ADC_IsEnabled>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d104      	bne.n	80067f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff f940 	bl	8005a74 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80067f4:	f7fe ff8a 	bl	800570c <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d914      	bls.n	800682c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b01      	cmp	r3, #1
 800680e:	d00d      	beq.n	800682c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	f043 0210 	orr.w	r2, r3, #16
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006820:	f043 0201 	orr.w	r2, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e007      	b.n	800683c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b01      	cmp	r3, #1
 8006838:	d1cf      	bne.n	80067da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	8000003f 	.word	0x8000003f
 8006848:	40022000 	.word	0x40022000
 800684c:	40022100 	.word	0x40022100
 8006850:	40022300 	.word	0x40022300
 8006854:	58026300 	.word	0x58026300

08006858 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff f940 	bl	8005aea <LL_ADC_IsDisableOngoing>
 800686a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff f927 	bl	8005ac4 <LL_ADC_IsEnabled>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d047      	beq.n	800690c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d144      	bne.n	800690c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 030d 	and.w	r3, r3, #13
 800688c:	2b01      	cmp	r3, #1
 800688e:	d10c      	bne.n	80068aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4618      	mov	r0, r3
 8006896:	f7ff f901 	bl	8005a9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2203      	movs	r2, #3
 80068a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80068a2:	f7fe ff33 	bl	800570c <HAL_GetTick>
 80068a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80068a8:	e029      	b.n	80068fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ae:	f043 0210 	orr.w	r2, r3, #16
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ba:	f043 0201 	orr.w	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e023      	b.n	800690e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80068c6:	f7fe ff21 	bl	800570c <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d914      	bls.n	80068fe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00d      	beq.n	80068fe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	f043 0210 	orr.w	r2, r3, #16
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f2:	f043 0201 	orr.w	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e007      	b.n	800690e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1dc      	bne.n	80068c6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006928:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800692c:	2b00      	cmp	r3, #0
 800692e:	d14b      	bne.n	80069c8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006934:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d021      	beq.n	800698e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe ff92 	bl	8005878 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d032      	beq.n	80069c0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d12b      	bne.n	80069c0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11f      	bne.n	80069c0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006984:	f043 0201 	orr.w	r2, r3, #1
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	655a      	str	r2, [r3, #84]	; 0x54
 800698c:	e018      	b.n	80069c0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f003 0303 	and.w	r3, r3, #3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d111      	bne.n	80069c0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b8:	f043 0201 	orr.w	r2, r3, #1
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff fb45 	bl	8006050 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80069c6:	e00e      	b.n	80069e6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f7ff fb4f 	bl	8006078 <HAL_ADC_ErrorCallback>
}
 80069da:	e004      	b.n	80069e6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
}
 80069e6:	bf00      	nop
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff fb31 	bl	8006064 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a28:	f043 0204 	orr.w	r2, r3, #4
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff fb21 	bl	8006078 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a7a      	ldr	r2, [pc, #488]	; (8006c38 <ADC_ConfigureBoostMode+0x1f8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d004      	beq.n	8006a5c <ADC_ConfigureBoostMode+0x1c>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a79      	ldr	r2, [pc, #484]	; (8006c3c <ADC_ConfigureBoostMode+0x1fc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d109      	bne.n	8006a70 <ADC_ConfigureBoostMode+0x30>
 8006a5c:	4b78      	ldr	r3, [pc, #480]	; (8006c40 <ADC_ConfigureBoostMode+0x200>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bf14      	ite	ne
 8006a68:	2301      	movne	r3, #1
 8006a6a:	2300      	moveq	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	e008      	b.n	8006a82 <ADC_ConfigureBoostMode+0x42>
 8006a70:	4b74      	ldr	r3, [pc, #464]	; (8006c44 <ADC_ConfigureBoostMode+0x204>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bf14      	ite	ne
 8006a7c:	2301      	movne	r3, #1
 8006a7e:	2300      	moveq	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01c      	beq.n	8006ac0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006a86:	f007 fe57 	bl	800e738 <HAL_RCC_GetHCLKFreq>
 8006a8a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a94:	d010      	beq.n	8006ab8 <ADC_ConfigureBoostMode+0x78>
 8006a96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a9a:	d873      	bhi.n	8006b84 <ADC_ConfigureBoostMode+0x144>
 8006a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa0:	d002      	beq.n	8006aa8 <ADC_ConfigureBoostMode+0x68>
 8006aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aa6:	d16d      	bne.n	8006b84 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	0c1b      	lsrs	r3, r3, #16
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab4:	60fb      	str	r3, [r7, #12]
        break;
 8006ab6:	e068      	b.n	8006b8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	089b      	lsrs	r3, r3, #2
 8006abc:	60fb      	str	r3, [r7, #12]
        break;
 8006abe:	e064      	b.n	8006b8a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006ac0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006ac4:	f04f 0100 	mov.w	r1, #0
 8006ac8:	f009 f8de 	bl	800fc88 <HAL_RCCEx_GetPeriphCLKFreq>
 8006acc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006ad6:	d051      	beq.n	8006b7c <ADC_ConfigureBoostMode+0x13c>
 8006ad8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006adc:	d854      	bhi.n	8006b88 <ADC_ConfigureBoostMode+0x148>
 8006ade:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006ae2:	d047      	beq.n	8006b74 <ADC_ConfigureBoostMode+0x134>
 8006ae4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006ae8:	d84e      	bhi.n	8006b88 <ADC_ConfigureBoostMode+0x148>
 8006aea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006aee:	d03d      	beq.n	8006b6c <ADC_ConfigureBoostMode+0x12c>
 8006af0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006af4:	d848      	bhi.n	8006b88 <ADC_ConfigureBoostMode+0x148>
 8006af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006afa:	d033      	beq.n	8006b64 <ADC_ConfigureBoostMode+0x124>
 8006afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b00:	d842      	bhi.n	8006b88 <ADC_ConfigureBoostMode+0x148>
 8006b02:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006b06:	d029      	beq.n	8006b5c <ADC_ConfigureBoostMode+0x11c>
 8006b08:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006b0c:	d83c      	bhi.n	8006b88 <ADC_ConfigureBoostMode+0x148>
 8006b0e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006b12:	d01a      	beq.n	8006b4a <ADC_ConfigureBoostMode+0x10a>
 8006b14:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006b18:	d836      	bhi.n	8006b88 <ADC_ConfigureBoostMode+0x148>
 8006b1a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006b1e:	d014      	beq.n	8006b4a <ADC_ConfigureBoostMode+0x10a>
 8006b20:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006b24:	d830      	bhi.n	8006b88 <ADC_ConfigureBoostMode+0x148>
 8006b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b2a:	d00e      	beq.n	8006b4a <ADC_ConfigureBoostMode+0x10a>
 8006b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b30:	d82a      	bhi.n	8006b88 <ADC_ConfigureBoostMode+0x148>
 8006b32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b36:	d008      	beq.n	8006b4a <ADC_ConfigureBoostMode+0x10a>
 8006b38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b3c:	d824      	bhi.n	8006b88 <ADC_ConfigureBoostMode+0x148>
 8006b3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b42:	d002      	beq.n	8006b4a <ADC_ConfigureBoostMode+0x10a>
 8006b44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b48:	d11e      	bne.n	8006b88 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	0c9b      	lsrs	r3, r3, #18
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b58:	60fb      	str	r3, [r7, #12]
        break;
 8006b5a:	e016      	b.n	8006b8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	091b      	lsrs	r3, r3, #4
 8006b60:	60fb      	str	r3, [r7, #12]
        break;
 8006b62:	e012      	b.n	8006b8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	60fb      	str	r3, [r7, #12]
        break;
 8006b6a:	e00e      	b.n	8006b8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	099b      	lsrs	r3, r3, #6
 8006b70:	60fb      	str	r3, [r7, #12]
        break;
 8006b72:	e00a      	b.n	8006b8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	09db      	lsrs	r3, r3, #7
 8006b78:	60fb      	str	r3, [r7, #12]
        break;
 8006b7a:	e006      	b.n	8006b8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	0a1b      	lsrs	r3, r3, #8
 8006b80:	60fb      	str	r3, [r7, #12]
        break;
 8006b82:	e002      	b.n	8006b8a <ADC_ConfigureBoostMode+0x14a>
        break;
 8006b84:	bf00      	nop
 8006b86:	e000      	b.n	8006b8a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006b88:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006b8a:	f7fe fdcb 	bl	8005724 <HAL_GetREVID>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d815      	bhi.n	8006bc4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4a2b      	ldr	r2, [pc, #172]	; (8006c48 <ADC_ConfigureBoostMode+0x208>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d908      	bls.n	8006bb2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006bb0:	e03e      	b.n	8006c30 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bc0:	609a      	str	r2, [r3, #8]
}
 8006bc2:	e035      	b.n	8006c30 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	; (8006c4c <ADC_ConfigureBoostMode+0x20c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d808      	bhi.n	8006be4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006be0:	609a      	str	r2, [r3, #8]
}
 8006be2:	e025      	b.n	8006c30 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4a1a      	ldr	r2, [pc, #104]	; (8006c50 <ADC_ConfigureBoostMode+0x210>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d80a      	bhi.n	8006c02 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bfe:	609a      	str	r2, [r3, #8]
}
 8006c00:	e016      	b.n	8006c30 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4a13      	ldr	r2, [pc, #76]	; (8006c54 <ADC_ConfigureBoostMode+0x214>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d80a      	bhi.n	8006c20 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c1c:	609a      	str	r2, [r3, #8]
}
 8006c1e:	e007      	b.n	8006c30 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006c2e:	609a      	str	r2, [r3, #8]
}
 8006c30:	bf00      	nop
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40022000 	.word	0x40022000
 8006c3c:	40022100 	.word	0x40022100
 8006c40:	40022300 	.word	0x40022300
 8006c44:	58026300 	.word	0x58026300
 8006c48:	01312d00 	.word	0x01312d00
 8006c4c:	005f5e10 	.word	0x005f5e10
 8006c50:	00bebc20 	.word	0x00bebc20
 8006c54:	017d7840 	.word	0x017d7840

08006c58 <LL_ADC_IsEnabled>:
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <LL_ADC_IsEnabled+0x18>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e000      	b.n	8006c72 <LL_ADC_IsEnabled+0x1a>
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <LL_ADC_StartCalibration>:
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	4b09      	ldr	r3, [pc, #36]	; (8006cb8 <LL_ADC_StartCalibration+0x38>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	609a      	str	r2, [r3, #8]
}
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	3ffeffc0 	.word	0x3ffeffc0

08006cbc <LL_ADC_IsCalibrationOnGoing>:
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd0:	d101      	bne.n	8006cd6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <LL_ADC_REG_IsConversionOngoing>:
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d101      	bne.n	8006cfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d101      	bne.n	8006d2a <HAL_ADCEx_Calibration_Start+0x1e>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e04c      	b.n	8006dc4 <HAL_ADCEx_Calibration_Start+0xb8>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f7ff fd90 	bl	8006858 <ADC_Disable>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d135      	bne.n	8006dae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d46:	4b21      	ldr	r3, [pc, #132]	; (8006dcc <HAL_ADCEx_Calibration_Start+0xc0>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	f043 0202 	orr.w	r2, r3, #2
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff ff90 	bl	8006c80 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006d60:	e014      	b.n	8006d8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3301      	adds	r3, #1
 8006d66:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4a19      	ldr	r2, [pc, #100]	; (8006dd0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d30d      	bcc.n	8006d8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d74:	f023 0312 	bic.w	r3, r3, #18
 8006d78:	f043 0210 	orr.w	r2, r3, #16
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e01b      	b.n	8006dc4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff ff93 	bl	8006cbc <LL_ADC_IsCalibrationOnGoing>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e2      	bne.n	8006d62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	f043 0201 	orr.w	r2, r3, #1
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	655a      	str	r2, [r3, #84]	; 0x54
 8006dac:	e005      	b.n	8006dba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db2:	f043 0210 	orr.w	r2, r3, #16
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	ffffeefd 	.word	0xffffeefd
 8006dd0:	25c3f800 	.word	0x25c3f800

08006dd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006dd4:	b590      	push	{r4, r7, lr}
 8006dd6:	b09f      	sub	sp, #124	; 0x7c
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d101      	bne.n	8006df2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006dee:	2302      	movs	r3, #2
 8006df0:	e0be      	b.n	8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a5c      	ldr	r2, [pc, #368]	; (8006f78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d102      	bne.n	8006e12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006e0c:	4b5b      	ldr	r3, [pc, #364]	; (8006f7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e0e:	60bb      	str	r3, [r7, #8]
 8006e10:	e001      	b.n	8006e16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006e12:	2300      	movs	r3, #0
 8006e14:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10b      	bne.n	8006e34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e20:	f043 0220 	orr.w	r2, r3, #32
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e09d      	b.n	8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff ff54 	bl	8006ce4 <LL_ADC_REG_IsConversionOngoing>
 8006e3c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff ff4e 	bl	8006ce4 <LL_ADC_REG_IsConversionOngoing>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d17f      	bne.n	8006f4e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d17c      	bne.n	8006f4e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a47      	ldr	r2, [pc, #284]	; (8006f78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d004      	beq.n	8006e68 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a46      	ldr	r2, [pc, #280]	; (8006f7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d101      	bne.n	8006e6c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006e68:	4b45      	ldr	r3, [pc, #276]	; (8006f80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e6a:	e000      	b.n	8006e6e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006e6c:	4b45      	ldr	r3, [pc, #276]	; (8006f84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e6e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d039      	beq.n	8006eec <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e88:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a3a      	ldr	r2, [pc, #232]	; (8006f78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d004      	beq.n	8006e9e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a38      	ldr	r2, [pc, #224]	; (8006f7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d10e      	bne.n	8006ebc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006e9e:	4836      	ldr	r0, [pc, #216]	; (8006f78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ea0:	f7ff feda 	bl	8006c58 <LL_ADC_IsEnabled>
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	4835      	ldr	r0, [pc, #212]	; (8006f7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006ea8:	f7ff fed6 	bl	8006c58 <LL_ADC_IsEnabled>
 8006eac:	4603      	mov	r3, r0
 8006eae:	4323      	orrs	r3, r4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2301      	moveq	r3, #1
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	e008      	b.n	8006ece <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006ebc:	4832      	ldr	r0, [pc, #200]	; (8006f88 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006ebe:	f7ff fecb 	bl	8006c58 <LL_ADC_IsEnabled>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bf0c      	ite	eq
 8006ec8:	2301      	moveq	r3, #1
 8006eca:	2300      	movne	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d047      	beq.n	8006f62 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	4b2d      	ldr	r3, [pc, #180]	; (8006f8c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006ed8:	4013      	ands	r3, r2
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	6811      	ldr	r1, [r2, #0]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	6892      	ldr	r2, [r2, #8]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006eea:	e03a      	b.n	8006f62 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a1e      	ldr	r2, [pc, #120]	; (8006f78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d004      	beq.n	8006f0c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1d      	ldr	r2, [pc, #116]	; (8006f7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d10e      	bne.n	8006f2a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006f0c:	481a      	ldr	r0, [pc, #104]	; (8006f78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f0e:	f7ff fea3 	bl	8006c58 <LL_ADC_IsEnabled>
 8006f12:	4604      	mov	r4, r0
 8006f14:	4819      	ldr	r0, [pc, #100]	; (8006f7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f16:	f7ff fe9f 	bl	8006c58 <LL_ADC_IsEnabled>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	4323      	orrs	r3, r4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bf0c      	ite	eq
 8006f22:	2301      	moveq	r3, #1
 8006f24:	2300      	movne	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	e008      	b.n	8006f3c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006f2a:	4817      	ldr	r0, [pc, #92]	; (8006f88 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006f2c:	f7ff fe94 	bl	8006c58 <LL_ADC_IsEnabled>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bf0c      	ite	eq
 8006f36:	2301      	moveq	r3, #1
 8006f38:	2300      	movne	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d010      	beq.n	8006f62 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006f46:	4013      	ands	r3, r2
 8006f48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f4a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f4c:	e009      	b.n	8006f62 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f52:	f043 0220 	orr.w	r2, r3, #32
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006f60:	e000      	b.n	8006f64 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f62:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006f6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	377c      	adds	r7, #124	; 0x7c
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd90      	pop	{r4, r7, pc}
 8006f78:	40022000 	.word	0x40022000
 8006f7c:	40022100 	.word	0x40022100
 8006f80:	40022300 	.word	0x40022300
 8006f84:	58026300 	.word	0x58026300
 8006f88:	58026000 	.word	0x58026000
 8006f8c:	fffff0e0 	.word	0xfffff0e0

08006f90 <__NVIC_SetPriorityGrouping>:
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fa0:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fac:	4013      	ands	r3, r2
 8006fae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006fb8:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fbe:	4a04      	ldr	r2, [pc, #16]	; (8006fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	60d3      	str	r3, [r2, #12]
}
 8006fc4:	bf00      	nop
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	e000ed00 	.word	0xe000ed00
 8006fd4:	05fa0000 	.word	0x05fa0000

08006fd8 <__NVIC_GetPriorityGrouping>:
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fdc:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	0a1b      	lsrs	r3, r3, #8
 8006fe2:	f003 0307 	and.w	r3, r3, #7
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	e000ed00 	.word	0xe000ed00

08006ff4 <__NVIC_EnableIRQ>:
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007002:	2b00      	cmp	r3, #0
 8007004:	db0b      	blt.n	800701e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007006:	88fb      	ldrh	r3, [r7, #6]
 8007008:	f003 021f 	and.w	r2, r3, #31
 800700c:	4907      	ldr	r1, [pc, #28]	; (800702c <__NVIC_EnableIRQ+0x38>)
 800700e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	2001      	movs	r0, #1
 8007016:	fa00 f202 	lsl.w	r2, r0, r2
 800701a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	e000e100 	.word	0xe000e100

08007030 <__NVIC_SetPriority>:
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800703c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007040:	2b00      	cmp	r3, #0
 8007042:	db0a      	blt.n	800705a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	b2da      	uxtb	r2, r3
 8007048:	490c      	ldr	r1, [pc, #48]	; (800707c <__NVIC_SetPriority+0x4c>)
 800704a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800704e:	0112      	lsls	r2, r2, #4
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	440b      	add	r3, r1
 8007054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007058:	e00a      	b.n	8007070 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	4908      	ldr	r1, [pc, #32]	; (8007080 <__NVIC_SetPriority+0x50>)
 8007060:	88fb      	ldrh	r3, [r7, #6]
 8007062:	f003 030f 	and.w	r3, r3, #15
 8007066:	3b04      	subs	r3, #4
 8007068:	0112      	lsls	r2, r2, #4
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	440b      	add	r3, r1
 800706e:	761a      	strb	r2, [r3, #24]
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	e000e100 	.word	0xe000e100
 8007080:	e000ed00 	.word	0xe000ed00

08007084 <NVIC_EncodePriority>:
{
 8007084:	b480      	push	{r7}
 8007086:	b089      	sub	sp, #36	; 0x24
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	f1c3 0307 	rsb	r3, r3, #7
 800709e:	2b04      	cmp	r3, #4
 80070a0:	bf28      	it	cs
 80070a2:	2304      	movcs	r3, #4
 80070a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	3304      	adds	r3, #4
 80070aa:	2b06      	cmp	r3, #6
 80070ac:	d902      	bls.n	80070b4 <NVIC_EncodePriority+0x30>
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	3b03      	subs	r3, #3
 80070b2:	e000      	b.n	80070b6 <NVIC_EncodePriority+0x32>
 80070b4:	2300      	movs	r3, #0
 80070b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	fa02 f303 	lsl.w	r3, r2, r3
 80070c2:	43da      	mvns	r2, r3
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	401a      	ands	r2, r3
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	fa01 f303 	lsl.w	r3, r1, r3
 80070d6:	43d9      	mvns	r1, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070dc:	4313      	orrs	r3, r2
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3724      	adds	r7, #36	; 0x24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b082      	sub	sp, #8
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff ff4c 	bl	8006f90 <__NVIC_SetPriorityGrouping>
}
 80070f8:	bf00      	nop
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800710e:	f7ff ff63 	bl	8006fd8 <__NVIC_GetPriorityGrouping>
 8007112:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	6978      	ldr	r0, [r7, #20]
 800711a:	f7ff ffb3 	bl	8007084 <NVIC_EncodePriority>
 800711e:	4602      	mov	r2, r0
 8007120:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007124:	4611      	mov	r1, r2
 8007126:	4618      	mov	r0, r3
 8007128:	f7ff ff82 	bl	8007030 <__NVIC_SetPriority>
}
 800712c:	bf00      	nop
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800713e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff ff56 	bl	8006ff4 <__NVIC_EnableIRQ>
}
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8007154:	f3bf 8f5f 	dmb	sy
}
 8007158:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800715a:	4b07      	ldr	r3, [pc, #28]	; (8007178 <HAL_MPU_Disable+0x28>)
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	4a06      	ldr	r2, [pc, #24]	; (8007178 <HAL_MPU_Disable+0x28>)
 8007160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007164:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <HAL_MPU_Disable+0x2c>)
 8007168:	2200      	movs	r2, #0
 800716a:	605a      	str	r2, [r3, #4]
}
 800716c:	bf00      	nop
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	e000ed00 	.word	0xe000ed00
 800717c:	e000ed90 	.word	0xe000ed90

08007180 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007188:	4a0b      	ldr	r2, [pc, #44]	; (80071b8 <HAL_MPU_Enable+0x38>)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f043 0301 	orr.w	r3, r3, #1
 8007190:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <HAL_MPU_Enable+0x3c>)
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	4a09      	ldr	r2, [pc, #36]	; (80071bc <HAL_MPU_Enable+0x3c>)
 8007198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800719c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800719e:	f3bf 8f4f 	dsb	sy
}
 80071a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80071a4:	f3bf 8f6f 	isb	sy
}
 80071a8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	e000ed90 	.word	0xe000ed90
 80071bc:	e000ed00 	.word	0xe000ed00

080071c0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	785a      	ldrb	r2, [r3, #1]
 80071cc:	4b1b      	ldr	r3, [pc, #108]	; (800723c <HAL_MPU_ConfigRegion+0x7c>)
 80071ce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80071d0:	4b1a      	ldr	r3, [pc, #104]	; (800723c <HAL_MPU_ConfigRegion+0x7c>)
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	4a19      	ldr	r2, [pc, #100]	; (800723c <HAL_MPU_ConfigRegion+0x7c>)
 80071d6:	f023 0301 	bic.w	r3, r3, #1
 80071da:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80071dc:	4a17      	ldr	r2, [pc, #92]	; (800723c <HAL_MPU_ConfigRegion+0x7c>)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	7b1b      	ldrb	r3, [r3, #12]
 80071e8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	7adb      	ldrb	r3, [r3, #11]
 80071ee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80071f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	7a9b      	ldrb	r3, [r3, #10]
 80071f6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80071f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	7b5b      	ldrb	r3, [r3, #13]
 80071fe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007200:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7b9b      	ldrb	r3, [r3, #14]
 8007206:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007208:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7bdb      	ldrb	r3, [r3, #15]
 800720e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007210:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7a5b      	ldrb	r3, [r3, #9]
 8007216:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007218:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	7a1b      	ldrb	r3, [r3, #8]
 800721e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007220:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	7812      	ldrb	r2, [r2, #0]
 8007226:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007228:	4a04      	ldr	r2, [pc, #16]	; (800723c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800722a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800722c:	6113      	str	r3, [r2, #16]
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	e000ed90 	.word	0xe000ed90

08007240 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e014      	b.n	800727c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	791b      	ldrb	r3, [r3, #4]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d105      	bne.n	8007268 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7f9 fcbe 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e046      	b.n	8007326 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	795b      	ldrb	r3, [r3, #5]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_DAC_Start+0x20>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e040      	b.n	8007326 <HAL_DAC_Start+0xa2>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2202      	movs	r2, #2
 80072ae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6819      	ldr	r1, [r3, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2201      	movs	r2, #1
 80072be:	409a      	lsls	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10f      	bne.n	80072ee <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d11d      	bne.n	8007318 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0201 	orr.w	r2, r2, #1
 80072ea:	605a      	str	r2, [r3, #4]
 80072ec:	e014      	b.n	8007318 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f003 0310 	and.w	r3, r3, #16
 80072fe:	2102      	movs	r1, #2
 8007300:	fa01 f303 	lsl.w	r3, r1, r3
 8007304:	429a      	cmp	r2, r3
 8007306:	d107      	bne.n	8007318 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0202 	orr.w	r2, r2, #2
 8007316:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
	...

08007334 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e0a2      	b.n	8007492 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	795b      	ldrb	r3, [r3, #5]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_DAC_Start_DMA+0x24>
 8007354:	2302      	movs	r3, #2
 8007356:	e09c      	b.n	8007492 <HAL_DAC_Start_DMA+0x15e>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2202      	movs	r2, #2
 8007362:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d129      	bne.n	80073be <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	4a4b      	ldr	r2, [pc, #300]	; (800749c <HAL_DAC_Start_DMA+0x168>)
 8007370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	4a4a      	ldr	r2, [pc, #296]	; (80074a0 <HAL_DAC_Start_DMA+0x16c>)
 8007378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	4a49      	ldr	r2, [pc, #292]	; (80074a4 <HAL_DAC_Start_DMA+0x170>)
 8007380:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007390:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <HAL_DAC_Start_DMA+0x6c>
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	2b04      	cmp	r3, #4
 800739c:	d005      	beq.n	80073aa <HAL_DAC_Start_DMA+0x76>
 800739e:	e009      	b.n	80073b4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	613b      	str	r3, [r7, #16]
        break;
 80073a8:	e033      	b.n	8007412 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	613b      	str	r3, [r7, #16]
        break;
 80073b2:	e02e      	b.n	8007412 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3310      	adds	r3, #16
 80073ba:	613b      	str	r3, [r7, #16]
        break;
 80073bc:	e029      	b.n	8007412 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	4a39      	ldr	r2, [pc, #228]	; (80074a8 <HAL_DAC_Start_DMA+0x174>)
 80073c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	4a38      	ldr	r2, [pc, #224]	; (80074ac <HAL_DAC_Start_DMA+0x178>)
 80073cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	4a37      	ldr	r2, [pc, #220]	; (80074b0 <HAL_DAC_Start_DMA+0x17c>)
 80073d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80073e4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <HAL_DAC_Start_DMA+0xc0>
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d005      	beq.n	80073fe <HAL_DAC_Start_DMA+0xca>
 80073f2:	e009      	b.n	8007408 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3314      	adds	r3, #20
 80073fa:	613b      	str	r3, [r7, #16]
        break;
 80073fc:	e009      	b.n	8007412 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3318      	adds	r3, #24
 8007404:	613b      	str	r3, [r7, #16]
        break;
 8007406:	e004      	b.n	8007412 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	331c      	adds	r3, #28
 800740e:	613b      	str	r3, [r7, #16]
        break;
 8007410:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d111      	bne.n	800743c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007426:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6898      	ldr	r0, [r3, #8]
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	f000 fe67 	bl	8008104 <HAL_DMA_Start_IT>
 8007436:	4603      	mov	r3, r0
 8007438:	75fb      	strb	r3, [r7, #23]
 800743a:	e010      	b.n	800745e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800744a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68d8      	ldr	r0, [r3, #12]
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	f000 fe55 	bl	8008104 <HAL_DMA_Start_IT>
 800745a:	4603      	mov	r3, r0
 800745c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10c      	bne.n	8007484 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6819      	ldr	r1, [r3, #0]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f003 0310 	and.w	r3, r3, #16
 8007476:	2201      	movs	r2, #1
 8007478:	409a      	lsls	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	e005      	b.n	8007490 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f043 0204 	orr.w	r2, r3, #4
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007490:	7dfb      	ldrb	r3, [r7, #23]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	08007925 	.word	0x08007925
 80074a0:	08007947 	.word	0x08007947
 80074a4:	08007963 	.word	0x08007963
 80074a8:	080079e1 	.word	0x080079e1
 80074ac:	08007a03 	.word	0x08007a03
 80074b0:	08007a1f 	.word	0x08007a1f

080074b4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e03e      	b.n	8007546 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6819      	ldr	r1, [r3, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80074d8:	fa02 f303 	lsl.w	r3, r2, r3
 80074dc:	43da      	mvns	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	400a      	ands	r2, r1
 80074e4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6819      	ldr	r1, [r3, #0]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	f003 0310 	and.w	r3, r3, #16
 80074f2:	2201      	movs	r2, #1
 80074f4:	fa02 f303 	lsl.w	r3, r2, r3
 80074f8:	43da      	mvns	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	400a      	ands	r2, r1
 8007500:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10d      	bne.n	8007524 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	4618      	mov	r0, r3
 800750e:	f001 f863 	bl	80085d8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	e00c      	b.n	800753e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	4618      	mov	r0, r3
 800752a:	f001 f855 	bl	80085d8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800753c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007564:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01d      	beq.n	80075ac <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d018      	beq.n	80075ac <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2204      	movs	r2, #4
 800757e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f043 0201 	orr.w	r2, r3, #1
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007594:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075a4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f86f 	bl	800768a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d01d      	beq.n	80075f2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d018      	beq.n	80075f2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2204      	movs	r2, #4
 80075c4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f043 0202 	orr.w	r2, r3, #2
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80075da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80075ea:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f9ed 	bl	80079cc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80075f2:	bf00      	nop
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b087      	sub	sp, #28
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
 8007606:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007608:	2300      	movs	r3, #0
 800760a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e015      	b.n	8007642 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d105      	bne.n	800762e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4413      	add	r3, r2
 8007628:	3308      	adds	r3, #8
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	e004      	b.n	8007638 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4413      	add	r3, r2
 8007634:	3314      	adds	r3, #20
 8007636:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	461a      	mov	r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	371c      	adds	r7, #28
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007656:	bf00      	nop
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
	...

080076a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08a      	sub	sp, #40	; 0x28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_DAC_ConfigChannel+0x1e>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e12a      	b.n	8007918 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	795b      	ldrb	r3, [r3, #5]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d101      	bne.n	80076ce <HAL_DAC_ConfigChannel+0x2e>
 80076ca:	2302      	movs	r3, #2
 80076cc:	e124      	b.n	8007918 <HAL_DAC_ConfigChannel+0x278>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2202      	movs	r2, #2
 80076d8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d17a      	bne.n	80077d8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80076e2:	f7fe f813 	bl	800570c <HAL_GetTick>
 80076e6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d13d      	bne.n	800776a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80076ee:	e018      	b.n	8007722 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80076f0:	f7fe f80c 	bl	800570c <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d911      	bls.n	8007722 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007704:	4b86      	ldr	r3, [pc, #536]	; (8007920 <HAL_DAC_ConfigChannel+0x280>)
 8007706:	4013      	ands	r3, r2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00a      	beq.n	8007722 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f043 0208 	orr.w	r2, r3, #8
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2203      	movs	r2, #3
 800771c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e0fa      	b.n	8007918 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007728:	4b7d      	ldr	r3, [pc, #500]	; (8007920 <HAL_DAC_ConfigChannel+0x280>)
 800772a:	4013      	ands	r3, r2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1df      	bne.n	80076f0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	6992      	ldr	r2, [r2, #24]
 8007738:	641a      	str	r2, [r3, #64]	; 0x40
 800773a:	e020      	b.n	800777e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800773c:	f7fd ffe6 	bl	800570c <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b01      	cmp	r3, #1
 8007748:	d90f      	bls.n	800776a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007750:	2b00      	cmp	r3, #0
 8007752:	da0a      	bge.n	800776a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	f043 0208 	orr.w	r2, r3, #8
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2203      	movs	r2, #3
 8007764:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e0d6      	b.n	8007918 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007770:	2b00      	cmp	r3, #0
 8007772:	dbe3      	blt.n	800773c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	6992      	ldr	r2, [r2, #24]
 800777c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f003 0310 	and.w	r3, r3, #16
 800778a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800778e:	fa01 f303 	lsl.w	r3, r1, r3
 8007792:	43db      	mvns	r3, r3
 8007794:	ea02 0103 	and.w	r1, r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	69da      	ldr	r2, [r3, #28]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f003 0310 	and.w	r3, r3, #16
 80077a2:	409a      	lsls	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f003 0310 	and.w	r3, r3, #16
 80077b8:	21ff      	movs	r1, #255	; 0xff
 80077ba:	fa01 f303 	lsl.w	r3, r1, r3
 80077be:	43db      	mvns	r3, r3
 80077c0:	ea02 0103 	and.w	r1, r2, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6a1a      	ldr	r2, [r3, #32]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f003 0310 	and.w	r3, r3, #16
 80077ce:	409a      	lsls	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d11d      	bne.n	800781c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f003 0310 	and.w	r3, r3, #16
 80077ee:	221f      	movs	r2, #31
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	43db      	mvns	r3, r3
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	4013      	ands	r3, r2
 80077fa:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	fa02 f303 	lsl.w	r3, r2, r3
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	4313      	orrs	r3, r2
 8007812:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007822:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f003 0310 	and.w	r3, r3, #16
 800782a:	2207      	movs	r2, #7
 800782c:	fa02 f303 	lsl.w	r3, r2, r3
 8007830:	43db      	mvns	r3, r3
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	4013      	ands	r3, r2
 8007836:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d102      	bne.n	8007846 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007840:	2300      	movs	r3, #0
 8007842:	627b      	str	r3, [r7, #36]	; 0x24
 8007844:	e00f      	b.n	8007866 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d102      	bne.n	8007854 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800784e:	2301      	movs	r3, #1
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
 8007852:	e008      	b.n	8007866 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d102      	bne.n	8007862 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800785c:	2301      	movs	r3, #1
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
 8007860:	e001      	b.n	8007866 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007862:	2300      	movs	r3, #0
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	4313      	orrs	r3, r2
 8007870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007872:	4313      	orrs	r3, r2
 8007874:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	4313      	orrs	r3, r2
 8007886:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6819      	ldr	r1, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80078a0:	fa02 f303 	lsl.w	r3, r2, r3
 80078a4:	43da      	mvns	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	400a      	ands	r2, r1
 80078ac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f003 0310 	and.w	r3, r3, #16
 80078bc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80078c0:	fa02 f303 	lsl.w	r3, r2, r3
 80078c4:	43db      	mvns	r3, r3
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	4013      	ands	r3, r2
 80078ca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f003 0310 	and.w	r3, r3, #16
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	fa02 f303 	lsl.w	r3, r2, r3
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6819      	ldr	r1, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	22c0      	movs	r2, #192	; 0xc0
 80078fa:	fa02 f303 	lsl.w	r3, r2, r3
 80078fe:	43da      	mvns	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	400a      	ands	r2, r1
 8007906:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007914:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007918:	4618      	mov	r0, r3
 800791a:	3728      	adds	r7, #40	; 0x28
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	20008000 	.word	0x20008000

08007924 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f7ff fe8b 	bl	800764e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2201      	movs	r2, #1
 800793c:	711a      	strb	r2, [r3, #4]
}
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007952:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f7ff fe84 	bl	8007662 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800795a:	bf00      	nop
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f043 0204 	orr.w	r2, r3, #4
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7ff fe7a 	bl	8007676 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	711a      	strb	r2, [r3, #4]
}
 8007988:	bf00      	nop
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f7ff ffce 	bl	8007990 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	711a      	strb	r2, [r3, #4]
}
 80079fa:	bf00      	nop
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff ffc7 	bl	80079a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	f043 0204 	orr.w	r2, r3, #4
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f7ff ffbd 	bl	80079b8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2201      	movs	r2, #1
 8007a42:	711a      	strb	r2, [r3, #4]
}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007a54:	f7fd fe5a 	bl	800570c <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e316      	b.n	8008092 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a66      	ldr	r2, [pc, #408]	; (8007c04 <HAL_DMA_Init+0x1b8>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d04a      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a65      	ldr	r2, [pc, #404]	; (8007c08 <HAL_DMA_Init+0x1bc>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d045      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a63      	ldr	r2, [pc, #396]	; (8007c0c <HAL_DMA_Init+0x1c0>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d040      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a62      	ldr	r2, [pc, #392]	; (8007c10 <HAL_DMA_Init+0x1c4>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d03b      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a60      	ldr	r2, [pc, #384]	; (8007c14 <HAL_DMA_Init+0x1c8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d036      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a5f      	ldr	r2, [pc, #380]	; (8007c18 <HAL_DMA_Init+0x1cc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d031      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a5d      	ldr	r2, [pc, #372]	; (8007c1c <HAL_DMA_Init+0x1d0>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d02c      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a5c      	ldr	r2, [pc, #368]	; (8007c20 <HAL_DMA_Init+0x1d4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d027      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a5a      	ldr	r2, [pc, #360]	; (8007c24 <HAL_DMA_Init+0x1d8>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d022      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a59      	ldr	r2, [pc, #356]	; (8007c28 <HAL_DMA_Init+0x1dc>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d01d      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a57      	ldr	r2, [pc, #348]	; (8007c2c <HAL_DMA_Init+0x1e0>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d018      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a56      	ldr	r2, [pc, #344]	; (8007c30 <HAL_DMA_Init+0x1e4>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d013      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a54      	ldr	r2, [pc, #336]	; (8007c34 <HAL_DMA_Init+0x1e8>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d00e      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a53      	ldr	r2, [pc, #332]	; (8007c38 <HAL_DMA_Init+0x1ec>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d009      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a51      	ldr	r2, [pc, #324]	; (8007c3c <HAL_DMA_Init+0x1f0>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d004      	beq.n	8007b04 <HAL_DMA_Init+0xb8>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a50      	ldr	r2, [pc, #320]	; (8007c40 <HAL_DMA_Init+0x1f4>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d101      	bne.n	8007b08 <HAL_DMA_Init+0xbc>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <HAL_DMA_Init+0xbe>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 813b 	beq.w	8007d86 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a37      	ldr	r2, [pc, #220]	; (8007c04 <HAL_DMA_Init+0x1b8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d04a      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a36      	ldr	r2, [pc, #216]	; (8007c08 <HAL_DMA_Init+0x1bc>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d045      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a34      	ldr	r2, [pc, #208]	; (8007c0c <HAL_DMA_Init+0x1c0>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d040      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a33      	ldr	r2, [pc, #204]	; (8007c10 <HAL_DMA_Init+0x1c4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d03b      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a31      	ldr	r2, [pc, #196]	; (8007c14 <HAL_DMA_Init+0x1c8>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d036      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a30      	ldr	r2, [pc, #192]	; (8007c18 <HAL_DMA_Init+0x1cc>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d031      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a2e      	ldr	r2, [pc, #184]	; (8007c1c <HAL_DMA_Init+0x1d0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d02c      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a2d      	ldr	r2, [pc, #180]	; (8007c20 <HAL_DMA_Init+0x1d4>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d027      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a2b      	ldr	r2, [pc, #172]	; (8007c24 <HAL_DMA_Init+0x1d8>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d022      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a2a      	ldr	r2, [pc, #168]	; (8007c28 <HAL_DMA_Init+0x1dc>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d01d      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a28      	ldr	r2, [pc, #160]	; (8007c2c <HAL_DMA_Init+0x1e0>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d018      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a27      	ldr	r2, [pc, #156]	; (8007c30 <HAL_DMA_Init+0x1e4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d013      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a25      	ldr	r2, [pc, #148]	; (8007c34 <HAL_DMA_Init+0x1e8>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00e      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a24      	ldr	r2, [pc, #144]	; (8007c38 <HAL_DMA_Init+0x1ec>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d009      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a22      	ldr	r2, [pc, #136]	; (8007c3c <HAL_DMA_Init+0x1f0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d004      	beq.n	8007bc0 <HAL_DMA_Init+0x174>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a21      	ldr	r2, [pc, #132]	; (8007c40 <HAL_DMA_Init+0x1f4>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d108      	bne.n	8007bd2 <HAL_DMA_Init+0x186>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0201 	bic.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	e007      	b.n	8007be2 <HAL_DMA_Init+0x196>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0201 	bic.w	r2, r2, #1
 8007be0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007be2:	e02f      	b.n	8007c44 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007be4:	f7fd fd92 	bl	800570c <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b05      	cmp	r3, #5
 8007bf0:	d928      	bls.n	8007c44 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e246      	b.n	8008092 <HAL_DMA_Init+0x646>
 8007c04:	40020010 	.word	0x40020010
 8007c08:	40020028 	.word	0x40020028
 8007c0c:	40020040 	.word	0x40020040
 8007c10:	40020058 	.word	0x40020058
 8007c14:	40020070 	.word	0x40020070
 8007c18:	40020088 	.word	0x40020088
 8007c1c:	400200a0 	.word	0x400200a0
 8007c20:	400200b8 	.word	0x400200b8
 8007c24:	40020410 	.word	0x40020410
 8007c28:	40020428 	.word	0x40020428
 8007c2c:	40020440 	.word	0x40020440
 8007c30:	40020458 	.word	0x40020458
 8007c34:	40020470 	.word	0x40020470
 8007c38:	40020488 	.word	0x40020488
 8007c3c:	400204a0 	.word	0x400204a0
 8007c40:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1c8      	bne.n	8007be4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	4b83      	ldr	r3, [pc, #524]	; (8007e6c <HAL_DMA_Init+0x420>)
 8007c5e:	4013      	ands	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007c6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c76:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c82:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d107      	bne.n	8007ca8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007ca8:	4b71      	ldr	r3, [pc, #452]	; (8007e70 <HAL_DMA_Init+0x424>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	4b71      	ldr	r3, [pc, #452]	; (8007e74 <HAL_DMA_Init+0x428>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cb4:	d328      	bcc.n	8007d08 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b28      	cmp	r3, #40	; 0x28
 8007cbc:	d903      	bls.n	8007cc6 <HAL_DMA_Init+0x27a>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8007cc4:	d917      	bls.n	8007cf6 <HAL_DMA_Init+0x2aa>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b3e      	cmp	r3, #62	; 0x3e
 8007ccc:	d903      	bls.n	8007cd6 <HAL_DMA_Init+0x28a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b42      	cmp	r3, #66	; 0x42
 8007cd4:	d90f      	bls.n	8007cf6 <HAL_DMA_Init+0x2aa>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2b46      	cmp	r3, #70	; 0x46
 8007cdc:	d903      	bls.n	8007ce6 <HAL_DMA_Init+0x29a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2b48      	cmp	r3, #72	; 0x48
 8007ce4:	d907      	bls.n	8007cf6 <HAL_DMA_Init+0x2aa>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	2b4e      	cmp	r3, #78	; 0x4e
 8007cec:	d905      	bls.n	8007cfa <HAL_DMA_Init+0x2ae>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2b52      	cmp	r3, #82	; 0x52
 8007cf4:	d801      	bhi.n	8007cfa <HAL_DMA_Init+0x2ae>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e000      	b.n	8007cfc <HAL_DMA_Init+0x2b0>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d06:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f023 0307 	bic.w	r3, r3, #7
 8007d1e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d117      	bne.n	8007d62 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00e      	beq.n	8007d62 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f002 fb4d 	bl	800a3e4 <DMA_CheckFifoParam>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d008      	beq.n	8007d62 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2240      	movs	r2, #64	; 0x40
 8007d54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e197      	b.n	8008092 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f002 fa88 	bl	800a280 <DMA_CalcBaseAndBitshift>
 8007d70:	4603      	mov	r3, r0
 8007d72:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d78:	f003 031f 	and.w	r3, r3, #31
 8007d7c:	223f      	movs	r2, #63	; 0x3f
 8007d7e:	409a      	lsls	r2, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	609a      	str	r2, [r3, #8]
 8007d84:	e0cd      	b.n	8007f22 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a3b      	ldr	r2, [pc, #236]	; (8007e78 <HAL_DMA_Init+0x42c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d022      	beq.n	8007dd6 <HAL_DMA_Init+0x38a>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a39      	ldr	r2, [pc, #228]	; (8007e7c <HAL_DMA_Init+0x430>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d01d      	beq.n	8007dd6 <HAL_DMA_Init+0x38a>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a38      	ldr	r2, [pc, #224]	; (8007e80 <HAL_DMA_Init+0x434>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d018      	beq.n	8007dd6 <HAL_DMA_Init+0x38a>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a36      	ldr	r2, [pc, #216]	; (8007e84 <HAL_DMA_Init+0x438>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d013      	beq.n	8007dd6 <HAL_DMA_Init+0x38a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a35      	ldr	r2, [pc, #212]	; (8007e88 <HAL_DMA_Init+0x43c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00e      	beq.n	8007dd6 <HAL_DMA_Init+0x38a>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a33      	ldr	r2, [pc, #204]	; (8007e8c <HAL_DMA_Init+0x440>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d009      	beq.n	8007dd6 <HAL_DMA_Init+0x38a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a32      	ldr	r2, [pc, #200]	; (8007e90 <HAL_DMA_Init+0x444>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d004      	beq.n	8007dd6 <HAL_DMA_Init+0x38a>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a30      	ldr	r2, [pc, #192]	; (8007e94 <HAL_DMA_Init+0x448>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d101      	bne.n	8007dda <HAL_DMA_Init+0x38e>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <HAL_DMA_Init+0x390>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 8097 	beq.w	8007f10 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a24      	ldr	r2, [pc, #144]	; (8007e78 <HAL_DMA_Init+0x42c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d021      	beq.n	8007e30 <HAL_DMA_Init+0x3e4>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a22      	ldr	r2, [pc, #136]	; (8007e7c <HAL_DMA_Init+0x430>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d01c      	beq.n	8007e30 <HAL_DMA_Init+0x3e4>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a21      	ldr	r2, [pc, #132]	; (8007e80 <HAL_DMA_Init+0x434>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d017      	beq.n	8007e30 <HAL_DMA_Init+0x3e4>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a1f      	ldr	r2, [pc, #124]	; (8007e84 <HAL_DMA_Init+0x438>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d012      	beq.n	8007e30 <HAL_DMA_Init+0x3e4>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a1e      	ldr	r2, [pc, #120]	; (8007e88 <HAL_DMA_Init+0x43c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d00d      	beq.n	8007e30 <HAL_DMA_Init+0x3e4>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a1c      	ldr	r2, [pc, #112]	; (8007e8c <HAL_DMA_Init+0x440>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d008      	beq.n	8007e30 <HAL_DMA_Init+0x3e4>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a1b      	ldr	r2, [pc, #108]	; (8007e90 <HAL_DMA_Init+0x444>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <HAL_DMA_Init+0x3e4>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a19      	ldr	r2, [pc, #100]	; (8007e94 <HAL_DMA_Init+0x448>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2202      	movs	r2, #2
 8007e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <HAL_DMA_Init+0x44c>)
 8007e4e:	4013      	ands	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	2b40      	cmp	r3, #64	; 0x40
 8007e58:	d020      	beq.n	8007e9c <HAL_DMA_Init+0x450>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	2b80      	cmp	r3, #128	; 0x80
 8007e60:	d102      	bne.n	8007e68 <HAL_DMA_Init+0x41c>
 8007e62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e66:	e01a      	b.n	8007e9e <HAL_DMA_Init+0x452>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	e018      	b.n	8007e9e <HAL_DMA_Init+0x452>
 8007e6c:	fe10803f 	.word	0xfe10803f
 8007e70:	5c001000 	.word	0x5c001000
 8007e74:	ffff0000 	.word	0xffff0000
 8007e78:	58025408 	.word	0x58025408
 8007e7c:	5802541c 	.word	0x5802541c
 8007e80:	58025430 	.word	0x58025430
 8007e84:	58025444 	.word	0x58025444
 8007e88:	58025458 	.word	0x58025458
 8007e8c:	5802546c 	.word	0x5802546c
 8007e90:	58025480 	.word	0x58025480
 8007e94:	58025494 	.word	0x58025494
 8007e98:	fffe000f 	.word	0xfffe000f
 8007e9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	68d2      	ldr	r2, [r2, #12]
 8007ea2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007eac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007eb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007ebc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007ec4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007ecc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	4b6e      	ldr	r3, [pc, #440]	; (800809c <HAL_DMA_Init+0x650>)
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4a6e      	ldr	r2, [pc, #440]	; (80080a0 <HAL_DMA_Init+0x654>)
 8007ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eec:	091b      	lsrs	r3, r3, #4
 8007eee:	009a      	lsls	r2, r3, #2
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f002 f9c3 	bl	800a280 <DMA_CalcBaseAndBitshift>
 8007efa:	4603      	mov	r3, r0
 8007efc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f02:	f003 031f 	and.w	r3, r3, #31
 8007f06:	2201      	movs	r2, #1
 8007f08:	409a      	lsls	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	605a      	str	r2, [r3, #4]
 8007f0e:	e008      	b.n	8007f22 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2240      	movs	r2, #64	; 0x40
 8007f14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2203      	movs	r2, #3
 8007f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e0b7      	b.n	8008092 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a5f      	ldr	r2, [pc, #380]	; (80080a4 <HAL_DMA_Init+0x658>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d072      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a5d      	ldr	r2, [pc, #372]	; (80080a8 <HAL_DMA_Init+0x65c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d06d      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a5c      	ldr	r2, [pc, #368]	; (80080ac <HAL_DMA_Init+0x660>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d068      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a5a      	ldr	r2, [pc, #360]	; (80080b0 <HAL_DMA_Init+0x664>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d063      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a59      	ldr	r2, [pc, #356]	; (80080b4 <HAL_DMA_Init+0x668>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d05e      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a57      	ldr	r2, [pc, #348]	; (80080b8 <HAL_DMA_Init+0x66c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d059      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a56      	ldr	r2, [pc, #344]	; (80080bc <HAL_DMA_Init+0x670>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d054      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a54      	ldr	r2, [pc, #336]	; (80080c0 <HAL_DMA_Init+0x674>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d04f      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a53      	ldr	r2, [pc, #332]	; (80080c4 <HAL_DMA_Init+0x678>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d04a      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a51      	ldr	r2, [pc, #324]	; (80080c8 <HAL_DMA_Init+0x67c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d045      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a50      	ldr	r2, [pc, #320]	; (80080cc <HAL_DMA_Init+0x680>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d040      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a4e      	ldr	r2, [pc, #312]	; (80080d0 <HAL_DMA_Init+0x684>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d03b      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a4d      	ldr	r2, [pc, #308]	; (80080d4 <HAL_DMA_Init+0x688>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d036      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a4b      	ldr	r2, [pc, #300]	; (80080d8 <HAL_DMA_Init+0x68c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d031      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a4a      	ldr	r2, [pc, #296]	; (80080dc <HAL_DMA_Init+0x690>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d02c      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a48      	ldr	r2, [pc, #288]	; (80080e0 <HAL_DMA_Init+0x694>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d027      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a47      	ldr	r2, [pc, #284]	; (80080e4 <HAL_DMA_Init+0x698>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d022      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a45      	ldr	r2, [pc, #276]	; (80080e8 <HAL_DMA_Init+0x69c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d01d      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a44      	ldr	r2, [pc, #272]	; (80080ec <HAL_DMA_Init+0x6a0>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d018      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a42      	ldr	r2, [pc, #264]	; (80080f0 <HAL_DMA_Init+0x6a4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d013      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a41      	ldr	r2, [pc, #260]	; (80080f4 <HAL_DMA_Init+0x6a8>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d00e      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a3f      	ldr	r2, [pc, #252]	; (80080f8 <HAL_DMA_Init+0x6ac>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d009      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a3e      	ldr	r2, [pc, #248]	; (80080fc <HAL_DMA_Init+0x6b0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d004      	beq.n	8008012 <HAL_DMA_Init+0x5c6>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a3c      	ldr	r2, [pc, #240]	; (8008100 <HAL_DMA_Init+0x6b4>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d101      	bne.n	8008016 <HAL_DMA_Init+0x5ca>
 8008012:	2301      	movs	r3, #1
 8008014:	e000      	b.n	8008018 <HAL_DMA_Init+0x5cc>
 8008016:	2300      	movs	r3, #0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d032      	beq.n	8008082 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f002 fa5d 	bl	800a4dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	2b80      	cmp	r3, #128	; 0x80
 8008028:	d102      	bne.n	8008030 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008038:	b2d2      	uxtb	r2, r2
 800803a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008044:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d010      	beq.n	8008070 <HAL_DMA_Init+0x624>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	2b08      	cmp	r3, #8
 8008054:	d80c      	bhi.n	8008070 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f002 fada 	bl	800a610 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800806c:	605a      	str	r2, [r3, #4]
 800806e:	e008      	b.n	8008082 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	a7fdabf8 	.word	0xa7fdabf8
 80080a0:	cccccccd 	.word	0xcccccccd
 80080a4:	40020010 	.word	0x40020010
 80080a8:	40020028 	.word	0x40020028
 80080ac:	40020040 	.word	0x40020040
 80080b0:	40020058 	.word	0x40020058
 80080b4:	40020070 	.word	0x40020070
 80080b8:	40020088 	.word	0x40020088
 80080bc:	400200a0 	.word	0x400200a0
 80080c0:	400200b8 	.word	0x400200b8
 80080c4:	40020410 	.word	0x40020410
 80080c8:	40020428 	.word	0x40020428
 80080cc:	40020440 	.word	0x40020440
 80080d0:	40020458 	.word	0x40020458
 80080d4:	40020470 	.word	0x40020470
 80080d8:	40020488 	.word	0x40020488
 80080dc:	400204a0 	.word	0x400204a0
 80080e0:	400204b8 	.word	0x400204b8
 80080e4:	58025408 	.word	0x58025408
 80080e8:	5802541c 	.word	0x5802541c
 80080ec:	58025430 	.word	0x58025430
 80080f0:	58025444 	.word	0x58025444
 80080f4:	58025458 	.word	0x58025458
 80080f8:	5802546c 	.word	0x5802546c
 80080fc:	58025480 	.word	0x58025480
 8008100:	58025494 	.word	0x58025494

08008104 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
 8008110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e226      	b.n	800856e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008126:	2b01      	cmp	r3, #1
 8008128:	d101      	bne.n	800812e <HAL_DMA_Start_IT+0x2a>
 800812a:	2302      	movs	r3, #2
 800812c:	e21f      	b.n	800856e <HAL_DMA_Start_IT+0x46a>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b01      	cmp	r3, #1
 8008140:	f040 820a 	bne.w	8008558 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a68      	ldr	r2, [pc, #416]	; (80082f8 <HAL_DMA_Start_IT+0x1f4>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d04a      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a66      	ldr	r2, [pc, #408]	; (80082fc <HAL_DMA_Start_IT+0x1f8>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d045      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a65      	ldr	r2, [pc, #404]	; (8008300 <HAL_DMA_Start_IT+0x1fc>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d040      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a63      	ldr	r2, [pc, #396]	; (8008304 <HAL_DMA_Start_IT+0x200>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d03b      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a62      	ldr	r2, [pc, #392]	; (8008308 <HAL_DMA_Start_IT+0x204>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d036      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a60      	ldr	r2, [pc, #384]	; (800830c <HAL_DMA_Start_IT+0x208>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d031      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a5f      	ldr	r2, [pc, #380]	; (8008310 <HAL_DMA_Start_IT+0x20c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d02c      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a5d      	ldr	r2, [pc, #372]	; (8008314 <HAL_DMA_Start_IT+0x210>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d027      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a5c      	ldr	r2, [pc, #368]	; (8008318 <HAL_DMA_Start_IT+0x214>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d022      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a5a      	ldr	r2, [pc, #360]	; (800831c <HAL_DMA_Start_IT+0x218>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d01d      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a59      	ldr	r2, [pc, #356]	; (8008320 <HAL_DMA_Start_IT+0x21c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d018      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a57      	ldr	r2, [pc, #348]	; (8008324 <HAL_DMA_Start_IT+0x220>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d013      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a56      	ldr	r2, [pc, #344]	; (8008328 <HAL_DMA_Start_IT+0x224>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d00e      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a54      	ldr	r2, [pc, #336]	; (800832c <HAL_DMA_Start_IT+0x228>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d009      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a53      	ldr	r2, [pc, #332]	; (8008330 <HAL_DMA_Start_IT+0x22c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d004      	beq.n	80081f2 <HAL_DMA_Start_IT+0xee>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a51      	ldr	r2, [pc, #324]	; (8008334 <HAL_DMA_Start_IT+0x230>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d108      	bne.n	8008204 <HAL_DMA_Start_IT+0x100>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f022 0201 	bic.w	r2, r2, #1
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	e007      	b.n	8008214 <HAL_DMA_Start_IT+0x110>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0201 	bic.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	68b9      	ldr	r1, [r7, #8]
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f001 fe84 	bl	8009f28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a34      	ldr	r2, [pc, #208]	; (80082f8 <HAL_DMA_Start_IT+0x1f4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d04a      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a33      	ldr	r2, [pc, #204]	; (80082fc <HAL_DMA_Start_IT+0x1f8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d045      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a31      	ldr	r2, [pc, #196]	; (8008300 <HAL_DMA_Start_IT+0x1fc>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d040      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a30      	ldr	r2, [pc, #192]	; (8008304 <HAL_DMA_Start_IT+0x200>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d03b      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a2e      	ldr	r2, [pc, #184]	; (8008308 <HAL_DMA_Start_IT+0x204>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d036      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a2d      	ldr	r2, [pc, #180]	; (800830c <HAL_DMA_Start_IT+0x208>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d031      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a2b      	ldr	r2, [pc, #172]	; (8008310 <HAL_DMA_Start_IT+0x20c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d02c      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a2a      	ldr	r2, [pc, #168]	; (8008314 <HAL_DMA_Start_IT+0x210>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d027      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a28      	ldr	r2, [pc, #160]	; (8008318 <HAL_DMA_Start_IT+0x214>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d022      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a27      	ldr	r2, [pc, #156]	; (800831c <HAL_DMA_Start_IT+0x218>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d01d      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a25      	ldr	r2, [pc, #148]	; (8008320 <HAL_DMA_Start_IT+0x21c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d018      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a24      	ldr	r2, [pc, #144]	; (8008324 <HAL_DMA_Start_IT+0x220>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d013      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a22      	ldr	r2, [pc, #136]	; (8008328 <HAL_DMA_Start_IT+0x224>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00e      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a21      	ldr	r2, [pc, #132]	; (800832c <HAL_DMA_Start_IT+0x228>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d009      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a1f      	ldr	r2, [pc, #124]	; (8008330 <HAL_DMA_Start_IT+0x22c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d004      	beq.n	80082c0 <HAL_DMA_Start_IT+0x1bc>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a1e      	ldr	r2, [pc, #120]	; (8008334 <HAL_DMA_Start_IT+0x230>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d101      	bne.n	80082c4 <HAL_DMA_Start_IT+0x1c0>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <HAL_DMA_Start_IT+0x1c2>
 80082c4:	2300      	movs	r3, #0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d036      	beq.n	8008338 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f023 021e 	bic.w	r2, r3, #30
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f042 0216 	orr.w	r2, r2, #22
 80082dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d03e      	beq.n	8008364 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f042 0208 	orr.w	r2, r2, #8
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	e035      	b.n	8008364 <HAL_DMA_Start_IT+0x260>
 80082f8:	40020010 	.word	0x40020010
 80082fc:	40020028 	.word	0x40020028
 8008300:	40020040 	.word	0x40020040
 8008304:	40020058 	.word	0x40020058
 8008308:	40020070 	.word	0x40020070
 800830c:	40020088 	.word	0x40020088
 8008310:	400200a0 	.word	0x400200a0
 8008314:	400200b8 	.word	0x400200b8
 8008318:	40020410 	.word	0x40020410
 800831c:	40020428 	.word	0x40020428
 8008320:	40020440 	.word	0x40020440
 8008324:	40020458 	.word	0x40020458
 8008328:	40020470 	.word	0x40020470
 800832c:	40020488 	.word	0x40020488
 8008330:	400204a0 	.word	0x400204a0
 8008334:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f023 020e 	bic.w	r2, r3, #14
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 020a 	orr.w	r2, r2, #10
 800834a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008350:	2b00      	cmp	r3, #0
 8008352:	d007      	beq.n	8008364 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f042 0204 	orr.w	r2, r2, #4
 8008362:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a83      	ldr	r2, [pc, #524]	; (8008578 <HAL_DMA_Start_IT+0x474>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d072      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a82      	ldr	r2, [pc, #520]	; (800857c <HAL_DMA_Start_IT+0x478>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d06d      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a80      	ldr	r2, [pc, #512]	; (8008580 <HAL_DMA_Start_IT+0x47c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d068      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a7f      	ldr	r2, [pc, #508]	; (8008584 <HAL_DMA_Start_IT+0x480>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d063      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a7d      	ldr	r2, [pc, #500]	; (8008588 <HAL_DMA_Start_IT+0x484>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d05e      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a7c      	ldr	r2, [pc, #496]	; (800858c <HAL_DMA_Start_IT+0x488>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d059      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a7a      	ldr	r2, [pc, #488]	; (8008590 <HAL_DMA_Start_IT+0x48c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d054      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a79      	ldr	r2, [pc, #484]	; (8008594 <HAL_DMA_Start_IT+0x490>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d04f      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a77      	ldr	r2, [pc, #476]	; (8008598 <HAL_DMA_Start_IT+0x494>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d04a      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a76      	ldr	r2, [pc, #472]	; (800859c <HAL_DMA_Start_IT+0x498>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d045      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a74      	ldr	r2, [pc, #464]	; (80085a0 <HAL_DMA_Start_IT+0x49c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d040      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a73      	ldr	r2, [pc, #460]	; (80085a4 <HAL_DMA_Start_IT+0x4a0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d03b      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a71      	ldr	r2, [pc, #452]	; (80085a8 <HAL_DMA_Start_IT+0x4a4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d036      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a70      	ldr	r2, [pc, #448]	; (80085ac <HAL_DMA_Start_IT+0x4a8>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d031      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a6e      	ldr	r2, [pc, #440]	; (80085b0 <HAL_DMA_Start_IT+0x4ac>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d02c      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a6d      	ldr	r2, [pc, #436]	; (80085b4 <HAL_DMA_Start_IT+0x4b0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d027      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a6b      	ldr	r2, [pc, #428]	; (80085b8 <HAL_DMA_Start_IT+0x4b4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d022      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a6a      	ldr	r2, [pc, #424]	; (80085bc <HAL_DMA_Start_IT+0x4b8>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d01d      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a68      	ldr	r2, [pc, #416]	; (80085c0 <HAL_DMA_Start_IT+0x4bc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d018      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a67      	ldr	r2, [pc, #412]	; (80085c4 <HAL_DMA_Start_IT+0x4c0>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d013      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a65      	ldr	r2, [pc, #404]	; (80085c8 <HAL_DMA_Start_IT+0x4c4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d00e      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a64      	ldr	r2, [pc, #400]	; (80085cc <HAL_DMA_Start_IT+0x4c8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d009      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a62      	ldr	r2, [pc, #392]	; (80085d0 <HAL_DMA_Start_IT+0x4cc>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d004      	beq.n	8008454 <HAL_DMA_Start_IT+0x350>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a61      	ldr	r2, [pc, #388]	; (80085d4 <HAL_DMA_Start_IT+0x4d0>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d101      	bne.n	8008458 <HAL_DMA_Start_IT+0x354>
 8008454:	2301      	movs	r3, #1
 8008456:	e000      	b.n	800845a <HAL_DMA_Start_IT+0x356>
 8008458:	2300      	movs	r3, #0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d01a      	beq.n	8008494 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d007      	beq.n	800847c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800847a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800848e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008492:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a37      	ldr	r2, [pc, #220]	; (8008578 <HAL_DMA_Start_IT+0x474>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d04a      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a36      	ldr	r2, [pc, #216]	; (800857c <HAL_DMA_Start_IT+0x478>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d045      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a34      	ldr	r2, [pc, #208]	; (8008580 <HAL_DMA_Start_IT+0x47c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d040      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a33      	ldr	r2, [pc, #204]	; (8008584 <HAL_DMA_Start_IT+0x480>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d03b      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a31      	ldr	r2, [pc, #196]	; (8008588 <HAL_DMA_Start_IT+0x484>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d036      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a30      	ldr	r2, [pc, #192]	; (800858c <HAL_DMA_Start_IT+0x488>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d031      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a2e      	ldr	r2, [pc, #184]	; (8008590 <HAL_DMA_Start_IT+0x48c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d02c      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a2d      	ldr	r2, [pc, #180]	; (8008594 <HAL_DMA_Start_IT+0x490>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d027      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a2b      	ldr	r2, [pc, #172]	; (8008598 <HAL_DMA_Start_IT+0x494>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d022      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a2a      	ldr	r2, [pc, #168]	; (800859c <HAL_DMA_Start_IT+0x498>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d01d      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a28      	ldr	r2, [pc, #160]	; (80085a0 <HAL_DMA_Start_IT+0x49c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d018      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a27      	ldr	r2, [pc, #156]	; (80085a4 <HAL_DMA_Start_IT+0x4a0>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d013      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a25      	ldr	r2, [pc, #148]	; (80085a8 <HAL_DMA_Start_IT+0x4a4>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d00e      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a24      	ldr	r2, [pc, #144]	; (80085ac <HAL_DMA_Start_IT+0x4a8>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d009      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a22      	ldr	r2, [pc, #136]	; (80085b0 <HAL_DMA_Start_IT+0x4ac>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d004      	beq.n	8008534 <HAL_DMA_Start_IT+0x430>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a21      	ldr	r2, [pc, #132]	; (80085b4 <HAL_DMA_Start_IT+0x4b0>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d108      	bne.n	8008546 <HAL_DMA_Start_IT+0x442>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f042 0201 	orr.w	r2, r2, #1
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e012      	b.n	800856c <HAL_DMA_Start_IT+0x468>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f042 0201 	orr.w	r2, r2, #1
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	e009      	b.n	800856c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800855e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800856c:	7dfb      	ldrb	r3, [r7, #23]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	40020010 	.word	0x40020010
 800857c:	40020028 	.word	0x40020028
 8008580:	40020040 	.word	0x40020040
 8008584:	40020058 	.word	0x40020058
 8008588:	40020070 	.word	0x40020070
 800858c:	40020088 	.word	0x40020088
 8008590:	400200a0 	.word	0x400200a0
 8008594:	400200b8 	.word	0x400200b8
 8008598:	40020410 	.word	0x40020410
 800859c:	40020428 	.word	0x40020428
 80085a0:	40020440 	.word	0x40020440
 80085a4:	40020458 	.word	0x40020458
 80085a8:	40020470 	.word	0x40020470
 80085ac:	40020488 	.word	0x40020488
 80085b0:	400204a0 	.word	0x400204a0
 80085b4:	400204b8 	.word	0x400204b8
 80085b8:	58025408 	.word	0x58025408
 80085bc:	5802541c 	.word	0x5802541c
 80085c0:	58025430 	.word	0x58025430
 80085c4:	58025444 	.word	0x58025444
 80085c8:	58025458 	.word	0x58025458
 80085cc:	5802546c 	.word	0x5802546c
 80085d0:	58025480 	.word	0x58025480
 80085d4:	58025494 	.word	0x58025494

080085d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80085e0:	f7fd f894 	bl	800570c <HAL_GetTick>
 80085e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e2dc      	b.n	8008baa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d008      	beq.n	800860e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2280      	movs	r2, #128	; 0x80
 8008600:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e2cd      	b.n	8008baa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a76      	ldr	r2, [pc, #472]	; (80087ec <HAL_DMA_Abort+0x214>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d04a      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a74      	ldr	r2, [pc, #464]	; (80087f0 <HAL_DMA_Abort+0x218>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d045      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a73      	ldr	r2, [pc, #460]	; (80087f4 <HAL_DMA_Abort+0x21c>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d040      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a71      	ldr	r2, [pc, #452]	; (80087f8 <HAL_DMA_Abort+0x220>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d03b      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a70      	ldr	r2, [pc, #448]	; (80087fc <HAL_DMA_Abort+0x224>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d036      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a6e      	ldr	r2, [pc, #440]	; (8008800 <HAL_DMA_Abort+0x228>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d031      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a6d      	ldr	r2, [pc, #436]	; (8008804 <HAL_DMA_Abort+0x22c>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d02c      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a6b      	ldr	r2, [pc, #428]	; (8008808 <HAL_DMA_Abort+0x230>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d027      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a6a      	ldr	r2, [pc, #424]	; (800880c <HAL_DMA_Abort+0x234>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d022      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a68      	ldr	r2, [pc, #416]	; (8008810 <HAL_DMA_Abort+0x238>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d01d      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a67      	ldr	r2, [pc, #412]	; (8008814 <HAL_DMA_Abort+0x23c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d018      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a65      	ldr	r2, [pc, #404]	; (8008818 <HAL_DMA_Abort+0x240>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d013      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a64      	ldr	r2, [pc, #400]	; (800881c <HAL_DMA_Abort+0x244>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d00e      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a62      	ldr	r2, [pc, #392]	; (8008820 <HAL_DMA_Abort+0x248>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d009      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a61      	ldr	r2, [pc, #388]	; (8008824 <HAL_DMA_Abort+0x24c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d004      	beq.n	80086ae <HAL_DMA_Abort+0xd6>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a5f      	ldr	r2, [pc, #380]	; (8008828 <HAL_DMA_Abort+0x250>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d101      	bne.n	80086b2 <HAL_DMA_Abort+0xda>
 80086ae:	2301      	movs	r3, #1
 80086b0:	e000      	b.n	80086b4 <HAL_DMA_Abort+0xdc>
 80086b2:	2300      	movs	r3, #0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d013      	beq.n	80086e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 021e 	bic.w	r2, r2, #30
 80086c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	695a      	ldr	r2, [r3, #20]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	617b      	str	r3, [r7, #20]
 80086de:	e00a      	b.n	80086f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 020e 	bic.w	r2, r2, #14
 80086ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a3c      	ldr	r2, [pc, #240]	; (80087ec <HAL_DMA_Abort+0x214>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d072      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a3a      	ldr	r2, [pc, #232]	; (80087f0 <HAL_DMA_Abort+0x218>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d06d      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a39      	ldr	r2, [pc, #228]	; (80087f4 <HAL_DMA_Abort+0x21c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d068      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a37      	ldr	r2, [pc, #220]	; (80087f8 <HAL_DMA_Abort+0x220>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d063      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a36      	ldr	r2, [pc, #216]	; (80087fc <HAL_DMA_Abort+0x224>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d05e      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a34      	ldr	r2, [pc, #208]	; (8008800 <HAL_DMA_Abort+0x228>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d059      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a33      	ldr	r2, [pc, #204]	; (8008804 <HAL_DMA_Abort+0x22c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d054      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a31      	ldr	r2, [pc, #196]	; (8008808 <HAL_DMA_Abort+0x230>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d04f      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a30      	ldr	r2, [pc, #192]	; (800880c <HAL_DMA_Abort+0x234>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d04a      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a2e      	ldr	r2, [pc, #184]	; (8008810 <HAL_DMA_Abort+0x238>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d045      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a2d      	ldr	r2, [pc, #180]	; (8008814 <HAL_DMA_Abort+0x23c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d040      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a2b      	ldr	r2, [pc, #172]	; (8008818 <HAL_DMA_Abort+0x240>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d03b      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a2a      	ldr	r2, [pc, #168]	; (800881c <HAL_DMA_Abort+0x244>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d036      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a28      	ldr	r2, [pc, #160]	; (8008820 <HAL_DMA_Abort+0x248>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d031      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a27      	ldr	r2, [pc, #156]	; (8008824 <HAL_DMA_Abort+0x24c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d02c      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a25      	ldr	r2, [pc, #148]	; (8008828 <HAL_DMA_Abort+0x250>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d027      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a24      	ldr	r2, [pc, #144]	; (800882c <HAL_DMA_Abort+0x254>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d022      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a22      	ldr	r2, [pc, #136]	; (8008830 <HAL_DMA_Abort+0x258>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d01d      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a21      	ldr	r2, [pc, #132]	; (8008834 <HAL_DMA_Abort+0x25c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d018      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1f      	ldr	r2, [pc, #124]	; (8008838 <HAL_DMA_Abort+0x260>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d013      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a1e      	ldr	r2, [pc, #120]	; (800883c <HAL_DMA_Abort+0x264>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d00e      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1c      	ldr	r2, [pc, #112]	; (8008840 <HAL_DMA_Abort+0x268>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d009      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a1b      	ldr	r2, [pc, #108]	; (8008844 <HAL_DMA_Abort+0x26c>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d004      	beq.n	80087e6 <HAL_DMA_Abort+0x20e>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a19      	ldr	r2, [pc, #100]	; (8008848 <HAL_DMA_Abort+0x270>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d132      	bne.n	800884c <HAL_DMA_Abort+0x274>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e031      	b.n	800884e <HAL_DMA_Abort+0x276>
 80087ea:	bf00      	nop
 80087ec:	40020010 	.word	0x40020010
 80087f0:	40020028 	.word	0x40020028
 80087f4:	40020040 	.word	0x40020040
 80087f8:	40020058 	.word	0x40020058
 80087fc:	40020070 	.word	0x40020070
 8008800:	40020088 	.word	0x40020088
 8008804:	400200a0 	.word	0x400200a0
 8008808:	400200b8 	.word	0x400200b8
 800880c:	40020410 	.word	0x40020410
 8008810:	40020428 	.word	0x40020428
 8008814:	40020440 	.word	0x40020440
 8008818:	40020458 	.word	0x40020458
 800881c:	40020470 	.word	0x40020470
 8008820:	40020488 	.word	0x40020488
 8008824:	400204a0 	.word	0x400204a0
 8008828:	400204b8 	.word	0x400204b8
 800882c:	58025408 	.word	0x58025408
 8008830:	5802541c 	.word	0x5802541c
 8008834:	58025430 	.word	0x58025430
 8008838:	58025444 	.word	0x58025444
 800883c:	58025458 	.word	0x58025458
 8008840:	5802546c 	.word	0x5802546c
 8008844:	58025480 	.word	0x58025480
 8008848:	58025494 	.word	0x58025494
 800884c:	2300      	movs	r3, #0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d007      	beq.n	8008862 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800885c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008860:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a6d      	ldr	r2, [pc, #436]	; (8008a1c <HAL_DMA_Abort+0x444>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d04a      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a6b      	ldr	r2, [pc, #428]	; (8008a20 <HAL_DMA_Abort+0x448>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d045      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a6a      	ldr	r2, [pc, #424]	; (8008a24 <HAL_DMA_Abort+0x44c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d040      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a68      	ldr	r2, [pc, #416]	; (8008a28 <HAL_DMA_Abort+0x450>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d03b      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a67      	ldr	r2, [pc, #412]	; (8008a2c <HAL_DMA_Abort+0x454>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d036      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a65      	ldr	r2, [pc, #404]	; (8008a30 <HAL_DMA_Abort+0x458>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d031      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a64      	ldr	r2, [pc, #400]	; (8008a34 <HAL_DMA_Abort+0x45c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d02c      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a62      	ldr	r2, [pc, #392]	; (8008a38 <HAL_DMA_Abort+0x460>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d027      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a61      	ldr	r2, [pc, #388]	; (8008a3c <HAL_DMA_Abort+0x464>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d022      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a5f      	ldr	r2, [pc, #380]	; (8008a40 <HAL_DMA_Abort+0x468>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d01d      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a5e      	ldr	r2, [pc, #376]	; (8008a44 <HAL_DMA_Abort+0x46c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d018      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a5c      	ldr	r2, [pc, #368]	; (8008a48 <HAL_DMA_Abort+0x470>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d013      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a5b      	ldr	r2, [pc, #364]	; (8008a4c <HAL_DMA_Abort+0x474>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00e      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a59      	ldr	r2, [pc, #356]	; (8008a50 <HAL_DMA_Abort+0x478>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d009      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a58      	ldr	r2, [pc, #352]	; (8008a54 <HAL_DMA_Abort+0x47c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d004      	beq.n	8008902 <HAL_DMA_Abort+0x32a>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a56      	ldr	r2, [pc, #344]	; (8008a58 <HAL_DMA_Abort+0x480>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d108      	bne.n	8008914 <HAL_DMA_Abort+0x33c>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 0201 	bic.w	r2, r2, #1
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	e007      	b.n	8008924 <HAL_DMA_Abort+0x34c>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0201 	bic.w	r2, r2, #1
 8008922:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008924:	e013      	b.n	800894e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008926:	f7fc fef1 	bl	800570c <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	2b05      	cmp	r3, #5
 8008932:	d90c      	bls.n	800894e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2220      	movs	r2, #32
 8008938:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2203      	movs	r2, #3
 800893e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e12d      	b.n	8008baa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e5      	bne.n	8008926 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a2f      	ldr	r2, [pc, #188]	; (8008a1c <HAL_DMA_Abort+0x444>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d04a      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a2d      	ldr	r2, [pc, #180]	; (8008a20 <HAL_DMA_Abort+0x448>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d045      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a2c      	ldr	r2, [pc, #176]	; (8008a24 <HAL_DMA_Abort+0x44c>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d040      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a2a      	ldr	r2, [pc, #168]	; (8008a28 <HAL_DMA_Abort+0x450>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d03b      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a29      	ldr	r2, [pc, #164]	; (8008a2c <HAL_DMA_Abort+0x454>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d036      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a27      	ldr	r2, [pc, #156]	; (8008a30 <HAL_DMA_Abort+0x458>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d031      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a26      	ldr	r2, [pc, #152]	; (8008a34 <HAL_DMA_Abort+0x45c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d02c      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a24      	ldr	r2, [pc, #144]	; (8008a38 <HAL_DMA_Abort+0x460>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d027      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a23      	ldr	r2, [pc, #140]	; (8008a3c <HAL_DMA_Abort+0x464>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d022      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a21      	ldr	r2, [pc, #132]	; (8008a40 <HAL_DMA_Abort+0x468>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d01d      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a20      	ldr	r2, [pc, #128]	; (8008a44 <HAL_DMA_Abort+0x46c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d018      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a1e      	ldr	r2, [pc, #120]	; (8008a48 <HAL_DMA_Abort+0x470>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d013      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a1d      	ldr	r2, [pc, #116]	; (8008a4c <HAL_DMA_Abort+0x474>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d00e      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a1b      	ldr	r2, [pc, #108]	; (8008a50 <HAL_DMA_Abort+0x478>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d009      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a1a      	ldr	r2, [pc, #104]	; (8008a54 <HAL_DMA_Abort+0x47c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d004      	beq.n	80089fa <HAL_DMA_Abort+0x422>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a18      	ldr	r2, [pc, #96]	; (8008a58 <HAL_DMA_Abort+0x480>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d101      	bne.n	80089fe <HAL_DMA_Abort+0x426>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e000      	b.n	8008a00 <HAL_DMA_Abort+0x428>
 80089fe:	2300      	movs	r3, #0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d02b      	beq.n	8008a5c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a08:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	223f      	movs	r2, #63	; 0x3f
 8008a14:	409a      	lsls	r2, r3
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	609a      	str	r2, [r3, #8]
 8008a1a:	e02a      	b.n	8008a72 <HAL_DMA_Abort+0x49a>
 8008a1c:	40020010 	.word	0x40020010
 8008a20:	40020028 	.word	0x40020028
 8008a24:	40020040 	.word	0x40020040
 8008a28:	40020058 	.word	0x40020058
 8008a2c:	40020070 	.word	0x40020070
 8008a30:	40020088 	.word	0x40020088
 8008a34:	400200a0 	.word	0x400200a0
 8008a38:	400200b8 	.word	0x400200b8
 8008a3c:	40020410 	.word	0x40020410
 8008a40:	40020428 	.word	0x40020428
 8008a44:	40020440 	.word	0x40020440
 8008a48:	40020458 	.word	0x40020458
 8008a4c:	40020470 	.word	0x40020470
 8008a50:	40020488 	.word	0x40020488
 8008a54:	400204a0 	.word	0x400204a0
 8008a58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a60:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a66:	f003 031f 	and.w	r3, r3, #31
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	409a      	lsls	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a4f      	ldr	r2, [pc, #316]	; (8008bb4 <HAL_DMA_Abort+0x5dc>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d072      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a4d      	ldr	r2, [pc, #308]	; (8008bb8 <HAL_DMA_Abort+0x5e0>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d06d      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a4c      	ldr	r2, [pc, #304]	; (8008bbc <HAL_DMA_Abort+0x5e4>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d068      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a4a      	ldr	r2, [pc, #296]	; (8008bc0 <HAL_DMA_Abort+0x5e8>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d063      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a49      	ldr	r2, [pc, #292]	; (8008bc4 <HAL_DMA_Abort+0x5ec>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d05e      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a47      	ldr	r2, [pc, #284]	; (8008bc8 <HAL_DMA_Abort+0x5f0>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d059      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a46      	ldr	r2, [pc, #280]	; (8008bcc <HAL_DMA_Abort+0x5f4>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d054      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a44      	ldr	r2, [pc, #272]	; (8008bd0 <HAL_DMA_Abort+0x5f8>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d04f      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a43      	ldr	r2, [pc, #268]	; (8008bd4 <HAL_DMA_Abort+0x5fc>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d04a      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a41      	ldr	r2, [pc, #260]	; (8008bd8 <HAL_DMA_Abort+0x600>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d045      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a40      	ldr	r2, [pc, #256]	; (8008bdc <HAL_DMA_Abort+0x604>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d040      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a3e      	ldr	r2, [pc, #248]	; (8008be0 <HAL_DMA_Abort+0x608>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d03b      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a3d      	ldr	r2, [pc, #244]	; (8008be4 <HAL_DMA_Abort+0x60c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d036      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a3b      	ldr	r2, [pc, #236]	; (8008be8 <HAL_DMA_Abort+0x610>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d031      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a3a      	ldr	r2, [pc, #232]	; (8008bec <HAL_DMA_Abort+0x614>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d02c      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a38      	ldr	r2, [pc, #224]	; (8008bf0 <HAL_DMA_Abort+0x618>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d027      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a37      	ldr	r2, [pc, #220]	; (8008bf4 <HAL_DMA_Abort+0x61c>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d022      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a35      	ldr	r2, [pc, #212]	; (8008bf8 <HAL_DMA_Abort+0x620>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d01d      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a34      	ldr	r2, [pc, #208]	; (8008bfc <HAL_DMA_Abort+0x624>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d018      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a32      	ldr	r2, [pc, #200]	; (8008c00 <HAL_DMA_Abort+0x628>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d013      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a31      	ldr	r2, [pc, #196]	; (8008c04 <HAL_DMA_Abort+0x62c>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00e      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a2f      	ldr	r2, [pc, #188]	; (8008c08 <HAL_DMA_Abort+0x630>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d009      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a2e      	ldr	r2, [pc, #184]	; (8008c0c <HAL_DMA_Abort+0x634>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d004      	beq.n	8008b62 <HAL_DMA_Abort+0x58a>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a2c      	ldr	r2, [pc, #176]	; (8008c10 <HAL_DMA_Abort+0x638>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d101      	bne.n	8008b66 <HAL_DMA_Abort+0x58e>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e000      	b.n	8008b68 <HAL_DMA_Abort+0x590>
 8008b66:	2300      	movs	r3, #0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d015      	beq.n	8008b98 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008b74:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00c      	beq.n	8008b98 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b8c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008b96:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	40020010 	.word	0x40020010
 8008bb8:	40020028 	.word	0x40020028
 8008bbc:	40020040 	.word	0x40020040
 8008bc0:	40020058 	.word	0x40020058
 8008bc4:	40020070 	.word	0x40020070
 8008bc8:	40020088 	.word	0x40020088
 8008bcc:	400200a0 	.word	0x400200a0
 8008bd0:	400200b8 	.word	0x400200b8
 8008bd4:	40020410 	.word	0x40020410
 8008bd8:	40020428 	.word	0x40020428
 8008bdc:	40020440 	.word	0x40020440
 8008be0:	40020458 	.word	0x40020458
 8008be4:	40020470 	.word	0x40020470
 8008be8:	40020488 	.word	0x40020488
 8008bec:	400204a0 	.word	0x400204a0
 8008bf0:	400204b8 	.word	0x400204b8
 8008bf4:	58025408 	.word	0x58025408
 8008bf8:	5802541c 	.word	0x5802541c
 8008bfc:	58025430 	.word	0x58025430
 8008c00:	58025444 	.word	0x58025444
 8008c04:	58025458 	.word	0x58025458
 8008c08:	5802546c 	.word	0x5802546c
 8008c0c:	58025480 	.word	0x58025480
 8008c10:	58025494 	.word	0x58025494

08008c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e237      	b.n	8009096 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d004      	beq.n	8008c3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2280      	movs	r2, #128	; 0x80
 8008c36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e22c      	b.n	8009096 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a5c      	ldr	r2, [pc, #368]	; (8008db4 <HAL_DMA_Abort_IT+0x1a0>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d04a      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a5b      	ldr	r2, [pc, #364]	; (8008db8 <HAL_DMA_Abort_IT+0x1a4>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d045      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a59      	ldr	r2, [pc, #356]	; (8008dbc <HAL_DMA_Abort_IT+0x1a8>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d040      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a58      	ldr	r2, [pc, #352]	; (8008dc0 <HAL_DMA_Abort_IT+0x1ac>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d03b      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a56      	ldr	r2, [pc, #344]	; (8008dc4 <HAL_DMA_Abort_IT+0x1b0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d036      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a55      	ldr	r2, [pc, #340]	; (8008dc8 <HAL_DMA_Abort_IT+0x1b4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d031      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a53      	ldr	r2, [pc, #332]	; (8008dcc <HAL_DMA_Abort_IT+0x1b8>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d02c      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a52      	ldr	r2, [pc, #328]	; (8008dd0 <HAL_DMA_Abort_IT+0x1bc>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d027      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a50      	ldr	r2, [pc, #320]	; (8008dd4 <HAL_DMA_Abort_IT+0x1c0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d022      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a4f      	ldr	r2, [pc, #316]	; (8008dd8 <HAL_DMA_Abort_IT+0x1c4>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d01d      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a4d      	ldr	r2, [pc, #308]	; (8008ddc <HAL_DMA_Abort_IT+0x1c8>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d018      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a4c      	ldr	r2, [pc, #304]	; (8008de0 <HAL_DMA_Abort_IT+0x1cc>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d013      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a4a      	ldr	r2, [pc, #296]	; (8008de4 <HAL_DMA_Abort_IT+0x1d0>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00e      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a49      	ldr	r2, [pc, #292]	; (8008de8 <HAL_DMA_Abort_IT+0x1d4>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d009      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a47      	ldr	r2, [pc, #284]	; (8008dec <HAL_DMA_Abort_IT+0x1d8>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d004      	beq.n	8008cdc <HAL_DMA_Abort_IT+0xc8>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a46      	ldr	r2, [pc, #280]	; (8008df0 <HAL_DMA_Abort_IT+0x1dc>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d101      	bne.n	8008ce0 <HAL_DMA_Abort_IT+0xcc>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e000      	b.n	8008ce2 <HAL_DMA_Abort_IT+0xce>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f000 8086 	beq.w	8008df4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2204      	movs	r2, #4
 8008cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a2f      	ldr	r2, [pc, #188]	; (8008db4 <HAL_DMA_Abort_IT+0x1a0>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d04a      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a2e      	ldr	r2, [pc, #184]	; (8008db8 <HAL_DMA_Abort_IT+0x1a4>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d045      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a2c      	ldr	r2, [pc, #176]	; (8008dbc <HAL_DMA_Abort_IT+0x1a8>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d040      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a2b      	ldr	r2, [pc, #172]	; (8008dc0 <HAL_DMA_Abort_IT+0x1ac>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d03b      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a29      	ldr	r2, [pc, #164]	; (8008dc4 <HAL_DMA_Abort_IT+0x1b0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d036      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a28      	ldr	r2, [pc, #160]	; (8008dc8 <HAL_DMA_Abort_IT+0x1b4>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d031      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a26      	ldr	r2, [pc, #152]	; (8008dcc <HAL_DMA_Abort_IT+0x1b8>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d02c      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a25      	ldr	r2, [pc, #148]	; (8008dd0 <HAL_DMA_Abort_IT+0x1bc>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d027      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a23      	ldr	r2, [pc, #140]	; (8008dd4 <HAL_DMA_Abort_IT+0x1c0>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d022      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a22      	ldr	r2, [pc, #136]	; (8008dd8 <HAL_DMA_Abort_IT+0x1c4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d01d      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a20      	ldr	r2, [pc, #128]	; (8008ddc <HAL_DMA_Abort_IT+0x1c8>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d018      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a1f      	ldr	r2, [pc, #124]	; (8008de0 <HAL_DMA_Abort_IT+0x1cc>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d013      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a1d      	ldr	r2, [pc, #116]	; (8008de4 <HAL_DMA_Abort_IT+0x1d0>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d00e      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a1c      	ldr	r2, [pc, #112]	; (8008de8 <HAL_DMA_Abort_IT+0x1d4>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d009      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a1a      	ldr	r2, [pc, #104]	; (8008dec <HAL_DMA_Abort_IT+0x1d8>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d004      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a19      	ldr	r2, [pc, #100]	; (8008df0 <HAL_DMA_Abort_IT+0x1dc>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d108      	bne.n	8008da2 <HAL_DMA_Abort_IT+0x18e>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0201 	bic.w	r2, r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	e178      	b.n	8009094 <HAL_DMA_Abort_IT+0x480>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0201 	bic.w	r2, r2, #1
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	e16f      	b.n	8009094 <HAL_DMA_Abort_IT+0x480>
 8008db4:	40020010 	.word	0x40020010
 8008db8:	40020028 	.word	0x40020028
 8008dbc:	40020040 	.word	0x40020040
 8008dc0:	40020058 	.word	0x40020058
 8008dc4:	40020070 	.word	0x40020070
 8008dc8:	40020088 	.word	0x40020088
 8008dcc:	400200a0 	.word	0x400200a0
 8008dd0:	400200b8 	.word	0x400200b8
 8008dd4:	40020410 	.word	0x40020410
 8008dd8:	40020428 	.word	0x40020428
 8008ddc:	40020440 	.word	0x40020440
 8008de0:	40020458 	.word	0x40020458
 8008de4:	40020470 	.word	0x40020470
 8008de8:	40020488 	.word	0x40020488
 8008dec:	400204a0 	.word	0x400204a0
 8008df0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 020e 	bic.w	r2, r2, #14
 8008e02:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a6c      	ldr	r2, [pc, #432]	; (8008fbc <HAL_DMA_Abort_IT+0x3a8>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d04a      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a6b      	ldr	r2, [pc, #428]	; (8008fc0 <HAL_DMA_Abort_IT+0x3ac>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d045      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a69      	ldr	r2, [pc, #420]	; (8008fc4 <HAL_DMA_Abort_IT+0x3b0>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d040      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a68      	ldr	r2, [pc, #416]	; (8008fc8 <HAL_DMA_Abort_IT+0x3b4>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d03b      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a66      	ldr	r2, [pc, #408]	; (8008fcc <HAL_DMA_Abort_IT+0x3b8>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d036      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a65      	ldr	r2, [pc, #404]	; (8008fd0 <HAL_DMA_Abort_IT+0x3bc>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d031      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a63      	ldr	r2, [pc, #396]	; (8008fd4 <HAL_DMA_Abort_IT+0x3c0>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d02c      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a62      	ldr	r2, [pc, #392]	; (8008fd8 <HAL_DMA_Abort_IT+0x3c4>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d027      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a60      	ldr	r2, [pc, #384]	; (8008fdc <HAL_DMA_Abort_IT+0x3c8>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d022      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a5f      	ldr	r2, [pc, #380]	; (8008fe0 <HAL_DMA_Abort_IT+0x3cc>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d01d      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a5d      	ldr	r2, [pc, #372]	; (8008fe4 <HAL_DMA_Abort_IT+0x3d0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d018      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a5c      	ldr	r2, [pc, #368]	; (8008fe8 <HAL_DMA_Abort_IT+0x3d4>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d013      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a5a      	ldr	r2, [pc, #360]	; (8008fec <HAL_DMA_Abort_IT+0x3d8>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d00e      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a59      	ldr	r2, [pc, #356]	; (8008ff0 <HAL_DMA_Abort_IT+0x3dc>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d009      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a57      	ldr	r2, [pc, #348]	; (8008ff4 <HAL_DMA_Abort_IT+0x3e0>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d004      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x290>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a56      	ldr	r2, [pc, #344]	; (8008ff8 <HAL_DMA_Abort_IT+0x3e4>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d108      	bne.n	8008eb6 <HAL_DMA_Abort_IT+0x2a2>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f022 0201 	bic.w	r2, r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	e007      	b.n	8008ec6 <HAL_DMA_Abort_IT+0x2b2>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f022 0201 	bic.w	r2, r2, #1
 8008ec4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a3c      	ldr	r2, [pc, #240]	; (8008fbc <HAL_DMA_Abort_IT+0x3a8>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d072      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a3a      	ldr	r2, [pc, #232]	; (8008fc0 <HAL_DMA_Abort_IT+0x3ac>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d06d      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a39      	ldr	r2, [pc, #228]	; (8008fc4 <HAL_DMA_Abort_IT+0x3b0>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d068      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a37      	ldr	r2, [pc, #220]	; (8008fc8 <HAL_DMA_Abort_IT+0x3b4>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d063      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a36      	ldr	r2, [pc, #216]	; (8008fcc <HAL_DMA_Abort_IT+0x3b8>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d05e      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a34      	ldr	r2, [pc, #208]	; (8008fd0 <HAL_DMA_Abort_IT+0x3bc>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d059      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a33      	ldr	r2, [pc, #204]	; (8008fd4 <HAL_DMA_Abort_IT+0x3c0>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d054      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a31      	ldr	r2, [pc, #196]	; (8008fd8 <HAL_DMA_Abort_IT+0x3c4>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d04f      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a30      	ldr	r2, [pc, #192]	; (8008fdc <HAL_DMA_Abort_IT+0x3c8>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d04a      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a2e      	ldr	r2, [pc, #184]	; (8008fe0 <HAL_DMA_Abort_IT+0x3cc>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d045      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a2d      	ldr	r2, [pc, #180]	; (8008fe4 <HAL_DMA_Abort_IT+0x3d0>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d040      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a2b      	ldr	r2, [pc, #172]	; (8008fe8 <HAL_DMA_Abort_IT+0x3d4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d03b      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a2a      	ldr	r2, [pc, #168]	; (8008fec <HAL_DMA_Abort_IT+0x3d8>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d036      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a28      	ldr	r2, [pc, #160]	; (8008ff0 <HAL_DMA_Abort_IT+0x3dc>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d031      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a27      	ldr	r2, [pc, #156]	; (8008ff4 <HAL_DMA_Abort_IT+0x3e0>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d02c      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a25      	ldr	r2, [pc, #148]	; (8008ff8 <HAL_DMA_Abort_IT+0x3e4>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d027      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a24      	ldr	r2, [pc, #144]	; (8008ffc <HAL_DMA_Abort_IT+0x3e8>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d022      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a22      	ldr	r2, [pc, #136]	; (8009000 <HAL_DMA_Abort_IT+0x3ec>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d01d      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a21      	ldr	r2, [pc, #132]	; (8009004 <HAL_DMA_Abort_IT+0x3f0>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d018      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a1f      	ldr	r2, [pc, #124]	; (8009008 <HAL_DMA_Abort_IT+0x3f4>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d013      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a1e      	ldr	r2, [pc, #120]	; (800900c <HAL_DMA_Abort_IT+0x3f8>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00e      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a1c      	ldr	r2, [pc, #112]	; (8009010 <HAL_DMA_Abort_IT+0x3fc>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d009      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a1b      	ldr	r2, [pc, #108]	; (8009014 <HAL_DMA_Abort_IT+0x400>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d004      	beq.n	8008fb6 <HAL_DMA_Abort_IT+0x3a2>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a19      	ldr	r2, [pc, #100]	; (8009018 <HAL_DMA_Abort_IT+0x404>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d132      	bne.n	800901c <HAL_DMA_Abort_IT+0x408>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e031      	b.n	800901e <HAL_DMA_Abort_IT+0x40a>
 8008fba:	bf00      	nop
 8008fbc:	40020010 	.word	0x40020010
 8008fc0:	40020028 	.word	0x40020028
 8008fc4:	40020040 	.word	0x40020040
 8008fc8:	40020058 	.word	0x40020058
 8008fcc:	40020070 	.word	0x40020070
 8008fd0:	40020088 	.word	0x40020088
 8008fd4:	400200a0 	.word	0x400200a0
 8008fd8:	400200b8 	.word	0x400200b8
 8008fdc:	40020410 	.word	0x40020410
 8008fe0:	40020428 	.word	0x40020428
 8008fe4:	40020440 	.word	0x40020440
 8008fe8:	40020458 	.word	0x40020458
 8008fec:	40020470 	.word	0x40020470
 8008ff0:	40020488 	.word	0x40020488
 8008ff4:	400204a0 	.word	0x400204a0
 8008ff8:	400204b8 	.word	0x400204b8
 8008ffc:	58025408 	.word	0x58025408
 8009000:	5802541c 	.word	0x5802541c
 8009004:	58025430 	.word	0x58025430
 8009008:	58025444 	.word	0x58025444
 800900c:	58025458 	.word	0x58025458
 8009010:	5802546c 	.word	0x5802546c
 8009014:	58025480 	.word	0x58025480
 8009018:	58025494 	.word	0x58025494
 800901c:	2300      	movs	r3, #0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d028      	beq.n	8009074 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800902c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009030:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009036:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800903c:	f003 031f 	and.w	r3, r3, #31
 8009040:	2201      	movs	r2, #1
 8009042:	409a      	lsls	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009050:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00c      	beq.n	8009074 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009068:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009072:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop

080090a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08a      	sub	sp, #40	; 0x28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80090ac:	4b67      	ldr	r3, [pc, #412]	; (800924c <HAL_DMA_IRQHandler+0x1ac>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a67      	ldr	r2, [pc, #412]	; (8009250 <HAL_DMA_IRQHandler+0x1b0>)
 80090b2:	fba2 2303 	umull	r2, r3, r2, r3
 80090b6:	0a9b      	lsrs	r3, r3, #10
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a5f      	ldr	r2, [pc, #380]	; (8009254 <HAL_DMA_IRQHandler+0x1b4>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d04a      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a5d      	ldr	r2, [pc, #372]	; (8009258 <HAL_DMA_IRQHandler+0x1b8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d045      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a5c      	ldr	r2, [pc, #368]	; (800925c <HAL_DMA_IRQHandler+0x1bc>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d040      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a5a      	ldr	r2, [pc, #360]	; (8009260 <HAL_DMA_IRQHandler+0x1c0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d03b      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a59      	ldr	r2, [pc, #356]	; (8009264 <HAL_DMA_IRQHandler+0x1c4>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d036      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a57      	ldr	r2, [pc, #348]	; (8009268 <HAL_DMA_IRQHandler+0x1c8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d031      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a56      	ldr	r2, [pc, #344]	; (800926c <HAL_DMA_IRQHandler+0x1cc>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d02c      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a54      	ldr	r2, [pc, #336]	; (8009270 <HAL_DMA_IRQHandler+0x1d0>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d027      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a53      	ldr	r2, [pc, #332]	; (8009274 <HAL_DMA_IRQHandler+0x1d4>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d022      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a51      	ldr	r2, [pc, #324]	; (8009278 <HAL_DMA_IRQHandler+0x1d8>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d01d      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a50      	ldr	r2, [pc, #320]	; (800927c <HAL_DMA_IRQHandler+0x1dc>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d018      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a4e      	ldr	r2, [pc, #312]	; (8009280 <HAL_DMA_IRQHandler+0x1e0>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d013      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a4d      	ldr	r2, [pc, #308]	; (8009284 <HAL_DMA_IRQHandler+0x1e4>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00e      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a4b      	ldr	r2, [pc, #300]	; (8009288 <HAL_DMA_IRQHandler+0x1e8>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d009      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a4a      	ldr	r2, [pc, #296]	; (800928c <HAL_DMA_IRQHandler+0x1ec>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d004      	beq.n	8009172 <HAL_DMA_IRQHandler+0xd2>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a48      	ldr	r2, [pc, #288]	; (8009290 <HAL_DMA_IRQHandler+0x1f0>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d101      	bne.n	8009176 <HAL_DMA_IRQHandler+0xd6>
 8009172:	2301      	movs	r3, #1
 8009174:	e000      	b.n	8009178 <HAL_DMA_IRQHandler+0xd8>
 8009176:	2300      	movs	r3, #0
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 842b 	beq.w	80099d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009182:	f003 031f 	and.w	r3, r3, #31
 8009186:	2208      	movs	r2, #8
 8009188:	409a      	lsls	r2, r3
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	4013      	ands	r3, r2
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 80a2 	beq.w	80092d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a2e      	ldr	r2, [pc, #184]	; (8009254 <HAL_DMA_IRQHandler+0x1b4>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d04a      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a2d      	ldr	r2, [pc, #180]	; (8009258 <HAL_DMA_IRQHandler+0x1b8>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d045      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a2b      	ldr	r2, [pc, #172]	; (800925c <HAL_DMA_IRQHandler+0x1bc>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d040      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a2a      	ldr	r2, [pc, #168]	; (8009260 <HAL_DMA_IRQHandler+0x1c0>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d03b      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a28      	ldr	r2, [pc, #160]	; (8009264 <HAL_DMA_IRQHandler+0x1c4>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d036      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a27      	ldr	r2, [pc, #156]	; (8009268 <HAL_DMA_IRQHandler+0x1c8>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d031      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a25      	ldr	r2, [pc, #148]	; (800926c <HAL_DMA_IRQHandler+0x1cc>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d02c      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a24      	ldr	r2, [pc, #144]	; (8009270 <HAL_DMA_IRQHandler+0x1d0>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d027      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a22      	ldr	r2, [pc, #136]	; (8009274 <HAL_DMA_IRQHandler+0x1d4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d022      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a21      	ldr	r2, [pc, #132]	; (8009278 <HAL_DMA_IRQHandler+0x1d8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d01d      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a1f      	ldr	r2, [pc, #124]	; (800927c <HAL_DMA_IRQHandler+0x1dc>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d018      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a1e      	ldr	r2, [pc, #120]	; (8009280 <HAL_DMA_IRQHandler+0x1e0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d013      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a1c      	ldr	r2, [pc, #112]	; (8009284 <HAL_DMA_IRQHandler+0x1e4>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00e      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a1b      	ldr	r2, [pc, #108]	; (8009288 <HAL_DMA_IRQHandler+0x1e8>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d009      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a19      	ldr	r2, [pc, #100]	; (800928c <HAL_DMA_IRQHandler+0x1ec>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d004      	beq.n	8009234 <HAL_DMA_IRQHandler+0x194>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a18      	ldr	r2, [pc, #96]	; (8009290 <HAL_DMA_IRQHandler+0x1f0>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d12f      	bne.n	8009294 <HAL_DMA_IRQHandler+0x1f4>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0304 	and.w	r3, r3, #4
 800923e:	2b00      	cmp	r3, #0
 8009240:	bf14      	ite	ne
 8009242:	2301      	movne	r3, #1
 8009244:	2300      	moveq	r3, #0
 8009246:	b2db      	uxtb	r3, r3
 8009248:	e02e      	b.n	80092a8 <HAL_DMA_IRQHandler+0x208>
 800924a:	bf00      	nop
 800924c:	24000090 	.word	0x24000090
 8009250:	1b4e81b5 	.word	0x1b4e81b5
 8009254:	40020010 	.word	0x40020010
 8009258:	40020028 	.word	0x40020028
 800925c:	40020040 	.word	0x40020040
 8009260:	40020058 	.word	0x40020058
 8009264:	40020070 	.word	0x40020070
 8009268:	40020088 	.word	0x40020088
 800926c:	400200a0 	.word	0x400200a0
 8009270:	400200b8 	.word	0x400200b8
 8009274:	40020410 	.word	0x40020410
 8009278:	40020428 	.word	0x40020428
 800927c:	40020440 	.word	0x40020440
 8009280:	40020458 	.word	0x40020458
 8009284:	40020470 	.word	0x40020470
 8009288:	40020488 	.word	0x40020488
 800928c:	400204a0 	.word	0x400204a0
 8009290:	400204b8 	.word	0x400204b8
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0308 	and.w	r3, r3, #8
 800929e:	2b00      	cmp	r3, #0
 80092a0:	bf14      	ite	ne
 80092a2:	2301      	movne	r3, #1
 80092a4:	2300      	moveq	r3, #0
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d015      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 0204 	bic.w	r2, r2, #4
 80092ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092c0:	f003 031f 	and.w	r3, r3, #31
 80092c4:	2208      	movs	r2, #8
 80092c6:	409a      	lsls	r2, r3
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092d0:	f043 0201 	orr.w	r2, r3, #1
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092dc:	f003 031f 	and.w	r3, r3, #31
 80092e0:	69ba      	ldr	r2, [r7, #24]
 80092e2:	fa22 f303 	lsr.w	r3, r2, r3
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d06e      	beq.n	80093cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a69      	ldr	r2, [pc, #420]	; (8009498 <HAL_DMA_IRQHandler+0x3f8>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d04a      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a67      	ldr	r2, [pc, #412]	; (800949c <HAL_DMA_IRQHandler+0x3fc>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d045      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a66      	ldr	r2, [pc, #408]	; (80094a0 <HAL_DMA_IRQHandler+0x400>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d040      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a64      	ldr	r2, [pc, #400]	; (80094a4 <HAL_DMA_IRQHandler+0x404>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d03b      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a63      	ldr	r2, [pc, #396]	; (80094a8 <HAL_DMA_IRQHandler+0x408>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d036      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a61      	ldr	r2, [pc, #388]	; (80094ac <HAL_DMA_IRQHandler+0x40c>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d031      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a60      	ldr	r2, [pc, #384]	; (80094b0 <HAL_DMA_IRQHandler+0x410>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d02c      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a5e      	ldr	r2, [pc, #376]	; (80094b4 <HAL_DMA_IRQHandler+0x414>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d027      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a5d      	ldr	r2, [pc, #372]	; (80094b8 <HAL_DMA_IRQHandler+0x418>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d022      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a5b      	ldr	r2, [pc, #364]	; (80094bc <HAL_DMA_IRQHandler+0x41c>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d01d      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a5a      	ldr	r2, [pc, #360]	; (80094c0 <HAL_DMA_IRQHandler+0x420>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d018      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a58      	ldr	r2, [pc, #352]	; (80094c4 <HAL_DMA_IRQHandler+0x424>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d013      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a57      	ldr	r2, [pc, #348]	; (80094c8 <HAL_DMA_IRQHandler+0x428>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d00e      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a55      	ldr	r2, [pc, #340]	; (80094cc <HAL_DMA_IRQHandler+0x42c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d009      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a54      	ldr	r2, [pc, #336]	; (80094d0 <HAL_DMA_IRQHandler+0x430>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d004      	beq.n	800938e <HAL_DMA_IRQHandler+0x2ee>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a52      	ldr	r2, [pc, #328]	; (80094d4 <HAL_DMA_IRQHandler+0x434>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d10a      	bne.n	80093a4 <HAL_DMA_IRQHandler+0x304>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009398:	2b00      	cmp	r3, #0
 800939a:	bf14      	ite	ne
 800939c:	2301      	movne	r3, #1
 800939e:	2300      	moveq	r3, #0
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	e003      	b.n	80093ac <HAL_DMA_IRQHandler+0x30c>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2300      	movs	r3, #0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00d      	beq.n	80093cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b4:	f003 031f 	and.w	r3, r3, #31
 80093b8:	2201      	movs	r2, #1
 80093ba:	409a      	lsls	r2, r3
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c4:	f043 0202 	orr.w	r2, r3, #2
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093d0:	f003 031f 	and.w	r3, r3, #31
 80093d4:	2204      	movs	r2, #4
 80093d6:	409a      	lsls	r2, r3
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	4013      	ands	r3, r2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 808f 	beq.w	8009500 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a2c      	ldr	r2, [pc, #176]	; (8009498 <HAL_DMA_IRQHandler+0x3f8>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d04a      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a2a      	ldr	r2, [pc, #168]	; (800949c <HAL_DMA_IRQHandler+0x3fc>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d045      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a29      	ldr	r2, [pc, #164]	; (80094a0 <HAL_DMA_IRQHandler+0x400>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d040      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a27      	ldr	r2, [pc, #156]	; (80094a4 <HAL_DMA_IRQHandler+0x404>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d03b      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a26      	ldr	r2, [pc, #152]	; (80094a8 <HAL_DMA_IRQHandler+0x408>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d036      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a24      	ldr	r2, [pc, #144]	; (80094ac <HAL_DMA_IRQHandler+0x40c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d031      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a23      	ldr	r2, [pc, #140]	; (80094b0 <HAL_DMA_IRQHandler+0x410>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d02c      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a21      	ldr	r2, [pc, #132]	; (80094b4 <HAL_DMA_IRQHandler+0x414>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d027      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a20      	ldr	r2, [pc, #128]	; (80094b8 <HAL_DMA_IRQHandler+0x418>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d022      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a1e      	ldr	r2, [pc, #120]	; (80094bc <HAL_DMA_IRQHandler+0x41c>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d01d      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a1d      	ldr	r2, [pc, #116]	; (80094c0 <HAL_DMA_IRQHandler+0x420>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d018      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a1b      	ldr	r2, [pc, #108]	; (80094c4 <HAL_DMA_IRQHandler+0x424>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d013      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a1a      	ldr	r2, [pc, #104]	; (80094c8 <HAL_DMA_IRQHandler+0x428>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d00e      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a18      	ldr	r2, [pc, #96]	; (80094cc <HAL_DMA_IRQHandler+0x42c>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d009      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a17      	ldr	r2, [pc, #92]	; (80094d0 <HAL_DMA_IRQHandler+0x430>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d004      	beq.n	8009482 <HAL_DMA_IRQHandler+0x3e2>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a15      	ldr	r2, [pc, #84]	; (80094d4 <HAL_DMA_IRQHandler+0x434>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d12a      	bne.n	80094d8 <HAL_DMA_IRQHandler+0x438>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b00      	cmp	r3, #0
 800948e:	bf14      	ite	ne
 8009490:	2301      	movne	r3, #1
 8009492:	2300      	moveq	r3, #0
 8009494:	b2db      	uxtb	r3, r3
 8009496:	e023      	b.n	80094e0 <HAL_DMA_IRQHandler+0x440>
 8009498:	40020010 	.word	0x40020010
 800949c:	40020028 	.word	0x40020028
 80094a0:	40020040 	.word	0x40020040
 80094a4:	40020058 	.word	0x40020058
 80094a8:	40020070 	.word	0x40020070
 80094ac:	40020088 	.word	0x40020088
 80094b0:	400200a0 	.word	0x400200a0
 80094b4:	400200b8 	.word	0x400200b8
 80094b8:	40020410 	.word	0x40020410
 80094bc:	40020428 	.word	0x40020428
 80094c0:	40020440 	.word	0x40020440
 80094c4:	40020458 	.word	0x40020458
 80094c8:	40020470 	.word	0x40020470
 80094cc:	40020488 	.word	0x40020488
 80094d0:	400204a0 	.word	0x400204a0
 80094d4:	400204b8 	.word	0x400204b8
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2300      	movs	r3, #0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00d      	beq.n	8009500 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e8:	f003 031f 	and.w	r3, r3, #31
 80094ec:	2204      	movs	r2, #4
 80094ee:	409a      	lsls	r2, r3
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f8:	f043 0204 	orr.w	r2, r3, #4
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009504:	f003 031f 	and.w	r3, r3, #31
 8009508:	2210      	movs	r2, #16
 800950a:	409a      	lsls	r2, r3
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	4013      	ands	r3, r2
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 80a6 	beq.w	8009662 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a85      	ldr	r2, [pc, #532]	; (8009730 <HAL_DMA_IRQHandler+0x690>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d04a      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a83      	ldr	r2, [pc, #524]	; (8009734 <HAL_DMA_IRQHandler+0x694>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d045      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a82      	ldr	r2, [pc, #520]	; (8009738 <HAL_DMA_IRQHandler+0x698>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d040      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a80      	ldr	r2, [pc, #512]	; (800973c <HAL_DMA_IRQHandler+0x69c>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d03b      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a7f      	ldr	r2, [pc, #508]	; (8009740 <HAL_DMA_IRQHandler+0x6a0>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d036      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a7d      	ldr	r2, [pc, #500]	; (8009744 <HAL_DMA_IRQHandler+0x6a4>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d031      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a7c      	ldr	r2, [pc, #496]	; (8009748 <HAL_DMA_IRQHandler+0x6a8>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d02c      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a7a      	ldr	r2, [pc, #488]	; (800974c <HAL_DMA_IRQHandler+0x6ac>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d027      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a79      	ldr	r2, [pc, #484]	; (8009750 <HAL_DMA_IRQHandler+0x6b0>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d022      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a77      	ldr	r2, [pc, #476]	; (8009754 <HAL_DMA_IRQHandler+0x6b4>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d01d      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a76      	ldr	r2, [pc, #472]	; (8009758 <HAL_DMA_IRQHandler+0x6b8>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d018      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a74      	ldr	r2, [pc, #464]	; (800975c <HAL_DMA_IRQHandler+0x6bc>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d013      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a73      	ldr	r2, [pc, #460]	; (8009760 <HAL_DMA_IRQHandler+0x6c0>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00e      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a71      	ldr	r2, [pc, #452]	; (8009764 <HAL_DMA_IRQHandler+0x6c4>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d009      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a70      	ldr	r2, [pc, #448]	; (8009768 <HAL_DMA_IRQHandler+0x6c8>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d004      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x516>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a6e      	ldr	r2, [pc, #440]	; (800976c <HAL_DMA_IRQHandler+0x6cc>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d10a      	bne.n	80095cc <HAL_DMA_IRQHandler+0x52c>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0308 	and.w	r3, r3, #8
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bf14      	ite	ne
 80095c4:	2301      	movne	r3, #1
 80095c6:	2300      	moveq	r3, #0
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	e009      	b.n	80095e0 <HAL_DMA_IRQHandler+0x540>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0304 	and.w	r3, r3, #4
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	bf14      	ite	ne
 80095da:	2301      	movne	r3, #1
 80095dc:	2300      	moveq	r3, #0
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d03e      	beq.n	8009662 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095e8:	f003 031f 	and.w	r3, r3, #31
 80095ec:	2210      	movs	r2, #16
 80095ee:	409a      	lsls	r2, r3
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d018      	beq.n	8009634 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d108      	bne.n	8009622 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	2b00      	cmp	r3, #0
 8009616:	d024      	beq.n	8009662 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	4798      	blx	r3
 8009620:	e01f      	b.n	8009662 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009626:	2b00      	cmp	r3, #0
 8009628:	d01b      	beq.n	8009662 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	4798      	blx	r3
 8009632:	e016      	b.n	8009662 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800963e:	2b00      	cmp	r3, #0
 8009640:	d107      	bne.n	8009652 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0208 	bic.w	r2, r2, #8
 8009650:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009666:	f003 031f 	and.w	r3, r3, #31
 800966a:	2220      	movs	r2, #32
 800966c:	409a      	lsls	r2, r3
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	4013      	ands	r3, r2
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 8110 	beq.w	8009898 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a2c      	ldr	r2, [pc, #176]	; (8009730 <HAL_DMA_IRQHandler+0x690>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d04a      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a2b      	ldr	r2, [pc, #172]	; (8009734 <HAL_DMA_IRQHandler+0x694>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d045      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a29      	ldr	r2, [pc, #164]	; (8009738 <HAL_DMA_IRQHandler+0x698>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d040      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a28      	ldr	r2, [pc, #160]	; (800973c <HAL_DMA_IRQHandler+0x69c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d03b      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a26      	ldr	r2, [pc, #152]	; (8009740 <HAL_DMA_IRQHandler+0x6a0>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d036      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a25      	ldr	r2, [pc, #148]	; (8009744 <HAL_DMA_IRQHandler+0x6a4>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d031      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a23      	ldr	r2, [pc, #140]	; (8009748 <HAL_DMA_IRQHandler+0x6a8>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d02c      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a22      	ldr	r2, [pc, #136]	; (800974c <HAL_DMA_IRQHandler+0x6ac>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d027      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a20      	ldr	r2, [pc, #128]	; (8009750 <HAL_DMA_IRQHandler+0x6b0>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d022      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a1f      	ldr	r2, [pc, #124]	; (8009754 <HAL_DMA_IRQHandler+0x6b4>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d01d      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a1d      	ldr	r2, [pc, #116]	; (8009758 <HAL_DMA_IRQHandler+0x6b8>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d018      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a1c      	ldr	r2, [pc, #112]	; (800975c <HAL_DMA_IRQHandler+0x6bc>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d013      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a1a      	ldr	r2, [pc, #104]	; (8009760 <HAL_DMA_IRQHandler+0x6c0>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d00e      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a19      	ldr	r2, [pc, #100]	; (8009764 <HAL_DMA_IRQHandler+0x6c4>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d009      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a17      	ldr	r2, [pc, #92]	; (8009768 <HAL_DMA_IRQHandler+0x6c8>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d004      	beq.n	8009718 <HAL_DMA_IRQHandler+0x678>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a16      	ldr	r2, [pc, #88]	; (800976c <HAL_DMA_IRQHandler+0x6cc>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d12b      	bne.n	8009770 <HAL_DMA_IRQHandler+0x6d0>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0310 	and.w	r3, r3, #16
 8009722:	2b00      	cmp	r3, #0
 8009724:	bf14      	ite	ne
 8009726:	2301      	movne	r3, #1
 8009728:	2300      	moveq	r3, #0
 800972a:	b2db      	uxtb	r3, r3
 800972c:	e02a      	b.n	8009784 <HAL_DMA_IRQHandler+0x6e4>
 800972e:	bf00      	nop
 8009730:	40020010 	.word	0x40020010
 8009734:	40020028 	.word	0x40020028
 8009738:	40020040 	.word	0x40020040
 800973c:	40020058 	.word	0x40020058
 8009740:	40020070 	.word	0x40020070
 8009744:	40020088 	.word	0x40020088
 8009748:	400200a0 	.word	0x400200a0
 800974c:	400200b8 	.word	0x400200b8
 8009750:	40020410 	.word	0x40020410
 8009754:	40020428 	.word	0x40020428
 8009758:	40020440 	.word	0x40020440
 800975c:	40020458 	.word	0x40020458
 8009760:	40020470 	.word	0x40020470
 8009764:	40020488 	.word	0x40020488
 8009768:	400204a0 	.word	0x400204a0
 800976c:	400204b8 	.word	0x400204b8
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	bf14      	ite	ne
 800977e:	2301      	movne	r3, #1
 8009780:	2300      	moveq	r3, #0
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 8087 	beq.w	8009898 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800978e:	f003 031f 	and.w	r3, r3, #31
 8009792:	2220      	movs	r2, #32
 8009794:	409a      	lsls	r2, r3
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	d139      	bne.n	800981a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f022 0216 	bic.w	r2, r2, #22
 80097b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	695a      	ldr	r2, [r3, #20]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d103      	bne.n	80097d6 <HAL_DMA_IRQHandler+0x736>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d007      	beq.n	80097e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0208 	bic.w	r2, r2, #8
 80097e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ea:	f003 031f 	and.w	r3, r3, #31
 80097ee:	223f      	movs	r2, #63	; 0x3f
 80097f0:	409a      	lsls	r2, r3
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 834a 	beq.w	8009ea4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	4798      	blx	r3
          }
          return;
 8009818:	e344      	b.n	8009ea4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d018      	beq.n	800985a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d108      	bne.n	8009848 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983a:	2b00      	cmp	r3, #0
 800983c:	d02c      	beq.n	8009898 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	4798      	blx	r3
 8009846:	e027      	b.n	8009898 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984c:	2b00      	cmp	r3, #0
 800984e:	d023      	beq.n	8009898 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	4798      	blx	r3
 8009858:	e01e      	b.n	8009898 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10f      	bne.n	8009888 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f022 0210 	bic.w	r2, r2, #16
 8009876:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8306 	beq.w	8009eae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 8088 	beq.w	80099c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2204      	movs	r2, #4
 80098b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a7a      	ldr	r2, [pc, #488]	; (8009aa8 <HAL_DMA_IRQHandler+0xa08>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d04a      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a79      	ldr	r2, [pc, #484]	; (8009aac <HAL_DMA_IRQHandler+0xa0c>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d045      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a77      	ldr	r2, [pc, #476]	; (8009ab0 <HAL_DMA_IRQHandler+0xa10>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d040      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a76      	ldr	r2, [pc, #472]	; (8009ab4 <HAL_DMA_IRQHandler+0xa14>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d03b      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a74      	ldr	r2, [pc, #464]	; (8009ab8 <HAL_DMA_IRQHandler+0xa18>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d036      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a73      	ldr	r2, [pc, #460]	; (8009abc <HAL_DMA_IRQHandler+0xa1c>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d031      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a71      	ldr	r2, [pc, #452]	; (8009ac0 <HAL_DMA_IRQHandler+0xa20>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d02c      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a70      	ldr	r2, [pc, #448]	; (8009ac4 <HAL_DMA_IRQHandler+0xa24>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d027      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a6e      	ldr	r2, [pc, #440]	; (8009ac8 <HAL_DMA_IRQHandler+0xa28>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d022      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a6d      	ldr	r2, [pc, #436]	; (8009acc <HAL_DMA_IRQHandler+0xa2c>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d01d      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a6b      	ldr	r2, [pc, #428]	; (8009ad0 <HAL_DMA_IRQHandler+0xa30>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d018      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a6a      	ldr	r2, [pc, #424]	; (8009ad4 <HAL_DMA_IRQHandler+0xa34>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d013      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a68      	ldr	r2, [pc, #416]	; (8009ad8 <HAL_DMA_IRQHandler+0xa38>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d00e      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a67      	ldr	r2, [pc, #412]	; (8009adc <HAL_DMA_IRQHandler+0xa3c>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d009      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a65      	ldr	r2, [pc, #404]	; (8009ae0 <HAL_DMA_IRQHandler+0xa40>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d004      	beq.n	8009958 <HAL_DMA_IRQHandler+0x8b8>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a64      	ldr	r2, [pc, #400]	; (8009ae4 <HAL_DMA_IRQHandler+0xa44>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d108      	bne.n	800996a <HAL_DMA_IRQHandler+0x8ca>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 0201 	bic.w	r2, r2, #1
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	e007      	b.n	800997a <HAL_DMA_IRQHandler+0x8da>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f022 0201 	bic.w	r2, r2, #1
 8009978:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	3301      	adds	r3, #1
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009982:	429a      	cmp	r2, r3
 8009984:	d307      	bcc.n	8009996 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1f2      	bne.n	800997a <HAL_DMA_IRQHandler+0x8da>
 8009994:	e000      	b.n	8009998 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009996:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d004      	beq.n	80099b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2203      	movs	r2, #3
 80099aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80099ae:	e003      	b.n	80099b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f000 8272 	beq.w	8009eae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	4798      	blx	r3
 80099d2:	e26c      	b.n	8009eae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a43      	ldr	r2, [pc, #268]	; (8009ae8 <HAL_DMA_IRQHandler+0xa48>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d022      	beq.n	8009a24 <HAL_DMA_IRQHandler+0x984>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a42      	ldr	r2, [pc, #264]	; (8009aec <HAL_DMA_IRQHandler+0xa4c>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d01d      	beq.n	8009a24 <HAL_DMA_IRQHandler+0x984>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a40      	ldr	r2, [pc, #256]	; (8009af0 <HAL_DMA_IRQHandler+0xa50>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d018      	beq.n	8009a24 <HAL_DMA_IRQHandler+0x984>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a3f      	ldr	r2, [pc, #252]	; (8009af4 <HAL_DMA_IRQHandler+0xa54>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d013      	beq.n	8009a24 <HAL_DMA_IRQHandler+0x984>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a3d      	ldr	r2, [pc, #244]	; (8009af8 <HAL_DMA_IRQHandler+0xa58>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d00e      	beq.n	8009a24 <HAL_DMA_IRQHandler+0x984>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a3c      	ldr	r2, [pc, #240]	; (8009afc <HAL_DMA_IRQHandler+0xa5c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d009      	beq.n	8009a24 <HAL_DMA_IRQHandler+0x984>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a3a      	ldr	r2, [pc, #232]	; (8009b00 <HAL_DMA_IRQHandler+0xa60>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d004      	beq.n	8009a24 <HAL_DMA_IRQHandler+0x984>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a39      	ldr	r2, [pc, #228]	; (8009b04 <HAL_DMA_IRQHandler+0xa64>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d101      	bne.n	8009a28 <HAL_DMA_IRQHandler+0x988>
 8009a24:	2301      	movs	r3, #1
 8009a26:	e000      	b.n	8009a2a <HAL_DMA_IRQHandler+0x98a>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 823f 	beq.w	8009eae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a3c:	f003 031f 	and.w	r3, r3, #31
 8009a40:	2204      	movs	r2, #4
 8009a42:	409a      	lsls	r2, r3
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	4013      	ands	r3, r2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 80cd 	beq.w	8009be8 <HAL_DMA_IRQHandler+0xb48>
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f003 0304 	and.w	r3, r3, #4
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 80c7 	beq.w	8009be8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a5e:	f003 031f 	and.w	r3, r3, #31
 8009a62:	2204      	movs	r2, #4
 8009a64:	409a      	lsls	r2, r3
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d049      	beq.n	8009b08 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d109      	bne.n	8009a92 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f000 8210 	beq.w	8009ea8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a90:	e20a      	b.n	8009ea8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 8206 	beq.w	8009ea8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009aa4:	e200      	b.n	8009ea8 <HAL_DMA_IRQHandler+0xe08>
 8009aa6:	bf00      	nop
 8009aa8:	40020010 	.word	0x40020010
 8009aac:	40020028 	.word	0x40020028
 8009ab0:	40020040 	.word	0x40020040
 8009ab4:	40020058 	.word	0x40020058
 8009ab8:	40020070 	.word	0x40020070
 8009abc:	40020088 	.word	0x40020088
 8009ac0:	400200a0 	.word	0x400200a0
 8009ac4:	400200b8 	.word	0x400200b8
 8009ac8:	40020410 	.word	0x40020410
 8009acc:	40020428 	.word	0x40020428
 8009ad0:	40020440 	.word	0x40020440
 8009ad4:	40020458 	.word	0x40020458
 8009ad8:	40020470 	.word	0x40020470
 8009adc:	40020488 	.word	0x40020488
 8009ae0:	400204a0 	.word	0x400204a0
 8009ae4:	400204b8 	.word	0x400204b8
 8009ae8:	58025408 	.word	0x58025408
 8009aec:	5802541c 	.word	0x5802541c
 8009af0:	58025430 	.word	0x58025430
 8009af4:	58025444 	.word	0x58025444
 8009af8:	58025458 	.word	0x58025458
 8009afc:	5802546c 	.word	0x5802546c
 8009b00:	58025480 	.word	0x58025480
 8009b04:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	f003 0320 	and.w	r3, r3, #32
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d160      	bne.n	8009bd4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a7f      	ldr	r2, [pc, #508]	; (8009d14 <HAL_DMA_IRQHandler+0xc74>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d04a      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a7d      	ldr	r2, [pc, #500]	; (8009d18 <HAL_DMA_IRQHandler+0xc78>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d045      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a7c      	ldr	r2, [pc, #496]	; (8009d1c <HAL_DMA_IRQHandler+0xc7c>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d040      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a7a      	ldr	r2, [pc, #488]	; (8009d20 <HAL_DMA_IRQHandler+0xc80>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d03b      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a79      	ldr	r2, [pc, #484]	; (8009d24 <HAL_DMA_IRQHandler+0xc84>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d036      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a77      	ldr	r2, [pc, #476]	; (8009d28 <HAL_DMA_IRQHandler+0xc88>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d031      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a76      	ldr	r2, [pc, #472]	; (8009d2c <HAL_DMA_IRQHandler+0xc8c>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d02c      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a74      	ldr	r2, [pc, #464]	; (8009d30 <HAL_DMA_IRQHandler+0xc90>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d027      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a73      	ldr	r2, [pc, #460]	; (8009d34 <HAL_DMA_IRQHandler+0xc94>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d022      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a71      	ldr	r2, [pc, #452]	; (8009d38 <HAL_DMA_IRQHandler+0xc98>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d01d      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a70      	ldr	r2, [pc, #448]	; (8009d3c <HAL_DMA_IRQHandler+0xc9c>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d018      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a6e      	ldr	r2, [pc, #440]	; (8009d40 <HAL_DMA_IRQHandler+0xca0>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d013      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a6d      	ldr	r2, [pc, #436]	; (8009d44 <HAL_DMA_IRQHandler+0xca4>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d00e      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a6b      	ldr	r2, [pc, #428]	; (8009d48 <HAL_DMA_IRQHandler+0xca8>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d009      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a6a      	ldr	r2, [pc, #424]	; (8009d4c <HAL_DMA_IRQHandler+0xcac>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d004      	beq.n	8009bb2 <HAL_DMA_IRQHandler+0xb12>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a68      	ldr	r2, [pc, #416]	; (8009d50 <HAL_DMA_IRQHandler+0xcb0>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d108      	bne.n	8009bc4 <HAL_DMA_IRQHandler+0xb24>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0208 	bic.w	r2, r2, #8
 8009bc0:	601a      	str	r2, [r3, #0]
 8009bc2:	e007      	b.n	8009bd4 <HAL_DMA_IRQHandler+0xb34>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f022 0204 	bic.w	r2, r2, #4
 8009bd2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 8165 	beq.w	8009ea8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009be6:	e15f      	b.n	8009ea8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bec:	f003 031f 	and.w	r3, r3, #31
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	409a      	lsls	r2, r3
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 80c5 	beq.w	8009d88 <HAL_DMA_IRQHandler+0xce8>
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	f003 0302 	and.w	r3, r3, #2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 80bf 	beq.w	8009d88 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c0e:	f003 031f 	and.w	r3, r3, #31
 8009c12:	2202      	movs	r2, #2
 8009c14:	409a      	lsls	r2, r3
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d018      	beq.n	8009c56 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d109      	bne.n	8009c42 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f000 813a 	beq.w	8009eac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c40:	e134      	b.n	8009eac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 8130 	beq.w	8009eac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c54:	e12a      	b.n	8009eac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f003 0320 	and.w	r3, r3, #32
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f040 8089 	bne.w	8009d74 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a2b      	ldr	r2, [pc, #172]	; (8009d14 <HAL_DMA_IRQHandler+0xc74>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d04a      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a29      	ldr	r2, [pc, #164]	; (8009d18 <HAL_DMA_IRQHandler+0xc78>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d045      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a28      	ldr	r2, [pc, #160]	; (8009d1c <HAL_DMA_IRQHandler+0xc7c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d040      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a26      	ldr	r2, [pc, #152]	; (8009d20 <HAL_DMA_IRQHandler+0xc80>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d03b      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a25      	ldr	r2, [pc, #148]	; (8009d24 <HAL_DMA_IRQHandler+0xc84>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d036      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a23      	ldr	r2, [pc, #140]	; (8009d28 <HAL_DMA_IRQHandler+0xc88>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d031      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a22      	ldr	r2, [pc, #136]	; (8009d2c <HAL_DMA_IRQHandler+0xc8c>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d02c      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a20      	ldr	r2, [pc, #128]	; (8009d30 <HAL_DMA_IRQHandler+0xc90>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d027      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a1f      	ldr	r2, [pc, #124]	; (8009d34 <HAL_DMA_IRQHandler+0xc94>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d022      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a1d      	ldr	r2, [pc, #116]	; (8009d38 <HAL_DMA_IRQHandler+0xc98>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d01d      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a1c      	ldr	r2, [pc, #112]	; (8009d3c <HAL_DMA_IRQHandler+0xc9c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d018      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a1a      	ldr	r2, [pc, #104]	; (8009d40 <HAL_DMA_IRQHandler+0xca0>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d013      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a19      	ldr	r2, [pc, #100]	; (8009d44 <HAL_DMA_IRQHandler+0xca4>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d00e      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a17      	ldr	r2, [pc, #92]	; (8009d48 <HAL_DMA_IRQHandler+0xca8>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d009      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a16      	ldr	r2, [pc, #88]	; (8009d4c <HAL_DMA_IRQHandler+0xcac>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d004      	beq.n	8009d02 <HAL_DMA_IRQHandler+0xc62>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a14      	ldr	r2, [pc, #80]	; (8009d50 <HAL_DMA_IRQHandler+0xcb0>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d128      	bne.n	8009d54 <HAL_DMA_IRQHandler+0xcb4>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f022 0214 	bic.w	r2, r2, #20
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	e027      	b.n	8009d64 <HAL_DMA_IRQHandler+0xcc4>
 8009d14:	40020010 	.word	0x40020010
 8009d18:	40020028 	.word	0x40020028
 8009d1c:	40020040 	.word	0x40020040
 8009d20:	40020058 	.word	0x40020058
 8009d24:	40020070 	.word	0x40020070
 8009d28:	40020088 	.word	0x40020088
 8009d2c:	400200a0 	.word	0x400200a0
 8009d30:	400200b8 	.word	0x400200b8
 8009d34:	40020410 	.word	0x40020410
 8009d38:	40020428 	.word	0x40020428
 8009d3c:	40020440 	.word	0x40020440
 8009d40:	40020458 	.word	0x40020458
 8009d44:	40020470 	.word	0x40020470
 8009d48:	40020488 	.word	0x40020488
 8009d4c:	400204a0 	.word	0x400204a0
 8009d50:	400204b8 	.word	0x400204b8
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f022 020a 	bic.w	r2, r2, #10
 8009d62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 8097 	beq.w	8009eac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d86:	e091      	b.n	8009eac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d8c:	f003 031f 	and.w	r3, r3, #31
 8009d90:	2208      	movs	r2, #8
 8009d92:	409a      	lsls	r2, r3
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	4013      	ands	r3, r2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 8088 	beq.w	8009eae <HAL_DMA_IRQHandler+0xe0e>
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f003 0308 	and.w	r3, r3, #8
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 8082 	beq.w	8009eae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a41      	ldr	r2, [pc, #260]	; (8009eb4 <HAL_DMA_IRQHandler+0xe14>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d04a      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a3f      	ldr	r2, [pc, #252]	; (8009eb8 <HAL_DMA_IRQHandler+0xe18>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d045      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a3e      	ldr	r2, [pc, #248]	; (8009ebc <HAL_DMA_IRQHandler+0xe1c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d040      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a3c      	ldr	r2, [pc, #240]	; (8009ec0 <HAL_DMA_IRQHandler+0xe20>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d03b      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a3b      	ldr	r2, [pc, #236]	; (8009ec4 <HAL_DMA_IRQHandler+0xe24>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d036      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a39      	ldr	r2, [pc, #228]	; (8009ec8 <HAL_DMA_IRQHandler+0xe28>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d031      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a38      	ldr	r2, [pc, #224]	; (8009ecc <HAL_DMA_IRQHandler+0xe2c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d02c      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a36      	ldr	r2, [pc, #216]	; (8009ed0 <HAL_DMA_IRQHandler+0xe30>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d027      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a35      	ldr	r2, [pc, #212]	; (8009ed4 <HAL_DMA_IRQHandler+0xe34>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d022      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a33      	ldr	r2, [pc, #204]	; (8009ed8 <HAL_DMA_IRQHandler+0xe38>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d01d      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a32      	ldr	r2, [pc, #200]	; (8009edc <HAL_DMA_IRQHandler+0xe3c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d018      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a30      	ldr	r2, [pc, #192]	; (8009ee0 <HAL_DMA_IRQHandler+0xe40>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d013      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a2f      	ldr	r2, [pc, #188]	; (8009ee4 <HAL_DMA_IRQHandler+0xe44>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d00e      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a2d      	ldr	r2, [pc, #180]	; (8009ee8 <HAL_DMA_IRQHandler+0xe48>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d009      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a2c      	ldr	r2, [pc, #176]	; (8009eec <HAL_DMA_IRQHandler+0xe4c>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d004      	beq.n	8009e4a <HAL_DMA_IRQHandler+0xdaa>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a2a      	ldr	r2, [pc, #168]	; (8009ef0 <HAL_DMA_IRQHandler+0xe50>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d108      	bne.n	8009e5c <HAL_DMA_IRQHandler+0xdbc>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f022 021c 	bic.w	r2, r2, #28
 8009e58:	601a      	str	r2, [r3, #0]
 8009e5a:	e007      	b.n	8009e6c <HAL_DMA_IRQHandler+0xdcc>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f022 020e 	bic.w	r2, r2, #14
 8009e6a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e70:	f003 031f 	and.w	r3, r3, #31
 8009e74:	2201      	movs	r2, #1
 8009e76:	409a      	lsls	r2, r3
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d009      	beq.n	8009eae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	4798      	blx	r3
 8009ea2:	e004      	b.n	8009eae <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009ea4:	bf00      	nop
 8009ea6:	e002      	b.n	8009eae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009ea8:	bf00      	nop
 8009eaa:	e000      	b.n	8009eae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009eac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009eae:	3728      	adds	r7, #40	; 0x28
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	40020010 	.word	0x40020010
 8009eb8:	40020028 	.word	0x40020028
 8009ebc:	40020040 	.word	0x40020040
 8009ec0:	40020058 	.word	0x40020058
 8009ec4:	40020070 	.word	0x40020070
 8009ec8:	40020088 	.word	0x40020088
 8009ecc:	400200a0 	.word	0x400200a0
 8009ed0:	400200b8 	.word	0x400200b8
 8009ed4:	40020410 	.word	0x40020410
 8009ed8:	40020428 	.word	0x40020428
 8009edc:	40020440 	.word	0x40020440
 8009ee0:	40020458 	.word	0x40020458
 8009ee4:	40020470 	.word	0x40020470
 8009ee8:	40020488 	.word	0x40020488
 8009eec:	400204a0 	.word	0x400204a0
 8009ef0:	400204b8 	.word	0x400204b8

08009ef4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f02:	b2db      	uxtb	r3, r3
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
 8009f34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a7f      	ldr	r2, [pc, #508]	; (800a144 <DMA_SetConfig+0x21c>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d072      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a7d      	ldr	r2, [pc, #500]	; (800a148 <DMA_SetConfig+0x220>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d06d      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a7c      	ldr	r2, [pc, #496]	; (800a14c <DMA_SetConfig+0x224>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d068      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a7a      	ldr	r2, [pc, #488]	; (800a150 <DMA_SetConfig+0x228>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d063      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a79      	ldr	r2, [pc, #484]	; (800a154 <DMA_SetConfig+0x22c>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d05e      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a77      	ldr	r2, [pc, #476]	; (800a158 <DMA_SetConfig+0x230>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d059      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a76      	ldr	r2, [pc, #472]	; (800a15c <DMA_SetConfig+0x234>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d054      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a74      	ldr	r2, [pc, #464]	; (800a160 <DMA_SetConfig+0x238>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d04f      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a73      	ldr	r2, [pc, #460]	; (800a164 <DMA_SetConfig+0x23c>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d04a      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a71      	ldr	r2, [pc, #452]	; (800a168 <DMA_SetConfig+0x240>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d045      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a70      	ldr	r2, [pc, #448]	; (800a16c <DMA_SetConfig+0x244>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d040      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a6e      	ldr	r2, [pc, #440]	; (800a170 <DMA_SetConfig+0x248>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d03b      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a6d      	ldr	r2, [pc, #436]	; (800a174 <DMA_SetConfig+0x24c>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d036      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a6b      	ldr	r2, [pc, #428]	; (800a178 <DMA_SetConfig+0x250>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d031      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a6a      	ldr	r2, [pc, #424]	; (800a17c <DMA_SetConfig+0x254>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d02c      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a68      	ldr	r2, [pc, #416]	; (800a180 <DMA_SetConfig+0x258>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d027      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a67      	ldr	r2, [pc, #412]	; (800a184 <DMA_SetConfig+0x25c>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d022      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a65      	ldr	r2, [pc, #404]	; (800a188 <DMA_SetConfig+0x260>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d01d      	beq.n	800a032 <DMA_SetConfig+0x10a>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a64      	ldr	r2, [pc, #400]	; (800a18c <DMA_SetConfig+0x264>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d018      	beq.n	800a032 <DMA_SetConfig+0x10a>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a62      	ldr	r2, [pc, #392]	; (800a190 <DMA_SetConfig+0x268>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d013      	beq.n	800a032 <DMA_SetConfig+0x10a>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a61      	ldr	r2, [pc, #388]	; (800a194 <DMA_SetConfig+0x26c>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d00e      	beq.n	800a032 <DMA_SetConfig+0x10a>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a5f      	ldr	r2, [pc, #380]	; (800a198 <DMA_SetConfig+0x270>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d009      	beq.n	800a032 <DMA_SetConfig+0x10a>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a5e      	ldr	r2, [pc, #376]	; (800a19c <DMA_SetConfig+0x274>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d004      	beq.n	800a032 <DMA_SetConfig+0x10a>
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a5c      	ldr	r2, [pc, #368]	; (800a1a0 <DMA_SetConfig+0x278>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d101      	bne.n	800a036 <DMA_SetConfig+0x10e>
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <DMA_SetConfig+0x110>
 800a036:	2300      	movs	r3, #0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00d      	beq.n	800a058 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a044:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d004      	beq.n	800a058 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a056:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a39      	ldr	r2, [pc, #228]	; (800a144 <DMA_SetConfig+0x21c>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d04a      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a38      	ldr	r2, [pc, #224]	; (800a148 <DMA_SetConfig+0x220>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d045      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a36      	ldr	r2, [pc, #216]	; (800a14c <DMA_SetConfig+0x224>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d040      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a35      	ldr	r2, [pc, #212]	; (800a150 <DMA_SetConfig+0x228>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d03b      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a33      	ldr	r2, [pc, #204]	; (800a154 <DMA_SetConfig+0x22c>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d036      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a32      	ldr	r2, [pc, #200]	; (800a158 <DMA_SetConfig+0x230>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d031      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a30      	ldr	r2, [pc, #192]	; (800a15c <DMA_SetConfig+0x234>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d02c      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a2f      	ldr	r2, [pc, #188]	; (800a160 <DMA_SetConfig+0x238>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d027      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a2d      	ldr	r2, [pc, #180]	; (800a164 <DMA_SetConfig+0x23c>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d022      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a2c      	ldr	r2, [pc, #176]	; (800a168 <DMA_SetConfig+0x240>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d01d      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a2a      	ldr	r2, [pc, #168]	; (800a16c <DMA_SetConfig+0x244>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d018      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a29      	ldr	r2, [pc, #164]	; (800a170 <DMA_SetConfig+0x248>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d013      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a27      	ldr	r2, [pc, #156]	; (800a174 <DMA_SetConfig+0x24c>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d00e      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a26      	ldr	r2, [pc, #152]	; (800a178 <DMA_SetConfig+0x250>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d009      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a24      	ldr	r2, [pc, #144]	; (800a17c <DMA_SetConfig+0x254>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d004      	beq.n	800a0f8 <DMA_SetConfig+0x1d0>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a23      	ldr	r2, [pc, #140]	; (800a180 <DMA_SetConfig+0x258>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d101      	bne.n	800a0fc <DMA_SetConfig+0x1d4>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e000      	b.n	800a0fe <DMA_SetConfig+0x1d6>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d059      	beq.n	800a1b6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a106:	f003 031f 	and.w	r3, r3, #31
 800a10a:	223f      	movs	r2, #63	; 0x3f
 800a10c:	409a      	lsls	r2, r3
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a120:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	2b40      	cmp	r3, #64	; 0x40
 800a130:	d138      	bne.n	800a1a4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a142:	e086      	b.n	800a252 <DMA_SetConfig+0x32a>
 800a144:	40020010 	.word	0x40020010
 800a148:	40020028 	.word	0x40020028
 800a14c:	40020040 	.word	0x40020040
 800a150:	40020058 	.word	0x40020058
 800a154:	40020070 	.word	0x40020070
 800a158:	40020088 	.word	0x40020088
 800a15c:	400200a0 	.word	0x400200a0
 800a160:	400200b8 	.word	0x400200b8
 800a164:	40020410 	.word	0x40020410
 800a168:	40020428 	.word	0x40020428
 800a16c:	40020440 	.word	0x40020440
 800a170:	40020458 	.word	0x40020458
 800a174:	40020470 	.word	0x40020470
 800a178:	40020488 	.word	0x40020488
 800a17c:	400204a0 	.word	0x400204a0
 800a180:	400204b8 	.word	0x400204b8
 800a184:	58025408 	.word	0x58025408
 800a188:	5802541c 	.word	0x5802541c
 800a18c:	58025430 	.word	0x58025430
 800a190:	58025444 	.word	0x58025444
 800a194:	58025458 	.word	0x58025458
 800a198:	5802546c 	.word	0x5802546c
 800a19c:	58025480 	.word	0x58025480
 800a1a0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	60da      	str	r2, [r3, #12]
}
 800a1b4:	e04d      	b.n	800a252 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a29      	ldr	r2, [pc, #164]	; (800a260 <DMA_SetConfig+0x338>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d022      	beq.n	800a206 <DMA_SetConfig+0x2de>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a27      	ldr	r2, [pc, #156]	; (800a264 <DMA_SetConfig+0x33c>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d01d      	beq.n	800a206 <DMA_SetConfig+0x2de>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a26      	ldr	r2, [pc, #152]	; (800a268 <DMA_SetConfig+0x340>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d018      	beq.n	800a206 <DMA_SetConfig+0x2de>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a24      	ldr	r2, [pc, #144]	; (800a26c <DMA_SetConfig+0x344>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d013      	beq.n	800a206 <DMA_SetConfig+0x2de>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a23      	ldr	r2, [pc, #140]	; (800a270 <DMA_SetConfig+0x348>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d00e      	beq.n	800a206 <DMA_SetConfig+0x2de>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a21      	ldr	r2, [pc, #132]	; (800a274 <DMA_SetConfig+0x34c>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d009      	beq.n	800a206 <DMA_SetConfig+0x2de>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a20      	ldr	r2, [pc, #128]	; (800a278 <DMA_SetConfig+0x350>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d004      	beq.n	800a206 <DMA_SetConfig+0x2de>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a1e      	ldr	r2, [pc, #120]	; (800a27c <DMA_SetConfig+0x354>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d101      	bne.n	800a20a <DMA_SetConfig+0x2e2>
 800a206:	2301      	movs	r3, #1
 800a208:	e000      	b.n	800a20c <DMA_SetConfig+0x2e4>
 800a20a:	2300      	movs	r3, #0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d020      	beq.n	800a252 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a214:	f003 031f 	and.w	r3, r3, #31
 800a218:	2201      	movs	r2, #1
 800a21a:	409a      	lsls	r2, r3
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	2b40      	cmp	r3, #64	; 0x40
 800a22e:	d108      	bne.n	800a242 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	60da      	str	r2, [r3, #12]
}
 800a240:	e007      	b.n	800a252 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	60da      	str	r2, [r3, #12]
}
 800a252:	bf00      	nop
 800a254:	371c      	adds	r7, #28
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	58025408 	.word	0x58025408
 800a264:	5802541c 	.word	0x5802541c
 800a268:	58025430 	.word	0x58025430
 800a26c:	58025444 	.word	0x58025444
 800a270:	58025458 	.word	0x58025458
 800a274:	5802546c 	.word	0x5802546c
 800a278:	58025480 	.word	0x58025480
 800a27c:	58025494 	.word	0x58025494

0800a280 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a42      	ldr	r2, [pc, #264]	; (800a398 <DMA_CalcBaseAndBitshift+0x118>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d04a      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a41      	ldr	r2, [pc, #260]	; (800a39c <DMA_CalcBaseAndBitshift+0x11c>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d045      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a3f      	ldr	r2, [pc, #252]	; (800a3a0 <DMA_CalcBaseAndBitshift+0x120>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d040      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a3e      	ldr	r2, [pc, #248]	; (800a3a4 <DMA_CalcBaseAndBitshift+0x124>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d03b      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a3c      	ldr	r2, [pc, #240]	; (800a3a8 <DMA_CalcBaseAndBitshift+0x128>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d036      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a3b      	ldr	r2, [pc, #236]	; (800a3ac <DMA_CalcBaseAndBitshift+0x12c>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d031      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a39      	ldr	r2, [pc, #228]	; (800a3b0 <DMA_CalcBaseAndBitshift+0x130>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d02c      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a38      	ldr	r2, [pc, #224]	; (800a3b4 <DMA_CalcBaseAndBitshift+0x134>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d027      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a36      	ldr	r2, [pc, #216]	; (800a3b8 <DMA_CalcBaseAndBitshift+0x138>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d022      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a35      	ldr	r2, [pc, #212]	; (800a3bc <DMA_CalcBaseAndBitshift+0x13c>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d01d      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a33      	ldr	r2, [pc, #204]	; (800a3c0 <DMA_CalcBaseAndBitshift+0x140>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d018      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a32      	ldr	r2, [pc, #200]	; (800a3c4 <DMA_CalcBaseAndBitshift+0x144>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d013      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a30      	ldr	r2, [pc, #192]	; (800a3c8 <DMA_CalcBaseAndBitshift+0x148>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d00e      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a2f      	ldr	r2, [pc, #188]	; (800a3cc <DMA_CalcBaseAndBitshift+0x14c>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d009      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a2d      	ldr	r2, [pc, #180]	; (800a3d0 <DMA_CalcBaseAndBitshift+0x150>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d004      	beq.n	800a328 <DMA_CalcBaseAndBitshift+0xa8>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a2c      	ldr	r2, [pc, #176]	; (800a3d4 <DMA_CalcBaseAndBitshift+0x154>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d101      	bne.n	800a32c <DMA_CalcBaseAndBitshift+0xac>
 800a328:	2301      	movs	r3, #1
 800a32a:	e000      	b.n	800a32e <DMA_CalcBaseAndBitshift+0xae>
 800a32c:	2300      	movs	r3, #0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d024      	beq.n	800a37c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	b2db      	uxtb	r3, r3
 800a338:	3b10      	subs	r3, #16
 800a33a:	4a27      	ldr	r2, [pc, #156]	; (800a3d8 <DMA_CalcBaseAndBitshift+0x158>)
 800a33c:	fba2 2303 	umull	r2, r3, r2, r3
 800a340:	091b      	lsrs	r3, r3, #4
 800a342:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	4a24      	ldr	r2, [pc, #144]	; (800a3dc <DMA_CalcBaseAndBitshift+0x15c>)
 800a34c:	5cd3      	ldrb	r3, [r2, r3]
 800a34e:	461a      	mov	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2b03      	cmp	r3, #3
 800a358:	d908      	bls.n	800a36c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	4b1f      	ldr	r3, [pc, #124]	; (800a3e0 <DMA_CalcBaseAndBitshift+0x160>)
 800a362:	4013      	ands	r3, r2
 800a364:	1d1a      	adds	r2, r3, #4
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	659a      	str	r2, [r3, #88]	; 0x58
 800a36a:	e00d      	b.n	800a388 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	461a      	mov	r2, r3
 800a372:	4b1b      	ldr	r3, [pc, #108]	; (800a3e0 <DMA_CalcBaseAndBitshift+0x160>)
 800a374:	4013      	ands	r3, r2
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	6593      	str	r3, [r2, #88]	; 0x58
 800a37a:	e005      	b.n	800a388 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	40020010 	.word	0x40020010
 800a39c:	40020028 	.word	0x40020028
 800a3a0:	40020040 	.word	0x40020040
 800a3a4:	40020058 	.word	0x40020058
 800a3a8:	40020070 	.word	0x40020070
 800a3ac:	40020088 	.word	0x40020088
 800a3b0:	400200a0 	.word	0x400200a0
 800a3b4:	400200b8 	.word	0x400200b8
 800a3b8:	40020410 	.word	0x40020410
 800a3bc:	40020428 	.word	0x40020428
 800a3c0:	40020440 	.word	0x40020440
 800a3c4:	40020458 	.word	0x40020458
 800a3c8:	40020470 	.word	0x40020470
 800a3cc:	40020488 	.word	0x40020488
 800a3d0:	400204a0 	.word	0x400204a0
 800a3d4:	400204b8 	.word	0x400204b8
 800a3d8:	aaaaaaab 	.word	0xaaaaaaab
 800a3dc:	0801ab24 	.word	0x0801ab24
 800a3e0:	fffffc00 	.word	0xfffffc00

0800a3e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d120      	bne.n	800a43a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fc:	2b03      	cmp	r3, #3
 800a3fe:	d858      	bhi.n	800a4b2 <DMA_CheckFifoParam+0xce>
 800a400:	a201      	add	r2, pc, #4	; (adr r2, 800a408 <DMA_CheckFifoParam+0x24>)
 800a402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a406:	bf00      	nop
 800a408:	0800a419 	.word	0x0800a419
 800a40c:	0800a42b 	.word	0x0800a42b
 800a410:	0800a419 	.word	0x0800a419
 800a414:	0800a4b3 	.word	0x0800a4b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a420:	2b00      	cmp	r3, #0
 800a422:	d048      	beq.n	800a4b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a428:	e045      	b.n	800a4b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a432:	d142      	bne.n	800a4ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a438:	e03f      	b.n	800a4ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a442:	d123      	bne.n	800a48c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d838      	bhi.n	800a4be <DMA_CheckFifoParam+0xda>
 800a44c:	a201      	add	r2, pc, #4	; (adr r2, 800a454 <DMA_CheckFifoParam+0x70>)
 800a44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a452:	bf00      	nop
 800a454:	0800a465 	.word	0x0800a465
 800a458:	0800a46b 	.word	0x0800a46b
 800a45c:	0800a465 	.word	0x0800a465
 800a460:	0800a47d 	.word	0x0800a47d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	73fb      	strb	r3, [r7, #15]
        break;
 800a468:	e030      	b.n	800a4cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a472:	2b00      	cmp	r3, #0
 800a474:	d025      	beq.n	800a4c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a47a:	e022      	b.n	800a4c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a480:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a484:	d11f      	bne.n	800a4c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a48a:	e01c      	b.n	800a4c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a490:	2b02      	cmp	r3, #2
 800a492:	d902      	bls.n	800a49a <DMA_CheckFifoParam+0xb6>
 800a494:	2b03      	cmp	r3, #3
 800a496:	d003      	beq.n	800a4a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a498:	e018      	b.n	800a4cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	73fb      	strb	r3, [r7, #15]
        break;
 800a49e:	e015      	b.n	800a4cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00e      	beq.n	800a4ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b0:	e00b      	b.n	800a4ca <DMA_CheckFifoParam+0xe6>
        break;
 800a4b2:	bf00      	nop
 800a4b4:	e00a      	b.n	800a4cc <DMA_CheckFifoParam+0xe8>
        break;
 800a4b6:	bf00      	nop
 800a4b8:	e008      	b.n	800a4cc <DMA_CheckFifoParam+0xe8>
        break;
 800a4ba:	bf00      	nop
 800a4bc:	e006      	b.n	800a4cc <DMA_CheckFifoParam+0xe8>
        break;
 800a4be:	bf00      	nop
 800a4c0:	e004      	b.n	800a4cc <DMA_CheckFifoParam+0xe8>
        break;
 800a4c2:	bf00      	nop
 800a4c4:	e002      	b.n	800a4cc <DMA_CheckFifoParam+0xe8>
        break;
 800a4c6:	bf00      	nop
 800a4c8:	e000      	b.n	800a4cc <DMA_CheckFifoParam+0xe8>
    break;
 800a4ca:	bf00      	nop
    }
  }

  return status;
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop

0800a4dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a38      	ldr	r2, [pc, #224]	; (800a5d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d022      	beq.n	800a53a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a36      	ldr	r2, [pc, #216]	; (800a5d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d01d      	beq.n	800a53a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a35      	ldr	r2, [pc, #212]	; (800a5d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d018      	beq.n	800a53a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a33      	ldr	r2, [pc, #204]	; (800a5dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d013      	beq.n	800a53a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a32      	ldr	r2, [pc, #200]	; (800a5e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d00e      	beq.n	800a53a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a30      	ldr	r2, [pc, #192]	; (800a5e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d009      	beq.n	800a53a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a2f      	ldr	r2, [pc, #188]	; (800a5e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d004      	beq.n	800a53a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a2d      	ldr	r2, [pc, #180]	; (800a5ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d101      	bne.n	800a53e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a53a:	2301      	movs	r3, #1
 800a53c:	e000      	b.n	800a540 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a53e:	2300      	movs	r3, #0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d01a      	beq.n	800a57a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	3b08      	subs	r3, #8
 800a54c:	4a28      	ldr	r2, [pc, #160]	; (800a5f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a54e:	fba2 2303 	umull	r2, r3, r2, r3
 800a552:	091b      	lsrs	r3, r3, #4
 800a554:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	4b26      	ldr	r3, [pc, #152]	; (800a5f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a55a:	4413      	add	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	461a      	mov	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a24      	ldr	r2, [pc, #144]	; (800a5f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a568:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f003 031f 	and.w	r3, r3, #31
 800a570:	2201      	movs	r2, #1
 800a572:	409a      	lsls	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a578:	e024      	b.n	800a5c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	3b10      	subs	r3, #16
 800a582:	4a1e      	ldr	r2, [pc, #120]	; (800a5fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a584:	fba2 2303 	umull	r2, r3, r2, r3
 800a588:	091b      	lsrs	r3, r3, #4
 800a58a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	4a1c      	ldr	r2, [pc, #112]	; (800a600 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d806      	bhi.n	800a5a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	4a1b      	ldr	r2, [pc, #108]	; (800a604 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d902      	bls.n	800a5a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3308      	adds	r3, #8
 800a5a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	4b18      	ldr	r3, [pc, #96]	; (800a608 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a5a6:	4413      	add	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a16      	ldr	r2, [pc, #88]	; (800a60c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a5b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f003 031f 	and.w	r3, r3, #31
 800a5bc:	2201      	movs	r2, #1
 800a5be:	409a      	lsls	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a5c4:	bf00      	nop
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	58025408 	.word	0x58025408
 800a5d4:	5802541c 	.word	0x5802541c
 800a5d8:	58025430 	.word	0x58025430
 800a5dc:	58025444 	.word	0x58025444
 800a5e0:	58025458 	.word	0x58025458
 800a5e4:	5802546c 	.word	0x5802546c
 800a5e8:	58025480 	.word	0x58025480
 800a5ec:	58025494 	.word	0x58025494
 800a5f0:	cccccccd 	.word	0xcccccccd
 800a5f4:	16009600 	.word	0x16009600
 800a5f8:	58025880 	.word	0x58025880
 800a5fc:	aaaaaaab 	.word	0xaaaaaaab
 800a600:	400204b8 	.word	0x400204b8
 800a604:	4002040f 	.word	0x4002040f
 800a608:	10008200 	.word	0x10008200
 800a60c:	40020880 	.word	0x40020880

0800a610 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d04a      	beq.n	800a6bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2b08      	cmp	r3, #8
 800a62a:	d847      	bhi.n	800a6bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a25      	ldr	r2, [pc, #148]	; (800a6c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d022      	beq.n	800a67c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a24      	ldr	r2, [pc, #144]	; (800a6cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d01d      	beq.n	800a67c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a22      	ldr	r2, [pc, #136]	; (800a6d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d018      	beq.n	800a67c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a21      	ldr	r2, [pc, #132]	; (800a6d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d013      	beq.n	800a67c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a1f      	ldr	r2, [pc, #124]	; (800a6d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d00e      	beq.n	800a67c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a1e      	ldr	r2, [pc, #120]	; (800a6dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d009      	beq.n	800a67c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a1c      	ldr	r2, [pc, #112]	; (800a6e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d004      	beq.n	800a67c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a1b      	ldr	r2, [pc, #108]	; (800a6e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d101      	bne.n	800a680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a67c:	2301      	movs	r3, #1
 800a67e:	e000      	b.n	800a682 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a680:	2300      	movs	r3, #0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00a      	beq.n	800a69c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	4b17      	ldr	r3, [pc, #92]	; (800a6e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a68a:	4413      	add	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	461a      	mov	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a15      	ldr	r2, [pc, #84]	; (800a6ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a698:	671a      	str	r2, [r3, #112]	; 0x70
 800a69a:	e009      	b.n	800a6b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	4b14      	ldr	r3, [pc, #80]	; (800a6f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a6a0:	4413      	add	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a11      	ldr	r2, [pc, #68]	; (800a6f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a6ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	409a      	lsls	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a6bc:	bf00      	nop
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	58025408 	.word	0x58025408
 800a6cc:	5802541c 	.word	0x5802541c
 800a6d0:	58025430 	.word	0x58025430
 800a6d4:	58025444 	.word	0x58025444
 800a6d8:	58025458 	.word	0x58025458
 800a6dc:	5802546c 	.word	0x5802546c
 800a6e0:	58025480 	.word	0x58025480
 800a6e4:	58025494 	.word	0x58025494
 800a6e8:	1600963f 	.word	0x1600963f
 800a6ec:	58025940 	.word	0x58025940
 800a6f0:	1000823f 	.word	0x1000823f
 800a6f4:	40020940 	.word	0x40020940

0800a6f8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b08a      	sub	sp, #40	; 0x28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a70c:	2308      	movs	r3, #8
 800a70e:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a710:	4b40      	ldr	r3, [pc, #256]	; (800a814 <HAL_FLASH_Program+0x11c>)
 800a712:	7d1b      	ldrb	r3, [r3, #20]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d101      	bne.n	800a71c <HAL_FLASH_Program+0x24>
 800a718:	2302      	movs	r3, #2
 800a71a:	e076      	b.n	800a80a <HAL_FLASH_Program+0x112>
 800a71c:	4b3d      	ldr	r3, [pc, #244]	; (800a814 <HAL_FLASH_Program+0x11c>)
 800a71e:	2201      	movs	r2, #1
 800a720:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a728:	d306      	bcc.n	800a738 <HAL_FLASH_Program+0x40>
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a730:	d202      	bcs.n	800a738 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a732:	2301      	movs	r3, #1
 800a734:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800a736:	e00c      	b.n	800a752 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a73e:	d306      	bcc.n	800a74e <HAL_FLASH_Program+0x56>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800a746:	d202      	bcs.n	800a74e <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800a748:	2302      	movs	r3, #2
 800a74a:	61bb      	str	r3, [r7, #24]
 800a74c:	e001      	b.n	800a752 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	e05b      	b.n	800a80a <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a752:	4b30      	ldr	r3, [pc, #192]	; (800a814 <HAL_FLASH_Program+0x11c>)
 800a754:	2200      	movs	r2, #0
 800a756:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a758:	69b9      	ldr	r1, [r7, #24]
 800a75a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a75e:	f000 f897 	bl	800a890 <FLASH_WaitForLastOperation>
 800a762:	4603      	mov	r3, r0
 800a764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800a768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d147      	bne.n	800a800 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d106      	bne.n	800a784 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a776:	4b28      	ldr	r3, [pc, #160]	; (800a818 <HAL_FLASH_Program+0x120>)
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	4a27      	ldr	r2, [pc, #156]	; (800a818 <HAL_FLASH_Program+0x120>)
 800a77c:	f043 0302 	orr.w	r3, r3, #2
 800a780:	60d3      	str	r3, [r2, #12]
 800a782:	e007      	b.n	800a794 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800a784:	4b24      	ldr	r3, [pc, #144]	; (800a818 <HAL_FLASH_Program+0x120>)
 800a786:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a78a:	4a23      	ldr	r2, [pc, #140]	; (800a818 <HAL_FLASH_Program+0x120>)
 800a78c:	f043 0302 	orr.w	r3, r3, #2
 800a790:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800a794:	f3bf 8f6f 	isb	sy
}
 800a798:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a79a:	f3bf 8f4f 	dsb	sy
}
 800a79e:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a7a8:	6a3b      	ldr	r3, [r7, #32]
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1ef      	bne.n	800a7a0 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800a7c0:	f3bf 8f6f 	isb	sy
}
 800a7c4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a7c6:	f3bf 8f4f 	dsb	sy
}
 800a7ca:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a7cc:	69b9      	ldr	r1, [r7, #24]
 800a7ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a7d2:	f000 f85d 	bl	800a890 <FLASH_WaitForLastOperation>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d106      	bne.n	800a7f0 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800a7e2:	4b0d      	ldr	r3, [pc, #52]	; (800a818 <HAL_FLASH_Program+0x120>)
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	4a0c      	ldr	r2, [pc, #48]	; (800a818 <HAL_FLASH_Program+0x120>)
 800a7e8:	f023 0302 	bic.w	r3, r3, #2
 800a7ec:	60d3      	str	r3, [r2, #12]
 800a7ee:	e007      	b.n	800a800 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800a7f0:	4b09      	ldr	r3, [pc, #36]	; (800a818 <HAL_FLASH_Program+0x120>)
 800a7f2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a7f6:	4a08      	ldr	r2, [pc, #32]	; (800a818 <HAL_FLASH_Program+0x120>)
 800a7f8:	f023 0302 	bic.w	r3, r3, #2
 800a7fc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a800:	4b04      	ldr	r3, [pc, #16]	; (800a814 <HAL_FLASH_Program+0x11c>)
 800a802:	2200      	movs	r2, #0
 800a804:	751a      	strb	r2, [r3, #20]

  return status;
 800a806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3728      	adds	r7, #40	; 0x28
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	24001fa0 	.word	0x24001fa0
 800a818:	52002000 	.word	0x52002000

0800a81c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a81c:	b480      	push	{r7}
 800a81e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a820:	4b18      	ldr	r3, [pc, #96]	; (800a884 <HAL_FLASH_Unlock+0x68>)
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00d      	beq.n	800a848 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800a82c:	4b15      	ldr	r3, [pc, #84]	; (800a884 <HAL_FLASH_Unlock+0x68>)
 800a82e:	4a16      	ldr	r2, [pc, #88]	; (800a888 <HAL_FLASH_Unlock+0x6c>)
 800a830:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800a832:	4b14      	ldr	r3, [pc, #80]	; (800a884 <HAL_FLASH_Unlock+0x68>)
 800a834:	4a15      	ldr	r2, [pc, #84]	; (800a88c <HAL_FLASH_Unlock+0x70>)
 800a836:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a838:	4b12      	ldr	r3, [pc, #72]	; (800a884 <HAL_FLASH_Unlock+0x68>)
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	f003 0301 	and.w	r3, r3, #1
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e018      	b.n	800a87a <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800a848:	4b0e      	ldr	r3, [pc, #56]	; (800a884 <HAL_FLASH_Unlock+0x68>)
 800a84a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	d010      	beq.n	800a878 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800a856:	4b0b      	ldr	r3, [pc, #44]	; (800a884 <HAL_FLASH_Unlock+0x68>)
 800a858:	4a0b      	ldr	r2, [pc, #44]	; (800a888 <HAL_FLASH_Unlock+0x6c>)
 800a85a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800a85e:	4b09      	ldr	r3, [pc, #36]	; (800a884 <HAL_FLASH_Unlock+0x68>)
 800a860:	4a0a      	ldr	r2, [pc, #40]	; (800a88c <HAL_FLASH_Unlock+0x70>)
 800a862:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800a866:	4b07      	ldr	r3, [pc, #28]	; (800a884 <HAL_FLASH_Unlock+0x68>)
 800a868:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e000      	b.n	800a87a <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	52002000 	.word	0x52002000
 800a888:	45670123 	.word	0x45670123
 800a88c:	cdef89ab 	.word	0xcdef89ab

0800a890 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800a89a:	2304      	movs	r3, #4
 800a89c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800a8a2:	f7fa ff33 	bl	800570c <HAL_GetTick>
 800a8a6:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d113      	bne.n	800a8d6 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800a8ae:	4b41      	ldr	r3, [pc, #260]	; (800a9b4 <FLASH_WaitForLastOperation+0x124>)
 800a8b0:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a8b2:	e010      	b.n	800a8d6 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8ba:	d00c      	beq.n	800a8d6 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a8bc:	f7fa ff26 	bl	800570c <HAL_GetTick>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d302      	bcc.n	800a8d2 <FLASH_WaitForLastOperation+0x42>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e06a      	b.n	800a9ac <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	4b37      	ldr	r3, [pc, #220]	; (800a9b8 <FLASH_WaitForLastOperation+0x128>)
 800a8da:	4013      	ands	r3, r2
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d10a      	bne.n	800a8f8 <FLASH_WaitForLastOperation+0x68>
 800a8e2:	4b36      	ldr	r3, [pc, #216]	; (800a9bc <FLASH_WaitForLastOperation+0x12c>)
 800a8e4:	691a      	ldr	r2, [r3, #16]
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	bf0c      	ite	eq
 800a8f0:	2301      	moveq	r3, #1
 800a8f2:	2300      	movne	r3, #0
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	e00c      	b.n	800a912 <FLASH_WaitForLastOperation+0x82>
 800a8f8:	4b30      	ldr	r3, [pc, #192]	; (800a9bc <FLASH_WaitForLastOperation+0x12c>)
 800a8fa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a8fe:	43da      	mvns	r2, r3
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	4013      	ands	r3, r2
 800a904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	bf0c      	ite	eq
 800a90c:	2301      	moveq	r3, #1
 800a90e:	2300      	movne	r3, #0
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1ce      	bne.n	800a8b4 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d105      	bne.n	800a928 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800a91c:	4b27      	ldr	r3, [pc, #156]	; (800a9bc <FLASH_WaitForLastOperation+0x12c>)
 800a91e:	691a      	ldr	r2, [r3, #16]
 800a920:	4b27      	ldr	r3, [pc, #156]	; (800a9c0 <FLASH_WaitForLastOperation+0x130>)
 800a922:	4013      	ands	r3, r2
 800a924:	613b      	str	r3, [r7, #16]
 800a926:	e007      	b.n	800a938 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800a928:	4b24      	ldr	r3, [pc, #144]	; (800a9bc <FLASH_WaitForLastOperation+0x12c>)
 800a92a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800a92e:	4b24      	ldr	r3, [pc, #144]	; (800a9c0 <FLASH_WaitForLastOperation+0x130>)
 800a930:	4013      	ands	r3, r2
 800a932:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a936:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d017      	beq.n	800a972 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800a942:	4b20      	ldr	r3, [pc, #128]	; (800a9c4 <FLASH_WaitForLastOperation+0x134>)
 800a944:	699a      	ldr	r2, [r3, #24]
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	4313      	orrs	r3, r2
 800a94a:	4a1e      	ldr	r2, [pc, #120]	; (800a9c4 <FLASH_WaitForLastOperation+0x134>)
 800a94c:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	4b19      	ldr	r3, [pc, #100]	; (800a9b8 <FLASH_WaitForLastOperation+0x128>)
 800a952:	4013      	ands	r3, r2
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	429a      	cmp	r2, r3
 800a958:	d103      	bne.n	800a962 <FLASH_WaitForLastOperation+0xd2>
 800a95a:	4a18      	ldr	r2, [pc, #96]	; (800a9bc <FLASH_WaitForLastOperation+0x12c>)
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	6153      	str	r3, [r2, #20]
 800a960:	e005      	b.n	800a96e <FLASH_WaitForLastOperation+0xde>
 800a962:	4a16      	ldr	r2, [pc, #88]	; (800a9bc <FLASH_WaitForLastOperation+0x12c>)
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a96a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e01c      	b.n	800a9ac <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d10b      	bne.n	800a990 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a978:	4b10      	ldr	r3, [pc, #64]	; (800a9bc <FLASH_WaitForLastOperation+0x12c>)
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a984:	d111      	bne.n	800a9aa <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a986:	4b0d      	ldr	r3, [pc, #52]	; (800a9bc <FLASH_WaitForLastOperation+0x12c>)
 800a988:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a98c:	615a      	str	r2, [r3, #20]
 800a98e:	e00c      	b.n	800a9aa <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800a990:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <FLASH_WaitForLastOperation+0x12c>)
 800a992:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a99a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a99e:	d104      	bne.n	800a9aa <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800a9a0:	4b06      	ldr	r3, [pc, #24]	; (800a9bc <FLASH_WaitForLastOperation+0x12c>)
 800a9a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a9a6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	80000004 	.word	0x80000004
 800a9b8:	1fef000f 	.word	0x1fef000f
 800a9bc:	52002000 	.word	0x52002000
 800a9c0:	17ee0000 	.word	0x17ee0000
 800a9c4:	24001fa0 	.word	0x24001fa0

0800a9c8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a9d6:	4b5e      	ldr	r3, [pc, #376]	; (800ab50 <HAL_FLASHEx_Erase+0x188>)
 800a9d8:	7d1b      	ldrb	r3, [r3, #20]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d101      	bne.n	800a9e2 <HAL_FLASHEx_Erase+0x1a>
 800a9de:	2302      	movs	r3, #2
 800a9e0:	e0b2      	b.n	800ab48 <HAL_FLASHEx_Erase+0x180>
 800a9e2:	4b5b      	ldr	r3, [pc, #364]	; (800ab50 <HAL_FLASHEx_Erase+0x188>)
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a9e8:	4b59      	ldr	r3, [pc, #356]	; (800ab50 <HAL_FLASHEx_Erase+0x188>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d009      	beq.n	800aa0e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa00:	f7ff ff46 	bl	800a890 <FLASH_WaitForLastOperation>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d001      	beq.n	800aa0e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f003 0302 	and.w	r3, r3, #2
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d009      	beq.n	800aa2e <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800aa1a:	2102      	movs	r1, #2
 800aa1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa20:	f7ff ff36 	bl	800a890 <FLASH_WaitForLastOperation>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f040 8085 	bne.w	800ab40 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d136      	bne.n	800aaac <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	691a      	ldr	r2, [r3, #16]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	4619      	mov	r1, r3
 800aa48:	4610      	mov	r0, r2
 800aa4a:	f000 f887 	bl	800ab5c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00f      	beq.n	800aa7a <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa60:	f7ff ff16 	bl	800a890 <FLASH_WaitForLastOperation>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800aa6e:	4b39      	ldr	r3, [pc, #228]	; (800ab54 <HAL_FLASHEx_Erase+0x18c>)
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	4a38      	ldr	r2, [pc, #224]	; (800ab54 <HAL_FLASHEx_Erase+0x18c>)
 800aa74:	f023 0308 	bic.w	r3, r3, #8
 800aa78:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	f003 0302 	and.w	r3, r3, #2
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d05c      	beq.n	800ab40 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800aa86:	2102      	movs	r1, #2
 800aa88:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa8c:	f7ff ff00 	bl	800a890 <FLASH_WaitForLastOperation>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800aa9a:	4b2e      	ldr	r3, [pc, #184]	; (800ab54 <HAL_FLASHEx_Erase+0x18c>)
 800aa9c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aaa0:	4a2c      	ldr	r2, [pc, #176]	; (800ab54 <HAL_FLASHEx_Erase+0x18c>)
 800aaa2:	f023 0308 	bic.w	r3, r3, #8
 800aaa6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800aaaa:	e049      	b.n	800ab40 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aab2:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	60bb      	str	r3, [r7, #8]
 800aaba:	e039      	b.n	800ab30 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6859      	ldr	r1, [r3, #4]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	461a      	mov	r2, r3
 800aac6:	68b8      	ldr	r0, [r7, #8]
 800aac8:	f000 f8b2 	bl	800ac30 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	f003 0301 	and.w	r3, r3, #1
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00c      	beq.n	800aaf2 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800aad8:	2101      	movs	r1, #1
 800aada:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aade:	f7ff fed7 	bl	800a890 <FLASH_WaitForLastOperation>
 800aae2:	4603      	mov	r3, r0
 800aae4:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800aae6:	4b1b      	ldr	r3, [pc, #108]	; (800ab54 <HAL_FLASHEx_Erase+0x18c>)
 800aae8:	68da      	ldr	r2, [r3, #12]
 800aaea:	491a      	ldr	r1, [pc, #104]	; (800ab54 <HAL_FLASHEx_Erase+0x18c>)
 800aaec:	4b1a      	ldr	r3, [pc, #104]	; (800ab58 <HAL_FLASHEx_Erase+0x190>)
 800aaee:	4013      	ands	r3, r2
 800aaf0:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00e      	beq.n	800ab1c <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800aafe:	2102      	movs	r1, #2
 800ab00:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab04:	f7ff fec4 	bl	800a890 <FLASH_WaitForLastOperation>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800ab0c:	4b11      	ldr	r3, [pc, #68]	; (800ab54 <HAL_FLASHEx_Erase+0x18c>)
 800ab0e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ab12:	4910      	ldr	r1, [pc, #64]	; (800ab54 <HAL_FLASHEx_Erase+0x18c>)
 800ab14:	4b10      	ldr	r3, [pc, #64]	; (800ab58 <HAL_FLASHEx_Erase+0x190>)
 800ab16:	4013      	ands	r3, r2
 800ab18:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	601a      	str	r2, [r3, #0]
          break;
 800ab28:	e00a      	b.n	800ab40 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	60bb      	str	r3, [r7, #8]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68da      	ldr	r2, [r3, #12]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	4413      	add	r3, r2
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d3bd      	bcc.n	800aabc <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ab40:	4b03      	ldr	r3, [pc, #12]	; (800ab50 <HAL_FLASHEx_Erase+0x188>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	751a      	strb	r2, [r3, #20]

  return status;
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	24001fa0 	.word	0x24001fa0
 800ab54:	52002000 	.word	0x52002000
 800ab58:	fffff8fb 	.word	0xfffff8fb

0800ab5c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	f003 0303 	and.w	r3, r3, #3
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d122      	bne.n	800abb6 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ab70:	4b2e      	ldr	r3, [pc, #184]	; (800ac2c <FLASH_MassErase+0xd0>)
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	4a2d      	ldr	r2, [pc, #180]	; (800ac2c <FLASH_MassErase+0xd0>)
 800ab76:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ab7a:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800ab7c:	4b2b      	ldr	r3, [pc, #172]	; (800ac2c <FLASH_MassErase+0xd0>)
 800ab7e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ab82:	4a2a      	ldr	r2, [pc, #168]	; (800ac2c <FLASH_MassErase+0xd0>)
 800ab84:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ab88:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800ab8c:	4b27      	ldr	r3, [pc, #156]	; (800ac2c <FLASH_MassErase+0xd0>)
 800ab8e:	68da      	ldr	r2, [r3, #12]
 800ab90:	4926      	ldr	r1, [pc, #152]	; (800ac2c <FLASH_MassErase+0xd0>)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800ab98:	4b24      	ldr	r3, [pc, #144]	; (800ac2c <FLASH_MassErase+0xd0>)
 800ab9a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ab9e:	4923      	ldr	r1, [pc, #140]	; (800ac2c <FLASH_MassErase+0xd0>)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800aba8:	4b20      	ldr	r3, [pc, #128]	; (800ac2c <FLASH_MassErase+0xd0>)
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	4a1f      	ldr	r2, [pc, #124]	; (800ac2c <FLASH_MassErase+0xd0>)
 800abae:	f043 0310 	orr.w	r3, r3, #16
 800abb2:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800abb4:	e033      	b.n	800ac1e <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d011      	beq.n	800abe4 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800abc0:	4b1a      	ldr	r3, [pc, #104]	; (800ac2c <FLASH_MassErase+0xd0>)
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	4a19      	ldr	r2, [pc, #100]	; (800ac2c <FLASH_MassErase+0xd0>)
 800abc6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800abca:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800abcc:	4b17      	ldr	r3, [pc, #92]	; (800ac2c <FLASH_MassErase+0xd0>)
 800abce:	68da      	ldr	r2, [r3, #12]
 800abd0:	4916      	ldr	r1, [pc, #88]	; (800ac2c <FLASH_MassErase+0xd0>)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800abd8:	4b14      	ldr	r3, [pc, #80]	; (800ac2c <FLASH_MassErase+0xd0>)
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	4a13      	ldr	r2, [pc, #76]	; (800ac2c <FLASH_MassErase+0xd0>)
 800abde:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800abe2:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	f003 0302 	and.w	r3, r3, #2
 800abea:	2b00      	cmp	r3, #0
 800abec:	d017      	beq.n	800ac1e <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800abee:	4b0f      	ldr	r3, [pc, #60]	; (800ac2c <FLASH_MassErase+0xd0>)
 800abf0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800abf4:	4a0d      	ldr	r2, [pc, #52]	; (800ac2c <FLASH_MassErase+0xd0>)
 800abf6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800abfa:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800abfe:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <FLASH_MassErase+0xd0>)
 800ac00:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ac04:	4909      	ldr	r1, [pc, #36]	; (800ac2c <FLASH_MassErase+0xd0>)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800ac0e:	4b07      	ldr	r3, [pc, #28]	; (800ac2c <FLASH_MassErase+0xd0>)
 800ac10:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac14:	4a05      	ldr	r2, [pc, #20]	; (800ac2c <FLASH_MassErase+0xd0>)
 800ac16:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800ac1a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800ac1e:	bf00      	nop
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	52002000 	.word	0x52002000

0800ac30 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d010      	beq.n	800ac68 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800ac46:	4b18      	ldr	r3, [pc, #96]	; (800aca8 <FLASH_Erase_Sector+0x78>)
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	4a17      	ldr	r2, [pc, #92]	; (800aca8 <FLASH_Erase_Sector+0x78>)
 800ac4c:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800ac50:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800ac52:	4b15      	ldr	r3, [pc, #84]	; (800aca8 <FLASH_Erase_Sector+0x78>)
 800ac54:	68da      	ldr	r2, [r3, #12]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	0219      	lsls	r1, r3, #8
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	430b      	orrs	r3, r1
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	4a11      	ldr	r2, [pc, #68]	; (800aca8 <FLASH_Erase_Sector+0x78>)
 800ac62:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800ac66:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	f003 0302 	and.w	r3, r3, #2
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d014      	beq.n	800ac9c <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800ac72:	4b0d      	ldr	r3, [pc, #52]	; (800aca8 <FLASH_Erase_Sector+0x78>)
 800ac74:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac78:	4a0b      	ldr	r2, [pc, #44]	; (800aca8 <FLASH_Erase_Sector+0x78>)
 800ac7a:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800ac7e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800ac82:	4b09      	ldr	r3, [pc, #36]	; (800aca8 <FLASH_Erase_Sector+0x78>)
 800ac84:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	0219      	lsls	r1, r3, #8
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	430b      	orrs	r3, r1
 800ac90:	4313      	orrs	r3, r2
 800ac92:	4a05      	ldr	r2, [pc, #20]	; (800aca8 <FLASH_Erase_Sector+0x78>)
 800ac94:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800ac98:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800ac9c:	bf00      	nop
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr
 800aca8:	52002000 	.word	0x52002000

0800acac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800acac:	b480      	push	{r7}
 800acae:	b089      	sub	sp, #36	; 0x24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800acb6:	2300      	movs	r3, #0
 800acb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800acba:	4b89      	ldr	r3, [pc, #548]	; (800aee0 <HAL_GPIO_Init+0x234>)
 800acbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800acbe:	e194      	b.n	800afea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	2101      	movs	r1, #1
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	fa01 f303 	lsl.w	r3, r1, r3
 800accc:	4013      	ands	r3, r2
 800acce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f000 8186 	beq.w	800afe4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f003 0303 	and.w	r3, r3, #3
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d005      	beq.n	800acf0 <HAL_GPIO_Init+0x44>
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	f003 0303 	and.w	r3, r3, #3
 800acec:	2b02      	cmp	r3, #2
 800acee:	d130      	bne.n	800ad52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	005b      	lsls	r3, r3, #1
 800acfa:	2203      	movs	r2, #3
 800acfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ad00:	43db      	mvns	r3, r3
 800ad02:	69ba      	ldr	r2, [r7, #24]
 800ad04:	4013      	ands	r3, r2
 800ad06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	68da      	ldr	r2, [r3, #12]
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	005b      	lsls	r3, r3, #1
 800ad10:	fa02 f303 	lsl.w	r3, r2, r3
 800ad14:	69ba      	ldr	r2, [r7, #24]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	69ba      	ldr	r2, [r7, #24]
 800ad1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ad26:	2201      	movs	r2, #1
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad2e:	43db      	mvns	r3, r3
 800ad30:	69ba      	ldr	r2, [r7, #24]
 800ad32:	4013      	ands	r3, r2
 800ad34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	091b      	lsrs	r3, r3, #4
 800ad3c:	f003 0201 	and.w	r2, r3, #1
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	fa02 f303 	lsl.w	r3, r2, r3
 800ad46:	69ba      	ldr	r2, [r7, #24]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	69ba      	ldr	r2, [r7, #24]
 800ad50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	f003 0303 	and.w	r3, r3, #3
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d017      	beq.n	800ad8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	005b      	lsls	r3, r3, #1
 800ad68:	2203      	movs	r2, #3
 800ad6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad6e:	43db      	mvns	r3, r3
 800ad70:	69ba      	ldr	r2, [r7, #24]
 800ad72:	4013      	ands	r3, r2
 800ad74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	689a      	ldr	r2, [r3, #8]
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	005b      	lsls	r3, r3, #1
 800ad7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	f003 0303 	and.w	r3, r3, #3
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d123      	bne.n	800ade2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	08da      	lsrs	r2, r3, #3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	3208      	adds	r2, #8
 800ada2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	f003 0307 	and.w	r3, r3, #7
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	220f      	movs	r2, #15
 800adb2:	fa02 f303 	lsl.w	r3, r2, r3
 800adb6:	43db      	mvns	r3, r3
 800adb8:	69ba      	ldr	r2, [r7, #24]
 800adba:	4013      	ands	r3, r2
 800adbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	691a      	ldr	r2, [r3, #16]
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	f003 0307 	and.w	r3, r3, #7
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	fa02 f303 	lsl.w	r3, r2, r3
 800adce:	69ba      	ldr	r2, [r7, #24]
 800add0:	4313      	orrs	r3, r2
 800add2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	08da      	lsrs	r2, r3, #3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3208      	adds	r2, #8
 800addc:	69b9      	ldr	r1, [r7, #24]
 800adde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	005b      	lsls	r3, r3, #1
 800adec:	2203      	movs	r2, #3
 800adee:	fa02 f303 	lsl.w	r3, r2, r3
 800adf2:	43db      	mvns	r3, r3
 800adf4:	69ba      	ldr	r2, [r7, #24]
 800adf6:	4013      	ands	r3, r2
 800adf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f003 0203 	and.w	r2, r3, #3
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	005b      	lsls	r3, r3, #1
 800ae06:	fa02 f303 	lsl.w	r3, r2, r3
 800ae0a:	69ba      	ldr	r2, [r7, #24]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	69ba      	ldr	r2, [r7, #24]
 800ae14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f000 80e0 	beq.w	800afe4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae24:	4b2f      	ldr	r3, [pc, #188]	; (800aee4 <HAL_GPIO_Init+0x238>)
 800ae26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae2a:	4a2e      	ldr	r2, [pc, #184]	; (800aee4 <HAL_GPIO_Init+0x238>)
 800ae2c:	f043 0302 	orr.w	r3, r3, #2
 800ae30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ae34:	4b2b      	ldr	r3, [pc, #172]	; (800aee4 <HAL_GPIO_Init+0x238>)
 800ae36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae3a:	f003 0302 	and.w	r3, r3, #2
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ae42:	4a29      	ldr	r2, [pc, #164]	; (800aee8 <HAL_GPIO_Init+0x23c>)
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	089b      	lsrs	r3, r3, #2
 800ae48:	3302      	adds	r3, #2
 800ae4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	f003 0303 	and.w	r3, r3, #3
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	220f      	movs	r2, #15
 800ae5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae5e:	43db      	mvns	r3, r3
 800ae60:	69ba      	ldr	r2, [r7, #24]
 800ae62:	4013      	ands	r3, r2
 800ae64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a20      	ldr	r2, [pc, #128]	; (800aeec <HAL_GPIO_Init+0x240>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d052      	beq.n	800af14 <HAL_GPIO_Init+0x268>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a1f      	ldr	r2, [pc, #124]	; (800aef0 <HAL_GPIO_Init+0x244>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d031      	beq.n	800aeda <HAL_GPIO_Init+0x22e>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a1e      	ldr	r2, [pc, #120]	; (800aef4 <HAL_GPIO_Init+0x248>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d02b      	beq.n	800aed6 <HAL_GPIO_Init+0x22a>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a1d      	ldr	r2, [pc, #116]	; (800aef8 <HAL_GPIO_Init+0x24c>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d025      	beq.n	800aed2 <HAL_GPIO_Init+0x226>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a1c      	ldr	r2, [pc, #112]	; (800aefc <HAL_GPIO_Init+0x250>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d01f      	beq.n	800aece <HAL_GPIO_Init+0x222>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a1b      	ldr	r2, [pc, #108]	; (800af00 <HAL_GPIO_Init+0x254>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d019      	beq.n	800aeca <HAL_GPIO_Init+0x21e>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a1a      	ldr	r2, [pc, #104]	; (800af04 <HAL_GPIO_Init+0x258>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d013      	beq.n	800aec6 <HAL_GPIO_Init+0x21a>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a19      	ldr	r2, [pc, #100]	; (800af08 <HAL_GPIO_Init+0x25c>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d00d      	beq.n	800aec2 <HAL_GPIO_Init+0x216>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a18      	ldr	r2, [pc, #96]	; (800af0c <HAL_GPIO_Init+0x260>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d007      	beq.n	800aebe <HAL_GPIO_Init+0x212>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a17      	ldr	r2, [pc, #92]	; (800af10 <HAL_GPIO_Init+0x264>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d101      	bne.n	800aeba <HAL_GPIO_Init+0x20e>
 800aeb6:	2309      	movs	r3, #9
 800aeb8:	e02d      	b.n	800af16 <HAL_GPIO_Init+0x26a>
 800aeba:	230a      	movs	r3, #10
 800aebc:	e02b      	b.n	800af16 <HAL_GPIO_Init+0x26a>
 800aebe:	2308      	movs	r3, #8
 800aec0:	e029      	b.n	800af16 <HAL_GPIO_Init+0x26a>
 800aec2:	2307      	movs	r3, #7
 800aec4:	e027      	b.n	800af16 <HAL_GPIO_Init+0x26a>
 800aec6:	2306      	movs	r3, #6
 800aec8:	e025      	b.n	800af16 <HAL_GPIO_Init+0x26a>
 800aeca:	2305      	movs	r3, #5
 800aecc:	e023      	b.n	800af16 <HAL_GPIO_Init+0x26a>
 800aece:	2304      	movs	r3, #4
 800aed0:	e021      	b.n	800af16 <HAL_GPIO_Init+0x26a>
 800aed2:	2303      	movs	r3, #3
 800aed4:	e01f      	b.n	800af16 <HAL_GPIO_Init+0x26a>
 800aed6:	2302      	movs	r3, #2
 800aed8:	e01d      	b.n	800af16 <HAL_GPIO_Init+0x26a>
 800aeda:	2301      	movs	r3, #1
 800aedc:	e01b      	b.n	800af16 <HAL_GPIO_Init+0x26a>
 800aede:	bf00      	nop
 800aee0:	58000080 	.word	0x58000080
 800aee4:	58024400 	.word	0x58024400
 800aee8:	58000400 	.word	0x58000400
 800aeec:	58020000 	.word	0x58020000
 800aef0:	58020400 	.word	0x58020400
 800aef4:	58020800 	.word	0x58020800
 800aef8:	58020c00 	.word	0x58020c00
 800aefc:	58021000 	.word	0x58021000
 800af00:	58021400 	.word	0x58021400
 800af04:	58021800 	.word	0x58021800
 800af08:	58021c00 	.word	0x58021c00
 800af0c:	58022000 	.word	0x58022000
 800af10:	58022400 	.word	0x58022400
 800af14:	2300      	movs	r3, #0
 800af16:	69fa      	ldr	r2, [r7, #28]
 800af18:	f002 0203 	and.w	r2, r2, #3
 800af1c:	0092      	lsls	r2, r2, #2
 800af1e:	4093      	lsls	r3, r2
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	4313      	orrs	r3, r2
 800af24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800af26:	4938      	ldr	r1, [pc, #224]	; (800b008 <HAL_GPIO_Init+0x35c>)
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	089b      	lsrs	r3, r3, #2
 800af2c:	3302      	adds	r3, #2
 800af2e:	69ba      	ldr	r2, [r7, #24]
 800af30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800af34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	43db      	mvns	r3, r3
 800af40:	69ba      	ldr	r2, [r7, #24]
 800af42:	4013      	ands	r3, r2
 800af44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800af52:	69ba      	ldr	r2, [r7, #24]
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	4313      	orrs	r3, r2
 800af58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800af5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800af62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	43db      	mvns	r3, r3
 800af6e:	69ba      	ldr	r2, [r7, #24]
 800af70:	4013      	ands	r3, r2
 800af72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d003      	beq.n	800af88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	4313      	orrs	r3, r2
 800af86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800af88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	43db      	mvns	r3, r3
 800af9a:	69ba      	ldr	r2, [r7, #24]
 800af9c:	4013      	ands	r3, r2
 800af9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800afac:	69ba      	ldr	r2, [r7, #24]
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	69ba      	ldr	r2, [r7, #24]
 800afb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	43db      	mvns	r3, r3
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	4013      	ands	r3, r2
 800afc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800afd6:	69ba      	ldr	r2, [r7, #24]
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	4313      	orrs	r3, r2
 800afdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	3301      	adds	r3, #1
 800afe8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	fa22 f303 	lsr.w	r3, r2, r3
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f47f ae63 	bne.w	800acc0 <HAL_GPIO_Init+0x14>
  }
}
 800affa:	bf00      	nop
 800affc:	bf00      	nop
 800affe:	3724      	adds	r7, #36	; 0x24
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	58000400 	.word	0x58000400

0800b00c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	691a      	ldr	r2, [r3, #16]
 800b01c:	887b      	ldrh	r3, [r7, #2]
 800b01e:	4013      	ands	r3, r2
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b024:	2301      	movs	r3, #1
 800b026:	73fb      	strb	r3, [r7, #15]
 800b028:	e001      	b.n	800b02e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	807b      	strh	r3, [r7, #2]
 800b048:	4613      	mov	r3, r2
 800b04a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b04c:	787b      	ldrb	r3, [r7, #1]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d003      	beq.n	800b05a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b052:	887a      	ldrh	r2, [r7, #2]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b058:	e003      	b.n	800b062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b05a:	887b      	ldrh	r3, [r7, #2]
 800b05c:	041a      	lsls	r2, r3, #16
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	619a      	str	r2, [r3, #24]
}
 800b062:	bf00      	nop
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
	...

0800b070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d101      	bne.n	800b082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e08b      	b.n	800b19a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d106      	bne.n	800b09c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7f7 faf8 	bl	800268c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2224      	movs	r2, #36	; 0x24
 800b0a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f022 0201 	bic.w	r2, r2, #1
 800b0b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b0c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	689a      	ldr	r2, [r3, #8]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b0d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d107      	bne.n	800b0ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689a      	ldr	r2, [r3, #8]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b0e6:	609a      	str	r2, [r3, #8]
 800b0e8:	e006      	b.n	800b0f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689a      	ldr	r2, [r3, #8]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b0f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d108      	bne.n	800b112 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b10e:	605a      	str	r2, [r3, #4]
 800b110:	e007      	b.n	800b122 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b120:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	6859      	ldr	r1, [r3, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	4b1d      	ldr	r3, [pc, #116]	; (800b1a4 <HAL_I2C_Init+0x134>)
 800b12e:	430b      	orrs	r3, r1
 800b130:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68da      	ldr	r2, [r3, #12]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b140:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	691a      	ldr	r2, [r3, #16]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	699b      	ldr	r3, [r3, #24]
 800b152:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	430a      	orrs	r2, r1
 800b15a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	69d9      	ldr	r1, [r3, #28]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a1a      	ldr	r2, [r3, #32]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	430a      	orrs	r2, r1
 800b16a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f042 0201 	orr.w	r2, r2, #1
 800b17a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2220      	movs	r2, #32
 800b186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	02008000 	.word	0x02008000

0800b1a8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b08a      	sub	sp, #40	; 0x28
 800b1ac:	af02      	add	r7, sp, #8
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	607a      	str	r2, [r7, #4]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	817b      	strh	r3, [r7, #10]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	2b20      	cmp	r3, #32
 800b1ca:	f040 80ef 	bne.w	800b3ac <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	699b      	ldr	r3, [r3, #24]
 800b1d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1dc:	d101      	bne.n	800b1e2 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b1de:	2302      	movs	r3, #2
 800b1e0:	e0e5      	b.n	800b3ae <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d101      	bne.n	800b1f0 <HAL_I2C_Master_Transmit_DMA+0x48>
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	e0de      	b.n	800b3ae <HAL_I2C_Master_Transmit_DMA+0x206>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2221      	movs	r2, #33	; 0x21
 800b1fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2210      	movs	r2, #16
 800b204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	893a      	ldrh	r2, [r7, #8]
 800b218:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	4a66      	ldr	r2, [pc, #408]	; (800b3b8 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b21e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4a66      	ldr	r2, [pc, #408]	; (800b3bc <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b224:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	2bff      	cmp	r3, #255	; 0xff
 800b22e:	d906      	bls.n	800b23e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	22ff      	movs	r2, #255	; 0xff
 800b234:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b236:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b23a:	61fb      	str	r3, [r7, #28]
 800b23c:	e007      	b.n	800b24e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b242:	b29a      	uxth	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b24c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b252:	2b00      	cmp	r3, #0
 800b254:	d01a      	beq.n	800b28c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25a:	781a      	ldrb	r2, [r3, #0]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b266:	1c5a      	adds	r2, r3, #1
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b270:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b276:	b29b      	uxth	r3, r3
 800b278:	3b01      	subs	r3, #1
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b284:	3b01      	subs	r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b290:	2b00      	cmp	r3, #0
 800b292:	d074      	beq.n	800b37e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d022      	beq.n	800b2e2 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a0:	4a47      	ldr	r2, [pc, #284]	; (800b3c0 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b2a2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a8:	4a46      	ldr	r2, [pc, #280]	; (800b3c4 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b2aa:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b2cc:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b2d2:	f7fc ff17 	bl	8008104 <HAL_DMA_Start_IT>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b2da:	7dfb      	ldrb	r3, [r7, #23]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d13a      	bne.n	800b356 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800b2e0:	e013      	b.n	800b30a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2220      	movs	r2, #32
 800b2e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	e051      	b.n	800b3ae <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	3301      	adds	r3, #1
 800b312:	b2da      	uxtb	r2, r3
 800b314:	8979      	ldrh	r1, [r7, #10]
 800b316:	4b2c      	ldr	r3, [pc, #176]	; (800b3c8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	68f8      	ldr	r0, [r7, #12]
 800b31e:	f002 f83b 	bl	800d398 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b326:	b29a      	uxth	r2, r3
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	b29a      	uxth	r2, r3
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b33c:	2110      	movs	r1, #16
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f002 f85c 	bl	800d3fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b352:	601a      	str	r2, [r3, #0]
 800b354:	e028      	b.n	800b3a8 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2220      	movs	r2, #32
 800b35a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b36a:	f043 0210 	orr.w	r2, r3, #16
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e017      	b.n	800b3ae <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	4a12      	ldr	r2, [pc, #72]	; (800b3cc <HAL_I2C_Master_Transmit_DMA+0x224>)
 800b382:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	b2da      	uxtb	r2, r3
 800b388:	8979      	ldrh	r1, [r7, #10]
 800b38a:	4b0f      	ldr	r3, [pc, #60]	; (800b3c8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f002 f800 	bl	800d398 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f002 f82a 	bl	800d3fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	e000      	b.n	800b3ae <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b3ac:	2302      	movs	r3, #2
  }
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3720      	adds	r7, #32
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	ffff0000 	.word	0xffff0000
 800b3bc:	0800bc03 	.word	0x0800bc03
 800b3c0:	0800cfbb 	.word	0x0800cfbb
 800b3c4:	0800d0e9 	.word	0x0800d0e9
 800b3c8:	80002000 	.word	0x80002000
 800b3cc:	0800b793 	.word	0x0800b793

0800b3d0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af02      	add	r7, sp, #8
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	607a      	str	r2, [r7, #4]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	460b      	mov	r3, r1
 800b3de:	817b      	strh	r3, [r7, #10]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	2b20      	cmp	r3, #32
 800b3ee:	f040 80cd 	bne.w	800b58c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	699b      	ldr	r3, [r3, #24]
 800b3f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b400:	d101      	bne.n	800b406 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800b402:	2302      	movs	r3, #2
 800b404:	e0c3      	b.n	800b58e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d101      	bne.n	800b414 <HAL_I2C_Master_Receive_DMA+0x44>
 800b410:	2302      	movs	r3, #2
 800b412:	e0bc      	b.n	800b58e <HAL_I2C_Master_Receive_DMA+0x1be>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2222      	movs	r2, #34	; 0x22
 800b420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2210      	movs	r2, #16
 800b428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2200      	movs	r2, #0
 800b430:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	893a      	ldrh	r2, [r7, #8]
 800b43c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	4a55      	ldr	r2, [pc, #340]	; (800b598 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800b442:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	4a55      	ldr	r2, [pc, #340]	; (800b59c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800b448:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b44e:	b29b      	uxth	r3, r3
 800b450:	2bff      	cmp	r3, #255	; 0xff
 800b452:	d906      	bls.n	800b462 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	22ff      	movs	r2, #255	; 0xff
 800b458:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b45a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b45e:	617b      	str	r3, [r7, #20]
 800b460:	e007      	b.n	800b472 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b466:	b29a      	uxth	r2, r3
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b46c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b470:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b476:	2b00      	cmp	r3, #0
 800b478:	d070      	beq.n	800b55c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d020      	beq.n	800b4c4 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b486:	4a46      	ldr	r2, [pc, #280]	; (800b5a0 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800b488:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b48e:	4a45      	ldr	r2, [pc, #276]	; (800b5a4 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800b490:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b496:	2200      	movs	r2, #0
 800b498:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b49e:	2200      	movs	r2, #0
 800b4a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3324      	adds	r3, #36	; 0x24
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b4b4:	f7fc fe26 	bl	8008104 <HAL_DMA_Start_IT>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b4bc:	7cfb      	ldrb	r3, [r7, #19]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d138      	bne.n	800b534 <HAL_I2C_Master_Receive_DMA+0x164>
 800b4c2:	e013      	b.n	800b4ec <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2220      	movs	r2, #32
 800b4c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e050      	b.n	800b58e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4f0:	b2da      	uxtb	r2, r3
 800b4f2:	8979      	ldrh	r1, [r7, #10]
 800b4f4:	4b2c      	ldr	r3, [pc, #176]	; (800b5a8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f001 ff4c 	bl	800d398 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b504:	b29a      	uxth	r2, r3
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b51a:	2110      	movs	r1, #16
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f001 ff6d 	bl	800d3fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	e029      	b.n	800b588 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2220      	movs	r2, #32
 800b538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b548:	f043 0210 	orr.w	r2, r3, #16
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2200      	movs	r2, #0
 800b554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e018      	b.n	800b58e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	4a13      	ldr	r2, [pc, #76]	; (800b5ac <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800b560:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b566:	b2da      	uxtb	r2, r3
 800b568:	8979      	ldrh	r1, [r7, #10]
 800b56a:	4b0f      	ldr	r3, [pc, #60]	; (800b5a8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f001 ff10 	bl	800d398 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b580:	2102      	movs	r1, #2
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f001 ff3a 	bl	800d3fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b588:	2300      	movs	r3, #0
 800b58a:	e000      	b.n	800b58e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800b58c:	2302      	movs	r3, #2
  }
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3718      	adds	r7, #24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	ffff0000 	.word	0xffff0000
 800b59c:	0800bc03 	.word	0x0800bc03
 800b5a0:	0800d051 	.word	0x0800d051
 800b5a4:	0800d0e9 	.word	0x0800d0e9
 800b5a8:	80002400 	.word	0x80002400
 800b5ac:	0800b793 	.word	0x0800b793

0800b5b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d005      	beq.n	800b5dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	68f9      	ldr	r1, [r7, #12]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	4798      	blx	r3
  }
}
 800b5dc:	bf00      	nop
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	699b      	ldr	r3, [r3, #24]
 800b5f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	0a1b      	lsrs	r3, r3, #8
 800b600:	f003 0301 	and.w	r3, r3, #1
 800b604:	2b00      	cmp	r3, #0
 800b606:	d010      	beq.n	800b62a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	09db      	lsrs	r3, r3, #7
 800b60c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00a      	beq.n	800b62a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b618:	f043 0201 	orr.w	r2, r3, #1
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b628:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	0a9b      	lsrs	r3, r3, #10
 800b62e:	f003 0301 	and.w	r3, r3, #1
 800b632:	2b00      	cmp	r3, #0
 800b634:	d010      	beq.n	800b658 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	09db      	lsrs	r3, r3, #7
 800b63a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00a      	beq.n	800b658 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b646:	f043 0208 	orr.w	r2, r3, #8
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b656:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	0a5b      	lsrs	r3, r3, #9
 800b65c:	f003 0301 	and.w	r3, r3, #1
 800b660:	2b00      	cmp	r3, #0
 800b662:	d010      	beq.n	800b686 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	09db      	lsrs	r3, r3, #7
 800b668:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00a      	beq.n	800b686 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b674:	f043 0202 	orr.w	r2, r3, #2
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b684:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b68a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f003 030b 	and.w	r3, r3, #11
 800b692:	2b00      	cmp	r3, #0
 800b694:	d003      	beq.n	800b69e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b696:	68f9      	ldr	r1, [r7, #12]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f001 fb53 	bl	800cd44 <I2C_ITError>
  }
}
 800b69e:	bf00      	nop
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b083      	sub	sp, #12
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b6ae:	bf00      	nop
 800b6b0:	370c      	adds	r7, #12
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b6c2:	bf00      	nop
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b083      	sub	sp, #12
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b6d6:	bf00      	nop
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b6ea:	bf00      	nop
 800b6ec:	370c      	adds	r7, #12
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b083      	sub	sp, #12
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	70fb      	strb	r3, [r7, #3]
 800b702:	4613      	mov	r3, r2
 800b704:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b706:	bf00      	nop
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b712:	b480      	push	{r7}
 800b714:	b083      	sub	sp, #12
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b71a:	bf00      	nop
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b726:	b480      	push	{r7}
 800b728:	b083      	sub	sp, #12
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b72e:	bf00      	nop
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b083      	sub	sp, #12
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800b742:	bf00      	nop
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr

0800b74e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b74e:	b480      	push	{r7}
 800b750:	b083      	sub	sp, #12
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b756:	bf00      	nop
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr

0800b762 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b762:	b480      	push	{r7}
 800b764:	b083      	sub	sp, #12
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b76a:	bf00      	nop
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b784:	b2db      	uxtb	r3, r3
}
 800b786:	4618      	mov	r0, r3
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b088      	sub	sp, #32
 800b796:	af02      	add	r7, sp, #8
 800b798:	60f8      	str	r0, [r7, #12]
 800b79a:	60b9      	str	r1, [r7, #8]
 800b79c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d101      	bne.n	800b7b0 <I2C_Master_ISR_IT+0x1e>
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	e120      	b.n	800b9f2 <I2C_Master_ISR_IT+0x260>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	091b      	lsrs	r3, r3, #4
 800b7bc:	f003 0301 	and.w	r3, r3, #1
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d013      	beq.n	800b7ec <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	091b      	lsrs	r3, r3, #4
 800b7c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00d      	beq.n	800b7ec <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2210      	movs	r2, #16
 800b7d6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7dc:	f043 0204 	orr.w	r2, r3, #4
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f001 fbc4 	bl	800cf72 <I2C_Flush_TXDR>
 800b7ea:	e0ed      	b.n	800b9c8 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	089b      	lsrs	r3, r3, #2
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d023      	beq.n	800b840 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	089b      	lsrs	r3, r3, #2
 800b7fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b800:	2b00      	cmp	r3, #0
 800b802:	d01d      	beq.n	800b840 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f023 0304 	bic.w	r3, r3, #4
 800b80a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	b2d2      	uxtb	r2, r2
 800b818:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b828:	3b01      	subs	r3, #1
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b834:	b29b      	uxth	r3, r3
 800b836:	3b01      	subs	r3, #1
 800b838:	b29a      	uxth	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b83e:	e0c3      	b.n	800b9c8 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	099b      	lsrs	r3, r3, #6
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d12a      	bne.n	800b8a2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	085b      	lsrs	r3, r3, #1
 800b850:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800b854:	2b00      	cmp	r3, #0
 800b856:	d024      	beq.n	800b8a2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	085b      	lsrs	r3, r3, #1
 800b85c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b860:	2b00      	cmp	r3, #0
 800b862:	d01e      	beq.n	800b8a2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b868:	b29b      	uxth	r3, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f000 80ac 	beq.w	800b9c8 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b874:	781a      	ldrb	r2, [r3, #0]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	1c5a      	adds	r2, r3, #1
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b88a:	3b01      	subs	r3, #1
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b896:	b29b      	uxth	r3, r3
 800b898:	3b01      	subs	r3, #1
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800b8a0:	e092      	b.n	800b9c8 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	09db      	lsrs	r3, r3, #7
 800b8a6:	f003 0301 	and.w	r3, r3, #1
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d05d      	beq.n	800b96a <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	099b      	lsrs	r3, r3, #6
 800b8b2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d057      	beq.n	800b96a <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d040      	beq.n	800b946 <I2C_Master_ISR_IT+0x1b4>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d13c      	bne.n	800b946 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8d8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	2bff      	cmp	r3, #255	; 0xff
 800b8e2:	d90e      	bls.n	800b902 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	22ff      	movs	r2, #255	; 0xff
 800b8e8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ee:	b2da      	uxtb	r2, r3
 800b8f0:	8a79      	ldrh	r1, [r7, #18]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f001 fd4c 	bl	800d398 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b900:	e032      	b.n	800b968 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b906:	b29a      	uxth	r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b914:	d00b      	beq.n	800b92e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b920:	8a79      	ldrh	r1, [r7, #18]
 800b922:	2000      	movs	r0, #0
 800b924:	9000      	str	r0, [sp, #0]
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f001 fd36 	bl	800d398 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b92c:	e01c      	b.n	800b968 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b932:	b2da      	uxtb	r2, r3
 800b934:	8a79      	ldrh	r1, [r7, #18]
 800b936:	2300      	movs	r3, #0
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f001 fd2a 	bl	800d398 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b944:	e010      	b.n	800b968 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b954:	d003      	beq.n	800b95e <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f000 fdde 	bl	800c518 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b95c:	e034      	b.n	800b9c8 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b95e:	2140      	movs	r1, #64	; 0x40
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f001 f9ef 	bl	800cd44 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b966:	e02f      	b.n	800b9c8 <I2C_Master_ISR_IT+0x236>
 800b968:	e02e      	b.n	800b9c8 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	099b      	lsrs	r3, r3, #6
 800b96e:	f003 0301 	and.w	r3, r3, #1
 800b972:	2b00      	cmp	r3, #0
 800b974:	d028      	beq.n	800b9c8 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	099b      	lsrs	r3, r3, #6
 800b97a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d022      	beq.n	800b9c8 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b986:	b29b      	uxth	r3, r3
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d119      	bne.n	800b9c0 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b996:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b99a:	d015      	beq.n	800b9c8 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b9a4:	d108      	bne.n	800b9b8 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9b4:	605a      	str	r2, [r3, #4]
 800b9b6:	e007      	b.n	800b9c8 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f000 fdad 	bl	800c518 <I2C_ITMasterSeqCplt>
 800b9be:	e003      	b.n	800b9c8 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b9c0:	2140      	movs	r1, #64	; 0x40
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f001 f9be 	bl	800cd44 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	095b      	lsrs	r3, r3, #5
 800b9cc:	f003 0301 	and.w	r3, r3, #1
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d009      	beq.n	800b9e8 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	095b      	lsrs	r3, r3, #5
 800b9d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800b9e0:	6979      	ldr	r1, [r7, #20]
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f000 fe34 	bl	800c650 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3718      	adds	r7, #24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b086      	sub	sp, #24
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d101      	bne.n	800ba1e <I2C_Slave_ISR_IT+0x24>
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	e0ed      	b.n	800bbfa <I2C_Slave_ISR_IT+0x200>
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	095b      	lsrs	r3, r3, #5
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00a      	beq.n	800ba48 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	095b      	lsrs	r3, r3, #5
 800ba36:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d004      	beq.n	800ba48 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800ba3e:	6939      	ldr	r1, [r7, #16]
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f000 fecf 	bl	800c7e4 <I2C_ITSlaveCplt>
 800ba46:	e0d3      	b.n	800bbf0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	091b      	lsrs	r3, r3, #4
 800ba4c:	f003 0301 	and.w	r3, r3, #1
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d04d      	beq.n	800baf0 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	091b      	lsrs	r3, r3, #4
 800ba58:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d047      	beq.n	800baf0 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d128      	bne.n	800babc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	2b28      	cmp	r3, #40	; 0x28
 800ba74:	d108      	bne.n	800ba88 <I2C_Slave_ISR_IT+0x8e>
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba7c:	d104      	bne.n	800ba88 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ba7e:	6939      	ldr	r1, [r7, #16]
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f001 f909 	bl	800cc98 <I2C_ITListenCplt>
 800ba86:	e032      	b.n	800baee <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b29      	cmp	r3, #41	; 0x29
 800ba92:	d10e      	bne.n	800bab2 <I2C_Slave_ISR_IT+0xb8>
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba9a:	d00a      	beq.n	800bab2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2210      	movs	r2, #16
 800baa2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f001 fa64 	bl	800cf72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f000 fd71 	bl	800c592 <I2C_ITSlaveSeqCplt>
 800bab0:	e01d      	b.n	800baee <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2210      	movs	r2, #16
 800bab8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800baba:	e096      	b.n	800bbea <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2210      	movs	r2, #16
 800bac2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac8:	f043 0204 	orr.w	r2, r3, #4
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d004      	beq.n	800bae0 <I2C_Slave_ISR_IT+0xe6>
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800badc:	f040 8085 	bne.w	800bbea <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bae4:	4619      	mov	r1, r3
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f001 f92c 	bl	800cd44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800baec:	e07d      	b.n	800bbea <I2C_Slave_ISR_IT+0x1f0>
 800baee:	e07c      	b.n	800bbea <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	089b      	lsrs	r3, r3, #2
 800baf4:	f003 0301 	and.w	r3, r3, #1
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d030      	beq.n	800bb5e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	089b      	lsrs	r3, r3, #2
 800bb00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d02a      	beq.n	800bb5e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d018      	beq.n	800bb44 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1c:	b2d2      	uxtb	r2, r2
 800bb1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb24:	1c5a      	adds	r2, r3, #1
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d14f      	bne.n	800bbee <I2C_Slave_ISR_IT+0x1f4>
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb54:	d04b      	beq.n	800bbee <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f000 fd1b 	bl	800c592 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bb5c:	e047      	b.n	800bbee <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	08db      	lsrs	r3, r3, #3
 800bb62:	f003 0301 	and.w	r3, r3, #1
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00a      	beq.n	800bb80 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	08db      	lsrs	r3, r3, #3
 800bb6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d004      	beq.n	800bb80 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bb76:	6939      	ldr	r1, [r7, #16]
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f000 fc49 	bl	800c410 <I2C_ITAddrCplt>
 800bb7e:	e037      	b.n	800bbf0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	085b      	lsrs	r3, r3, #1
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d031      	beq.n	800bbf0 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	085b      	lsrs	r3, r3, #1
 800bb90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d02b      	beq.n	800bbf0 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d018      	beq.n	800bbd4 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba6:	781a      	ldrb	r2, [r3, #0]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb2:	1c5a      	adds	r2, r3, #1
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	851a      	strh	r2, [r3, #40]	; 0x28
 800bbd2:	e00d      	b.n	800bbf0 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bbda:	d002      	beq.n	800bbe2 <I2C_Slave_ISR_IT+0x1e8>
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d106      	bne.n	800bbf0 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f000 fcd5 	bl	800c592 <I2C_ITSlaveSeqCplt>
 800bbe8:	e002      	b.n	800bbf0 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800bbea:	bf00      	nop
 800bbec:	e000      	b.n	800bbf0 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800bbee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b088      	sub	sp, #32
 800bc06:	af02      	add	r7, sp, #8
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d101      	bne.n	800bc1c <I2C_Master_ISR_DMA+0x1a>
 800bc18:	2302      	movs	r3, #2
 800bc1a:	e0e1      	b.n	800bde0 <I2C_Master_ISR_DMA+0x1de>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	091b      	lsrs	r3, r3, #4
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d017      	beq.n	800bc60 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	091b      	lsrs	r3, r3, #4
 800bc34:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d011      	beq.n	800bc60 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2210      	movs	r2, #16
 800bc42:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc48:	f043 0204 	orr.w	r2, r3, #4
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bc50:	2120      	movs	r1, #32
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f001 fbd2 	bl	800d3fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f001 f98a 	bl	800cf72 <I2C_Flush_TXDR>
 800bc5e:	e0ba      	b.n	800bdd6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	09db      	lsrs	r3, r3, #7
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d072      	beq.n	800bd52 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	099b      	lsrs	r3, r3, #6
 800bc70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d06c      	beq.n	800bd52 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc86:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d04e      	beq.n	800bd30 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc9e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	2bff      	cmp	r3, #255	; 0xff
 800bca8:	d906      	bls.n	800bcb8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	22ff      	movs	r2, #255	; 0xff
 800bcae:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800bcb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bcb4:	617b      	str	r3, [r7, #20]
 800bcb6:	e010      	b.n	800bcda <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bcca:	d003      	beq.n	800bcd4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd0:	617b      	str	r3, [r7, #20]
 800bcd2:	e002      	b.n	800bcda <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800bcd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bcd8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	8a79      	ldrh	r1, [r7, #18]
 800bce2:	2300      	movs	r3, #0
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f001 fb55 	bl	800d398 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	2b22      	cmp	r3, #34	; 0x22
 800bd0a:	d108      	bne.n	800bd1e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd1a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bd1c:	e05b      	b.n	800bdd6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd2c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bd2e:	e052      	b.n	800bdd6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd3e:	d003      	beq.n	800bd48 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f000 fbe9 	bl	800c518 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800bd46:	e046      	b.n	800bdd6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bd48:	2140      	movs	r1, #64	; 0x40
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f000 fffa 	bl	800cd44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800bd50:	e041      	b.n	800bdd6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	099b      	lsrs	r3, r3, #6
 800bd56:	f003 0301 	and.w	r3, r3, #1
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d029      	beq.n	800bdb2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	099b      	lsrs	r3, r3, #6
 800bd62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d023      	beq.n	800bdb2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d119      	bne.n	800bda8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd82:	d027      	beq.n	800bdd4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd8c:	d108      	bne.n	800bda0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	685a      	ldr	r2, [r3, #4]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd9c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800bd9e:	e019      	b.n	800bdd4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f000 fbb9 	bl	800c518 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800bda6:	e015      	b.n	800bdd4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bda8:	2140      	movs	r1, #64	; 0x40
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 ffca 	bl	800cd44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bdb0:	e010      	b.n	800bdd4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	095b      	lsrs	r3, r3, #5
 800bdb6:	f003 0301 	and.w	r3, r3, #1
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00b      	beq.n	800bdd6 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	095b      	lsrs	r3, r3, #5
 800bdc2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800bdca:	68b9      	ldr	r1, [r7, #8]
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f000 fc3f 	bl	800c650 <I2C_ITMasterCplt>
 800bdd2:	e000      	b.n	800bdd6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800bdd4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3718      	adds	r7, #24
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b088      	sub	sp, #32
 800bdec:	af02      	add	r7, sp, #8
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800bdf4:	4b92      	ldr	r3, [pc, #584]	; (800c040 <I2C_Mem_ISR_DMA+0x258>)
 800bdf6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d101      	bne.n	800be06 <I2C_Mem_ISR_DMA+0x1e>
 800be02:	2302      	movs	r3, #2
 800be04:	e118      	b.n	800c038 <I2C_Mem_ISR_DMA+0x250>
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2201      	movs	r2, #1
 800be0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	091b      	lsrs	r3, r3, #4
 800be12:	f003 0301 	and.w	r3, r3, #1
 800be16:	2b00      	cmp	r3, #0
 800be18:	d017      	beq.n	800be4a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	091b      	lsrs	r3, r3, #4
 800be1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800be22:	2b00      	cmp	r3, #0
 800be24:	d011      	beq.n	800be4a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2210      	movs	r2, #16
 800be2c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be32:	f043 0204 	orr.w	r2, r3, #4
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800be3a:	2120      	movs	r1, #32
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f001 fadd 	bl	800d3fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f001 f895 	bl	800cf72 <I2C_Flush_TXDR>
 800be48:	e0f1      	b.n	800c02e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	085b      	lsrs	r3, r3, #1
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00f      	beq.n	800be76 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	085b      	lsrs	r3, r3, #1
 800be5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d009      	beq.n	800be76 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800be6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be72:	651a      	str	r2, [r3, #80]	; 0x50
 800be74:	e0db      	b.n	800c02e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	09db      	lsrs	r3, r3, #7
 800be7a:	f003 0301 	and.w	r3, r3, #1
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d060      	beq.n	800bf44 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	099b      	lsrs	r3, r3, #6
 800be86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d05a      	beq.n	800bf44 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800be8e:	2101      	movs	r1, #1
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f001 fb37 	bl	800d504 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800be96:	2110      	movs	r1, #16
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f001 faaf 	bl	800d3fc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d048      	beq.n	800bf3a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beac:	b29b      	uxth	r3, r3
 800beae:	2bff      	cmp	r3, #255	; 0xff
 800beb0:	d910      	bls.n	800bed4 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	22ff      	movs	r2, #255	; 0xff
 800beb6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bebc:	b299      	uxth	r1, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bec2:	b2da      	uxtb	r2, r3
 800bec4:	2300      	movs	r3, #0
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f001 fa63 	bl	800d398 <I2C_TransferConfig>
 800bed2:	e011      	b.n	800bef8 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bed8:	b29a      	uxth	r2, r3
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bee2:	b299      	uxth	r1, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	2300      	movs	r3, #0
 800beec:	9300      	str	r3, [sp, #0]
 800beee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f001 fa50 	bl	800d398 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800befc:	b29a      	uxth	r2, r3
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	2b22      	cmp	r3, #34	; 0x22
 800bf14:	d108      	bne.n	800bf28 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf24:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bf26:	e082      	b.n	800c02e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf36:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bf38:	e079      	b.n	800c02e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bf3a:	2140      	movs	r1, #64	; 0x40
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f000 ff01 	bl	800cd44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800bf42:	e074      	b.n	800c02e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	099b      	lsrs	r3, r3, #6
 800bf48:	f003 0301 	and.w	r3, r3, #1
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d05e      	beq.n	800c00e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	099b      	lsrs	r3, r3, #6
 800bf54:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d058      	beq.n	800c00e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bf5c:	2101      	movs	r1, #1
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f001 fad0 	bl	800d504 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bf64:	2110      	movs	r1, #16
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	f001 fa48 	bl	800d3fc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	2b22      	cmp	r3, #34	; 0x22
 800bf76:	d101      	bne.n	800bf7c <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800bf78:	4b32      	ldr	r3, [pc, #200]	; (800c044 <I2C_Mem_ISR_DMA+0x25c>)
 800bf7a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	2bff      	cmp	r3, #255	; 0xff
 800bf84:	d910      	bls.n	800bfa8 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	22ff      	movs	r2, #255	; 0xff
 800bf8a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf90:	b299      	uxth	r1, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	f001 f9f9 	bl	800d398 <I2C_TransferConfig>
 800bfa6:	e011      	b.n	800bfcc <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfb6:	b299      	uxth	r1, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f001 f9e6 	bl	800d398 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b22      	cmp	r3, #34	; 0x22
 800bfe8:	d108      	bne.n	800bffc <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bff8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bffa:	e018      	b.n	800c02e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c00a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c00c:	e00f      	b.n	800c02e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	095b      	lsrs	r3, r3, #5
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	2b00      	cmp	r3, #0
 800c018:	d009      	beq.n	800c02e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	095b      	lsrs	r3, r3, #5
 800c01e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c022:	2b00      	cmp	r3, #0
 800c024:	d003      	beq.n	800c02e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c026:	68b9      	ldr	r1, [r7, #8]
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 fb11 	bl	800c650 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2200      	movs	r2, #0
 800c032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3718      	adds	r7, #24
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	80002000 	.word	0x80002000
 800c044:	80002400 	.word	0x80002400

0800c048 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b088      	sub	sp, #32
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c058:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c05a:	2300      	movs	r3, #0
 800c05c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c064:	2b01      	cmp	r3, #1
 800c066:	d101      	bne.n	800c06c <I2C_Slave_ISR_DMA+0x24>
 800c068:	2302      	movs	r3, #2
 800c06a:	e1cc      	b.n	800c406 <I2C_Slave_ISR_DMA+0x3be>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2201      	movs	r2, #1
 800c070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	095b      	lsrs	r3, r3, #5
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00a      	beq.n	800c096 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	095b      	lsrs	r3, r3, #5
 800c084:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d004      	beq.n	800c096 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c08c:	68b9      	ldr	r1, [r7, #8]
 800c08e:	68f8      	ldr	r0, [r7, #12]
 800c090:	f000 fba8 	bl	800c7e4 <I2C_ITSlaveCplt>
 800c094:	e1b2      	b.n	800c3fc <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	091b      	lsrs	r3, r3, #4
 800c09a:	f003 0301 	and.w	r3, r3, #1
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f000 819c 	beq.w	800c3dc <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	091b      	lsrs	r3, r3, #4
 800c0a8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f000 8195 	beq.w	800c3dc <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	0b9b      	lsrs	r3, r3, #14
 800c0b6:	f003 0301 	and.w	r3, r3, #1
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d106      	bne.n	800c0cc <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	0bdb      	lsrs	r3, r3, #15
 800c0c2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 8181 	beq.w	800c3ce <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d07c      	beq.n	800c1ce <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	0bdb      	lsrs	r3, r3, #15
 800c0d8:	f003 0301 	and.w	r3, r3, #1
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d076      	beq.n	800c1ce <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a75      	ldr	r2, [pc, #468]	; (800c2bc <I2C_Slave_ISR_DMA+0x274>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d059      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a73      	ldr	r2, [pc, #460]	; (800c2c0 <I2C_Slave_ISR_DMA+0x278>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d053      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a71      	ldr	r2, [pc, #452]	; (800c2c4 <I2C_Slave_ISR_DMA+0x27c>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d04d      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a6f      	ldr	r2, [pc, #444]	; (800c2c8 <I2C_Slave_ISR_DMA+0x280>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d047      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a6d      	ldr	r2, [pc, #436]	; (800c2cc <I2C_Slave_ISR_DMA+0x284>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d041      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a6b      	ldr	r2, [pc, #428]	; (800c2d0 <I2C_Slave_ISR_DMA+0x288>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d03b      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a69      	ldr	r2, [pc, #420]	; (800c2d4 <I2C_Slave_ISR_DMA+0x28c>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d035      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a67      	ldr	r2, [pc, #412]	; (800c2d8 <I2C_Slave_ISR_DMA+0x290>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d02f      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a65      	ldr	r2, [pc, #404]	; (800c2dc <I2C_Slave_ISR_DMA+0x294>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d029      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a63      	ldr	r2, [pc, #396]	; (800c2e0 <I2C_Slave_ISR_DMA+0x298>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d023      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a61      	ldr	r2, [pc, #388]	; (800c2e4 <I2C_Slave_ISR_DMA+0x29c>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d01d      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a5f      	ldr	r2, [pc, #380]	; (800c2e8 <I2C_Slave_ISR_DMA+0x2a0>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d017      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a5d      	ldr	r2, [pc, #372]	; (800c2ec <I2C_Slave_ISR_DMA+0x2a4>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d011      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a5b      	ldr	r2, [pc, #364]	; (800c2f0 <I2C_Slave_ISR_DMA+0x2a8>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d00b      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a59      	ldr	r2, [pc, #356]	; (800c2f4 <I2C_Slave_ISR_DMA+0x2ac>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d005      	beq.n	800c1a0 <I2C_Slave_ISR_DMA+0x158>
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a57      	ldr	r2, [pc, #348]	; (800c2f8 <I2C_Slave_ISR_DMA+0x2b0>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d109      	bne.n	800c1b4 <I2C_Slave_ISR_DMA+0x16c>
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	bf0c      	ite	eq
 800c1ac:	2301      	moveq	r3, #1
 800c1ae:	2300      	movne	r3, #0
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	e008      	b.n	800c1c6 <I2C_Slave_ISR_DMA+0x17e>
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	bf0c      	ite	eq
 800c1c0:	2301      	moveq	r3, #1
 800c1c2:	2300      	movne	r3, #0
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d001      	beq.n	800c1ce <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f000 809f 	beq.w	800c316 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	0b9b      	lsrs	r3, r3, #14
 800c1dc:	f003 0301 	and.w	r3, r3, #1
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 8098 	beq.w	800c316 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a33      	ldr	r2, [pc, #204]	; (800c2bc <I2C_Slave_ISR_DMA+0x274>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d059      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a31      	ldr	r2, [pc, #196]	; (800c2c0 <I2C_Slave_ISR_DMA+0x278>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d053      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a2f      	ldr	r2, [pc, #188]	; (800c2c4 <I2C_Slave_ISR_DMA+0x27c>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d04d      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a2d      	ldr	r2, [pc, #180]	; (800c2c8 <I2C_Slave_ISR_DMA+0x280>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d047      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a2b      	ldr	r2, [pc, #172]	; (800c2cc <I2C_Slave_ISR_DMA+0x284>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d041      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a29      	ldr	r2, [pc, #164]	; (800c2d0 <I2C_Slave_ISR_DMA+0x288>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d03b      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a27      	ldr	r2, [pc, #156]	; (800c2d4 <I2C_Slave_ISR_DMA+0x28c>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d035      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a25      	ldr	r2, [pc, #148]	; (800c2d8 <I2C_Slave_ISR_DMA+0x290>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d02f      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a23      	ldr	r2, [pc, #140]	; (800c2dc <I2C_Slave_ISR_DMA+0x294>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d029      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a21      	ldr	r2, [pc, #132]	; (800c2e0 <I2C_Slave_ISR_DMA+0x298>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d023      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a1f      	ldr	r2, [pc, #124]	; (800c2e4 <I2C_Slave_ISR_DMA+0x29c>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d01d      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a1d      	ldr	r2, [pc, #116]	; (800c2e8 <I2C_Slave_ISR_DMA+0x2a0>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d017      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a1b      	ldr	r2, [pc, #108]	; (800c2ec <I2C_Slave_ISR_DMA+0x2a4>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d011      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a19      	ldr	r2, [pc, #100]	; (800c2f0 <I2C_Slave_ISR_DMA+0x2a8>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d00b      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a17      	ldr	r2, [pc, #92]	; (800c2f4 <I2C_Slave_ISR_DMA+0x2ac>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d005      	beq.n	800c2a6 <I2C_Slave_ISR_DMA+0x25e>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a15      	ldr	r2, [pc, #84]	; (800c2f8 <I2C_Slave_ISR_DMA+0x2b0>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d12a      	bne.n	800c2fc <I2C_Slave_ISR_DMA+0x2b4>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	bf0c      	ite	eq
 800c2b2:	2301      	moveq	r3, #1
 800c2b4:	2300      	movne	r3, #0
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	e029      	b.n	800c30e <I2C_Slave_ISR_DMA+0x2c6>
 800c2ba:	bf00      	nop
 800c2bc:	40020010 	.word	0x40020010
 800c2c0:	40020028 	.word	0x40020028
 800c2c4:	40020040 	.word	0x40020040
 800c2c8:	40020058 	.word	0x40020058
 800c2cc:	40020070 	.word	0x40020070
 800c2d0:	40020088 	.word	0x40020088
 800c2d4:	400200a0 	.word	0x400200a0
 800c2d8:	400200b8 	.word	0x400200b8
 800c2dc:	40020410 	.word	0x40020410
 800c2e0:	40020428 	.word	0x40020428
 800c2e4:	40020440 	.word	0x40020440
 800c2e8:	40020458 	.word	0x40020458
 800c2ec:	40020470 	.word	0x40020470
 800c2f0:	40020488 	.word	0x40020488
 800c2f4:	400204a0 	.word	0x400204a0
 800c2f8:	400204b8 	.word	0x400204b8
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	bf0c      	ite	eq
 800c308:	2301      	moveq	r3, #1
 800c30a:	2300      	movne	r3, #0
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800c312:	2301      	movs	r3, #1
 800c314:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d128      	bne.n	800c36e <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c322:	b2db      	uxtb	r3, r3
 800c324:	2b28      	cmp	r3, #40	; 0x28
 800c326:	d108      	bne.n	800c33a <I2C_Slave_ISR_DMA+0x2f2>
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c32e:	d104      	bne.n	800c33a <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c330:	68b9      	ldr	r1, [r7, #8]
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	f000 fcb0 	bl	800cc98 <I2C_ITListenCplt>
 800c338:	e048      	b.n	800c3cc <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c340:	b2db      	uxtb	r3, r3
 800c342:	2b29      	cmp	r3, #41	; 0x29
 800c344:	d10e      	bne.n	800c364 <I2C_Slave_ISR_DMA+0x31c>
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c34c:	d00a      	beq.n	800c364 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2210      	movs	r2, #16
 800c354:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f000 fe0b 	bl	800cf72 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f000 f918 	bl	800c592 <I2C_ITSlaveSeqCplt>
 800c362:	e033      	b.n	800c3cc <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2210      	movs	r2, #16
 800c36a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c36c:	e034      	b.n	800c3d8 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2210      	movs	r2, #16
 800c374:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c37a:	f043 0204 	orr.w	r2, r3, #4
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c388:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d003      	beq.n	800c398 <I2C_Slave_ISR_DMA+0x350>
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c396:	d11f      	bne.n	800c3d8 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c398:	7dfb      	ldrb	r3, [r7, #23]
 800c39a:	2b21      	cmp	r3, #33	; 0x21
 800c39c:	d002      	beq.n	800c3a4 <I2C_Slave_ISR_DMA+0x35c>
 800c39e:	7dfb      	ldrb	r3, [r7, #23]
 800c3a0:	2b29      	cmp	r3, #41	; 0x29
 800c3a2:	d103      	bne.n	800c3ac <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2221      	movs	r2, #33	; 0x21
 800c3a8:	631a      	str	r2, [r3, #48]	; 0x30
 800c3aa:	e008      	b.n	800c3be <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c3ac:	7dfb      	ldrb	r3, [r7, #23]
 800c3ae:	2b22      	cmp	r3, #34	; 0x22
 800c3b0:	d002      	beq.n	800c3b8 <I2C_Slave_ISR_DMA+0x370>
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
 800c3b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c3b6:	d102      	bne.n	800c3be <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2222      	movs	r2, #34	; 0x22
 800c3bc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f000 fcbd 	bl	800cd44 <I2C_ITError>
      if (treatdmanack == 1U)
 800c3ca:	e005      	b.n	800c3d8 <I2C_Slave_ISR_DMA+0x390>
 800c3cc:	e004      	b.n	800c3d8 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2210      	movs	r2, #16
 800c3d4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c3d6:	e011      	b.n	800c3fc <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800c3d8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c3da:	e00f      	b.n	800c3fc <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	08db      	lsrs	r3, r3, #3
 800c3e0:	f003 0301 	and.w	r3, r3, #1
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d009      	beq.n	800c3fc <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	08db      	lsrs	r3, r3, #3
 800c3ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d003      	beq.n	800c3fc <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c3f4:	68b9      	ldr	r1, [r7, #8]
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f000 f80a 	bl	800c410 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3720      	adds	r7, #32
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop

0800c410 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c420:	b2db      	uxtb	r3, r3
 800c422:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c426:	2b28      	cmp	r3, #40	; 0x28
 800c428:	d16a      	bne.n	800c500 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	0c1b      	lsrs	r3, r3, #16
 800c432:	b2db      	uxtb	r3, r3
 800c434:	f003 0301 	and.w	r3, r3, #1
 800c438:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	699b      	ldr	r3, [r3, #24]
 800c440:	0c1b      	lsrs	r3, r3, #16
 800c442:	b29b      	uxth	r3, r3
 800c444:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c448:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	b29b      	uxth	r3, r3
 800c452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c456:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	b29b      	uxth	r3, r3
 800c460:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c464:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d138      	bne.n	800c4e0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c46e:	897b      	ldrh	r3, [r7, #10]
 800c470:	09db      	lsrs	r3, r3, #7
 800c472:	b29a      	uxth	r2, r3
 800c474:	89bb      	ldrh	r3, [r7, #12]
 800c476:	4053      	eors	r3, r2
 800c478:	b29b      	uxth	r3, r3
 800c47a:	f003 0306 	and.w	r3, r3, #6
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d11c      	bne.n	800c4bc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c482:	897b      	ldrh	r3, [r7, #10]
 800c484:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c48a:	1c5a      	adds	r2, r3, #1
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c494:	2b02      	cmp	r3, #2
 800c496:	d13b      	bne.n	800c510 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2208      	movs	r2, #8
 800c4a4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c4ae:	89ba      	ldrh	r2, [r7, #12]
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7ff f91e 	bl	800b6f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c4ba:	e029      	b.n	800c510 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c4bc:	893b      	ldrh	r3, [r7, #8]
 800c4be:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c4c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f001 f81d 	bl	800d504 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c4d2:	89ba      	ldrh	r2, [r7, #12]
 800c4d4:	7bfb      	ldrb	r3, [r7, #15]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f7ff f90c 	bl	800b6f6 <HAL_I2C_AddrCallback>
}
 800c4de:	e017      	b.n	800c510 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c4e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f001 f80d 	bl	800d504 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c4f2:	89ba      	ldrh	r2, [r7, #12]
 800c4f4:	7bfb      	ldrb	r3, [r7, #15]
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f7ff f8fc 	bl	800b6f6 <HAL_I2C_AddrCallback>
}
 800c4fe:	e007      	b.n	800c510 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2208      	movs	r2, #8
 800c506:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c510:	bf00      	nop
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b21      	cmp	r3, #33	; 0x21
 800c532:	d115      	bne.n	800c560 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2220      	movs	r2, #32
 800c538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2211      	movs	r2, #17
 800c540:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c548:	2101      	movs	r1, #1
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 ffda 	bl	800d504 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f7ff f8a4 	bl	800b6a6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c55e:	e014      	b.n	800c58a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2220      	movs	r2, #32
 800c564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2212      	movs	r2, #18
 800c56c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c574:	2102      	movs	r1, #2
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 ffc4 	bl	800d504 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff f898 	bl	800b6ba <HAL_I2C_MasterRxCpltCallback>
}
 800c58a:	bf00      	nop
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b084      	sub	sp, #16
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	0b9b      	lsrs	r3, r3, #14
 800c5ae:	f003 0301 	and.w	r3, r3, #1
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d008      	beq.n	800c5c8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c5c4:	601a      	str	r2, [r3, #0]
 800c5c6:	e00d      	b.n	800c5e4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	0bdb      	lsrs	r3, r3, #15
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d007      	beq.n	800c5e4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c5e2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b29      	cmp	r3, #41	; 0x29
 800c5ee:	d112      	bne.n	800c616 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2228      	movs	r2, #40	; 0x28
 800c5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2221      	movs	r2, #33	; 0x21
 800c5fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c5fe:	2101      	movs	r1, #1
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 ff7f 	bl	800d504 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f7ff f85d 	bl	800b6ce <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c614:	e017      	b.n	800c646 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b2a      	cmp	r3, #42	; 0x2a
 800c620:	d111      	bne.n	800c646 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2228      	movs	r2, #40	; 0x28
 800c626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2222      	movs	r2, #34	; 0x22
 800c62e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c630:	2102      	movs	r1, #2
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 ff66 	bl	800d504 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff f84e 	bl	800b6e2 <HAL_I2C_SlaveRxCpltCallback>
}
 800c646:	bf00      	nop
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
	...

0800c650 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2220      	movs	r2, #32
 800c664:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	2b21      	cmp	r3, #33	; 0x21
 800c670:	d107      	bne.n	800c682 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c672:	2101      	movs	r1, #1
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 ff45 	bl	800d504 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2211      	movs	r2, #17
 800c67e:	631a      	str	r2, [r3, #48]	; 0x30
 800c680:	e00c      	b.n	800c69c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b22      	cmp	r3, #34	; 0x22
 800c68c:	d106      	bne.n	800c69c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c68e:	2102      	movs	r1, #2
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 ff37 	bl	800d504 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2212      	movs	r2, #18
 800c69a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	6859      	ldr	r1, [r3, #4]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	4b4d      	ldr	r3, [pc, #308]	; (800c7dc <I2C_ITMasterCplt+0x18c>)
 800c6a8:	400b      	ands	r3, r1
 800c6aa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a4a      	ldr	r2, [pc, #296]	; (800c7e0 <I2C_ITMasterCplt+0x190>)
 800c6b6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	091b      	lsrs	r3, r3, #4
 800c6bc:	f003 0301 	and.w	r3, r3, #1
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d009      	beq.n	800c6d8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2210      	movs	r2, #16
 800c6ca:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d0:	f043 0204 	orr.w	r2, r3, #4
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	2b60      	cmp	r3, #96	; 0x60
 800c6e2:	d10b      	bne.n	800c6fc <I2C_ITMasterCplt+0xac>
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	089b      	lsrs	r3, r3, #2
 800c6e8:	f003 0301 	and.w	r3, r3, #1
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d005      	beq.n	800c6fc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fc38 	bl	800cf72 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c706:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	2b60      	cmp	r3, #96	; 0x60
 800c712:	d002      	beq.n	800c71a <I2C_ITMasterCplt+0xca>
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d006      	beq.n	800c728 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 fb0f 	bl	800cd44 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c726:	e054      	b.n	800c7d2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	2b21      	cmp	r3, #33	; 0x21
 800c732:	d124      	bne.n	800c77e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2220      	movs	r2, #32
 800c738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	2b40      	cmp	r3, #64	; 0x40
 800c74c:	d10b      	bne.n	800c766 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f7fe ffe1 	bl	800b726 <HAL_I2C_MemTxCpltCallback>
}
 800c764:	e035      	b.n	800c7d2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7fe ff95 	bl	800b6a6 <HAL_I2C_MasterTxCpltCallback>
}
 800c77c:	e029      	b.n	800c7d2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c784:	b2db      	uxtb	r3, r3
 800c786:	2b22      	cmp	r3, #34	; 0x22
 800c788:	d123      	bne.n	800c7d2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2220      	movs	r2, #32
 800c78e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	2b40      	cmp	r3, #64	; 0x40
 800c7a2:	d10b      	bne.n	800c7bc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7fe ffc0 	bl	800b73a <HAL_I2C_MemRxCpltCallback>
}
 800c7ba:	e00a      	b.n	800c7d2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7fe ff74 	bl	800b6ba <HAL_I2C_MasterRxCpltCallback>
}
 800c7d2:	bf00      	nop
 800c7d4:	3718      	adds	r7, #24
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	fe00e800 	.word	0xfe00e800
 800c7e0:	ffff0000 	.word	0xffff0000

0800c7e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7fe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c806:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2220      	movs	r2, #32
 800c80e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c810:	7afb      	ldrb	r3, [r7, #11]
 800c812:	2b21      	cmp	r3, #33	; 0x21
 800c814:	d002      	beq.n	800c81c <I2C_ITSlaveCplt+0x38>
 800c816:	7afb      	ldrb	r3, [r7, #11]
 800c818:	2b29      	cmp	r3, #41	; 0x29
 800c81a:	d108      	bne.n	800c82e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c81c:	f248 0101 	movw	r1, #32769	; 0x8001
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 fe6f 	bl	800d504 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2221      	movs	r2, #33	; 0x21
 800c82a:	631a      	str	r2, [r3, #48]	; 0x30
 800c82c:	e019      	b.n	800c862 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c82e:	7afb      	ldrb	r3, [r7, #11]
 800c830:	2b22      	cmp	r3, #34	; 0x22
 800c832:	d002      	beq.n	800c83a <I2C_ITSlaveCplt+0x56>
 800c834:	7afb      	ldrb	r3, [r7, #11]
 800c836:	2b2a      	cmp	r3, #42	; 0x2a
 800c838:	d108      	bne.n	800c84c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c83a:	f248 0102 	movw	r1, #32770	; 0x8002
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 fe60 	bl	800d504 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2222      	movs	r2, #34	; 0x22
 800c848:	631a      	str	r2, [r3, #48]	; 0x30
 800c84a:	e00a      	b.n	800c862 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800c84c:	7afb      	ldrb	r3, [r7, #11]
 800c84e:	2b28      	cmp	r3, #40	; 0x28
 800c850:	d107      	bne.n	800c862 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800c852:	f248 0103 	movw	r1, #32771	; 0x8003
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 fe54 	bl	800d504 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	685a      	ldr	r2, [r3, #4]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c870:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	6859      	ldr	r1, [r3, #4]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	4b80      	ldr	r3, [pc, #512]	; (800ca80 <I2C_ITSlaveCplt+0x29c>)
 800c87e:	400b      	ands	r3, r1
 800c880:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fb75 	bl	800cf72 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	0b9b      	lsrs	r3, r3, #14
 800c88c:	f003 0301 	and.w	r3, r3, #1
 800c890:	2b00      	cmp	r3, #0
 800c892:	d07a      	beq.n	800c98a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c8a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f000 8112 	beq.w	800cad2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a73      	ldr	r2, [pc, #460]	; (800ca84 <I2C_ITSlaveCplt+0x2a0>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d059      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a71      	ldr	r2, [pc, #452]	; (800ca88 <I2C_ITSlaveCplt+0x2a4>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d053      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a6f      	ldr	r2, [pc, #444]	; (800ca8c <I2C_ITSlaveCplt+0x2a8>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d04d      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a6d      	ldr	r2, [pc, #436]	; (800ca90 <I2C_ITSlaveCplt+0x2ac>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d047      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a6b      	ldr	r2, [pc, #428]	; (800ca94 <I2C_ITSlaveCplt+0x2b0>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d041      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a69      	ldr	r2, [pc, #420]	; (800ca98 <I2C_ITSlaveCplt+0x2b4>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d03b      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a67      	ldr	r2, [pc, #412]	; (800ca9c <I2C_ITSlaveCplt+0x2b8>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d035      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a65      	ldr	r2, [pc, #404]	; (800caa0 <I2C_ITSlaveCplt+0x2bc>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d02f      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a63      	ldr	r2, [pc, #396]	; (800caa4 <I2C_ITSlaveCplt+0x2c0>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d029      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a61      	ldr	r2, [pc, #388]	; (800caa8 <I2C_ITSlaveCplt+0x2c4>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d023      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a5f      	ldr	r2, [pc, #380]	; (800caac <I2C_ITSlaveCplt+0x2c8>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d01d      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a5d      	ldr	r2, [pc, #372]	; (800cab0 <I2C_ITSlaveCplt+0x2cc>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d017      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a5b      	ldr	r2, [pc, #364]	; (800cab4 <I2C_ITSlaveCplt+0x2d0>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d011      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a59      	ldr	r2, [pc, #356]	; (800cab8 <I2C_ITSlaveCplt+0x2d4>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d00b      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a57      	ldr	r2, [pc, #348]	; (800cabc <I2C_ITSlaveCplt+0x2d8>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d005      	beq.n	800c96e <I2C_ITSlaveCplt+0x18a>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a55      	ldr	r2, [pc, #340]	; (800cac0 <I2C_ITSlaveCplt+0x2dc>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d105      	bne.n	800c97a <I2C_ITSlaveCplt+0x196>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	b29b      	uxth	r3, r3
 800c978:	e004      	b.n	800c984 <I2C_ITSlaveCplt+0x1a0>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	b29b      	uxth	r3, r3
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	8553      	strh	r3, [r2, #42]	; 0x2a
 800c988:	e0a3      	b.n	800cad2 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	0bdb      	lsrs	r3, r3, #15
 800c98e:	f003 0301 	and.w	r3, r3, #1
 800c992:	2b00      	cmp	r3, #0
 800c994:	f000 809d 	beq.w	800cad2 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c9a6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 8090 	beq.w	800cad2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a32      	ldr	r2, [pc, #200]	; (800ca84 <I2C_ITSlaveCplt+0x2a0>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d059      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a30      	ldr	r2, [pc, #192]	; (800ca88 <I2C_ITSlaveCplt+0x2a4>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d053      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a2e      	ldr	r2, [pc, #184]	; (800ca8c <I2C_ITSlaveCplt+0x2a8>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d04d      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a2c      	ldr	r2, [pc, #176]	; (800ca90 <I2C_ITSlaveCplt+0x2ac>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d047      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a2a      	ldr	r2, [pc, #168]	; (800ca94 <I2C_ITSlaveCplt+0x2b0>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d041      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a28      	ldr	r2, [pc, #160]	; (800ca98 <I2C_ITSlaveCplt+0x2b4>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d03b      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a26      	ldr	r2, [pc, #152]	; (800ca9c <I2C_ITSlaveCplt+0x2b8>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d035      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a24      	ldr	r2, [pc, #144]	; (800caa0 <I2C_ITSlaveCplt+0x2bc>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d02f      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a22      	ldr	r2, [pc, #136]	; (800caa4 <I2C_ITSlaveCplt+0x2c0>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d029      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a20      	ldr	r2, [pc, #128]	; (800caa8 <I2C_ITSlaveCplt+0x2c4>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d023      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a1e      	ldr	r2, [pc, #120]	; (800caac <I2C_ITSlaveCplt+0x2c8>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d01d      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a1c      	ldr	r2, [pc, #112]	; (800cab0 <I2C_ITSlaveCplt+0x2cc>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d017      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a1a      	ldr	r2, [pc, #104]	; (800cab4 <I2C_ITSlaveCplt+0x2d0>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d011      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a18      	ldr	r2, [pc, #96]	; (800cab8 <I2C_ITSlaveCplt+0x2d4>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d00b      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a16      	ldr	r2, [pc, #88]	; (800cabc <I2C_ITSlaveCplt+0x2d8>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d005      	beq.n	800ca72 <I2C_ITSlaveCplt+0x28e>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a14      	ldr	r2, [pc, #80]	; (800cac0 <I2C_ITSlaveCplt+0x2dc>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d128      	bne.n	800cac4 <I2C_ITSlaveCplt+0x2e0>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	e027      	b.n	800cace <I2C_ITSlaveCplt+0x2ea>
 800ca7e:	bf00      	nop
 800ca80:	fe00e800 	.word	0xfe00e800
 800ca84:	40020010 	.word	0x40020010
 800ca88:	40020028 	.word	0x40020028
 800ca8c:	40020040 	.word	0x40020040
 800ca90:	40020058 	.word	0x40020058
 800ca94:	40020070 	.word	0x40020070
 800ca98:	40020088 	.word	0x40020088
 800ca9c:	400200a0 	.word	0x400200a0
 800caa0:	400200b8 	.word	0x400200b8
 800caa4:	40020410 	.word	0x40020410
 800caa8:	40020428 	.word	0x40020428
 800caac:	40020440 	.word	0x40020440
 800cab0:	40020458 	.word	0x40020458
 800cab4:	40020470 	.word	0x40020470
 800cab8:	40020488 	.word	0x40020488
 800cabc:	400204a0 	.word	0x400204a0
 800cac0:	400204b8 	.word	0x400204b8
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	b29b      	uxth	r3, r3
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	089b      	lsrs	r3, r3, #2
 800cad6:	f003 0301 	and.w	r3, r3, #1
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d020      	beq.n	800cb20 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	f023 0304 	bic.w	r3, r3, #4
 800cae4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf0:	b2d2      	uxtb	r2, r2
 800caf2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf8:	1c5a      	adds	r2, r3, #1
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00c      	beq.n	800cb20 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d005      	beq.n	800cb36 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb2e:	f043 0204 	orr.w	r2, r3, #4
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	091b      	lsrs	r3, r3, #4
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d04a      	beq.n	800cbd8 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	091b      	lsrs	r3, r3, #4
 800cb46:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d044      	beq.n	800cbd8 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d128      	bne.n	800cbaa <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	2b28      	cmp	r3, #40	; 0x28
 800cb62:	d108      	bne.n	800cb76 <I2C_ITSlaveCplt+0x392>
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb6a:	d104      	bne.n	800cb76 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800cb6c:	6979      	ldr	r1, [r7, #20]
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f892 	bl	800cc98 <I2C_ITListenCplt>
 800cb74:	e030      	b.n	800cbd8 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b29      	cmp	r3, #41	; 0x29
 800cb80:	d10e      	bne.n	800cba0 <I2C_ITSlaveCplt+0x3bc>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cb88:	d00a      	beq.n	800cba0 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2210      	movs	r2, #16
 800cb90:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 f9ed 	bl	800cf72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7ff fcfa 	bl	800c592 <I2C_ITSlaveSeqCplt>
 800cb9e:	e01b      	b.n	800cbd8 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2210      	movs	r2, #16
 800cba6:	61da      	str	r2, [r3, #28]
 800cba8:	e016      	b.n	800cbd8 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2210      	movs	r2, #16
 800cbb0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbb6:	f043 0204 	orr.w	r2, r3, #4
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d003      	beq.n	800cbcc <I2C_ITSlaveCplt+0x3e8>
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cbca:	d105      	bne.n	800cbd8 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 f8b6 	bl	800cd44 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d010      	beq.n	800cc10 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f8a5 	bl	800cd44 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	2b28      	cmp	r3, #40	; 0x28
 800cc04:	d141      	bne.n	800cc8a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cc06:	6979      	ldr	r1, [r7, #20]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f845 	bl	800cc98 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cc0e:	e03c      	b.n	800cc8a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cc18:	d014      	beq.n	800cc44 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff fcb9 	bl	800c592 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4a1c      	ldr	r2, [pc, #112]	; (800cc94 <I2C_ITSlaveCplt+0x4b0>)
 800cc24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2220      	movs	r2, #32
 800cc2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7fe fd68 	bl	800b712 <HAL_I2C_ListenCpltCallback>
}
 800cc42:	e022      	b.n	800cc8a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	2b22      	cmp	r3, #34	; 0x22
 800cc4e:	d10e      	bne.n	800cc6e <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2220      	movs	r2, #32
 800cc54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7fe fd3b 	bl	800b6e2 <HAL_I2C_SlaveRxCpltCallback>
}
 800cc6c:	e00d      	b.n	800cc8a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2220      	movs	r2, #32
 800cc72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7fe fd22 	bl	800b6ce <HAL_I2C_SlaveTxCpltCallback>
}
 800cc8a:	bf00      	nop
 800cc8c:	3718      	adds	r7, #24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	ffff0000 	.word	0xffff0000

0800cc98 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a26      	ldr	r2, [pc, #152]	; (800cd40 <I2C_ITListenCplt+0xa8>)
 800cca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2220      	movs	r2, #32
 800ccb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	089b      	lsrs	r3, r3, #2
 800ccc8:	f003 0301 	and.w	r3, r3, #1
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d022      	beq.n	800cd16 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccda:	b2d2      	uxtb	r2, r2
 800ccdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce2:	1c5a      	adds	r2, r3, #1
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d012      	beq.n	800cd16 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	3b01      	subs	r3, #1
 800cd04:	b29a      	uxth	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd0e:	f043 0204 	orr.w	r2, r3, #4
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd16:	f248 0103 	movw	r1, #32771	; 0x8003
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 fbf2 	bl	800d504 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2210      	movs	r2, #16
 800cd26:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7fe fcee 	bl	800b712 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cd36:	bf00      	nop
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	ffff0000 	.word	0xffff0000

0800cd44 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd54:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a6d      	ldr	r2, [pc, #436]	; (800cf18 <I2C_ITError+0x1d4>)
 800cd62:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	431a      	orrs	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cd76:	7bfb      	ldrb	r3, [r7, #15]
 800cd78:	2b28      	cmp	r3, #40	; 0x28
 800cd7a:	d005      	beq.n	800cd88 <I2C_ITError+0x44>
 800cd7c:	7bfb      	ldrb	r3, [r7, #15]
 800cd7e:	2b29      	cmp	r3, #41	; 0x29
 800cd80:	d002      	beq.n	800cd88 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
 800cd84:	2b2a      	cmp	r3, #42	; 0x2a
 800cd86:	d10b      	bne.n	800cda0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd88:	2103      	movs	r1, #3
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 fbba 	bl	800d504 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2228      	movs	r2, #40	; 0x28
 800cd94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a60      	ldr	r2, [pc, #384]	; (800cf1c <I2C_ITError+0x1d8>)
 800cd9c:	635a      	str	r2, [r3, #52]	; 0x34
 800cd9e:	e030      	b.n	800ce02 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cda0:	f248 0103 	movw	r1, #32771	; 0x8003
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 fbad 	bl	800d504 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 f8e1 	bl	800cf72 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	2b60      	cmp	r3, #96	; 0x60
 800cdba:	d01f      	beq.n	800cdfc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2220      	movs	r2, #32
 800cdc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	699b      	ldr	r3, [r3, #24]
 800cdca:	f003 0320 	and.w	r3, r3, #32
 800cdce:	2b20      	cmp	r3, #32
 800cdd0:	d114      	bne.n	800cdfc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	699b      	ldr	r3, [r3, #24]
 800cdd8:	f003 0310 	and.w	r3, r3, #16
 800cddc:	2b10      	cmp	r3, #16
 800cdde:	d109      	bne.n	800cdf4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2210      	movs	r2, #16
 800cde6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdec:	f043 0204 	orr.w	r2, r3, #4
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2220      	movs	r2, #32
 800cdfa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce06:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d039      	beq.n	800ce84 <I2C_ITError+0x140>
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	2b11      	cmp	r3, #17
 800ce14:	d002      	beq.n	800ce1c <I2C_ITError+0xd8>
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	2b21      	cmp	r3, #33	; 0x21
 800ce1a:	d133      	bne.n	800ce84 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce2a:	d107      	bne.n	800ce3c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fd f857 	bl	8009ef4 <HAL_DMA_GetState>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d017      	beq.n	800ce7c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce50:	4a33      	ldr	r2, [pc, #204]	; (800cf20 <I2C_ITError+0x1dc>)
 800ce52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fb fed7 	bl	8008c14 <HAL_DMA_Abort_IT>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d04d      	beq.n	800cf08 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ce76:	4610      	mov	r0, r2
 800ce78:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce7a:	e045      	b.n	800cf08 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 f851 	bl	800cf24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce82:	e041      	b.n	800cf08 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d039      	beq.n	800cf00 <I2C_ITError+0x1bc>
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	2b12      	cmp	r3, #18
 800ce90:	d002      	beq.n	800ce98 <I2C_ITError+0x154>
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	2b22      	cmp	r3, #34	; 0x22
 800ce96:	d133      	bne.n	800cf00 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cea6:	d107      	bne.n	800ceb8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ceb6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7fd f819 	bl	8009ef4 <HAL_DMA_GetState>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d017      	beq.n	800cef8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cecc:	4a14      	ldr	r2, [pc, #80]	; (800cf20 <I2C_ITError+0x1dc>)
 800cece:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cedc:	4618      	mov	r0, r3
 800cede:	f7fb fe99 	bl	8008c14 <HAL_DMA_Abort_IT>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d011      	beq.n	800cf0c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cef2:	4610      	mov	r0, r2
 800cef4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cef6:	e009      	b.n	800cf0c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 f813 	bl	800cf24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cefe:	e005      	b.n	800cf0c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 f80f 	bl	800cf24 <I2C_TreatErrorCallback>
  }
}
 800cf06:	e002      	b.n	800cf0e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cf08:	bf00      	nop
 800cf0a:	e000      	b.n	800cf0e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf0c:	bf00      	nop
}
 800cf0e:	bf00      	nop
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	ffff0000 	.word	0xffff0000
 800cf1c:	0800b9fb 	.word	0x0800b9fb
 800cf20:	0800d35d 	.word	0x0800d35d

0800cf24 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	2b60      	cmp	r3, #96	; 0x60
 800cf36:	d10e      	bne.n	800cf56 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2220      	movs	r2, #32
 800cf3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7fe fc07 	bl	800b762 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cf54:	e009      	b.n	800cf6a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7fe fbf2 	bl	800b74e <HAL_I2C_ErrorCallback>
}
 800cf6a:	bf00      	nop
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cf72:	b480      	push	{r7}
 800cf74:	b083      	sub	sp, #12
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	699b      	ldr	r3, [r3, #24]
 800cf80:	f003 0302 	and.w	r3, r3, #2
 800cf84:	2b02      	cmp	r3, #2
 800cf86:	d103      	bne.n	800cf90 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	699b      	ldr	r3, [r3, #24]
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d007      	beq.n	800cfae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	699a      	ldr	r2, [r3, #24]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f042 0201 	orr.w	r2, r2, #1
 800cfac:	619a      	str	r2, [r3, #24]
  }
}
 800cfae:	bf00      	nop
 800cfb0:	370c      	adds	r7, #12
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr

0800cfba <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cfd6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d104      	bne.n	800cfec <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800cfe2:	2120      	movs	r1, #32
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f000 fa09 	bl	800d3fc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800cfea:	e02d      	b.n	800d048 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cff4:	441a      	add	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cffe:	b29b      	uxth	r3, r3
 800d000:	2bff      	cmp	r3, #255	; 0xff
 800d002:	d903      	bls.n	800d00c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	22ff      	movs	r2, #255	; 0xff
 800d008:	851a      	strh	r2, [r3, #40]	; 0x28
 800d00a:	e004      	b.n	800d016 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d010:	b29a      	uxth	r2, r3
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01e:	4619      	mov	r1, r3
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3328      	adds	r3, #40	; 0x28
 800d026:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d02c:	f7fb f86a 	bl	8008104 <HAL_DMA_Start_IT>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d004      	beq.n	800d040 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d036:	2110      	movs	r1, #16
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f7ff fe83 	bl	800cd44 <I2C_ITError>
}
 800d03e:	e003      	b.n	800d048 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d040:	2140      	movs	r1, #64	; 0x40
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	f000 f9da 	bl	800d3fc <I2C_Enable_IRQ>
}
 800d048:	bf00      	nop
 800d04a:	3710      	adds	r7, #16
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d06c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d072:	b29b      	uxth	r3, r3
 800d074:	2b00      	cmp	r3, #0
 800d076:	d104      	bne.n	800d082 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d078:	2120      	movs	r1, #32
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	f000 f9be 	bl	800d3fc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d080:	e02d      	b.n	800d0de <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d08a:	441a      	add	r2, r3
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d094:	b29b      	uxth	r3, r3
 800d096:	2bff      	cmp	r3, #255	; 0xff
 800d098:	d903      	bls.n	800d0a2 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	22ff      	movs	r2, #255	; 0xff
 800d09e:	851a      	strh	r2, [r3, #40]	; 0x28
 800d0a0:	e004      	b.n	800d0ac <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	3324      	adds	r3, #36	; 0x24
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0bc:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d0c2:	f7fb f81f 	bl	8008104 <HAL_DMA_Start_IT>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d004      	beq.n	800d0d6 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d0cc:	2110      	movs	r1, #16
 800d0ce:	68f8      	ldr	r0, [r7, #12]
 800d0d0:	f7ff fe38 	bl	800cd44 <I2C_ITError>
}
 800d0d4:	e003      	b.n	800d0de <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d0d6:	2140      	movs	r1, #64	; 0x40
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f000 f98f 	bl	800d3fc <I2C_Enable_IRQ>
}
 800d0de:	bf00      	nop
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
	...

0800d0e8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d076      	beq.n	800d1f0 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a71      	ldr	r2, [pc, #452]	; (800d2d0 <I2C_DMAError+0x1e8>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d059      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a6f      	ldr	r2, [pc, #444]	; (800d2d4 <I2C_DMAError+0x1ec>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d053      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a6d      	ldr	r2, [pc, #436]	; (800d2d8 <I2C_DMAError+0x1f0>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d04d      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4a6b      	ldr	r2, [pc, #428]	; (800d2dc <I2C_DMAError+0x1f4>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d047      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a69      	ldr	r2, [pc, #420]	; (800d2e0 <I2C_DMAError+0x1f8>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d041      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a67      	ldr	r2, [pc, #412]	; (800d2e4 <I2C_DMAError+0x1fc>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d03b      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a65      	ldr	r2, [pc, #404]	; (800d2e8 <I2C_DMAError+0x200>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d035      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a63      	ldr	r2, [pc, #396]	; (800d2ec <I2C_DMAError+0x204>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d02f      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a61      	ldr	r2, [pc, #388]	; (800d2f0 <I2C_DMAError+0x208>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d029      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a5f      	ldr	r2, [pc, #380]	; (800d2f4 <I2C_DMAError+0x20c>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d023      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a5d      	ldr	r2, [pc, #372]	; (800d2f8 <I2C_DMAError+0x210>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d01d      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a5b      	ldr	r2, [pc, #364]	; (800d2fc <I2C_DMAError+0x214>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d017      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a59      	ldr	r2, [pc, #356]	; (800d300 <I2C_DMAError+0x218>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d011      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a57      	ldr	r2, [pc, #348]	; (800d304 <I2C_DMAError+0x21c>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d00b      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a55      	ldr	r2, [pc, #340]	; (800d308 <I2C_DMAError+0x220>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d005      	beq.n	800d1c2 <I2C_DMAError+0xda>
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a53      	ldr	r2, [pc, #332]	; (800d30c <I2C_DMAError+0x224>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d109      	bne.n	800d1d6 <I2C_DMAError+0xee>
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	bf0c      	ite	eq
 800d1ce:	2301      	moveq	r3, #1
 800d1d0:	2300      	movne	r3, #0
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	e008      	b.n	800d1e8 <I2C_DMAError+0x100>
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	bf0c      	ite	eq
 800d1e2:	2301      	moveq	r3, #1
 800d1e4:	2300      	movne	r3, #0
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d001      	beq.n	800d1f0 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f000 8098 	beq.w	800d32a <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a33      	ldr	r2, [pc, #204]	; (800d2d0 <I2C_DMAError+0x1e8>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d059      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a31      	ldr	r2, [pc, #196]	; (800d2d4 <I2C_DMAError+0x1ec>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d053      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a2f      	ldr	r2, [pc, #188]	; (800d2d8 <I2C_DMAError+0x1f0>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d04d      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a2d      	ldr	r2, [pc, #180]	; (800d2dc <I2C_DMAError+0x1f4>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d047      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a2b      	ldr	r2, [pc, #172]	; (800d2e0 <I2C_DMAError+0x1f8>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d041      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a29      	ldr	r2, [pc, #164]	; (800d2e4 <I2C_DMAError+0x1fc>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d03b      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a27      	ldr	r2, [pc, #156]	; (800d2e8 <I2C_DMAError+0x200>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d035      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a25      	ldr	r2, [pc, #148]	; (800d2ec <I2C_DMAError+0x204>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d02f      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a23      	ldr	r2, [pc, #140]	; (800d2f0 <I2C_DMAError+0x208>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d029      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a21      	ldr	r2, [pc, #132]	; (800d2f4 <I2C_DMAError+0x20c>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d023      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a1f      	ldr	r2, [pc, #124]	; (800d2f8 <I2C_DMAError+0x210>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d01d      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a1d      	ldr	r2, [pc, #116]	; (800d2fc <I2C_DMAError+0x214>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d017      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a1b      	ldr	r2, [pc, #108]	; (800d300 <I2C_DMAError+0x218>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d011      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a19      	ldr	r2, [pc, #100]	; (800d304 <I2C_DMAError+0x21c>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d00b      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a17      	ldr	r2, [pc, #92]	; (800d308 <I2C_DMAError+0x220>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d005      	beq.n	800d2ba <I2C_DMAError+0x1d2>
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a15      	ldr	r2, [pc, #84]	; (800d30c <I2C_DMAError+0x224>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d12a      	bne.n	800d310 <I2C_DMAError+0x228>
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	bf0c      	ite	eq
 800d2c6:	2301      	moveq	r3, #1
 800d2c8:	2300      	movne	r3, #0
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	e029      	b.n	800d322 <I2C_DMAError+0x23a>
 800d2ce:	bf00      	nop
 800d2d0:	40020010 	.word	0x40020010
 800d2d4:	40020028 	.word	0x40020028
 800d2d8:	40020040 	.word	0x40020040
 800d2dc:	40020058 	.word	0x40020058
 800d2e0:	40020070 	.word	0x40020070
 800d2e4:	40020088 	.word	0x40020088
 800d2e8:	400200a0 	.word	0x400200a0
 800d2ec:	400200b8 	.word	0x400200b8
 800d2f0:	40020410 	.word	0x40020410
 800d2f4:	40020428 	.word	0x40020428
 800d2f8:	40020440 	.word	0x40020440
 800d2fc:	40020458 	.word	0x40020458
 800d300:	40020470 	.word	0x40020470
 800d304:	40020488 	.word	0x40020488
 800d308:	400204a0 	.word	0x400204a0
 800d30c:	400204b8 	.word	0x400204b8
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	bf0c      	ite	eq
 800d31c:	2301      	moveq	r3, #1
 800d31e:	2300      	movne	r3, #0
 800d320:	b2db      	uxtb	r3, r3
 800d322:	2b00      	cmp	r3, #0
 800d324:	d001      	beq.n	800d32a <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800d326:	2301      	movs	r3, #1
 800d328:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7fc fdf0 	bl	8009f10 <HAL_DMA_GetError>
 800d330:	4603      	mov	r3, r0
 800d332:	2b02      	cmp	r3, #2
 800d334:	d00e      	beq.n	800d354 <I2C_DMAError+0x26c>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00b      	beq.n	800d354 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	685a      	ldr	r2, [r3, #4]
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d34a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d34c:	2110      	movs	r1, #16
 800d34e:	68b8      	ldr	r0, [r7, #8]
 800d350:	f7ff fcf8 	bl	800cd44 <I2C_ITError>
  }
}
 800d354:	bf00      	nop
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d368:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d003      	beq.n	800d37a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d376:	2200      	movs	r2, #0
 800d378:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d003      	beq.n	800d38a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d386:	2200      	movs	r2, #0
 800d388:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f7ff fdca 	bl	800cf24 <I2C_TreatErrorCallback>
}
 800d390:	bf00      	nop
 800d392:	3710      	adds	r7, #16
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d398:	b480      	push	{r7}
 800d39a:	b087      	sub	sp, #28
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	607b      	str	r3, [r7, #4]
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	817b      	strh	r3, [r7, #10]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d3aa:	897b      	ldrh	r3, [r7, #10]
 800d3ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d3b0:	7a7b      	ldrb	r3, [r7, #9]
 800d3b2:	041b      	lsls	r3, r3, #16
 800d3b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d3b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d3be:	6a3b      	ldr	r3, [r7, #32]
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	685a      	ldr	r2, [r3, #4]
 800d3ce:	6a3b      	ldr	r3, [r7, #32]
 800d3d0:	0d5b      	lsrs	r3, r3, #21
 800d3d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d3d6:	4b08      	ldr	r3, [pc, #32]	; (800d3f8 <I2C_TransferConfig+0x60>)
 800d3d8:	430b      	orrs	r3, r1
 800d3da:	43db      	mvns	r3, r3
 800d3dc:	ea02 0103 	and.w	r1, r2, r3
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	697a      	ldr	r2, [r7, #20]
 800d3e6:	430a      	orrs	r2, r1
 800d3e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d3ea:	bf00      	nop
 800d3ec:	371c      	adds	r7, #28
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	03ff63ff 	.word	0x03ff63ff

0800d3fc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b085      	sub	sp, #20
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	460b      	mov	r3, r1
 800d406:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d408:	2300      	movs	r3, #0
 800d40a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d410:	4a39      	ldr	r2, [pc, #228]	; (800d4f8 <I2C_Enable_IRQ+0xfc>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d032      	beq.n	800d47c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d41a:	4a38      	ldr	r2, [pc, #224]	; (800d4fc <I2C_Enable_IRQ+0x100>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d02d      	beq.n	800d47c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d424:	4a36      	ldr	r2, [pc, #216]	; (800d500 <I2C_Enable_IRQ+0x104>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d028      	beq.n	800d47c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d42a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	da03      	bge.n	800d43a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d438:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d43a:	887b      	ldrh	r3, [r7, #2]
 800d43c:	f003 0301 	and.w	r3, r3, #1
 800d440:	2b00      	cmp	r3, #0
 800d442:	d003      	beq.n	800d44c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d44a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d44c:	887b      	ldrh	r3, [r7, #2]
 800d44e:	f003 0302 	and.w	r3, r3, #2
 800d452:	2b00      	cmp	r3, #0
 800d454:	d003      	beq.n	800d45e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d45c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d45e:	887b      	ldrh	r3, [r7, #2]
 800d460:	2b10      	cmp	r3, #16
 800d462:	d103      	bne.n	800d46c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d46a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d46c:	887b      	ldrh	r3, [r7, #2]
 800d46e:	2b20      	cmp	r3, #32
 800d470:	d133      	bne.n	800d4da <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f043 0320 	orr.w	r3, r3, #32
 800d478:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d47a:	e02e      	b.n	800d4da <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d47c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d480:	2b00      	cmp	r3, #0
 800d482:	da03      	bge.n	800d48c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d48a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d48c:	887b      	ldrh	r3, [r7, #2]
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d49c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d49e:	887b      	ldrh	r3, [r7, #2]
 800d4a0:	f003 0302 	and.w	r3, r3, #2
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d003      	beq.n	800d4b0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d4ae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d4b0:	887b      	ldrh	r3, [r7, #2]
 800d4b2:	2b10      	cmp	r3, #16
 800d4b4:	d103      	bne.n	800d4be <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d4bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d4be:	887b      	ldrh	r3, [r7, #2]
 800d4c0:	2b20      	cmp	r3, #32
 800d4c2:	d103      	bne.n	800d4cc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d4ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d4cc:	887b      	ldrh	r3, [r7, #2]
 800d4ce:	2b40      	cmp	r3, #64	; 0x40
 800d4d0:	d103      	bne.n	800d4da <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4d8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	6819      	ldr	r1, [r3, #0]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	430a      	orrs	r2, r1
 800d4e8:	601a      	str	r2, [r3, #0]
}
 800d4ea:	bf00      	nop
 800d4ec:	3714      	adds	r7, #20
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	0800bc03 	.word	0x0800bc03
 800d4fc:	0800c049 	.word	0x0800c049
 800d500:	0800bde9 	.word	0x0800bde9

0800d504 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d510:	2300      	movs	r3, #0
 800d512:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d514:	887b      	ldrh	r3, [r7, #2]
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00f      	beq.n	800d53e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d524:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d532:	2b28      	cmp	r3, #40	; 0x28
 800d534:	d003      	beq.n	800d53e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d53c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d53e:	887b      	ldrh	r3, [r7, #2]
 800d540:	f003 0302 	and.w	r3, r3, #2
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00f      	beq.n	800d568 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d54e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d556:	b2db      	uxtb	r3, r3
 800d558:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d55c:	2b28      	cmp	r3, #40	; 0x28
 800d55e:	d003      	beq.n	800d568 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d566:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d568:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	da03      	bge.n	800d578 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d576:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d578:	887b      	ldrh	r3, [r7, #2]
 800d57a:	2b10      	cmp	r3, #16
 800d57c:	d103      	bne.n	800d586 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d584:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d586:	887b      	ldrh	r3, [r7, #2]
 800d588:	2b20      	cmp	r3, #32
 800d58a:	d103      	bne.n	800d594 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f043 0320 	orr.w	r3, r3, #32
 800d592:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d594:	887b      	ldrh	r3, [r7, #2]
 800d596:	2b40      	cmp	r3, #64	; 0x40
 800d598:	d103      	bne.n	800d5a2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5a0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	6819      	ldr	r1, [r3, #0]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	43da      	mvns	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	400a      	ands	r2, r1
 800d5b2:	601a      	str	r2, [r3, #0]
}
 800d5b4:	bf00      	nop
 800d5b6:	3714      	adds	r7, #20
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b083      	sub	sp, #12
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	2b20      	cmp	r3, #32
 800d5d4:	d138      	bne.n	800d648 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d101      	bne.n	800d5e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	e032      	b.n	800d64a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2224      	movs	r2, #36	; 0x24
 800d5f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f022 0201 	bic.w	r2, r2, #1
 800d602:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d612:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	6819      	ldr	r1, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	683a      	ldr	r2, [r7, #0]
 800d620:	430a      	orrs	r2, r1
 800d622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f042 0201 	orr.w	r2, r2, #1
 800d632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2220      	movs	r2, #32
 800d638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d644:	2300      	movs	r3, #0
 800d646:	e000      	b.n	800d64a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d648:	2302      	movs	r3, #2
  }
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	370c      	adds	r7, #12
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr

0800d656 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d656:	b480      	push	{r7}
 800d658:	b085      	sub	sp, #20
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
 800d65e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d666:	b2db      	uxtb	r3, r3
 800d668:	2b20      	cmp	r3, #32
 800d66a:	d139      	bne.n	800d6e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d672:	2b01      	cmp	r3, #1
 800d674:	d101      	bne.n	800d67a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d676:	2302      	movs	r3, #2
 800d678:	e033      	b.n	800d6e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2224      	movs	r2, #36	; 0x24
 800d686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f022 0201 	bic.w	r2, r2, #1
 800d698:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d6a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	021b      	lsls	r3, r3, #8
 800d6ae:	68fa      	ldr	r2, [r7, #12]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f042 0201 	orr.w	r2, r2, #1
 800d6ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2220      	movs	r2, #32
 800d6d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	e000      	b.n	800d6e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d6e0:	2302      	movs	r3, #2
  }
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3714      	adds	r7, #20
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
	...

0800d6f0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d6f8:	4b0d      	ldr	r3, [pc, #52]	; (800d730 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d6fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d6fe:	4a0c      	ldr	r2, [pc, #48]	; (800d730 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d700:	f043 0302 	orr.w	r3, r3, #2
 800d704:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d708:	4b09      	ldr	r3, [pc, #36]	; (800d730 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d70a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d70e:	f003 0302 	and.w	r3, r3, #2
 800d712:	60fb      	str	r3, [r7, #12]
 800d714:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800d716:	4b07      	ldr	r3, [pc, #28]	; (800d734 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d718:	685a      	ldr	r2, [r3, #4]
 800d71a:	4906      	ldr	r1, [pc, #24]	; (800d734 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4313      	orrs	r3, r2
 800d720:	604b      	str	r3, [r1, #4]
}
 800d722:	bf00      	nop
 800d724:	3714      	adds	r7, #20
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	58024400 	.word	0x58024400
 800d734:	58000400 	.word	0x58000400

0800d738 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	460b      	mov	r3, r1
 800d742:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800d744:	4b18      	ldr	r3, [pc, #96]	; (800d7a8 <HAL_PWR_EnterSTOPMode+0x70>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f023 0201 	bic.w	r2, r3, #1
 800d74c:	4916      	ldr	r1, [pc, #88]	; (800d7a8 <HAL_PWR_EnterSTOPMode+0x70>)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4313      	orrs	r3, r2
 800d752:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800d754:	4b14      	ldr	r3, [pc, #80]	; (800d7a8 <HAL_PWR_EnterSTOPMode+0x70>)
 800d756:	691b      	ldr	r3, [r3, #16]
 800d758:	4a13      	ldr	r2, [pc, #76]	; (800d7a8 <HAL_PWR_EnterSTOPMode+0x70>)
 800d75a:	f023 0305 	bic.w	r3, r3, #5
 800d75e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800d760:	4b11      	ldr	r3, [pc, #68]	; (800d7a8 <HAL_PWR_EnterSTOPMode+0x70>)
 800d762:	691b      	ldr	r3, [r3, #16]
 800d764:	4a10      	ldr	r2, [pc, #64]	; (800d7a8 <HAL_PWR_EnterSTOPMode+0x70>)
 800d766:	f023 0302 	bic.w	r3, r3, #2
 800d76a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d76c:	4b0f      	ldr	r3, [pc, #60]	; (800d7ac <HAL_PWR_EnterSTOPMode+0x74>)
 800d76e:	691b      	ldr	r3, [r3, #16]
 800d770:	4a0e      	ldr	r2, [pc, #56]	; (800d7ac <HAL_PWR_EnterSTOPMode+0x74>)
 800d772:	f043 0304 	orr.w	r3, r3, #4
 800d776:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800d778:	f3bf 8f4f 	dsb	sy
}
 800d77c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d77e:	f3bf 8f6f 	isb	sy
}
 800d782:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800d784:	78fb      	ldrb	r3, [r7, #3]
 800d786:	2b01      	cmp	r3, #1
 800d788:	d101      	bne.n	800d78e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800d78a:	bf30      	wfi
 800d78c:	e000      	b.n	800d790 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800d78e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d790:	4b06      	ldr	r3, [pc, #24]	; (800d7ac <HAL_PWR_EnterSTOPMode+0x74>)
 800d792:	691b      	ldr	r3, [r3, #16]
 800d794:	4a05      	ldr	r2, [pc, #20]	; (800d7ac <HAL_PWR_EnterSTOPMode+0x74>)
 800d796:	f023 0304 	bic.w	r3, r3, #4
 800d79a:	6113      	str	r3, [r2, #16]
}
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr
 800d7a8:	58024800 	.word	0x58024800
 800d7ac:	e000ed00 	.word	0xe000ed00

0800d7b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d7b8:	4b19      	ldr	r3, [pc, #100]	; (800d820 <HAL_PWREx_ConfigSupply+0x70>)
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	f003 0304 	and.w	r3, r3, #4
 800d7c0:	2b04      	cmp	r3, #4
 800d7c2:	d00a      	beq.n	800d7da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d7c4:	4b16      	ldr	r3, [pc, #88]	; (800d820 <HAL_PWREx_ConfigSupply+0x70>)
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	f003 0307 	and.w	r3, r3, #7
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d001      	beq.n	800d7d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e01f      	b.n	800d816 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	e01d      	b.n	800d816 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d7da:	4b11      	ldr	r3, [pc, #68]	; (800d820 <HAL_PWREx_ConfigSupply+0x70>)
 800d7dc:	68db      	ldr	r3, [r3, #12]
 800d7de:	f023 0207 	bic.w	r2, r3, #7
 800d7e2:	490f      	ldr	r1, [pc, #60]	; (800d820 <HAL_PWREx_ConfigSupply+0x70>)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d7ea:	f7f7 ff8f 	bl	800570c <HAL_GetTick>
 800d7ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d7f0:	e009      	b.n	800d806 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d7f2:	f7f7 ff8b 	bl	800570c <HAL_GetTick>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d800:	d901      	bls.n	800d806 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d802:	2301      	movs	r3, #1
 800d804:	e007      	b.n	800d816 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d806:	4b06      	ldr	r3, [pc, #24]	; (800d820 <HAL_PWREx_ConfigSupply+0x70>)
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d80e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d812:	d1ee      	bne.n	800d7f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	58024800 	.word	0x58024800

0800d824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b08c      	sub	sp, #48	; 0x30
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d102      	bne.n	800d838 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d832:	2301      	movs	r3, #1
 800d834:	f000 bc48 	b.w	800e0c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f003 0301 	and.w	r3, r3, #1
 800d840:	2b00      	cmp	r3, #0
 800d842:	f000 8088 	beq.w	800d956 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d846:	4b99      	ldr	r3, [pc, #612]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d848:	691b      	ldr	r3, [r3, #16]
 800d84a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d84e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d850:	4b96      	ldr	r3, [pc, #600]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d854:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d858:	2b10      	cmp	r3, #16
 800d85a:	d007      	beq.n	800d86c <HAL_RCC_OscConfig+0x48>
 800d85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85e:	2b18      	cmp	r3, #24
 800d860:	d111      	bne.n	800d886 <HAL_RCC_OscConfig+0x62>
 800d862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d864:	f003 0303 	and.w	r3, r3, #3
 800d868:	2b02      	cmp	r3, #2
 800d86a:	d10c      	bne.n	800d886 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d86c:	4b8f      	ldr	r3, [pc, #572]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d874:	2b00      	cmp	r3, #0
 800d876:	d06d      	beq.n	800d954 <HAL_RCC_OscConfig+0x130>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d169      	bne.n	800d954 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d880:	2301      	movs	r3, #1
 800d882:	f000 bc21 	b.w	800e0c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d88e:	d106      	bne.n	800d89e <HAL_RCC_OscConfig+0x7a>
 800d890:	4b86      	ldr	r3, [pc, #536]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a85      	ldr	r2, [pc, #532]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d89a:	6013      	str	r3, [r2, #0]
 800d89c:	e02e      	b.n	800d8fc <HAL_RCC_OscConfig+0xd8>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d10c      	bne.n	800d8c0 <HAL_RCC_OscConfig+0x9c>
 800d8a6:	4b81      	ldr	r3, [pc, #516]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a80      	ldr	r2, [pc, #512]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d8ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8b0:	6013      	str	r3, [r2, #0]
 800d8b2:	4b7e      	ldr	r3, [pc, #504]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a7d      	ldr	r2, [pc, #500]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d8b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d8bc:	6013      	str	r3, [r2, #0]
 800d8be:	e01d      	b.n	800d8fc <HAL_RCC_OscConfig+0xd8>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d8c8:	d10c      	bne.n	800d8e4 <HAL_RCC_OscConfig+0xc0>
 800d8ca:	4b78      	ldr	r3, [pc, #480]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a77      	ldr	r2, [pc, #476]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d8d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d8d4:	6013      	str	r3, [r2, #0]
 800d8d6:	4b75      	ldr	r3, [pc, #468]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4a74      	ldr	r2, [pc, #464]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d8dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8e0:	6013      	str	r3, [r2, #0]
 800d8e2:	e00b      	b.n	800d8fc <HAL_RCC_OscConfig+0xd8>
 800d8e4:	4b71      	ldr	r3, [pc, #452]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a70      	ldr	r2, [pc, #448]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d8ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8ee:	6013      	str	r3, [r2, #0]
 800d8f0:	4b6e      	ldr	r3, [pc, #440]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a6d      	ldr	r2, [pc, #436]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d8f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d8fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d013      	beq.n	800d92c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d904:	f7f7 ff02 	bl	800570c <HAL_GetTick>
 800d908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d90a:	e008      	b.n	800d91e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d90c:	f7f7 fefe 	bl	800570c <HAL_GetTick>
 800d910:	4602      	mov	r2, r0
 800d912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	2b64      	cmp	r3, #100	; 0x64
 800d918:	d901      	bls.n	800d91e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d91a:	2303      	movs	r3, #3
 800d91c:	e3d4      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d91e:	4b63      	ldr	r3, [pc, #396]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d926:	2b00      	cmp	r3, #0
 800d928:	d0f0      	beq.n	800d90c <HAL_RCC_OscConfig+0xe8>
 800d92a:	e014      	b.n	800d956 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d92c:	f7f7 feee 	bl	800570c <HAL_GetTick>
 800d930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d932:	e008      	b.n	800d946 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d934:	f7f7 feea 	bl	800570c <HAL_GetTick>
 800d938:	4602      	mov	r2, r0
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	2b64      	cmp	r3, #100	; 0x64
 800d940:	d901      	bls.n	800d946 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d942:	2303      	movs	r3, #3
 800d944:	e3c0      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d946:	4b59      	ldr	r3, [pc, #356]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1f0      	bne.n	800d934 <HAL_RCC_OscConfig+0x110>
 800d952:	e000      	b.n	800d956 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f003 0302 	and.w	r3, r3, #2
 800d95e:	2b00      	cmp	r3, #0
 800d960:	f000 80ca 	beq.w	800daf8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d964:	4b51      	ldr	r3, [pc, #324]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d96c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d96e:	4b4f      	ldr	r3, [pc, #316]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d972:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d974:	6a3b      	ldr	r3, [r7, #32]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d007      	beq.n	800d98a <HAL_RCC_OscConfig+0x166>
 800d97a:	6a3b      	ldr	r3, [r7, #32]
 800d97c:	2b18      	cmp	r3, #24
 800d97e:	d156      	bne.n	800da2e <HAL_RCC_OscConfig+0x20a>
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	f003 0303 	and.w	r3, r3, #3
 800d986:	2b00      	cmp	r3, #0
 800d988:	d151      	bne.n	800da2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d98a:	4b48      	ldr	r3, [pc, #288]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f003 0304 	and.w	r3, r3, #4
 800d992:	2b00      	cmp	r3, #0
 800d994:	d005      	beq.n	800d9a2 <HAL_RCC_OscConfig+0x17e>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d101      	bne.n	800d9a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e392      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d9a2:	4b42      	ldr	r3, [pc, #264]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f023 0219 	bic.w	r2, r3, #25
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	493f      	ldr	r1, [pc, #252]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9b4:	f7f7 feaa 	bl	800570c <HAL_GetTick>
 800d9b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d9ba:	e008      	b.n	800d9ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d9bc:	f7f7 fea6 	bl	800570c <HAL_GetTick>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c4:	1ad3      	subs	r3, r2, r3
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	d901      	bls.n	800d9ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d9ca:	2303      	movs	r3, #3
 800d9cc:	e37c      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d9ce:	4b37      	ldr	r3, [pc, #220]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f003 0304 	and.w	r3, r3, #4
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d0f0      	beq.n	800d9bc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9da:	f7f7 fea3 	bl	8005724 <HAL_GetREVID>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	f241 0203 	movw	r2, #4099	; 0x1003
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d817      	bhi.n	800da18 <HAL_RCC_OscConfig+0x1f4>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	2b40      	cmp	r3, #64	; 0x40
 800d9ee:	d108      	bne.n	800da02 <HAL_RCC_OscConfig+0x1de>
 800d9f0:	4b2e      	ldr	r3, [pc, #184]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d9f8:	4a2c      	ldr	r2, [pc, #176]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800d9fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d9fe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800da00:	e07a      	b.n	800daf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da02:	4b2a      	ldr	r3, [pc, #168]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	691b      	ldr	r3, [r3, #16]
 800da0e:	031b      	lsls	r3, r3, #12
 800da10:	4926      	ldr	r1, [pc, #152]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800da12:	4313      	orrs	r3, r2
 800da14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800da16:	e06f      	b.n	800daf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da18:	4b24      	ldr	r3, [pc, #144]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	061b      	lsls	r3, r3, #24
 800da26:	4921      	ldr	r1, [pc, #132]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800da28:	4313      	orrs	r3, r2
 800da2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800da2c:	e064      	b.n	800daf8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d047      	beq.n	800dac6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800da36:	4b1d      	ldr	r3, [pc, #116]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f023 0219 	bic.w	r2, r3, #25
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	491a      	ldr	r1, [pc, #104]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800da44:	4313      	orrs	r3, r2
 800da46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da48:	f7f7 fe60 	bl	800570c <HAL_GetTick>
 800da4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da4e:	e008      	b.n	800da62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da50:	f7f7 fe5c 	bl	800570c <HAL_GetTick>
 800da54:	4602      	mov	r2, r0
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	1ad3      	subs	r3, r2, r3
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	d901      	bls.n	800da62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800da5e:	2303      	movs	r3, #3
 800da60:	e332      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da62:	4b12      	ldr	r3, [pc, #72]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f003 0304 	and.w	r3, r3, #4
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d0f0      	beq.n	800da50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da6e:	f7f7 fe59 	bl	8005724 <HAL_GetREVID>
 800da72:	4603      	mov	r3, r0
 800da74:	f241 0203 	movw	r2, #4099	; 0x1003
 800da78:	4293      	cmp	r3, r2
 800da7a:	d819      	bhi.n	800dab0 <HAL_RCC_OscConfig+0x28c>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	691b      	ldr	r3, [r3, #16]
 800da80:	2b40      	cmp	r3, #64	; 0x40
 800da82:	d108      	bne.n	800da96 <HAL_RCC_OscConfig+0x272>
 800da84:	4b09      	ldr	r3, [pc, #36]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800da8c:	4a07      	ldr	r2, [pc, #28]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800da8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da92:	6053      	str	r3, [r2, #4]
 800da94:	e030      	b.n	800daf8 <HAL_RCC_OscConfig+0x2d4>
 800da96:	4b05      	ldr	r3, [pc, #20]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	691b      	ldr	r3, [r3, #16]
 800daa2:	031b      	lsls	r3, r3, #12
 800daa4:	4901      	ldr	r1, [pc, #4]	; (800daac <HAL_RCC_OscConfig+0x288>)
 800daa6:	4313      	orrs	r3, r2
 800daa8:	604b      	str	r3, [r1, #4]
 800daaa:	e025      	b.n	800daf8 <HAL_RCC_OscConfig+0x2d4>
 800daac:	58024400 	.word	0x58024400
 800dab0:	4b9a      	ldr	r3, [pc, #616]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	691b      	ldr	r3, [r3, #16]
 800dabc:	061b      	lsls	r3, r3, #24
 800dabe:	4997      	ldr	r1, [pc, #604]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dac0:	4313      	orrs	r3, r2
 800dac2:	604b      	str	r3, [r1, #4]
 800dac4:	e018      	b.n	800daf8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dac6:	4b95      	ldr	r3, [pc, #596]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a94      	ldr	r2, [pc, #592]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dacc:	f023 0301 	bic.w	r3, r3, #1
 800dad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dad2:	f7f7 fe1b 	bl	800570c <HAL_GetTick>
 800dad6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dad8:	e008      	b.n	800daec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dada:	f7f7 fe17 	bl	800570c <HAL_GetTick>
 800dade:	4602      	mov	r2, r0
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae2:	1ad3      	subs	r3, r2, r3
 800dae4:	2b02      	cmp	r3, #2
 800dae6:	d901      	bls.n	800daec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800dae8:	2303      	movs	r3, #3
 800daea:	e2ed      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800daec:	4b8b      	ldr	r3, [pc, #556]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f003 0304 	and.w	r3, r3, #4
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1f0      	bne.n	800dada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f003 0310 	and.w	r3, r3, #16
 800db00:	2b00      	cmp	r3, #0
 800db02:	f000 80a9 	beq.w	800dc58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800db06:	4b85      	ldr	r3, [pc, #532]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800db08:	691b      	ldr	r3, [r3, #16]
 800db0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800db10:	4b82      	ldr	r3, [pc, #520]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800db12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db14:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	2b08      	cmp	r3, #8
 800db1a:	d007      	beq.n	800db2c <HAL_RCC_OscConfig+0x308>
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	2b18      	cmp	r3, #24
 800db20:	d13a      	bne.n	800db98 <HAL_RCC_OscConfig+0x374>
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	f003 0303 	and.w	r3, r3, #3
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d135      	bne.n	800db98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800db2c:	4b7b      	ldr	r3, [pc, #492]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db34:	2b00      	cmp	r3, #0
 800db36:	d005      	beq.n	800db44 <HAL_RCC_OscConfig+0x320>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	69db      	ldr	r3, [r3, #28]
 800db3c:	2b80      	cmp	r3, #128	; 0x80
 800db3e:	d001      	beq.n	800db44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800db40:	2301      	movs	r3, #1
 800db42:	e2c1      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800db44:	f7f7 fdee 	bl	8005724 <HAL_GetREVID>
 800db48:	4603      	mov	r3, r0
 800db4a:	f241 0203 	movw	r2, #4099	; 0x1003
 800db4e:	4293      	cmp	r3, r2
 800db50:	d817      	bhi.n	800db82 <HAL_RCC_OscConfig+0x35e>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6a1b      	ldr	r3, [r3, #32]
 800db56:	2b20      	cmp	r3, #32
 800db58:	d108      	bne.n	800db6c <HAL_RCC_OscConfig+0x348>
 800db5a:	4b70      	ldr	r3, [pc, #448]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800db62:	4a6e      	ldr	r2, [pc, #440]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800db64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db68:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800db6a:	e075      	b.n	800dc58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800db6c:	4b6b      	ldr	r3, [pc, #428]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6a1b      	ldr	r3, [r3, #32]
 800db78:	069b      	lsls	r3, r3, #26
 800db7a:	4968      	ldr	r1, [pc, #416]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800db7c:	4313      	orrs	r3, r2
 800db7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800db80:	e06a      	b.n	800dc58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800db82:	4b66      	ldr	r3, [pc, #408]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6a1b      	ldr	r3, [r3, #32]
 800db8e:	061b      	lsls	r3, r3, #24
 800db90:	4962      	ldr	r1, [pc, #392]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800db92:	4313      	orrs	r3, r2
 800db94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800db96:	e05f      	b.n	800dc58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	69db      	ldr	r3, [r3, #28]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d042      	beq.n	800dc26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800dba0:	4b5e      	ldr	r3, [pc, #376]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a5d      	ldr	r2, [pc, #372]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbac:	f7f7 fdae 	bl	800570c <HAL_GetTick>
 800dbb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dbb2:	e008      	b.n	800dbc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dbb4:	f7f7 fdaa 	bl	800570c <HAL_GetTick>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbc:	1ad3      	subs	r3, r2, r3
 800dbbe:	2b02      	cmp	r3, #2
 800dbc0:	d901      	bls.n	800dbc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800dbc2:	2303      	movs	r3, #3
 800dbc4:	e280      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dbc6:	4b55      	ldr	r3, [pc, #340]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d0f0      	beq.n	800dbb4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dbd2:	f7f7 fda7 	bl	8005724 <HAL_GetREVID>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	f241 0203 	movw	r2, #4099	; 0x1003
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d817      	bhi.n	800dc10 <HAL_RCC_OscConfig+0x3ec>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a1b      	ldr	r3, [r3, #32]
 800dbe4:	2b20      	cmp	r3, #32
 800dbe6:	d108      	bne.n	800dbfa <HAL_RCC_OscConfig+0x3d6>
 800dbe8:	4b4c      	ldr	r3, [pc, #304]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800dbf0:	4a4a      	ldr	r2, [pc, #296]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dbf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbf6:	6053      	str	r3, [r2, #4]
 800dbf8:	e02e      	b.n	800dc58 <HAL_RCC_OscConfig+0x434>
 800dbfa:	4b48      	ldr	r3, [pc, #288]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a1b      	ldr	r3, [r3, #32]
 800dc06:	069b      	lsls	r3, r3, #26
 800dc08:	4944      	ldr	r1, [pc, #272]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	604b      	str	r3, [r1, #4]
 800dc0e:	e023      	b.n	800dc58 <HAL_RCC_OscConfig+0x434>
 800dc10:	4b42      	ldr	r3, [pc, #264]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a1b      	ldr	r3, [r3, #32]
 800dc1c:	061b      	lsls	r3, r3, #24
 800dc1e:	493f      	ldr	r1, [pc, #252]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dc20:	4313      	orrs	r3, r2
 800dc22:	60cb      	str	r3, [r1, #12]
 800dc24:	e018      	b.n	800dc58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800dc26:	4b3d      	ldr	r3, [pc, #244]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a3c      	ldr	r2, [pc, #240]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dc2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc32:	f7f7 fd6b 	bl	800570c <HAL_GetTick>
 800dc36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dc38:	e008      	b.n	800dc4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dc3a:	f7f7 fd67 	bl	800570c <HAL_GetTick>
 800dc3e:	4602      	mov	r2, r0
 800dc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc42:	1ad3      	subs	r3, r2, r3
 800dc44:	2b02      	cmp	r3, #2
 800dc46:	d901      	bls.n	800dc4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dc48:	2303      	movs	r3, #3
 800dc4a:	e23d      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dc4c:	4b33      	ldr	r3, [pc, #204]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1f0      	bne.n	800dc3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f003 0308 	and.w	r3, r3, #8
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d036      	beq.n	800dcd2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	695b      	ldr	r3, [r3, #20]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d019      	beq.n	800dca0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dc6c:	4b2b      	ldr	r3, [pc, #172]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dc6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc70:	4a2a      	ldr	r2, [pc, #168]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dc72:	f043 0301 	orr.w	r3, r3, #1
 800dc76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc78:	f7f7 fd48 	bl	800570c <HAL_GetTick>
 800dc7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dc7e:	e008      	b.n	800dc92 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dc80:	f7f7 fd44 	bl	800570c <HAL_GetTick>
 800dc84:	4602      	mov	r2, r0
 800dc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	2b02      	cmp	r3, #2
 800dc8c:	d901      	bls.n	800dc92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800dc8e:	2303      	movs	r3, #3
 800dc90:	e21a      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dc92:	4b22      	ldr	r3, [pc, #136]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dc94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc96:	f003 0302 	and.w	r3, r3, #2
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d0f0      	beq.n	800dc80 <HAL_RCC_OscConfig+0x45c>
 800dc9e:	e018      	b.n	800dcd2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dca0:	4b1e      	ldr	r3, [pc, #120]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dca4:	4a1d      	ldr	r2, [pc, #116]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dca6:	f023 0301 	bic.w	r3, r3, #1
 800dcaa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcac:	f7f7 fd2e 	bl	800570c <HAL_GetTick>
 800dcb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dcb2:	e008      	b.n	800dcc6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dcb4:	f7f7 fd2a 	bl	800570c <HAL_GetTick>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbc:	1ad3      	subs	r3, r2, r3
 800dcbe:	2b02      	cmp	r3, #2
 800dcc0:	d901      	bls.n	800dcc6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800dcc2:	2303      	movs	r3, #3
 800dcc4:	e200      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dcc6:	4b15      	ldr	r3, [pc, #84]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dcc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcca:	f003 0302 	and.w	r3, r3, #2
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d1f0      	bne.n	800dcb4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f003 0320 	and.w	r3, r3, #32
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d039      	beq.n	800dd52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	699b      	ldr	r3, [r3, #24]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d01c      	beq.n	800dd20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800dce6:	4b0d      	ldr	r3, [pc, #52]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a0c      	ldr	r2, [pc, #48]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dcec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dcf0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800dcf2:	f7f7 fd0b 	bl	800570c <HAL_GetTick>
 800dcf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800dcf8:	e008      	b.n	800dd0c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dcfa:	f7f7 fd07 	bl	800570c <HAL_GetTick>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd02:	1ad3      	subs	r3, r2, r3
 800dd04:	2b02      	cmp	r3, #2
 800dd06:	d901      	bls.n	800dd0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800dd08:	2303      	movs	r3, #3
 800dd0a:	e1dd      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800dd0c:	4b03      	ldr	r3, [pc, #12]	; (800dd1c <HAL_RCC_OscConfig+0x4f8>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d0f0      	beq.n	800dcfa <HAL_RCC_OscConfig+0x4d6>
 800dd18:	e01b      	b.n	800dd52 <HAL_RCC_OscConfig+0x52e>
 800dd1a:	bf00      	nop
 800dd1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800dd20:	4b9b      	ldr	r3, [pc, #620]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4a9a      	ldr	r2, [pc, #616]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800dd26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800dd2c:	f7f7 fcee 	bl	800570c <HAL_GetTick>
 800dd30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dd32:	e008      	b.n	800dd46 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dd34:	f7f7 fcea 	bl	800570c <HAL_GetTick>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3c:	1ad3      	subs	r3, r2, r3
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d901      	bls.n	800dd46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800dd42:	2303      	movs	r3, #3
 800dd44:	e1c0      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dd46:	4b92      	ldr	r3, [pc, #584]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d1f0      	bne.n	800dd34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f003 0304 	and.w	r3, r3, #4
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f000 8081 	beq.w	800de62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800dd60:	4b8c      	ldr	r3, [pc, #560]	; (800df94 <HAL_RCC_OscConfig+0x770>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a8b      	ldr	r2, [pc, #556]	; (800df94 <HAL_RCC_OscConfig+0x770>)
 800dd66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dd6c:	f7f7 fcce 	bl	800570c <HAL_GetTick>
 800dd70:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dd72:	e008      	b.n	800dd86 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dd74:	f7f7 fcca 	bl	800570c <HAL_GetTick>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7c:	1ad3      	subs	r3, r2, r3
 800dd7e:	2b64      	cmp	r3, #100	; 0x64
 800dd80:	d901      	bls.n	800dd86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800dd82:	2303      	movs	r3, #3
 800dd84:	e1a0      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dd86:	4b83      	ldr	r3, [pc, #524]	; (800df94 <HAL_RCC_OscConfig+0x770>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d0f0      	beq.n	800dd74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d106      	bne.n	800dda8 <HAL_RCC_OscConfig+0x584>
 800dd9a:	4b7d      	ldr	r3, [pc, #500]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800dd9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd9e:	4a7c      	ldr	r2, [pc, #496]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800dda0:	f043 0301 	orr.w	r3, r3, #1
 800dda4:	6713      	str	r3, [r2, #112]	; 0x70
 800dda6:	e02d      	b.n	800de04 <HAL_RCC_OscConfig+0x5e0>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d10c      	bne.n	800ddca <HAL_RCC_OscConfig+0x5a6>
 800ddb0:	4b77      	ldr	r3, [pc, #476]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800ddb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb4:	4a76      	ldr	r2, [pc, #472]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800ddb6:	f023 0301 	bic.w	r3, r3, #1
 800ddba:	6713      	str	r3, [r2, #112]	; 0x70
 800ddbc:	4b74      	ldr	r3, [pc, #464]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800ddbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc0:	4a73      	ldr	r2, [pc, #460]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800ddc2:	f023 0304 	bic.w	r3, r3, #4
 800ddc6:	6713      	str	r3, [r2, #112]	; 0x70
 800ddc8:	e01c      	b.n	800de04 <HAL_RCC_OscConfig+0x5e0>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	2b05      	cmp	r3, #5
 800ddd0:	d10c      	bne.n	800ddec <HAL_RCC_OscConfig+0x5c8>
 800ddd2:	4b6f      	ldr	r3, [pc, #444]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800ddd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd6:	4a6e      	ldr	r2, [pc, #440]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800ddd8:	f043 0304 	orr.w	r3, r3, #4
 800dddc:	6713      	str	r3, [r2, #112]	; 0x70
 800ddde:	4b6c      	ldr	r3, [pc, #432]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800dde0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dde2:	4a6b      	ldr	r2, [pc, #428]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800dde4:	f043 0301 	orr.w	r3, r3, #1
 800dde8:	6713      	str	r3, [r2, #112]	; 0x70
 800ddea:	e00b      	b.n	800de04 <HAL_RCC_OscConfig+0x5e0>
 800ddec:	4b68      	ldr	r3, [pc, #416]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800ddee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddf0:	4a67      	ldr	r2, [pc, #412]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800ddf2:	f023 0301 	bic.w	r3, r3, #1
 800ddf6:	6713      	str	r3, [r2, #112]	; 0x70
 800ddf8:	4b65      	ldr	r3, [pc, #404]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800ddfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddfc:	4a64      	ldr	r2, [pc, #400]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800ddfe:	f023 0304 	bic.w	r3, r3, #4
 800de02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d015      	beq.n	800de38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de0c:	f7f7 fc7e 	bl	800570c <HAL_GetTick>
 800de10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800de12:	e00a      	b.n	800de2a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800de14:	f7f7 fc7a 	bl	800570c <HAL_GetTick>
 800de18:	4602      	mov	r2, r0
 800de1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800de22:	4293      	cmp	r3, r2
 800de24:	d901      	bls.n	800de2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800de26:	2303      	movs	r3, #3
 800de28:	e14e      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800de2a:	4b59      	ldr	r3, [pc, #356]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800de2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de2e:	f003 0302 	and.w	r3, r3, #2
 800de32:	2b00      	cmp	r3, #0
 800de34:	d0ee      	beq.n	800de14 <HAL_RCC_OscConfig+0x5f0>
 800de36:	e014      	b.n	800de62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de38:	f7f7 fc68 	bl	800570c <HAL_GetTick>
 800de3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800de3e:	e00a      	b.n	800de56 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800de40:	f7f7 fc64 	bl	800570c <HAL_GetTick>
 800de44:	4602      	mov	r2, r0
 800de46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de48:	1ad3      	subs	r3, r2, r3
 800de4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800de4e:	4293      	cmp	r3, r2
 800de50:	d901      	bls.n	800de56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800de52:	2303      	movs	r3, #3
 800de54:	e138      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800de56:	4b4e      	ldr	r3, [pc, #312]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800de58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de5a:	f003 0302 	and.w	r3, r3, #2
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d1ee      	bne.n	800de40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de66:	2b00      	cmp	r3, #0
 800de68:	f000 812d 	beq.w	800e0c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800de6c:	4b48      	ldr	r3, [pc, #288]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de74:	2b18      	cmp	r3, #24
 800de76:	f000 80bd 	beq.w	800dff4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7e:	2b02      	cmp	r3, #2
 800de80:	f040 809e 	bne.w	800dfc0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de84:	4b42      	ldr	r3, [pc, #264]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4a41      	ldr	r2, [pc, #260]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800de8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de90:	f7f7 fc3c 	bl	800570c <HAL_GetTick>
 800de94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800de96:	e008      	b.n	800deaa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de98:	f7f7 fc38 	bl	800570c <HAL_GetTick>
 800de9c:	4602      	mov	r2, r0
 800de9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	d901      	bls.n	800deaa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800dea6:	2303      	movs	r3, #3
 800dea8:	e10e      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800deaa:	4b39      	ldr	r3, [pc, #228]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d1f0      	bne.n	800de98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800deb6:	4b36      	ldr	r3, [pc, #216]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800deb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800deba:	4b37      	ldr	r3, [pc, #220]	; (800df98 <HAL_RCC_OscConfig+0x774>)
 800debc:	4013      	ands	r3, r2
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800dec6:	0112      	lsls	r2, r2, #4
 800dec8:	430a      	orrs	r2, r1
 800deca:	4931      	ldr	r1, [pc, #196]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800decc:	4313      	orrs	r3, r2
 800dece:	628b      	str	r3, [r1, #40]	; 0x28
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ded4:	3b01      	subs	r3, #1
 800ded6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dede:	3b01      	subs	r3, #1
 800dee0:	025b      	lsls	r3, r3, #9
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	431a      	orrs	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deea:	3b01      	subs	r3, #1
 800deec:	041b      	lsls	r3, r3, #16
 800deee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800def2:	431a      	orrs	r2, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800def8:	3b01      	subs	r3, #1
 800defa:	061b      	lsls	r3, r3, #24
 800defc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800df00:	4923      	ldr	r1, [pc, #140]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df02:	4313      	orrs	r3, r2
 800df04:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800df06:	4b22      	ldr	r3, [pc, #136]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0a:	4a21      	ldr	r2, [pc, #132]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df0c:	f023 0301 	bic.w	r3, r3, #1
 800df10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800df12:	4b1f      	ldr	r3, [pc, #124]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df16:	4b21      	ldr	r3, [pc, #132]	; (800df9c <HAL_RCC_OscConfig+0x778>)
 800df18:	4013      	ands	r3, r2
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800df1e:	00d2      	lsls	r2, r2, #3
 800df20:	491b      	ldr	r1, [pc, #108]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df22:	4313      	orrs	r3, r2
 800df24:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800df26:	4b1a      	ldr	r3, [pc, #104]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df2a:	f023 020c 	bic.w	r2, r3, #12
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df32:	4917      	ldr	r1, [pc, #92]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df34:	4313      	orrs	r3, r2
 800df36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800df38:	4b15      	ldr	r3, [pc, #84]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3c:	f023 0202 	bic.w	r2, r3, #2
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df44:	4912      	ldr	r1, [pc, #72]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df46:	4313      	orrs	r3, r2
 800df48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800df4a:	4b11      	ldr	r3, [pc, #68]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4e:	4a10      	ldr	r2, [pc, #64]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df56:	4b0e      	ldr	r3, [pc, #56]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df5a:	4a0d      	ldr	r2, [pc, #52]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800df62:	4b0b      	ldr	r3, [pc, #44]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df66:	4a0a      	ldr	r2, [pc, #40]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800df6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800df6e:	4b08      	ldr	r3, [pc, #32]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df72:	4a07      	ldr	r2, [pc, #28]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df74:	f043 0301 	orr.w	r3, r3, #1
 800df78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800df7a:	4b05      	ldr	r3, [pc, #20]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a04      	ldr	r2, [pc, #16]	; (800df90 <HAL_RCC_OscConfig+0x76c>)
 800df80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800df84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df86:	f7f7 fbc1 	bl	800570c <HAL_GetTick>
 800df8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800df8c:	e011      	b.n	800dfb2 <HAL_RCC_OscConfig+0x78e>
 800df8e:	bf00      	nop
 800df90:	58024400 	.word	0x58024400
 800df94:	58024800 	.word	0x58024800
 800df98:	fffffc0c 	.word	0xfffffc0c
 800df9c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dfa0:	f7f7 fbb4 	bl	800570c <HAL_GetTick>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	2b02      	cmp	r3, #2
 800dfac:	d901      	bls.n	800dfb2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800dfae:	2303      	movs	r3, #3
 800dfb0:	e08a      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dfb2:	4b47      	ldr	r3, [pc, #284]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d0f0      	beq.n	800dfa0 <HAL_RCC_OscConfig+0x77c>
 800dfbe:	e082      	b.n	800e0c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dfc0:	4b43      	ldr	r3, [pc, #268]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4a42      	ldr	r2, [pc, #264]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800dfc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dfca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dfcc:	f7f7 fb9e 	bl	800570c <HAL_GetTick>
 800dfd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dfd2:	e008      	b.n	800dfe6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dfd4:	f7f7 fb9a 	bl	800570c <HAL_GetTick>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	1ad3      	subs	r3, r2, r3
 800dfde:	2b02      	cmp	r3, #2
 800dfe0:	d901      	bls.n	800dfe6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800dfe2:	2303      	movs	r3, #3
 800dfe4:	e070      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dfe6:	4b3a      	ldr	r3, [pc, #232]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d1f0      	bne.n	800dfd4 <HAL_RCC_OscConfig+0x7b0>
 800dff2:	e068      	b.n	800e0c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800dff4:	4b36      	ldr	r3, [pc, #216]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800dff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dff8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800dffa:	4b35      	ldr	r3, [pc, #212]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800dffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dffe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e004:	2b01      	cmp	r3, #1
 800e006:	d031      	beq.n	800e06c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	f003 0203 	and.w	r2, r3, #3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e012:	429a      	cmp	r2, r3
 800e014:	d12a      	bne.n	800e06c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	091b      	lsrs	r3, r3, #4
 800e01a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e022:	429a      	cmp	r2, r3
 800e024:	d122      	bne.n	800e06c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e030:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e032:	429a      	cmp	r2, r3
 800e034:	d11a      	bne.n	800e06c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	0a5b      	lsrs	r3, r3, #9
 800e03a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e042:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e044:	429a      	cmp	r2, r3
 800e046:	d111      	bne.n	800e06c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	0c1b      	lsrs	r3, r3, #16
 800e04c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e054:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e056:	429a      	cmp	r2, r3
 800e058:	d108      	bne.n	800e06c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	0e1b      	lsrs	r3, r3, #24
 800e05e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e066:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e068:	429a      	cmp	r2, r3
 800e06a:	d001      	beq.n	800e070 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e06c:	2301      	movs	r3, #1
 800e06e:	e02b      	b.n	800e0c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e070:	4b17      	ldr	r3, [pc, #92]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800e072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e074:	08db      	lsrs	r3, r3, #3
 800e076:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e07a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e080:	693a      	ldr	r2, [r7, #16]
 800e082:	429a      	cmp	r2, r3
 800e084:	d01f      	beq.n	800e0c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e086:	4b12      	ldr	r3, [pc, #72]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800e088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e08a:	4a11      	ldr	r2, [pc, #68]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800e08c:	f023 0301 	bic.w	r3, r3, #1
 800e090:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e092:	f7f7 fb3b 	bl	800570c <HAL_GetTick>
 800e096:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e098:	bf00      	nop
 800e09a:	f7f7 fb37 	bl	800570c <HAL_GetTick>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d0f9      	beq.n	800e09a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e0a6:	4b0a      	ldr	r3, [pc, #40]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800e0a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0aa:	4b0a      	ldr	r3, [pc, #40]	; (800e0d4 <HAL_RCC_OscConfig+0x8b0>)
 800e0ac:	4013      	ands	r3, r2
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e0b2:	00d2      	lsls	r2, r2, #3
 800e0b4:	4906      	ldr	r1, [pc, #24]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e0ba:	4b05      	ldr	r3, [pc, #20]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800e0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0be:	4a04      	ldr	r2, [pc, #16]	; (800e0d0 <HAL_RCC_OscConfig+0x8ac>)
 800e0c0:	f043 0301 	orr.w	r3, r3, #1
 800e0c4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e0c6:	2300      	movs	r3, #0
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3730      	adds	r7, #48	; 0x30
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	58024400 	.word	0x58024400
 800e0d4:	ffff0007 	.word	0xffff0007

0800e0d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d101      	bne.n	800e0ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e19c      	b.n	800e426 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e0ec:	4b8a      	ldr	r3, [pc, #552]	; (800e318 <HAL_RCC_ClockConfig+0x240>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f003 030f 	and.w	r3, r3, #15
 800e0f4:	683a      	ldr	r2, [r7, #0]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d910      	bls.n	800e11c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e0fa:	4b87      	ldr	r3, [pc, #540]	; (800e318 <HAL_RCC_ClockConfig+0x240>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f023 020f 	bic.w	r2, r3, #15
 800e102:	4985      	ldr	r1, [pc, #532]	; (800e318 <HAL_RCC_ClockConfig+0x240>)
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	4313      	orrs	r3, r2
 800e108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e10a:	4b83      	ldr	r3, [pc, #524]	; (800e318 <HAL_RCC_ClockConfig+0x240>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f003 030f 	and.w	r3, r3, #15
 800e112:	683a      	ldr	r2, [r7, #0]
 800e114:	429a      	cmp	r2, r3
 800e116:	d001      	beq.n	800e11c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	e184      	b.n	800e426 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f003 0304 	and.w	r3, r3, #4
 800e124:	2b00      	cmp	r3, #0
 800e126:	d010      	beq.n	800e14a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	691a      	ldr	r2, [r3, #16]
 800e12c:	4b7b      	ldr	r3, [pc, #492]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e12e:	699b      	ldr	r3, [r3, #24]
 800e130:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e134:	429a      	cmp	r2, r3
 800e136:	d908      	bls.n	800e14a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e138:	4b78      	ldr	r3, [pc, #480]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e13a:	699b      	ldr	r3, [r3, #24]
 800e13c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	691b      	ldr	r3, [r3, #16]
 800e144:	4975      	ldr	r1, [pc, #468]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e146:	4313      	orrs	r3, r2
 800e148:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f003 0308 	and.w	r3, r3, #8
 800e152:	2b00      	cmp	r3, #0
 800e154:	d010      	beq.n	800e178 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	695a      	ldr	r2, [r3, #20]
 800e15a:	4b70      	ldr	r3, [pc, #448]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e15c:	69db      	ldr	r3, [r3, #28]
 800e15e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e162:	429a      	cmp	r2, r3
 800e164:	d908      	bls.n	800e178 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e166:	4b6d      	ldr	r3, [pc, #436]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e168:	69db      	ldr	r3, [r3, #28]
 800e16a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	695b      	ldr	r3, [r3, #20]
 800e172:	496a      	ldr	r1, [pc, #424]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e174:	4313      	orrs	r3, r2
 800e176:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f003 0310 	and.w	r3, r3, #16
 800e180:	2b00      	cmp	r3, #0
 800e182:	d010      	beq.n	800e1a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	699a      	ldr	r2, [r3, #24]
 800e188:	4b64      	ldr	r3, [pc, #400]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e18a:	69db      	ldr	r3, [r3, #28]
 800e18c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e190:	429a      	cmp	r2, r3
 800e192:	d908      	bls.n	800e1a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e194:	4b61      	ldr	r3, [pc, #388]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e196:	69db      	ldr	r3, [r3, #28]
 800e198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	699b      	ldr	r3, [r3, #24]
 800e1a0:	495e      	ldr	r1, [pc, #376]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f003 0320 	and.w	r3, r3, #32
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d010      	beq.n	800e1d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	69da      	ldr	r2, [r3, #28]
 800e1b6:	4b59      	ldr	r3, [pc, #356]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e1b8:	6a1b      	ldr	r3, [r3, #32]
 800e1ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d908      	bls.n	800e1d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e1c2:	4b56      	ldr	r3, [pc, #344]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e1c4:	6a1b      	ldr	r3, [r3, #32]
 800e1c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	69db      	ldr	r3, [r3, #28]
 800e1ce:	4953      	ldr	r1, [pc, #332]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f003 0302 	and.w	r3, r3, #2
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d010      	beq.n	800e202 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	68da      	ldr	r2, [r3, #12]
 800e1e4:	4b4d      	ldr	r3, [pc, #308]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e1e6:	699b      	ldr	r3, [r3, #24]
 800e1e8:	f003 030f 	and.w	r3, r3, #15
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d908      	bls.n	800e202 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e1f0:	4b4a      	ldr	r3, [pc, #296]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e1f2:	699b      	ldr	r3, [r3, #24]
 800e1f4:	f023 020f 	bic.w	r2, r3, #15
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	4947      	ldr	r1, [pc, #284]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e1fe:	4313      	orrs	r3, r2
 800e200:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f003 0301 	and.w	r3, r3, #1
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d055      	beq.n	800e2ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e20e:	4b43      	ldr	r3, [pc, #268]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e210:	699b      	ldr	r3, [r3, #24]
 800e212:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	4940      	ldr	r1, [pc, #256]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e21c:	4313      	orrs	r3, r2
 800e21e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	2b02      	cmp	r3, #2
 800e226:	d107      	bne.n	800e238 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e228:	4b3c      	ldr	r3, [pc, #240]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e230:	2b00      	cmp	r3, #0
 800e232:	d121      	bne.n	800e278 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e234:	2301      	movs	r3, #1
 800e236:	e0f6      	b.n	800e426 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	2b03      	cmp	r3, #3
 800e23e:	d107      	bne.n	800e250 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e240:	4b36      	ldr	r3, [pc, #216]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d115      	bne.n	800e278 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e24c:	2301      	movs	r3, #1
 800e24e:	e0ea      	b.n	800e426 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d107      	bne.n	800e268 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e258:	4b30      	ldr	r3, [pc, #192]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e260:	2b00      	cmp	r3, #0
 800e262:	d109      	bne.n	800e278 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e264:	2301      	movs	r3, #1
 800e266:	e0de      	b.n	800e426 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e268:	4b2c      	ldr	r3, [pc, #176]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f003 0304 	and.w	r3, r3, #4
 800e270:	2b00      	cmp	r3, #0
 800e272:	d101      	bne.n	800e278 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e274:	2301      	movs	r3, #1
 800e276:	e0d6      	b.n	800e426 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e278:	4b28      	ldr	r3, [pc, #160]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e27a:	691b      	ldr	r3, [r3, #16]
 800e27c:	f023 0207 	bic.w	r2, r3, #7
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	4925      	ldr	r1, [pc, #148]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e286:	4313      	orrs	r3, r2
 800e288:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e28a:	f7f7 fa3f 	bl	800570c <HAL_GetTick>
 800e28e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e290:	e00a      	b.n	800e2a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e292:	f7f7 fa3b 	bl	800570c <HAL_GetTick>
 800e296:	4602      	mov	r2, r0
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	1ad3      	subs	r3, r2, r3
 800e29c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d901      	bls.n	800e2a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e2a4:	2303      	movs	r3, #3
 800e2a6:	e0be      	b.n	800e426 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e2a8:	4b1c      	ldr	r3, [pc, #112]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e2aa:	691b      	ldr	r3, [r3, #16]
 800e2ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	00db      	lsls	r3, r3, #3
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d1eb      	bne.n	800e292 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f003 0302 	and.w	r3, r3, #2
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d010      	beq.n	800e2e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	68da      	ldr	r2, [r3, #12]
 800e2ca:	4b14      	ldr	r3, [pc, #80]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e2cc:	699b      	ldr	r3, [r3, #24]
 800e2ce:	f003 030f 	and.w	r3, r3, #15
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d208      	bcs.n	800e2e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e2d6:	4b11      	ldr	r3, [pc, #68]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e2d8:	699b      	ldr	r3, [r3, #24]
 800e2da:	f023 020f 	bic.w	r2, r3, #15
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	490e      	ldr	r1, [pc, #56]	; (800e31c <HAL_RCC_ClockConfig+0x244>)
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e2e8:	4b0b      	ldr	r3, [pc, #44]	; (800e318 <HAL_RCC_ClockConfig+0x240>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f003 030f 	and.w	r3, r3, #15
 800e2f0:	683a      	ldr	r2, [r7, #0]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d214      	bcs.n	800e320 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e2f6:	4b08      	ldr	r3, [pc, #32]	; (800e318 <HAL_RCC_ClockConfig+0x240>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f023 020f 	bic.w	r2, r3, #15
 800e2fe:	4906      	ldr	r1, [pc, #24]	; (800e318 <HAL_RCC_ClockConfig+0x240>)
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	4313      	orrs	r3, r2
 800e304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e306:	4b04      	ldr	r3, [pc, #16]	; (800e318 <HAL_RCC_ClockConfig+0x240>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f003 030f 	and.w	r3, r3, #15
 800e30e:	683a      	ldr	r2, [r7, #0]
 800e310:	429a      	cmp	r2, r3
 800e312:	d005      	beq.n	800e320 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e314:	2301      	movs	r3, #1
 800e316:	e086      	b.n	800e426 <HAL_RCC_ClockConfig+0x34e>
 800e318:	52002000 	.word	0x52002000
 800e31c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f003 0304 	and.w	r3, r3, #4
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d010      	beq.n	800e34e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	691a      	ldr	r2, [r3, #16]
 800e330:	4b3f      	ldr	r3, [pc, #252]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e332:	699b      	ldr	r3, [r3, #24]
 800e334:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e338:	429a      	cmp	r2, r3
 800e33a:	d208      	bcs.n	800e34e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e33c:	4b3c      	ldr	r3, [pc, #240]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e33e:	699b      	ldr	r3, [r3, #24]
 800e340:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	691b      	ldr	r3, [r3, #16]
 800e348:	4939      	ldr	r1, [pc, #228]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e34a:	4313      	orrs	r3, r2
 800e34c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f003 0308 	and.w	r3, r3, #8
 800e356:	2b00      	cmp	r3, #0
 800e358:	d010      	beq.n	800e37c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	695a      	ldr	r2, [r3, #20]
 800e35e:	4b34      	ldr	r3, [pc, #208]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e360:	69db      	ldr	r3, [r3, #28]
 800e362:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e366:	429a      	cmp	r2, r3
 800e368:	d208      	bcs.n	800e37c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e36a:	4b31      	ldr	r3, [pc, #196]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e36c:	69db      	ldr	r3, [r3, #28]
 800e36e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	695b      	ldr	r3, [r3, #20]
 800e376:	492e      	ldr	r1, [pc, #184]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e378:	4313      	orrs	r3, r2
 800e37a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f003 0310 	and.w	r3, r3, #16
 800e384:	2b00      	cmp	r3, #0
 800e386:	d010      	beq.n	800e3aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	699a      	ldr	r2, [r3, #24]
 800e38c:	4b28      	ldr	r3, [pc, #160]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e38e:	69db      	ldr	r3, [r3, #28]
 800e390:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e394:	429a      	cmp	r2, r3
 800e396:	d208      	bcs.n	800e3aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e398:	4b25      	ldr	r3, [pc, #148]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e39a:	69db      	ldr	r3, [r3, #28]
 800e39c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	699b      	ldr	r3, [r3, #24]
 800e3a4:	4922      	ldr	r1, [pc, #136]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f003 0320 	and.w	r3, r3, #32
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d010      	beq.n	800e3d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	69da      	ldr	r2, [r3, #28]
 800e3ba:	4b1d      	ldr	r3, [pc, #116]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e3bc:	6a1b      	ldr	r3, [r3, #32]
 800e3be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d208      	bcs.n	800e3d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e3c6:	4b1a      	ldr	r3, [pc, #104]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e3c8:	6a1b      	ldr	r3, [r3, #32]
 800e3ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	69db      	ldr	r3, [r3, #28]
 800e3d2:	4917      	ldr	r1, [pc, #92]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e3d8:	f000 f834 	bl	800e444 <HAL_RCC_GetSysClockFreq>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	4b14      	ldr	r3, [pc, #80]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e3e0:	699b      	ldr	r3, [r3, #24]
 800e3e2:	0a1b      	lsrs	r3, r3, #8
 800e3e4:	f003 030f 	and.w	r3, r3, #15
 800e3e8:	4912      	ldr	r1, [pc, #72]	; (800e434 <HAL_RCC_ClockConfig+0x35c>)
 800e3ea:	5ccb      	ldrb	r3, [r1, r3]
 800e3ec:	f003 031f 	and.w	r3, r3, #31
 800e3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e3f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e3f6:	4b0e      	ldr	r3, [pc, #56]	; (800e430 <HAL_RCC_ClockConfig+0x358>)
 800e3f8:	699b      	ldr	r3, [r3, #24]
 800e3fa:	f003 030f 	and.w	r3, r3, #15
 800e3fe:	4a0d      	ldr	r2, [pc, #52]	; (800e434 <HAL_RCC_ClockConfig+0x35c>)
 800e400:	5cd3      	ldrb	r3, [r2, r3]
 800e402:	f003 031f 	and.w	r3, r3, #31
 800e406:	693a      	ldr	r2, [r7, #16]
 800e408:	fa22 f303 	lsr.w	r3, r2, r3
 800e40c:	4a0a      	ldr	r2, [pc, #40]	; (800e438 <HAL_RCC_ClockConfig+0x360>)
 800e40e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e410:	4a0a      	ldr	r2, [pc, #40]	; (800e43c <HAL_RCC_ClockConfig+0x364>)
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e416:	4b0a      	ldr	r3, [pc, #40]	; (800e440 <HAL_RCC_ClockConfig+0x368>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7f5 ff9c 	bl	8004358 <HAL_InitTick>
 800e420:	4603      	mov	r3, r0
 800e422:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e424:	7bfb      	ldrb	r3, [r7, #15]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3718      	adds	r7, #24
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	58024400 	.word	0x58024400
 800e434:	0801ab14 	.word	0x0801ab14
 800e438:	24000094 	.word	0x24000094
 800e43c:	24000090 	.word	0x24000090
 800e440:	24000098 	.word	0x24000098

0800e444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e444:	b480      	push	{r7}
 800e446:	b089      	sub	sp, #36	; 0x24
 800e448:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e44a:	4bb3      	ldr	r3, [pc, #716]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e44c:	691b      	ldr	r3, [r3, #16]
 800e44e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e452:	2b18      	cmp	r3, #24
 800e454:	f200 8155 	bhi.w	800e702 <HAL_RCC_GetSysClockFreq+0x2be>
 800e458:	a201      	add	r2, pc, #4	; (adr r2, 800e460 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e45e:	bf00      	nop
 800e460:	0800e4c5 	.word	0x0800e4c5
 800e464:	0800e703 	.word	0x0800e703
 800e468:	0800e703 	.word	0x0800e703
 800e46c:	0800e703 	.word	0x0800e703
 800e470:	0800e703 	.word	0x0800e703
 800e474:	0800e703 	.word	0x0800e703
 800e478:	0800e703 	.word	0x0800e703
 800e47c:	0800e703 	.word	0x0800e703
 800e480:	0800e4eb 	.word	0x0800e4eb
 800e484:	0800e703 	.word	0x0800e703
 800e488:	0800e703 	.word	0x0800e703
 800e48c:	0800e703 	.word	0x0800e703
 800e490:	0800e703 	.word	0x0800e703
 800e494:	0800e703 	.word	0x0800e703
 800e498:	0800e703 	.word	0x0800e703
 800e49c:	0800e703 	.word	0x0800e703
 800e4a0:	0800e4f1 	.word	0x0800e4f1
 800e4a4:	0800e703 	.word	0x0800e703
 800e4a8:	0800e703 	.word	0x0800e703
 800e4ac:	0800e703 	.word	0x0800e703
 800e4b0:	0800e703 	.word	0x0800e703
 800e4b4:	0800e703 	.word	0x0800e703
 800e4b8:	0800e703 	.word	0x0800e703
 800e4bc:	0800e703 	.word	0x0800e703
 800e4c0:	0800e4f7 	.word	0x0800e4f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4c4:	4b94      	ldr	r3, [pc, #592]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f003 0320 	and.w	r3, r3, #32
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d009      	beq.n	800e4e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e4d0:	4b91      	ldr	r3, [pc, #580]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	08db      	lsrs	r3, r3, #3
 800e4d6:	f003 0303 	and.w	r3, r3, #3
 800e4da:	4a90      	ldr	r2, [pc, #576]	; (800e71c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e4dc:	fa22 f303 	lsr.w	r3, r2, r3
 800e4e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e4e2:	e111      	b.n	800e708 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e4e4:	4b8d      	ldr	r3, [pc, #564]	; (800e71c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e4e6:	61bb      	str	r3, [r7, #24]
      break;
 800e4e8:	e10e      	b.n	800e708 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e4ea:	4b8d      	ldr	r3, [pc, #564]	; (800e720 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e4ec:	61bb      	str	r3, [r7, #24]
      break;
 800e4ee:	e10b      	b.n	800e708 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e4f0:	4b8c      	ldr	r3, [pc, #560]	; (800e724 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e4f2:	61bb      	str	r3, [r7, #24]
      break;
 800e4f4:	e108      	b.n	800e708 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e4f6:	4b88      	ldr	r3, [pc, #544]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4fa:	f003 0303 	and.w	r3, r3, #3
 800e4fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e500:	4b85      	ldr	r3, [pc, #532]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e504:	091b      	lsrs	r3, r3, #4
 800e506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e50a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e50c:	4b82      	ldr	r3, [pc, #520]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e510:	f003 0301 	and.w	r3, r3, #1
 800e514:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e516:	4b80      	ldr	r3, [pc, #512]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e51a:	08db      	lsrs	r3, r3, #3
 800e51c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	fb02 f303 	mul.w	r3, r2, r3
 800e526:	ee07 3a90 	vmov	s15, r3
 800e52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e52e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	2b00      	cmp	r3, #0
 800e536:	f000 80e1 	beq.w	800e6fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	f000 8083 	beq.w	800e648 <HAL_RCC_GetSysClockFreq+0x204>
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	2b02      	cmp	r3, #2
 800e546:	f200 80a1 	bhi.w	800e68c <HAL_RCC_GetSysClockFreq+0x248>
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d003      	beq.n	800e558 <HAL_RCC_GetSysClockFreq+0x114>
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	2b01      	cmp	r3, #1
 800e554:	d056      	beq.n	800e604 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e556:	e099      	b.n	800e68c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e558:	4b6f      	ldr	r3, [pc, #444]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f003 0320 	and.w	r3, r3, #32
 800e560:	2b00      	cmp	r3, #0
 800e562:	d02d      	beq.n	800e5c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e564:	4b6c      	ldr	r3, [pc, #432]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	08db      	lsrs	r3, r3, #3
 800e56a:	f003 0303 	and.w	r3, r3, #3
 800e56e:	4a6b      	ldr	r2, [pc, #428]	; (800e71c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e570:	fa22 f303 	lsr.w	r3, r2, r3
 800e574:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	ee07 3a90 	vmov	s15, r3
 800e57c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	ee07 3a90 	vmov	s15, r3
 800e586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e58a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e58e:	4b62      	ldr	r3, [pc, #392]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e596:	ee07 3a90 	vmov	s15, r3
 800e59a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e59e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800e728 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e5a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e5be:	e087      	b.n	800e6d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	ee07 3a90 	vmov	s15, r3
 800e5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e72c <HAL_RCC_GetSysClockFreq+0x2e8>
 800e5ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5d2:	4b51      	ldr	r3, [pc, #324]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5da:	ee07 3a90 	vmov	s15, r3
 800e5de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800e728 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e5ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e602:	e065      	b.n	800e6d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	ee07 3a90 	vmov	s15, r3
 800e60a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e60e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e730 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e616:	4b40      	ldr	r3, [pc, #256]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e61e:	ee07 3a90 	vmov	s15, r3
 800e622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e626:	ed97 6a02 	vldr	s12, [r7, #8]
 800e62a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e728 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e62e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e63a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e646:	e043      	b.n	800e6d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	ee07 3a90 	vmov	s15, r3
 800e64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e652:	eddf 6a38 	vldr	s13, [pc, #224]	; 800e734 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e65a:	4b2f      	ldr	r3, [pc, #188]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e662:	ee07 3a90 	vmov	s15, r3
 800e666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e66a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e66e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e728 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e67a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e67e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e682:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e686:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e68a:	e021      	b.n	800e6d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	ee07 3a90 	vmov	s15, r3
 800e692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e696:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e730 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e69a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e69e:	4b1e      	ldr	r3, [pc, #120]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6a6:	ee07 3a90 	vmov	s15, r3
 800e6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800e6b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800e728 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e6b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e6c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e6ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e6d0:	4b11      	ldr	r3, [pc, #68]	; (800e718 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d4:	0a5b      	lsrs	r3, r3, #9
 800e6d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6da:	3301      	adds	r3, #1
 800e6dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	ee07 3a90 	vmov	s15, r3
 800e6e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e6e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6f4:	ee17 3a90 	vmov	r3, s15
 800e6f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e6fa:	e005      	b.n	800e708 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	61bb      	str	r3, [r7, #24]
      break;
 800e700:	e002      	b.n	800e708 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e702:	4b07      	ldr	r3, [pc, #28]	; (800e720 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e704:	61bb      	str	r3, [r7, #24]
      break;
 800e706:	bf00      	nop
  }

  return sysclockfreq;
 800e708:	69bb      	ldr	r3, [r7, #24]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3724      	adds	r7, #36	; 0x24
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr
 800e716:	bf00      	nop
 800e718:	58024400 	.word	0x58024400
 800e71c:	03d09000 	.word	0x03d09000
 800e720:	003d0900 	.word	0x003d0900
 800e724:	017d7840 	.word	0x017d7840
 800e728:	46000000 	.word	0x46000000
 800e72c:	4c742400 	.word	0x4c742400
 800e730:	4a742400 	.word	0x4a742400
 800e734:	4bbebc20 	.word	0x4bbebc20

0800e738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e73e:	f7ff fe81 	bl	800e444 <HAL_RCC_GetSysClockFreq>
 800e742:	4602      	mov	r2, r0
 800e744:	4b10      	ldr	r3, [pc, #64]	; (800e788 <HAL_RCC_GetHCLKFreq+0x50>)
 800e746:	699b      	ldr	r3, [r3, #24]
 800e748:	0a1b      	lsrs	r3, r3, #8
 800e74a:	f003 030f 	and.w	r3, r3, #15
 800e74e:	490f      	ldr	r1, [pc, #60]	; (800e78c <HAL_RCC_GetHCLKFreq+0x54>)
 800e750:	5ccb      	ldrb	r3, [r1, r3]
 800e752:	f003 031f 	and.w	r3, r3, #31
 800e756:	fa22 f303 	lsr.w	r3, r2, r3
 800e75a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e75c:	4b0a      	ldr	r3, [pc, #40]	; (800e788 <HAL_RCC_GetHCLKFreq+0x50>)
 800e75e:	699b      	ldr	r3, [r3, #24]
 800e760:	f003 030f 	and.w	r3, r3, #15
 800e764:	4a09      	ldr	r2, [pc, #36]	; (800e78c <HAL_RCC_GetHCLKFreq+0x54>)
 800e766:	5cd3      	ldrb	r3, [r2, r3]
 800e768:	f003 031f 	and.w	r3, r3, #31
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	fa22 f303 	lsr.w	r3, r2, r3
 800e772:	4a07      	ldr	r2, [pc, #28]	; (800e790 <HAL_RCC_GetHCLKFreq+0x58>)
 800e774:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e776:	4a07      	ldr	r2, [pc, #28]	; (800e794 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e77c:	4b04      	ldr	r3, [pc, #16]	; (800e790 <HAL_RCC_GetHCLKFreq+0x58>)
 800e77e:	681b      	ldr	r3, [r3, #0]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	58024400 	.word	0x58024400
 800e78c:	0801ab14 	.word	0x0801ab14
 800e790:	24000094 	.word	0x24000094
 800e794:	24000090 	.word	0x24000090

0800e798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e79c:	f7ff ffcc 	bl	800e738 <HAL_RCC_GetHCLKFreq>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	4b06      	ldr	r3, [pc, #24]	; (800e7bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800e7a4:	69db      	ldr	r3, [r3, #28]
 800e7a6:	091b      	lsrs	r3, r3, #4
 800e7a8:	f003 0307 	and.w	r3, r3, #7
 800e7ac:	4904      	ldr	r1, [pc, #16]	; (800e7c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e7ae:	5ccb      	ldrb	r3, [r1, r3]
 800e7b0:	f003 031f 	and.w	r3, r3, #31
 800e7b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	58024400 	.word	0x58024400
 800e7c0:	0801ab14 	.word	0x0801ab14

0800e7c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e7c8:	f7ff ffb6 	bl	800e738 <HAL_RCC_GetHCLKFreq>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	4b06      	ldr	r3, [pc, #24]	; (800e7e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e7d0:	69db      	ldr	r3, [r3, #28]
 800e7d2:	0a1b      	lsrs	r3, r3, #8
 800e7d4:	f003 0307 	and.w	r3, r3, #7
 800e7d8:	4904      	ldr	r1, [pc, #16]	; (800e7ec <HAL_RCC_GetPCLK2Freq+0x28>)
 800e7da:	5ccb      	ldrb	r3, [r1, r3]
 800e7dc:	f003 031f 	and.w	r3, r3, #31
 800e7e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	bd80      	pop	{r7, pc}
 800e7e8:	58024400 	.word	0x58024400
 800e7ec:	0801ab14 	.word	0x0801ab14

0800e7f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	223f      	movs	r2, #63	; 0x3f
 800e7fe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e800:	4b1a      	ldr	r3, [pc, #104]	; (800e86c <HAL_RCC_GetClockConfig+0x7c>)
 800e802:	691b      	ldr	r3, [r3, #16]
 800e804:	f003 0207 	and.w	r2, r3, #7
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800e80c:	4b17      	ldr	r3, [pc, #92]	; (800e86c <HAL_RCC_GetClockConfig+0x7c>)
 800e80e:	699b      	ldr	r3, [r3, #24]
 800e810:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800e818:	4b14      	ldr	r3, [pc, #80]	; (800e86c <HAL_RCC_GetClockConfig+0x7c>)
 800e81a:	699b      	ldr	r3, [r3, #24]
 800e81c:	f003 020f 	and.w	r2, r3, #15
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800e824:	4b11      	ldr	r3, [pc, #68]	; (800e86c <HAL_RCC_GetClockConfig+0x7c>)
 800e826:	699b      	ldr	r3, [r3, #24]
 800e828:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800e830:	4b0e      	ldr	r3, [pc, #56]	; (800e86c <HAL_RCC_GetClockConfig+0x7c>)
 800e832:	69db      	ldr	r3, [r3, #28]
 800e834:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800e83c:	4b0b      	ldr	r3, [pc, #44]	; (800e86c <HAL_RCC_GetClockConfig+0x7c>)
 800e83e:	69db      	ldr	r3, [r3, #28]
 800e840:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e848:	4b08      	ldr	r3, [pc, #32]	; (800e86c <HAL_RCC_GetClockConfig+0x7c>)
 800e84a:	6a1b      	ldr	r3, [r3, #32]
 800e84c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e854:	4b06      	ldr	r3, [pc, #24]	; (800e870 <HAL_RCC_GetClockConfig+0x80>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f003 020f 	and.w	r2, r3, #15
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	601a      	str	r2, [r3, #0]
}
 800e860:	bf00      	nop
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr
 800e86c:	58024400 	.word	0x58024400
 800e870:	52002000 	.word	0x52002000

0800e874 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e878:	b0ca      	sub	sp, #296	; 0x128
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e880:	2300      	movs	r3, #0
 800e882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e886:	2300      	movs	r3, #0
 800e888:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e88c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e894:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800e898:	2500      	movs	r5, #0
 800e89a:	ea54 0305 	orrs.w	r3, r4, r5
 800e89e:	d049      	beq.n	800e934 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e8aa:	d02f      	beq.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e8ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e8b0:	d828      	bhi.n	800e904 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e8b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e8b6:	d01a      	beq.n	800e8ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e8b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e8bc:	d822      	bhi.n	800e904 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d003      	beq.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e8c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8c6:	d007      	beq.n	800e8d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e8c8:	e01c      	b.n	800e904 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e8ca:	4bb8      	ldr	r3, [pc, #736]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ce:	4ab7      	ldr	r2, [pc, #732]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e8d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e8d6:	e01a      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8dc:	3308      	adds	r3, #8
 800e8de:	2102      	movs	r1, #2
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f002 fb61 	bl	8010fa8 <RCCEx_PLL2_Config>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e8ec:	e00f      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8f2:	3328      	adds	r3, #40	; 0x28
 800e8f4:	2102      	movs	r1, #2
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f002 fc08 	bl	801110c <RCCEx_PLL3_Config>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e902:	e004      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e904:	2301      	movs	r3, #1
 800e906:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e90a:	e000      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e90c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e90e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e912:	2b00      	cmp	r3, #0
 800e914:	d10a      	bne.n	800e92c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e916:	4ba5      	ldr	r3, [pc, #660]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e91a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e924:	4aa1      	ldr	r2, [pc, #644]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e926:	430b      	orrs	r3, r1
 800e928:	6513      	str	r3, [r2, #80]	; 0x50
 800e92a:	e003      	b.n	800e934 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e92c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e930:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800e940:	f04f 0900 	mov.w	r9, #0
 800e944:	ea58 0309 	orrs.w	r3, r8, r9
 800e948:	d047      	beq.n	800e9da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e950:	2b04      	cmp	r3, #4
 800e952:	d82a      	bhi.n	800e9aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e954:	a201      	add	r2, pc, #4	; (adr r2, 800e95c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e95a:	bf00      	nop
 800e95c:	0800e971 	.word	0x0800e971
 800e960:	0800e97f 	.word	0x0800e97f
 800e964:	0800e995 	.word	0x0800e995
 800e968:	0800e9b3 	.word	0x0800e9b3
 800e96c:	0800e9b3 	.word	0x0800e9b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e970:	4b8e      	ldr	r3, [pc, #568]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e974:	4a8d      	ldr	r2, [pc, #564]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e97a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e97c:	e01a      	b.n	800e9b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e982:	3308      	adds	r3, #8
 800e984:	2100      	movs	r1, #0
 800e986:	4618      	mov	r0, r3
 800e988:	f002 fb0e 	bl	8010fa8 <RCCEx_PLL2_Config>
 800e98c:	4603      	mov	r3, r0
 800e98e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e992:	e00f      	b.n	800e9b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e998:	3328      	adds	r3, #40	; 0x28
 800e99a:	2100      	movs	r1, #0
 800e99c:	4618      	mov	r0, r3
 800e99e:	f002 fbb5 	bl	801110c <RCCEx_PLL3_Config>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e9a8:	e004      	b.n	800e9b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e9b0:	e000      	b.n	800e9b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e9b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d10a      	bne.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e9bc:	4b7b      	ldr	r3, [pc, #492]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9c0:	f023 0107 	bic.w	r1, r3, #7
 800e9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9ca:	4a78      	ldr	r2, [pc, #480]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9cc:	430b      	orrs	r3, r1
 800e9ce:	6513      	str	r3, [r2, #80]	; 0x50
 800e9d0:	e003      	b.n	800e9da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800e9e6:	f04f 0b00 	mov.w	fp, #0
 800e9ea:	ea5a 030b 	orrs.w	r3, sl, fp
 800e9ee:	d04c      	beq.n	800ea8a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9fa:	d030      	beq.n	800ea5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e9fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea00:	d829      	bhi.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ea02:	2bc0      	cmp	r3, #192	; 0xc0
 800ea04:	d02d      	beq.n	800ea62 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ea06:	2bc0      	cmp	r3, #192	; 0xc0
 800ea08:	d825      	bhi.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ea0a:	2b80      	cmp	r3, #128	; 0x80
 800ea0c:	d018      	beq.n	800ea40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ea0e:	2b80      	cmp	r3, #128	; 0x80
 800ea10:	d821      	bhi.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d002      	beq.n	800ea1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ea16:	2b40      	cmp	r3, #64	; 0x40
 800ea18:	d007      	beq.n	800ea2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ea1a:	e01c      	b.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea1c:	4b63      	ldr	r3, [pc, #396]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea20:	4a62      	ldr	r2, [pc, #392]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ea26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ea28:	e01c      	b.n	800ea64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ea2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea2e:	3308      	adds	r3, #8
 800ea30:	2100      	movs	r1, #0
 800ea32:	4618      	mov	r0, r3
 800ea34:	f002 fab8 	bl	8010fa8 <RCCEx_PLL2_Config>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ea3e:	e011      	b.n	800ea64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ea40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea44:	3328      	adds	r3, #40	; 0x28
 800ea46:	2100      	movs	r1, #0
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f002 fb5f 	bl	801110c <RCCEx_PLL3_Config>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ea54:	e006      	b.n	800ea64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea56:	2301      	movs	r3, #1
 800ea58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ea5c:	e002      	b.n	800ea64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ea5e:	bf00      	nop
 800ea60:	e000      	b.n	800ea64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ea62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d10a      	bne.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ea6c:	4b4f      	ldr	r3, [pc, #316]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea70:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ea74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea7a:	4a4c      	ldr	r2, [pc, #304]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea7c:	430b      	orrs	r3, r1
 800ea7e:	6513      	str	r3, [r2, #80]	; 0x50
 800ea80:	e003      	b.n	800ea8a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ea8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea92:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ea96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800eaa0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	d053      	beq.n	800eb52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800eaaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800eab2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eab6:	d035      	beq.n	800eb24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800eab8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eabc:	d82e      	bhi.n	800eb1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eabe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800eac2:	d031      	beq.n	800eb28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800eac4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800eac8:	d828      	bhi.n	800eb1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eaca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eace:	d01a      	beq.n	800eb06 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ead0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ead4:	d822      	bhi.n	800eb1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d003      	beq.n	800eae2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800eada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eade:	d007      	beq.n	800eaf0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800eae0:	e01c      	b.n	800eb1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eae2:	4b32      	ldr	r3, [pc, #200]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae6:	4a31      	ldr	r2, [pc, #196]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eaec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eaee:	e01c      	b.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eaf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaf4:	3308      	adds	r3, #8
 800eaf6:	2100      	movs	r1, #0
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f002 fa55 	bl	8010fa8 <RCCEx_PLL2_Config>
 800eafe:	4603      	mov	r3, r0
 800eb00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800eb04:	e011      	b.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eb06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb0a:	3328      	adds	r3, #40	; 0x28
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f002 fafc 	bl	801110c <RCCEx_PLL3_Config>
 800eb14:	4603      	mov	r3, r0
 800eb16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eb1a:	e006      	b.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb22:	e002      	b.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800eb24:	bf00      	nop
 800eb26:	e000      	b.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800eb28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d10b      	bne.n	800eb4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800eb32:	4b1e      	ldr	r3, [pc, #120]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb36:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800eb3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800eb42:	4a1a      	ldr	r2, [pc, #104]	; (800ebac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb44:	430b      	orrs	r3, r1
 800eb46:	6593      	str	r3, [r2, #88]	; 0x58
 800eb48:	e003      	b.n	800eb52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800eb52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800eb5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800eb62:	2300      	movs	r3, #0
 800eb64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800eb68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	d056      	beq.n	800ec20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800eb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eb7e:	d038      	beq.n	800ebf2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800eb80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eb84:	d831      	bhi.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eb86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800eb8a:	d034      	beq.n	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800eb8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800eb90:	d82b      	bhi.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eb92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb96:	d01d      	beq.n	800ebd4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800eb98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb9c:	d825      	bhi.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d006      	beq.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800eba2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eba6:	d00a      	beq.n	800ebbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800eba8:	e01f      	b.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ebaa:	bf00      	nop
 800ebac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebb0:	4ba2      	ldr	r3, [pc, #648]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ebb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb4:	4aa1      	ldr	r2, [pc, #644]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ebb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ebba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ebbc:	e01c      	b.n	800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ebbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebc2:	3308      	adds	r3, #8
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f002 f9ee 	bl	8010fa8 <RCCEx_PLL2_Config>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ebd2:	e011      	b.n	800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ebd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebd8:	3328      	adds	r3, #40	; 0x28
 800ebda:	2100      	movs	r1, #0
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f002 fa95 	bl	801110c <RCCEx_PLL3_Config>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ebe8:	e006      	b.n	800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ebea:	2301      	movs	r3, #1
 800ebec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ebf0:	e002      	b.n	800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ebf2:	bf00      	nop
 800ebf4:	e000      	b.n	800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ebf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d10b      	bne.n	800ec18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ec00:	4b8e      	ldr	r3, [pc, #568]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec04:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ec08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ec10:	4a8a      	ldr	r2, [pc, #552]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec12:	430b      	orrs	r3, r1
 800ec14:	6593      	str	r3, [r2, #88]	; 0x58
 800ec16:	e003      	b.n	800ec20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ec20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec28:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ec2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ec30:	2300      	movs	r3, #0
 800ec32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ec36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	d03a      	beq.n	800ecb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ec40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec46:	2b30      	cmp	r3, #48	; 0x30
 800ec48:	d01f      	beq.n	800ec8a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ec4a:	2b30      	cmp	r3, #48	; 0x30
 800ec4c:	d819      	bhi.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ec4e:	2b20      	cmp	r3, #32
 800ec50:	d00c      	beq.n	800ec6c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ec52:	2b20      	cmp	r3, #32
 800ec54:	d815      	bhi.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d019      	beq.n	800ec8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ec5a:	2b10      	cmp	r3, #16
 800ec5c:	d111      	bne.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec5e:	4b77      	ldr	r3, [pc, #476]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec62:	4a76      	ldr	r2, [pc, #472]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ec6a:	e011      	b.n	800ec90 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ec6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec70:	3308      	adds	r3, #8
 800ec72:	2102      	movs	r1, #2
 800ec74:	4618      	mov	r0, r3
 800ec76:	f002 f997 	bl	8010fa8 <RCCEx_PLL2_Config>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ec80:	e006      	b.n	800ec90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ec82:	2301      	movs	r3, #1
 800ec84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec88:	e002      	b.n	800ec90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ec8a:	bf00      	nop
 800ec8c:	e000      	b.n	800ec90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ec8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d10a      	bne.n	800ecae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ec98:	4b68      	ldr	r3, [pc, #416]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec9c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800eca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eca6:	4a65      	ldr	r2, [pc, #404]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eca8:	430b      	orrs	r3, r1
 800ecaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ecac:	e003      	b.n	800ecb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ecb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ecb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ecc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800eccc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	d051      	beq.n	800ed7a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ecd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ecdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ece0:	d035      	beq.n	800ed4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ece2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ece6:	d82e      	bhi.n	800ed46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ece8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ecec:	d031      	beq.n	800ed52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ecee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ecf2:	d828      	bhi.n	800ed46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ecf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ecf8:	d01a      	beq.n	800ed30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ecfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ecfe:	d822      	bhi.n	800ed46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d003      	beq.n	800ed0c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ed04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed08:	d007      	beq.n	800ed1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ed0a:	e01c      	b.n	800ed46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed0c:	4b4b      	ldr	r3, [pc, #300]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed10:	4a4a      	ldr	r2, [pc, #296]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ed18:	e01c      	b.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed1e:	3308      	adds	r3, #8
 800ed20:	2100      	movs	r1, #0
 800ed22:	4618      	mov	r0, r3
 800ed24:	f002 f940 	bl	8010fa8 <RCCEx_PLL2_Config>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ed2e:	e011      	b.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ed30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed34:	3328      	adds	r3, #40	; 0x28
 800ed36:	2100      	movs	r1, #0
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f002 f9e7 	bl	801110c <RCCEx_PLL3_Config>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ed44:	e006      	b.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed46:	2301      	movs	r3, #1
 800ed48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ed4c:	e002      	b.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ed4e:	bf00      	nop
 800ed50:	e000      	b.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ed52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d10a      	bne.n	800ed72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ed5c:	4b37      	ldr	r3, [pc, #220]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed60:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ed64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed6a:	4a34      	ldr	r2, [pc, #208]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed6c:	430b      	orrs	r3, r1
 800ed6e:	6513      	str	r3, [r2, #80]	; 0x50
 800ed70:	e003      	b.n	800ed7a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ed7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed82:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ed86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ed90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ed94:	460b      	mov	r3, r1
 800ed96:	4313      	orrs	r3, r2
 800ed98:	d056      	beq.n	800ee48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ed9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eda0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eda4:	d033      	beq.n	800ee0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800eda6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800edaa:	d82c      	bhi.n	800ee06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800edac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800edb0:	d02f      	beq.n	800ee12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800edb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800edb6:	d826      	bhi.n	800ee06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800edb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800edbc:	d02b      	beq.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800edbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800edc2:	d820      	bhi.n	800ee06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800edc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800edc8:	d012      	beq.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800edca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800edce:	d81a      	bhi.n	800ee06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d022      	beq.n	800ee1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800edd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edd8:	d115      	bne.n	800ee06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800edda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edde:	3308      	adds	r3, #8
 800ede0:	2101      	movs	r1, #1
 800ede2:	4618      	mov	r0, r3
 800ede4:	f002 f8e0 	bl	8010fa8 <RCCEx_PLL2_Config>
 800ede8:	4603      	mov	r3, r0
 800edea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800edee:	e015      	b.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800edf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edf4:	3328      	adds	r3, #40	; 0x28
 800edf6:	2101      	movs	r1, #1
 800edf8:	4618      	mov	r0, r3
 800edfa:	f002 f987 	bl	801110c <RCCEx_PLL3_Config>
 800edfe:	4603      	mov	r3, r0
 800ee00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ee04:	e00a      	b.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee06:	2301      	movs	r3, #1
 800ee08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ee0c:	e006      	b.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ee0e:	bf00      	nop
 800ee10:	e004      	b.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ee12:	bf00      	nop
 800ee14:	e002      	b.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ee16:	bf00      	nop
 800ee18:	e000      	b.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ee1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10d      	bne.n	800ee40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ee24:	4b05      	ldr	r3, [pc, #20]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee28:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ee2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee32:	4a02      	ldr	r2, [pc, #8]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee34:	430b      	orrs	r3, r1
 800ee36:	6513      	str	r3, [r2, #80]	; 0x50
 800ee38:	e006      	b.n	800ee48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ee3a:	bf00      	nop
 800ee3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ee48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee50:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ee54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ee58:	2300      	movs	r3, #0
 800ee5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ee5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ee62:	460b      	mov	r3, r1
 800ee64:	4313      	orrs	r3, r2
 800ee66:	d055      	beq.n	800ef14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ee68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ee70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ee74:	d033      	beq.n	800eede <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ee76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ee7a:	d82c      	bhi.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ee7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee80:	d02f      	beq.n	800eee2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ee82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee86:	d826      	bhi.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ee88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ee8c:	d02b      	beq.n	800eee6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ee8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ee92:	d820      	bhi.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ee94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee98:	d012      	beq.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ee9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee9e:	d81a      	bhi.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d022      	beq.n	800eeea <HAL_RCCEx_PeriphCLKConfig+0x676>
 800eea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eea8:	d115      	bne.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eeaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeae:	3308      	adds	r3, #8
 800eeb0:	2101      	movs	r1, #1
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f002 f878 	bl	8010fa8 <RCCEx_PLL2_Config>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800eebe:	e015      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eec4:	3328      	adds	r3, #40	; 0x28
 800eec6:	2101      	movs	r1, #1
 800eec8:	4618      	mov	r0, r3
 800eeca:	f002 f91f 	bl	801110c <RCCEx_PLL3_Config>
 800eece:	4603      	mov	r3, r0
 800eed0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800eed4:	e00a      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800eed6:	2301      	movs	r3, #1
 800eed8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eedc:	e006      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800eede:	bf00      	nop
 800eee0:	e004      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800eee2:	bf00      	nop
 800eee4:	e002      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800eee6:	bf00      	nop
 800eee8:	e000      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800eeea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eeec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d10b      	bne.n	800ef0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800eef4:	4ba3      	ldr	r3, [pc, #652]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eef8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800eefc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ef04:	4a9f      	ldr	r2, [pc, #636]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef06:	430b      	orrs	r3, r1
 800ef08:	6593      	str	r3, [r2, #88]	; 0x58
 800ef0a:	e003      	b.n	800ef14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ef14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ef20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ef24:	2300      	movs	r3, #0
 800ef26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ef2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ef2e:	460b      	mov	r3, r1
 800ef30:	4313      	orrs	r3, r2
 800ef32:	d037      	beq.n	800efa4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ef34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef3e:	d00e      	beq.n	800ef5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800ef40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef44:	d816      	bhi.n	800ef74 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d018      	beq.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ef4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef4e:	d111      	bne.n	800ef74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef50:	4b8c      	ldr	r3, [pc, #560]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef54:	4a8b      	ldr	r2, [pc, #556]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ef5c:	e00f      	b.n	800ef7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef62:	3308      	adds	r3, #8
 800ef64:	2101      	movs	r1, #1
 800ef66:	4618      	mov	r0, r3
 800ef68:	f002 f81e 	bl	8010fa8 <RCCEx_PLL2_Config>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ef72:	e004      	b.n	800ef7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef74:	2301      	movs	r3, #1
 800ef76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef7a:	e000      	b.n	800ef7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ef7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d10a      	bne.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ef86:	4b7f      	ldr	r3, [pc, #508]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef8a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ef8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef94:	4a7b      	ldr	r2, [pc, #492]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef96:	430b      	orrs	r3, r1
 800ef98:	6513      	str	r3, [r2, #80]	; 0x50
 800ef9a:	e003      	b.n	800efa4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800efa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efac:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800efb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800efb4:	2300      	movs	r3, #0
 800efb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800efba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800efbe:	460b      	mov	r3, r1
 800efc0:	4313      	orrs	r3, r2
 800efc2:	d039      	beq.n	800f038 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800efc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efca:	2b03      	cmp	r3, #3
 800efcc:	d81c      	bhi.n	800f008 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800efce:	a201      	add	r2, pc, #4	; (adr r2, 800efd4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800efd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efd4:	0800f011 	.word	0x0800f011
 800efd8:	0800efe5 	.word	0x0800efe5
 800efdc:	0800eff3 	.word	0x0800eff3
 800efe0:	0800f011 	.word	0x0800f011
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800efe4:	4b67      	ldr	r3, [pc, #412]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800efe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efe8:	4a66      	ldr	r2, [pc, #408]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800efea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800efee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800eff0:	e00f      	b.n	800f012 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eff6:	3308      	adds	r3, #8
 800eff8:	2102      	movs	r1, #2
 800effa:	4618      	mov	r0, r3
 800effc:	f001 ffd4 	bl	8010fa8 <RCCEx_PLL2_Config>
 800f000:	4603      	mov	r3, r0
 800f002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f006:	e004      	b.n	800f012 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f008:	2301      	movs	r3, #1
 800f00a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f00e:	e000      	b.n	800f012 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f010:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f016:	2b00      	cmp	r3, #0
 800f018:	d10a      	bne.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f01a:	4b5a      	ldr	r3, [pc, #360]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f01e:	f023 0103 	bic.w	r1, r3, #3
 800f022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f028:	4a56      	ldr	r2, [pc, #344]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f02a:	430b      	orrs	r3, r1
 800f02c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f02e:	e003      	b.n	800f038 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f030:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f034:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f040:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f044:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f048:	2300      	movs	r3, #0
 800f04a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f04e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f052:	460b      	mov	r3, r1
 800f054:	4313      	orrs	r3, r2
 800f056:	f000 809f 	beq.w	800f198 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f05a:	4b4b      	ldr	r3, [pc, #300]	; (800f188 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	4a4a      	ldr	r2, [pc, #296]	; (800f188 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f066:	f7f6 fb51 	bl	800570c <HAL_GetTick>
 800f06a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f06e:	e00b      	b.n	800f088 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f070:	f7f6 fb4c 	bl	800570c <HAL_GetTick>
 800f074:	4602      	mov	r2, r0
 800f076:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f07a:	1ad3      	subs	r3, r2, r3
 800f07c:	2b64      	cmp	r3, #100	; 0x64
 800f07e:	d903      	bls.n	800f088 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f080:	2303      	movs	r3, #3
 800f082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f086:	e005      	b.n	800f094 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f088:	4b3f      	ldr	r3, [pc, #252]	; (800f188 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f090:	2b00      	cmp	r3, #0
 800f092:	d0ed      	beq.n	800f070 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f094:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d179      	bne.n	800f190 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f09c:	4b39      	ldr	r3, [pc, #228]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f09e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f0a8:	4053      	eors	r3, r2
 800f0aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d015      	beq.n	800f0de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f0b2:	4b34      	ldr	r3, [pc, #208]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f0be:	4b31      	ldr	r3, [pc, #196]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0c2:	4a30      	ldr	r2, [pc, #192]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f0c8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f0ca:	4b2e      	ldr	r3, [pc, #184]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0ce:	4a2d      	ldr	r2, [pc, #180]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f0d4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f0d6:	4a2b      	ldr	r2, [pc, #172]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f0dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f0e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0ea:	d118      	bne.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0ec:	f7f6 fb0e 	bl	800570c <HAL_GetTick>
 800f0f0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f0f4:	e00d      	b.n	800f112 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f0f6:	f7f6 fb09 	bl	800570c <HAL_GetTick>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f100:	1ad2      	subs	r2, r2, r3
 800f102:	f241 3388 	movw	r3, #5000	; 0x1388
 800f106:	429a      	cmp	r2, r3
 800f108:	d903      	bls.n	800f112 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f10a:	2303      	movs	r3, #3
 800f10c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f110:	e005      	b.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f112:	4b1c      	ldr	r3, [pc, #112]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f116:	f003 0302 	and.w	r3, r3, #2
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d0eb      	beq.n	800f0f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f11e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f122:	2b00      	cmp	r3, #0
 800f124:	d129      	bne.n	800f17a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f12a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f12e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f136:	d10e      	bne.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f138:	4b12      	ldr	r3, [pc, #72]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f13a:	691b      	ldr	r3, [r3, #16]
 800f13c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f144:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f148:	091a      	lsrs	r2, r3, #4
 800f14a:	4b10      	ldr	r3, [pc, #64]	; (800f18c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f14c:	4013      	ands	r3, r2
 800f14e:	4a0d      	ldr	r2, [pc, #52]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f150:	430b      	orrs	r3, r1
 800f152:	6113      	str	r3, [r2, #16]
 800f154:	e005      	b.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f156:	4b0b      	ldr	r3, [pc, #44]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f158:	691b      	ldr	r3, [r3, #16]
 800f15a:	4a0a      	ldr	r2, [pc, #40]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f15c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f160:	6113      	str	r3, [r2, #16]
 800f162:	4b08      	ldr	r3, [pc, #32]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f164:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f16a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f16e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f172:	4a04      	ldr	r2, [pc, #16]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f174:	430b      	orrs	r3, r1
 800f176:	6713      	str	r3, [r2, #112]	; 0x70
 800f178:	e00e      	b.n	800f198 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f17a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f17e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f182:	e009      	b.n	800f198 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f184:	58024400 	.word	0x58024400
 800f188:	58024800 	.word	0x58024800
 800f18c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a0:	f002 0301 	and.w	r3, r2, #1
 800f1a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f1ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	f000 8089 	beq.w	800f2cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1c0:	2b28      	cmp	r3, #40	; 0x28
 800f1c2:	d86b      	bhi.n	800f29c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f1c4:	a201      	add	r2, pc, #4	; (adr r2, 800f1cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ca:	bf00      	nop
 800f1cc:	0800f2a5 	.word	0x0800f2a5
 800f1d0:	0800f29d 	.word	0x0800f29d
 800f1d4:	0800f29d 	.word	0x0800f29d
 800f1d8:	0800f29d 	.word	0x0800f29d
 800f1dc:	0800f29d 	.word	0x0800f29d
 800f1e0:	0800f29d 	.word	0x0800f29d
 800f1e4:	0800f29d 	.word	0x0800f29d
 800f1e8:	0800f29d 	.word	0x0800f29d
 800f1ec:	0800f271 	.word	0x0800f271
 800f1f0:	0800f29d 	.word	0x0800f29d
 800f1f4:	0800f29d 	.word	0x0800f29d
 800f1f8:	0800f29d 	.word	0x0800f29d
 800f1fc:	0800f29d 	.word	0x0800f29d
 800f200:	0800f29d 	.word	0x0800f29d
 800f204:	0800f29d 	.word	0x0800f29d
 800f208:	0800f29d 	.word	0x0800f29d
 800f20c:	0800f287 	.word	0x0800f287
 800f210:	0800f29d 	.word	0x0800f29d
 800f214:	0800f29d 	.word	0x0800f29d
 800f218:	0800f29d 	.word	0x0800f29d
 800f21c:	0800f29d 	.word	0x0800f29d
 800f220:	0800f29d 	.word	0x0800f29d
 800f224:	0800f29d 	.word	0x0800f29d
 800f228:	0800f29d 	.word	0x0800f29d
 800f22c:	0800f2a5 	.word	0x0800f2a5
 800f230:	0800f29d 	.word	0x0800f29d
 800f234:	0800f29d 	.word	0x0800f29d
 800f238:	0800f29d 	.word	0x0800f29d
 800f23c:	0800f29d 	.word	0x0800f29d
 800f240:	0800f29d 	.word	0x0800f29d
 800f244:	0800f29d 	.word	0x0800f29d
 800f248:	0800f29d 	.word	0x0800f29d
 800f24c:	0800f2a5 	.word	0x0800f2a5
 800f250:	0800f29d 	.word	0x0800f29d
 800f254:	0800f29d 	.word	0x0800f29d
 800f258:	0800f29d 	.word	0x0800f29d
 800f25c:	0800f29d 	.word	0x0800f29d
 800f260:	0800f29d 	.word	0x0800f29d
 800f264:	0800f29d 	.word	0x0800f29d
 800f268:	0800f29d 	.word	0x0800f29d
 800f26c:	0800f2a5 	.word	0x0800f2a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f274:	3308      	adds	r3, #8
 800f276:	2101      	movs	r1, #1
 800f278:	4618      	mov	r0, r3
 800f27a:	f001 fe95 	bl	8010fa8 <RCCEx_PLL2_Config>
 800f27e:	4603      	mov	r3, r0
 800f280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f284:	e00f      	b.n	800f2a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f28a:	3328      	adds	r3, #40	; 0x28
 800f28c:	2101      	movs	r1, #1
 800f28e:	4618      	mov	r0, r3
 800f290:	f001 ff3c 	bl	801110c <RCCEx_PLL3_Config>
 800f294:	4603      	mov	r3, r0
 800f296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f29a:	e004      	b.n	800f2a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f2a2:	e000      	b.n	800f2a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f2a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f2a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d10a      	bne.n	800f2c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f2ae:	4bbf      	ldr	r3, [pc, #764]	; (800f5ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f2b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2b2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2bc:	4abb      	ldr	r2, [pc, #748]	; (800f5ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f2be:	430b      	orrs	r3, r1
 800f2c0:	6553      	str	r3, [r2, #84]	; 0x54
 800f2c2:	e003      	b.n	800f2cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d4:	f002 0302 	and.w	r3, r2, #2
 800f2d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f2dc:	2300      	movs	r3, #0
 800f2de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f2e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	d041      	beq.n	800f370 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2f2:	2b05      	cmp	r3, #5
 800f2f4:	d824      	bhi.n	800f340 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f2f6:	a201      	add	r2, pc, #4	; (adr r2, 800f2fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2fc:	0800f349 	.word	0x0800f349
 800f300:	0800f315 	.word	0x0800f315
 800f304:	0800f32b 	.word	0x0800f32b
 800f308:	0800f349 	.word	0x0800f349
 800f30c:	0800f349 	.word	0x0800f349
 800f310:	0800f349 	.word	0x0800f349
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f318:	3308      	adds	r3, #8
 800f31a:	2101      	movs	r1, #1
 800f31c:	4618      	mov	r0, r3
 800f31e:	f001 fe43 	bl	8010fa8 <RCCEx_PLL2_Config>
 800f322:	4603      	mov	r3, r0
 800f324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f328:	e00f      	b.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f32e:	3328      	adds	r3, #40	; 0x28
 800f330:	2101      	movs	r1, #1
 800f332:	4618      	mov	r0, r3
 800f334:	f001 feea 	bl	801110c <RCCEx_PLL3_Config>
 800f338:	4603      	mov	r3, r0
 800f33a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f33e:	e004      	b.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f340:	2301      	movs	r3, #1
 800f342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f346:	e000      	b.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f34a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d10a      	bne.n	800f368 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f352:	4b96      	ldr	r3, [pc, #600]	; (800f5ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f356:	f023 0107 	bic.w	r1, r3, #7
 800f35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f35e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f360:	4a92      	ldr	r2, [pc, #584]	; (800f5ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f362:	430b      	orrs	r3, r1
 800f364:	6553      	str	r3, [r2, #84]	; 0x54
 800f366:	e003      	b.n	800f370 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f36c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f378:	f002 0304 	and.w	r3, r2, #4
 800f37c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f380:	2300      	movs	r3, #0
 800f382:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f386:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f38a:	460b      	mov	r3, r1
 800f38c:	4313      	orrs	r3, r2
 800f38e:	d044      	beq.n	800f41a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f398:	2b05      	cmp	r3, #5
 800f39a:	d825      	bhi.n	800f3e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f39c:	a201      	add	r2, pc, #4	; (adr r2, 800f3a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a2:	bf00      	nop
 800f3a4:	0800f3f1 	.word	0x0800f3f1
 800f3a8:	0800f3bd 	.word	0x0800f3bd
 800f3ac:	0800f3d3 	.word	0x0800f3d3
 800f3b0:	0800f3f1 	.word	0x0800f3f1
 800f3b4:	0800f3f1 	.word	0x0800f3f1
 800f3b8:	0800f3f1 	.word	0x0800f3f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3c0:	3308      	adds	r3, #8
 800f3c2:	2101      	movs	r1, #1
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f001 fdef 	bl	8010fa8 <RCCEx_PLL2_Config>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f3d0:	e00f      	b.n	800f3f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3d6:	3328      	adds	r3, #40	; 0x28
 800f3d8:	2101      	movs	r1, #1
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f001 fe96 	bl	801110c <RCCEx_PLL3_Config>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f3e6:	e004      	b.n	800f3f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f3ee:	e000      	b.n	800f3f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f3f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d10b      	bne.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f3fa:	4b6c      	ldr	r3, [pc, #432]	; (800f5ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f3fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3fe:	f023 0107 	bic.w	r1, r3, #7
 800f402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f40a:	4a68      	ldr	r2, [pc, #416]	; (800f5ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f40c:	430b      	orrs	r3, r1
 800f40e:	6593      	str	r3, [r2, #88]	; 0x58
 800f410:	e003      	b.n	800f41a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f422:	f002 0320 	and.w	r3, r2, #32
 800f426:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f42a:	2300      	movs	r3, #0
 800f42c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f430:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f434:	460b      	mov	r3, r1
 800f436:	4313      	orrs	r3, r2
 800f438:	d055      	beq.n	800f4e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f446:	d033      	beq.n	800f4b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f44c:	d82c      	bhi.n	800f4a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f44e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f452:	d02f      	beq.n	800f4b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f458:	d826      	bhi.n	800f4a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f45a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f45e:	d02b      	beq.n	800f4b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f460:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f464:	d820      	bhi.n	800f4a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f46a:	d012      	beq.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f46c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f470:	d81a      	bhi.n	800f4a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f472:	2b00      	cmp	r3, #0
 800f474:	d022      	beq.n	800f4bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f47a:	d115      	bne.n	800f4a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f480:	3308      	adds	r3, #8
 800f482:	2100      	movs	r1, #0
 800f484:	4618      	mov	r0, r3
 800f486:	f001 fd8f 	bl	8010fa8 <RCCEx_PLL2_Config>
 800f48a:	4603      	mov	r3, r0
 800f48c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f490:	e015      	b.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f496:	3328      	adds	r3, #40	; 0x28
 800f498:	2102      	movs	r1, #2
 800f49a:	4618      	mov	r0, r3
 800f49c:	f001 fe36 	bl	801110c <RCCEx_PLL3_Config>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f4a6:	e00a      	b.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f4ae:	e006      	b.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f4b0:	bf00      	nop
 800f4b2:	e004      	b.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f4b4:	bf00      	nop
 800f4b6:	e002      	b.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f4b8:	bf00      	nop
 800f4ba:	e000      	b.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f4bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f4be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d10b      	bne.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f4c6:	4b39      	ldr	r3, [pc, #228]	; (800f5ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4ca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4d6:	4a35      	ldr	r2, [pc, #212]	; (800f5ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f4d8:	430b      	orrs	r3, r1
 800f4da:	6553      	str	r3, [r2, #84]	; 0x54
 800f4dc:	e003      	b.n	800f4e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f4e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800f4f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f4fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800f500:	460b      	mov	r3, r1
 800f502:	4313      	orrs	r3, r2
 800f504:	d058      	beq.n	800f5b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f50a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f50e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f512:	d033      	beq.n	800f57c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f514:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f518:	d82c      	bhi.n	800f574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f51a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f51e:	d02f      	beq.n	800f580 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f524:	d826      	bhi.n	800f574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f526:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f52a:	d02b      	beq.n	800f584 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f52c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f530:	d820      	bhi.n	800f574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f536:	d012      	beq.n	800f55e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f53c:	d81a      	bhi.n	800f574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d022      	beq.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f546:	d115      	bne.n	800f574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f54c:	3308      	adds	r3, #8
 800f54e:	2100      	movs	r1, #0
 800f550:	4618      	mov	r0, r3
 800f552:	f001 fd29 	bl	8010fa8 <RCCEx_PLL2_Config>
 800f556:	4603      	mov	r3, r0
 800f558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f55c:	e015      	b.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f562:	3328      	adds	r3, #40	; 0x28
 800f564:	2102      	movs	r1, #2
 800f566:	4618      	mov	r0, r3
 800f568:	f001 fdd0 	bl	801110c <RCCEx_PLL3_Config>
 800f56c:	4603      	mov	r3, r0
 800f56e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f572:	e00a      	b.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f574:	2301      	movs	r3, #1
 800f576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f57a:	e006      	b.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f57c:	bf00      	nop
 800f57e:	e004      	b.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f580:	bf00      	nop
 800f582:	e002      	b.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f584:	bf00      	nop
 800f586:	e000      	b.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f58a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d10e      	bne.n	800f5b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f592:	4b06      	ldr	r3, [pc, #24]	; (800f5ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f596:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800f59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f59e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f5a2:	4a02      	ldr	r2, [pc, #8]	; (800f5ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f5a4:	430b      	orrs	r3, r1
 800f5a6:	6593      	str	r3, [r2, #88]	; 0x58
 800f5a8:	e006      	b.n	800f5b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f5aa:	bf00      	nop
 800f5ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800f5c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f5ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	d055      	beq.n	800f684 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f5e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f5e4:	d033      	beq.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f5e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f5ea:	d82c      	bhi.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f5ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5f0:	d02f      	beq.n	800f652 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f5f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5f6:	d826      	bhi.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f5f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f5fc:	d02b      	beq.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f5fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f602:	d820      	bhi.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f608:	d012      	beq.n	800f630 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f60a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f60e:	d81a      	bhi.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f610:	2b00      	cmp	r3, #0
 800f612:	d022      	beq.n	800f65a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f618:	d115      	bne.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f61e:	3308      	adds	r3, #8
 800f620:	2100      	movs	r1, #0
 800f622:	4618      	mov	r0, r3
 800f624:	f001 fcc0 	bl	8010fa8 <RCCEx_PLL2_Config>
 800f628:	4603      	mov	r3, r0
 800f62a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f62e:	e015      	b.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f634:	3328      	adds	r3, #40	; 0x28
 800f636:	2102      	movs	r1, #2
 800f638:	4618      	mov	r0, r3
 800f63a:	f001 fd67 	bl	801110c <RCCEx_PLL3_Config>
 800f63e:	4603      	mov	r3, r0
 800f640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f644:	e00a      	b.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f646:	2301      	movs	r3, #1
 800f648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f64c:	e006      	b.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f64e:	bf00      	nop
 800f650:	e004      	b.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f652:	bf00      	nop
 800f654:	e002      	b.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f656:	bf00      	nop
 800f658:	e000      	b.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f65a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f65c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f660:	2b00      	cmp	r3, #0
 800f662:	d10b      	bne.n	800f67c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f664:	4ba1      	ldr	r3, [pc, #644]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f668:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800f66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f670:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f674:	4a9d      	ldr	r2, [pc, #628]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f676:	430b      	orrs	r3, r1
 800f678:	6593      	str	r3, [r2, #88]	; 0x58
 800f67a:	e003      	b.n	800f684 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f67c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f680:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68c:	f002 0308 	and.w	r3, r2, #8
 800f690:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f694:	2300      	movs	r3, #0
 800f696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f69a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800f69e:	460b      	mov	r3, r1
 800f6a0:	4313      	orrs	r3, r2
 800f6a2:	d01e      	beq.n	800f6e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f6a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6b0:	d10c      	bne.n	800f6cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6b6:	3328      	adds	r3, #40	; 0x28
 800f6b8:	2102      	movs	r1, #2
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f001 fd26 	bl	801110c <RCCEx_PLL3_Config>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d002      	beq.n	800f6cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f6cc:	4b87      	ldr	r3, [pc, #540]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f6ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f6d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6dc:	4a83      	ldr	r2, [pc, #524]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f6de:	430b      	orrs	r3, r1
 800f6e0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ea:	f002 0310 	and.w	r3, r2, #16
 800f6ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f6f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	4313      	orrs	r3, r2
 800f700:	d01e      	beq.n	800f740 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f70a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f70e:	d10c      	bne.n	800f72a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f714:	3328      	adds	r3, #40	; 0x28
 800f716:	2102      	movs	r1, #2
 800f718:	4618      	mov	r0, r3
 800f71a:	f001 fcf7 	bl	801110c <RCCEx_PLL3_Config>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d002      	beq.n	800f72a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f724:	2301      	movs	r3, #1
 800f726:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f72a:	4b70      	ldr	r3, [pc, #448]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f72e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f73a:	4a6c      	ldr	r2, [pc, #432]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f73c:	430b      	orrs	r3, r1
 800f73e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f748:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800f74c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f750:	2300      	movs	r3, #0
 800f752:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f756:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800f75a:	460b      	mov	r3, r1
 800f75c:	4313      	orrs	r3, r2
 800f75e:	d03e      	beq.n	800f7de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f764:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f76c:	d022      	beq.n	800f7b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f76e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f772:	d81b      	bhi.n	800f7ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f774:	2b00      	cmp	r3, #0
 800f776:	d003      	beq.n	800f780 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f77c:	d00b      	beq.n	800f796 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f77e:	e015      	b.n	800f7ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f784:	3308      	adds	r3, #8
 800f786:	2100      	movs	r1, #0
 800f788:	4618      	mov	r0, r3
 800f78a:	f001 fc0d 	bl	8010fa8 <RCCEx_PLL2_Config>
 800f78e:	4603      	mov	r3, r0
 800f790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f794:	e00f      	b.n	800f7b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f79a:	3328      	adds	r3, #40	; 0x28
 800f79c:	2102      	movs	r1, #2
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f001 fcb4 	bl	801110c <RCCEx_PLL3_Config>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f7aa:	e004      	b.n	800f7b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f7b2:	e000      	b.n	800f7b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f7b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d10b      	bne.n	800f7d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f7be:	4b4b      	ldr	r3, [pc, #300]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f7c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800f7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f7ce:	4a47      	ldr	r2, [pc, #284]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f7d0:	430b      	orrs	r3, r1
 800f7d2:	6593      	str	r3, [r2, #88]	; 0x58
 800f7d4:	e003      	b.n	800f7de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800f7ea:	67bb      	str	r3, [r7, #120]	; 0x78
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f7f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	d03b      	beq.n	800f872 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f7fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f802:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f806:	d01f      	beq.n	800f848 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f808:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f80c:	d818      	bhi.n	800f840 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f80e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f812:	d003      	beq.n	800f81c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f814:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f818:	d007      	beq.n	800f82a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f81a:	e011      	b.n	800f840 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f81c:	4b33      	ldr	r3, [pc, #204]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f820:	4a32      	ldr	r2, [pc, #200]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f828:	e00f      	b.n	800f84a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f82e:	3328      	adds	r3, #40	; 0x28
 800f830:	2101      	movs	r1, #1
 800f832:	4618      	mov	r0, r3
 800f834:	f001 fc6a 	bl	801110c <RCCEx_PLL3_Config>
 800f838:	4603      	mov	r3, r0
 800f83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f83e:	e004      	b.n	800f84a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f840:	2301      	movs	r3, #1
 800f842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f846:	e000      	b.n	800f84a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f84a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d10b      	bne.n	800f86a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f852:	4b26      	ldr	r3, [pc, #152]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f856:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800f85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f85e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f862:	4a22      	ldr	r2, [pc, #136]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f864:	430b      	orrs	r3, r1
 800f866:	6553      	str	r3, [r2, #84]	; 0x54
 800f868:	e003      	b.n	800f872 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f86a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f86e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800f87e:	673b      	str	r3, [r7, #112]	; 0x70
 800f880:	2300      	movs	r3, #0
 800f882:	677b      	str	r3, [r7, #116]	; 0x74
 800f884:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800f888:	460b      	mov	r3, r1
 800f88a:	4313      	orrs	r3, r2
 800f88c:	d034      	beq.n	800f8f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f894:	2b00      	cmp	r3, #0
 800f896:	d003      	beq.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f89c:	d007      	beq.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f89e:	e011      	b.n	800f8c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f8a0:	4b12      	ldr	r3, [pc, #72]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a4:	4a11      	ldr	r2, [pc, #68]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f8aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f8ac:	e00e      	b.n	800f8cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8b2:	3308      	adds	r3, #8
 800f8b4:	2102      	movs	r1, #2
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f001 fb76 	bl	8010fa8 <RCCEx_PLL2_Config>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f8c2:	e003      	b.n	800f8cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f8ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d10d      	bne.n	800f8f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f8d4:	4b05      	ldr	r3, [pc, #20]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f8dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8e2:	4a02      	ldr	r2, [pc, #8]	; (800f8ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8e4:	430b      	orrs	r3, r1
 800f8e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f8e8:	e006      	b.n	800f8f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f8ea:	bf00      	nop
 800f8ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f900:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800f904:	66bb      	str	r3, [r7, #104]	; 0x68
 800f906:	2300      	movs	r3, #0
 800f908:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f90a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800f90e:	460b      	mov	r3, r1
 800f910:	4313      	orrs	r3, r2
 800f912:	d00c      	beq.n	800f92e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f918:	3328      	adds	r3, #40	; 0x28
 800f91a:	2102      	movs	r1, #2
 800f91c:	4618      	mov	r0, r3
 800f91e:	f001 fbf5 	bl	801110c <RCCEx_PLL3_Config>
 800f922:	4603      	mov	r3, r0
 800f924:	2b00      	cmp	r3, #0
 800f926:	d002      	beq.n	800f92e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f928:	2301      	movs	r3, #1
 800f92a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f936:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800f93a:	663b      	str	r3, [r7, #96]	; 0x60
 800f93c:	2300      	movs	r3, #0
 800f93e:	667b      	str	r3, [r7, #100]	; 0x64
 800f940:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800f944:	460b      	mov	r3, r1
 800f946:	4313      	orrs	r3, r2
 800f948:	d038      	beq.n	800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f94e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f956:	d018      	beq.n	800f98a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f95c:	d811      	bhi.n	800f982 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f95e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f962:	d014      	beq.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f968:	d80b      	bhi.n	800f982 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d011      	beq.n	800f992 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f96e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f972:	d106      	bne.n	800f982 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f974:	4bc3      	ldr	r3, [pc, #780]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f978:	4ac2      	ldr	r2, [pc, #776]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f97a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f97e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f980:	e008      	b.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f982:	2301      	movs	r3, #1
 800f984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f988:	e004      	b.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f98a:	bf00      	nop
 800f98c:	e002      	b.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f98e:	bf00      	nop
 800f990:	e000      	b.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f992:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d10b      	bne.n	800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f99c:	4bb9      	ldr	r3, [pc, #740]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f9a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9ac:	4ab5      	ldr	r2, [pc, #724]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f9ae:	430b      	orrs	r3, r1
 800f9b0:	6553      	str	r3, [r2, #84]	; 0x54
 800f9b2:	e003      	b.n	800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f9b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800f9c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f9ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	d009      	beq.n	800f9ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f9d8:	4baa      	ldr	r3, [pc, #680]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f9da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9e6:	4aa7      	ldr	r2, [pc, #668]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f9e8:	430b      	orrs	r3, r1
 800f9ea:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f9ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800f9f8:	653b      	str	r3, [r7, #80]	; 0x50
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	657b      	str	r3, [r7, #84]	; 0x54
 800f9fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800fa02:	460b      	mov	r3, r1
 800fa04:	4313      	orrs	r3, r2
 800fa06:	d00a      	beq.n	800fa1e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fa08:	4b9e      	ldr	r3, [pc, #632]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa0a:	691b      	ldr	r3, [r3, #16]
 800fa0c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800fa10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fa18:	4a9a      	ldr	r2, [pc, #616]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa1a:	430b      	orrs	r3, r1
 800fa1c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fa1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa26:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800fa2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800fa34:	460b      	mov	r3, r1
 800fa36:	4313      	orrs	r3, r2
 800fa38:	d009      	beq.n	800fa4e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fa3a:	4b92      	ldr	r3, [pc, #584]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa3e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800fa42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa48:	4a8e      	ldr	r2, [pc, #568]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa4a:	430b      	orrs	r3, r1
 800fa4c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fa4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa56:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800fa5a:	643b      	str	r3, [r7, #64]	; 0x40
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	647b      	str	r3, [r7, #68]	; 0x44
 800fa60:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fa64:	460b      	mov	r3, r1
 800fa66:	4313      	orrs	r3, r2
 800fa68:	d00e      	beq.n	800fa88 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fa6a:	4b86      	ldr	r3, [pc, #536]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa6c:	691b      	ldr	r3, [r3, #16]
 800fa6e:	4a85      	ldr	r2, [pc, #532]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fa74:	6113      	str	r3, [r2, #16]
 800fa76:	4b83      	ldr	r3, [pc, #524]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa78:	6919      	ldr	r1, [r3, #16]
 800fa7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fa82:	4a80      	ldr	r2, [pc, #512]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa84:	430b      	orrs	r3, r1
 800fa86:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fa88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa90:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800fa94:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa96:	2300      	movs	r3, #0
 800fa98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa9a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fa9e:	460b      	mov	r3, r1
 800faa0:	4313      	orrs	r3, r2
 800faa2:	d009      	beq.n	800fab8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800faa4:	4b77      	ldr	r3, [pc, #476]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800faa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800faa8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800faac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fab2:	4a74      	ldr	r2, [pc, #464]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fab4:	430b      	orrs	r3, r1
 800fab6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800fac4:	633b      	str	r3, [r7, #48]	; 0x30
 800fac6:	2300      	movs	r3, #0
 800fac8:	637b      	str	r3, [r7, #52]	; 0x34
 800faca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800face:	460b      	mov	r3, r1
 800fad0:	4313      	orrs	r3, r2
 800fad2:	d00a      	beq.n	800faea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fad4:	4b6b      	ldr	r3, [pc, #428]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fad8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800fadc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fae4:	4a67      	ldr	r2, [pc, #412]	; (800fc84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fae6:	430b      	orrs	r3, r1
 800fae8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800faea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf2:	2100      	movs	r1, #0
 800faf4:	62b9      	str	r1, [r7, #40]	; 0x28
 800faf6:	f003 0301 	and.w	r3, r3, #1
 800fafa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fafc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800fb00:	460b      	mov	r3, r1
 800fb02:	4313      	orrs	r3, r2
 800fb04:	d011      	beq.n	800fb2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fb06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb0a:	3308      	adds	r3, #8
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f001 fa4a 	bl	8010fa8 <RCCEx_PLL2_Config>
 800fb14:	4603      	mov	r3, r0
 800fb16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fb1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d003      	beq.n	800fb2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fb2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb32:	2100      	movs	r1, #0
 800fb34:	6239      	str	r1, [r7, #32]
 800fb36:	f003 0302 	and.w	r3, r3, #2
 800fb3a:	627b      	str	r3, [r7, #36]	; 0x24
 800fb3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fb40:	460b      	mov	r3, r1
 800fb42:	4313      	orrs	r3, r2
 800fb44:	d011      	beq.n	800fb6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fb46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb4a:	3308      	adds	r3, #8
 800fb4c:	2101      	movs	r1, #1
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f001 fa2a 	bl	8010fa8 <RCCEx_PLL2_Config>
 800fb54:	4603      	mov	r3, r0
 800fb56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fb5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d003      	beq.n	800fb6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fb6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb72:	2100      	movs	r1, #0
 800fb74:	61b9      	str	r1, [r7, #24]
 800fb76:	f003 0304 	and.w	r3, r3, #4
 800fb7a:	61fb      	str	r3, [r7, #28]
 800fb7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fb80:	460b      	mov	r3, r1
 800fb82:	4313      	orrs	r3, r2
 800fb84:	d011      	beq.n	800fbaa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fb86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb8a:	3308      	adds	r3, #8
 800fb8c:	2102      	movs	r1, #2
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f001 fa0a 	bl	8010fa8 <RCCEx_PLL2_Config>
 800fb94:	4603      	mov	r3, r0
 800fb96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fb9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d003      	beq.n	800fbaa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fba6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb2:	2100      	movs	r1, #0
 800fbb4:	6139      	str	r1, [r7, #16]
 800fbb6:	f003 0308 	and.w	r3, r3, #8
 800fbba:	617b      	str	r3, [r7, #20]
 800fbbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	d011      	beq.n	800fbea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fbc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbca:	3328      	adds	r3, #40	; 0x28
 800fbcc:	2100      	movs	r1, #0
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f001 fa9c 	bl	801110c <RCCEx_PLL3_Config>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800fbda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d003      	beq.n	800fbea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf2:	2100      	movs	r1, #0
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	f003 0310 	and.w	r3, r3, #16
 800fbfa:	60fb      	str	r3, [r7, #12]
 800fbfc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fc00:	460b      	mov	r3, r1
 800fc02:	4313      	orrs	r3, r2
 800fc04:	d011      	beq.n	800fc2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fc06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc0a:	3328      	adds	r3, #40	; 0x28
 800fc0c:	2101      	movs	r1, #1
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f001 fa7c 	bl	801110c <RCCEx_PLL3_Config>
 800fc14:	4603      	mov	r3, r0
 800fc16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fc1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d003      	beq.n	800fc2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800fc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc32:	2100      	movs	r1, #0
 800fc34:	6039      	str	r1, [r7, #0]
 800fc36:	f003 0320 	and.w	r3, r3, #32
 800fc3a:	607b      	str	r3, [r7, #4]
 800fc3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fc40:	460b      	mov	r3, r1
 800fc42:	4313      	orrs	r3, r2
 800fc44:	d011      	beq.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fc46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc4a:	3328      	adds	r3, #40	; 0x28
 800fc4c:	2102      	movs	r1, #2
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f001 fa5c 	bl	801110c <RCCEx_PLL3_Config>
 800fc54:	4603      	mov	r3, r0
 800fc56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fc5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d003      	beq.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800fc6a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d101      	bne.n	800fc76 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800fc72:	2300      	movs	r3, #0
 800fc74:	e000      	b.n	800fc78 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800fc76:	2301      	movs	r3, #1
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fc84:	58024400 	.word	0x58024400

0800fc88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b090      	sub	sp, #64	; 0x40
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800fc92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc96:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800fc9a:	430b      	orrs	r3, r1
 800fc9c:	f040 8094 	bne.w	800fdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800fca0:	4b9e      	ldr	r3, [pc, #632]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fca4:	f003 0307 	and.w	r3, r3, #7
 800fca8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcac:	2b04      	cmp	r3, #4
 800fcae:	f200 8087 	bhi.w	800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800fcb2:	a201      	add	r2, pc, #4	; (adr r2, 800fcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800fcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb8:	0800fccd 	.word	0x0800fccd
 800fcbc:	0800fcf5 	.word	0x0800fcf5
 800fcc0:	0800fd1d 	.word	0x0800fd1d
 800fcc4:	0800fdb9 	.word	0x0800fdb9
 800fcc8:	0800fd45 	.word	0x0800fd45
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fccc:	4b93      	ldr	r3, [pc, #588]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fcd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fcd8:	d108      	bne.n	800fcec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fcda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcde:	4618      	mov	r0, r3
 800fce0:	f001 f810 	bl	8010d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fce8:	f000 bd45 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fcec:	2300      	movs	r3, #0
 800fcee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcf0:	f000 bd41 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fcf4:	4b89      	ldr	r3, [pc, #548]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fcfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fd00:	d108      	bne.n	800fd14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd02:	f107 0318 	add.w	r3, r7, #24
 800fd06:	4618      	mov	r0, r3
 800fd08:	f000 fd54 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fd0c:	69bb      	ldr	r3, [r7, #24]
 800fd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd10:	f000 bd31 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd14:	2300      	movs	r3, #0
 800fd16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd18:	f000 bd2d 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fd1c:	4b7f      	ldr	r3, [pc, #508]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fd24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd28:	d108      	bne.n	800fd3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd2a:	f107 030c 	add.w	r3, r7, #12
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f000 fe94 	bl	8010a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd38:	f000 bd1d 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd40:	f000 bd19 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fd44:	4b75      	ldr	r3, [pc, #468]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fd4c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fd4e:	4b73      	ldr	r3, [pc, #460]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f003 0304 	and.w	r3, r3, #4
 800fd56:	2b04      	cmp	r3, #4
 800fd58:	d10c      	bne.n	800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800fd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d109      	bne.n	800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd60:	4b6e      	ldr	r3, [pc, #440]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	08db      	lsrs	r3, r3, #3
 800fd66:	f003 0303 	and.w	r3, r3, #3
 800fd6a:	4a6d      	ldr	r2, [pc, #436]	; (800ff20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fd6c:	fa22 f303 	lsr.w	r3, r2, r3
 800fd70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd72:	e01f      	b.n	800fdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fd74:	4b69      	ldr	r3, [pc, #420]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd80:	d106      	bne.n	800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800fd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd88:	d102      	bne.n	800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fd8a:	4b66      	ldr	r3, [pc, #408]	; (800ff24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800fd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd8e:	e011      	b.n	800fdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fd90:	4b62      	ldr	r3, [pc, #392]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd9c:	d106      	bne.n	800fdac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800fd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fda0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fda4:	d102      	bne.n	800fdac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fda6:	4b60      	ldr	r3, [pc, #384]	; (800ff28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fda8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdaa:	e003      	b.n	800fdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fdac:	2300      	movs	r3, #0
 800fdae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800fdb0:	f000 bce1 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fdb4:	f000 bcdf 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fdb8:	4b5c      	ldr	r3, [pc, #368]	; (800ff2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800fdba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdbc:	f000 bcdb 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdc4:	f000 bcd7 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800fdc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdcc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800fdd0:	430b      	orrs	r3, r1
 800fdd2:	f040 80ad 	bne.w	800ff30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800fdd6:	4b51      	ldr	r3, [pc, #324]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdda:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800fdde:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800fde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fde6:	d056      	beq.n	800fe96 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800fde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdee:	f200 8090 	bhi.w	800ff12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf4:	2bc0      	cmp	r3, #192	; 0xc0
 800fdf6:	f000 8088 	beq.w	800ff0a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800fdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfc:	2bc0      	cmp	r3, #192	; 0xc0
 800fdfe:	f200 8088 	bhi.w	800ff12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fe02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe04:	2b80      	cmp	r3, #128	; 0x80
 800fe06:	d032      	beq.n	800fe6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800fe08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0a:	2b80      	cmp	r3, #128	; 0x80
 800fe0c:	f200 8081 	bhi.w	800ff12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fe10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d003      	beq.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800fe16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe18:	2b40      	cmp	r3, #64	; 0x40
 800fe1a:	d014      	beq.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800fe1c:	e079      	b.n	800ff12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fe1e:	4b3f      	ldr	r3, [pc, #252]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fe26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fe2a:	d108      	bne.n	800fe3e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fe2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe30:	4618      	mov	r0, r3
 800fe32:	f000 ff67 	bl	8010d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fe36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe3a:	f000 bc9c 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe42:	f000 bc98 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fe46:	4b35      	ldr	r3, [pc, #212]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fe52:	d108      	bne.n	800fe66 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe54:	f107 0318 	add.w	r3, r7, #24
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f000 fcab 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe62:	f000 bc88 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe66:	2300      	movs	r3, #0
 800fe68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe6a:	f000 bc84 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fe6e:	4b2b      	ldr	r3, [pc, #172]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fe76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fe7a:	d108      	bne.n	800fe8e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe7c:	f107 030c 	add.w	r3, r7, #12
 800fe80:	4618      	mov	r0, r3
 800fe82:	f000 fdeb 	bl	8010a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe8a:	f000 bc74 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe92:	f000 bc70 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fe96:	4b21      	ldr	r3, [pc, #132]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fe9e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fea0:	4b1e      	ldr	r3, [pc, #120]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f003 0304 	and.w	r3, r3, #4
 800fea8:	2b04      	cmp	r3, #4
 800feaa:	d10c      	bne.n	800fec6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800feac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d109      	bne.n	800fec6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800feb2:	4b1a      	ldr	r3, [pc, #104]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	08db      	lsrs	r3, r3, #3
 800feb8:	f003 0303 	and.w	r3, r3, #3
 800febc:	4a18      	ldr	r2, [pc, #96]	; (800ff20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800febe:	fa22 f303 	lsr.w	r3, r2, r3
 800fec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fec4:	e01f      	b.n	800ff06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fec6:	4b15      	ldr	r3, [pc, #84]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fed2:	d106      	bne.n	800fee2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800fed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800feda:	d102      	bne.n	800fee2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fedc:	4b11      	ldr	r3, [pc, #68]	; (800ff24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800fede:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fee0:	e011      	b.n	800ff06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fee2:	4b0e      	ldr	r3, [pc, #56]	; (800ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800feea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800feee:	d106      	bne.n	800fefe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800fef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fef6:	d102      	bne.n	800fefe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fef8:	4b0b      	ldr	r3, [pc, #44]	; (800ff28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fefa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fefc:	e003      	b.n	800ff06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fefe:	2300      	movs	r3, #0
 800ff00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ff02:	f000 bc38 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ff06:	f000 bc36 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ff0a:	4b08      	ldr	r3, [pc, #32]	; (800ff2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ff0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff0e:	f000 bc32 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ff12:	2300      	movs	r3, #0
 800ff14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff16:	f000 bc2e 	b.w	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ff1a:	bf00      	nop
 800ff1c:	58024400 	.word	0x58024400
 800ff20:	03d09000 	.word	0x03d09000
 800ff24:	003d0900 	.word	0x003d0900
 800ff28:	017d7840 	.word	0x017d7840
 800ff2c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ff30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff34:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ff38:	430b      	orrs	r3, r1
 800ff3a:	f040 809c 	bne.w	8010076 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ff3e:	4b9e      	ldr	r3, [pc, #632]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ff40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff42:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ff46:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ff48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ff4e:	d054      	beq.n	800fffa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ff50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ff56:	f200 808b 	bhi.w	8010070 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ff5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ff60:	f000 8083 	beq.w	801006a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ff64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ff6a:	f200 8081 	bhi.w	8010070 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ff6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff74:	d02f      	beq.n	800ffd6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ff76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff7c:	d878      	bhi.n	8010070 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ff7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d004      	beq.n	800ff8e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ff84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff8a:	d012      	beq.n	800ffb2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ff8c:	e070      	b.n	8010070 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ff8e:	4b8a      	ldr	r3, [pc, #552]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ff9a:	d107      	bne.n	800ffac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ff9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f000 feaf 	bl	8010d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ffa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffaa:	e3e4      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ffac:	2300      	movs	r3, #0
 800ffae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffb0:	e3e1      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ffb2:	4b81      	ldr	r3, [pc, #516]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ffba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ffbe:	d107      	bne.n	800ffd0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ffc0:	f107 0318 	add.w	r3, r7, #24
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f000 fbf5 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ffca:	69bb      	ldr	r3, [r7, #24]
 800ffcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffce:	e3d2      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffd4:	e3cf      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ffd6:	4b78      	ldr	r3, [pc, #480]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ffde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ffe2:	d107      	bne.n	800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ffe4:	f107 030c 	add.w	r3, r7, #12
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f000 fd37 	bl	8010a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fff2:	e3c0      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fff4:	2300      	movs	r3, #0
 800fff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fff8:	e3bd      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fffa:	4b6f      	ldr	r3, [pc, #444]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fffe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010002:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010004:	4b6c      	ldr	r3, [pc, #432]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f003 0304 	and.w	r3, r3, #4
 801000c:	2b04      	cmp	r3, #4
 801000e:	d10c      	bne.n	801002a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8010010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010012:	2b00      	cmp	r3, #0
 8010014:	d109      	bne.n	801002a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010016:	4b68      	ldr	r3, [pc, #416]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	08db      	lsrs	r3, r3, #3
 801001c:	f003 0303 	and.w	r3, r3, #3
 8010020:	4a66      	ldr	r2, [pc, #408]	; (80101bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010022:	fa22 f303 	lsr.w	r3, r2, r3
 8010026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010028:	e01e      	b.n	8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801002a:	4b63      	ldr	r3, [pc, #396]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010036:	d106      	bne.n	8010046 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8010038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801003a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801003e:	d102      	bne.n	8010046 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010040:	4b5f      	ldr	r3, [pc, #380]	; (80101c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010044:	e010      	b.n	8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010046:	4b5c      	ldr	r3, [pc, #368]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801004e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010052:	d106      	bne.n	8010062 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801005a:	d102      	bne.n	8010062 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801005c:	4b59      	ldr	r3, [pc, #356]	; (80101c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801005e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010060:	e002      	b.n	8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010062:	2300      	movs	r3, #0
 8010064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010066:	e386      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010068:	e385      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801006a:	4b57      	ldr	r3, [pc, #348]	; (80101c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801006c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801006e:	e382      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010070:	2300      	movs	r3, #0
 8010072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010074:	e37f      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010076:	e9d7 2300 	ldrd	r2, r3, [r7]
 801007a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801007e:	430b      	orrs	r3, r1
 8010080:	f040 80a7 	bne.w	80101d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010084:	4b4c      	ldr	r3, [pc, #304]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010088:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801008c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801008e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010090:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010094:	d055      	beq.n	8010142 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801009c:	f200 8096 	bhi.w	80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80100a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80100a6:	f000 8084 	beq.w	80101b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80100aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80100b0:	f200 808c 	bhi.w	80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80100b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80100ba:	d030      	beq.n	801011e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80100bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80100c2:	f200 8083 	bhi.w	80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80100c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d004      	beq.n	80100d6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80100cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80100d2:	d012      	beq.n	80100fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80100d4:	e07a      	b.n	80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80100d6:	4b38      	ldr	r3, [pc, #224]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80100de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80100e2:	d107      	bne.n	80100f4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80100e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80100e8:	4618      	mov	r0, r3
 80100ea:	f000 fe0b 	bl	8010d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80100ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100f2:	e340      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100f4:	2300      	movs	r3, #0
 80100f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100f8:	e33d      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80100fa:	4b2f      	ldr	r3, [pc, #188]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010106:	d107      	bne.n	8010118 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010108:	f107 0318 	add.w	r3, r7, #24
 801010c:	4618      	mov	r0, r3
 801010e:	f000 fb51 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010116:	e32e      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010118:	2300      	movs	r3, #0
 801011a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801011c:	e32b      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801011e:	4b26      	ldr	r3, [pc, #152]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801012a:	d107      	bne.n	801013c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801012c:	f107 030c 	add.w	r3, r7, #12
 8010130:	4618      	mov	r0, r3
 8010132:	f000 fc93 	bl	8010a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801013a:	e31c      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801013c:	2300      	movs	r3, #0
 801013e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010140:	e319      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010142:	4b1d      	ldr	r3, [pc, #116]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010146:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801014a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801014c:	4b1a      	ldr	r3, [pc, #104]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f003 0304 	and.w	r3, r3, #4
 8010154:	2b04      	cmp	r3, #4
 8010156:	d10c      	bne.n	8010172 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801015a:	2b00      	cmp	r3, #0
 801015c:	d109      	bne.n	8010172 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801015e:	4b16      	ldr	r3, [pc, #88]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	08db      	lsrs	r3, r3, #3
 8010164:	f003 0303 	and.w	r3, r3, #3
 8010168:	4a14      	ldr	r2, [pc, #80]	; (80101bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801016a:	fa22 f303 	lsr.w	r3, r2, r3
 801016e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010170:	e01e      	b.n	80101b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010172:	4b11      	ldr	r3, [pc, #68]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801017a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801017e:	d106      	bne.n	801018e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010186:	d102      	bne.n	801018e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010188:	4b0d      	ldr	r3, [pc, #52]	; (80101c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801018a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801018c:	e010      	b.n	80101b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801018e:	4b0a      	ldr	r3, [pc, #40]	; (80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801019a:	d106      	bne.n	80101aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 801019c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801019e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80101a2:	d102      	bne.n	80101aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80101a4:	4b07      	ldr	r3, [pc, #28]	; (80101c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80101a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101a8:	e002      	b.n	80101b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80101aa:	2300      	movs	r3, #0
 80101ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80101ae:	e2e2      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80101b0:	e2e1      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80101b2:	4b05      	ldr	r3, [pc, #20]	; (80101c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80101b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101b6:	e2de      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80101b8:	58024400 	.word	0x58024400
 80101bc:	03d09000 	.word	0x03d09000
 80101c0:	003d0900 	.word	0x003d0900
 80101c4:	017d7840 	.word	0x017d7840
 80101c8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80101cc:	2300      	movs	r3, #0
 80101ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101d0:	e2d1      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80101d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101d6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80101da:	430b      	orrs	r3, r1
 80101dc:	f040 809c 	bne.w	8010318 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80101e0:	4b93      	ldr	r3, [pc, #588]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80101e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101e4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80101e8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80101ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80101f0:	d054      	beq.n	801029c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80101f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80101f8:	f200 808b 	bhi.w	8010312 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80101fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010202:	f000 8083 	beq.w	801030c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8010206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010208:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801020c:	f200 8081 	bhi.w	8010312 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010216:	d02f      	beq.n	8010278 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8010218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801021e:	d878      	bhi.n	8010312 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010222:	2b00      	cmp	r3, #0
 8010224:	d004      	beq.n	8010230 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8010226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801022c:	d012      	beq.n	8010254 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 801022e:	e070      	b.n	8010312 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010230:	4b7f      	ldr	r3, [pc, #508]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010238:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801023c:	d107      	bne.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801023e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010242:	4618      	mov	r0, r3
 8010244:	f000 fd5e 	bl	8010d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801024a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801024c:	e293      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801024e:	2300      	movs	r3, #0
 8010250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010252:	e290      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010254:	4b76      	ldr	r3, [pc, #472]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801025c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010260:	d107      	bne.n	8010272 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010262:	f107 0318 	add.w	r3, r7, #24
 8010266:	4618      	mov	r0, r3
 8010268:	f000 faa4 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010270:	e281      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010272:	2300      	movs	r3, #0
 8010274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010276:	e27e      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010278:	4b6d      	ldr	r3, [pc, #436]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010284:	d107      	bne.n	8010296 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010286:	f107 030c 	add.w	r3, r7, #12
 801028a:	4618      	mov	r0, r3
 801028c:	f000 fbe6 	bl	8010a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010294:	e26f      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010296:	2300      	movs	r3, #0
 8010298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801029a:	e26c      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801029c:	4b64      	ldr	r3, [pc, #400]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801029e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80102a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80102a6:	4b62      	ldr	r3, [pc, #392]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	f003 0304 	and.w	r3, r3, #4
 80102ae:	2b04      	cmp	r3, #4
 80102b0:	d10c      	bne.n	80102cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80102b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d109      	bne.n	80102cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80102b8:	4b5d      	ldr	r3, [pc, #372]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	08db      	lsrs	r3, r3, #3
 80102be:	f003 0303 	and.w	r3, r3, #3
 80102c2:	4a5c      	ldr	r2, [pc, #368]	; (8010434 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80102c4:	fa22 f303 	lsr.w	r3, r2, r3
 80102c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102ca:	e01e      	b.n	801030a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80102cc:	4b58      	ldr	r3, [pc, #352]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102d8:	d106      	bne.n	80102e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80102da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80102e0:	d102      	bne.n	80102e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80102e2:	4b55      	ldr	r3, [pc, #340]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80102e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102e6:	e010      	b.n	801030a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80102e8:	4b51      	ldr	r3, [pc, #324]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80102f4:	d106      	bne.n	8010304 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80102f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102fc:	d102      	bne.n	8010304 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80102fe:	4b4f      	ldr	r3, [pc, #316]	; (801043c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010302:	e002      	b.n	801030a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010304:	2300      	movs	r3, #0
 8010306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010308:	e235      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801030a:	e234      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801030c:	4b4c      	ldr	r3, [pc, #304]	; (8010440 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 801030e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010310:	e231      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010312:	2300      	movs	r3, #0
 8010314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010316:	e22e      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010318:	e9d7 2300 	ldrd	r2, r3, [r7]
 801031c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010320:	430b      	orrs	r3, r1
 8010322:	f040 808f 	bne.w	8010444 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8010326:	4b42      	ldr	r3, [pc, #264]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801032a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 801032e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010332:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010336:	d06b      	beq.n	8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8010338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801033e:	d874      	bhi.n	801042a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010342:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010346:	d056      	beq.n	80103f6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8010348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801034e:	d86c      	bhi.n	801042a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010352:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010356:	d03b      	beq.n	80103d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801035e:	d864      	bhi.n	801042a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010362:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010366:	d021      	beq.n	80103ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801036a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801036e:	d85c      	bhi.n	801042a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010372:	2b00      	cmp	r3, #0
 8010374:	d004      	beq.n	8010380 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8010376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801037c:	d004      	beq.n	8010388 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801037e:	e054      	b.n	801042a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010380:	f7fe fa0a 	bl	800e798 <HAL_RCC_GetPCLK1Freq>
 8010384:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010386:	e1f6      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010388:	4b29      	ldr	r3, [pc, #164]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010394:	d107      	bne.n	80103a6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010396:	f107 0318 	add.w	r3, r7, #24
 801039a:	4618      	mov	r0, r3
 801039c:	f000 fa0a 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80103a0:	69fb      	ldr	r3, [r7, #28]
 80103a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103a4:	e1e7      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103a6:	2300      	movs	r3, #0
 80103a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103aa:	e1e4      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80103ac:	4b20      	ldr	r3, [pc, #128]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80103b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103b8:	d107      	bne.n	80103ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103ba:	f107 030c 	add.w	r3, r7, #12
 80103be:	4618      	mov	r0, r3
 80103c0:	f000 fb4c 	bl	8010a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103c8:	e1d5      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103ce:	e1d2      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80103d0:	4b17      	ldr	r3, [pc, #92]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	f003 0304 	and.w	r3, r3, #4
 80103d8:	2b04      	cmp	r3, #4
 80103da:	d109      	bne.n	80103f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103dc:	4b14      	ldr	r3, [pc, #80]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	08db      	lsrs	r3, r3, #3
 80103e2:	f003 0303 	and.w	r3, r3, #3
 80103e6:	4a13      	ldr	r2, [pc, #76]	; (8010434 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80103e8:	fa22 f303 	lsr.w	r3, r2, r3
 80103ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103ee:	e1c2      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103f0:	2300      	movs	r3, #0
 80103f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103f4:	e1bf      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80103f6:	4b0e      	ldr	r3, [pc, #56]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010402:	d102      	bne.n	801040a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8010404:	4b0c      	ldr	r3, [pc, #48]	; (8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010408:	e1b5      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801040a:	2300      	movs	r3, #0
 801040c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801040e:	e1b2      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010410:	4b07      	ldr	r3, [pc, #28]	; (8010430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801041c:	d102      	bne.n	8010424 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 801041e:	4b07      	ldr	r3, [pc, #28]	; (801043c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010420:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010422:	e1a8      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010424:	2300      	movs	r3, #0
 8010426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010428:	e1a5      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801042a:	2300      	movs	r3, #0
 801042c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801042e:	e1a2      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010430:	58024400 	.word	0x58024400
 8010434:	03d09000 	.word	0x03d09000
 8010438:	003d0900 	.word	0x003d0900
 801043c:	017d7840 	.word	0x017d7840
 8010440:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010448:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 801044c:	430b      	orrs	r3, r1
 801044e:	d173      	bne.n	8010538 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010450:	4b9c      	ldr	r3, [pc, #624]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010458:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801045a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010460:	d02f      	beq.n	80104c2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010468:	d863      	bhi.n	8010532 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801046a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046c:	2b00      	cmp	r3, #0
 801046e:	d004      	beq.n	801047a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010476:	d012      	beq.n	801049e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010478:	e05b      	b.n	8010532 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801047a:	4b92      	ldr	r3, [pc, #584]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010486:	d107      	bne.n	8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010488:	f107 0318 	add.w	r3, r7, #24
 801048c:	4618      	mov	r0, r3
 801048e:	f000 f991 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010492:	69bb      	ldr	r3, [r7, #24]
 8010494:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010496:	e16e      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010498:	2300      	movs	r3, #0
 801049a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801049c:	e16b      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801049e:	4b89      	ldr	r3, [pc, #548]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104aa:	d107      	bne.n	80104bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104ac:	f107 030c 	add.w	r3, r7, #12
 80104b0:	4618      	mov	r0, r3
 80104b2:	f000 fad3 	bl	8010a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104ba:	e15c      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104bc:	2300      	movs	r3, #0
 80104be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104c0:	e159      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80104c2:	4b80      	ldr	r3, [pc, #512]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80104c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80104ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80104cc:	4b7d      	ldr	r3, [pc, #500]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f003 0304 	and.w	r3, r3, #4
 80104d4:	2b04      	cmp	r3, #4
 80104d6:	d10c      	bne.n	80104f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80104d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d109      	bne.n	80104f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80104de:	4b79      	ldr	r3, [pc, #484]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	08db      	lsrs	r3, r3, #3
 80104e4:	f003 0303 	and.w	r3, r3, #3
 80104e8:	4a77      	ldr	r2, [pc, #476]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80104ea:	fa22 f303 	lsr.w	r3, r2, r3
 80104ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104f0:	e01e      	b.n	8010530 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80104f2:	4b74      	ldr	r3, [pc, #464]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104fe:	d106      	bne.n	801050e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010506:	d102      	bne.n	801050e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010508:	4b70      	ldr	r3, [pc, #448]	; (80106cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801050a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801050c:	e010      	b.n	8010530 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801050e:	4b6d      	ldr	r3, [pc, #436]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801051a:	d106      	bne.n	801052a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 801051c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801051e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010522:	d102      	bne.n	801052a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010524:	4b6a      	ldr	r3, [pc, #424]	; (80106d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010528:	e002      	b.n	8010530 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801052a:	2300      	movs	r3, #0
 801052c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801052e:	e122      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010530:	e121      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010532:	2300      	movs	r3, #0
 8010534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010536:	e11e      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010538:	e9d7 2300 	ldrd	r2, r3, [r7]
 801053c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010540:	430b      	orrs	r3, r1
 8010542:	d133      	bne.n	80105ac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010544:	4b5f      	ldr	r3, [pc, #380]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801054c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801054e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010550:	2b00      	cmp	r3, #0
 8010552:	d004      	beq.n	801055e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801055a:	d012      	beq.n	8010582 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 801055c:	e023      	b.n	80105a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801055e:	4b59      	ldr	r3, [pc, #356]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801056a:	d107      	bne.n	801057c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801056c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010570:	4618      	mov	r0, r3
 8010572:	f000 fbc7 	bl	8010d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010578:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801057a:	e0fc      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801057c:	2300      	movs	r3, #0
 801057e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010580:	e0f9      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010582:	4b50      	ldr	r3, [pc, #320]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801058a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801058e:	d107      	bne.n	80105a0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010590:	f107 0318 	add.w	r3, r7, #24
 8010594:	4618      	mov	r0, r3
 8010596:	f000 f90d 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801059a:	6a3b      	ldr	r3, [r7, #32]
 801059c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801059e:	e0ea      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80105a0:	2300      	movs	r3, #0
 80105a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105a4:	e0e7      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105aa:	e0e4      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80105ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105b0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80105b4:	430b      	orrs	r3, r1
 80105b6:	f040 808d 	bne.w	80106d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80105ba:	4b42      	ldr	r3, [pc, #264]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80105bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105be:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80105c2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80105c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80105ca:	d06b      	beq.n	80106a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80105cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80105d2:	d874      	bhi.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80105d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105da:	d056      	beq.n	801068a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80105dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105e2:	d86c      	bhi.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80105e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80105ea:	d03b      	beq.n	8010664 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80105ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80105f2:	d864      	bhi.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80105f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105fa:	d021      	beq.n	8010640 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80105fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010602:	d85c      	bhi.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010606:	2b00      	cmp	r3, #0
 8010608:	d004      	beq.n	8010614 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 801060a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801060c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010610:	d004      	beq.n	801061c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8010612:	e054      	b.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010614:	f000 f8b8 	bl	8010788 <HAL_RCCEx_GetD3PCLK1Freq>
 8010618:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801061a:	e0ac      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801061c:	4b29      	ldr	r3, [pc, #164]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010628:	d107      	bne.n	801063a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801062a:	f107 0318 	add.w	r3, r7, #24
 801062e:	4618      	mov	r0, r3
 8010630:	f000 f8c0 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010638:	e09d      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801063a:	2300      	movs	r3, #0
 801063c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801063e:	e09a      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010640:	4b20      	ldr	r3, [pc, #128]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801064c:	d107      	bne.n	801065e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801064e:	f107 030c 	add.w	r3, r7, #12
 8010652:	4618      	mov	r0, r3
 8010654:	f000 fa02 	bl	8010a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801065c:	e08b      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801065e:	2300      	movs	r3, #0
 8010660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010662:	e088      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010664:	4b17      	ldr	r3, [pc, #92]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f003 0304 	and.w	r3, r3, #4
 801066c:	2b04      	cmp	r3, #4
 801066e:	d109      	bne.n	8010684 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010670:	4b14      	ldr	r3, [pc, #80]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	08db      	lsrs	r3, r3, #3
 8010676:	f003 0303 	and.w	r3, r3, #3
 801067a:	4a13      	ldr	r2, [pc, #76]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801067c:	fa22 f303 	lsr.w	r3, r2, r3
 8010680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010682:	e078      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010684:	2300      	movs	r3, #0
 8010686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010688:	e075      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801068a:	4b0e      	ldr	r3, [pc, #56]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010696:	d102      	bne.n	801069e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010698:	4b0c      	ldr	r3, [pc, #48]	; (80106cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801069a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801069c:	e06b      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801069e:	2300      	movs	r3, #0
 80106a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106a2:	e068      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80106a4:	4b07      	ldr	r3, [pc, #28]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106b0:	d102      	bne.n	80106b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80106b2:	4b07      	ldr	r3, [pc, #28]	; (80106d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80106b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106b6:	e05e      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106b8:	2300      	movs	r3, #0
 80106ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106bc:	e05b      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80106be:	2300      	movs	r3, #0
 80106c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106c2:	e058      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80106c4:	58024400 	.word	0x58024400
 80106c8:	03d09000 	.word	0x03d09000
 80106cc:	003d0900 	.word	0x003d0900
 80106d0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80106d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106d8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80106dc:	430b      	orrs	r3, r1
 80106de:	d148      	bne.n	8010772 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80106e0:	4b27      	ldr	r3, [pc, #156]	; (8010780 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80106e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80106e8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80106ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106f0:	d02a      	beq.n	8010748 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80106f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106f8:	d838      	bhi.n	801076c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80106fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d004      	beq.n	801070a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010706:	d00d      	beq.n	8010724 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010708:	e030      	b.n	801076c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801070a:	4b1d      	ldr	r3, [pc, #116]	; (8010780 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010716:	d102      	bne.n	801071e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010718:	4b1a      	ldr	r3, [pc, #104]	; (8010784 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 801071a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801071c:	e02b      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801071e:	2300      	movs	r3, #0
 8010720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010722:	e028      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010724:	4b16      	ldr	r3, [pc, #88]	; (8010780 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801072c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010730:	d107      	bne.n	8010742 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010736:	4618      	mov	r0, r3
 8010738:	f000 fae4 	bl	8010d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801073c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801073e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010740:	e019      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010742:	2300      	movs	r3, #0
 8010744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010746:	e016      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010748:	4b0d      	ldr	r3, [pc, #52]	; (8010780 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010754:	d107      	bne.n	8010766 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010756:	f107 0318 	add.w	r3, r7, #24
 801075a:	4618      	mov	r0, r3
 801075c:	f000 f82a 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010760:	69fb      	ldr	r3, [r7, #28]
 8010762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010764:	e007      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010766:	2300      	movs	r3, #0
 8010768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801076a:	e004      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801076c:	2300      	movs	r3, #0
 801076e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010770:	e001      	b.n	8010776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010772:	2300      	movs	r3, #0
 8010774:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8010776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010778:	4618      	mov	r0, r3
 801077a:	3740      	adds	r7, #64	; 0x40
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}
 8010780:	58024400 	.word	0x58024400
 8010784:	017d7840 	.word	0x017d7840

08010788 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801078c:	f7fd ffd4 	bl	800e738 <HAL_RCC_GetHCLKFreq>
 8010790:	4602      	mov	r2, r0
 8010792:	4b06      	ldr	r3, [pc, #24]	; (80107ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010794:	6a1b      	ldr	r3, [r3, #32]
 8010796:	091b      	lsrs	r3, r3, #4
 8010798:	f003 0307 	and.w	r3, r3, #7
 801079c:	4904      	ldr	r1, [pc, #16]	; (80107b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801079e:	5ccb      	ldrb	r3, [r1, r3]
 80107a0:	f003 031f 	and.w	r3, r3, #31
 80107a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	bd80      	pop	{r7, pc}
 80107ac:	58024400 	.word	0x58024400
 80107b0:	0801ab14 	.word	0x0801ab14

080107b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b089      	sub	sp, #36	; 0x24
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80107bc:	4ba1      	ldr	r3, [pc, #644]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107c0:	f003 0303 	and.w	r3, r3, #3
 80107c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80107c6:	4b9f      	ldr	r3, [pc, #636]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ca:	0b1b      	lsrs	r3, r3, #12
 80107cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80107d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80107d2:	4b9c      	ldr	r3, [pc, #624]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107d6:	091b      	lsrs	r3, r3, #4
 80107d8:	f003 0301 	and.w	r3, r3, #1
 80107dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80107de:	4b99      	ldr	r3, [pc, #612]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107e2:	08db      	lsrs	r3, r3, #3
 80107e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80107e8:	693a      	ldr	r2, [r7, #16]
 80107ea:	fb02 f303 	mul.w	r3, r2, r3
 80107ee:	ee07 3a90 	vmov	s15, r3
 80107f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	f000 8111 	beq.w	8010a24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	2b02      	cmp	r3, #2
 8010806:	f000 8083 	beq.w	8010910 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801080a:	69bb      	ldr	r3, [r7, #24]
 801080c:	2b02      	cmp	r3, #2
 801080e:	f200 80a1 	bhi.w	8010954 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010812:	69bb      	ldr	r3, [r7, #24]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d003      	beq.n	8010820 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010818:	69bb      	ldr	r3, [r7, #24]
 801081a:	2b01      	cmp	r3, #1
 801081c:	d056      	beq.n	80108cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801081e:	e099      	b.n	8010954 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010820:	4b88      	ldr	r3, [pc, #544]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f003 0320 	and.w	r3, r3, #32
 8010828:	2b00      	cmp	r3, #0
 801082a:	d02d      	beq.n	8010888 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801082c:	4b85      	ldr	r3, [pc, #532]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	08db      	lsrs	r3, r3, #3
 8010832:	f003 0303 	and.w	r3, r3, #3
 8010836:	4a84      	ldr	r2, [pc, #528]	; (8010a48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010838:	fa22 f303 	lsr.w	r3, r2, r3
 801083c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	ee07 3a90 	vmov	s15, r3
 8010844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	ee07 3a90 	vmov	s15, r3
 801084e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010856:	4b7b      	ldr	r3, [pc, #492]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801085a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801085e:	ee07 3a90 	vmov	s15, r3
 8010862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010866:	ed97 6a03 	vldr	s12, [r7, #12]
 801086a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010a4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801086e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801087a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801087e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010882:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010886:	e087      	b.n	8010998 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	ee07 3a90 	vmov	s15, r3
 801088e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010892:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010a50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801089a:	4b6a      	ldr	r3, [pc, #424]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801089c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801089e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108a2:	ee07 3a90 	vmov	s15, r3
 80108a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80108ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010a4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80108b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80108b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80108ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80108be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80108c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80108ca:	e065      	b.n	8010998 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	ee07 3a90 	vmov	s15, r3
 80108d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80108da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80108de:	4b59      	ldr	r3, [pc, #356]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108e6:	ee07 3a90 	vmov	s15, r3
 80108ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80108f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010a4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80108f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80108fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80108fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010906:	ee67 7a27 	vmul.f32	s15, s14, s15
 801090a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801090e:	e043      	b.n	8010998 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	ee07 3a90 	vmov	s15, r3
 8010916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801091a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801091e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010922:	4b48      	ldr	r3, [pc, #288]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801092a:	ee07 3a90 	vmov	s15, r3
 801092e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010932:	ed97 6a03 	vldr	s12, [r7, #12]
 8010936:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010a4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801093a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801093e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801094a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801094e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010952:	e021      	b.n	8010998 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	ee07 3a90 	vmov	s15, r3
 801095a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801095e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010966:	4b37      	ldr	r3, [pc, #220]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801096a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801096e:	ee07 3a90 	vmov	s15, r3
 8010972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010976:	ed97 6a03 	vldr	s12, [r7, #12]
 801097a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010a4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801097e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801098a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801098e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010996:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010998:	4b2a      	ldr	r3, [pc, #168]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801099a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801099c:	0a5b      	lsrs	r3, r3, #9
 801099e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109a2:	ee07 3a90 	vmov	s15, r3
 80109a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80109ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80109b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80109b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80109ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80109be:	ee17 2a90 	vmov	r2, s15
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80109c6:	4b1f      	ldr	r3, [pc, #124]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80109c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109ca:	0c1b      	lsrs	r3, r3, #16
 80109cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109d0:	ee07 3a90 	vmov	s15, r3
 80109d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80109dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80109e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80109e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80109e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80109ec:	ee17 2a90 	vmov	r2, s15
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80109f4:	4b13      	ldr	r3, [pc, #76]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80109f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109f8:	0e1b      	lsrs	r3, r3, #24
 80109fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109fe:	ee07 3a90 	vmov	s15, r3
 8010a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a1a:	ee17 2a90 	vmov	r2, s15
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010a22:	e008      	b.n	8010a36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2200      	movs	r2, #0
 8010a28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2200      	movs	r2, #0
 8010a34:	609a      	str	r2, [r3, #8]
}
 8010a36:	bf00      	nop
 8010a38:	3724      	adds	r7, #36	; 0x24
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr
 8010a42:	bf00      	nop
 8010a44:	58024400 	.word	0x58024400
 8010a48:	03d09000 	.word	0x03d09000
 8010a4c:	46000000 	.word	0x46000000
 8010a50:	4c742400 	.word	0x4c742400
 8010a54:	4a742400 	.word	0x4a742400
 8010a58:	4bbebc20 	.word	0x4bbebc20

08010a5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b089      	sub	sp, #36	; 0x24
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010a64:	4ba1      	ldr	r3, [pc, #644]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a68:	f003 0303 	and.w	r3, r3, #3
 8010a6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010a6e:	4b9f      	ldr	r3, [pc, #636]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a72:	0d1b      	lsrs	r3, r3, #20
 8010a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010a7a:	4b9c      	ldr	r3, [pc, #624]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a7e:	0a1b      	lsrs	r3, r3, #8
 8010a80:	f003 0301 	and.w	r3, r3, #1
 8010a84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010a86:	4b99      	ldr	r3, [pc, #612]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a8a:	08db      	lsrs	r3, r3, #3
 8010a8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a90:	693a      	ldr	r2, [r7, #16]
 8010a92:	fb02 f303 	mul.w	r3, r2, r3
 8010a96:	ee07 3a90 	vmov	s15, r3
 8010a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f000 8111 	beq.w	8010ccc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010aaa:	69bb      	ldr	r3, [r7, #24]
 8010aac:	2b02      	cmp	r3, #2
 8010aae:	f000 8083 	beq.w	8010bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	2b02      	cmp	r3, #2
 8010ab6:	f200 80a1 	bhi.w	8010bfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d003      	beq.n	8010ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010ac0:	69bb      	ldr	r3, [r7, #24]
 8010ac2:	2b01      	cmp	r3, #1
 8010ac4:	d056      	beq.n	8010b74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010ac6:	e099      	b.n	8010bfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ac8:	4b88      	ldr	r3, [pc, #544]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f003 0320 	and.w	r3, r3, #32
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d02d      	beq.n	8010b30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ad4:	4b85      	ldr	r3, [pc, #532]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	08db      	lsrs	r3, r3, #3
 8010ada:	f003 0303 	and.w	r3, r3, #3
 8010ade:	4a84      	ldr	r2, [pc, #528]	; (8010cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8010ae4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	ee07 3a90 	vmov	s15, r3
 8010aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	ee07 3a90 	vmov	s15, r3
 8010af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010afe:	4b7b      	ldr	r3, [pc, #492]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b06:	ee07 3a90 	vmov	s15, r3
 8010b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010b2e:	e087      	b.n	8010c40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	ee07 3a90 	vmov	s15, r3
 8010b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b42:	4b6a      	ldr	r3, [pc, #424]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b4a:	ee07 3a90 	vmov	s15, r3
 8010b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b72:	e065      	b.n	8010c40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	ee07 3a90 	vmov	s15, r3
 8010b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b86:	4b59      	ldr	r3, [pc, #356]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b8e:	ee07 3a90 	vmov	s15, r3
 8010b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010bb6:	e043      	b.n	8010c40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	ee07 3a90 	vmov	s15, r3
 8010bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bca:	4b48      	ldr	r3, [pc, #288]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bd2:	ee07 3a90 	vmov	s15, r3
 8010bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bde:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010bfa:	e021      	b.n	8010c40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	ee07 3a90 	vmov	s15, r3
 8010c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c0e:	4b37      	ldr	r3, [pc, #220]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c16:	ee07 3a90 	vmov	s15, r3
 8010c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010c40:	4b2a      	ldr	r3, [pc, #168]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c44:	0a5b      	lsrs	r3, r3, #9
 8010c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c4a:	ee07 3a90 	vmov	s15, r3
 8010c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c66:	ee17 2a90 	vmov	r2, s15
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010c6e:	4b1f      	ldr	r3, [pc, #124]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c72:	0c1b      	lsrs	r3, r3, #16
 8010c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c78:	ee07 3a90 	vmov	s15, r3
 8010c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c88:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c94:	ee17 2a90 	vmov	r2, s15
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010c9c:	4b13      	ldr	r3, [pc, #76]	; (8010cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ca0:	0e1b      	lsrs	r3, r3, #24
 8010ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ca6:	ee07 3a90 	vmov	s15, r3
 8010caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010cb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8010cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010cc2:	ee17 2a90 	vmov	r2, s15
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010cca:	e008      	b.n	8010cde <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	609a      	str	r2, [r3, #8]
}
 8010cde:	bf00      	nop
 8010ce0:	3724      	adds	r7, #36	; 0x24
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce8:	4770      	bx	lr
 8010cea:	bf00      	nop
 8010cec:	58024400 	.word	0x58024400
 8010cf0:	03d09000 	.word	0x03d09000
 8010cf4:	46000000 	.word	0x46000000
 8010cf8:	4c742400 	.word	0x4c742400
 8010cfc:	4a742400 	.word	0x4a742400
 8010d00:	4bbebc20 	.word	0x4bbebc20

08010d04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b089      	sub	sp, #36	; 0x24
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010d0c:	4ba0      	ldr	r3, [pc, #640]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d10:	f003 0303 	and.w	r3, r3, #3
 8010d14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010d16:	4b9e      	ldr	r3, [pc, #632]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d1a:	091b      	lsrs	r3, r3, #4
 8010d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010d22:	4b9b      	ldr	r3, [pc, #620]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d26:	f003 0301 	and.w	r3, r3, #1
 8010d2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010d2c:	4b98      	ldr	r3, [pc, #608]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d30:	08db      	lsrs	r3, r3, #3
 8010d32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d36:	693a      	ldr	r2, [r7, #16]
 8010d38:	fb02 f303 	mul.w	r3, r2, r3
 8010d3c:	ee07 3a90 	vmov	s15, r3
 8010d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	f000 8111 	beq.w	8010f72 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010d50:	69bb      	ldr	r3, [r7, #24]
 8010d52:	2b02      	cmp	r3, #2
 8010d54:	f000 8083 	beq.w	8010e5e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	2b02      	cmp	r3, #2
 8010d5c:	f200 80a1 	bhi.w	8010ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010d60:	69bb      	ldr	r3, [r7, #24]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d003      	beq.n	8010d6e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010d66:	69bb      	ldr	r3, [r7, #24]
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d056      	beq.n	8010e1a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010d6c:	e099      	b.n	8010ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d6e:	4b88      	ldr	r3, [pc, #544]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	f003 0320 	and.w	r3, r3, #32
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d02d      	beq.n	8010dd6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010d7a:	4b85      	ldr	r3, [pc, #532]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	08db      	lsrs	r3, r3, #3
 8010d80:	f003 0303 	and.w	r3, r3, #3
 8010d84:	4a83      	ldr	r2, [pc, #524]	; (8010f94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010d86:	fa22 f303 	lsr.w	r3, r2, r3
 8010d8a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	ee07 3a90 	vmov	s15, r3
 8010d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	ee07 3a90 	vmov	s15, r3
 8010d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010da0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010da4:	4b7a      	ldr	r3, [pc, #488]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dac:	ee07 3a90 	vmov	s15, r3
 8010db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010db4:	ed97 6a03 	vldr	s12, [r7, #12]
 8010db8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8010f98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010dbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010dc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dd0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010dd4:	e087      	b.n	8010ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	ee07 3a90 	vmov	s15, r3
 8010ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010de0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8010f9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010de8:	4b69      	ldr	r3, [pc, #420]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010df0:	ee07 3a90 	vmov	s15, r3
 8010df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010df8:	ed97 6a03 	vldr	s12, [r7, #12]
 8010dfc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8010f98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e18:	e065      	b.n	8010ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	ee07 3a90 	vmov	s15, r3
 8010e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e24:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e2c:	4b58      	ldr	r3, [pc, #352]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e34:	ee07 3a90 	vmov	s15, r3
 8010e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e40:	eddf 5a55 	vldr	s11, [pc, #340]	; 8010f98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e5c:	e043      	b.n	8010ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	ee07 3a90 	vmov	s15, r3
 8010e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e68:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8010fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e70:	4b47      	ldr	r3, [pc, #284]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e78:	ee07 3a90 	vmov	s15, r3
 8010e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e80:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e84:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010f98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ea0:	e021      	b.n	8010ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	ee07 3a90 	vmov	s15, r3
 8010ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010f9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010eb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010eb4:	4b36      	ldr	r3, [pc, #216]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ebc:	ee07 3a90 	vmov	s15, r3
 8010ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ec4:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ec8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010f98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010ecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ee0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ee4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010ee6:	4b2a      	ldr	r3, [pc, #168]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eea:	0a5b      	lsrs	r3, r3, #9
 8010eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ef0:	ee07 3a90 	vmov	s15, r3
 8010ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010efc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f0c:	ee17 2a90 	vmov	r2, s15
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010f14:	4b1e      	ldr	r3, [pc, #120]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f18:	0c1b      	lsrs	r3, r3, #16
 8010f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f1e:	ee07 3a90 	vmov	s15, r3
 8010f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f3a:	ee17 2a90 	vmov	r2, s15
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010f42:	4b13      	ldr	r3, [pc, #76]	; (8010f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f46:	0e1b      	lsrs	r3, r3, #24
 8010f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f4c:	ee07 3a90 	vmov	s15, r3
 8010f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f68:	ee17 2a90 	vmov	r2, s15
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010f70:	e008      	b.n	8010f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2200      	movs	r2, #0
 8010f76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2200      	movs	r2, #0
 8010f82:	609a      	str	r2, [r3, #8]
}
 8010f84:	bf00      	nop
 8010f86:	3724      	adds	r7, #36	; 0x24
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8e:	4770      	bx	lr
 8010f90:	58024400 	.word	0x58024400
 8010f94:	03d09000 	.word	0x03d09000
 8010f98:	46000000 	.word	0x46000000
 8010f9c:	4c742400 	.word	0x4c742400
 8010fa0:	4a742400 	.word	0x4a742400
 8010fa4:	4bbebc20 	.word	0x4bbebc20

08010fa8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b084      	sub	sp, #16
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010fb6:	4b53      	ldr	r3, [pc, #332]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8010fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fba:	f003 0303 	and.w	r3, r3, #3
 8010fbe:	2b03      	cmp	r3, #3
 8010fc0:	d101      	bne.n	8010fc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	e099      	b.n	80110fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010fc6:	4b4f      	ldr	r3, [pc, #316]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	4a4e      	ldr	r2, [pc, #312]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8010fcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010fd2:	f7f4 fb9b 	bl	800570c <HAL_GetTick>
 8010fd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010fd8:	e008      	b.n	8010fec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010fda:	f7f4 fb97 	bl	800570c <HAL_GetTick>
 8010fde:	4602      	mov	r2, r0
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	1ad3      	subs	r3, r2, r3
 8010fe4:	2b02      	cmp	r3, #2
 8010fe6:	d901      	bls.n	8010fec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010fe8:	2303      	movs	r3, #3
 8010fea:	e086      	b.n	80110fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010fec:	4b45      	ldr	r3, [pc, #276]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d1f0      	bne.n	8010fda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010ff8:	4b42      	ldr	r3, [pc, #264]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8010ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ffc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	031b      	lsls	r3, r3, #12
 8011006:	493f      	ldr	r1, [pc, #252]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8011008:	4313      	orrs	r3, r2
 801100a:	628b      	str	r3, [r1, #40]	; 0x28
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	3b01      	subs	r3, #1
 8011012:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	689b      	ldr	r3, [r3, #8]
 801101a:	3b01      	subs	r3, #1
 801101c:	025b      	lsls	r3, r3, #9
 801101e:	b29b      	uxth	r3, r3
 8011020:	431a      	orrs	r2, r3
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	68db      	ldr	r3, [r3, #12]
 8011026:	3b01      	subs	r3, #1
 8011028:	041b      	lsls	r3, r3, #16
 801102a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801102e:	431a      	orrs	r2, r3
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	691b      	ldr	r3, [r3, #16]
 8011034:	3b01      	subs	r3, #1
 8011036:	061b      	lsls	r3, r3, #24
 8011038:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801103c:	4931      	ldr	r1, [pc, #196]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 801103e:	4313      	orrs	r3, r2
 8011040:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011042:	4b30      	ldr	r3, [pc, #192]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8011044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011046:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	695b      	ldr	r3, [r3, #20]
 801104e:	492d      	ldr	r1, [pc, #180]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8011050:	4313      	orrs	r3, r2
 8011052:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011054:	4b2b      	ldr	r3, [pc, #172]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8011056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011058:	f023 0220 	bic.w	r2, r3, #32
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	699b      	ldr	r3, [r3, #24]
 8011060:	4928      	ldr	r1, [pc, #160]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8011062:	4313      	orrs	r3, r2
 8011064:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011066:	4b27      	ldr	r3, [pc, #156]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8011068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801106a:	4a26      	ldr	r2, [pc, #152]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 801106c:	f023 0310 	bic.w	r3, r3, #16
 8011070:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011072:	4b24      	ldr	r3, [pc, #144]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8011074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011076:	4b24      	ldr	r3, [pc, #144]	; (8011108 <RCCEx_PLL2_Config+0x160>)
 8011078:	4013      	ands	r3, r2
 801107a:	687a      	ldr	r2, [r7, #4]
 801107c:	69d2      	ldr	r2, [r2, #28]
 801107e:	00d2      	lsls	r2, r2, #3
 8011080:	4920      	ldr	r1, [pc, #128]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8011082:	4313      	orrs	r3, r2
 8011084:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011086:	4b1f      	ldr	r3, [pc, #124]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 8011088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801108a:	4a1e      	ldr	r2, [pc, #120]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 801108c:	f043 0310 	orr.w	r3, r3, #16
 8011090:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d106      	bne.n	80110a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011098:	4b1a      	ldr	r3, [pc, #104]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 801109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801109c:	4a19      	ldr	r2, [pc, #100]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 801109e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80110a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80110a4:	e00f      	b.n	80110c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	2b01      	cmp	r3, #1
 80110aa:	d106      	bne.n	80110ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80110ac:	4b15      	ldr	r3, [pc, #84]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 80110ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110b0:	4a14      	ldr	r2, [pc, #80]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 80110b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80110b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80110b8:	e005      	b.n	80110c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80110ba:	4b12      	ldr	r3, [pc, #72]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 80110bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110be:	4a11      	ldr	r2, [pc, #68]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 80110c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80110c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80110c6:	4b0f      	ldr	r3, [pc, #60]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4a0e      	ldr	r2, [pc, #56]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 80110cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80110d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80110d2:	f7f4 fb1b 	bl	800570c <HAL_GetTick>
 80110d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80110d8:	e008      	b.n	80110ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80110da:	f7f4 fb17 	bl	800570c <HAL_GetTick>
 80110de:	4602      	mov	r2, r0
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	1ad3      	subs	r3, r2, r3
 80110e4:	2b02      	cmp	r3, #2
 80110e6:	d901      	bls.n	80110ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80110e8:	2303      	movs	r3, #3
 80110ea:	e006      	b.n	80110fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80110ec:	4b05      	ldr	r3, [pc, #20]	; (8011104 <RCCEx_PLL2_Config+0x15c>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d0f0      	beq.n	80110da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80110f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3710      	adds	r7, #16
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	58024400 	.word	0x58024400
 8011108:	ffff0007 	.word	0xffff0007

0801110c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b084      	sub	sp, #16
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011116:	2300      	movs	r3, #0
 8011118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801111a:	4b53      	ldr	r3, [pc, #332]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 801111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801111e:	f003 0303 	and.w	r3, r3, #3
 8011122:	2b03      	cmp	r3, #3
 8011124:	d101      	bne.n	801112a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8011126:	2301      	movs	r3, #1
 8011128:	e099      	b.n	801125e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801112a:	4b4f      	ldr	r3, [pc, #316]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	4a4e      	ldr	r2, [pc, #312]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 8011130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011136:	f7f4 fae9 	bl	800570c <HAL_GetTick>
 801113a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801113c:	e008      	b.n	8011150 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801113e:	f7f4 fae5 	bl	800570c <HAL_GetTick>
 8011142:	4602      	mov	r2, r0
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	1ad3      	subs	r3, r2, r3
 8011148:	2b02      	cmp	r3, #2
 801114a:	d901      	bls.n	8011150 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801114c:	2303      	movs	r3, #3
 801114e:	e086      	b.n	801125e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011150:	4b45      	ldr	r3, [pc, #276]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011158:	2b00      	cmp	r3, #0
 801115a:	d1f0      	bne.n	801113e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801115c:	4b42      	ldr	r3, [pc, #264]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 801115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011160:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	051b      	lsls	r3, r3, #20
 801116a:	493f      	ldr	r1, [pc, #252]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 801116c:	4313      	orrs	r3, r2
 801116e:	628b      	str	r3, [r1, #40]	; 0x28
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	3b01      	subs	r3, #1
 8011176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	689b      	ldr	r3, [r3, #8]
 801117e:	3b01      	subs	r3, #1
 8011180:	025b      	lsls	r3, r3, #9
 8011182:	b29b      	uxth	r3, r3
 8011184:	431a      	orrs	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	3b01      	subs	r3, #1
 801118c:	041b      	lsls	r3, r3, #16
 801118e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011192:	431a      	orrs	r2, r3
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	691b      	ldr	r3, [r3, #16]
 8011198:	3b01      	subs	r3, #1
 801119a:	061b      	lsls	r3, r3, #24
 801119c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80111a0:	4931      	ldr	r1, [pc, #196]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 80111a2:	4313      	orrs	r3, r2
 80111a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80111a6:	4b30      	ldr	r3, [pc, #192]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 80111a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	695b      	ldr	r3, [r3, #20]
 80111b2:	492d      	ldr	r1, [pc, #180]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 80111b4:	4313      	orrs	r3, r2
 80111b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80111b8:	4b2b      	ldr	r3, [pc, #172]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 80111ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	699b      	ldr	r3, [r3, #24]
 80111c4:	4928      	ldr	r1, [pc, #160]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 80111c6:	4313      	orrs	r3, r2
 80111c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80111ca:	4b27      	ldr	r3, [pc, #156]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 80111cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ce:	4a26      	ldr	r2, [pc, #152]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 80111d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80111d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80111d6:	4b24      	ldr	r3, [pc, #144]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 80111d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111da:	4b24      	ldr	r3, [pc, #144]	; (801126c <RCCEx_PLL3_Config+0x160>)
 80111dc:	4013      	ands	r3, r2
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	69d2      	ldr	r2, [r2, #28]
 80111e2:	00d2      	lsls	r2, r2, #3
 80111e4:	4920      	ldr	r1, [pc, #128]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 80111e6:	4313      	orrs	r3, r2
 80111e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80111ea:	4b1f      	ldr	r3, [pc, #124]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 80111ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ee:	4a1e      	ldr	r2, [pc, #120]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 80111f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80111f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d106      	bne.n	801120a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80111fc:	4b1a      	ldr	r3, [pc, #104]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 80111fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011200:	4a19      	ldr	r2, [pc, #100]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 8011202:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011206:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011208:	e00f      	b.n	801122a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	2b01      	cmp	r3, #1
 801120e:	d106      	bne.n	801121e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011210:	4b15      	ldr	r3, [pc, #84]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 8011212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011214:	4a14      	ldr	r2, [pc, #80]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 8011216:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801121a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801121c:	e005      	b.n	801122a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801121e:	4b12      	ldr	r3, [pc, #72]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 8011220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011222:	4a11      	ldr	r2, [pc, #68]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 8011224:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011228:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801122a:	4b0f      	ldr	r3, [pc, #60]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	4a0e      	ldr	r2, [pc, #56]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 8011230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011236:	f7f4 fa69 	bl	800570c <HAL_GetTick>
 801123a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801123c:	e008      	b.n	8011250 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801123e:	f7f4 fa65 	bl	800570c <HAL_GetTick>
 8011242:	4602      	mov	r2, r0
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	1ad3      	subs	r3, r2, r3
 8011248:	2b02      	cmp	r3, #2
 801124a:	d901      	bls.n	8011250 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801124c:	2303      	movs	r3, #3
 801124e:	e006      	b.n	801125e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011250:	4b05      	ldr	r3, [pc, #20]	; (8011268 <RCCEx_PLL3_Config+0x15c>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011258:	2b00      	cmp	r3, #0
 801125a:	d0f0      	beq.n	801123e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801125c:	7bfb      	ldrb	r3, [r7, #15]
}
 801125e:	4618      	mov	r0, r3
 8011260:	3710      	adds	r7, #16
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	58024400 	.word	0x58024400
 801126c:	ffff0007 	.word	0xffff0007

08011270 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011278:	2301      	movs	r3, #1
 801127a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d071      	beq.n	8011366 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011288:	b2db      	uxtb	r3, r3
 801128a:	2b00      	cmp	r3, #0
 801128c:	d106      	bne.n	801129c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2200      	movs	r2, #0
 8011292:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f7f2 fc90 	bl	8003bbc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2202      	movs	r2, #2
 80112a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	68db      	ldr	r3, [r3, #12]
 80112aa:	f003 0310 	and.w	r3, r3, #16
 80112ae:	2b10      	cmp	r3, #16
 80112b0:	d050      	beq.n	8011354 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	22ca      	movs	r2, #202	; 0xca
 80112b8:	625a      	str	r2, [r3, #36]	; 0x24
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	2253      	movs	r2, #83	; 0x53
 80112c0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f000 fa4a 	bl	801175c <RTC_EnterInitMode>
 80112c8:	4603      	mov	r3, r0
 80112ca:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80112cc:	7bfb      	ldrb	r3, [r7, #15]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d124      	bne.n	801131c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	6899      	ldr	r1, [r3, #8]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681a      	ldr	r2, [r3, #0]
 80112dc:	4b24      	ldr	r3, [pc, #144]	; (8011370 <HAL_RTC_Init+0x100>)
 80112de:	400b      	ands	r3, r1
 80112e0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	6899      	ldr	r1, [r3, #8]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	685a      	ldr	r2, [r3, #4]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	691b      	ldr	r3, [r3, #16]
 80112f0:	431a      	orrs	r2, r3
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	699b      	ldr	r3, [r3, #24]
 80112f6:	431a      	orrs	r2, r3
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	430a      	orrs	r2, r1
 80112fe:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	689b      	ldr	r3, [r3, #8]
 8011304:	0419      	lsls	r1, r3, #16
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	68da      	ldr	r2, [r3, #12]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	430a      	orrs	r2, r1
 8011310:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f000 fa56 	bl	80117c4 <RTC_ExitInitMode>
 8011318:	4603      	mov	r3, r0
 801131a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 801131c:	7bfb      	ldrb	r3, [r7, #15]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d113      	bne.n	801134a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	f022 0203 	bic.w	r2, r2, #3
 8011330:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	69da      	ldr	r2, [r3, #28]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	695b      	ldr	r3, [r3, #20]
 8011340:	431a      	orrs	r2, r3
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	430a      	orrs	r2, r1
 8011348:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	22ff      	movs	r2, #255	; 0xff
 8011350:	625a      	str	r2, [r3, #36]	; 0x24
 8011352:	e001      	b.n	8011358 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011354:	2300      	movs	r3, #0
 8011356:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011358:	7bfb      	ldrb	r3, [r7, #15]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d103      	bne.n	8011366 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2201      	movs	r2, #1
 8011362:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8011366:	7bfb      	ldrb	r3, [r7, #15]
}
 8011368:	4618      	mov	r0, r3
 801136a:	3710      	adds	r7, #16
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}
 8011370:	ff8fffbf 	.word	0xff8fffbf

08011374 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011374:	b590      	push	{r4, r7, lr}
 8011376:	b087      	sub	sp, #28
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011386:	2b01      	cmp	r3, #1
 8011388:	d101      	bne.n	801138e <HAL_RTC_SetTime+0x1a>
 801138a:	2302      	movs	r3, #2
 801138c:	e089      	b.n	80114a2 <HAL_RTC_SetTime+0x12e>
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2201      	movs	r2, #1
 8011392:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2202      	movs	r2, #2
 801139a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	22ca      	movs	r2, #202	; 0xca
 80113a4:	625a      	str	r2, [r3, #36]	; 0x24
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	2253      	movs	r2, #83	; 0x53
 80113ac:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80113ae:	68f8      	ldr	r0, [r7, #12]
 80113b0:	f000 f9d4 	bl	801175c <RTC_EnterInitMode>
 80113b4:	4603      	mov	r3, r0
 80113b6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80113b8:	7cfb      	ldrb	r3, [r7, #19]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d161      	bne.n	8011482 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d126      	bne.n	8011412 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	689b      	ldr	r3, [r3, #8]
 80113ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d102      	bne.n	80113d8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	2200      	movs	r2, #0
 80113d6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	4618      	mov	r0, r3
 80113de:	f000 fa2f 	bl	8011840 <RTC_ByteToBcd2>
 80113e2:	4603      	mov	r3, r0
 80113e4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	785b      	ldrb	r3, [r3, #1]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f000 fa28 	bl	8011840 <RTC_ByteToBcd2>
 80113f0:	4603      	mov	r3, r0
 80113f2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80113f4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	789b      	ldrb	r3, [r3, #2]
 80113fa:	4618      	mov	r0, r3
 80113fc:	f000 fa20 	bl	8011840 <RTC_ByteToBcd2>
 8011400:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011402:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	78db      	ldrb	r3, [r3, #3]
 801140a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801140c:	4313      	orrs	r3, r2
 801140e:	617b      	str	r3, [r7, #20]
 8011410:	e018      	b.n	8011444 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	689b      	ldr	r3, [r3, #8]
 8011418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801141c:	2b00      	cmp	r3, #0
 801141e:	d102      	bne.n	8011426 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	2200      	movs	r2, #0
 8011424:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	781b      	ldrb	r3, [r3, #0]
 801142a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	785b      	ldrb	r3, [r3, #1]
 8011430:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011432:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011434:	68ba      	ldr	r2, [r7, #8]
 8011436:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011438:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	78db      	ldrb	r3, [r3, #3]
 801143e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011440:	4313      	orrs	r3, r2
 8011442:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	6979      	ldr	r1, [r7, #20]
 801144a:	4b18      	ldr	r3, [pc, #96]	; (80114ac <HAL_RTC_SetTime+0x138>)
 801144c:	400b      	ands	r3, r1
 801144e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	689a      	ldr	r2, [r3, #8]
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801145e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	6899      	ldr	r1, [r3, #8]
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	68da      	ldr	r2, [r3, #12]
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	691b      	ldr	r3, [r3, #16]
 801146e:	431a      	orrs	r2, r3
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	430a      	orrs	r2, r1
 8011476:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011478:	68f8      	ldr	r0, [r7, #12]
 801147a:	f000 f9a3 	bl	80117c4 <RTC_ExitInitMode>
 801147e:	4603      	mov	r3, r0
 8011480:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	22ff      	movs	r2, #255	; 0xff
 8011488:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801148a:	7cfb      	ldrb	r3, [r7, #19]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d103      	bne.n	8011498 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	2201      	movs	r2, #1
 8011494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	2200      	movs	r2, #0
 801149c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80114a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	371c      	adds	r7, #28
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd90      	pop	{r4, r7, pc}
 80114aa:	bf00      	nop
 80114ac:	007f7f7f 	.word	0x007f7f7f

080114b0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b086      	sub	sp, #24
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	60f8      	str	r0, [r7, #12]
 80114b8:	60b9      	str	r1, [r7, #8]
 80114ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	691b      	ldr	r3, [r3, #16]
 80114cc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	681a      	ldr	r2, [r3, #0]
 80114da:	4b22      	ldr	r3, [pc, #136]	; (8011564 <HAL_RTC_GetTime+0xb4>)
 80114dc:	4013      	ands	r3, r2
 80114de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	0c1b      	lsrs	r3, r3, #16
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114ea:	b2da      	uxtb	r2, r3
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	0a1b      	lsrs	r3, r3, #8
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114fa:	b2da      	uxtb	r2, r3
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	b2db      	uxtb	r3, r3
 8011504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011508:	b2da      	uxtb	r2, r3
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	0d9b      	lsrs	r3, r3, #22
 8011512:	b2db      	uxtb	r3, r3
 8011514:	f003 0301 	and.w	r3, r3, #1
 8011518:	b2da      	uxtb	r2, r3
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d11a      	bne.n	801155a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	4618      	mov	r0, r3
 801152a:	f000 f9a9 	bl	8011880 <RTC_Bcd2ToByte>
 801152e:	4603      	mov	r3, r0
 8011530:	461a      	mov	r2, r3
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	785b      	ldrb	r3, [r3, #1]
 801153a:	4618      	mov	r0, r3
 801153c:	f000 f9a0 	bl	8011880 <RTC_Bcd2ToByte>
 8011540:	4603      	mov	r3, r0
 8011542:	461a      	mov	r2, r3
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	789b      	ldrb	r3, [r3, #2]
 801154c:	4618      	mov	r0, r3
 801154e:	f000 f997 	bl	8011880 <RTC_Bcd2ToByte>
 8011552:	4603      	mov	r3, r0
 8011554:	461a      	mov	r2, r3
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801155a:	2300      	movs	r3, #0
}
 801155c:	4618      	mov	r0, r3
 801155e:	3718      	adds	r7, #24
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}
 8011564:	007f7f7f 	.word	0x007f7f7f

08011568 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011568:	b590      	push	{r4, r7, lr}
 801156a:	b087      	sub	sp, #28
 801156c:	af00      	add	r7, sp, #0
 801156e:	60f8      	str	r0, [r7, #12]
 8011570:	60b9      	str	r1, [r7, #8]
 8011572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	f893 3020 	ldrb.w	r3, [r3, #32]
 801157a:	2b01      	cmp	r3, #1
 801157c:	d101      	bne.n	8011582 <HAL_RTC_SetDate+0x1a>
 801157e:	2302      	movs	r3, #2
 8011580:	e073      	b.n	801166a <HAL_RTC_SetDate+0x102>
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2201      	movs	r2, #1
 8011586:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	2202      	movs	r2, #2
 801158e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10e      	bne.n	80115b6 <HAL_RTC_SetDate+0x4e>
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	785b      	ldrb	r3, [r3, #1]
 801159c:	f003 0310 	and.w	r3, r3, #16
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d008      	beq.n	80115b6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	785b      	ldrb	r3, [r3, #1]
 80115a8:	f023 0310 	bic.w	r3, r3, #16
 80115ac:	b2db      	uxtb	r3, r3
 80115ae:	330a      	adds	r3, #10
 80115b0:	b2da      	uxtb	r2, r3
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d11c      	bne.n	80115f6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	78db      	ldrb	r3, [r3, #3]
 80115c0:	4618      	mov	r0, r3
 80115c2:	f000 f93d 	bl	8011840 <RTC_ByteToBcd2>
 80115c6:	4603      	mov	r3, r0
 80115c8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	785b      	ldrb	r3, [r3, #1]
 80115ce:	4618      	mov	r0, r3
 80115d0:	f000 f936 	bl	8011840 <RTC_ByteToBcd2>
 80115d4:	4603      	mov	r3, r0
 80115d6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80115d8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	789b      	ldrb	r3, [r3, #2]
 80115de:	4618      	mov	r0, r3
 80115e0:	f000 f92e 	bl	8011840 <RTC_ByteToBcd2>
 80115e4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80115e6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80115f0:	4313      	orrs	r3, r2
 80115f2:	617b      	str	r3, [r7, #20]
 80115f4:	e00e      	b.n	8011614 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	78db      	ldrb	r3, [r3, #3]
 80115fa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	785b      	ldrb	r3, [r3, #1]
 8011600:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011602:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8011604:	68ba      	ldr	r2, [r7, #8]
 8011606:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011608:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011610:	4313      	orrs	r3, r2
 8011612:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	22ca      	movs	r2, #202	; 0xca
 801161a:	625a      	str	r2, [r3, #36]	; 0x24
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	2253      	movs	r2, #83	; 0x53
 8011622:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f000 f899 	bl	801175c <RTC_EnterInitMode>
 801162a:	4603      	mov	r3, r0
 801162c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 801162e:	7cfb      	ldrb	r3, [r7, #19]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d10a      	bne.n	801164a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	6979      	ldr	r1, [r7, #20]
 801163a:	4b0e      	ldr	r3, [pc, #56]	; (8011674 <HAL_RTC_SetDate+0x10c>)
 801163c:	400b      	ands	r3, r1
 801163e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011640:	68f8      	ldr	r0, [r7, #12]
 8011642:	f000 f8bf 	bl	80117c4 <RTC_ExitInitMode>
 8011646:	4603      	mov	r3, r0
 8011648:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	22ff      	movs	r2, #255	; 0xff
 8011650:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011652:	7cfb      	ldrb	r3, [r7, #19]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d103      	bne.n	8011660 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2201      	movs	r2, #1
 801165c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2200      	movs	r2, #0
 8011664:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011668:	7cfb      	ldrb	r3, [r7, #19]


}
 801166a:	4618      	mov	r0, r3
 801166c:	371c      	adds	r7, #28
 801166e:	46bd      	mov	sp, r7
 8011670:	bd90      	pop	{r4, r7, pc}
 8011672:	bf00      	nop
 8011674:	00ffff3f 	.word	0x00ffff3f

08011678 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b086      	sub	sp, #24
 801167c:	af00      	add	r7, sp, #0
 801167e:	60f8      	str	r0, [r7, #12]
 8011680:	60b9      	str	r1, [r7, #8]
 8011682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	685a      	ldr	r2, [r3, #4]
 801168a:	4b21      	ldr	r3, [pc, #132]	; (8011710 <HAL_RTC_GetDate+0x98>)
 801168c:	4013      	ands	r3, r2
 801168e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	0c1b      	lsrs	r3, r3, #16
 8011694:	b2da      	uxtb	r2, r3
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	0a1b      	lsrs	r3, r3, #8
 801169e:	b2db      	uxtb	r3, r3
 80116a0:	f003 031f 	and.w	r3, r3, #31
 80116a4:	b2da      	uxtb	r2, r3
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	b2db      	uxtb	r3, r3
 80116ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80116b2:	b2da      	uxtb	r2, r3
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80116b8:	697b      	ldr	r3, [r7, #20]
 80116ba:	0b5b      	lsrs	r3, r3, #13
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	f003 0307 	and.w	r3, r3, #7
 80116c2:	b2da      	uxtb	r2, r3
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d11a      	bne.n	8011704 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	78db      	ldrb	r3, [r3, #3]
 80116d2:	4618      	mov	r0, r3
 80116d4:	f000 f8d4 	bl	8011880 <RTC_Bcd2ToByte>
 80116d8:	4603      	mov	r3, r0
 80116da:	461a      	mov	r2, r3
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	785b      	ldrb	r3, [r3, #1]
 80116e4:	4618      	mov	r0, r3
 80116e6:	f000 f8cb 	bl	8011880 <RTC_Bcd2ToByte>
 80116ea:	4603      	mov	r3, r0
 80116ec:	461a      	mov	r2, r3
 80116ee:	68bb      	ldr	r3, [r7, #8]
 80116f0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	789b      	ldrb	r3, [r3, #2]
 80116f6:	4618      	mov	r0, r3
 80116f8:	f000 f8c2 	bl	8011880 <RTC_Bcd2ToByte>
 80116fc:	4603      	mov	r3, r0
 80116fe:	461a      	mov	r2, r3
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011704:	2300      	movs	r3, #0
}
 8011706:	4618      	mov	r0, r3
 8011708:	3718      	adds	r7, #24
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	00ffff3f 	.word	0x00ffff3f

08011714 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	4a0d      	ldr	r2, [pc, #52]	; (8011758 <HAL_RTC_WaitForSynchro+0x44>)
 8011722:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8011724:	f7f3 fff2 	bl	800570c <HAL_GetTick>
 8011728:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801172a:	e009      	b.n	8011740 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801172c:	f7f3 ffee 	bl	800570c <HAL_GetTick>
 8011730:	4602      	mov	r2, r0
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	1ad3      	subs	r3, r2, r3
 8011736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801173a:	d901      	bls.n	8011740 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 801173c:	2303      	movs	r3, #3
 801173e:	e007      	b.n	8011750 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	68db      	ldr	r3, [r3, #12]
 8011746:	f003 0320 	and.w	r3, r3, #32
 801174a:	2b00      	cmp	r3, #0
 801174c:	d0ee      	beq.n	801172c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 801174e:	2300      	movs	r3, #0
}
 8011750:	4618      	mov	r0, r3
 8011752:	3710      	adds	r7, #16
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}
 8011758:	0003ff5f 	.word	0x0003ff5f

0801175c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b084      	sub	sp, #16
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011764:	2300      	movs	r3, #0
 8011766:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011772:	2b00      	cmp	r3, #0
 8011774:	d120      	bne.n	80117b8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801177e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011780:	f7f3 ffc4 	bl	800570c <HAL_GetTick>
 8011784:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011786:	e00d      	b.n	80117a4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011788:	f7f3 ffc0 	bl	800570c <HAL_GetTick>
 801178c:	4602      	mov	r2, r0
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	1ad3      	subs	r3, r2, r3
 8011792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011796:	d905      	bls.n	80117a4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011798:	2303      	movs	r3, #3
 801179a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2203      	movs	r2, #3
 80117a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	68db      	ldr	r3, [r3, #12]
 80117aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d102      	bne.n	80117b8 <RTC_EnterInitMode+0x5c>
 80117b2:	7bfb      	ldrb	r3, [r7, #15]
 80117b4:	2b03      	cmp	r3, #3
 80117b6:	d1e7      	bne.n	8011788 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80117b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
	...

080117c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80117cc:	2300      	movs	r3, #0
 80117ce:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80117d0:	4b1a      	ldr	r3, [pc, #104]	; (801183c <RTC_ExitInitMode+0x78>)
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	4a19      	ldr	r2, [pc, #100]	; (801183c <RTC_ExitInitMode+0x78>)
 80117d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80117da:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80117dc:	4b17      	ldr	r3, [pc, #92]	; (801183c <RTC_ExitInitMode+0x78>)
 80117de:	689b      	ldr	r3, [r3, #8]
 80117e0:	f003 0320 	and.w	r3, r3, #32
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d10c      	bne.n	8011802 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f7ff ff93 	bl	8011714 <HAL_RTC_WaitForSynchro>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d01e      	beq.n	8011832 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2203      	movs	r2, #3
 80117f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80117fc:	2303      	movs	r3, #3
 80117fe:	73fb      	strb	r3, [r7, #15]
 8011800:	e017      	b.n	8011832 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011802:	4b0e      	ldr	r3, [pc, #56]	; (801183c <RTC_ExitInitMode+0x78>)
 8011804:	689b      	ldr	r3, [r3, #8]
 8011806:	4a0d      	ldr	r2, [pc, #52]	; (801183c <RTC_ExitInitMode+0x78>)
 8011808:	f023 0320 	bic.w	r3, r3, #32
 801180c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f7ff ff80 	bl	8011714 <HAL_RTC_WaitForSynchro>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d005      	beq.n	8011826 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2203      	movs	r2, #3
 801181e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011822:	2303      	movs	r3, #3
 8011824:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011826:	4b05      	ldr	r3, [pc, #20]	; (801183c <RTC_ExitInitMode+0x78>)
 8011828:	689b      	ldr	r3, [r3, #8]
 801182a:	4a04      	ldr	r2, [pc, #16]	; (801183c <RTC_ExitInitMode+0x78>)
 801182c:	f043 0320 	orr.w	r3, r3, #32
 8011830:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011832:	7bfb      	ldrb	r3, [r7, #15]
}
 8011834:	4618      	mov	r0, r3
 8011836:	3710      	adds	r7, #16
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}
 801183c:	58004000 	.word	0x58004000

08011840 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011840:	b480      	push	{r7}
 8011842:	b085      	sub	sp, #20
 8011844:	af00      	add	r7, sp, #0
 8011846:	4603      	mov	r3, r0
 8011848:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801184a:	2300      	movs	r3, #0
 801184c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 801184e:	79fb      	ldrb	r3, [r7, #7]
 8011850:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8011852:	e005      	b.n	8011860 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	3301      	adds	r3, #1
 8011858:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 801185a:	7afb      	ldrb	r3, [r7, #11]
 801185c:	3b0a      	subs	r3, #10
 801185e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011860:	7afb      	ldrb	r3, [r7, #11]
 8011862:	2b09      	cmp	r3, #9
 8011864:	d8f6      	bhi.n	8011854 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	b2db      	uxtb	r3, r3
 801186a:	011b      	lsls	r3, r3, #4
 801186c:	b2da      	uxtb	r2, r3
 801186e:	7afb      	ldrb	r3, [r7, #11]
 8011870:	4313      	orrs	r3, r2
 8011872:	b2db      	uxtb	r3, r3
}
 8011874:	4618      	mov	r0, r3
 8011876:	3714      	adds	r7, #20
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr

08011880 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011880:	b480      	push	{r7}
 8011882:	b085      	sub	sp, #20
 8011884:	af00      	add	r7, sp, #0
 8011886:	4603      	mov	r3, r0
 8011888:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801188a:	79fb      	ldrb	r3, [r7, #7]
 801188c:	091b      	lsrs	r3, r3, #4
 801188e:	b2db      	uxtb	r3, r3
 8011890:	461a      	mov	r2, r3
 8011892:	0092      	lsls	r2, r2, #2
 8011894:	4413      	add	r3, r2
 8011896:	005b      	lsls	r3, r3, #1
 8011898:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801189a:	79fb      	ldrb	r3, [r7, #7]
 801189c:	f003 030f 	and.w	r3, r3, #15
 80118a0:	b2da      	uxtb	r2, r3
 80118a2:	7bfb      	ldrb	r3, [r7, #15]
 80118a4:	4413      	add	r3, r2
 80118a6:	b2db      	uxtb	r3, r3
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	3714      	adds	r7, #20
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr

080118b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b084      	sub	sp, #16
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d101      	bne.n	80118c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80118c2:	2301      	movs	r3, #1
 80118c4:	e10f      	b.n	8011ae6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2200      	movs	r2, #0
 80118ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	4a87      	ldr	r2, [pc, #540]	; (8011af0 <HAL_SPI_Init+0x23c>)
 80118d2:	4293      	cmp	r3, r2
 80118d4:	d00f      	beq.n	80118f6 <HAL_SPI_Init+0x42>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	4a86      	ldr	r2, [pc, #536]	; (8011af4 <HAL_SPI_Init+0x240>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	d00a      	beq.n	80118f6 <HAL_SPI_Init+0x42>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	4a84      	ldr	r2, [pc, #528]	; (8011af8 <HAL_SPI_Init+0x244>)
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d005      	beq.n	80118f6 <HAL_SPI_Init+0x42>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	2b0f      	cmp	r3, #15
 80118f0:	d901      	bls.n	80118f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80118f2:	2301      	movs	r3, #1
 80118f4:	e0f7      	b.n	8011ae6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f000 fd60 	bl	80123bc <SPI_GetPacketSize>
 80118fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	4a7b      	ldr	r2, [pc, #492]	; (8011af0 <HAL_SPI_Init+0x23c>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d00c      	beq.n	8011922 <HAL_SPI_Init+0x6e>
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	4a79      	ldr	r2, [pc, #484]	; (8011af4 <HAL_SPI_Init+0x240>)
 801190e:	4293      	cmp	r3, r2
 8011910:	d007      	beq.n	8011922 <HAL_SPI_Init+0x6e>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	4a78      	ldr	r2, [pc, #480]	; (8011af8 <HAL_SPI_Init+0x244>)
 8011918:	4293      	cmp	r3, r2
 801191a:	d002      	beq.n	8011922 <HAL_SPI_Init+0x6e>
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2b08      	cmp	r3, #8
 8011920:	d811      	bhi.n	8011946 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011926:	4a72      	ldr	r2, [pc, #456]	; (8011af0 <HAL_SPI_Init+0x23c>)
 8011928:	4293      	cmp	r3, r2
 801192a:	d009      	beq.n	8011940 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	4a70      	ldr	r2, [pc, #448]	; (8011af4 <HAL_SPI_Init+0x240>)
 8011932:	4293      	cmp	r3, r2
 8011934:	d004      	beq.n	8011940 <HAL_SPI_Init+0x8c>
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	4a6f      	ldr	r2, [pc, #444]	; (8011af8 <HAL_SPI_Init+0x244>)
 801193c:	4293      	cmp	r3, r2
 801193e:	d104      	bne.n	801194a <HAL_SPI_Init+0x96>
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	2b10      	cmp	r3, #16
 8011944:	d901      	bls.n	801194a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011946:	2301      	movs	r3, #1
 8011948:	e0cd      	b.n	8011ae6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011950:	b2db      	uxtb	r3, r3
 8011952:	2b00      	cmp	r3, #0
 8011954:	d106      	bne.n	8011964 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2200      	movs	r2, #0
 801195a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f7f2 fbb0 	bl	80040c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2202      	movs	r2, #2
 8011968:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	f022 0201 	bic.w	r2, r2, #1
 801197a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	689b      	ldr	r3, [r3, #8]
 8011982:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011986:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	699b      	ldr	r3, [r3, #24]
 801198c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011990:	d119      	bne.n	80119c6 <HAL_SPI_Init+0x112>
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801199a:	d103      	bne.n	80119a4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d008      	beq.n	80119b6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d10c      	bne.n	80119c6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80119b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80119b4:	d107      	bne.n	80119c6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	681a      	ldr	r2, [r3, #0]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80119c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00f      	beq.n	80119f2 <HAL_SPI_Init+0x13e>
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	68db      	ldr	r3, [r3, #12]
 80119d6:	2b06      	cmp	r3, #6
 80119d8:	d90b      	bls.n	80119f2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	430a      	orrs	r2, r1
 80119ee:	601a      	str	r2, [r3, #0]
 80119f0:	e007      	b.n	8011a02 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011a00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	69da      	ldr	r2, [r3, #28]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a0a:	431a      	orrs	r2, r3
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	431a      	orrs	r2, r3
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a14:	ea42 0103 	orr.w	r1, r2, r3
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	68da      	ldr	r2, [r3, #12]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	430a      	orrs	r2, r1
 8011a22:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2c:	431a      	orrs	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a32:	431a      	orrs	r2, r3
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	699b      	ldr	r3, [r3, #24]
 8011a38:	431a      	orrs	r2, r3
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	691b      	ldr	r3, [r3, #16]
 8011a3e:	431a      	orrs	r2, r3
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	695b      	ldr	r3, [r3, #20]
 8011a44:	431a      	orrs	r2, r3
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6a1b      	ldr	r3, [r3, #32]
 8011a4a:	431a      	orrs	r2, r3
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	431a      	orrs	r2, r3
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a56:	431a      	orrs	r2, r3
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	689b      	ldr	r3, [r3, #8]
 8011a5c:	431a      	orrs	r2, r3
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a62:	ea42 0103 	orr.w	r1, r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	430a      	orrs	r2, r1
 8011a70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d113      	bne.n	8011aa2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	689b      	ldr	r3, [r3, #8]
 8011a80:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011a8c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	689b      	ldr	r3, [r3, #8]
 8011a94:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011aa0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	f022 0201 	bic.w	r2, r2, #1
 8011ab0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d00a      	beq.n	8011ad4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	68db      	ldr	r3, [r3, #12]
 8011ac4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	430a      	orrs	r2, r1
 8011ad2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2201      	movs	r2, #1
 8011ae0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011ae4:	2300      	movs	r3, #0
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	bf00      	nop
 8011af0:	40013000 	.word	0x40013000
 8011af4:	40003800 	.word	0x40003800
 8011af8:	40003c00 	.word	0x40003c00

08011afc <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	60f8      	str	r0, [r7, #12]
 8011b04:	60b9      	str	r1, [r7, #8]
 8011b06:	4613      	mov	r3, r2
 8011b08:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	2b01      	cmp	r3, #1
 8011b14:	d005      	beq.n	8011b22 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8011b1e:	2302      	movs	r3, #2
 8011b20:	e127      	b.n	8011d72 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d002      	beq.n	8011b2e <HAL_SPI_Receive_DMA+0x32>
 8011b28:	88fb      	ldrh	r3, [r7, #6]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d105      	bne.n	8011b3a <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2200      	movs	r2, #0
 8011b32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011b36:	2301      	movs	r3, #1
 8011b38:	e11b      	b.n	8011d72 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011b40:	2b01      	cmp	r3, #1
 8011b42:	d101      	bne.n	8011b48 <HAL_SPI_Receive_DMA+0x4c>
 8011b44:	2302      	movs	r3, #2
 8011b46:	e114      	b.n	8011d72 <HAL_SPI_Receive_DMA+0x276>
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2201      	movs	r2, #1
 8011b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	2204      	movs	r2, #4
 8011b54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	68ba      	ldr	r2, [r7, #8]
 8011b64:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	88fa      	ldrh	r2, [r7, #6]
 8011b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	88fa      	ldrh	r2, [r7, #6]
 8011b72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2200      	movs	r2, #0
 8011b80:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	2200      	movs	r2, #0
 8011b86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	689b      	ldr	r3, [r3, #8]
 8011b96:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011b9a:	d108      	bne.n	8011bae <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	681a      	ldr	r2, [r3, #0]
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011baa:	601a      	str	r2, [r3, #0]
 8011bac:	e009      	b.n	8011bc2 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	68db      	ldr	r3, [r3, #12]
 8011bb4:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011bc0:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	68db      	ldr	r3, [r3, #12]
 8011bc6:	2b0f      	cmp	r3, #15
 8011bc8:	d905      	bls.n	8011bd6 <HAL_SPI_Receive_DMA+0xda>
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bce:	699b      	ldr	r3, [r3, #24]
 8011bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011bd4:	d10f      	bne.n	8011bf6 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011bda:	2b07      	cmp	r3, #7
 8011bdc:	d911      	bls.n	8011c02 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011be2:	699b      	ldr	r3, [r3, #24]
 8011be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011be8:	d00b      	beq.n	8011c02 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bee:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011bf4:	d005      	beq.n	8011c02 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011bfe:	2301      	movs	r3, #1
 8011c00:	e0b7      	b.n	8011d72 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	689a      	ldr	r2, [r3, #8]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011c10:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	68db      	ldr	r3, [r3, #12]
 8011c16:	2b07      	cmp	r3, #7
 8011c18:	d820      	bhi.n	8011c5c <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c1e:	699b      	ldr	r3, [r3, #24]
 8011c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c24:	d109      	bne.n	8011c3a <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	3301      	adds	r3, #1
 8011c30:	105b      	asrs	r3, r3, #1
 8011c32:	b29a      	uxth	r2, r3
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c3e:	699b      	ldr	r3, [r3, #24]
 8011c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c44:	d11e      	bne.n	8011c84 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	3303      	adds	r3, #3
 8011c50:	109b      	asrs	r3, r3, #2
 8011c52:	b29a      	uxth	r2, r3
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011c5a:	e013      	b.n	8011c84 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	68db      	ldr	r3, [r3, #12]
 8011c60:	2b0f      	cmp	r3, #15
 8011c62:	d80f      	bhi.n	8011c84 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c68:	699b      	ldr	r3, [r3, #24]
 8011c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c6e:	d109      	bne.n	8011c84 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	3301      	adds	r3, #1
 8011c7a:	105b      	asrs	r3, r3, #1
 8011c7c:	b29a      	uxth	r2, r3
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c88:	4a3c      	ldr	r2, [pc, #240]	; (8011d7c <HAL_SPI_Receive_DMA+0x280>)
 8011c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c90:	4a3b      	ldr	r2, [pc, #236]	; (8011d80 <HAL_SPI_Receive_DMA+0x284>)
 8011c92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c98:	4a3a      	ldr	r2, [pc, #232]	; (8011d84 <HAL_SPI_Receive_DMA+0x288>)
 8011c9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	3330      	adds	r3, #48	; 0x30
 8011cae:	4619      	mov	r1, r3
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011cb4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011cbc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011cbe:	f7f6 fa21 	bl	8008104 <HAL_DMA_Start_IT>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d011      	beq.n	8011cec <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011cce:	f043 0210 	orr.w	r2, r3, #16
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2201      	movs	r2, #1
 8011cdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8011ce8:	2301      	movs	r3, #1
 8011cea:	e042      	b.n	8011d72 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cf0:	69db      	ldr	r3, [r3, #28]
 8011cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011cf6:	d108      	bne.n	8011d0a <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	6859      	ldr	r1, [r3, #4]
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681a      	ldr	r2, [r3, #0]
 8011d02:	4b21      	ldr	r3, [pc, #132]	; (8011d88 <HAL_SPI_Receive_DMA+0x28c>)
 8011d04:	400b      	ands	r3, r1
 8011d06:	6053      	str	r3, [r2, #4]
 8011d08:	e009      	b.n	8011d1e <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	685a      	ldr	r2, [r3, #4]
 8011d10:	4b1d      	ldr	r3, [pc, #116]	; (8011d88 <HAL_SPI_Receive_DMA+0x28c>)
 8011d12:	4013      	ands	r3, r2
 8011d14:	88f9      	ldrh	r1, [r7, #6]
 8011d16:	68fa      	ldr	r2, [r7, #12]
 8011d18:	6812      	ldr	r2, [r2, #0]
 8011d1a:	430b      	orrs	r3, r1
 8011d1c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	689a      	ldr	r2, [r3, #8]
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011d2c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	691a      	ldr	r2, [r3, #16]
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8011d3c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	681a      	ldr	r2, [r3, #0]
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	f042 0201 	orr.w	r2, r2, #1
 8011d4c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011d56:	d107      	bne.n	8011d68 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	681a      	ldr	r2, [r3, #0]
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011d66:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011d70:	2300      	movs	r3, #0
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	080121e7 	.word	0x080121e7
 8011d80:	080121a1 	.word	0x080121a1
 8011d84:	08012203 	.word	0x08012203
 8011d88:	ffff0000 	.word	0xffff0000

08011d8c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b08a      	sub	sp, #40	; 0x28
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	691b      	ldr	r3, [r3, #16]
 8011d9a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	695b      	ldr	r3, [r3, #20]
 8011da2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8011da4:	6a3a      	ldr	r2, [r7, #32]
 8011da6:	69fb      	ldr	r3, [r7, #28]
 8011da8:	4013      	ands	r3, r2
 8011daa:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	689b      	ldr	r3, [r3, #8]
 8011db2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8011db4:	2300      	movs	r3, #0
 8011db6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011dbe:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	3330      	adds	r3, #48	; 0x30
 8011dc6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011dc8:	69fb      	ldr	r3, [r7, #28]
 8011dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d010      	beq.n	8011df4 <HAL_SPI_IRQHandler+0x68>
 8011dd2:	6a3b      	ldr	r3, [r7, #32]
 8011dd4:	f003 0308 	and.w	r3, r3, #8
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d00b      	beq.n	8011df4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	699a      	ldr	r2, [r3, #24]
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011dea:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f000 f9cd 	bl	801218c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8011df2:	e192      	b.n	801211a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011df4:	69bb      	ldr	r3, [r7, #24]
 8011df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d113      	bne.n	8011e26 <HAL_SPI_IRQHandler+0x9a>
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	f003 0320 	and.w	r3, r3, #32
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d10e      	bne.n	8011e26 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011e08:	69bb      	ldr	r3, [r7, #24]
 8011e0a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d009      	beq.n	8011e26 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	4798      	blx	r3
    hspi->RxISR(hspi);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	4798      	blx	r3
    handled = 1UL;
 8011e22:	2301      	movs	r3, #1
 8011e24:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d10f      	bne.n	8011e50 <HAL_SPI_IRQHandler+0xc4>
 8011e30:	69bb      	ldr	r3, [r7, #24]
 8011e32:	f003 0301 	and.w	r3, r3, #1
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d00a      	beq.n	8011e50 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d105      	bne.n	8011e50 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	4798      	blx	r3
    handled = 1UL;
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011e50:	69bb      	ldr	r3, [r7, #24]
 8011e52:	f003 0320 	and.w	r3, r3, #32
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d10f      	bne.n	8011e7a <HAL_SPI_IRQHandler+0xee>
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	f003 0302 	and.w	r3, r3, #2
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d00a      	beq.n	8011e7a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011e64:	69bb      	ldr	r3, [r7, #24]
 8011e66:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d105      	bne.n	8011e7a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	4798      	blx	r3
    handled = 1UL;
 8011e76:	2301      	movs	r3, #1
 8011e78:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8011e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	f040 8147 	bne.w	8012110 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8011e82:	69bb      	ldr	r3, [r7, #24]
 8011e84:	f003 0308 	and.w	r3, r3, #8
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f000 808b 	beq.w	8011fa4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	699a      	ldr	r2, [r3, #24]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f042 0208 	orr.w	r2, r2, #8
 8011e9c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	699a      	ldr	r2, [r3, #24]
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	f042 0210 	orr.w	r2, r2, #16
 8011eac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	699a      	ldr	r2, [r3, #24]
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011ebc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	691a      	ldr	r2, [r3, #16]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f022 0208 	bic.w	r2, r2, #8
 8011ecc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	689b      	ldr	r3, [r3, #8]
 8011ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d13d      	bne.n	8011f58 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011edc:	e036      	b.n	8011f4c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	68db      	ldr	r3, [r3, #12]
 8011ee2:	2b0f      	cmp	r3, #15
 8011ee4:	d90b      	bls.n	8011efe <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	681a      	ldr	r2, [r3, #0]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011eee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011ef0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ef6:	1d1a      	adds	r2, r3, #4
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	665a      	str	r2, [r3, #100]	; 0x64
 8011efc:	e01d      	b.n	8011f3a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	2b07      	cmp	r3, #7
 8011f04:	d90b      	bls.n	8011f1e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f0a:	68fa      	ldr	r2, [r7, #12]
 8011f0c:	8812      	ldrh	r2, [r2, #0]
 8011f0e:	b292      	uxth	r2, r2
 8011f10:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f16:	1c9a      	adds	r2, r3, #2
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	665a      	str	r2, [r3, #100]	; 0x64
 8011f1c:	e00d      	b.n	8011f3a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f2a:	7812      	ldrb	r2, [r2, #0]
 8011f2c:	b2d2      	uxtb	r2, r2
 8011f2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f34:	1c5a      	adds	r2, r3, #1
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f40:	b29b      	uxth	r3, r3
 8011f42:	3b01      	subs	r3, #1
 8011f44:	b29a      	uxth	r2, r3
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d1c2      	bne.n	8011ede <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f000 f98f 	bl	801227c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2201      	movs	r2, #1
 8011f62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d003      	beq.n	8011f78 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f000 f901 	bl	8012178 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8011f76:	e0d0      	b.n	801211a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8011f78:	7cfb      	ldrb	r3, [r7, #19]
 8011f7a:	2b05      	cmp	r3, #5
 8011f7c:	d103      	bne.n	8011f86 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f000 f8e6 	bl	8012150 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011f84:	e0c6      	b.n	8012114 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8011f86:	7cfb      	ldrb	r3, [r7, #19]
 8011f88:	2b04      	cmp	r3, #4
 8011f8a:	d103      	bne.n	8011f94 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f000 f8d5 	bl	801213c <HAL_SPI_RxCpltCallback>
    return;
 8011f92:	e0bf      	b.n	8012114 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8011f94:	7cfb      	ldrb	r3, [r7, #19]
 8011f96:	2b03      	cmp	r3, #3
 8011f98:	f040 80bc 	bne.w	8012114 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f000 f8c3 	bl	8012128 <HAL_SPI_TxCpltCallback>
    return;
 8011fa2:	e0b7      	b.n	8012114 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8011fa4:	69bb      	ldr	r3, [r7, #24]
 8011fa6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	f000 80b5 	beq.w	801211a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d00f      	beq.n	8011fda <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011fc0:	f043 0204 	orr.w	r2, r3, #4
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	699a      	ldr	r2, [r3, #24]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011fd8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011fda:	69bb      	ldr	r3, [r7, #24]
 8011fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d00f      	beq.n	8012004 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011fea:	f043 0201 	orr.w	r2, r3, #1
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	699a      	ldr	r2, [r3, #24]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012002:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012004:	69bb      	ldr	r3, [r7, #24]
 8012006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801200a:	2b00      	cmp	r3, #0
 801200c:	d00f      	beq.n	801202e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012014:	f043 0208 	orr.w	r2, r3, #8
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	699a      	ldr	r2, [r3, #24]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801202c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801202e:	69bb      	ldr	r3, [r7, #24]
 8012030:	f003 0320 	and.w	r3, r3, #32
 8012034:	2b00      	cmp	r3, #0
 8012036:	d00f      	beq.n	8012058 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801203e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	699a      	ldr	r2, [r3, #24]
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	f042 0220 	orr.w	r2, r2, #32
 8012056:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801205e:	2b00      	cmp	r3, #0
 8012060:	d05a      	beq.n	8012118 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f022 0201 	bic.w	r2, r2, #1
 8012070:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	6919      	ldr	r1, [r3, #16]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681a      	ldr	r2, [r3, #0]
 801207c:	4b28      	ldr	r3, [pc, #160]	; (8012120 <HAL_SPI_IRQHandler+0x394>)
 801207e:	400b      	ands	r3, r1
 8012080:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012088:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801208c:	d138      	bne.n	8012100 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	689a      	ldr	r2, [r3, #8]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801209c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d013      	beq.n	80120ce <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80120aa:	4a1e      	ldr	r2, [pc, #120]	; (8012124 <HAL_SPI_IRQHandler+0x398>)
 80120ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7f6 fdae 	bl	8008c14 <HAL_DMA_Abort_IT>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d007      	beq.n	80120ce <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d020      	beq.n	8012118 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120da:	4a12      	ldr	r2, [pc, #72]	; (8012124 <HAL_SPI_IRQHandler+0x398>)
 80120dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7f6 fd96 	bl	8008c14 <HAL_DMA_Abort_IT>
 80120e8:	4603      	mov	r3, r0
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d014      	beq.n	8012118 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80120fe:	e00b      	b.n	8012118 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2201      	movs	r2, #1
 8012104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f000 f835 	bl	8012178 <HAL_SPI_ErrorCallback>
    return;
 801210e:	e003      	b.n	8012118 <HAL_SPI_IRQHandler+0x38c>
    return;
 8012110:	bf00      	nop
 8012112:	e002      	b.n	801211a <HAL_SPI_IRQHandler+0x38e>
    return;
 8012114:	bf00      	nop
 8012116:	e000      	b.n	801211a <HAL_SPI_IRQHandler+0x38e>
    return;
 8012118:	bf00      	nop
  }
}
 801211a:	3728      	adds	r7, #40	; 0x28
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}
 8012120:	fffffc94 	.word	0xfffffc94
 8012124:	08012249 	.word	0x08012249

08012128 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8012130:	bf00      	nop
 8012132:	370c      	adds	r7, #12
 8012134:	46bd      	mov	sp, r7
 8012136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213a:	4770      	bx	lr

0801213c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801213c:	b480      	push	{r7}
 801213e:	b083      	sub	sp, #12
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012144:	bf00      	nop
 8012146:	370c      	adds	r7, #12
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012158:	bf00      	nop
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012164:	b480      	push	{r7}
 8012166:	b083      	sub	sp, #12
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 801216c:	bf00      	nop
 801216e:	370c      	adds	r7, #12
 8012170:	46bd      	mov	sp, r7
 8012172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012176:	4770      	bx	lr

08012178 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012178:	b480      	push	{r7}
 801217a:	b083      	sub	sp, #12
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012180:	bf00      	nop
 8012182:	370c      	adds	r7, #12
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr

0801218c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801218c:	b480      	push	{r7}
 801218e:	b083      	sub	sp, #12
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012194:	bf00      	nop
 8012196:	370c      	adds	r7, #12
 8012198:	46bd      	mov	sp, r7
 801219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219e:	4770      	bx	lr

080121a0 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121ac:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80121b4:	b2db      	uxtb	r3, r3
 80121b6:	2b07      	cmp	r3, #7
 80121b8:	d011      	beq.n	80121de <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80121be:	69db      	ldr	r3, [r3, #28]
 80121c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80121c4:	d103      	bne.n	80121ce <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80121c6:	68f8      	ldr	r0, [r7, #12]
 80121c8:	f7ff ffb8 	bl	801213c <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80121cc:	e007      	b.n	80121de <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	691a      	ldr	r2, [r3, #16]
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	f042 0208 	orr.w	r2, r2, #8
 80121dc:	611a      	str	r2, [r3, #16]
}
 80121de:	bf00      	nop
 80121e0:	3710      	adds	r7, #16
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}

080121e6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80121e6:	b580      	push	{r7, lr}
 80121e8:	b084      	sub	sp, #16
 80121ea:	af00      	add	r7, sp, #0
 80121ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121f2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f7ff ffb5 	bl	8012164 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80121fa:	bf00      	nop
 80121fc:	3710      	adds	r7, #16
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}

08012202 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012202:	b580      	push	{r7, lr}
 8012204:	b084      	sub	sp, #16
 8012206:	af00      	add	r7, sp, #0
 8012208:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801220e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f7f7 fe7d 	bl	8009f10 <HAL_DMA_GetError>
 8012216:	4603      	mov	r3, r0
 8012218:	2b02      	cmp	r3, #2
 801221a:	d011      	beq.n	8012240 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 801221c:	68f8      	ldr	r0, [r7, #12]
 801221e:	f000 f82d 	bl	801227c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012228:	f043 0210 	orr.w	r2, r3, #16
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	2201      	movs	r2, #1
 8012236:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801223a:	68f8      	ldr	r0, [r7, #12]
 801223c:	f7ff ff9c 	bl	8012178 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012240:	bf00      	nop
 8012242:	3710      	adds	r7, #16
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012254:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	2200      	movs	r2, #0
 801225a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	2200      	movs	r2, #0
 8012262:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	2201      	movs	r2, #1
 801226a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801226e:	68f8      	ldr	r0, [r7, #12]
 8012270:	f7ff ff82 	bl	8012178 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012274:	bf00      	nop
 8012276:	3710      	adds	r7, #16
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}

0801227c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801227c:	b480      	push	{r7}
 801227e:	b085      	sub	sp, #20
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	695b      	ldr	r3, [r3, #20]
 801228a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	699a      	ldr	r2, [r3, #24]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f042 0208 	orr.w	r2, r2, #8
 801229a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	699a      	ldr	r2, [r3, #24]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f042 0210 	orr.w	r2, r2, #16
 80122aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	681a      	ldr	r2, [r3, #0]
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	f022 0201 	bic.w	r2, r2, #1
 80122ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	6919      	ldr	r1, [r3, #16]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681a      	ldr	r2, [r3, #0]
 80122c6:	4b3c      	ldr	r3, [pc, #240]	; (80123b8 <SPI_CloseTransfer+0x13c>)
 80122c8:	400b      	ands	r3, r1
 80122ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	689a      	ldr	r2, [r3, #8]
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80122da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80122e2:	b2db      	uxtb	r3, r3
 80122e4:	2b04      	cmp	r3, #4
 80122e6:	d014      	beq.n	8012312 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	f003 0320 	and.w	r3, r3, #32
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d00f      	beq.n	8012312 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	699a      	ldr	r2, [r3, #24]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	f042 0220 	orr.w	r2, r2, #32
 8012310:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012318:	b2db      	uxtb	r3, r3
 801231a:	2b03      	cmp	r3, #3
 801231c:	d014      	beq.n	8012348 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012324:	2b00      	cmp	r3, #0
 8012326:	d00f      	beq.n	8012348 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801232e:	f043 0204 	orr.w	r2, r3, #4
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	699a      	ldr	r2, [r3, #24]
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012346:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801234e:	2b00      	cmp	r3, #0
 8012350:	d00f      	beq.n	8012372 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012358:	f043 0201 	orr.w	r2, r3, #1
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	699a      	ldr	r2, [r3, #24]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012370:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012378:	2b00      	cmp	r3, #0
 801237a:	d00f      	beq.n	801239c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012382:	f043 0208 	orr.w	r2, r3, #8
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	699a      	ldr	r2, [r3, #24]
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801239a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2200      	movs	r2, #0
 80123a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2200      	movs	r2, #0
 80123a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80123ac:	bf00      	nop
 80123ae:	3714      	adds	r7, #20
 80123b0:	46bd      	mov	sp, r7
 80123b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b6:	4770      	bx	lr
 80123b8:	fffffc90 	.word	0xfffffc90

080123bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80123bc:	b480      	push	{r7}
 80123be:	b085      	sub	sp, #20
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123c8:	095b      	lsrs	r3, r3, #5
 80123ca:	3301      	adds	r3, #1
 80123cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	68db      	ldr	r3, [r3, #12]
 80123d2:	3301      	adds	r3, #1
 80123d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	3307      	adds	r3, #7
 80123da:	08db      	lsrs	r3, r3, #3
 80123dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	68fa      	ldr	r2, [r7, #12]
 80123e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3714      	adds	r7, #20
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr

080123f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80123f2:	b580      	push	{r7, lr}
 80123f4:	b082      	sub	sp, #8
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d101      	bne.n	8012404 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012400:	2301      	movs	r3, #1
 8012402:	e049      	b.n	8012498 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801240a:	b2db      	uxtb	r3, r3
 801240c:	2b00      	cmp	r3, #0
 801240e:	d106      	bne.n	801241e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2200      	movs	r2, #0
 8012414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f7f2 fb5f 	bl	8004adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2202      	movs	r2, #2
 8012422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681a      	ldr	r2, [r3, #0]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	3304      	adds	r3, #4
 801242e:	4619      	mov	r1, r3
 8012430:	4610      	mov	r0, r2
 8012432:	f000 fe7d 	bl	8013130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2201      	movs	r2, #1
 801243a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2201      	movs	r2, #1
 8012442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2201      	movs	r2, #1
 801244a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2201      	movs	r2, #1
 8012452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2201      	movs	r2, #1
 801245a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2201      	movs	r2, #1
 8012462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2201      	movs	r2, #1
 801246a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2201      	movs	r2, #1
 8012472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2201      	movs	r2, #1
 801247a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2201      	movs	r2, #1
 8012482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2201      	movs	r2, #1
 801248a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2201      	movs	r2, #1
 8012492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012496:	2300      	movs	r3, #0
}
 8012498:	4618      	mov	r0, r3
 801249a:	3708      	adds	r7, #8
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}

080124a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80124a0:	b480      	push	{r7}
 80124a2:	b085      	sub	sp, #20
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	d001      	beq.n	80124b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80124b4:	2301      	movs	r3, #1
 80124b6:	e054      	b.n	8012562 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2202      	movs	r2, #2
 80124bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	68da      	ldr	r2, [r3, #12]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	f042 0201 	orr.w	r2, r2, #1
 80124ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	4a26      	ldr	r2, [pc, #152]	; (8012570 <HAL_TIM_Base_Start_IT+0xd0>)
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d022      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124e2:	d01d      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	4a22      	ldr	r2, [pc, #136]	; (8012574 <HAL_TIM_Base_Start_IT+0xd4>)
 80124ea:	4293      	cmp	r3, r2
 80124ec:	d018      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	4a21      	ldr	r2, [pc, #132]	; (8012578 <HAL_TIM_Base_Start_IT+0xd8>)
 80124f4:	4293      	cmp	r3, r2
 80124f6:	d013      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	4a1f      	ldr	r2, [pc, #124]	; (801257c <HAL_TIM_Base_Start_IT+0xdc>)
 80124fe:	4293      	cmp	r3, r2
 8012500:	d00e      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	4a1e      	ldr	r2, [pc, #120]	; (8012580 <HAL_TIM_Base_Start_IT+0xe0>)
 8012508:	4293      	cmp	r3, r2
 801250a:	d009      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	4a1c      	ldr	r2, [pc, #112]	; (8012584 <HAL_TIM_Base_Start_IT+0xe4>)
 8012512:	4293      	cmp	r3, r2
 8012514:	d004      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	4a1b      	ldr	r2, [pc, #108]	; (8012588 <HAL_TIM_Base_Start_IT+0xe8>)
 801251c:	4293      	cmp	r3, r2
 801251e:	d115      	bne.n	801254c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	689a      	ldr	r2, [r3, #8]
 8012526:	4b19      	ldr	r3, [pc, #100]	; (801258c <HAL_TIM_Base_Start_IT+0xec>)
 8012528:	4013      	ands	r3, r2
 801252a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2b06      	cmp	r3, #6
 8012530:	d015      	beq.n	801255e <HAL_TIM_Base_Start_IT+0xbe>
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012538:	d011      	beq.n	801255e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f042 0201 	orr.w	r2, r2, #1
 8012548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801254a:	e008      	b.n	801255e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	f042 0201 	orr.w	r2, r2, #1
 801255a:	601a      	str	r2, [r3, #0]
 801255c:	e000      	b.n	8012560 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801255e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012560:	2300      	movs	r3, #0
}
 8012562:	4618      	mov	r0, r3
 8012564:	3714      	adds	r7, #20
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr
 801256e:	bf00      	nop
 8012570:	40010000 	.word	0x40010000
 8012574:	40000400 	.word	0x40000400
 8012578:	40000800 	.word	0x40000800
 801257c:	40000c00 	.word	0x40000c00
 8012580:	40010400 	.word	0x40010400
 8012584:	40001800 	.word	0x40001800
 8012588:	40014000 	.word	0x40014000
 801258c:	00010007 	.word	0x00010007

08012590 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801259a:	2300      	movs	r3, #0
 801259c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d109      	bne.n	80125b8 <HAL_TIM_OC_Start_IT+0x28>
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80125aa:	b2db      	uxtb	r3, r3
 80125ac:	2b01      	cmp	r3, #1
 80125ae:	bf14      	ite	ne
 80125b0:	2301      	movne	r3, #1
 80125b2:	2300      	moveq	r3, #0
 80125b4:	b2db      	uxtb	r3, r3
 80125b6:	e03c      	b.n	8012632 <HAL_TIM_OC_Start_IT+0xa2>
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	2b04      	cmp	r3, #4
 80125bc:	d109      	bne.n	80125d2 <HAL_TIM_OC_Start_IT+0x42>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80125c4:	b2db      	uxtb	r3, r3
 80125c6:	2b01      	cmp	r3, #1
 80125c8:	bf14      	ite	ne
 80125ca:	2301      	movne	r3, #1
 80125cc:	2300      	moveq	r3, #0
 80125ce:	b2db      	uxtb	r3, r3
 80125d0:	e02f      	b.n	8012632 <HAL_TIM_OC_Start_IT+0xa2>
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	2b08      	cmp	r3, #8
 80125d6:	d109      	bne.n	80125ec <HAL_TIM_OC_Start_IT+0x5c>
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	2b01      	cmp	r3, #1
 80125e2:	bf14      	ite	ne
 80125e4:	2301      	movne	r3, #1
 80125e6:	2300      	moveq	r3, #0
 80125e8:	b2db      	uxtb	r3, r3
 80125ea:	e022      	b.n	8012632 <HAL_TIM_OC_Start_IT+0xa2>
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	2b0c      	cmp	r3, #12
 80125f0:	d109      	bne.n	8012606 <HAL_TIM_OC_Start_IT+0x76>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80125f8:	b2db      	uxtb	r3, r3
 80125fa:	2b01      	cmp	r3, #1
 80125fc:	bf14      	ite	ne
 80125fe:	2301      	movne	r3, #1
 8012600:	2300      	moveq	r3, #0
 8012602:	b2db      	uxtb	r3, r3
 8012604:	e015      	b.n	8012632 <HAL_TIM_OC_Start_IT+0xa2>
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	2b10      	cmp	r3, #16
 801260a:	d109      	bne.n	8012620 <HAL_TIM_OC_Start_IT+0x90>
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012612:	b2db      	uxtb	r3, r3
 8012614:	2b01      	cmp	r3, #1
 8012616:	bf14      	ite	ne
 8012618:	2301      	movne	r3, #1
 801261a:	2300      	moveq	r3, #0
 801261c:	b2db      	uxtb	r3, r3
 801261e:	e008      	b.n	8012632 <HAL_TIM_OC_Start_IT+0xa2>
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012626:	b2db      	uxtb	r3, r3
 8012628:	2b01      	cmp	r3, #1
 801262a:	bf14      	ite	ne
 801262c:	2301      	movne	r3, #1
 801262e:	2300      	moveq	r3, #0
 8012630:	b2db      	uxtb	r3, r3
 8012632:	2b00      	cmp	r3, #0
 8012634:	d001      	beq.n	801263a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8012636:	2301      	movs	r3, #1
 8012638:	e0ec      	b.n	8012814 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d104      	bne.n	801264a <HAL_TIM_OC_Start_IT+0xba>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2202      	movs	r2, #2
 8012644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012648:	e023      	b.n	8012692 <HAL_TIM_OC_Start_IT+0x102>
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	2b04      	cmp	r3, #4
 801264e:	d104      	bne.n	801265a <HAL_TIM_OC_Start_IT+0xca>
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2202      	movs	r2, #2
 8012654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012658:	e01b      	b.n	8012692 <HAL_TIM_OC_Start_IT+0x102>
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	2b08      	cmp	r3, #8
 801265e:	d104      	bne.n	801266a <HAL_TIM_OC_Start_IT+0xda>
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2202      	movs	r2, #2
 8012664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012668:	e013      	b.n	8012692 <HAL_TIM_OC_Start_IT+0x102>
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	2b0c      	cmp	r3, #12
 801266e:	d104      	bne.n	801267a <HAL_TIM_OC_Start_IT+0xea>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2202      	movs	r2, #2
 8012674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012678:	e00b      	b.n	8012692 <HAL_TIM_OC_Start_IT+0x102>
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	2b10      	cmp	r3, #16
 801267e:	d104      	bne.n	801268a <HAL_TIM_OC_Start_IT+0xfa>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2202      	movs	r2, #2
 8012684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012688:	e003      	b.n	8012692 <HAL_TIM_OC_Start_IT+0x102>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2202      	movs	r2, #2
 801268e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	2b0c      	cmp	r3, #12
 8012696:	d841      	bhi.n	801271c <HAL_TIM_OC_Start_IT+0x18c>
 8012698:	a201      	add	r2, pc, #4	; (adr r2, 80126a0 <HAL_TIM_OC_Start_IT+0x110>)
 801269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801269e:	bf00      	nop
 80126a0:	080126d5 	.word	0x080126d5
 80126a4:	0801271d 	.word	0x0801271d
 80126a8:	0801271d 	.word	0x0801271d
 80126ac:	0801271d 	.word	0x0801271d
 80126b0:	080126e7 	.word	0x080126e7
 80126b4:	0801271d 	.word	0x0801271d
 80126b8:	0801271d 	.word	0x0801271d
 80126bc:	0801271d 	.word	0x0801271d
 80126c0:	080126f9 	.word	0x080126f9
 80126c4:	0801271d 	.word	0x0801271d
 80126c8:	0801271d 	.word	0x0801271d
 80126cc:	0801271d 	.word	0x0801271d
 80126d0:	0801270b 	.word	0x0801270b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	68da      	ldr	r2, [r3, #12]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f042 0202 	orr.w	r2, r2, #2
 80126e2:	60da      	str	r2, [r3, #12]
      break;
 80126e4:	e01d      	b.n	8012722 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	68da      	ldr	r2, [r3, #12]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	f042 0204 	orr.w	r2, r2, #4
 80126f4:	60da      	str	r2, [r3, #12]
      break;
 80126f6:	e014      	b.n	8012722 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	68da      	ldr	r2, [r3, #12]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	f042 0208 	orr.w	r2, r2, #8
 8012706:	60da      	str	r2, [r3, #12]
      break;
 8012708:	e00b      	b.n	8012722 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	68da      	ldr	r2, [r3, #12]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	f042 0210 	orr.w	r2, r2, #16
 8012718:	60da      	str	r2, [r3, #12]
      break;
 801271a:	e002      	b.n	8012722 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 801271c:	2301      	movs	r3, #1
 801271e:	73fb      	strb	r3, [r7, #15]
      break;
 8012720:	bf00      	nop
  }

  if (status == HAL_OK)
 8012722:	7bfb      	ldrb	r3, [r7, #15]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d174      	bne.n	8012812 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	2201      	movs	r2, #1
 801272e:	6839      	ldr	r1, [r7, #0]
 8012730:	4618      	mov	r0, r3
 8012732:	f001 f917 	bl	8013964 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	4a38      	ldr	r2, [pc, #224]	; (801281c <HAL_TIM_OC_Start_IT+0x28c>)
 801273c:	4293      	cmp	r3, r2
 801273e:	d013      	beq.n	8012768 <HAL_TIM_OC_Start_IT+0x1d8>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a36      	ldr	r2, [pc, #216]	; (8012820 <HAL_TIM_OC_Start_IT+0x290>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d00e      	beq.n	8012768 <HAL_TIM_OC_Start_IT+0x1d8>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	4a35      	ldr	r2, [pc, #212]	; (8012824 <HAL_TIM_OC_Start_IT+0x294>)
 8012750:	4293      	cmp	r3, r2
 8012752:	d009      	beq.n	8012768 <HAL_TIM_OC_Start_IT+0x1d8>
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	4a33      	ldr	r2, [pc, #204]	; (8012828 <HAL_TIM_OC_Start_IT+0x298>)
 801275a:	4293      	cmp	r3, r2
 801275c:	d004      	beq.n	8012768 <HAL_TIM_OC_Start_IT+0x1d8>
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	4a32      	ldr	r2, [pc, #200]	; (801282c <HAL_TIM_OC_Start_IT+0x29c>)
 8012764:	4293      	cmp	r3, r2
 8012766:	d101      	bne.n	801276c <HAL_TIM_OC_Start_IT+0x1dc>
 8012768:	2301      	movs	r3, #1
 801276a:	e000      	b.n	801276e <HAL_TIM_OC_Start_IT+0x1de>
 801276c:	2300      	movs	r3, #0
 801276e:	2b00      	cmp	r3, #0
 8012770:	d007      	beq.n	8012782 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012780:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	4a25      	ldr	r2, [pc, #148]	; (801281c <HAL_TIM_OC_Start_IT+0x28c>)
 8012788:	4293      	cmp	r3, r2
 801278a:	d022      	beq.n	80127d2 <HAL_TIM_OC_Start_IT+0x242>
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012794:	d01d      	beq.n	80127d2 <HAL_TIM_OC_Start_IT+0x242>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	4a25      	ldr	r2, [pc, #148]	; (8012830 <HAL_TIM_OC_Start_IT+0x2a0>)
 801279c:	4293      	cmp	r3, r2
 801279e:	d018      	beq.n	80127d2 <HAL_TIM_OC_Start_IT+0x242>
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	4a23      	ldr	r2, [pc, #140]	; (8012834 <HAL_TIM_OC_Start_IT+0x2a4>)
 80127a6:	4293      	cmp	r3, r2
 80127a8:	d013      	beq.n	80127d2 <HAL_TIM_OC_Start_IT+0x242>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	4a22      	ldr	r2, [pc, #136]	; (8012838 <HAL_TIM_OC_Start_IT+0x2a8>)
 80127b0:	4293      	cmp	r3, r2
 80127b2:	d00e      	beq.n	80127d2 <HAL_TIM_OC_Start_IT+0x242>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	4a19      	ldr	r2, [pc, #100]	; (8012820 <HAL_TIM_OC_Start_IT+0x290>)
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d009      	beq.n	80127d2 <HAL_TIM_OC_Start_IT+0x242>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	4a1e      	ldr	r2, [pc, #120]	; (801283c <HAL_TIM_OC_Start_IT+0x2ac>)
 80127c4:	4293      	cmp	r3, r2
 80127c6:	d004      	beq.n	80127d2 <HAL_TIM_OC_Start_IT+0x242>
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	4a15      	ldr	r2, [pc, #84]	; (8012824 <HAL_TIM_OC_Start_IT+0x294>)
 80127ce:	4293      	cmp	r3, r2
 80127d0:	d115      	bne.n	80127fe <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	689a      	ldr	r2, [r3, #8]
 80127d8:	4b19      	ldr	r3, [pc, #100]	; (8012840 <HAL_TIM_OC_Start_IT+0x2b0>)
 80127da:	4013      	ands	r3, r2
 80127dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	2b06      	cmp	r3, #6
 80127e2:	d015      	beq.n	8012810 <HAL_TIM_OC_Start_IT+0x280>
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127ea:	d011      	beq.n	8012810 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	681a      	ldr	r2, [r3, #0]
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f042 0201 	orr.w	r2, r2, #1
 80127fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127fc:	e008      	b.n	8012810 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	681a      	ldr	r2, [r3, #0]
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	f042 0201 	orr.w	r2, r2, #1
 801280c:	601a      	str	r2, [r3, #0]
 801280e:	e000      	b.n	8012812 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012810:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012812:	7bfb      	ldrb	r3, [r7, #15]
}
 8012814:	4618      	mov	r0, r3
 8012816:	3710      	adds	r7, #16
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}
 801281c:	40010000 	.word	0x40010000
 8012820:	40010400 	.word	0x40010400
 8012824:	40014000 	.word	0x40014000
 8012828:	40014400 	.word	0x40014400
 801282c:	40014800 	.word	0x40014800
 8012830:	40000400 	.word	0x40000400
 8012834:	40000800 	.word	0x40000800
 8012838:	40000c00 	.word	0x40000c00
 801283c:	40001800 	.word	0x40001800
 8012840:	00010007 	.word	0x00010007

08012844 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b084      	sub	sp, #16
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801284e:	2300      	movs	r3, #0
 8012850:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	2b0c      	cmp	r3, #12
 8012856:	d841      	bhi.n	80128dc <HAL_TIM_OC_Stop_IT+0x98>
 8012858:	a201      	add	r2, pc, #4	; (adr r2, 8012860 <HAL_TIM_OC_Stop_IT+0x1c>)
 801285a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801285e:	bf00      	nop
 8012860:	08012895 	.word	0x08012895
 8012864:	080128dd 	.word	0x080128dd
 8012868:	080128dd 	.word	0x080128dd
 801286c:	080128dd 	.word	0x080128dd
 8012870:	080128a7 	.word	0x080128a7
 8012874:	080128dd 	.word	0x080128dd
 8012878:	080128dd 	.word	0x080128dd
 801287c:	080128dd 	.word	0x080128dd
 8012880:	080128b9 	.word	0x080128b9
 8012884:	080128dd 	.word	0x080128dd
 8012888:	080128dd 	.word	0x080128dd
 801288c:	080128dd 	.word	0x080128dd
 8012890:	080128cb 	.word	0x080128cb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	68da      	ldr	r2, [r3, #12]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	f022 0202 	bic.w	r2, r2, #2
 80128a2:	60da      	str	r2, [r3, #12]
      break;
 80128a4:	e01d      	b.n	80128e2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	68da      	ldr	r2, [r3, #12]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f022 0204 	bic.w	r2, r2, #4
 80128b4:	60da      	str	r2, [r3, #12]
      break;
 80128b6:	e014      	b.n	80128e2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	68da      	ldr	r2, [r3, #12]
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	f022 0208 	bic.w	r2, r2, #8
 80128c6:	60da      	str	r2, [r3, #12]
      break;
 80128c8:	e00b      	b.n	80128e2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	68da      	ldr	r2, [r3, #12]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	f022 0210 	bic.w	r2, r2, #16
 80128d8:	60da      	str	r2, [r3, #12]
      break;
 80128da:	e002      	b.n	80128e2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80128dc:	2301      	movs	r3, #1
 80128de:	73fb      	strb	r3, [r7, #15]
      break;
 80128e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80128e2:	7bfb      	ldrb	r3, [r7, #15]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	f040 8081 	bne.w	80129ec <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2200      	movs	r2, #0
 80128f0:	6839      	ldr	r1, [r7, #0]
 80128f2:	4618      	mov	r0, r3
 80128f4:	f001 f836 	bl	8013964 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	4a3e      	ldr	r2, [pc, #248]	; (80129f8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80128fe:	4293      	cmp	r3, r2
 8012900:	d013      	beq.n	801292a <HAL_TIM_OC_Stop_IT+0xe6>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	4a3d      	ldr	r2, [pc, #244]	; (80129fc <HAL_TIM_OC_Stop_IT+0x1b8>)
 8012908:	4293      	cmp	r3, r2
 801290a:	d00e      	beq.n	801292a <HAL_TIM_OC_Stop_IT+0xe6>
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	4a3b      	ldr	r2, [pc, #236]	; (8012a00 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012912:	4293      	cmp	r3, r2
 8012914:	d009      	beq.n	801292a <HAL_TIM_OC_Stop_IT+0xe6>
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	4a3a      	ldr	r2, [pc, #232]	; (8012a04 <HAL_TIM_OC_Stop_IT+0x1c0>)
 801291c:	4293      	cmp	r3, r2
 801291e:	d004      	beq.n	801292a <HAL_TIM_OC_Stop_IT+0xe6>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	4a38      	ldr	r2, [pc, #224]	; (8012a08 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012926:	4293      	cmp	r3, r2
 8012928:	d101      	bne.n	801292e <HAL_TIM_OC_Stop_IT+0xea>
 801292a:	2301      	movs	r3, #1
 801292c:	e000      	b.n	8012930 <HAL_TIM_OC_Stop_IT+0xec>
 801292e:	2300      	movs	r3, #0
 8012930:	2b00      	cmp	r3, #0
 8012932:	d017      	beq.n	8012964 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	6a1a      	ldr	r2, [r3, #32]
 801293a:	f241 1311 	movw	r3, #4369	; 0x1111
 801293e:	4013      	ands	r3, r2
 8012940:	2b00      	cmp	r3, #0
 8012942:	d10f      	bne.n	8012964 <HAL_TIM_OC_Stop_IT+0x120>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	6a1a      	ldr	r2, [r3, #32]
 801294a:	f240 4344 	movw	r3, #1092	; 0x444
 801294e:	4013      	ands	r3, r2
 8012950:	2b00      	cmp	r3, #0
 8012952:	d107      	bne.n	8012964 <HAL_TIM_OC_Stop_IT+0x120>
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012962:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	6a1a      	ldr	r2, [r3, #32]
 801296a:	f241 1311 	movw	r3, #4369	; 0x1111
 801296e:	4013      	ands	r3, r2
 8012970:	2b00      	cmp	r3, #0
 8012972:	d10f      	bne.n	8012994 <HAL_TIM_OC_Stop_IT+0x150>
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	6a1a      	ldr	r2, [r3, #32]
 801297a:	f240 4344 	movw	r3, #1092	; 0x444
 801297e:	4013      	ands	r3, r2
 8012980:	2b00      	cmp	r3, #0
 8012982:	d107      	bne.n	8012994 <HAL_TIM_OC_Stop_IT+0x150>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	681a      	ldr	r2, [r3, #0]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f022 0201 	bic.w	r2, r2, #1
 8012992:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d104      	bne.n	80129a4 <HAL_TIM_OC_Stop_IT+0x160>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2201      	movs	r2, #1
 801299e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80129a2:	e023      	b.n	80129ec <HAL_TIM_OC_Stop_IT+0x1a8>
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	2b04      	cmp	r3, #4
 80129a8:	d104      	bne.n	80129b4 <HAL_TIM_OC_Stop_IT+0x170>
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2201      	movs	r2, #1
 80129ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80129b2:	e01b      	b.n	80129ec <HAL_TIM_OC_Stop_IT+0x1a8>
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	2b08      	cmp	r3, #8
 80129b8:	d104      	bne.n	80129c4 <HAL_TIM_OC_Stop_IT+0x180>
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2201      	movs	r2, #1
 80129be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80129c2:	e013      	b.n	80129ec <HAL_TIM_OC_Stop_IT+0x1a8>
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	2b0c      	cmp	r3, #12
 80129c8:	d104      	bne.n	80129d4 <HAL_TIM_OC_Stop_IT+0x190>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2201      	movs	r2, #1
 80129ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80129d2:	e00b      	b.n	80129ec <HAL_TIM_OC_Stop_IT+0x1a8>
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	2b10      	cmp	r3, #16
 80129d8:	d104      	bne.n	80129e4 <HAL_TIM_OC_Stop_IT+0x1a0>
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2201      	movs	r2, #1
 80129de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80129e2:	e003      	b.n	80129ec <HAL_TIM_OC_Stop_IT+0x1a8>
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2201      	movs	r2, #1
 80129e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80129ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3710      	adds	r7, #16
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	40010000 	.word	0x40010000
 80129fc:	40010400 	.word	0x40010400
 8012a00:	40014000 	.word	0x40014000
 8012a04:	40014400 	.word	0x40014400
 8012a08:	40014800 	.word	0x40014800

08012a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d101      	bne.n	8012a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	e049      	b.n	8012ab2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012a24:	b2db      	uxtb	r3, r3
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d106      	bne.n	8012a38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f000 f841 	bl	8012aba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2202      	movs	r2, #2
 8012a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681a      	ldr	r2, [r3, #0]
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	3304      	adds	r3, #4
 8012a48:	4619      	mov	r1, r3
 8012a4a:	4610      	mov	r0, r2
 8012a4c:	f000 fb70 	bl	8013130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2201      	movs	r2, #1
 8012a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2201      	movs	r2, #1
 8012a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2201      	movs	r2, #1
 8012a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2201      	movs	r2, #1
 8012a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2201      	movs	r2, #1
 8012a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2201      	movs	r2, #1
 8012a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	2201      	movs	r2, #1
 8012a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2201      	movs	r2, #1
 8012a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2201      	movs	r2, #1
 8012a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2201      	movs	r2, #1
 8012aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012ab0:	2300      	movs	r3, #0
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3708      	adds	r7, #8
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}

08012aba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012aba:	b480      	push	{r7}
 8012abc:	b083      	sub	sp, #12
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012ac2:	bf00      	nop
 8012ac4:	370c      	adds	r7, #12
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012acc:	4770      	bx	lr

08012ace <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012ace:	b580      	push	{r7, lr}
 8012ad0:	b084      	sub	sp, #16
 8012ad2:	af00      	add	r7, sp, #0
 8012ad4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	68db      	ldr	r3, [r3, #12]
 8012adc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	691b      	ldr	r3, [r3, #16]
 8012ae4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	f003 0302 	and.w	r3, r3, #2
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d020      	beq.n	8012b32 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	f003 0302 	and.w	r3, r3, #2
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d01b      	beq.n	8012b32 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	f06f 0202 	mvn.w	r2, #2
 8012b02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2201      	movs	r2, #1
 8012b08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	699b      	ldr	r3, [r3, #24]
 8012b10:	f003 0303 	and.w	r3, r3, #3
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d003      	beq.n	8012b20 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f000 faeb 	bl	80130f4 <HAL_TIM_IC_CaptureCallback>
 8012b1e:	e005      	b.n	8012b2c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7ef fea7 	bl	8002874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f000 faee 	bl	8013108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	f003 0304 	and.w	r3, r3, #4
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d020      	beq.n	8012b7e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	f003 0304 	and.w	r3, r3, #4
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d01b      	beq.n	8012b7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	f06f 0204 	mvn.w	r2, #4
 8012b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2202      	movs	r2, #2
 8012b54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	699b      	ldr	r3, [r3, #24]
 8012b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d003      	beq.n	8012b6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012b64:	6878      	ldr	r0, [r7, #4]
 8012b66:	f000 fac5 	bl	80130f4 <HAL_TIM_IC_CaptureCallback>
 8012b6a:	e005      	b.n	8012b78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	f7ef fe81 	bl	8002874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f000 fac8 	bl	8013108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	f003 0308 	and.w	r3, r3, #8
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d020      	beq.n	8012bca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	f003 0308 	and.w	r3, r3, #8
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d01b      	beq.n	8012bca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	f06f 0208 	mvn.w	r2, #8
 8012b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2204      	movs	r2, #4
 8012ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	69db      	ldr	r3, [r3, #28]
 8012ba8:	f003 0303 	and.w	r3, r3, #3
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d003      	beq.n	8012bb8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f000 fa9f 	bl	80130f4 <HAL_TIM_IC_CaptureCallback>
 8012bb6:	e005      	b.n	8012bc4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	f7ef fe5b 	bl	8002874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f000 faa2 	bl	8013108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	f003 0310 	and.w	r3, r3, #16
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d020      	beq.n	8012c16 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	f003 0310 	and.w	r3, r3, #16
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d01b      	beq.n	8012c16 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f06f 0210 	mvn.w	r2, #16
 8012be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2208      	movs	r2, #8
 8012bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	69db      	ldr	r3, [r3, #28]
 8012bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d003      	beq.n	8012c04 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f000 fa79 	bl	80130f4 <HAL_TIM_IC_CaptureCallback>
 8012c02:	e005      	b.n	8012c10 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f7ef fe35 	bl	8002874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f000 fa7c 	bl	8013108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2200      	movs	r2, #0
 8012c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	f003 0301 	and.w	r3, r3, #1
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d00c      	beq.n	8012c3a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	f003 0301 	and.w	r3, r3, #1
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d007      	beq.n	8012c3a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	f06f 0201 	mvn.w	r2, #1
 8012c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	f7f0 fd43 	bl	80036c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d104      	bne.n	8012c4e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d00c      	beq.n	8012c68 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d007      	beq.n	8012c68 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8012c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f000 ffba 	bl	8013bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d00c      	beq.n	8012c8c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d007      	beq.n	8012c8c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f000 ffb2 	bl	8013bf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d00c      	beq.n	8012cb0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d007      	beq.n	8012cb0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f000 fa36 	bl	801311c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	f003 0320 	and.w	r3, r3, #32
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d00c      	beq.n	8012cd4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	f003 0320 	and.w	r3, r3, #32
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d007      	beq.n	8012cd4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	f06f 0220 	mvn.w	r2, #32
 8012ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f000 ff7a 	bl	8013bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012cd4:	bf00      	nop
 8012cd6:	3710      	adds	r7, #16
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}

08012cdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b086      	sub	sp, #24
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	60f8      	str	r0, [r7, #12]
 8012ce4:	60b9      	str	r1, [r7, #8]
 8012ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012cf2:	2b01      	cmp	r3, #1
 8012cf4:	d101      	bne.n	8012cfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012cf6:	2302      	movs	r3, #2
 8012cf8:	e0ff      	b.n	8012efa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	2201      	movs	r2, #1
 8012cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	2b14      	cmp	r3, #20
 8012d06:	f200 80f0 	bhi.w	8012eea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012d0a:	a201      	add	r2, pc, #4	; (adr r2, 8012d10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d10:	08012d65 	.word	0x08012d65
 8012d14:	08012eeb 	.word	0x08012eeb
 8012d18:	08012eeb 	.word	0x08012eeb
 8012d1c:	08012eeb 	.word	0x08012eeb
 8012d20:	08012da5 	.word	0x08012da5
 8012d24:	08012eeb 	.word	0x08012eeb
 8012d28:	08012eeb 	.word	0x08012eeb
 8012d2c:	08012eeb 	.word	0x08012eeb
 8012d30:	08012de7 	.word	0x08012de7
 8012d34:	08012eeb 	.word	0x08012eeb
 8012d38:	08012eeb 	.word	0x08012eeb
 8012d3c:	08012eeb 	.word	0x08012eeb
 8012d40:	08012e27 	.word	0x08012e27
 8012d44:	08012eeb 	.word	0x08012eeb
 8012d48:	08012eeb 	.word	0x08012eeb
 8012d4c:	08012eeb 	.word	0x08012eeb
 8012d50:	08012e69 	.word	0x08012e69
 8012d54:	08012eeb 	.word	0x08012eeb
 8012d58:	08012eeb 	.word	0x08012eeb
 8012d5c:	08012eeb 	.word	0x08012eeb
 8012d60:	08012ea9 	.word	0x08012ea9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	68b9      	ldr	r1, [r7, #8]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f000 fa86 	bl	801327c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	699a      	ldr	r2, [r3, #24]
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	f042 0208 	orr.w	r2, r2, #8
 8012d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	699a      	ldr	r2, [r3, #24]
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	f022 0204 	bic.w	r2, r2, #4
 8012d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	6999      	ldr	r1, [r3, #24]
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	691a      	ldr	r2, [r3, #16]
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	430a      	orrs	r2, r1
 8012da0:	619a      	str	r2, [r3, #24]
      break;
 8012da2:	e0a5      	b.n	8012ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	68b9      	ldr	r1, [r7, #8]
 8012daa:	4618      	mov	r0, r3
 8012dac:	f000 faf6 	bl	801339c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	699a      	ldr	r2, [r3, #24]
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	699a      	ldr	r2, [r3, #24]
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	6999      	ldr	r1, [r3, #24]
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	691b      	ldr	r3, [r3, #16]
 8012dda:	021a      	lsls	r2, r3, #8
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	430a      	orrs	r2, r1
 8012de2:	619a      	str	r2, [r3, #24]
      break;
 8012de4:	e084      	b.n	8012ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	68b9      	ldr	r1, [r7, #8]
 8012dec:	4618      	mov	r0, r3
 8012dee:	f000 fb5f 	bl	80134b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	69da      	ldr	r2, [r3, #28]
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	f042 0208 	orr.w	r2, r2, #8
 8012e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	69da      	ldr	r2, [r3, #28]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	f022 0204 	bic.w	r2, r2, #4
 8012e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	69d9      	ldr	r1, [r3, #28]
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	691a      	ldr	r2, [r3, #16]
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	430a      	orrs	r2, r1
 8012e22:	61da      	str	r2, [r3, #28]
      break;
 8012e24:	e064      	b.n	8012ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	68b9      	ldr	r1, [r7, #8]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f000 fbc7 	bl	80135c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	69da      	ldr	r2, [r3, #28]
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	69da      	ldr	r2, [r3, #28]
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	69d9      	ldr	r1, [r3, #28]
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	691b      	ldr	r3, [r3, #16]
 8012e5c:	021a      	lsls	r2, r3, #8
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	430a      	orrs	r2, r1
 8012e64:	61da      	str	r2, [r3, #28]
      break;
 8012e66:	e043      	b.n	8012ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	68b9      	ldr	r1, [r7, #8]
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f000 fc10 	bl	8013694 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	f042 0208 	orr.w	r2, r2, #8
 8012e82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	f022 0204 	bic.w	r2, r2, #4
 8012e92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	691a      	ldr	r2, [r3, #16]
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	430a      	orrs	r2, r1
 8012ea4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012ea6:	e023      	b.n	8012ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	68b9      	ldr	r1, [r7, #8]
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f000 fc54 	bl	801375c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012ec2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012ed2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	691b      	ldr	r3, [r3, #16]
 8012ede:	021a      	lsls	r2, r3, #8
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	430a      	orrs	r2, r1
 8012ee6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012ee8:	e002      	b.n	8012ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012eea:	2301      	movs	r3, #1
 8012eec:	75fb      	strb	r3, [r7, #23]
      break;
 8012eee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3718      	adds	r7, #24
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}
 8012f02:	bf00      	nop

08012f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b084      	sub	sp, #16
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
 8012f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012f18:	2b01      	cmp	r3, #1
 8012f1a:	d101      	bne.n	8012f20 <HAL_TIM_ConfigClockSource+0x1c>
 8012f1c:	2302      	movs	r3, #2
 8012f1e:	e0dc      	b.n	80130da <HAL_TIM_ConfigClockSource+0x1d6>
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2201      	movs	r2, #1
 8012f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2202      	movs	r2, #2
 8012f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	689b      	ldr	r3, [r3, #8]
 8012f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012f38:	68ba      	ldr	r2, [r7, #8]
 8012f3a:	4b6a      	ldr	r3, [pc, #424]	; (80130e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012f3c:	4013      	ands	r3, r2
 8012f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	68ba      	ldr	r2, [r7, #8]
 8012f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	4a64      	ldr	r2, [pc, #400]	; (80130e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012f56:	4293      	cmp	r3, r2
 8012f58:	f000 80a9 	beq.w	80130ae <HAL_TIM_ConfigClockSource+0x1aa>
 8012f5c:	4a62      	ldr	r2, [pc, #392]	; (80130e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012f5e:	4293      	cmp	r3, r2
 8012f60:	f200 80ae 	bhi.w	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f64:	4a61      	ldr	r2, [pc, #388]	; (80130ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	f000 80a1 	beq.w	80130ae <HAL_TIM_ConfigClockSource+0x1aa>
 8012f6c:	4a5f      	ldr	r2, [pc, #380]	; (80130ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8012f6e:	4293      	cmp	r3, r2
 8012f70:	f200 80a6 	bhi.w	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f74:	4a5e      	ldr	r2, [pc, #376]	; (80130f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012f76:	4293      	cmp	r3, r2
 8012f78:	f000 8099 	beq.w	80130ae <HAL_TIM_ConfigClockSource+0x1aa>
 8012f7c:	4a5c      	ldr	r2, [pc, #368]	; (80130f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012f7e:	4293      	cmp	r3, r2
 8012f80:	f200 809e 	bhi.w	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012f88:	f000 8091 	beq.w	80130ae <HAL_TIM_ConfigClockSource+0x1aa>
 8012f8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012f90:	f200 8096 	bhi.w	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012f98:	f000 8089 	beq.w	80130ae <HAL_TIM_ConfigClockSource+0x1aa>
 8012f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012fa0:	f200 808e 	bhi.w	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012fa8:	d03e      	beq.n	8013028 <HAL_TIM_ConfigClockSource+0x124>
 8012faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012fae:	f200 8087 	bhi.w	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012fb6:	f000 8086 	beq.w	80130c6 <HAL_TIM_ConfigClockSource+0x1c2>
 8012fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012fbe:	d87f      	bhi.n	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fc0:	2b70      	cmp	r3, #112	; 0x70
 8012fc2:	d01a      	beq.n	8012ffa <HAL_TIM_ConfigClockSource+0xf6>
 8012fc4:	2b70      	cmp	r3, #112	; 0x70
 8012fc6:	d87b      	bhi.n	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fc8:	2b60      	cmp	r3, #96	; 0x60
 8012fca:	d050      	beq.n	801306e <HAL_TIM_ConfigClockSource+0x16a>
 8012fcc:	2b60      	cmp	r3, #96	; 0x60
 8012fce:	d877      	bhi.n	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fd0:	2b50      	cmp	r3, #80	; 0x50
 8012fd2:	d03c      	beq.n	801304e <HAL_TIM_ConfigClockSource+0x14a>
 8012fd4:	2b50      	cmp	r3, #80	; 0x50
 8012fd6:	d873      	bhi.n	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fd8:	2b40      	cmp	r3, #64	; 0x40
 8012fda:	d058      	beq.n	801308e <HAL_TIM_ConfigClockSource+0x18a>
 8012fdc:	2b40      	cmp	r3, #64	; 0x40
 8012fde:	d86f      	bhi.n	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fe0:	2b30      	cmp	r3, #48	; 0x30
 8012fe2:	d064      	beq.n	80130ae <HAL_TIM_ConfigClockSource+0x1aa>
 8012fe4:	2b30      	cmp	r3, #48	; 0x30
 8012fe6:	d86b      	bhi.n	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fe8:	2b20      	cmp	r3, #32
 8012fea:	d060      	beq.n	80130ae <HAL_TIM_ConfigClockSource+0x1aa>
 8012fec:	2b20      	cmp	r3, #32
 8012fee:	d867      	bhi.n	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d05c      	beq.n	80130ae <HAL_TIM_ConfigClockSource+0x1aa>
 8012ff4:	2b10      	cmp	r3, #16
 8012ff6:	d05a      	beq.n	80130ae <HAL_TIM_ConfigClockSource+0x1aa>
 8012ff8:	e062      	b.n	80130c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6818      	ldr	r0, [r3, #0]
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	6899      	ldr	r1, [r3, #8]
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	685a      	ldr	r2, [r3, #4]
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	68db      	ldr	r3, [r3, #12]
 801300a:	f000 fc8b 	bl	8013924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	689b      	ldr	r3, [r3, #8]
 8013014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801301c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	68ba      	ldr	r2, [r7, #8]
 8013024:	609a      	str	r2, [r3, #8]
      break;
 8013026:	e04f      	b.n	80130c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6818      	ldr	r0, [r3, #0]
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	6899      	ldr	r1, [r3, #8]
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	685a      	ldr	r2, [r3, #4]
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	68db      	ldr	r3, [r3, #12]
 8013038:	f000 fc74 	bl	8013924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	689a      	ldr	r2, [r3, #8]
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801304a:	609a      	str	r2, [r3, #8]
      break;
 801304c:	e03c      	b.n	80130c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6818      	ldr	r0, [r3, #0]
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	6859      	ldr	r1, [r3, #4]
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	68db      	ldr	r3, [r3, #12]
 801305a:	461a      	mov	r2, r3
 801305c:	f000 fbe4 	bl	8013828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	2150      	movs	r1, #80	; 0x50
 8013066:	4618      	mov	r0, r3
 8013068:	f000 fc3e 	bl	80138e8 <TIM_ITRx_SetConfig>
      break;
 801306c:	e02c      	b.n	80130c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6818      	ldr	r0, [r3, #0]
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	6859      	ldr	r1, [r3, #4]
 8013076:	683b      	ldr	r3, [r7, #0]
 8013078:	68db      	ldr	r3, [r3, #12]
 801307a:	461a      	mov	r2, r3
 801307c:	f000 fc03 	bl	8013886 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	2160      	movs	r1, #96	; 0x60
 8013086:	4618      	mov	r0, r3
 8013088:	f000 fc2e 	bl	80138e8 <TIM_ITRx_SetConfig>
      break;
 801308c:	e01c      	b.n	80130c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	6818      	ldr	r0, [r3, #0]
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	6859      	ldr	r1, [r3, #4]
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	68db      	ldr	r3, [r3, #12]
 801309a:	461a      	mov	r2, r3
 801309c:	f000 fbc4 	bl	8013828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	2140      	movs	r1, #64	; 0x40
 80130a6:	4618      	mov	r0, r3
 80130a8:	f000 fc1e 	bl	80138e8 <TIM_ITRx_SetConfig>
      break;
 80130ac:	e00c      	b.n	80130c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681a      	ldr	r2, [r3, #0]
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	4619      	mov	r1, r3
 80130b8:	4610      	mov	r0, r2
 80130ba:	f000 fc15 	bl	80138e8 <TIM_ITRx_SetConfig>
      break;
 80130be:	e003      	b.n	80130c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80130c0:	2301      	movs	r3, #1
 80130c2:	73fb      	strb	r3, [r7, #15]
      break;
 80130c4:	e000      	b.n	80130c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80130c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2201      	movs	r2, #1
 80130cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2200      	movs	r2, #0
 80130d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80130d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3710      	adds	r7, #16
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
 80130e2:	bf00      	nop
 80130e4:	ffceff88 	.word	0xffceff88
 80130e8:	00100040 	.word	0x00100040
 80130ec:	00100030 	.word	0x00100030
 80130f0:	00100020 	.word	0x00100020

080130f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80130f4:	b480      	push	{r7}
 80130f6:	b083      	sub	sp, #12
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80130fc:	bf00      	nop
 80130fe:	370c      	adds	r7, #12
 8013100:	46bd      	mov	sp, r7
 8013102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013106:	4770      	bx	lr

08013108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013108:	b480      	push	{r7}
 801310a:	b083      	sub	sp, #12
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013110:	bf00      	nop
 8013112:	370c      	adds	r7, #12
 8013114:	46bd      	mov	sp, r7
 8013116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311a:	4770      	bx	lr

0801311c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801311c:	b480      	push	{r7}
 801311e:	b083      	sub	sp, #12
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013124:	bf00      	nop
 8013126:	370c      	adds	r7, #12
 8013128:	46bd      	mov	sp, r7
 801312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312e:	4770      	bx	lr

08013130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013130:	b480      	push	{r7}
 8013132:	b085      	sub	sp, #20
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	4a46      	ldr	r2, [pc, #280]	; (801325c <TIM_Base_SetConfig+0x12c>)
 8013144:	4293      	cmp	r3, r2
 8013146:	d013      	beq.n	8013170 <TIM_Base_SetConfig+0x40>
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801314e:	d00f      	beq.n	8013170 <TIM_Base_SetConfig+0x40>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	4a43      	ldr	r2, [pc, #268]	; (8013260 <TIM_Base_SetConfig+0x130>)
 8013154:	4293      	cmp	r3, r2
 8013156:	d00b      	beq.n	8013170 <TIM_Base_SetConfig+0x40>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	4a42      	ldr	r2, [pc, #264]	; (8013264 <TIM_Base_SetConfig+0x134>)
 801315c:	4293      	cmp	r3, r2
 801315e:	d007      	beq.n	8013170 <TIM_Base_SetConfig+0x40>
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	4a41      	ldr	r2, [pc, #260]	; (8013268 <TIM_Base_SetConfig+0x138>)
 8013164:	4293      	cmp	r3, r2
 8013166:	d003      	beq.n	8013170 <TIM_Base_SetConfig+0x40>
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	4a40      	ldr	r2, [pc, #256]	; (801326c <TIM_Base_SetConfig+0x13c>)
 801316c:	4293      	cmp	r3, r2
 801316e:	d108      	bne.n	8013182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	685b      	ldr	r3, [r3, #4]
 801317c:	68fa      	ldr	r2, [r7, #12]
 801317e:	4313      	orrs	r3, r2
 8013180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	4a35      	ldr	r2, [pc, #212]	; (801325c <TIM_Base_SetConfig+0x12c>)
 8013186:	4293      	cmp	r3, r2
 8013188:	d01f      	beq.n	80131ca <TIM_Base_SetConfig+0x9a>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013190:	d01b      	beq.n	80131ca <TIM_Base_SetConfig+0x9a>
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	4a32      	ldr	r2, [pc, #200]	; (8013260 <TIM_Base_SetConfig+0x130>)
 8013196:	4293      	cmp	r3, r2
 8013198:	d017      	beq.n	80131ca <TIM_Base_SetConfig+0x9a>
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	4a31      	ldr	r2, [pc, #196]	; (8013264 <TIM_Base_SetConfig+0x134>)
 801319e:	4293      	cmp	r3, r2
 80131a0:	d013      	beq.n	80131ca <TIM_Base_SetConfig+0x9a>
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	4a30      	ldr	r2, [pc, #192]	; (8013268 <TIM_Base_SetConfig+0x138>)
 80131a6:	4293      	cmp	r3, r2
 80131a8:	d00f      	beq.n	80131ca <TIM_Base_SetConfig+0x9a>
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	4a2f      	ldr	r2, [pc, #188]	; (801326c <TIM_Base_SetConfig+0x13c>)
 80131ae:	4293      	cmp	r3, r2
 80131b0:	d00b      	beq.n	80131ca <TIM_Base_SetConfig+0x9a>
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	4a2e      	ldr	r2, [pc, #184]	; (8013270 <TIM_Base_SetConfig+0x140>)
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d007      	beq.n	80131ca <TIM_Base_SetConfig+0x9a>
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	4a2d      	ldr	r2, [pc, #180]	; (8013274 <TIM_Base_SetConfig+0x144>)
 80131be:	4293      	cmp	r3, r2
 80131c0:	d003      	beq.n	80131ca <TIM_Base_SetConfig+0x9a>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	4a2c      	ldr	r2, [pc, #176]	; (8013278 <TIM_Base_SetConfig+0x148>)
 80131c6:	4293      	cmp	r3, r2
 80131c8:	d108      	bne.n	80131dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80131d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	68db      	ldr	r3, [r3, #12]
 80131d6:	68fa      	ldr	r2, [r7, #12]
 80131d8:	4313      	orrs	r3, r2
 80131da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	695b      	ldr	r3, [r3, #20]
 80131e6:	4313      	orrs	r3, r2
 80131e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	68fa      	ldr	r2, [r7, #12]
 80131ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	689a      	ldr	r2, [r3, #8]
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	681a      	ldr	r2, [r3, #0]
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	4a16      	ldr	r2, [pc, #88]	; (801325c <TIM_Base_SetConfig+0x12c>)
 8013204:	4293      	cmp	r3, r2
 8013206:	d00f      	beq.n	8013228 <TIM_Base_SetConfig+0xf8>
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	4a18      	ldr	r2, [pc, #96]	; (801326c <TIM_Base_SetConfig+0x13c>)
 801320c:	4293      	cmp	r3, r2
 801320e:	d00b      	beq.n	8013228 <TIM_Base_SetConfig+0xf8>
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	4a17      	ldr	r2, [pc, #92]	; (8013270 <TIM_Base_SetConfig+0x140>)
 8013214:	4293      	cmp	r3, r2
 8013216:	d007      	beq.n	8013228 <TIM_Base_SetConfig+0xf8>
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	4a16      	ldr	r2, [pc, #88]	; (8013274 <TIM_Base_SetConfig+0x144>)
 801321c:	4293      	cmp	r3, r2
 801321e:	d003      	beq.n	8013228 <TIM_Base_SetConfig+0xf8>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	4a15      	ldr	r2, [pc, #84]	; (8013278 <TIM_Base_SetConfig+0x148>)
 8013224:	4293      	cmp	r3, r2
 8013226:	d103      	bne.n	8013230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	691a      	ldr	r2, [r3, #16]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2201      	movs	r2, #1
 8013234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	691b      	ldr	r3, [r3, #16]
 801323a:	f003 0301 	and.w	r3, r3, #1
 801323e:	2b01      	cmp	r3, #1
 8013240:	d105      	bne.n	801324e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	691b      	ldr	r3, [r3, #16]
 8013246:	f023 0201 	bic.w	r2, r3, #1
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	611a      	str	r2, [r3, #16]
  }
}
 801324e:	bf00      	nop
 8013250:	3714      	adds	r7, #20
 8013252:	46bd      	mov	sp, r7
 8013254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013258:	4770      	bx	lr
 801325a:	bf00      	nop
 801325c:	40010000 	.word	0x40010000
 8013260:	40000400 	.word	0x40000400
 8013264:	40000800 	.word	0x40000800
 8013268:	40000c00 	.word	0x40000c00
 801326c:	40010400 	.word	0x40010400
 8013270:	40014000 	.word	0x40014000
 8013274:	40014400 	.word	0x40014400
 8013278:	40014800 	.word	0x40014800

0801327c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801327c:	b480      	push	{r7}
 801327e:	b087      	sub	sp, #28
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6a1b      	ldr	r3, [r3, #32]
 801328a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6a1b      	ldr	r3, [r3, #32]
 8013290:	f023 0201 	bic.w	r2, r3, #1
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	699b      	ldr	r3, [r3, #24]
 80132a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80132a4:	68fa      	ldr	r2, [r7, #12]
 80132a6:	4b37      	ldr	r3, [pc, #220]	; (8013384 <TIM_OC1_SetConfig+0x108>)
 80132a8:	4013      	ands	r3, r2
 80132aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	f023 0303 	bic.w	r3, r3, #3
 80132b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	68fa      	ldr	r2, [r7, #12]
 80132ba:	4313      	orrs	r3, r2
 80132bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	f023 0302 	bic.w	r3, r3, #2
 80132c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	689b      	ldr	r3, [r3, #8]
 80132ca:	697a      	ldr	r2, [r7, #20]
 80132cc:	4313      	orrs	r3, r2
 80132ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	4a2d      	ldr	r2, [pc, #180]	; (8013388 <TIM_OC1_SetConfig+0x10c>)
 80132d4:	4293      	cmp	r3, r2
 80132d6:	d00f      	beq.n	80132f8 <TIM_OC1_SetConfig+0x7c>
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	4a2c      	ldr	r2, [pc, #176]	; (801338c <TIM_OC1_SetConfig+0x110>)
 80132dc:	4293      	cmp	r3, r2
 80132de:	d00b      	beq.n	80132f8 <TIM_OC1_SetConfig+0x7c>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	4a2b      	ldr	r2, [pc, #172]	; (8013390 <TIM_OC1_SetConfig+0x114>)
 80132e4:	4293      	cmp	r3, r2
 80132e6:	d007      	beq.n	80132f8 <TIM_OC1_SetConfig+0x7c>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	4a2a      	ldr	r2, [pc, #168]	; (8013394 <TIM_OC1_SetConfig+0x118>)
 80132ec:	4293      	cmp	r3, r2
 80132ee:	d003      	beq.n	80132f8 <TIM_OC1_SetConfig+0x7c>
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	4a29      	ldr	r2, [pc, #164]	; (8013398 <TIM_OC1_SetConfig+0x11c>)
 80132f4:	4293      	cmp	r3, r2
 80132f6:	d10c      	bne.n	8013312 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	f023 0308 	bic.w	r3, r3, #8
 80132fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	68db      	ldr	r3, [r3, #12]
 8013304:	697a      	ldr	r2, [r7, #20]
 8013306:	4313      	orrs	r3, r2
 8013308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	f023 0304 	bic.w	r3, r3, #4
 8013310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	4a1c      	ldr	r2, [pc, #112]	; (8013388 <TIM_OC1_SetConfig+0x10c>)
 8013316:	4293      	cmp	r3, r2
 8013318:	d00f      	beq.n	801333a <TIM_OC1_SetConfig+0xbe>
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	4a1b      	ldr	r2, [pc, #108]	; (801338c <TIM_OC1_SetConfig+0x110>)
 801331e:	4293      	cmp	r3, r2
 8013320:	d00b      	beq.n	801333a <TIM_OC1_SetConfig+0xbe>
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	4a1a      	ldr	r2, [pc, #104]	; (8013390 <TIM_OC1_SetConfig+0x114>)
 8013326:	4293      	cmp	r3, r2
 8013328:	d007      	beq.n	801333a <TIM_OC1_SetConfig+0xbe>
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	4a19      	ldr	r2, [pc, #100]	; (8013394 <TIM_OC1_SetConfig+0x118>)
 801332e:	4293      	cmp	r3, r2
 8013330:	d003      	beq.n	801333a <TIM_OC1_SetConfig+0xbe>
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	4a18      	ldr	r2, [pc, #96]	; (8013398 <TIM_OC1_SetConfig+0x11c>)
 8013336:	4293      	cmp	r3, r2
 8013338:	d111      	bne.n	801335e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	695b      	ldr	r3, [r3, #20]
 801334e:	693a      	ldr	r2, [r7, #16]
 8013350:	4313      	orrs	r3, r2
 8013352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	699b      	ldr	r3, [r3, #24]
 8013358:	693a      	ldr	r2, [r7, #16]
 801335a:	4313      	orrs	r3, r2
 801335c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	693a      	ldr	r2, [r7, #16]
 8013362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	68fa      	ldr	r2, [r7, #12]
 8013368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	685a      	ldr	r2, [r3, #4]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	697a      	ldr	r2, [r7, #20]
 8013376:	621a      	str	r2, [r3, #32]
}
 8013378:	bf00      	nop
 801337a:	371c      	adds	r7, #28
 801337c:	46bd      	mov	sp, r7
 801337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013382:	4770      	bx	lr
 8013384:	fffeff8f 	.word	0xfffeff8f
 8013388:	40010000 	.word	0x40010000
 801338c:	40010400 	.word	0x40010400
 8013390:	40014000 	.word	0x40014000
 8013394:	40014400 	.word	0x40014400
 8013398:	40014800 	.word	0x40014800

0801339c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801339c:	b480      	push	{r7}
 801339e:	b087      	sub	sp, #28
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	6a1b      	ldr	r3, [r3, #32]
 80133aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	6a1b      	ldr	r3, [r3, #32]
 80133b0:	f023 0210 	bic.w	r2, r3, #16
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	685b      	ldr	r3, [r3, #4]
 80133bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	699b      	ldr	r3, [r3, #24]
 80133c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80133c4:	68fa      	ldr	r2, [r7, #12]
 80133c6:	4b34      	ldr	r3, [pc, #208]	; (8013498 <TIM_OC2_SetConfig+0xfc>)
 80133c8:	4013      	ands	r3, r2
 80133ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80133d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	021b      	lsls	r3, r3, #8
 80133da:	68fa      	ldr	r2, [r7, #12]
 80133dc:	4313      	orrs	r3, r2
 80133de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	f023 0320 	bic.w	r3, r3, #32
 80133e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	689b      	ldr	r3, [r3, #8]
 80133ec:	011b      	lsls	r3, r3, #4
 80133ee:	697a      	ldr	r2, [r7, #20]
 80133f0:	4313      	orrs	r3, r2
 80133f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	4a29      	ldr	r2, [pc, #164]	; (801349c <TIM_OC2_SetConfig+0x100>)
 80133f8:	4293      	cmp	r3, r2
 80133fa:	d003      	beq.n	8013404 <TIM_OC2_SetConfig+0x68>
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	4a28      	ldr	r2, [pc, #160]	; (80134a0 <TIM_OC2_SetConfig+0x104>)
 8013400:	4293      	cmp	r3, r2
 8013402:	d10d      	bne.n	8013420 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801340a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	011b      	lsls	r3, r3, #4
 8013412:	697a      	ldr	r2, [r7, #20]
 8013414:	4313      	orrs	r3, r2
 8013416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801341e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	4a1e      	ldr	r2, [pc, #120]	; (801349c <TIM_OC2_SetConfig+0x100>)
 8013424:	4293      	cmp	r3, r2
 8013426:	d00f      	beq.n	8013448 <TIM_OC2_SetConfig+0xac>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	4a1d      	ldr	r2, [pc, #116]	; (80134a0 <TIM_OC2_SetConfig+0x104>)
 801342c:	4293      	cmp	r3, r2
 801342e:	d00b      	beq.n	8013448 <TIM_OC2_SetConfig+0xac>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	4a1c      	ldr	r2, [pc, #112]	; (80134a4 <TIM_OC2_SetConfig+0x108>)
 8013434:	4293      	cmp	r3, r2
 8013436:	d007      	beq.n	8013448 <TIM_OC2_SetConfig+0xac>
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	4a1b      	ldr	r2, [pc, #108]	; (80134a8 <TIM_OC2_SetConfig+0x10c>)
 801343c:	4293      	cmp	r3, r2
 801343e:	d003      	beq.n	8013448 <TIM_OC2_SetConfig+0xac>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	4a1a      	ldr	r2, [pc, #104]	; (80134ac <TIM_OC2_SetConfig+0x110>)
 8013444:	4293      	cmp	r3, r2
 8013446:	d113      	bne.n	8013470 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013448:	693b      	ldr	r3, [r7, #16]
 801344a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801344e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	695b      	ldr	r3, [r3, #20]
 801345c:	009b      	lsls	r3, r3, #2
 801345e:	693a      	ldr	r2, [r7, #16]
 8013460:	4313      	orrs	r3, r2
 8013462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	699b      	ldr	r3, [r3, #24]
 8013468:	009b      	lsls	r3, r3, #2
 801346a:	693a      	ldr	r2, [r7, #16]
 801346c:	4313      	orrs	r3, r2
 801346e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	693a      	ldr	r2, [r7, #16]
 8013474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	68fa      	ldr	r2, [r7, #12]
 801347a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	685a      	ldr	r2, [r3, #4]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	697a      	ldr	r2, [r7, #20]
 8013488:	621a      	str	r2, [r3, #32]
}
 801348a:	bf00      	nop
 801348c:	371c      	adds	r7, #28
 801348e:	46bd      	mov	sp, r7
 8013490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013494:	4770      	bx	lr
 8013496:	bf00      	nop
 8013498:	feff8fff 	.word	0xfeff8fff
 801349c:	40010000 	.word	0x40010000
 80134a0:	40010400 	.word	0x40010400
 80134a4:	40014000 	.word	0x40014000
 80134a8:	40014400 	.word	0x40014400
 80134ac:	40014800 	.word	0x40014800

080134b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80134b0:	b480      	push	{r7}
 80134b2:	b087      	sub	sp, #28
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
 80134b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6a1b      	ldr	r3, [r3, #32]
 80134be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6a1b      	ldr	r3, [r3, #32]
 80134c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	69db      	ldr	r3, [r3, #28]
 80134d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80134d8:	68fa      	ldr	r2, [r7, #12]
 80134da:	4b33      	ldr	r3, [pc, #204]	; (80135a8 <TIM_OC3_SetConfig+0xf8>)
 80134dc:	4013      	ands	r3, r2
 80134de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	f023 0303 	bic.w	r3, r3, #3
 80134e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	68fa      	ldr	r2, [r7, #12]
 80134ee:	4313      	orrs	r3, r2
 80134f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80134f2:	697b      	ldr	r3, [r7, #20]
 80134f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80134f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80134fa:	683b      	ldr	r3, [r7, #0]
 80134fc:	689b      	ldr	r3, [r3, #8]
 80134fe:	021b      	lsls	r3, r3, #8
 8013500:	697a      	ldr	r2, [r7, #20]
 8013502:	4313      	orrs	r3, r2
 8013504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	4a28      	ldr	r2, [pc, #160]	; (80135ac <TIM_OC3_SetConfig+0xfc>)
 801350a:	4293      	cmp	r3, r2
 801350c:	d003      	beq.n	8013516 <TIM_OC3_SetConfig+0x66>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	4a27      	ldr	r2, [pc, #156]	; (80135b0 <TIM_OC3_SetConfig+0x100>)
 8013512:	4293      	cmp	r3, r2
 8013514:	d10d      	bne.n	8013532 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801351c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	68db      	ldr	r3, [r3, #12]
 8013522:	021b      	lsls	r3, r3, #8
 8013524:	697a      	ldr	r2, [r7, #20]
 8013526:	4313      	orrs	r3, r2
 8013528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4a1d      	ldr	r2, [pc, #116]	; (80135ac <TIM_OC3_SetConfig+0xfc>)
 8013536:	4293      	cmp	r3, r2
 8013538:	d00f      	beq.n	801355a <TIM_OC3_SetConfig+0xaa>
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	4a1c      	ldr	r2, [pc, #112]	; (80135b0 <TIM_OC3_SetConfig+0x100>)
 801353e:	4293      	cmp	r3, r2
 8013540:	d00b      	beq.n	801355a <TIM_OC3_SetConfig+0xaa>
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	4a1b      	ldr	r2, [pc, #108]	; (80135b4 <TIM_OC3_SetConfig+0x104>)
 8013546:	4293      	cmp	r3, r2
 8013548:	d007      	beq.n	801355a <TIM_OC3_SetConfig+0xaa>
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	4a1a      	ldr	r2, [pc, #104]	; (80135b8 <TIM_OC3_SetConfig+0x108>)
 801354e:	4293      	cmp	r3, r2
 8013550:	d003      	beq.n	801355a <TIM_OC3_SetConfig+0xaa>
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	4a19      	ldr	r2, [pc, #100]	; (80135bc <TIM_OC3_SetConfig+0x10c>)
 8013556:	4293      	cmp	r3, r2
 8013558:	d113      	bne.n	8013582 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801355a:	693b      	ldr	r3, [r7, #16]
 801355c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013562:	693b      	ldr	r3, [r7, #16]
 8013564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	695b      	ldr	r3, [r3, #20]
 801356e:	011b      	lsls	r3, r3, #4
 8013570:	693a      	ldr	r2, [r7, #16]
 8013572:	4313      	orrs	r3, r2
 8013574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	699b      	ldr	r3, [r3, #24]
 801357a:	011b      	lsls	r3, r3, #4
 801357c:	693a      	ldr	r2, [r7, #16]
 801357e:	4313      	orrs	r3, r2
 8013580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	693a      	ldr	r2, [r7, #16]
 8013586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	68fa      	ldr	r2, [r7, #12]
 801358c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	685a      	ldr	r2, [r3, #4]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	697a      	ldr	r2, [r7, #20]
 801359a:	621a      	str	r2, [r3, #32]
}
 801359c:	bf00      	nop
 801359e:	371c      	adds	r7, #28
 80135a0:	46bd      	mov	sp, r7
 80135a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a6:	4770      	bx	lr
 80135a8:	fffeff8f 	.word	0xfffeff8f
 80135ac:	40010000 	.word	0x40010000
 80135b0:	40010400 	.word	0x40010400
 80135b4:	40014000 	.word	0x40014000
 80135b8:	40014400 	.word	0x40014400
 80135bc:	40014800 	.word	0x40014800

080135c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80135c0:	b480      	push	{r7}
 80135c2:	b087      	sub	sp, #28
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6a1b      	ldr	r3, [r3, #32]
 80135ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6a1b      	ldr	r3, [r3, #32]
 80135d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	69db      	ldr	r3, [r3, #28]
 80135e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80135e8:	68fa      	ldr	r2, [r7, #12]
 80135ea:	4b24      	ldr	r3, [pc, #144]	; (801367c <TIM_OC4_SetConfig+0xbc>)
 80135ec:	4013      	ands	r3, r2
 80135ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80135f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	021b      	lsls	r3, r3, #8
 80135fe:	68fa      	ldr	r2, [r7, #12]
 8013600:	4313      	orrs	r3, r2
 8013602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801360a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	689b      	ldr	r3, [r3, #8]
 8013610:	031b      	lsls	r3, r3, #12
 8013612:	693a      	ldr	r2, [r7, #16]
 8013614:	4313      	orrs	r3, r2
 8013616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	4a19      	ldr	r2, [pc, #100]	; (8013680 <TIM_OC4_SetConfig+0xc0>)
 801361c:	4293      	cmp	r3, r2
 801361e:	d00f      	beq.n	8013640 <TIM_OC4_SetConfig+0x80>
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	4a18      	ldr	r2, [pc, #96]	; (8013684 <TIM_OC4_SetConfig+0xc4>)
 8013624:	4293      	cmp	r3, r2
 8013626:	d00b      	beq.n	8013640 <TIM_OC4_SetConfig+0x80>
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	4a17      	ldr	r2, [pc, #92]	; (8013688 <TIM_OC4_SetConfig+0xc8>)
 801362c:	4293      	cmp	r3, r2
 801362e:	d007      	beq.n	8013640 <TIM_OC4_SetConfig+0x80>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	4a16      	ldr	r2, [pc, #88]	; (801368c <TIM_OC4_SetConfig+0xcc>)
 8013634:	4293      	cmp	r3, r2
 8013636:	d003      	beq.n	8013640 <TIM_OC4_SetConfig+0x80>
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	4a15      	ldr	r2, [pc, #84]	; (8013690 <TIM_OC4_SetConfig+0xd0>)
 801363c:	4293      	cmp	r3, r2
 801363e:	d109      	bne.n	8013654 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013640:	697b      	ldr	r3, [r7, #20]
 8013642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	695b      	ldr	r3, [r3, #20]
 801364c:	019b      	lsls	r3, r3, #6
 801364e:	697a      	ldr	r2, [r7, #20]
 8013650:	4313      	orrs	r3, r2
 8013652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	697a      	ldr	r2, [r7, #20]
 8013658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	68fa      	ldr	r2, [r7, #12]
 801365e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	685a      	ldr	r2, [r3, #4]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	693a      	ldr	r2, [r7, #16]
 801366c:	621a      	str	r2, [r3, #32]
}
 801366e:	bf00      	nop
 8013670:	371c      	adds	r7, #28
 8013672:	46bd      	mov	sp, r7
 8013674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013678:	4770      	bx	lr
 801367a:	bf00      	nop
 801367c:	feff8fff 	.word	0xfeff8fff
 8013680:	40010000 	.word	0x40010000
 8013684:	40010400 	.word	0x40010400
 8013688:	40014000 	.word	0x40014000
 801368c:	40014400 	.word	0x40014400
 8013690:	40014800 	.word	0x40014800

08013694 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013694:	b480      	push	{r7}
 8013696:	b087      	sub	sp, #28
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6a1b      	ldr	r3, [r3, #32]
 80136a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6a1b      	ldr	r3, [r3, #32]
 80136a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	685b      	ldr	r3, [r3, #4]
 80136b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80136bc:	68fa      	ldr	r2, [r7, #12]
 80136be:	4b21      	ldr	r3, [pc, #132]	; (8013744 <TIM_OC5_SetConfig+0xb0>)
 80136c0:	4013      	ands	r3, r2
 80136c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	68fa      	ldr	r2, [r7, #12]
 80136ca:	4313      	orrs	r3, r2
 80136cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80136d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	689b      	ldr	r3, [r3, #8]
 80136da:	041b      	lsls	r3, r3, #16
 80136dc:	693a      	ldr	r2, [r7, #16]
 80136de:	4313      	orrs	r3, r2
 80136e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	4a18      	ldr	r2, [pc, #96]	; (8013748 <TIM_OC5_SetConfig+0xb4>)
 80136e6:	4293      	cmp	r3, r2
 80136e8:	d00f      	beq.n	801370a <TIM_OC5_SetConfig+0x76>
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	4a17      	ldr	r2, [pc, #92]	; (801374c <TIM_OC5_SetConfig+0xb8>)
 80136ee:	4293      	cmp	r3, r2
 80136f0:	d00b      	beq.n	801370a <TIM_OC5_SetConfig+0x76>
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	4a16      	ldr	r2, [pc, #88]	; (8013750 <TIM_OC5_SetConfig+0xbc>)
 80136f6:	4293      	cmp	r3, r2
 80136f8:	d007      	beq.n	801370a <TIM_OC5_SetConfig+0x76>
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	4a15      	ldr	r2, [pc, #84]	; (8013754 <TIM_OC5_SetConfig+0xc0>)
 80136fe:	4293      	cmp	r3, r2
 8013700:	d003      	beq.n	801370a <TIM_OC5_SetConfig+0x76>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	4a14      	ldr	r2, [pc, #80]	; (8013758 <TIM_OC5_SetConfig+0xc4>)
 8013706:	4293      	cmp	r3, r2
 8013708:	d109      	bne.n	801371e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801370a:	697b      	ldr	r3, [r7, #20]
 801370c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013710:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	695b      	ldr	r3, [r3, #20]
 8013716:	021b      	lsls	r3, r3, #8
 8013718:	697a      	ldr	r2, [r7, #20]
 801371a:	4313      	orrs	r3, r2
 801371c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	697a      	ldr	r2, [r7, #20]
 8013722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	68fa      	ldr	r2, [r7, #12]
 8013728:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	685a      	ldr	r2, [r3, #4]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	693a      	ldr	r2, [r7, #16]
 8013736:	621a      	str	r2, [r3, #32]
}
 8013738:	bf00      	nop
 801373a:	371c      	adds	r7, #28
 801373c:	46bd      	mov	sp, r7
 801373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013742:	4770      	bx	lr
 8013744:	fffeff8f 	.word	0xfffeff8f
 8013748:	40010000 	.word	0x40010000
 801374c:	40010400 	.word	0x40010400
 8013750:	40014000 	.word	0x40014000
 8013754:	40014400 	.word	0x40014400
 8013758:	40014800 	.word	0x40014800

0801375c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801375c:	b480      	push	{r7}
 801375e:	b087      	sub	sp, #28
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
 8013764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	6a1b      	ldr	r3, [r3, #32]
 801376a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6a1b      	ldr	r3, [r3, #32]
 8013770:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013784:	68fa      	ldr	r2, [r7, #12]
 8013786:	4b22      	ldr	r3, [pc, #136]	; (8013810 <TIM_OC6_SetConfig+0xb4>)
 8013788:	4013      	ands	r3, r2
 801378a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	021b      	lsls	r3, r3, #8
 8013792:	68fa      	ldr	r2, [r7, #12]
 8013794:	4313      	orrs	r3, r2
 8013796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801379e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	689b      	ldr	r3, [r3, #8]
 80137a4:	051b      	lsls	r3, r3, #20
 80137a6:	693a      	ldr	r2, [r7, #16]
 80137a8:	4313      	orrs	r3, r2
 80137aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	4a19      	ldr	r2, [pc, #100]	; (8013814 <TIM_OC6_SetConfig+0xb8>)
 80137b0:	4293      	cmp	r3, r2
 80137b2:	d00f      	beq.n	80137d4 <TIM_OC6_SetConfig+0x78>
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	4a18      	ldr	r2, [pc, #96]	; (8013818 <TIM_OC6_SetConfig+0xbc>)
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d00b      	beq.n	80137d4 <TIM_OC6_SetConfig+0x78>
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	4a17      	ldr	r2, [pc, #92]	; (801381c <TIM_OC6_SetConfig+0xc0>)
 80137c0:	4293      	cmp	r3, r2
 80137c2:	d007      	beq.n	80137d4 <TIM_OC6_SetConfig+0x78>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	4a16      	ldr	r2, [pc, #88]	; (8013820 <TIM_OC6_SetConfig+0xc4>)
 80137c8:	4293      	cmp	r3, r2
 80137ca:	d003      	beq.n	80137d4 <TIM_OC6_SetConfig+0x78>
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	4a15      	ldr	r2, [pc, #84]	; (8013824 <TIM_OC6_SetConfig+0xc8>)
 80137d0:	4293      	cmp	r3, r2
 80137d2:	d109      	bne.n	80137e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80137da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	695b      	ldr	r3, [r3, #20]
 80137e0:	029b      	lsls	r3, r3, #10
 80137e2:	697a      	ldr	r2, [r7, #20]
 80137e4:	4313      	orrs	r3, r2
 80137e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	697a      	ldr	r2, [r7, #20]
 80137ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	68fa      	ldr	r2, [r7, #12]
 80137f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	685a      	ldr	r2, [r3, #4]
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	693a      	ldr	r2, [r7, #16]
 8013800:	621a      	str	r2, [r3, #32]
}
 8013802:	bf00      	nop
 8013804:	371c      	adds	r7, #28
 8013806:	46bd      	mov	sp, r7
 8013808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380c:	4770      	bx	lr
 801380e:	bf00      	nop
 8013810:	feff8fff 	.word	0xfeff8fff
 8013814:	40010000 	.word	0x40010000
 8013818:	40010400 	.word	0x40010400
 801381c:	40014000 	.word	0x40014000
 8013820:	40014400 	.word	0x40014400
 8013824:	40014800 	.word	0x40014800

08013828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013828:	b480      	push	{r7}
 801382a:	b087      	sub	sp, #28
 801382c:	af00      	add	r7, sp, #0
 801382e:	60f8      	str	r0, [r7, #12]
 8013830:	60b9      	str	r1, [r7, #8]
 8013832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	6a1b      	ldr	r3, [r3, #32]
 8013838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	6a1b      	ldr	r3, [r3, #32]
 801383e:	f023 0201 	bic.w	r2, r3, #1
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	699b      	ldr	r3, [r3, #24]
 801384a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	011b      	lsls	r3, r3, #4
 8013858:	693a      	ldr	r2, [r7, #16]
 801385a:	4313      	orrs	r3, r2
 801385c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801385e:	697b      	ldr	r3, [r7, #20]
 8013860:	f023 030a 	bic.w	r3, r3, #10
 8013864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013866:	697a      	ldr	r2, [r7, #20]
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	4313      	orrs	r3, r2
 801386c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	693a      	ldr	r2, [r7, #16]
 8013872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	697a      	ldr	r2, [r7, #20]
 8013878:	621a      	str	r2, [r3, #32]
}
 801387a:	bf00      	nop
 801387c:	371c      	adds	r7, #28
 801387e:	46bd      	mov	sp, r7
 8013880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013884:	4770      	bx	lr

08013886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013886:	b480      	push	{r7}
 8013888:	b087      	sub	sp, #28
 801388a:	af00      	add	r7, sp, #0
 801388c:	60f8      	str	r0, [r7, #12]
 801388e:	60b9      	str	r1, [r7, #8]
 8013890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	6a1b      	ldr	r3, [r3, #32]
 8013896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	6a1b      	ldr	r3, [r3, #32]
 801389c:	f023 0210 	bic.w	r2, r3, #16
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	699b      	ldr	r3, [r3, #24]
 80138a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80138aa:	693b      	ldr	r3, [r7, #16]
 80138ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80138b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	031b      	lsls	r3, r3, #12
 80138b6:	693a      	ldr	r2, [r7, #16]
 80138b8:	4313      	orrs	r3, r2
 80138ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80138c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	011b      	lsls	r3, r3, #4
 80138c8:	697a      	ldr	r2, [r7, #20]
 80138ca:	4313      	orrs	r3, r2
 80138cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	693a      	ldr	r2, [r7, #16]
 80138d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	697a      	ldr	r2, [r7, #20]
 80138d8:	621a      	str	r2, [r3, #32]
}
 80138da:	bf00      	nop
 80138dc:	371c      	adds	r7, #28
 80138de:	46bd      	mov	sp, r7
 80138e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e4:	4770      	bx	lr
	...

080138e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80138e8:	b480      	push	{r7}
 80138ea:	b085      	sub	sp, #20
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	689b      	ldr	r3, [r3, #8]
 80138f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80138f8:	68fa      	ldr	r2, [r7, #12]
 80138fa:	4b09      	ldr	r3, [pc, #36]	; (8013920 <TIM_ITRx_SetConfig+0x38>)
 80138fc:	4013      	ands	r3, r2
 80138fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013900:	683a      	ldr	r2, [r7, #0]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	4313      	orrs	r3, r2
 8013906:	f043 0307 	orr.w	r3, r3, #7
 801390a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	68fa      	ldr	r2, [r7, #12]
 8013910:	609a      	str	r2, [r3, #8]
}
 8013912:	bf00      	nop
 8013914:	3714      	adds	r7, #20
 8013916:	46bd      	mov	sp, r7
 8013918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391c:	4770      	bx	lr
 801391e:	bf00      	nop
 8013920:	ffcfff8f 	.word	0xffcfff8f

08013924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013924:	b480      	push	{r7}
 8013926:	b087      	sub	sp, #28
 8013928:	af00      	add	r7, sp, #0
 801392a:	60f8      	str	r0, [r7, #12]
 801392c:	60b9      	str	r1, [r7, #8]
 801392e:	607a      	str	r2, [r7, #4]
 8013930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	689b      	ldr	r3, [r3, #8]
 8013936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801393e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	021a      	lsls	r2, r3, #8
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	431a      	orrs	r2, r3
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	4313      	orrs	r3, r2
 801394c:	697a      	ldr	r2, [r7, #20]
 801394e:	4313      	orrs	r3, r2
 8013950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	697a      	ldr	r2, [r7, #20]
 8013956:	609a      	str	r2, [r3, #8]
}
 8013958:	bf00      	nop
 801395a:	371c      	adds	r7, #28
 801395c:	46bd      	mov	sp, r7
 801395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013962:	4770      	bx	lr

08013964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013964:	b480      	push	{r7}
 8013966:	b087      	sub	sp, #28
 8013968:	af00      	add	r7, sp, #0
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	f003 031f 	and.w	r3, r3, #31
 8013976:	2201      	movs	r2, #1
 8013978:	fa02 f303 	lsl.w	r3, r2, r3
 801397c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	6a1a      	ldr	r2, [r3, #32]
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	43db      	mvns	r3, r3
 8013986:	401a      	ands	r2, r3
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	6a1a      	ldr	r2, [r3, #32]
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	f003 031f 	and.w	r3, r3, #31
 8013996:	6879      	ldr	r1, [r7, #4]
 8013998:	fa01 f303 	lsl.w	r3, r1, r3
 801399c:	431a      	orrs	r2, r3
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	621a      	str	r2, [r3, #32]
}
 80139a2:	bf00      	nop
 80139a4:	371c      	adds	r7, #28
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr
	...

080139b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80139b0:	b480      	push	{r7}
 80139b2:	b085      	sub	sp, #20
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80139c0:	2b01      	cmp	r3, #1
 80139c2:	d101      	bne.n	80139c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80139c4:	2302      	movs	r3, #2
 80139c6:	e06d      	b.n	8013aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2201      	movs	r2, #1
 80139cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2202      	movs	r2, #2
 80139d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	685b      	ldr	r3, [r3, #4]
 80139de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	689b      	ldr	r3, [r3, #8]
 80139e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	4a30      	ldr	r2, [pc, #192]	; (8013ab0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80139ee:	4293      	cmp	r3, r2
 80139f0:	d004      	beq.n	80139fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	4a2f      	ldr	r2, [pc, #188]	; (8013ab4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80139f8:	4293      	cmp	r3, r2
 80139fa:	d108      	bne.n	8013a0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013a02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	685b      	ldr	r3, [r3, #4]
 8013a08:	68fa      	ldr	r2, [r7, #12]
 8013a0a:	4313      	orrs	r3, r2
 8013a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013a14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	68fa      	ldr	r2, [r7, #12]
 8013a1c:	4313      	orrs	r3, r2
 8013a1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	68fa      	ldr	r2, [r7, #12]
 8013a26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	4a20      	ldr	r2, [pc, #128]	; (8013ab0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013a2e:	4293      	cmp	r3, r2
 8013a30:	d022      	beq.n	8013a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013a3a:	d01d      	beq.n	8013a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	4a1d      	ldr	r2, [pc, #116]	; (8013ab8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013a42:	4293      	cmp	r3, r2
 8013a44:	d018      	beq.n	8013a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	4a1c      	ldr	r2, [pc, #112]	; (8013abc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d013      	beq.n	8013a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	4a1a      	ldr	r2, [pc, #104]	; (8013ac0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013a56:	4293      	cmp	r3, r2
 8013a58:	d00e      	beq.n	8013a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	4a15      	ldr	r2, [pc, #84]	; (8013ab4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013a60:	4293      	cmp	r3, r2
 8013a62:	d009      	beq.n	8013a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	4a16      	ldr	r2, [pc, #88]	; (8013ac4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013a6a:	4293      	cmp	r3, r2
 8013a6c:	d004      	beq.n	8013a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	4a15      	ldr	r2, [pc, #84]	; (8013ac8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013a74:	4293      	cmp	r3, r2
 8013a76:	d10c      	bne.n	8013a92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013a7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	689b      	ldr	r3, [r3, #8]
 8013a84:	68ba      	ldr	r2, [r7, #8]
 8013a86:	4313      	orrs	r3, r2
 8013a88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	68ba      	ldr	r2, [r7, #8]
 8013a90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2201      	movs	r2, #1
 8013a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013aa2:	2300      	movs	r3, #0
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3714      	adds	r7, #20
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr
 8013ab0:	40010000 	.word	0x40010000
 8013ab4:	40010400 	.word	0x40010400
 8013ab8:	40000400 	.word	0x40000400
 8013abc:	40000800 	.word	0x40000800
 8013ac0:	40000c00 	.word	0x40000c00
 8013ac4:	40001800 	.word	0x40001800
 8013ac8:	40014000 	.word	0x40014000

08013acc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013acc:	b480      	push	{r7}
 8013ace:	b085      	sub	sp, #20
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013ae0:	2b01      	cmp	r3, #1
 8013ae2:	d101      	bne.n	8013ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013ae4:	2302      	movs	r3, #2
 8013ae6:	e065      	b.n	8013bb4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2201      	movs	r2, #1
 8013aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	68db      	ldr	r3, [r3, #12]
 8013afa:	4313      	orrs	r3, r2
 8013afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	689b      	ldr	r3, [r3, #8]
 8013b08:	4313      	orrs	r3, r2
 8013b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	685b      	ldr	r3, [r3, #4]
 8013b16:	4313      	orrs	r3, r2
 8013b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	4313      	orrs	r3, r2
 8013b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	691b      	ldr	r3, [r3, #16]
 8013b32:	4313      	orrs	r3, r2
 8013b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	695b      	ldr	r3, [r3, #20]
 8013b40:	4313      	orrs	r3, r2
 8013b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b4e:	4313      	orrs	r3, r2
 8013b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	699b      	ldr	r3, [r3, #24]
 8013b5c:	041b      	lsls	r3, r3, #16
 8013b5e:	4313      	orrs	r3, r2
 8013b60:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	4a16      	ldr	r2, [pc, #88]	; (8013bc0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013b68:	4293      	cmp	r3, r2
 8013b6a:	d004      	beq.n	8013b76 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	4a14      	ldr	r2, [pc, #80]	; (8013bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013b72:	4293      	cmp	r3, r2
 8013b74:	d115      	bne.n	8013ba2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b80:	051b      	lsls	r3, r3, #20
 8013b82:	4313      	orrs	r3, r2
 8013b84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	69db      	ldr	r3, [r3, #28]
 8013b90:	4313      	orrs	r3, r2
 8013b92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013b9a:	683b      	ldr	r3, [r7, #0]
 8013b9c:	6a1b      	ldr	r3, [r3, #32]
 8013b9e:	4313      	orrs	r3, r2
 8013ba0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	68fa      	ldr	r2, [r7, #12]
 8013ba8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	2200      	movs	r2, #0
 8013bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013bb2:	2300      	movs	r3, #0
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3714      	adds	r7, #20
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bbe:	4770      	bx	lr
 8013bc0:	40010000 	.word	0x40010000
 8013bc4:	40010400 	.word	0x40010400

08013bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013bc8:	b480      	push	{r7}
 8013bca:	b083      	sub	sp, #12
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013bd0:	bf00      	nop
 8013bd2:	370c      	adds	r7, #12
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b083      	sub	sp, #12
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013be4:	bf00      	nop
 8013be6:	370c      	adds	r7, #12
 8013be8:	46bd      	mov	sp, r7
 8013bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bee:	4770      	bx	lr

08013bf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b083      	sub	sp, #12
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013bf8:	bf00      	nop
 8013bfa:	370c      	adds	r7, #12
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr

08013c04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d101      	bne.n	8013c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013c12:	2301      	movs	r3, #1
 8013c14:	e042      	b.n	8013c9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d106      	bne.n	8013c2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2200      	movs	r2, #0
 8013c24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013c28:	6878      	ldr	r0, [r7, #4]
 8013c2a:	f7f1 f921 	bl	8004e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2224      	movs	r2, #36	; 0x24
 8013c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	681a      	ldr	r2, [r3, #0]
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	f022 0201 	bic.w	r2, r2, #1
 8013c44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d002      	beq.n	8013c54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013c4e:	6878      	ldr	r0, [r7, #4]
 8013c50:	f001 fbc2 	bl	80153d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f000 fe57 	bl	8014908 <UART_SetConfig>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b01      	cmp	r3, #1
 8013c5e:	d101      	bne.n	8013c64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013c60:	2301      	movs	r3, #1
 8013c62:	e01b      	b.n	8013c9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	685a      	ldr	r2, [r3, #4]
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	689a      	ldr	r2, [r3, #8]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	681a      	ldr	r2, [r3, #0]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	f042 0201 	orr.w	r2, r2, #1
 8013c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f001 fc41 	bl	801551c <UART_CheckIdleState>
 8013c9a:	4603      	mov	r3, r0
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b08a      	sub	sp, #40	; 0x28
 8013ca8:	af02      	add	r7, sp, #8
 8013caa:	60f8      	str	r0, [r7, #12]
 8013cac:	60b9      	str	r1, [r7, #8]
 8013cae:	603b      	str	r3, [r7, #0]
 8013cb0:	4613      	mov	r3, r2
 8013cb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013cba:	2b20      	cmp	r3, #32
 8013cbc:	d17b      	bne.n	8013db6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d002      	beq.n	8013cca <HAL_UART_Transmit+0x26>
 8013cc4:	88fb      	ldrh	r3, [r7, #6]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d101      	bne.n	8013cce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013cca:	2301      	movs	r3, #1
 8013ccc:	e074      	b.n	8013db8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	2221      	movs	r2, #33	; 0x21
 8013cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013cde:	f7f1 fd15 	bl	800570c <HAL_GetTick>
 8013ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	88fa      	ldrh	r2, [r7, #6]
 8013ce8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	88fa      	ldrh	r2, [r7, #6]
 8013cf0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	689b      	ldr	r3, [r3, #8]
 8013cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013cfc:	d108      	bne.n	8013d10 <HAL_UART_Transmit+0x6c>
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	691b      	ldr	r3, [r3, #16]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d104      	bne.n	8013d10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013d06:	2300      	movs	r3, #0
 8013d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	61bb      	str	r3, [r7, #24]
 8013d0e:	e003      	b.n	8013d18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013d14:	2300      	movs	r3, #0
 8013d16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013d18:	e030      	b.n	8013d7c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	9300      	str	r3, [sp, #0]
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	2200      	movs	r2, #0
 8013d22:	2180      	movs	r1, #128	; 0x80
 8013d24:	68f8      	ldr	r0, [r7, #12]
 8013d26:	f001 fca3 	bl	8015670 <UART_WaitOnFlagUntilTimeout>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d005      	beq.n	8013d3c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2220      	movs	r2, #32
 8013d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8013d38:	2303      	movs	r3, #3
 8013d3a:	e03d      	b.n	8013db8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013d3c:	69fb      	ldr	r3, [r7, #28]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d10b      	bne.n	8013d5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013d42:	69bb      	ldr	r3, [r7, #24]
 8013d44:	881b      	ldrh	r3, [r3, #0]
 8013d46:	461a      	mov	r2, r3
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013d50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013d52:	69bb      	ldr	r3, [r7, #24]
 8013d54:	3302      	adds	r3, #2
 8013d56:	61bb      	str	r3, [r7, #24]
 8013d58:	e007      	b.n	8013d6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013d5a:	69fb      	ldr	r3, [r7, #28]
 8013d5c:	781a      	ldrb	r2, [r3, #0]
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013d64:	69fb      	ldr	r3, [r7, #28]
 8013d66:	3301      	adds	r3, #1
 8013d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	3b01      	subs	r3, #1
 8013d74:	b29a      	uxth	r2, r3
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d1c8      	bne.n	8013d1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	9300      	str	r3, [sp, #0]
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	2200      	movs	r2, #0
 8013d90:	2140      	movs	r1, #64	; 0x40
 8013d92:	68f8      	ldr	r0, [r7, #12]
 8013d94:	f001 fc6c 	bl	8015670 <UART_WaitOnFlagUntilTimeout>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d005      	beq.n	8013daa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	2220      	movs	r2, #32
 8013da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8013da6:	2303      	movs	r3, #3
 8013da8:	e006      	b.n	8013db8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	2220      	movs	r2, #32
 8013dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8013db2:	2300      	movs	r3, #0
 8013db4:	e000      	b.n	8013db8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8013db6:	2302      	movs	r3, #2
  }
}
 8013db8:	4618      	mov	r0, r3
 8013dba:	3720      	adds	r7, #32
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}

08013dc0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b08a      	sub	sp, #40	; 0x28
 8013dc4:	af02      	add	r7, sp, #8
 8013dc6:	60f8      	str	r0, [r7, #12]
 8013dc8:	60b9      	str	r1, [r7, #8]
 8013dca:	603b      	str	r3, [r7, #0]
 8013dcc:	4613      	mov	r3, r2
 8013dce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013dd6:	2b20      	cmp	r3, #32
 8013dd8:	f040 80b5 	bne.w	8013f46 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d002      	beq.n	8013de8 <HAL_UART_Receive+0x28>
 8013de2:	88fb      	ldrh	r3, [r7, #6]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d101      	bne.n	8013dec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8013de8:	2301      	movs	r3, #1
 8013dea:	e0ad      	b.n	8013f48 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2200      	movs	r2, #0
 8013df0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	2222      	movs	r2, #34	; 0x22
 8013df8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013e02:	f7f1 fc83 	bl	800570c <HAL_GetTick>
 8013e06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	88fa      	ldrh	r2, [r7, #6]
 8013e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	88fa      	ldrh	r2, [r7, #6]
 8013e14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	689b      	ldr	r3, [r3, #8]
 8013e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e20:	d10e      	bne.n	8013e40 <HAL_UART_Receive+0x80>
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	691b      	ldr	r3, [r3, #16]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d105      	bne.n	8013e36 <HAL_UART_Receive+0x76>
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013e30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013e34:	e02d      	b.n	8013e92 <HAL_UART_Receive+0xd2>
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	22ff      	movs	r2, #255	; 0xff
 8013e3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013e3e:	e028      	b.n	8013e92 <HAL_UART_Receive+0xd2>
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	689b      	ldr	r3, [r3, #8]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d10d      	bne.n	8013e64 <HAL_UART_Receive+0xa4>
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	691b      	ldr	r3, [r3, #16]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d104      	bne.n	8013e5a <HAL_UART_Receive+0x9a>
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	22ff      	movs	r2, #255	; 0xff
 8013e54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013e58:	e01b      	b.n	8013e92 <HAL_UART_Receive+0xd2>
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	227f      	movs	r2, #127	; 0x7f
 8013e5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013e62:	e016      	b.n	8013e92 <HAL_UART_Receive+0xd2>
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	689b      	ldr	r3, [r3, #8]
 8013e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013e6c:	d10d      	bne.n	8013e8a <HAL_UART_Receive+0xca>
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	691b      	ldr	r3, [r3, #16]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d104      	bne.n	8013e80 <HAL_UART_Receive+0xc0>
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	227f      	movs	r2, #127	; 0x7f
 8013e7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013e7e:	e008      	b.n	8013e92 <HAL_UART_Receive+0xd2>
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	223f      	movs	r2, #63	; 0x3f
 8013e84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013e88:	e003      	b.n	8013e92 <HAL_UART_Receive+0xd2>
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e98:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	689b      	ldr	r3, [r3, #8]
 8013e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013ea2:	d108      	bne.n	8013eb6 <HAL_UART_Receive+0xf6>
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	691b      	ldr	r3, [r3, #16]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d104      	bne.n	8013eb6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8013eac:	2300      	movs	r3, #0
 8013eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	61bb      	str	r3, [r7, #24]
 8013eb4:	e003      	b.n	8013ebe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8013ebe:	e036      	b.n	8013f2e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	9300      	str	r3, [sp, #0]
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	2120      	movs	r1, #32
 8013eca:	68f8      	ldr	r0, [r7, #12]
 8013ecc:	f001 fbd0 	bl	8015670 <UART_WaitOnFlagUntilTimeout>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d005      	beq.n	8013ee2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2220      	movs	r2, #32
 8013eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8013ede:	2303      	movs	r3, #3
 8013ee0:	e032      	b.n	8013f48 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8013ee2:	69fb      	ldr	r3, [r7, #28]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d10c      	bne.n	8013f02 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eee:	b29a      	uxth	r2, r3
 8013ef0:	8a7b      	ldrh	r3, [r7, #18]
 8013ef2:	4013      	ands	r3, r2
 8013ef4:	b29a      	uxth	r2, r3
 8013ef6:	69bb      	ldr	r3, [r7, #24]
 8013ef8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8013efa:	69bb      	ldr	r3, [r7, #24]
 8013efc:	3302      	adds	r3, #2
 8013efe:	61bb      	str	r3, [r7, #24]
 8013f00:	e00c      	b.n	8013f1c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f08:	b2da      	uxtb	r2, r3
 8013f0a:	8a7b      	ldrh	r3, [r7, #18]
 8013f0c:	b2db      	uxtb	r3, r3
 8013f0e:	4013      	ands	r3, r2
 8013f10:	b2da      	uxtb	r2, r3
 8013f12:	69fb      	ldr	r3, [r7, #28]
 8013f14:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8013f16:	69fb      	ldr	r3, [r7, #28]
 8013f18:	3301      	adds	r3, #1
 8013f1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013f22:	b29b      	uxth	r3, r3
 8013f24:	3b01      	subs	r3, #1
 8013f26:	b29a      	uxth	r2, r3
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d1c2      	bne.n	8013ec0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	2220      	movs	r2, #32
 8013f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8013f42:	2300      	movs	r3, #0
 8013f44:	e000      	b.n	8013f48 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8013f46:	2302      	movs	r3, #2
  }
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	3720      	adds	r7, #32
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}

08013f50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b08a      	sub	sp, #40	; 0x28
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	60f8      	str	r0, [r7, #12]
 8013f58:	60b9      	str	r1, [r7, #8]
 8013f5a:	4613      	mov	r3, r2
 8013f5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013f64:	2b20      	cmp	r3, #32
 8013f66:	d137      	bne.n	8013fd8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d002      	beq.n	8013f74 <HAL_UART_Receive_IT+0x24>
 8013f6e:	88fb      	ldrh	r3, [r7, #6]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d101      	bne.n	8013f78 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8013f74:	2301      	movs	r3, #1
 8013f76:	e030      	b.n	8013fda <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	4a18      	ldr	r2, [pc, #96]	; (8013fe4 <HAL_UART_Receive_IT+0x94>)
 8013f84:	4293      	cmp	r3, r2
 8013f86:	d01f      	beq.n	8013fc8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d018      	beq.n	8013fc8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	e853 3f00 	ldrex	r3, [r3]
 8013fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013faa:	627b      	str	r3, [r7, #36]	; 0x24
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	461a      	mov	r2, r3
 8013fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb4:	623b      	str	r3, [r7, #32]
 8013fb6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fb8:	69f9      	ldr	r1, [r7, #28]
 8013fba:	6a3a      	ldr	r2, [r7, #32]
 8013fbc:	e841 2300 	strex	r3, r2, [r1]
 8013fc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8013fc2:	69bb      	ldr	r3, [r7, #24]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d1e6      	bne.n	8013f96 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013fc8:	88fb      	ldrh	r3, [r7, #6]
 8013fca:	461a      	mov	r2, r3
 8013fcc:	68b9      	ldr	r1, [r7, #8]
 8013fce:	68f8      	ldr	r0, [r7, #12]
 8013fd0:	f001 fbbc 	bl	801574c <UART_Start_Receive_IT>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	e000      	b.n	8013fda <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013fd8:	2302      	movs	r3, #2
  }
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3728      	adds	r7, #40	; 0x28
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}
 8013fe2:	bf00      	nop
 8013fe4:	58000c00 	.word	0x58000c00

08013fe8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b09a      	sub	sp, #104	; 0x68
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ff8:	e853 3f00 	ldrex	r3, [r3]
 8013ffc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014004:	667b      	str	r3, [r7, #100]	; 0x64
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	461a      	mov	r2, r3
 801400c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801400e:	657b      	str	r3, [r7, #84]	; 0x54
 8014010:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014012:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014014:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014016:	e841 2300 	strex	r3, r2, [r1]
 801401a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801401c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801401e:	2b00      	cmp	r3, #0
 8014020:	d1e6      	bne.n	8013ff0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	3308      	adds	r3, #8
 8014028:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801402a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801402c:	e853 3f00 	ldrex	r3, [r3]
 8014030:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014034:	4b46      	ldr	r3, [pc, #280]	; (8014150 <HAL_UART_AbortReceive+0x168>)
 8014036:	4013      	ands	r3, r2
 8014038:	663b      	str	r3, [r7, #96]	; 0x60
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	3308      	adds	r3, #8
 8014040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014042:	643a      	str	r2, [r7, #64]	; 0x40
 8014044:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014046:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014048:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801404a:	e841 2300 	strex	r3, r2, [r1]
 801404e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014052:	2b00      	cmp	r3, #0
 8014054:	d1e5      	bne.n	8014022 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801405a:	2b01      	cmp	r3, #1
 801405c:	d118      	bne.n	8014090 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014064:	6a3b      	ldr	r3, [r7, #32]
 8014066:	e853 3f00 	ldrex	r3, [r3]
 801406a:	61fb      	str	r3, [r7, #28]
   return(result);
 801406c:	69fb      	ldr	r3, [r7, #28]
 801406e:	f023 0310 	bic.w	r3, r3, #16
 8014072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	461a      	mov	r2, r3
 801407a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801407c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801407e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014084:	e841 2300 	strex	r3, r2, [r1]
 8014088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408c:	2b00      	cmp	r3, #0
 801408e:	d1e6      	bne.n	801405e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	689b      	ldr	r3, [r3, #8]
 8014096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801409a:	2b40      	cmp	r3, #64	; 0x40
 801409c:	d13b      	bne.n	8014116 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	3308      	adds	r3, #8
 80140a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	e853 3f00 	ldrex	r3, [r3]
 80140ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80140b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	3308      	adds	r3, #8
 80140bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80140be:	61ba      	str	r2, [r7, #24]
 80140c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140c2:	6979      	ldr	r1, [r7, #20]
 80140c4:	69ba      	ldr	r2, [r7, #24]
 80140c6:	e841 2300 	strex	r3, r2, [r1]
 80140ca:	613b      	str	r3, [r7, #16]
   return(result);
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d1e5      	bne.n	801409e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d01c      	beq.n	8014116 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140e2:	2200      	movs	r2, #0
 80140e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7f4 fa73 	bl	80085d8 <HAL_DMA_Abort>
 80140f2:	4603      	mov	r3, r0
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d00e      	beq.n	8014116 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140fe:	4618      	mov	r0, r3
 8014100:	f7f5 ff06 	bl	8009f10 <HAL_DMA_GetError>
 8014104:	4603      	mov	r3, r0
 8014106:	2b20      	cmp	r3, #32
 8014108:	d105      	bne.n	8014116 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	2210      	movs	r2, #16
 801410e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8014112:	2303      	movs	r3, #3
 8014114:	e017      	b.n	8014146 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	2200      	movs	r2, #0
 801411a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	220f      	movs	r2, #15
 8014124:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	699a      	ldr	r2, [r3, #24]
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	f042 0208 	orr.w	r2, r2, #8
 8014134:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2220      	movs	r2, #32
 801413a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	2200      	movs	r2, #0
 8014142:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8014144:	2300      	movs	r3, #0
}
 8014146:	4618      	mov	r0, r3
 8014148:	3768      	adds	r7, #104	; 0x68
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
 801414e:	bf00      	nop
 8014150:	effffffe 	.word	0xeffffffe

08014154 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b0ba      	sub	sp, #232	; 0xe8
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	69db      	ldr	r3, [r3, #28]
 8014162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	689b      	ldr	r3, [r3, #8]
 8014176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801417a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801417e:	f640 030f 	movw	r3, #2063	; 0x80f
 8014182:	4013      	ands	r3, r2
 8014184:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801418c:	2b00      	cmp	r3, #0
 801418e:	d11b      	bne.n	80141c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014194:	f003 0320 	and.w	r3, r3, #32
 8014198:	2b00      	cmp	r3, #0
 801419a:	d015      	beq.n	80141c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80141a0:	f003 0320 	and.w	r3, r3, #32
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d105      	bne.n	80141b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80141a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80141ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d009      	beq.n	80141c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	f000 8377 	beq.w	80148ac <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141c2:	6878      	ldr	r0, [r7, #4]
 80141c4:	4798      	blx	r3
      }
      return;
 80141c6:	e371      	b.n	80148ac <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80141c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	f000 8123 	beq.w	8014418 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80141d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80141d6:	4b8d      	ldr	r3, [pc, #564]	; (801440c <HAL_UART_IRQHandler+0x2b8>)
 80141d8:	4013      	ands	r3, r2
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d106      	bne.n	80141ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80141de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80141e2:	4b8b      	ldr	r3, [pc, #556]	; (8014410 <HAL_UART_IRQHandler+0x2bc>)
 80141e4:	4013      	ands	r3, r2
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	f000 8116 	beq.w	8014418 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80141ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141f0:	f003 0301 	and.w	r3, r3, #1
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d011      	beq.n	801421c <HAL_UART_IRQHandler+0xc8>
 80141f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80141fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014200:	2b00      	cmp	r3, #0
 8014202:	d00b      	beq.n	801421c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	2201      	movs	r2, #1
 801420a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014212:	f043 0201 	orr.w	r2, r3, #1
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014220:	f003 0302 	and.w	r3, r3, #2
 8014224:	2b00      	cmp	r3, #0
 8014226:	d011      	beq.n	801424c <HAL_UART_IRQHandler+0xf8>
 8014228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801422c:	f003 0301 	and.w	r3, r3, #1
 8014230:	2b00      	cmp	r3, #0
 8014232:	d00b      	beq.n	801424c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	2202      	movs	r2, #2
 801423a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014242:	f043 0204 	orr.w	r2, r3, #4
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014250:	f003 0304 	and.w	r3, r3, #4
 8014254:	2b00      	cmp	r3, #0
 8014256:	d011      	beq.n	801427c <HAL_UART_IRQHandler+0x128>
 8014258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801425c:	f003 0301 	and.w	r3, r3, #1
 8014260:	2b00      	cmp	r3, #0
 8014262:	d00b      	beq.n	801427c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	2204      	movs	r2, #4
 801426a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014272:	f043 0202 	orr.w	r2, r3, #2
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014280:	f003 0308 	and.w	r3, r3, #8
 8014284:	2b00      	cmp	r3, #0
 8014286:	d017      	beq.n	80142b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801428c:	f003 0320 	and.w	r3, r3, #32
 8014290:	2b00      	cmp	r3, #0
 8014292:	d105      	bne.n	80142a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014294:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014298:	4b5c      	ldr	r3, [pc, #368]	; (801440c <HAL_UART_IRQHandler+0x2b8>)
 801429a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801429c:	2b00      	cmp	r3, #0
 801429e:	d00b      	beq.n	80142b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	2208      	movs	r2, #8
 80142a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142ae:	f043 0208 	orr.w	r2, r3, #8
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80142b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80142bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d012      	beq.n	80142ea <HAL_UART_IRQHandler+0x196>
 80142c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80142c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d00c      	beq.n	80142ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80142d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142e0:	f043 0220 	orr.w	r2, r3, #32
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	f000 82dd 	beq.w	80148b0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80142f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80142fa:	f003 0320 	and.w	r3, r3, #32
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d013      	beq.n	801432a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014306:	f003 0320 	and.w	r3, r3, #32
 801430a:	2b00      	cmp	r3, #0
 801430c:	d105      	bne.n	801431a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801430e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014316:	2b00      	cmp	r3, #0
 8014318:	d007      	beq.n	801432a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801431e:	2b00      	cmp	r3, #0
 8014320:	d003      	beq.n	801432a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014330:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	689b      	ldr	r3, [r3, #8]
 801433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801433e:	2b40      	cmp	r3, #64	; 0x40
 8014340:	d005      	beq.n	801434e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014346:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801434a:	2b00      	cmp	r3, #0
 801434c:	d054      	beq.n	80143f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f001 fb1e 	bl	8015990 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	689b      	ldr	r3, [r3, #8]
 801435a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801435e:	2b40      	cmp	r3, #64	; 0x40
 8014360:	d146      	bne.n	80143f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	3308      	adds	r3, #8
 8014368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801436c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014370:	e853 3f00 	ldrex	r3, [r3]
 8014374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801437c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	3308      	adds	r3, #8
 801438a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801438e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014396:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801439a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801439e:	e841 2300 	strex	r3, r2, [r1]
 80143a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80143a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d1d9      	bne.n	8014362 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d017      	beq.n	80143e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80143be:	4a15      	ldr	r2, [pc, #84]	; (8014414 <HAL_UART_IRQHandler+0x2c0>)
 80143c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7f4 fc23 	bl	8008c14 <HAL_DMA_Abort_IT>
 80143ce:	4603      	mov	r3, r0
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d019      	beq.n	8014408 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80143da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80143dc:	687a      	ldr	r2, [r7, #4]
 80143de:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80143e2:	4610      	mov	r0, r2
 80143e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143e6:	e00f      	b.n	8014408 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f000 fa77 	bl	80148dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143ee:	e00b      	b.n	8014408 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f000 fa73 	bl	80148dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143f6:	e007      	b.n	8014408 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f000 fa6f 	bl	80148dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2200      	movs	r2, #0
 8014402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8014406:	e253      	b.n	80148b0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014408:	bf00      	nop
    return;
 801440a:	e251      	b.n	80148b0 <HAL_UART_IRQHandler+0x75c>
 801440c:	10000001 	.word	0x10000001
 8014410:	04000120 	.word	0x04000120
 8014414:	08015a5d 	.word	0x08015a5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801441c:	2b01      	cmp	r3, #1
 801441e:	f040 81e7 	bne.w	80147f0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014426:	f003 0310 	and.w	r3, r3, #16
 801442a:	2b00      	cmp	r3, #0
 801442c:	f000 81e0 	beq.w	80147f0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014434:	f003 0310 	and.w	r3, r3, #16
 8014438:	2b00      	cmp	r3, #0
 801443a:	f000 81d9 	beq.w	80147f0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	2210      	movs	r2, #16
 8014444:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	689b      	ldr	r3, [r3, #8]
 801444c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014450:	2b40      	cmp	r3, #64	; 0x40
 8014452:	f040 8151 	bne.w	80146f8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	4a96      	ldr	r2, [pc, #600]	; (80146b8 <HAL_UART_IRQHandler+0x564>)
 8014460:	4293      	cmp	r3, r2
 8014462:	d068      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	4a93      	ldr	r2, [pc, #588]	; (80146bc <HAL_UART_IRQHandler+0x568>)
 801446e:	4293      	cmp	r3, r2
 8014470:	d061      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	4a91      	ldr	r2, [pc, #580]	; (80146c0 <HAL_UART_IRQHandler+0x56c>)
 801447c:	4293      	cmp	r3, r2
 801447e:	d05a      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	4a8e      	ldr	r2, [pc, #568]	; (80146c4 <HAL_UART_IRQHandler+0x570>)
 801448a:	4293      	cmp	r3, r2
 801448c:	d053      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	4a8c      	ldr	r2, [pc, #560]	; (80146c8 <HAL_UART_IRQHandler+0x574>)
 8014498:	4293      	cmp	r3, r2
 801449a:	d04c      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	4a89      	ldr	r2, [pc, #548]	; (80146cc <HAL_UART_IRQHandler+0x578>)
 80144a6:	4293      	cmp	r3, r2
 80144a8:	d045      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	4a87      	ldr	r2, [pc, #540]	; (80146d0 <HAL_UART_IRQHandler+0x57c>)
 80144b4:	4293      	cmp	r3, r2
 80144b6:	d03e      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	4a84      	ldr	r2, [pc, #528]	; (80146d4 <HAL_UART_IRQHandler+0x580>)
 80144c2:	4293      	cmp	r3, r2
 80144c4:	d037      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	4a82      	ldr	r2, [pc, #520]	; (80146d8 <HAL_UART_IRQHandler+0x584>)
 80144d0:	4293      	cmp	r3, r2
 80144d2:	d030      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	4a7f      	ldr	r2, [pc, #508]	; (80146dc <HAL_UART_IRQHandler+0x588>)
 80144de:	4293      	cmp	r3, r2
 80144e0:	d029      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4a7d      	ldr	r2, [pc, #500]	; (80146e0 <HAL_UART_IRQHandler+0x58c>)
 80144ec:	4293      	cmp	r3, r2
 80144ee:	d022      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	4a7a      	ldr	r2, [pc, #488]	; (80146e4 <HAL_UART_IRQHandler+0x590>)
 80144fa:	4293      	cmp	r3, r2
 80144fc:	d01b      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	4a78      	ldr	r2, [pc, #480]	; (80146e8 <HAL_UART_IRQHandler+0x594>)
 8014508:	4293      	cmp	r3, r2
 801450a:	d014      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	4a75      	ldr	r2, [pc, #468]	; (80146ec <HAL_UART_IRQHandler+0x598>)
 8014516:	4293      	cmp	r3, r2
 8014518:	d00d      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	4a73      	ldr	r2, [pc, #460]	; (80146f0 <HAL_UART_IRQHandler+0x59c>)
 8014524:	4293      	cmp	r3, r2
 8014526:	d006      	beq.n	8014536 <HAL_UART_IRQHandler+0x3e2>
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	4a70      	ldr	r2, [pc, #448]	; (80146f4 <HAL_UART_IRQHandler+0x5a0>)
 8014532:	4293      	cmp	r3, r2
 8014534:	d106      	bne.n	8014544 <HAL_UART_IRQHandler+0x3f0>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	685b      	ldr	r3, [r3, #4]
 8014540:	b29b      	uxth	r3, r3
 8014542:	e005      	b.n	8014550 <HAL_UART_IRQHandler+0x3fc>
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	685b      	ldr	r3, [r3, #4]
 801454e:	b29b      	uxth	r3, r3
 8014550:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014554:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014558:	2b00      	cmp	r3, #0
 801455a:	f000 81ab 	beq.w	80148b4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014564:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014568:	429a      	cmp	r2, r3
 801456a:	f080 81a3 	bcs.w	80148b4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801457e:	69db      	ldr	r3, [r3, #28]
 8014580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014584:	f000 8087 	beq.w	8014696 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014590:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014594:	e853 3f00 	ldrex	r3, [r3]
 8014598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801459c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80145a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80145a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	461a      	mov	r2, r3
 80145ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80145b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80145b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80145be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80145c2:	e841 2300 	strex	r3, r2, [r1]
 80145c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80145ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d1da      	bne.n	8014588 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	3308      	adds	r3, #8
 80145d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80145dc:	e853 3f00 	ldrex	r3, [r3]
 80145e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80145e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80145e4:	f023 0301 	bic.w	r3, r3, #1
 80145e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	3308      	adds	r3, #8
 80145f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80145f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80145fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80145fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014602:	e841 2300 	strex	r3, r2, [r1]
 8014606:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801460a:	2b00      	cmp	r3, #0
 801460c:	d1e1      	bne.n	80145d2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	3308      	adds	r3, #8
 8014614:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014618:	e853 3f00 	ldrex	r3, [r3]
 801461c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801461e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	3308      	adds	r3, #8
 801462e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014632:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014634:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014636:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014638:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801463a:	e841 2300 	strex	r3, r2, [r1]
 801463e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014642:	2b00      	cmp	r3, #0
 8014644:	d1e3      	bne.n	801460e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2220      	movs	r2, #32
 801464a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	2200      	movs	r2, #0
 8014652:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801465a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801465c:	e853 3f00 	ldrex	r3, [r3]
 8014660:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014664:	f023 0310 	bic.w	r3, r3, #16
 8014668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	461a      	mov	r2, r3
 8014672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014676:	65bb      	str	r3, [r7, #88]	; 0x58
 8014678:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801467a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801467c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801467e:	e841 2300 	strex	r3, r2, [r1]
 8014682:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014686:	2b00      	cmp	r3, #0
 8014688:	d1e4      	bne.n	8014654 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014690:	4618      	mov	r0, r3
 8014692:	f7f3 ffa1 	bl	80085d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2202      	movs	r2, #2
 801469a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146a8:	b29b      	uxth	r3, r3
 80146aa:	1ad3      	subs	r3, r2, r3
 80146ac:	b29b      	uxth	r3, r3
 80146ae:	4619      	mov	r1, r3
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f000 f91d 	bl	80148f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80146b6:	e0fd      	b.n	80148b4 <HAL_UART_IRQHandler+0x760>
 80146b8:	40020010 	.word	0x40020010
 80146bc:	40020028 	.word	0x40020028
 80146c0:	40020040 	.word	0x40020040
 80146c4:	40020058 	.word	0x40020058
 80146c8:	40020070 	.word	0x40020070
 80146cc:	40020088 	.word	0x40020088
 80146d0:	400200a0 	.word	0x400200a0
 80146d4:	400200b8 	.word	0x400200b8
 80146d8:	40020410 	.word	0x40020410
 80146dc:	40020428 	.word	0x40020428
 80146e0:	40020440 	.word	0x40020440
 80146e4:	40020458 	.word	0x40020458
 80146e8:	40020470 	.word	0x40020470
 80146ec:	40020488 	.word	0x40020488
 80146f0:	400204a0 	.word	0x400204a0
 80146f4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014704:	b29b      	uxth	r3, r3
 8014706:	1ad3      	subs	r3, r2, r3
 8014708:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014712:	b29b      	uxth	r3, r3
 8014714:	2b00      	cmp	r3, #0
 8014716:	f000 80cf 	beq.w	80148b8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801471a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801471e:	2b00      	cmp	r3, #0
 8014720:	f000 80ca 	beq.w	80148b8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801472c:	e853 3f00 	ldrex	r3, [r3]
 8014730:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	461a      	mov	r2, r3
 8014742:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014746:	647b      	str	r3, [r7, #68]	; 0x44
 8014748:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801474a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801474c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801474e:	e841 2300 	strex	r3, r2, [r1]
 8014752:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014756:	2b00      	cmp	r3, #0
 8014758:	d1e4      	bne.n	8014724 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	3308      	adds	r3, #8
 8014760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014764:	e853 3f00 	ldrex	r3, [r3]
 8014768:	623b      	str	r3, [r7, #32]
   return(result);
 801476a:	6a3a      	ldr	r2, [r7, #32]
 801476c:	4b55      	ldr	r3, [pc, #340]	; (80148c4 <HAL_UART_IRQHandler+0x770>)
 801476e:	4013      	ands	r3, r2
 8014770:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	3308      	adds	r3, #8
 801477a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801477e:	633a      	str	r2, [r7, #48]	; 0x30
 8014780:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014786:	e841 2300 	strex	r3, r2, [r1]
 801478a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801478e:	2b00      	cmp	r3, #0
 8014790:	d1e3      	bne.n	801475a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2220      	movs	r2, #32
 8014796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2200      	movs	r2, #0
 801479e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2200      	movs	r2, #0
 80147a4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147ac:	693b      	ldr	r3, [r7, #16]
 80147ae:	e853 3f00 	ldrex	r3, [r3]
 80147b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f023 0310 	bic.w	r3, r3, #16
 80147ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	461a      	mov	r2, r3
 80147c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80147c8:	61fb      	str	r3, [r7, #28]
 80147ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147cc:	69b9      	ldr	r1, [r7, #24]
 80147ce:	69fa      	ldr	r2, [r7, #28]
 80147d0:	e841 2300 	strex	r3, r2, [r1]
 80147d4:	617b      	str	r3, [r7, #20]
   return(result);
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d1e4      	bne.n	80147a6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2202      	movs	r2, #2
 80147e0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80147e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80147e6:	4619      	mov	r1, r3
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f000 f881 	bl	80148f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80147ee:	e063      	b.n	80148b8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80147f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80147f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d00e      	beq.n	801481a <HAL_UART_IRQHandler+0x6c6>
 80147fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014804:	2b00      	cmp	r3, #0
 8014806:	d008      	beq.n	801481a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014810:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f001 fe80 	bl	8016518 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014818:	e051      	b.n	80148be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014822:	2b00      	cmp	r3, #0
 8014824:	d014      	beq.n	8014850 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801482a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801482e:	2b00      	cmp	r3, #0
 8014830:	d105      	bne.n	801483e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801483a:	2b00      	cmp	r3, #0
 801483c:	d008      	beq.n	8014850 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014842:	2b00      	cmp	r3, #0
 8014844:	d03a      	beq.n	80148bc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801484a:	6878      	ldr	r0, [r7, #4]
 801484c:	4798      	blx	r3
    }
    return;
 801484e:	e035      	b.n	80148bc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014858:	2b00      	cmp	r3, #0
 801485a:	d009      	beq.n	8014870 <HAL_UART_IRQHandler+0x71c>
 801485c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014864:	2b00      	cmp	r3, #0
 8014866:	d003      	beq.n	8014870 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f001 f90d 	bl	8015a88 <UART_EndTransmit_IT>
    return;
 801486e:	e026      	b.n	80148be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014878:	2b00      	cmp	r3, #0
 801487a:	d009      	beq.n	8014890 <HAL_UART_IRQHandler+0x73c>
 801487c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014880:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014884:	2b00      	cmp	r3, #0
 8014886:	d003      	beq.n	8014890 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f001 fe59 	bl	8016540 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801488e:	e016      	b.n	80148be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014898:	2b00      	cmp	r3, #0
 801489a:	d010      	beq.n	80148be <HAL_UART_IRQHandler+0x76a>
 801489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	da0c      	bge.n	80148be <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f001 fe41 	bl	801652c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80148aa:	e008      	b.n	80148be <HAL_UART_IRQHandler+0x76a>
      return;
 80148ac:	bf00      	nop
 80148ae:	e006      	b.n	80148be <HAL_UART_IRQHandler+0x76a>
    return;
 80148b0:	bf00      	nop
 80148b2:	e004      	b.n	80148be <HAL_UART_IRQHandler+0x76a>
      return;
 80148b4:	bf00      	nop
 80148b6:	e002      	b.n	80148be <HAL_UART_IRQHandler+0x76a>
      return;
 80148b8:	bf00      	nop
 80148ba:	e000      	b.n	80148be <HAL_UART_IRQHandler+0x76a>
    return;
 80148bc:	bf00      	nop
  }
}
 80148be:	37e8      	adds	r7, #232	; 0xe8
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}
 80148c4:	effffffe 	.word	0xeffffffe

080148c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80148c8:	b480      	push	{r7}
 80148ca:	b083      	sub	sp, #12
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80148d0:	bf00      	nop
 80148d2:	370c      	adds	r7, #12
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr

080148dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80148dc:	b480      	push	{r7}
 80148de:	b083      	sub	sp, #12
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80148e4:	bf00      	nop
 80148e6:	370c      	adds	r7, #12
 80148e8:	46bd      	mov	sp, r7
 80148ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ee:	4770      	bx	lr

080148f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80148f0:	b480      	push	{r7}
 80148f2:	b083      	sub	sp, #12
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
 80148f8:	460b      	mov	r3, r1
 80148fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80148fc:	bf00      	nop
 80148fe:	370c      	adds	r7, #12
 8014900:	46bd      	mov	sp, r7
 8014902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014906:	4770      	bx	lr

08014908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801490c:	b092      	sub	sp, #72	; 0x48
 801490e:	af00      	add	r7, sp, #0
 8014910:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014912:	2300      	movs	r3, #0
 8014914:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	689a      	ldr	r2, [r3, #8]
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	691b      	ldr	r3, [r3, #16]
 8014920:	431a      	orrs	r2, r3
 8014922:	697b      	ldr	r3, [r7, #20]
 8014924:	695b      	ldr	r3, [r3, #20]
 8014926:	431a      	orrs	r2, r3
 8014928:	697b      	ldr	r3, [r7, #20]
 801492a:	69db      	ldr	r3, [r3, #28]
 801492c:	4313      	orrs	r3, r2
 801492e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	681a      	ldr	r2, [r3, #0]
 8014936:	4bbe      	ldr	r3, [pc, #760]	; (8014c30 <UART_SetConfig+0x328>)
 8014938:	4013      	ands	r3, r2
 801493a:	697a      	ldr	r2, [r7, #20]
 801493c:	6812      	ldr	r2, [r2, #0]
 801493e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014940:	430b      	orrs	r3, r1
 8014942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801494e:	697b      	ldr	r3, [r7, #20]
 8014950:	68da      	ldr	r2, [r3, #12]
 8014952:	697b      	ldr	r3, [r7, #20]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	430a      	orrs	r2, r1
 8014958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	699b      	ldr	r3, [r3, #24]
 801495e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014960:	697b      	ldr	r3, [r7, #20]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	4ab3      	ldr	r2, [pc, #716]	; (8014c34 <UART_SetConfig+0x32c>)
 8014966:	4293      	cmp	r3, r2
 8014968:	d004      	beq.n	8014974 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	6a1b      	ldr	r3, [r3, #32]
 801496e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014970:	4313      	orrs	r3, r2
 8014972:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	689a      	ldr	r2, [r3, #8]
 801497a:	4baf      	ldr	r3, [pc, #700]	; (8014c38 <UART_SetConfig+0x330>)
 801497c:	4013      	ands	r3, r2
 801497e:	697a      	ldr	r2, [r7, #20]
 8014980:	6812      	ldr	r2, [r2, #0]
 8014982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014984:	430b      	orrs	r3, r1
 8014986:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014988:	697b      	ldr	r3, [r7, #20]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801498e:	f023 010f 	bic.w	r1, r3, #15
 8014992:	697b      	ldr	r3, [r7, #20]
 8014994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014996:	697b      	ldr	r3, [r7, #20]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	430a      	orrs	r2, r1
 801499c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801499e:	697b      	ldr	r3, [r7, #20]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	4aa6      	ldr	r2, [pc, #664]	; (8014c3c <UART_SetConfig+0x334>)
 80149a4:	4293      	cmp	r3, r2
 80149a6:	d177      	bne.n	8014a98 <UART_SetConfig+0x190>
 80149a8:	4ba5      	ldr	r3, [pc, #660]	; (8014c40 <UART_SetConfig+0x338>)
 80149aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80149ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80149b0:	2b28      	cmp	r3, #40	; 0x28
 80149b2:	d86d      	bhi.n	8014a90 <UART_SetConfig+0x188>
 80149b4:	a201      	add	r2, pc, #4	; (adr r2, 80149bc <UART_SetConfig+0xb4>)
 80149b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149ba:	bf00      	nop
 80149bc:	08014a61 	.word	0x08014a61
 80149c0:	08014a91 	.word	0x08014a91
 80149c4:	08014a91 	.word	0x08014a91
 80149c8:	08014a91 	.word	0x08014a91
 80149cc:	08014a91 	.word	0x08014a91
 80149d0:	08014a91 	.word	0x08014a91
 80149d4:	08014a91 	.word	0x08014a91
 80149d8:	08014a91 	.word	0x08014a91
 80149dc:	08014a69 	.word	0x08014a69
 80149e0:	08014a91 	.word	0x08014a91
 80149e4:	08014a91 	.word	0x08014a91
 80149e8:	08014a91 	.word	0x08014a91
 80149ec:	08014a91 	.word	0x08014a91
 80149f0:	08014a91 	.word	0x08014a91
 80149f4:	08014a91 	.word	0x08014a91
 80149f8:	08014a91 	.word	0x08014a91
 80149fc:	08014a71 	.word	0x08014a71
 8014a00:	08014a91 	.word	0x08014a91
 8014a04:	08014a91 	.word	0x08014a91
 8014a08:	08014a91 	.word	0x08014a91
 8014a0c:	08014a91 	.word	0x08014a91
 8014a10:	08014a91 	.word	0x08014a91
 8014a14:	08014a91 	.word	0x08014a91
 8014a18:	08014a91 	.word	0x08014a91
 8014a1c:	08014a79 	.word	0x08014a79
 8014a20:	08014a91 	.word	0x08014a91
 8014a24:	08014a91 	.word	0x08014a91
 8014a28:	08014a91 	.word	0x08014a91
 8014a2c:	08014a91 	.word	0x08014a91
 8014a30:	08014a91 	.word	0x08014a91
 8014a34:	08014a91 	.word	0x08014a91
 8014a38:	08014a91 	.word	0x08014a91
 8014a3c:	08014a81 	.word	0x08014a81
 8014a40:	08014a91 	.word	0x08014a91
 8014a44:	08014a91 	.word	0x08014a91
 8014a48:	08014a91 	.word	0x08014a91
 8014a4c:	08014a91 	.word	0x08014a91
 8014a50:	08014a91 	.word	0x08014a91
 8014a54:	08014a91 	.word	0x08014a91
 8014a58:	08014a91 	.word	0x08014a91
 8014a5c:	08014a89 	.word	0x08014a89
 8014a60:	2301      	movs	r3, #1
 8014a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a66:	e222      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014a68:	2304      	movs	r3, #4
 8014a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a6e:	e21e      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014a70:	2308      	movs	r3, #8
 8014a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a76:	e21a      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014a78:	2310      	movs	r3, #16
 8014a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a7e:	e216      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014a80:	2320      	movs	r3, #32
 8014a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a86:	e212      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014a88:	2340      	movs	r3, #64	; 0x40
 8014a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a8e:	e20e      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014a90:	2380      	movs	r3, #128	; 0x80
 8014a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a96:	e20a      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	4a69      	ldr	r2, [pc, #420]	; (8014c44 <UART_SetConfig+0x33c>)
 8014a9e:	4293      	cmp	r3, r2
 8014aa0:	d130      	bne.n	8014b04 <UART_SetConfig+0x1fc>
 8014aa2:	4b67      	ldr	r3, [pc, #412]	; (8014c40 <UART_SetConfig+0x338>)
 8014aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014aa6:	f003 0307 	and.w	r3, r3, #7
 8014aaa:	2b05      	cmp	r3, #5
 8014aac:	d826      	bhi.n	8014afc <UART_SetConfig+0x1f4>
 8014aae:	a201      	add	r2, pc, #4	; (adr r2, 8014ab4 <UART_SetConfig+0x1ac>)
 8014ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ab4:	08014acd 	.word	0x08014acd
 8014ab8:	08014ad5 	.word	0x08014ad5
 8014abc:	08014add 	.word	0x08014add
 8014ac0:	08014ae5 	.word	0x08014ae5
 8014ac4:	08014aed 	.word	0x08014aed
 8014ac8:	08014af5 	.word	0x08014af5
 8014acc:	2300      	movs	r3, #0
 8014ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ad2:	e1ec      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014ad4:	2304      	movs	r3, #4
 8014ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ada:	e1e8      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014adc:	2308      	movs	r3, #8
 8014ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ae2:	e1e4      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014ae4:	2310      	movs	r3, #16
 8014ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014aea:	e1e0      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014aec:	2320      	movs	r3, #32
 8014aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014af2:	e1dc      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014af4:	2340      	movs	r3, #64	; 0x40
 8014af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014afa:	e1d8      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014afc:	2380      	movs	r3, #128	; 0x80
 8014afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b02:	e1d4      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	4a4f      	ldr	r2, [pc, #316]	; (8014c48 <UART_SetConfig+0x340>)
 8014b0a:	4293      	cmp	r3, r2
 8014b0c:	d130      	bne.n	8014b70 <UART_SetConfig+0x268>
 8014b0e:	4b4c      	ldr	r3, [pc, #304]	; (8014c40 <UART_SetConfig+0x338>)
 8014b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b12:	f003 0307 	and.w	r3, r3, #7
 8014b16:	2b05      	cmp	r3, #5
 8014b18:	d826      	bhi.n	8014b68 <UART_SetConfig+0x260>
 8014b1a:	a201      	add	r2, pc, #4	; (adr r2, 8014b20 <UART_SetConfig+0x218>)
 8014b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b20:	08014b39 	.word	0x08014b39
 8014b24:	08014b41 	.word	0x08014b41
 8014b28:	08014b49 	.word	0x08014b49
 8014b2c:	08014b51 	.word	0x08014b51
 8014b30:	08014b59 	.word	0x08014b59
 8014b34:	08014b61 	.word	0x08014b61
 8014b38:	2300      	movs	r3, #0
 8014b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b3e:	e1b6      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014b40:	2304      	movs	r3, #4
 8014b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b46:	e1b2      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014b48:	2308      	movs	r3, #8
 8014b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b4e:	e1ae      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014b50:	2310      	movs	r3, #16
 8014b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b56:	e1aa      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014b58:	2320      	movs	r3, #32
 8014b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b5e:	e1a6      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014b60:	2340      	movs	r3, #64	; 0x40
 8014b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b66:	e1a2      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014b68:	2380      	movs	r3, #128	; 0x80
 8014b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b6e:	e19e      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	4a35      	ldr	r2, [pc, #212]	; (8014c4c <UART_SetConfig+0x344>)
 8014b76:	4293      	cmp	r3, r2
 8014b78:	d130      	bne.n	8014bdc <UART_SetConfig+0x2d4>
 8014b7a:	4b31      	ldr	r3, [pc, #196]	; (8014c40 <UART_SetConfig+0x338>)
 8014b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b7e:	f003 0307 	and.w	r3, r3, #7
 8014b82:	2b05      	cmp	r3, #5
 8014b84:	d826      	bhi.n	8014bd4 <UART_SetConfig+0x2cc>
 8014b86:	a201      	add	r2, pc, #4	; (adr r2, 8014b8c <UART_SetConfig+0x284>)
 8014b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b8c:	08014ba5 	.word	0x08014ba5
 8014b90:	08014bad 	.word	0x08014bad
 8014b94:	08014bb5 	.word	0x08014bb5
 8014b98:	08014bbd 	.word	0x08014bbd
 8014b9c:	08014bc5 	.word	0x08014bc5
 8014ba0:	08014bcd 	.word	0x08014bcd
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014baa:	e180      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014bac:	2304      	movs	r3, #4
 8014bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bb2:	e17c      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014bb4:	2308      	movs	r3, #8
 8014bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bba:	e178      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014bbc:	2310      	movs	r3, #16
 8014bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bc2:	e174      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014bc4:	2320      	movs	r3, #32
 8014bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bca:	e170      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014bcc:	2340      	movs	r3, #64	; 0x40
 8014bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bd2:	e16c      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014bd4:	2380      	movs	r3, #128	; 0x80
 8014bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bda:	e168      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	4a1b      	ldr	r2, [pc, #108]	; (8014c50 <UART_SetConfig+0x348>)
 8014be2:	4293      	cmp	r3, r2
 8014be4:	d142      	bne.n	8014c6c <UART_SetConfig+0x364>
 8014be6:	4b16      	ldr	r3, [pc, #88]	; (8014c40 <UART_SetConfig+0x338>)
 8014be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bea:	f003 0307 	and.w	r3, r3, #7
 8014bee:	2b05      	cmp	r3, #5
 8014bf0:	d838      	bhi.n	8014c64 <UART_SetConfig+0x35c>
 8014bf2:	a201      	add	r2, pc, #4	; (adr r2, 8014bf8 <UART_SetConfig+0x2f0>)
 8014bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bf8:	08014c11 	.word	0x08014c11
 8014bfc:	08014c19 	.word	0x08014c19
 8014c00:	08014c21 	.word	0x08014c21
 8014c04:	08014c29 	.word	0x08014c29
 8014c08:	08014c55 	.word	0x08014c55
 8014c0c:	08014c5d 	.word	0x08014c5d
 8014c10:	2300      	movs	r3, #0
 8014c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c16:	e14a      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014c18:	2304      	movs	r3, #4
 8014c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c1e:	e146      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014c20:	2308      	movs	r3, #8
 8014c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c26:	e142      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014c28:	2310      	movs	r3, #16
 8014c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c2e:	e13e      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014c30:	cfff69f3 	.word	0xcfff69f3
 8014c34:	58000c00 	.word	0x58000c00
 8014c38:	11fff4ff 	.word	0x11fff4ff
 8014c3c:	40011000 	.word	0x40011000
 8014c40:	58024400 	.word	0x58024400
 8014c44:	40004400 	.word	0x40004400
 8014c48:	40004800 	.word	0x40004800
 8014c4c:	40004c00 	.word	0x40004c00
 8014c50:	40005000 	.word	0x40005000
 8014c54:	2320      	movs	r3, #32
 8014c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c5a:	e128      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014c5c:	2340      	movs	r3, #64	; 0x40
 8014c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c62:	e124      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014c64:	2380      	movs	r3, #128	; 0x80
 8014c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c6a:	e120      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014c6c:	697b      	ldr	r3, [r7, #20]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	4acb      	ldr	r2, [pc, #812]	; (8014fa0 <UART_SetConfig+0x698>)
 8014c72:	4293      	cmp	r3, r2
 8014c74:	d176      	bne.n	8014d64 <UART_SetConfig+0x45c>
 8014c76:	4bcb      	ldr	r3, [pc, #812]	; (8014fa4 <UART_SetConfig+0x69c>)
 8014c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014c7e:	2b28      	cmp	r3, #40	; 0x28
 8014c80:	d86c      	bhi.n	8014d5c <UART_SetConfig+0x454>
 8014c82:	a201      	add	r2, pc, #4	; (adr r2, 8014c88 <UART_SetConfig+0x380>)
 8014c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c88:	08014d2d 	.word	0x08014d2d
 8014c8c:	08014d5d 	.word	0x08014d5d
 8014c90:	08014d5d 	.word	0x08014d5d
 8014c94:	08014d5d 	.word	0x08014d5d
 8014c98:	08014d5d 	.word	0x08014d5d
 8014c9c:	08014d5d 	.word	0x08014d5d
 8014ca0:	08014d5d 	.word	0x08014d5d
 8014ca4:	08014d5d 	.word	0x08014d5d
 8014ca8:	08014d35 	.word	0x08014d35
 8014cac:	08014d5d 	.word	0x08014d5d
 8014cb0:	08014d5d 	.word	0x08014d5d
 8014cb4:	08014d5d 	.word	0x08014d5d
 8014cb8:	08014d5d 	.word	0x08014d5d
 8014cbc:	08014d5d 	.word	0x08014d5d
 8014cc0:	08014d5d 	.word	0x08014d5d
 8014cc4:	08014d5d 	.word	0x08014d5d
 8014cc8:	08014d3d 	.word	0x08014d3d
 8014ccc:	08014d5d 	.word	0x08014d5d
 8014cd0:	08014d5d 	.word	0x08014d5d
 8014cd4:	08014d5d 	.word	0x08014d5d
 8014cd8:	08014d5d 	.word	0x08014d5d
 8014cdc:	08014d5d 	.word	0x08014d5d
 8014ce0:	08014d5d 	.word	0x08014d5d
 8014ce4:	08014d5d 	.word	0x08014d5d
 8014ce8:	08014d45 	.word	0x08014d45
 8014cec:	08014d5d 	.word	0x08014d5d
 8014cf0:	08014d5d 	.word	0x08014d5d
 8014cf4:	08014d5d 	.word	0x08014d5d
 8014cf8:	08014d5d 	.word	0x08014d5d
 8014cfc:	08014d5d 	.word	0x08014d5d
 8014d00:	08014d5d 	.word	0x08014d5d
 8014d04:	08014d5d 	.word	0x08014d5d
 8014d08:	08014d4d 	.word	0x08014d4d
 8014d0c:	08014d5d 	.word	0x08014d5d
 8014d10:	08014d5d 	.word	0x08014d5d
 8014d14:	08014d5d 	.word	0x08014d5d
 8014d18:	08014d5d 	.word	0x08014d5d
 8014d1c:	08014d5d 	.word	0x08014d5d
 8014d20:	08014d5d 	.word	0x08014d5d
 8014d24:	08014d5d 	.word	0x08014d5d
 8014d28:	08014d55 	.word	0x08014d55
 8014d2c:	2301      	movs	r3, #1
 8014d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d32:	e0bc      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014d34:	2304      	movs	r3, #4
 8014d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d3a:	e0b8      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014d3c:	2308      	movs	r3, #8
 8014d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d42:	e0b4      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014d44:	2310      	movs	r3, #16
 8014d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d4a:	e0b0      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014d4c:	2320      	movs	r3, #32
 8014d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d52:	e0ac      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014d54:	2340      	movs	r3, #64	; 0x40
 8014d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d5a:	e0a8      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014d5c:	2380      	movs	r3, #128	; 0x80
 8014d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d62:	e0a4      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014d64:	697b      	ldr	r3, [r7, #20]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	4a8f      	ldr	r2, [pc, #572]	; (8014fa8 <UART_SetConfig+0x6a0>)
 8014d6a:	4293      	cmp	r3, r2
 8014d6c:	d130      	bne.n	8014dd0 <UART_SetConfig+0x4c8>
 8014d6e:	4b8d      	ldr	r3, [pc, #564]	; (8014fa4 <UART_SetConfig+0x69c>)
 8014d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d72:	f003 0307 	and.w	r3, r3, #7
 8014d76:	2b05      	cmp	r3, #5
 8014d78:	d826      	bhi.n	8014dc8 <UART_SetConfig+0x4c0>
 8014d7a:	a201      	add	r2, pc, #4	; (adr r2, 8014d80 <UART_SetConfig+0x478>)
 8014d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d80:	08014d99 	.word	0x08014d99
 8014d84:	08014da1 	.word	0x08014da1
 8014d88:	08014da9 	.word	0x08014da9
 8014d8c:	08014db1 	.word	0x08014db1
 8014d90:	08014db9 	.word	0x08014db9
 8014d94:	08014dc1 	.word	0x08014dc1
 8014d98:	2300      	movs	r3, #0
 8014d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d9e:	e086      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014da0:	2304      	movs	r3, #4
 8014da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014da6:	e082      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014da8:	2308      	movs	r3, #8
 8014daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dae:	e07e      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014db0:	2310      	movs	r3, #16
 8014db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014db6:	e07a      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014db8:	2320      	movs	r3, #32
 8014dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dbe:	e076      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014dc0:	2340      	movs	r3, #64	; 0x40
 8014dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dc6:	e072      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014dc8:	2380      	movs	r3, #128	; 0x80
 8014dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dce:	e06e      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	4a75      	ldr	r2, [pc, #468]	; (8014fac <UART_SetConfig+0x6a4>)
 8014dd6:	4293      	cmp	r3, r2
 8014dd8:	d130      	bne.n	8014e3c <UART_SetConfig+0x534>
 8014dda:	4b72      	ldr	r3, [pc, #456]	; (8014fa4 <UART_SetConfig+0x69c>)
 8014ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dde:	f003 0307 	and.w	r3, r3, #7
 8014de2:	2b05      	cmp	r3, #5
 8014de4:	d826      	bhi.n	8014e34 <UART_SetConfig+0x52c>
 8014de6:	a201      	add	r2, pc, #4	; (adr r2, 8014dec <UART_SetConfig+0x4e4>)
 8014de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dec:	08014e05 	.word	0x08014e05
 8014df0:	08014e0d 	.word	0x08014e0d
 8014df4:	08014e15 	.word	0x08014e15
 8014df8:	08014e1d 	.word	0x08014e1d
 8014dfc:	08014e25 	.word	0x08014e25
 8014e00:	08014e2d 	.word	0x08014e2d
 8014e04:	2300      	movs	r3, #0
 8014e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e0a:	e050      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014e0c:	2304      	movs	r3, #4
 8014e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e12:	e04c      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014e14:	2308      	movs	r3, #8
 8014e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e1a:	e048      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014e1c:	2310      	movs	r3, #16
 8014e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e22:	e044      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014e24:	2320      	movs	r3, #32
 8014e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e2a:	e040      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014e2c:	2340      	movs	r3, #64	; 0x40
 8014e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e32:	e03c      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014e34:	2380      	movs	r3, #128	; 0x80
 8014e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e3a:	e038      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	4a5b      	ldr	r2, [pc, #364]	; (8014fb0 <UART_SetConfig+0x6a8>)
 8014e42:	4293      	cmp	r3, r2
 8014e44:	d130      	bne.n	8014ea8 <UART_SetConfig+0x5a0>
 8014e46:	4b57      	ldr	r3, [pc, #348]	; (8014fa4 <UART_SetConfig+0x69c>)
 8014e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e4a:	f003 0307 	and.w	r3, r3, #7
 8014e4e:	2b05      	cmp	r3, #5
 8014e50:	d826      	bhi.n	8014ea0 <UART_SetConfig+0x598>
 8014e52:	a201      	add	r2, pc, #4	; (adr r2, 8014e58 <UART_SetConfig+0x550>)
 8014e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e58:	08014e71 	.word	0x08014e71
 8014e5c:	08014e79 	.word	0x08014e79
 8014e60:	08014e81 	.word	0x08014e81
 8014e64:	08014e89 	.word	0x08014e89
 8014e68:	08014e91 	.word	0x08014e91
 8014e6c:	08014e99 	.word	0x08014e99
 8014e70:	2302      	movs	r3, #2
 8014e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e76:	e01a      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014e78:	2304      	movs	r3, #4
 8014e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e7e:	e016      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014e80:	2308      	movs	r3, #8
 8014e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e86:	e012      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014e88:	2310      	movs	r3, #16
 8014e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e8e:	e00e      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014e90:	2320      	movs	r3, #32
 8014e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e96:	e00a      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014e98:	2340      	movs	r3, #64	; 0x40
 8014e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e9e:	e006      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014ea0:	2380      	movs	r3, #128	; 0x80
 8014ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ea6:	e002      	b.n	8014eae <UART_SetConfig+0x5a6>
 8014ea8:	2380      	movs	r3, #128	; 0x80
 8014eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014eae:	697b      	ldr	r3, [r7, #20]
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	4a3f      	ldr	r2, [pc, #252]	; (8014fb0 <UART_SetConfig+0x6a8>)
 8014eb4:	4293      	cmp	r3, r2
 8014eb6:	f040 80f8 	bne.w	80150aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014eba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014ebe:	2b20      	cmp	r3, #32
 8014ec0:	dc46      	bgt.n	8014f50 <UART_SetConfig+0x648>
 8014ec2:	2b02      	cmp	r3, #2
 8014ec4:	f2c0 8082 	blt.w	8014fcc <UART_SetConfig+0x6c4>
 8014ec8:	3b02      	subs	r3, #2
 8014eca:	2b1e      	cmp	r3, #30
 8014ecc:	d87e      	bhi.n	8014fcc <UART_SetConfig+0x6c4>
 8014ece:	a201      	add	r2, pc, #4	; (adr r2, 8014ed4 <UART_SetConfig+0x5cc>)
 8014ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ed4:	08014f57 	.word	0x08014f57
 8014ed8:	08014fcd 	.word	0x08014fcd
 8014edc:	08014f5f 	.word	0x08014f5f
 8014ee0:	08014fcd 	.word	0x08014fcd
 8014ee4:	08014fcd 	.word	0x08014fcd
 8014ee8:	08014fcd 	.word	0x08014fcd
 8014eec:	08014f6f 	.word	0x08014f6f
 8014ef0:	08014fcd 	.word	0x08014fcd
 8014ef4:	08014fcd 	.word	0x08014fcd
 8014ef8:	08014fcd 	.word	0x08014fcd
 8014efc:	08014fcd 	.word	0x08014fcd
 8014f00:	08014fcd 	.word	0x08014fcd
 8014f04:	08014fcd 	.word	0x08014fcd
 8014f08:	08014fcd 	.word	0x08014fcd
 8014f0c:	08014f7f 	.word	0x08014f7f
 8014f10:	08014fcd 	.word	0x08014fcd
 8014f14:	08014fcd 	.word	0x08014fcd
 8014f18:	08014fcd 	.word	0x08014fcd
 8014f1c:	08014fcd 	.word	0x08014fcd
 8014f20:	08014fcd 	.word	0x08014fcd
 8014f24:	08014fcd 	.word	0x08014fcd
 8014f28:	08014fcd 	.word	0x08014fcd
 8014f2c:	08014fcd 	.word	0x08014fcd
 8014f30:	08014fcd 	.word	0x08014fcd
 8014f34:	08014fcd 	.word	0x08014fcd
 8014f38:	08014fcd 	.word	0x08014fcd
 8014f3c:	08014fcd 	.word	0x08014fcd
 8014f40:	08014fcd 	.word	0x08014fcd
 8014f44:	08014fcd 	.word	0x08014fcd
 8014f48:	08014fcd 	.word	0x08014fcd
 8014f4c:	08014fbf 	.word	0x08014fbf
 8014f50:	2b40      	cmp	r3, #64	; 0x40
 8014f52:	d037      	beq.n	8014fc4 <UART_SetConfig+0x6bc>
 8014f54:	e03a      	b.n	8014fcc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8014f56:	f7fb fc17 	bl	8010788 <HAL_RCCEx_GetD3PCLK1Freq>
 8014f5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014f5c:	e03c      	b.n	8014fd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7fb fc26 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014f6c:	e034      	b.n	8014fd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014f6e:	f107 0318 	add.w	r3, r7, #24
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7fb fd72 	bl	8010a5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014f78:	69fb      	ldr	r3, [r7, #28]
 8014f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014f7c:	e02c      	b.n	8014fd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014f7e:	4b09      	ldr	r3, [pc, #36]	; (8014fa4 <UART_SetConfig+0x69c>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	f003 0320 	and.w	r3, r3, #32
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d016      	beq.n	8014fb8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014f8a:	4b06      	ldr	r3, [pc, #24]	; (8014fa4 <UART_SetConfig+0x69c>)
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	08db      	lsrs	r3, r3, #3
 8014f90:	f003 0303 	and.w	r3, r3, #3
 8014f94:	4a07      	ldr	r2, [pc, #28]	; (8014fb4 <UART_SetConfig+0x6ac>)
 8014f96:	fa22 f303 	lsr.w	r3, r2, r3
 8014f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014f9c:	e01c      	b.n	8014fd8 <UART_SetConfig+0x6d0>
 8014f9e:	bf00      	nop
 8014fa0:	40011400 	.word	0x40011400
 8014fa4:	58024400 	.word	0x58024400
 8014fa8:	40007800 	.word	0x40007800
 8014fac:	40007c00 	.word	0x40007c00
 8014fb0:	58000c00 	.word	0x58000c00
 8014fb4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8014fb8:	4b9d      	ldr	r3, [pc, #628]	; (8015230 <UART_SetConfig+0x928>)
 8014fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014fbc:	e00c      	b.n	8014fd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014fbe:	4b9d      	ldr	r3, [pc, #628]	; (8015234 <UART_SetConfig+0x92c>)
 8014fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014fc2:	e009      	b.n	8014fd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014fca:	e005      	b.n	8014fd8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8014fcc:	2300      	movs	r3, #0
 8014fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014fd6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	f000 81de 	beq.w	801539c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fe4:	4a94      	ldr	r2, [pc, #592]	; (8015238 <UART_SetConfig+0x930>)
 8014fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014fea:	461a      	mov	r2, r3
 8014fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fee:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ff2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014ff4:	697b      	ldr	r3, [r7, #20]
 8014ff6:	685a      	ldr	r2, [r3, #4]
 8014ff8:	4613      	mov	r3, r2
 8014ffa:	005b      	lsls	r3, r3, #1
 8014ffc:	4413      	add	r3, r2
 8014ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015000:	429a      	cmp	r2, r3
 8015002:	d305      	bcc.n	8015010 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	685b      	ldr	r3, [r3, #4]
 8015008:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801500a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801500c:	429a      	cmp	r2, r3
 801500e:	d903      	bls.n	8015018 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8015010:	2301      	movs	r3, #1
 8015012:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015016:	e1c1      	b.n	801539c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801501a:	2200      	movs	r2, #0
 801501c:	60bb      	str	r3, [r7, #8]
 801501e:	60fa      	str	r2, [r7, #12]
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015024:	4a84      	ldr	r2, [pc, #528]	; (8015238 <UART_SetConfig+0x930>)
 8015026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801502a:	b29b      	uxth	r3, r3
 801502c:	2200      	movs	r2, #0
 801502e:	603b      	str	r3, [r7, #0]
 8015030:	607a      	str	r2, [r7, #4]
 8015032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015036:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801503a:	f7eb f951 	bl	80002e0 <__aeabi_uldivmod>
 801503e:	4602      	mov	r2, r0
 8015040:	460b      	mov	r3, r1
 8015042:	4610      	mov	r0, r2
 8015044:	4619      	mov	r1, r3
 8015046:	f04f 0200 	mov.w	r2, #0
 801504a:	f04f 0300 	mov.w	r3, #0
 801504e:	020b      	lsls	r3, r1, #8
 8015050:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015054:	0202      	lsls	r2, r0, #8
 8015056:	6979      	ldr	r1, [r7, #20]
 8015058:	6849      	ldr	r1, [r1, #4]
 801505a:	0849      	lsrs	r1, r1, #1
 801505c:	2000      	movs	r0, #0
 801505e:	460c      	mov	r4, r1
 8015060:	4605      	mov	r5, r0
 8015062:	eb12 0804 	adds.w	r8, r2, r4
 8015066:	eb43 0905 	adc.w	r9, r3, r5
 801506a:	697b      	ldr	r3, [r7, #20]
 801506c:	685b      	ldr	r3, [r3, #4]
 801506e:	2200      	movs	r2, #0
 8015070:	469a      	mov	sl, r3
 8015072:	4693      	mov	fp, r2
 8015074:	4652      	mov	r2, sl
 8015076:	465b      	mov	r3, fp
 8015078:	4640      	mov	r0, r8
 801507a:	4649      	mov	r1, r9
 801507c:	f7eb f930 	bl	80002e0 <__aeabi_uldivmod>
 8015080:	4602      	mov	r2, r0
 8015082:	460b      	mov	r3, r1
 8015084:	4613      	mov	r3, r2
 8015086:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801508a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801508e:	d308      	bcc.n	80150a2 <UART_SetConfig+0x79a>
 8015090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015096:	d204      	bcs.n	80150a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801509e:	60da      	str	r2, [r3, #12]
 80150a0:	e17c      	b.n	801539c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80150a2:	2301      	movs	r3, #1
 80150a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80150a8:	e178      	b.n	801539c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	69db      	ldr	r3, [r3, #28]
 80150ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80150b2:	f040 80c5 	bne.w	8015240 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80150b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80150ba:	2b20      	cmp	r3, #32
 80150bc:	dc48      	bgt.n	8015150 <UART_SetConfig+0x848>
 80150be:	2b00      	cmp	r3, #0
 80150c0:	db7b      	blt.n	80151ba <UART_SetConfig+0x8b2>
 80150c2:	2b20      	cmp	r3, #32
 80150c4:	d879      	bhi.n	80151ba <UART_SetConfig+0x8b2>
 80150c6:	a201      	add	r2, pc, #4	; (adr r2, 80150cc <UART_SetConfig+0x7c4>)
 80150c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150cc:	08015157 	.word	0x08015157
 80150d0:	0801515f 	.word	0x0801515f
 80150d4:	080151bb 	.word	0x080151bb
 80150d8:	080151bb 	.word	0x080151bb
 80150dc:	08015167 	.word	0x08015167
 80150e0:	080151bb 	.word	0x080151bb
 80150e4:	080151bb 	.word	0x080151bb
 80150e8:	080151bb 	.word	0x080151bb
 80150ec:	08015177 	.word	0x08015177
 80150f0:	080151bb 	.word	0x080151bb
 80150f4:	080151bb 	.word	0x080151bb
 80150f8:	080151bb 	.word	0x080151bb
 80150fc:	080151bb 	.word	0x080151bb
 8015100:	080151bb 	.word	0x080151bb
 8015104:	080151bb 	.word	0x080151bb
 8015108:	080151bb 	.word	0x080151bb
 801510c:	08015187 	.word	0x08015187
 8015110:	080151bb 	.word	0x080151bb
 8015114:	080151bb 	.word	0x080151bb
 8015118:	080151bb 	.word	0x080151bb
 801511c:	080151bb 	.word	0x080151bb
 8015120:	080151bb 	.word	0x080151bb
 8015124:	080151bb 	.word	0x080151bb
 8015128:	080151bb 	.word	0x080151bb
 801512c:	080151bb 	.word	0x080151bb
 8015130:	080151bb 	.word	0x080151bb
 8015134:	080151bb 	.word	0x080151bb
 8015138:	080151bb 	.word	0x080151bb
 801513c:	080151bb 	.word	0x080151bb
 8015140:	080151bb 	.word	0x080151bb
 8015144:	080151bb 	.word	0x080151bb
 8015148:	080151bb 	.word	0x080151bb
 801514c:	080151ad 	.word	0x080151ad
 8015150:	2b40      	cmp	r3, #64	; 0x40
 8015152:	d02e      	beq.n	80151b2 <UART_SetConfig+0x8aa>
 8015154:	e031      	b.n	80151ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015156:	f7f9 fb1f 	bl	800e798 <HAL_RCC_GetPCLK1Freq>
 801515a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801515c:	e033      	b.n	80151c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801515e:	f7f9 fb31 	bl	800e7c4 <HAL_RCC_GetPCLK2Freq>
 8015162:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015164:	e02f      	b.n	80151c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801516a:	4618      	mov	r0, r3
 801516c:	f7fb fb22 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015174:	e027      	b.n	80151c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015176:	f107 0318 	add.w	r3, r7, #24
 801517a:	4618      	mov	r0, r3
 801517c:	f7fb fc6e 	bl	8010a5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015180:	69fb      	ldr	r3, [r7, #28]
 8015182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015184:	e01f      	b.n	80151c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015186:	4b2d      	ldr	r3, [pc, #180]	; (801523c <UART_SetConfig+0x934>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	f003 0320 	and.w	r3, r3, #32
 801518e:	2b00      	cmp	r3, #0
 8015190:	d009      	beq.n	80151a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015192:	4b2a      	ldr	r3, [pc, #168]	; (801523c <UART_SetConfig+0x934>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	08db      	lsrs	r3, r3, #3
 8015198:	f003 0303 	and.w	r3, r3, #3
 801519c:	4a24      	ldr	r2, [pc, #144]	; (8015230 <UART_SetConfig+0x928>)
 801519e:	fa22 f303 	lsr.w	r3, r2, r3
 80151a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80151a4:	e00f      	b.n	80151c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80151a6:	4b22      	ldr	r3, [pc, #136]	; (8015230 <UART_SetConfig+0x928>)
 80151a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80151aa:	e00c      	b.n	80151c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80151ac:	4b21      	ldr	r3, [pc, #132]	; (8015234 <UART_SetConfig+0x92c>)
 80151ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80151b0:	e009      	b.n	80151c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80151b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80151b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80151b8:	e005      	b.n	80151c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80151ba:	2300      	movs	r3, #0
 80151bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80151be:	2301      	movs	r3, #1
 80151c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80151c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80151c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	f000 80e7 	beq.w	801539c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80151ce:	697b      	ldr	r3, [r7, #20]
 80151d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151d2:	4a19      	ldr	r2, [pc, #100]	; (8015238 <UART_SetConfig+0x930>)
 80151d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80151d8:	461a      	mov	r2, r3
 80151da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80151e0:	005a      	lsls	r2, r3, #1
 80151e2:	697b      	ldr	r3, [r7, #20]
 80151e4:	685b      	ldr	r3, [r3, #4]
 80151e6:	085b      	lsrs	r3, r3, #1
 80151e8:	441a      	add	r2, r3
 80151ea:	697b      	ldr	r3, [r7, #20]
 80151ec:	685b      	ldr	r3, [r3, #4]
 80151ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80151f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80151f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151f6:	2b0f      	cmp	r3, #15
 80151f8:	d916      	bls.n	8015228 <UART_SetConfig+0x920>
 80151fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015200:	d212      	bcs.n	8015228 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015204:	b29b      	uxth	r3, r3
 8015206:	f023 030f 	bic.w	r3, r3, #15
 801520a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801520e:	085b      	lsrs	r3, r3, #1
 8015210:	b29b      	uxth	r3, r3
 8015212:	f003 0307 	and.w	r3, r3, #7
 8015216:	b29a      	uxth	r2, r3
 8015218:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801521a:	4313      	orrs	r3, r2
 801521c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801521e:	697b      	ldr	r3, [r7, #20]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015224:	60da      	str	r2, [r3, #12]
 8015226:	e0b9      	b.n	801539c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015228:	2301      	movs	r3, #1
 801522a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801522e:	e0b5      	b.n	801539c <UART_SetConfig+0xa94>
 8015230:	03d09000 	.word	0x03d09000
 8015234:	003d0900 	.word	0x003d0900
 8015238:	0801ab2c 	.word	0x0801ab2c
 801523c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8015240:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015244:	2b20      	cmp	r3, #32
 8015246:	dc49      	bgt.n	80152dc <UART_SetConfig+0x9d4>
 8015248:	2b00      	cmp	r3, #0
 801524a:	db7c      	blt.n	8015346 <UART_SetConfig+0xa3e>
 801524c:	2b20      	cmp	r3, #32
 801524e:	d87a      	bhi.n	8015346 <UART_SetConfig+0xa3e>
 8015250:	a201      	add	r2, pc, #4	; (adr r2, 8015258 <UART_SetConfig+0x950>)
 8015252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015256:	bf00      	nop
 8015258:	080152e3 	.word	0x080152e3
 801525c:	080152eb 	.word	0x080152eb
 8015260:	08015347 	.word	0x08015347
 8015264:	08015347 	.word	0x08015347
 8015268:	080152f3 	.word	0x080152f3
 801526c:	08015347 	.word	0x08015347
 8015270:	08015347 	.word	0x08015347
 8015274:	08015347 	.word	0x08015347
 8015278:	08015303 	.word	0x08015303
 801527c:	08015347 	.word	0x08015347
 8015280:	08015347 	.word	0x08015347
 8015284:	08015347 	.word	0x08015347
 8015288:	08015347 	.word	0x08015347
 801528c:	08015347 	.word	0x08015347
 8015290:	08015347 	.word	0x08015347
 8015294:	08015347 	.word	0x08015347
 8015298:	08015313 	.word	0x08015313
 801529c:	08015347 	.word	0x08015347
 80152a0:	08015347 	.word	0x08015347
 80152a4:	08015347 	.word	0x08015347
 80152a8:	08015347 	.word	0x08015347
 80152ac:	08015347 	.word	0x08015347
 80152b0:	08015347 	.word	0x08015347
 80152b4:	08015347 	.word	0x08015347
 80152b8:	08015347 	.word	0x08015347
 80152bc:	08015347 	.word	0x08015347
 80152c0:	08015347 	.word	0x08015347
 80152c4:	08015347 	.word	0x08015347
 80152c8:	08015347 	.word	0x08015347
 80152cc:	08015347 	.word	0x08015347
 80152d0:	08015347 	.word	0x08015347
 80152d4:	08015347 	.word	0x08015347
 80152d8:	08015339 	.word	0x08015339
 80152dc:	2b40      	cmp	r3, #64	; 0x40
 80152de:	d02e      	beq.n	801533e <UART_SetConfig+0xa36>
 80152e0:	e031      	b.n	8015346 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80152e2:	f7f9 fa59 	bl	800e798 <HAL_RCC_GetPCLK1Freq>
 80152e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80152e8:	e033      	b.n	8015352 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80152ea:	f7f9 fa6b 	bl	800e7c4 <HAL_RCC_GetPCLK2Freq>
 80152ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80152f0:	e02f      	b.n	8015352 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80152f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7fb fa5c 	bl	80107b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80152fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015300:	e027      	b.n	8015352 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015302:	f107 0318 	add.w	r3, r7, #24
 8015306:	4618      	mov	r0, r3
 8015308:	f7fb fba8 	bl	8010a5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801530c:	69fb      	ldr	r3, [r7, #28]
 801530e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015310:	e01f      	b.n	8015352 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015312:	4b2d      	ldr	r3, [pc, #180]	; (80153c8 <UART_SetConfig+0xac0>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	f003 0320 	and.w	r3, r3, #32
 801531a:	2b00      	cmp	r3, #0
 801531c:	d009      	beq.n	8015332 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801531e:	4b2a      	ldr	r3, [pc, #168]	; (80153c8 <UART_SetConfig+0xac0>)
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	08db      	lsrs	r3, r3, #3
 8015324:	f003 0303 	and.w	r3, r3, #3
 8015328:	4a28      	ldr	r2, [pc, #160]	; (80153cc <UART_SetConfig+0xac4>)
 801532a:	fa22 f303 	lsr.w	r3, r2, r3
 801532e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015330:	e00f      	b.n	8015352 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8015332:	4b26      	ldr	r3, [pc, #152]	; (80153cc <UART_SetConfig+0xac4>)
 8015334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015336:	e00c      	b.n	8015352 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015338:	4b25      	ldr	r3, [pc, #148]	; (80153d0 <UART_SetConfig+0xac8>)
 801533a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801533c:	e009      	b.n	8015352 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801533e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015344:	e005      	b.n	8015352 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8015346:	2300      	movs	r3, #0
 8015348:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801534a:	2301      	movs	r3, #1
 801534c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015350:	bf00      	nop
    }

    if (pclk != 0U)
 8015352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015354:	2b00      	cmp	r3, #0
 8015356:	d021      	beq.n	801539c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801535c:	4a1d      	ldr	r2, [pc, #116]	; (80153d4 <UART_SetConfig+0xacc>)
 801535e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015362:	461a      	mov	r2, r3
 8015364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015366:	fbb3 f2f2 	udiv	r2, r3, r2
 801536a:	697b      	ldr	r3, [r7, #20]
 801536c:	685b      	ldr	r3, [r3, #4]
 801536e:	085b      	lsrs	r3, r3, #1
 8015370:	441a      	add	r2, r3
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	685b      	ldr	r3, [r3, #4]
 8015376:	fbb2 f3f3 	udiv	r3, r2, r3
 801537a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801537e:	2b0f      	cmp	r3, #15
 8015380:	d909      	bls.n	8015396 <UART_SetConfig+0xa8e>
 8015382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015388:	d205      	bcs.n	8015396 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801538c:	b29a      	uxth	r2, r3
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	60da      	str	r2, [r3, #12]
 8015394:	e002      	b.n	801539c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015396:	2301      	movs	r3, #1
 8015398:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801539c:	697b      	ldr	r3, [r7, #20]
 801539e:	2201      	movs	r2, #1
 80153a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	2201      	movs	r2, #1
 80153a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	2200      	movs	r2, #0
 80153b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	2200      	movs	r2, #0
 80153b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80153b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80153bc:	4618      	mov	r0, r3
 80153be:	3748      	adds	r7, #72	; 0x48
 80153c0:	46bd      	mov	sp, r7
 80153c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80153c6:	bf00      	nop
 80153c8:	58024400 	.word	0x58024400
 80153cc:	03d09000 	.word	0x03d09000
 80153d0:	003d0900 	.word	0x003d0900
 80153d4:	0801ab2c 	.word	0x0801ab2c

080153d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80153d8:	b480      	push	{r7}
 80153da:	b083      	sub	sp, #12
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153e4:	f003 0308 	and.w	r3, r3, #8
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d00a      	beq.n	8015402 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	685b      	ldr	r3, [r3, #4]
 80153f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	430a      	orrs	r2, r1
 8015400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015406:	f003 0301 	and.w	r3, r3, #1
 801540a:	2b00      	cmp	r3, #0
 801540c:	d00a      	beq.n	8015424 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	685b      	ldr	r3, [r3, #4]
 8015414:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	430a      	orrs	r2, r1
 8015422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015428:	f003 0302 	and.w	r3, r3, #2
 801542c:	2b00      	cmp	r3, #0
 801542e:	d00a      	beq.n	8015446 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	430a      	orrs	r2, r1
 8015444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801544a:	f003 0304 	and.w	r3, r3, #4
 801544e:	2b00      	cmp	r3, #0
 8015450:	d00a      	beq.n	8015468 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	685b      	ldr	r3, [r3, #4]
 8015458:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	430a      	orrs	r2, r1
 8015466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801546c:	f003 0310 	and.w	r3, r3, #16
 8015470:	2b00      	cmp	r3, #0
 8015472:	d00a      	beq.n	801548a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	689b      	ldr	r3, [r3, #8]
 801547a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	430a      	orrs	r2, r1
 8015488:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801548e:	f003 0320 	and.w	r3, r3, #32
 8015492:	2b00      	cmp	r3, #0
 8015494:	d00a      	beq.n	80154ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	689b      	ldr	r3, [r3, #8]
 801549c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	430a      	orrs	r2, r1
 80154aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d01a      	beq.n	80154ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	685b      	ldr	r3, [r3, #4]
 80154be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	430a      	orrs	r2, r1
 80154cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80154d6:	d10a      	bne.n	80154ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	430a      	orrs	r2, r1
 80154ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d00a      	beq.n	8015510 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	685b      	ldr	r3, [r3, #4]
 8015500:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	430a      	orrs	r2, r1
 801550e:	605a      	str	r2, [r3, #4]
  }
}
 8015510:	bf00      	nop
 8015512:	370c      	adds	r7, #12
 8015514:	46bd      	mov	sp, r7
 8015516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551a:	4770      	bx	lr

0801551c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b098      	sub	sp, #96	; 0x60
 8015520:	af02      	add	r7, sp, #8
 8015522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2200      	movs	r2, #0
 8015528:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801552c:	f7f0 f8ee 	bl	800570c <HAL_GetTick>
 8015530:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	f003 0308 	and.w	r3, r3, #8
 801553c:	2b08      	cmp	r3, #8
 801553e:	d12f      	bne.n	80155a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015544:	9300      	str	r3, [sp, #0]
 8015546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015548:	2200      	movs	r2, #0
 801554a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801554e:	6878      	ldr	r0, [r7, #4]
 8015550:	f000 f88e 	bl	8015670 <UART_WaitOnFlagUntilTimeout>
 8015554:	4603      	mov	r3, r0
 8015556:	2b00      	cmp	r3, #0
 8015558:	d022      	beq.n	80155a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015562:	e853 3f00 	ldrex	r3, [r3]
 8015566:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801556a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801556e:	653b      	str	r3, [r7, #80]	; 0x50
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	461a      	mov	r2, r3
 8015576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015578:	647b      	str	r3, [r7, #68]	; 0x44
 801557a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801557c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801557e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015580:	e841 2300 	strex	r3, r2, [r1]
 8015584:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015588:	2b00      	cmp	r3, #0
 801558a:	d1e6      	bne.n	801555a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	2220      	movs	r2, #32
 8015590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2200      	movs	r2, #0
 8015598:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801559c:	2303      	movs	r3, #3
 801559e:	e063      	b.n	8015668 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	f003 0304 	and.w	r3, r3, #4
 80155aa:	2b04      	cmp	r3, #4
 80155ac:	d149      	bne.n	8015642 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80155ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80155b2:	9300      	str	r3, [sp, #0]
 80155b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155b6:	2200      	movs	r2, #0
 80155b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	f000 f857 	bl	8015670 <UART_WaitOnFlagUntilTimeout>
 80155c2:	4603      	mov	r3, r0
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d03c      	beq.n	8015642 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155d0:	e853 3f00 	ldrex	r3, [r3]
 80155d4:	623b      	str	r3, [r7, #32]
   return(result);
 80155d6:	6a3b      	ldr	r3, [r7, #32]
 80155d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80155dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	461a      	mov	r2, r3
 80155e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155e6:	633b      	str	r3, [r7, #48]	; 0x30
 80155e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80155ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155ee:	e841 2300 	strex	r3, r2, [r1]
 80155f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80155f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d1e6      	bne.n	80155c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	3308      	adds	r3, #8
 8015600:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015602:	693b      	ldr	r3, [r7, #16]
 8015604:	e853 3f00 	ldrex	r3, [r3]
 8015608:	60fb      	str	r3, [r7, #12]
   return(result);
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	f023 0301 	bic.w	r3, r3, #1
 8015610:	64bb      	str	r3, [r7, #72]	; 0x48
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	3308      	adds	r3, #8
 8015618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801561a:	61fa      	str	r2, [r7, #28]
 801561c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801561e:	69b9      	ldr	r1, [r7, #24]
 8015620:	69fa      	ldr	r2, [r7, #28]
 8015622:	e841 2300 	strex	r3, r2, [r1]
 8015626:	617b      	str	r3, [r7, #20]
   return(result);
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d1e5      	bne.n	80155fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	2220      	movs	r2, #32
 8015632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2200      	movs	r2, #0
 801563a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801563e:	2303      	movs	r3, #3
 8015640:	e012      	b.n	8015668 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	2220      	movs	r2, #32
 8015646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2220      	movs	r2, #32
 801564e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2200      	movs	r2, #0
 8015656:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2200      	movs	r2, #0
 801565c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	2200      	movs	r2, #0
 8015662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015666:	2300      	movs	r3, #0
}
 8015668:	4618      	mov	r0, r3
 801566a:	3758      	adds	r7, #88	; 0x58
 801566c:	46bd      	mov	sp, r7
 801566e:	bd80      	pop	{r7, pc}

08015670 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b084      	sub	sp, #16
 8015674:	af00      	add	r7, sp, #0
 8015676:	60f8      	str	r0, [r7, #12]
 8015678:	60b9      	str	r1, [r7, #8]
 801567a:	603b      	str	r3, [r7, #0]
 801567c:	4613      	mov	r3, r2
 801567e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015680:	e04f      	b.n	8015722 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015682:	69bb      	ldr	r3, [r7, #24]
 8015684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015688:	d04b      	beq.n	8015722 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801568a:	f7f0 f83f 	bl	800570c <HAL_GetTick>
 801568e:	4602      	mov	r2, r0
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	1ad3      	subs	r3, r2, r3
 8015694:	69ba      	ldr	r2, [r7, #24]
 8015696:	429a      	cmp	r2, r3
 8015698:	d302      	bcc.n	80156a0 <UART_WaitOnFlagUntilTimeout+0x30>
 801569a:	69bb      	ldr	r3, [r7, #24]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d101      	bne.n	80156a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80156a0:	2303      	movs	r3, #3
 80156a2:	e04e      	b.n	8015742 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	f003 0304 	and.w	r3, r3, #4
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d037      	beq.n	8015722 <UART_WaitOnFlagUntilTimeout+0xb2>
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	2b80      	cmp	r3, #128	; 0x80
 80156b6:	d034      	beq.n	8015722 <UART_WaitOnFlagUntilTimeout+0xb2>
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	2b40      	cmp	r3, #64	; 0x40
 80156bc:	d031      	beq.n	8015722 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	69db      	ldr	r3, [r3, #28]
 80156c4:	f003 0308 	and.w	r3, r3, #8
 80156c8:	2b08      	cmp	r3, #8
 80156ca:	d110      	bne.n	80156ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	2208      	movs	r2, #8
 80156d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80156d4:	68f8      	ldr	r0, [r7, #12]
 80156d6:	f000 f95b 	bl	8015990 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	2208      	movs	r2, #8
 80156de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	2200      	movs	r2, #0
 80156e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80156ea:	2301      	movs	r3, #1
 80156ec:	e029      	b.n	8015742 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	69db      	ldr	r3, [r3, #28]
 80156f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80156f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80156fc:	d111      	bne.n	8015722 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015706:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015708:	68f8      	ldr	r0, [r7, #12]
 801570a:	f000 f941 	bl	8015990 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	2220      	movs	r2, #32
 8015712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	2200      	movs	r2, #0
 801571a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801571e:	2303      	movs	r3, #3
 8015720:	e00f      	b.n	8015742 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	69da      	ldr	r2, [r3, #28]
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	4013      	ands	r3, r2
 801572c:	68ba      	ldr	r2, [r7, #8]
 801572e:	429a      	cmp	r2, r3
 8015730:	bf0c      	ite	eq
 8015732:	2301      	moveq	r3, #1
 8015734:	2300      	movne	r3, #0
 8015736:	b2db      	uxtb	r3, r3
 8015738:	461a      	mov	r2, r3
 801573a:	79fb      	ldrb	r3, [r7, #7]
 801573c:	429a      	cmp	r2, r3
 801573e:	d0a0      	beq.n	8015682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015740:	2300      	movs	r3, #0
}
 8015742:	4618      	mov	r0, r3
 8015744:	3710      	adds	r7, #16
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
	...

0801574c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801574c:	b480      	push	{r7}
 801574e:	b0a3      	sub	sp, #140	; 0x8c
 8015750:	af00      	add	r7, sp, #0
 8015752:	60f8      	str	r0, [r7, #12]
 8015754:	60b9      	str	r1, [r7, #8]
 8015756:	4613      	mov	r3, r2
 8015758:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	68ba      	ldr	r2, [r7, #8]
 801575e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	88fa      	ldrh	r2, [r7, #6]
 8015764:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	88fa      	ldrh	r2, [r7, #6]
 801576c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	2200      	movs	r2, #0
 8015774:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	689b      	ldr	r3, [r3, #8]
 801577a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801577e:	d10e      	bne.n	801579e <UART_Start_Receive_IT+0x52>
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	691b      	ldr	r3, [r3, #16]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d105      	bne.n	8015794 <UART_Start_Receive_IT+0x48>
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801578e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015792:	e02d      	b.n	80157f0 <UART_Start_Receive_IT+0xa4>
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	22ff      	movs	r2, #255	; 0xff
 8015798:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801579c:	e028      	b.n	80157f0 <UART_Start_Receive_IT+0xa4>
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	689b      	ldr	r3, [r3, #8]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d10d      	bne.n	80157c2 <UART_Start_Receive_IT+0x76>
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	691b      	ldr	r3, [r3, #16]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d104      	bne.n	80157b8 <UART_Start_Receive_IT+0x6c>
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	22ff      	movs	r2, #255	; 0xff
 80157b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80157b6:	e01b      	b.n	80157f0 <UART_Start_Receive_IT+0xa4>
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	227f      	movs	r2, #127	; 0x7f
 80157bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80157c0:	e016      	b.n	80157f0 <UART_Start_Receive_IT+0xa4>
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	689b      	ldr	r3, [r3, #8]
 80157c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80157ca:	d10d      	bne.n	80157e8 <UART_Start_Receive_IT+0x9c>
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	691b      	ldr	r3, [r3, #16]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d104      	bne.n	80157de <UART_Start_Receive_IT+0x92>
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	227f      	movs	r2, #127	; 0x7f
 80157d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80157dc:	e008      	b.n	80157f0 <UART_Start_Receive_IT+0xa4>
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	223f      	movs	r2, #63	; 0x3f
 80157e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80157e6:	e003      	b.n	80157f0 <UART_Start_Receive_IT+0xa4>
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	2200      	movs	r2, #0
 80157ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	2200      	movs	r2, #0
 80157f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	2222      	movs	r2, #34	; 0x22
 80157fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	3308      	adds	r3, #8
 8015806:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801580a:	e853 3f00 	ldrex	r3, [r3]
 801580e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015812:	f043 0301 	orr.w	r3, r3, #1
 8015816:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	3308      	adds	r3, #8
 8015820:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015824:	673a      	str	r2, [r7, #112]	; 0x70
 8015826:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015828:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801582a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801582c:	e841 2300 	strex	r3, r2, [r1]
 8015830:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015834:	2b00      	cmp	r3, #0
 8015836:	d1e3      	bne.n	8015800 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801583c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015840:	d14f      	bne.n	80158e2 <UART_Start_Receive_IT+0x196>
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015848:	88fa      	ldrh	r2, [r7, #6]
 801584a:	429a      	cmp	r2, r3
 801584c:	d349      	bcc.n	80158e2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	689b      	ldr	r3, [r3, #8]
 8015852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015856:	d107      	bne.n	8015868 <UART_Start_Receive_IT+0x11c>
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	691b      	ldr	r3, [r3, #16]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d103      	bne.n	8015868 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	4a47      	ldr	r2, [pc, #284]	; (8015980 <UART_Start_Receive_IT+0x234>)
 8015864:	675a      	str	r2, [r3, #116]	; 0x74
 8015866:	e002      	b.n	801586e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	4a46      	ldr	r2, [pc, #280]	; (8015984 <UART_Start_Receive_IT+0x238>)
 801586c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	691b      	ldr	r3, [r3, #16]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d01a      	beq.n	80158ac <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801587c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801587e:	e853 3f00 	ldrex	r3, [r3]
 8015882:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801588a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	461a      	mov	r2, r3
 8015894:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015898:	65fb      	str	r3, [r7, #92]	; 0x5c
 801589a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801589c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801589e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80158a0:	e841 2300 	strex	r3, r2, [r1]
 80158a4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80158a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d1e4      	bne.n	8015876 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	3308      	adds	r3, #8
 80158b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80158b6:	e853 3f00 	ldrex	r3, [r3]
 80158ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80158bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80158c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	3308      	adds	r3, #8
 80158ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80158cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80158ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80158d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80158d4:	e841 2300 	strex	r3, r2, [r1]
 80158d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80158da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d1e5      	bne.n	80158ac <UART_Start_Receive_IT+0x160>
 80158e0:	e046      	b.n	8015970 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	689b      	ldr	r3, [r3, #8]
 80158e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80158ea:	d107      	bne.n	80158fc <UART_Start_Receive_IT+0x1b0>
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	691b      	ldr	r3, [r3, #16]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d103      	bne.n	80158fc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	4a24      	ldr	r2, [pc, #144]	; (8015988 <UART_Start_Receive_IT+0x23c>)
 80158f8:	675a      	str	r2, [r3, #116]	; 0x74
 80158fa:	e002      	b.n	8015902 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	4a23      	ldr	r2, [pc, #140]	; (801598c <UART_Start_Receive_IT+0x240>)
 8015900:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	691b      	ldr	r3, [r3, #16]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d019      	beq.n	801593e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015912:	e853 3f00 	ldrex	r3, [r3]
 8015916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801591a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801591e:	677b      	str	r3, [r7, #116]	; 0x74
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	461a      	mov	r2, r3
 8015926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015928:	637b      	str	r3, [r7, #52]	; 0x34
 801592a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801592c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801592e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015930:	e841 2300 	strex	r3, r2, [r1]
 8015934:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015938:	2b00      	cmp	r3, #0
 801593a:	d1e6      	bne.n	801590a <UART_Start_Receive_IT+0x1be>
 801593c:	e018      	b.n	8015970 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	e853 3f00 	ldrex	r3, [r3]
 801594a:	613b      	str	r3, [r7, #16]
   return(result);
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	f043 0320 	orr.w	r3, r3, #32
 8015952:	67bb      	str	r3, [r7, #120]	; 0x78
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	461a      	mov	r2, r3
 801595a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801595c:	623b      	str	r3, [r7, #32]
 801595e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015960:	69f9      	ldr	r1, [r7, #28]
 8015962:	6a3a      	ldr	r2, [r7, #32]
 8015964:	e841 2300 	strex	r3, r2, [r1]
 8015968:	61bb      	str	r3, [r7, #24]
   return(result);
 801596a:	69bb      	ldr	r3, [r7, #24]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d1e6      	bne.n	801593e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015970:	2300      	movs	r3, #0
}
 8015972:	4618      	mov	r0, r3
 8015974:	378c      	adds	r7, #140	; 0x8c
 8015976:	46bd      	mov	sp, r7
 8015978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597c:	4770      	bx	lr
 801597e:	bf00      	nop
 8015980:	080161b1 	.word	0x080161b1
 8015984:	08015e51 	.word	0x08015e51
 8015988:	08015c99 	.word	0x08015c99
 801598c:	08015ae1 	.word	0x08015ae1

08015990 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015990:	b480      	push	{r7}
 8015992:	b095      	sub	sp, #84	; 0x54
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801599e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159a0:	e853 3f00 	ldrex	r3, [r3]
 80159a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80159a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80159ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	461a      	mov	r2, r3
 80159b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159b6:	643b      	str	r3, [r7, #64]	; 0x40
 80159b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80159bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80159be:	e841 2300 	strex	r3, r2, [r1]
 80159c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80159c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d1e6      	bne.n	8015998 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	3308      	adds	r3, #8
 80159d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159d2:	6a3b      	ldr	r3, [r7, #32]
 80159d4:	e853 3f00 	ldrex	r3, [r3]
 80159d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80159da:	69fa      	ldr	r2, [r7, #28]
 80159dc:	4b1e      	ldr	r3, [pc, #120]	; (8015a58 <UART_EndRxTransfer+0xc8>)
 80159de:	4013      	ands	r3, r2
 80159e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	3308      	adds	r3, #8
 80159e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80159ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80159ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80159f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159f2:	e841 2300 	strex	r3, r2, [r1]
 80159f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80159f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d1e5      	bne.n	80159ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a02:	2b01      	cmp	r3, #1
 8015a04:	d118      	bne.n	8015a38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	e853 3f00 	ldrex	r3, [r3]
 8015a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8015a14:	68bb      	ldr	r3, [r7, #8]
 8015a16:	f023 0310 	bic.w	r3, r3, #16
 8015a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	461a      	mov	r2, r3
 8015a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a24:	61bb      	str	r3, [r7, #24]
 8015a26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a28:	6979      	ldr	r1, [r7, #20]
 8015a2a:	69ba      	ldr	r2, [r7, #24]
 8015a2c:	e841 2300 	strex	r3, r2, [r1]
 8015a30:	613b      	str	r3, [r7, #16]
   return(result);
 8015a32:	693b      	ldr	r3, [r7, #16]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d1e6      	bne.n	8015a06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2220      	movs	r2, #32
 8015a3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2200      	movs	r2, #0
 8015a44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8015a4c:	bf00      	nop
 8015a4e:	3754      	adds	r7, #84	; 0x54
 8015a50:	46bd      	mov	sp, r7
 8015a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a56:	4770      	bx	lr
 8015a58:	effffffe 	.word	0xeffffffe

08015a5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b084      	sub	sp, #16
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	2200      	movs	r2, #0
 8015a76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015a7a:	68f8      	ldr	r0, [r7, #12]
 8015a7c:	f7fe ff2e 	bl	80148dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015a80:	bf00      	nop
 8015a82:	3710      	adds	r7, #16
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b088      	sub	sp, #32
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	e853 3f00 	ldrex	r3, [r3]
 8015a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8015a9e:	68bb      	ldr	r3, [r7, #8]
 8015aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015aa4:	61fb      	str	r3, [r7, #28]
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	461a      	mov	r2, r3
 8015aac:	69fb      	ldr	r3, [r7, #28]
 8015aae:	61bb      	str	r3, [r7, #24]
 8015ab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ab2:	6979      	ldr	r1, [r7, #20]
 8015ab4:	69ba      	ldr	r2, [r7, #24]
 8015ab6:	e841 2300 	strex	r3, r2, [r1]
 8015aba:	613b      	str	r3, [r7, #16]
   return(result);
 8015abc:	693b      	ldr	r3, [r7, #16]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d1e6      	bne.n	8015a90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	2220      	movs	r2, #32
 8015ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2200      	movs	r2, #0
 8015ace:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f7fe fef9 	bl	80148c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015ad6:	bf00      	nop
 8015ad8:	3720      	adds	r7, #32
 8015ada:	46bd      	mov	sp, r7
 8015adc:	bd80      	pop	{r7, pc}
	...

08015ae0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b09c      	sub	sp, #112	; 0x70
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015aee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015af8:	2b22      	cmp	r3, #34	; 0x22
 8015afa:	f040 80be 	bne.w	8015c7a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015b08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8015b0c:	b2d9      	uxtb	r1, r3
 8015b0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015b12:	b2da      	uxtb	r2, r3
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b18:	400a      	ands	r2, r1
 8015b1a:	b2d2      	uxtb	r2, r2
 8015b1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b22:	1c5a      	adds	r2, r3, #1
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015b2e:	b29b      	uxth	r3, r3
 8015b30:	3b01      	subs	r3, #1
 8015b32:	b29a      	uxth	r2, r3
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015b40:	b29b      	uxth	r3, r3
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	f040 80a1 	bne.w	8015c8a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b50:	e853 3f00 	ldrex	r3, [r3]
 8015b54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015b5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	461a      	mov	r2, r3
 8015b64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b66:	65bb      	str	r3, [r7, #88]	; 0x58
 8015b68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015b6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015b6e:	e841 2300 	strex	r3, r2, [r1]
 8015b72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d1e6      	bne.n	8015b48 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	3308      	adds	r3, #8
 8015b80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b84:	e853 3f00 	ldrex	r3, [r3]
 8015b88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b8c:	f023 0301 	bic.w	r3, r3, #1
 8015b90:	667b      	str	r3, [r7, #100]	; 0x64
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	3308      	adds	r3, #8
 8015b98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015b9a:	647a      	str	r2, [r7, #68]	; 0x44
 8015b9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015ba2:	e841 2300 	strex	r3, r2, [r1]
 8015ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d1e5      	bne.n	8015b7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	2220      	movs	r2, #32
 8015bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	2200      	movs	r2, #0
 8015bba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	4a33      	ldr	r2, [pc, #204]	; (8015c94 <UART_RxISR_8BIT+0x1b4>)
 8015bc8:	4293      	cmp	r3, r2
 8015bca:	d01f      	beq.n	8015c0c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	685b      	ldr	r3, [r3, #4]
 8015bd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d018      	beq.n	8015c0c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be2:	e853 3f00 	ldrex	r3, [r3]
 8015be6:	623b      	str	r3, [r7, #32]
   return(result);
 8015be8:	6a3b      	ldr	r3, [r7, #32]
 8015bea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015bee:	663b      	str	r3, [r7, #96]	; 0x60
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	461a      	mov	r2, r3
 8015bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8015bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c00:	e841 2300 	strex	r3, r2, [r1]
 8015c04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d1e6      	bne.n	8015bda <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c10:	2b01      	cmp	r3, #1
 8015c12:	d12e      	bne.n	8015c72 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	2200      	movs	r2, #0
 8015c18:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c20:	693b      	ldr	r3, [r7, #16]
 8015c22:	e853 3f00 	ldrex	r3, [r3]
 8015c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	f023 0310 	bic.w	r3, r3, #16
 8015c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	461a      	mov	r2, r3
 8015c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015c38:	61fb      	str	r3, [r7, #28]
 8015c3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c3c:	69b9      	ldr	r1, [r7, #24]
 8015c3e:	69fa      	ldr	r2, [r7, #28]
 8015c40:	e841 2300 	strex	r3, r2, [r1]
 8015c44:	617b      	str	r3, [r7, #20]
   return(result);
 8015c46:	697b      	ldr	r3, [r7, #20]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d1e6      	bne.n	8015c1a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	69db      	ldr	r3, [r3, #28]
 8015c52:	f003 0310 	and.w	r3, r3, #16
 8015c56:	2b10      	cmp	r3, #16
 8015c58:	d103      	bne.n	8015c62 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	2210      	movs	r2, #16
 8015c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015c68:	4619      	mov	r1, r3
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	f7fe fe40 	bl	80148f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015c70:	e00b      	b.n	8015c8a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015c72:	6878      	ldr	r0, [r7, #4]
 8015c74:	f7ec fe54 	bl	8002920 <HAL_UART_RxCpltCallback>
}
 8015c78:	e007      	b.n	8015c8a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	699a      	ldr	r2, [r3, #24]
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	f042 0208 	orr.w	r2, r2, #8
 8015c88:	619a      	str	r2, [r3, #24]
}
 8015c8a:	bf00      	nop
 8015c8c:	3770      	adds	r7, #112	; 0x70
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}
 8015c92:	bf00      	nop
 8015c94:	58000c00 	.word	0x58000c00

08015c98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b09c      	sub	sp, #112	; 0x70
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015ca6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015cb0:	2b22      	cmp	r3, #34	; 0x22
 8015cb2:	f040 80be 	bne.w	8015e32 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015cc4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8015cc6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8015cca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015cce:	4013      	ands	r3, r2
 8015cd0:	b29a      	uxth	r2, r3
 8015cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015cd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015cda:	1c9a      	adds	r2, r3, #2
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015ce6:	b29b      	uxth	r3, r3
 8015ce8:	3b01      	subs	r3, #1
 8015cea:	b29a      	uxth	r2, r3
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015cf8:	b29b      	uxth	r3, r3
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	f040 80a1 	bne.w	8015e42 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d08:	e853 3f00 	ldrex	r3, [r3]
 8015d0c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015d14:	667b      	str	r3, [r7, #100]	; 0x64
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	461a      	mov	r2, r3
 8015d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8015d20:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015d24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015d26:	e841 2300 	strex	r3, r2, [r1]
 8015d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d1e6      	bne.n	8015d00 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	3308      	adds	r3, #8
 8015d38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d3c:	e853 3f00 	ldrex	r3, [r3]
 8015d40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d44:	f023 0301 	bic.w	r3, r3, #1
 8015d48:	663b      	str	r3, [r7, #96]	; 0x60
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	3308      	adds	r3, #8
 8015d50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015d52:	643a      	str	r2, [r7, #64]	; 0x40
 8015d54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015d5a:	e841 2300 	strex	r3, r2, [r1]
 8015d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d1e5      	bne.n	8015d32 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	2220      	movs	r2, #32
 8015d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	2200      	movs	r2, #0
 8015d72:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	2200      	movs	r2, #0
 8015d78:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	4a33      	ldr	r2, [pc, #204]	; (8015e4c <UART_RxISR_16BIT+0x1b4>)
 8015d80:	4293      	cmp	r3, r2
 8015d82:	d01f      	beq.n	8015dc4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	685b      	ldr	r3, [r3, #4]
 8015d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d018      	beq.n	8015dc4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d98:	6a3b      	ldr	r3, [r7, #32]
 8015d9a:	e853 3f00 	ldrex	r3, [r3]
 8015d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	461a      	mov	r2, r3
 8015dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015db2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015db8:	e841 2300 	strex	r3, r2, [r1]
 8015dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d1e6      	bne.n	8015d92 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dc8:	2b01      	cmp	r3, #1
 8015dca:	d12e      	bne.n	8015e2a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	2200      	movs	r2, #0
 8015dd0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	e853 3f00 	ldrex	r3, [r3]
 8015dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	f023 0310 	bic.w	r3, r3, #16
 8015de6:	65bb      	str	r3, [r7, #88]	; 0x58
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	461a      	mov	r2, r3
 8015dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015df0:	61bb      	str	r3, [r7, #24]
 8015df2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015df4:	6979      	ldr	r1, [r7, #20]
 8015df6:	69ba      	ldr	r2, [r7, #24]
 8015df8:	e841 2300 	strex	r3, r2, [r1]
 8015dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d1e6      	bne.n	8015dd2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	69db      	ldr	r3, [r3, #28]
 8015e0a:	f003 0310 	and.w	r3, r3, #16
 8015e0e:	2b10      	cmp	r3, #16
 8015e10:	d103      	bne.n	8015e1a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	2210      	movs	r2, #16
 8015e18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015e20:	4619      	mov	r1, r3
 8015e22:	6878      	ldr	r0, [r7, #4]
 8015e24:	f7fe fd64 	bl	80148f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015e28:	e00b      	b.n	8015e42 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	f7ec fd78 	bl	8002920 <HAL_UART_RxCpltCallback>
}
 8015e30:	e007      	b.n	8015e42 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	699a      	ldr	r2, [r3, #24]
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	f042 0208 	orr.w	r2, r2, #8
 8015e40:	619a      	str	r2, [r3, #24]
}
 8015e42:	bf00      	nop
 8015e44:	3770      	adds	r7, #112	; 0x70
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}
 8015e4a:	bf00      	nop
 8015e4c:	58000c00 	.word	0x58000c00

08015e50 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b0ac      	sub	sp, #176	; 0xb0
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015e5e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	69db      	ldr	r3, [r3, #28]
 8015e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	689b      	ldr	r3, [r3, #8]
 8015e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015e86:	2b22      	cmp	r3, #34	; 0x22
 8015e88:	f040 8180 	bne.w	801618c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015e92:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015e96:	e123      	b.n	80160e0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e9e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015ea2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8015ea6:	b2d9      	uxtb	r1, r3
 8015ea8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8015eac:	b2da      	uxtb	r2, r3
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015eb2:	400a      	ands	r2, r1
 8015eb4:	b2d2      	uxtb	r2, r2
 8015eb6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ebc:	1c5a      	adds	r2, r3, #1
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015ec8:	b29b      	uxth	r3, r3
 8015eca:	3b01      	subs	r3, #1
 8015ecc:	b29a      	uxth	r2, r3
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	69db      	ldr	r3, [r3, #28]
 8015eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015ee2:	f003 0307 	and.w	r3, r3, #7
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d053      	beq.n	8015f92 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015eee:	f003 0301 	and.w	r3, r3, #1
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d011      	beq.n	8015f1a <UART_RxISR_8BIT_FIFOEN+0xca>
 8015ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d00b      	beq.n	8015f1a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	2201      	movs	r2, #1
 8015f08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015f10:	f043 0201 	orr.w	r2, r3, #1
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015f1e:	f003 0302 	and.w	r3, r3, #2
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d011      	beq.n	8015f4a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8015f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015f2a:	f003 0301 	and.w	r3, r3, #1
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d00b      	beq.n	8015f4a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	2202      	movs	r2, #2
 8015f38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015f40:	f043 0204 	orr.w	r2, r3, #4
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015f4e:	f003 0304 	and.w	r3, r3, #4
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d011      	beq.n	8015f7a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8015f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015f5a:	f003 0301 	and.w	r3, r3, #1
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d00b      	beq.n	8015f7a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	2204      	movs	r2, #4
 8015f68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015f70:	f043 0202 	orr.w	r2, r3, #2
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d006      	beq.n	8015f92 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f7fe fca9 	bl	80148dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015f98:	b29b      	uxth	r3, r3
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	f040 80a0 	bne.w	80160e0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015fa8:	e853 3f00 	ldrex	r3, [r3]
 8015fac:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8015fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	461a      	mov	r2, r3
 8015fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015fc4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fc6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8015fc8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015fca:	e841 2300 	strex	r3, r2, [r1]
 8015fce:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8015fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d1e4      	bne.n	8015fa0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	3308      	adds	r3, #8
 8015fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015fe0:	e853 3f00 	ldrex	r3, [r3]
 8015fe4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8015fe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015fe8:	4b6e      	ldr	r3, [pc, #440]	; (80161a4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8015fea:	4013      	ands	r3, r2
 8015fec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	3308      	adds	r3, #8
 8015ff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015ffa:	66ba      	str	r2, [r7, #104]	; 0x68
 8015ffc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ffe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016000:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016002:	e841 2300 	strex	r3, r2, [r1]
 8016006:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801600a:	2b00      	cmp	r3, #0
 801600c:	d1e3      	bne.n	8015fd6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	2220      	movs	r2, #32
 8016012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	2200      	movs	r2, #0
 801601a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2200      	movs	r2, #0
 8016020:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	4a60      	ldr	r2, [pc, #384]	; (80161a8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8016028:	4293      	cmp	r3, r2
 801602a:	d021      	beq.n	8016070 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	685b      	ldr	r3, [r3, #4]
 8016032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016036:	2b00      	cmp	r3, #0
 8016038:	d01a      	beq.n	8016070 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016042:	e853 3f00 	ldrex	r3, [r3]
 8016046:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801604a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801604e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	461a      	mov	r2, r3
 8016058:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801605c:	657b      	str	r3, [r7, #84]	; 0x54
 801605e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016060:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016062:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016064:	e841 2300 	strex	r3, r2, [r1]
 8016068:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801606a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801606c:	2b00      	cmp	r3, #0
 801606e:	d1e4      	bne.n	801603a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016074:	2b01      	cmp	r3, #1
 8016076:	d130      	bne.n	80160da <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	2200      	movs	r2, #0
 801607c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016086:	e853 3f00 	ldrex	r3, [r3]
 801608a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801608e:	f023 0310 	bic.w	r3, r3, #16
 8016092:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	461a      	mov	r2, r3
 801609c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80160a0:	643b      	str	r3, [r7, #64]	; 0x40
 80160a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80160a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80160a8:	e841 2300 	strex	r3, r2, [r1]
 80160ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80160ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d1e4      	bne.n	801607e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	69db      	ldr	r3, [r3, #28]
 80160ba:	f003 0310 	and.w	r3, r3, #16
 80160be:	2b10      	cmp	r3, #16
 80160c0:	d103      	bne.n	80160ca <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	2210      	movs	r2, #16
 80160c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80160d0:	4619      	mov	r1, r3
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f7fe fc0c 	bl	80148f0 <HAL_UARTEx_RxEventCallback>
 80160d8:	e002      	b.n	80160e0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f7ec fc20 	bl	8002920 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80160e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d006      	beq.n	80160f6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80160e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160ec:	f003 0320 	and.w	r3, r3, #32
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	f47f aed1 	bne.w	8015e98 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80160fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016100:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8016104:	2b00      	cmp	r3, #0
 8016106:	d049      	beq.n	801619c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801610e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8016112:	429a      	cmp	r2, r3
 8016114:	d242      	bcs.n	801619c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	3308      	adds	r3, #8
 801611c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801611e:	6a3b      	ldr	r3, [r7, #32]
 8016120:	e853 3f00 	ldrex	r3, [r3]
 8016124:	61fb      	str	r3, [r7, #28]
   return(result);
 8016126:	69fb      	ldr	r3, [r7, #28]
 8016128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801612c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	3308      	adds	r3, #8
 8016136:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801613a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801613c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801613e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016142:	e841 2300 	strex	r3, r2, [r1]
 8016146:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801614a:	2b00      	cmp	r3, #0
 801614c:	d1e3      	bne.n	8016116 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	4a16      	ldr	r2, [pc, #88]	; (80161ac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8016152:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	e853 3f00 	ldrex	r3, [r3]
 8016160:	60bb      	str	r3, [r7, #8]
   return(result);
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	f043 0320 	orr.w	r3, r3, #32
 8016168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	461a      	mov	r2, r3
 8016172:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016176:	61bb      	str	r3, [r7, #24]
 8016178:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801617a:	6979      	ldr	r1, [r7, #20]
 801617c:	69ba      	ldr	r2, [r7, #24]
 801617e:	e841 2300 	strex	r3, r2, [r1]
 8016182:	613b      	str	r3, [r7, #16]
   return(result);
 8016184:	693b      	ldr	r3, [r7, #16]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d1e4      	bne.n	8016154 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801618a:	e007      	b.n	801619c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	699a      	ldr	r2, [r3, #24]
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	f042 0208 	orr.w	r2, r2, #8
 801619a:	619a      	str	r2, [r3, #24]
}
 801619c:	bf00      	nop
 801619e:	37b0      	adds	r7, #176	; 0xb0
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}
 80161a4:	effffffe 	.word	0xeffffffe
 80161a8:	58000c00 	.word	0x58000c00
 80161ac:	08015ae1 	.word	0x08015ae1

080161b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b0ae      	sub	sp, #184	; 0xb8
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80161be:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	69db      	ldr	r3, [r3, #28]
 80161c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	689b      	ldr	r3, [r3, #8]
 80161dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80161e6:	2b22      	cmp	r3, #34	; 0x22
 80161e8:	f040 8184 	bne.w	80164f4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80161f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80161f6:	e127      	b.n	8016448 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801620a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801620e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016212:	4013      	ands	r3, r2
 8016214:	b29a      	uxth	r2, r3
 8016216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801621a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016220:	1c9a      	adds	r2, r3, #2
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801622c:	b29b      	uxth	r3, r3
 801622e:	3b01      	subs	r3, #1
 8016230:	b29a      	uxth	r2, r3
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	69db      	ldr	r3, [r3, #28]
 801623e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016246:	f003 0307 	and.w	r3, r3, #7
 801624a:	2b00      	cmp	r3, #0
 801624c:	d053      	beq.n	80162f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801624e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016252:	f003 0301 	and.w	r3, r3, #1
 8016256:	2b00      	cmp	r3, #0
 8016258:	d011      	beq.n	801627e <UART_RxISR_16BIT_FIFOEN+0xce>
 801625a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801625e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016262:	2b00      	cmp	r3, #0
 8016264:	d00b      	beq.n	801627e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	2201      	movs	r2, #1
 801626c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016274:	f043 0201 	orr.w	r2, r3, #1
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801627e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016282:	f003 0302 	and.w	r3, r3, #2
 8016286:	2b00      	cmp	r3, #0
 8016288:	d011      	beq.n	80162ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 801628a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801628e:	f003 0301 	and.w	r3, r3, #1
 8016292:	2b00      	cmp	r3, #0
 8016294:	d00b      	beq.n	80162ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	2202      	movs	r2, #2
 801629c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80162a4:	f043 0204 	orr.w	r2, r3, #4
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80162ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80162b2:	f003 0304 	and.w	r3, r3, #4
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d011      	beq.n	80162de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80162ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80162be:	f003 0301 	and.w	r3, r3, #1
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d00b      	beq.n	80162de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	2204      	movs	r2, #4
 80162cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80162d4:	f043 0202 	orr.w	r2, r3, #2
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d006      	beq.n	80162f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80162e8:	6878      	ldr	r0, [r7, #4]
 80162ea:	f7fe faf7 	bl	80148dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	2200      	movs	r2, #0
 80162f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162fc:	b29b      	uxth	r3, r3
 80162fe:	2b00      	cmp	r3, #0
 8016300:	f040 80a2 	bne.w	8016448 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801630a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801630c:	e853 3f00 	ldrex	r3, [r3]
 8016310:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	461a      	mov	r2, r3
 8016322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016326:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801632a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801632c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801632e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016332:	e841 2300 	strex	r3, r2, [r1]
 8016336:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801633a:	2b00      	cmp	r3, #0
 801633c:	d1e2      	bne.n	8016304 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	3308      	adds	r3, #8
 8016344:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016348:	e853 3f00 	ldrex	r3, [r3]
 801634c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801634e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016350:	4b6e      	ldr	r3, [pc, #440]	; (801650c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8016352:	4013      	ands	r3, r2
 8016354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	3308      	adds	r3, #8
 801635e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016362:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016364:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016366:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016368:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801636a:	e841 2300 	strex	r3, r2, [r1]
 801636e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016372:	2b00      	cmp	r3, #0
 8016374:	d1e3      	bne.n	801633e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2220      	movs	r2, #32
 801637a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	2200      	movs	r2, #0
 8016382:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2200      	movs	r2, #0
 8016388:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	4a60      	ldr	r2, [pc, #384]	; (8016510 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016390:	4293      	cmp	r3, r2
 8016392:	d021      	beq.n	80163d8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	685b      	ldr	r3, [r3, #4]
 801639a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d01a      	beq.n	80163d8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163aa:	e853 3f00 	ldrex	r3, [r3]
 80163ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80163b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80163b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80163b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	461a      	mov	r2, r3
 80163c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80163c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80163c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80163ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80163cc:	e841 2300 	strex	r3, r2, [r1]
 80163d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80163d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d1e4      	bne.n	80163a2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163dc:	2b01      	cmp	r3, #1
 80163de:	d130      	bne.n	8016442 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2200      	movs	r2, #0
 80163e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ee:	e853 3f00 	ldrex	r3, [r3]
 80163f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80163f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163f6:	f023 0310 	bic.w	r3, r3, #16
 80163fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	461a      	mov	r2, r3
 8016404:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016408:	647b      	str	r3, [r7, #68]	; 0x44
 801640a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801640c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801640e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016410:	e841 2300 	strex	r3, r2, [r1]
 8016414:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016418:	2b00      	cmp	r3, #0
 801641a:	d1e4      	bne.n	80163e6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	69db      	ldr	r3, [r3, #28]
 8016422:	f003 0310 	and.w	r3, r3, #16
 8016426:	2b10      	cmp	r3, #16
 8016428:	d103      	bne.n	8016432 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	2210      	movs	r2, #16
 8016430:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016438:	4619      	mov	r1, r3
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	f7fe fa58 	bl	80148f0 <HAL_UARTEx_RxEventCallback>
 8016440:	e002      	b.n	8016448 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	f7ec fa6c 	bl	8002920 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016448:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801644c:	2b00      	cmp	r3, #0
 801644e:	d006      	beq.n	801645e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016450:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016454:	f003 0320 	and.w	r3, r3, #32
 8016458:	2b00      	cmp	r3, #0
 801645a:	f47f aecd 	bne.w	80161f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016464:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016468:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801646c:	2b00      	cmp	r3, #0
 801646e:	d049      	beq.n	8016504 <UART_RxISR_16BIT_FIFOEN+0x354>
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016476:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801647a:	429a      	cmp	r2, r3
 801647c:	d242      	bcs.n	8016504 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	3308      	adds	r3, #8
 8016484:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016488:	e853 3f00 	ldrex	r3, [r3]
 801648c:	623b      	str	r3, [r7, #32]
   return(result);
 801648e:	6a3b      	ldr	r3, [r7, #32]
 8016490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	3308      	adds	r3, #8
 801649e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80164a2:	633a      	str	r2, [r7, #48]	; 0x30
 80164a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80164a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164aa:	e841 2300 	strex	r3, r2, [r1]
 80164ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80164b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d1e3      	bne.n	801647e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	4a16      	ldr	r2, [pc, #88]	; (8016514 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80164ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164c2:	693b      	ldr	r3, [r7, #16]
 80164c4:	e853 3f00 	ldrex	r3, [r3]
 80164c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	f043 0320 	orr.w	r3, r3, #32
 80164d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	461a      	mov	r2, r3
 80164da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80164de:	61fb      	str	r3, [r7, #28]
 80164e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164e2:	69b9      	ldr	r1, [r7, #24]
 80164e4:	69fa      	ldr	r2, [r7, #28]
 80164e6:	e841 2300 	strex	r3, r2, [r1]
 80164ea:	617b      	str	r3, [r7, #20]
   return(result);
 80164ec:	697b      	ldr	r3, [r7, #20]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d1e4      	bne.n	80164bc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80164f2:	e007      	b.n	8016504 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	699a      	ldr	r2, [r3, #24]
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	f042 0208 	orr.w	r2, r2, #8
 8016502:	619a      	str	r2, [r3, #24]
}
 8016504:	bf00      	nop
 8016506:	37b8      	adds	r7, #184	; 0xb8
 8016508:	46bd      	mov	sp, r7
 801650a:	bd80      	pop	{r7, pc}
 801650c:	effffffe 	.word	0xeffffffe
 8016510:	58000c00 	.word	0x58000c00
 8016514:	08015c99 	.word	0x08015c99

08016518 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016518:	b480      	push	{r7}
 801651a:	b083      	sub	sp, #12
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016520:	bf00      	nop
 8016522:	370c      	adds	r7, #12
 8016524:	46bd      	mov	sp, r7
 8016526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652a:	4770      	bx	lr

0801652c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801652c:	b480      	push	{r7}
 801652e:	b083      	sub	sp, #12
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016534:	bf00      	nop
 8016536:	370c      	adds	r7, #12
 8016538:	46bd      	mov	sp, r7
 801653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653e:	4770      	bx	lr

08016540 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016540:	b480      	push	{r7}
 8016542:	b083      	sub	sp, #12
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016548:	bf00      	nop
 801654a:	370c      	adds	r7, #12
 801654c:	46bd      	mov	sp, r7
 801654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016552:	4770      	bx	lr

08016554 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8016554:	b480      	push	{r7}
 8016556:	b089      	sub	sp, #36	; 0x24
 8016558:	af00      	add	r7, sp, #0
 801655a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016562:	2b01      	cmp	r3, #1
 8016564:	d101      	bne.n	801656a <HAL_UARTEx_EnableStopMode+0x16>
 8016566:	2302      	movs	r3, #2
 8016568:	e021      	b.n	80165ae <HAL_UARTEx_EnableStopMode+0x5a>
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2201      	movs	r2, #1
 801656e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	e853 3f00 	ldrex	r3, [r3]
 801657e:	60bb      	str	r3, [r7, #8]
   return(result);
 8016580:	68bb      	ldr	r3, [r7, #8]
 8016582:	f043 0302 	orr.w	r3, r3, #2
 8016586:	61fb      	str	r3, [r7, #28]
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	461a      	mov	r2, r3
 801658e:	69fb      	ldr	r3, [r7, #28]
 8016590:	61bb      	str	r3, [r7, #24]
 8016592:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016594:	6979      	ldr	r1, [r7, #20]
 8016596:	69ba      	ldr	r2, [r7, #24]
 8016598:	e841 2300 	strex	r3, r2, [r1]
 801659c:	613b      	str	r3, [r7, #16]
   return(result);
 801659e:	693b      	ldr	r3, [r7, #16]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d1e6      	bne.n	8016572 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	2200      	movs	r2, #0
 80165a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80165ac:	2300      	movs	r3, #0
}
 80165ae:	4618      	mov	r0, r3
 80165b0:	3724      	adds	r7, #36	; 0x24
 80165b2:	46bd      	mov	sp, r7
 80165b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b8:	4770      	bx	lr

080165ba <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80165ba:	b580      	push	{r7, lr}
 80165bc:	b084      	sub	sp, #16
 80165be:	af00      	add	r7, sp, #0
 80165c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80165c8:	2b01      	cmp	r3, #1
 80165ca:	d101      	bne.n	80165d0 <HAL_UARTEx_EnableFifoMode+0x16>
 80165cc:	2302      	movs	r3, #2
 80165ce:	e02b      	b.n	8016628 <HAL_UARTEx_EnableFifoMode+0x6e>
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2201      	movs	r2, #1
 80165d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2224      	movs	r2, #36	; 0x24
 80165dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	681a      	ldr	r2, [r3, #0]
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	f022 0201 	bic.w	r2, r2, #1
 80165f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80165fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8016606:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	68fa      	ldr	r2, [r7, #12]
 801660e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016610:	6878      	ldr	r0, [r7, #4]
 8016612:	f000 f8c3 	bl	801679c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	2220      	movs	r2, #32
 801661a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2200      	movs	r2, #0
 8016622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016626:	2300      	movs	r3, #0
}
 8016628:	4618      	mov	r0, r3
 801662a:	3710      	adds	r7, #16
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}

08016630 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016630:	b480      	push	{r7}
 8016632:	b085      	sub	sp, #20
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801663e:	2b01      	cmp	r3, #1
 8016640:	d101      	bne.n	8016646 <HAL_UARTEx_DisableFifoMode+0x16>
 8016642:	2302      	movs	r3, #2
 8016644:	e027      	b.n	8016696 <HAL_UARTEx_DisableFifoMode+0x66>
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	2201      	movs	r2, #1
 801664a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	2224      	movs	r2, #36	; 0x24
 8016652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	681a      	ldr	r2, [r3, #0]
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	f022 0201 	bic.w	r2, r2, #1
 801666c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016674:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	2200      	movs	r2, #0
 801667a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	68fa      	ldr	r2, [r7, #12]
 8016682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2220      	movs	r2, #32
 8016688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	2200      	movs	r2, #0
 8016690:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016694:	2300      	movs	r3, #0
}
 8016696:	4618      	mov	r0, r3
 8016698:	3714      	adds	r7, #20
 801669a:	46bd      	mov	sp, r7
 801669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a0:	4770      	bx	lr

080166a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80166a2:	b580      	push	{r7, lr}
 80166a4:	b084      	sub	sp, #16
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	6078      	str	r0, [r7, #4]
 80166aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80166b2:	2b01      	cmp	r3, #1
 80166b4:	d101      	bne.n	80166ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80166b6:	2302      	movs	r3, #2
 80166b8:	e02d      	b.n	8016716 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2201      	movs	r2, #1
 80166be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	2224      	movs	r2, #36	; 0x24
 80166c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	681a      	ldr	r2, [r3, #0]
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	f022 0201 	bic.w	r2, r2, #1
 80166e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	689b      	ldr	r3, [r3, #8]
 80166e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	683a      	ldr	r2, [r7, #0]
 80166f2:	430a      	orrs	r2, r1
 80166f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80166f6:	6878      	ldr	r0, [r7, #4]
 80166f8:	f000 f850 	bl	801679c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	68fa      	ldr	r2, [r7, #12]
 8016702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	2220      	movs	r2, #32
 8016708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	2200      	movs	r2, #0
 8016710:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016714:	2300      	movs	r3, #0
}
 8016716:	4618      	mov	r0, r3
 8016718:	3710      	adds	r7, #16
 801671a:	46bd      	mov	sp, r7
 801671c:	bd80      	pop	{r7, pc}

0801671e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801671e:	b580      	push	{r7, lr}
 8016720:	b084      	sub	sp, #16
 8016722:	af00      	add	r7, sp, #0
 8016724:	6078      	str	r0, [r7, #4]
 8016726:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801672e:	2b01      	cmp	r3, #1
 8016730:	d101      	bne.n	8016736 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016732:	2302      	movs	r3, #2
 8016734:	e02d      	b.n	8016792 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	2201      	movs	r2, #1
 801673a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	2224      	movs	r2, #36	; 0x24
 8016742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	681a      	ldr	r2, [r3, #0]
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	f022 0201 	bic.w	r2, r2, #1
 801675c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	689b      	ldr	r3, [r3, #8]
 8016764:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	683a      	ldr	r2, [r7, #0]
 801676e:	430a      	orrs	r2, r1
 8016770:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	f000 f812 	bl	801679c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	68fa      	ldr	r2, [r7, #12]
 801677e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	2220      	movs	r2, #32
 8016784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	2200      	movs	r2, #0
 801678c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016790:	2300      	movs	r3, #0
}
 8016792:	4618      	mov	r0, r3
 8016794:	3710      	adds	r7, #16
 8016796:	46bd      	mov	sp, r7
 8016798:	bd80      	pop	{r7, pc}
	...

0801679c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801679c:	b480      	push	{r7}
 801679e:	b085      	sub	sp, #20
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d108      	bne.n	80167be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2201      	movs	r2, #1
 80167b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2201      	movs	r2, #1
 80167b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80167bc:	e031      	b.n	8016822 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80167be:	2310      	movs	r3, #16
 80167c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80167c2:	2310      	movs	r3, #16
 80167c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	689b      	ldr	r3, [r3, #8]
 80167cc:	0e5b      	lsrs	r3, r3, #25
 80167ce:	b2db      	uxtb	r3, r3
 80167d0:	f003 0307 	and.w	r3, r3, #7
 80167d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	689b      	ldr	r3, [r3, #8]
 80167dc:	0f5b      	lsrs	r3, r3, #29
 80167de:	b2db      	uxtb	r3, r3
 80167e0:	f003 0307 	and.w	r3, r3, #7
 80167e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80167e6:	7bbb      	ldrb	r3, [r7, #14]
 80167e8:	7b3a      	ldrb	r2, [r7, #12]
 80167ea:	4911      	ldr	r1, [pc, #68]	; (8016830 <UARTEx_SetNbDataToProcess+0x94>)
 80167ec:	5c8a      	ldrb	r2, [r1, r2]
 80167ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80167f2:	7b3a      	ldrb	r2, [r7, #12]
 80167f4:	490f      	ldr	r1, [pc, #60]	; (8016834 <UARTEx_SetNbDataToProcess+0x98>)
 80167f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80167f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80167fc:	b29a      	uxth	r2, r3
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016804:	7bfb      	ldrb	r3, [r7, #15]
 8016806:	7b7a      	ldrb	r2, [r7, #13]
 8016808:	4909      	ldr	r1, [pc, #36]	; (8016830 <UARTEx_SetNbDataToProcess+0x94>)
 801680a:	5c8a      	ldrb	r2, [r1, r2]
 801680c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016810:	7b7a      	ldrb	r2, [r7, #13]
 8016812:	4908      	ldr	r1, [pc, #32]	; (8016834 <UARTEx_SetNbDataToProcess+0x98>)
 8016814:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016816:	fb93 f3f2 	sdiv	r3, r3, r2
 801681a:	b29a      	uxth	r2, r3
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016822:	bf00      	nop
 8016824:	3714      	adds	r7, #20
 8016826:	46bd      	mov	sp, r7
 8016828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682c:	4770      	bx	lr
 801682e:	bf00      	nop
 8016830:	0801ab44 	.word	0x0801ab44
 8016834:	0801ab4c 	.word	0x0801ab4c

08016838 <__NVIC_SetPriority>:
{
 8016838:	b480      	push	{r7}
 801683a:	b083      	sub	sp, #12
 801683c:	af00      	add	r7, sp, #0
 801683e:	4603      	mov	r3, r0
 8016840:	6039      	str	r1, [r7, #0]
 8016842:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016844:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016848:	2b00      	cmp	r3, #0
 801684a:	db0a      	blt.n	8016862 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	b2da      	uxtb	r2, r3
 8016850:	490c      	ldr	r1, [pc, #48]	; (8016884 <__NVIC_SetPriority+0x4c>)
 8016852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016856:	0112      	lsls	r2, r2, #4
 8016858:	b2d2      	uxtb	r2, r2
 801685a:	440b      	add	r3, r1
 801685c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016860:	e00a      	b.n	8016878 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	b2da      	uxtb	r2, r3
 8016866:	4908      	ldr	r1, [pc, #32]	; (8016888 <__NVIC_SetPriority+0x50>)
 8016868:	88fb      	ldrh	r3, [r7, #6]
 801686a:	f003 030f 	and.w	r3, r3, #15
 801686e:	3b04      	subs	r3, #4
 8016870:	0112      	lsls	r2, r2, #4
 8016872:	b2d2      	uxtb	r2, r2
 8016874:	440b      	add	r3, r1
 8016876:	761a      	strb	r2, [r3, #24]
}
 8016878:	bf00      	nop
 801687a:	370c      	adds	r7, #12
 801687c:	46bd      	mov	sp, r7
 801687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016882:	4770      	bx	lr
 8016884:	e000e100 	.word	0xe000e100
 8016888:	e000ed00 	.word	0xe000ed00

0801688c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801688c:	b580      	push	{r7, lr}
 801688e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016890:	4b05      	ldr	r3, [pc, #20]	; (80168a8 <SysTick_Handler+0x1c>)
 8016892:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016894:	f002 f958 	bl	8018b48 <xTaskGetSchedulerState>
 8016898:	4603      	mov	r3, r0
 801689a:	2b01      	cmp	r3, #1
 801689c:	d001      	beq.n	80168a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801689e:	f002 ff7b 	bl	8019798 <xPortSysTickHandler>
  }
}
 80168a2:	bf00      	nop
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	e000e010 	.word	0xe000e010

080168ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80168ac:	b580      	push	{r7, lr}
 80168ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80168b0:	2100      	movs	r1, #0
 80168b2:	f06f 0004 	mvn.w	r0, #4
 80168b6:	f7ff ffbf 	bl	8016838 <__NVIC_SetPriority>
#endif
}
 80168ba:	bf00      	nop
 80168bc:	bd80      	pop	{r7, pc}
	...

080168c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80168c0:	b480      	push	{r7}
 80168c2:	b083      	sub	sp, #12
 80168c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80168c6:	f3ef 8305 	mrs	r3, IPSR
 80168ca:	603b      	str	r3, [r7, #0]
  return(result);
 80168cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d003      	beq.n	80168da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80168d2:	f06f 0305 	mvn.w	r3, #5
 80168d6:	607b      	str	r3, [r7, #4]
 80168d8:	e00c      	b.n	80168f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80168da:	4b0a      	ldr	r3, [pc, #40]	; (8016904 <osKernelInitialize+0x44>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d105      	bne.n	80168ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80168e2:	4b08      	ldr	r3, [pc, #32]	; (8016904 <osKernelInitialize+0x44>)
 80168e4:	2201      	movs	r2, #1
 80168e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80168e8:	2300      	movs	r3, #0
 80168ea:	607b      	str	r3, [r7, #4]
 80168ec:	e002      	b.n	80168f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80168ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80168f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80168f4:	687b      	ldr	r3, [r7, #4]
}
 80168f6:	4618      	mov	r0, r3
 80168f8:	370c      	adds	r7, #12
 80168fa:	46bd      	mov	sp, r7
 80168fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016900:	4770      	bx	lr
 8016902:	bf00      	nop
 8016904:	24001fbc 	.word	0x24001fbc

08016908 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016908:	b580      	push	{r7, lr}
 801690a:	b082      	sub	sp, #8
 801690c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801690e:	f3ef 8305 	mrs	r3, IPSR
 8016912:	603b      	str	r3, [r7, #0]
  return(result);
 8016914:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016916:	2b00      	cmp	r3, #0
 8016918:	d003      	beq.n	8016922 <osKernelStart+0x1a>
    stat = osErrorISR;
 801691a:	f06f 0305 	mvn.w	r3, #5
 801691e:	607b      	str	r3, [r7, #4]
 8016920:	e010      	b.n	8016944 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016922:	4b0b      	ldr	r3, [pc, #44]	; (8016950 <osKernelStart+0x48>)
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	2b01      	cmp	r3, #1
 8016928:	d109      	bne.n	801693e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801692a:	f7ff ffbf 	bl	80168ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801692e:	4b08      	ldr	r3, [pc, #32]	; (8016950 <osKernelStart+0x48>)
 8016930:	2202      	movs	r2, #2
 8016932:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016934:	f001 fc0c 	bl	8018150 <vTaskStartScheduler>
      stat = osOK;
 8016938:	2300      	movs	r3, #0
 801693a:	607b      	str	r3, [r7, #4]
 801693c:	e002      	b.n	8016944 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801693e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016942:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016944:	687b      	ldr	r3, [r7, #4]
}
 8016946:	4618      	mov	r0, r3
 8016948:	3708      	adds	r7, #8
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}
 801694e:	bf00      	nop
 8016950:	24001fbc 	.word	0x24001fbc

08016954 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016954:	b580      	push	{r7, lr}
 8016956:	b08e      	sub	sp, #56	; 0x38
 8016958:	af04      	add	r7, sp, #16
 801695a:	60f8      	str	r0, [r7, #12]
 801695c:	60b9      	str	r1, [r7, #8]
 801695e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016960:	2300      	movs	r3, #0
 8016962:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016964:	f3ef 8305 	mrs	r3, IPSR
 8016968:	617b      	str	r3, [r7, #20]
  return(result);
 801696a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801696c:	2b00      	cmp	r3, #0
 801696e:	d17e      	bne.n	8016a6e <osThreadNew+0x11a>
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d07b      	beq.n	8016a6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016976:	2380      	movs	r3, #128	; 0x80
 8016978:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801697a:	2318      	movs	r3, #24
 801697c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801697e:	2300      	movs	r3, #0
 8016980:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016986:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d045      	beq.n	8016a1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d002      	beq.n	801699c <osThreadNew+0x48>
        name = attr->name;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	699b      	ldr	r3, [r3, #24]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d002      	beq.n	80169aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	699b      	ldr	r3, [r3, #24]
 80169a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80169aa:	69fb      	ldr	r3, [r7, #28]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d008      	beq.n	80169c2 <osThreadNew+0x6e>
 80169b0:	69fb      	ldr	r3, [r7, #28]
 80169b2:	2b38      	cmp	r3, #56	; 0x38
 80169b4:	d805      	bhi.n	80169c2 <osThreadNew+0x6e>
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	685b      	ldr	r3, [r3, #4]
 80169ba:	f003 0301 	and.w	r3, r3, #1
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d001      	beq.n	80169c6 <osThreadNew+0x72>
        return (NULL);
 80169c2:	2300      	movs	r3, #0
 80169c4:	e054      	b.n	8016a70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	695b      	ldr	r3, [r3, #20]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d003      	beq.n	80169d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	695b      	ldr	r3, [r3, #20]
 80169d2:	089b      	lsrs	r3, r3, #2
 80169d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	689b      	ldr	r3, [r3, #8]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d00e      	beq.n	80169fc <osThreadNew+0xa8>
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	68db      	ldr	r3, [r3, #12]
 80169e2:	2b5b      	cmp	r3, #91	; 0x5b
 80169e4:	d90a      	bls.n	80169fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d006      	beq.n	80169fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	695b      	ldr	r3, [r3, #20]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d002      	beq.n	80169fc <osThreadNew+0xa8>
        mem = 1;
 80169f6:	2301      	movs	r3, #1
 80169f8:	61bb      	str	r3, [r7, #24]
 80169fa:	e010      	b.n	8016a1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	689b      	ldr	r3, [r3, #8]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d10c      	bne.n	8016a1e <osThreadNew+0xca>
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	68db      	ldr	r3, [r3, #12]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d108      	bne.n	8016a1e <osThreadNew+0xca>
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	691b      	ldr	r3, [r3, #16]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d104      	bne.n	8016a1e <osThreadNew+0xca>
          mem = 0;
 8016a14:	2300      	movs	r3, #0
 8016a16:	61bb      	str	r3, [r7, #24]
 8016a18:	e001      	b.n	8016a1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016a1e:	69bb      	ldr	r3, [r7, #24]
 8016a20:	2b01      	cmp	r3, #1
 8016a22:	d110      	bne.n	8016a46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016a28:	687a      	ldr	r2, [r7, #4]
 8016a2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016a2c:	9202      	str	r2, [sp, #8]
 8016a2e:	9301      	str	r3, [sp, #4]
 8016a30:	69fb      	ldr	r3, [r7, #28]
 8016a32:	9300      	str	r3, [sp, #0]
 8016a34:	68bb      	ldr	r3, [r7, #8]
 8016a36:	6a3a      	ldr	r2, [r7, #32]
 8016a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a3a:	68f8      	ldr	r0, [r7, #12]
 8016a3c:	f001 f9b2 	bl	8017da4 <xTaskCreateStatic>
 8016a40:	4603      	mov	r3, r0
 8016a42:	613b      	str	r3, [r7, #16]
 8016a44:	e013      	b.n	8016a6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d110      	bne.n	8016a6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016a4c:	6a3b      	ldr	r3, [r7, #32]
 8016a4e:	b29a      	uxth	r2, r3
 8016a50:	f107 0310 	add.w	r3, r7, #16
 8016a54:	9301      	str	r3, [sp, #4]
 8016a56:	69fb      	ldr	r3, [r7, #28]
 8016a58:	9300      	str	r3, [sp, #0]
 8016a5a:	68bb      	ldr	r3, [r7, #8]
 8016a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a5e:	68f8      	ldr	r0, [r7, #12]
 8016a60:	f001 f9fd 	bl	8017e5e <xTaskCreate>
 8016a64:	4603      	mov	r3, r0
 8016a66:	2b01      	cmp	r3, #1
 8016a68:	d001      	beq.n	8016a6e <osThreadNew+0x11a>
            hTask = NULL;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016a6e:	693b      	ldr	r3, [r7, #16]
}
 8016a70:	4618      	mov	r0, r3
 8016a72:	3728      	adds	r7, #40	; 0x28
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}

08016a78 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016a78:	b480      	push	{r7}
 8016a7a:	b083      	sub	sp, #12
 8016a7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016a7e:	f3ef 8305 	mrs	r3, IPSR
 8016a82:	603b      	str	r3, [r7, #0]
  return(result);
 8016a84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d003      	beq.n	8016a92 <osThreadYield+0x1a>
    stat = osErrorISR;
 8016a8a:	f06f 0305 	mvn.w	r3, #5
 8016a8e:	607b      	str	r3, [r7, #4]
 8016a90:	e009      	b.n	8016aa6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8016a92:	2300      	movs	r3, #0
 8016a94:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8016a96:	4b07      	ldr	r3, [pc, #28]	; (8016ab4 <osThreadYield+0x3c>)
 8016a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a9c:	601a      	str	r2, [r3, #0]
 8016a9e:	f3bf 8f4f 	dsb	sy
 8016aa2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8016aa6:	687b      	ldr	r3, [r7, #4]
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	370c      	adds	r7, #12
 8016aac:	46bd      	mov	sp, r7
 8016aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab2:	4770      	bx	lr
 8016ab4:	e000ed04 	.word	0xe000ed04

08016ab8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b084      	sub	sp, #16
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016ac0:	f3ef 8305 	mrs	r3, IPSR
 8016ac4:	60bb      	str	r3, [r7, #8]
  return(result);
 8016ac6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d003      	beq.n	8016ad4 <osDelay+0x1c>
    stat = osErrorISR;
 8016acc:	f06f 0305 	mvn.w	r3, #5
 8016ad0:	60fb      	str	r3, [r7, #12]
 8016ad2:	e007      	b.n	8016ae4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d002      	beq.n	8016ae4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f001 fb02 	bl	80180e8 <vTaskDelay>
    }
  }

  return (stat);
 8016ae4:	68fb      	ldr	r3, [r7, #12]
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3710      	adds	r7, #16
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}

08016aee <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016aee:	b580      	push	{r7, lr}
 8016af0:	b086      	sub	sp, #24
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8016af6:	2300      	movs	r3, #0
 8016af8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016afa:	f3ef 8305 	mrs	r3, IPSR
 8016afe:	60fb      	str	r3, [r7, #12]
  return(result);
 8016b00:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d12d      	bne.n	8016b62 <osEventFlagsNew+0x74>
    mem = -1;
 8016b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b0a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d015      	beq.n	8016b3e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	689b      	ldr	r3, [r3, #8]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d006      	beq.n	8016b28 <osEventFlagsNew+0x3a>
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	68db      	ldr	r3, [r3, #12]
 8016b1e:	2b1f      	cmp	r3, #31
 8016b20:	d902      	bls.n	8016b28 <osEventFlagsNew+0x3a>
        mem = 1;
 8016b22:	2301      	movs	r3, #1
 8016b24:	613b      	str	r3, [r7, #16]
 8016b26:	e00c      	b.n	8016b42 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	689b      	ldr	r3, [r3, #8]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d108      	bne.n	8016b42 <osEventFlagsNew+0x54>
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	68db      	ldr	r3, [r3, #12]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d104      	bne.n	8016b42 <osEventFlagsNew+0x54>
          mem = 0;
 8016b38:	2300      	movs	r3, #0
 8016b3a:	613b      	str	r3, [r7, #16]
 8016b3c:	e001      	b.n	8016b42 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8016b42:	693b      	ldr	r3, [r7, #16]
 8016b44:	2b01      	cmp	r3, #1
 8016b46:	d106      	bne.n	8016b56 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	689b      	ldr	r3, [r3, #8]
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	f000 f91d 	bl	8016d8c <xEventGroupCreateStatic>
 8016b52:	6178      	str	r0, [r7, #20]
 8016b54:	e005      	b.n	8016b62 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016b56:	693b      	ldr	r3, [r7, #16]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d102      	bne.n	8016b62 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016b5c:	f000 f94d 	bl	8016dfa <xEventGroupCreate>
 8016b60:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8016b62:	697b      	ldr	r3, [r7, #20]
}
 8016b64:	4618      	mov	r0, r3
 8016b66:	3718      	adds	r7, #24
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}

08016b6c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b086      	sub	sp, #24
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
 8016b74:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d004      	beq.n	8016b8a <osEventFlagsSet+0x1e>
 8016b80:	683b      	ldr	r3, [r7, #0]
 8016b82:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d003      	beq.n	8016b92 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016b8a:	f06f 0303 	mvn.w	r3, #3
 8016b8e:	617b      	str	r3, [r7, #20]
 8016b90:	e028      	b.n	8016be4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b92:	f3ef 8305 	mrs	r3, IPSR
 8016b96:	60fb      	str	r3, [r7, #12]
  return(result);
 8016b98:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d01d      	beq.n	8016bda <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8016ba2:	f107 0308 	add.w	r3, r7, #8
 8016ba6:	461a      	mov	r2, r3
 8016ba8:	6839      	ldr	r1, [r7, #0]
 8016baa:	6938      	ldr	r0, [r7, #16]
 8016bac:	f000 fb46 	bl	801723c <xEventGroupSetBitsFromISR>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d103      	bne.n	8016bbe <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8016bb6:	f06f 0302 	mvn.w	r3, #2
 8016bba:	617b      	str	r3, [r7, #20]
 8016bbc:	e012      	b.n	8016be4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8016bbe:	683b      	ldr	r3, [r7, #0]
 8016bc0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8016bc2:	68bb      	ldr	r3, [r7, #8]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d00d      	beq.n	8016be4 <osEventFlagsSet+0x78>
 8016bc8:	4b09      	ldr	r3, [pc, #36]	; (8016bf0 <osEventFlagsSet+0x84>)
 8016bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016bce:	601a      	str	r2, [r3, #0]
 8016bd0:	f3bf 8f4f 	dsb	sy
 8016bd4:	f3bf 8f6f 	isb	sy
 8016bd8:	e004      	b.n	8016be4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016bda:	6839      	ldr	r1, [r7, #0]
 8016bdc:	6938      	ldr	r0, [r7, #16]
 8016bde:	f000 fa65 	bl	80170ac <xEventGroupSetBits>
 8016be2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016be4:	697b      	ldr	r3, [r7, #20]
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3718      	adds	r7, #24
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}
 8016bee:	bf00      	nop
 8016bf0:	e000ed04 	.word	0xe000ed04

08016bf4 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b086      	sub	sp, #24
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016c02:	693b      	ldr	r3, [r7, #16]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d004      	beq.n	8016c12 <osEventFlagsClear+0x1e>
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d003      	beq.n	8016c1a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016c12:	f06f 0303 	mvn.w	r3, #3
 8016c16:	617b      	str	r3, [r7, #20]
 8016c18:	e019      	b.n	8016c4e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c1a:	f3ef 8305 	mrs	r3, IPSR
 8016c1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c20:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d00e      	beq.n	8016c44 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8016c26:	6938      	ldr	r0, [r7, #16]
 8016c28:	f000 fa1c 	bl	8017064 <xEventGroupGetBitsFromISR>
 8016c2c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8016c2e:	6839      	ldr	r1, [r7, #0]
 8016c30:	6938      	ldr	r0, [r7, #16]
 8016c32:	f000 fa03 	bl	801703c <xEventGroupClearBitsFromISR>
 8016c36:	4603      	mov	r3, r0
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d108      	bne.n	8016c4e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016c3c:	f06f 0302 	mvn.w	r3, #2
 8016c40:	617b      	str	r3, [r7, #20]
 8016c42:	e004      	b.n	8016c4e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016c44:	6839      	ldr	r1, [r7, #0]
 8016c46:	6938      	ldr	r0, [r7, #16]
 8016c48:	f000 f9c0 	bl	8016fcc <xEventGroupClearBits>
 8016c4c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016c4e:	697b      	ldr	r3, [r7, #20]
}
 8016c50:	4618      	mov	r0, r3
 8016c52:	3718      	adds	r7, #24
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}

08016c58 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b08c      	sub	sp, #48	; 0x30
 8016c5c:	af02      	add	r7, sp, #8
 8016c5e:	60f8      	str	r0, [r7, #12]
 8016c60:	60b9      	str	r1, [r7, #8]
 8016c62:	607a      	str	r2, [r7, #4]
 8016c64:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016c6a:	69bb      	ldr	r3, [r7, #24]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d004      	beq.n	8016c7a <osEventFlagsWait+0x22>
 8016c70:	68bb      	ldr	r3, [r7, #8]
 8016c72:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d003      	beq.n	8016c82 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8016c7a:	f06f 0303 	mvn.w	r3, #3
 8016c7e:	61fb      	str	r3, [r7, #28]
 8016c80:	e04b      	b.n	8016d1a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c82:	f3ef 8305 	mrs	r3, IPSR
 8016c86:	617b      	str	r3, [r7, #20]
  return(result);
 8016c88:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d003      	beq.n	8016c96 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8016c8e:	f06f 0305 	mvn.w	r3, #5
 8016c92:	61fb      	str	r3, [r7, #28]
 8016c94:	e041      	b.n	8016d1a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	f003 0301 	and.w	r3, r3, #1
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d002      	beq.n	8016ca6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8016ca0:	2301      	movs	r3, #1
 8016ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8016ca4:	e001      	b.n	8016caa <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	f003 0302 	and.w	r3, r3, #2
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d002      	beq.n	8016cba <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	623b      	str	r3, [r7, #32]
 8016cb8:	e001      	b.n	8016cbe <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8016cba:	2301      	movs	r3, #1
 8016cbc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8016cbe:	683b      	ldr	r3, [r7, #0]
 8016cc0:	9300      	str	r3, [sp, #0]
 8016cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc4:	6a3a      	ldr	r2, [r7, #32]
 8016cc6:	68b9      	ldr	r1, [r7, #8]
 8016cc8:	69b8      	ldr	r0, [r7, #24]
 8016cca:	f000 f8b1 	bl	8016e30 <xEventGroupWaitBits>
 8016cce:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	f003 0301 	and.w	r3, r3, #1
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d010      	beq.n	8016cfc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8016cda:	68ba      	ldr	r2, [r7, #8]
 8016cdc:	69fb      	ldr	r3, [r7, #28]
 8016cde:	4013      	ands	r3, r2
 8016ce0:	68ba      	ldr	r2, [r7, #8]
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d019      	beq.n	8016d1a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016ce6:	683b      	ldr	r3, [r7, #0]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d003      	beq.n	8016cf4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8016cec:	f06f 0301 	mvn.w	r3, #1
 8016cf0:	61fb      	str	r3, [r7, #28]
 8016cf2:	e012      	b.n	8016d1a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016cf4:	f06f 0302 	mvn.w	r3, #2
 8016cf8:	61fb      	str	r3, [r7, #28]
 8016cfa:	e00e      	b.n	8016d1a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8016cfc:	68ba      	ldr	r2, [r7, #8]
 8016cfe:	69fb      	ldr	r3, [r7, #28]
 8016d00:	4013      	ands	r3, r2
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d109      	bne.n	8016d1a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016d06:	683b      	ldr	r3, [r7, #0]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d003      	beq.n	8016d14 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8016d0c:	f06f 0301 	mvn.w	r3, #1
 8016d10:	61fb      	str	r3, [r7, #28]
 8016d12:	e002      	b.n	8016d1a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016d14:	f06f 0302 	mvn.w	r3, #2
 8016d18:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8016d1a:	69fb      	ldr	r3, [r7, #28]
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3728      	adds	r7, #40	; 0x28
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}

08016d24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016d24:	b480      	push	{r7}
 8016d26:	b085      	sub	sp, #20
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	60f8      	str	r0, [r7, #12]
 8016d2c:	60b9      	str	r1, [r7, #8]
 8016d2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	4a07      	ldr	r2, [pc, #28]	; (8016d50 <vApplicationGetIdleTaskMemory+0x2c>)
 8016d34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016d36:	68bb      	ldr	r3, [r7, #8]
 8016d38:	4a06      	ldr	r2, [pc, #24]	; (8016d54 <vApplicationGetIdleTaskMemory+0x30>)
 8016d3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	2280      	movs	r2, #128	; 0x80
 8016d40:	601a      	str	r2, [r3, #0]
}
 8016d42:	bf00      	nop
 8016d44:	3714      	adds	r7, #20
 8016d46:	46bd      	mov	sp, r7
 8016d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4c:	4770      	bx	lr
 8016d4e:	bf00      	nop
 8016d50:	24001fc0 	.word	0x24001fc0
 8016d54:	2400201c 	.word	0x2400201c

08016d58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016d58:	b480      	push	{r7}
 8016d5a:	b085      	sub	sp, #20
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	60f8      	str	r0, [r7, #12]
 8016d60:	60b9      	str	r1, [r7, #8]
 8016d62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	4a07      	ldr	r2, [pc, #28]	; (8016d84 <vApplicationGetTimerTaskMemory+0x2c>)
 8016d68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	4a06      	ldr	r2, [pc, #24]	; (8016d88 <vApplicationGetTimerTaskMemory+0x30>)
 8016d6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016d76:	601a      	str	r2, [r3, #0]
}
 8016d78:	bf00      	nop
 8016d7a:	3714      	adds	r7, #20
 8016d7c:	46bd      	mov	sp, r7
 8016d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d82:	4770      	bx	lr
 8016d84:	2400221c 	.word	0x2400221c
 8016d88:	24002278 	.word	0x24002278

08016d8c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b086      	sub	sp, #24
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d10a      	bne.n	8016db0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d9e:	f383 8811 	msr	BASEPRI, r3
 8016da2:	f3bf 8f6f 	isb	sy
 8016da6:	f3bf 8f4f 	dsb	sy
 8016daa:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016dac:	bf00      	nop
 8016dae:	e7fe      	b.n	8016dae <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8016db0:	2320      	movs	r3, #32
 8016db2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8016db4:	68bb      	ldr	r3, [r7, #8]
 8016db6:	2b20      	cmp	r3, #32
 8016db8:	d00a      	beq.n	8016dd0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8016dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dbe:	f383 8811 	msr	BASEPRI, r3
 8016dc2:	f3bf 8f6f 	isb	sy
 8016dc6:	f3bf 8f4f 	dsb	sy
 8016dca:	60fb      	str	r3, [r7, #12]
}
 8016dcc:	bf00      	nop
 8016dce:	e7fe      	b.n	8016dce <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8016dd4:	697b      	ldr	r3, [r7, #20]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d00a      	beq.n	8016df0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8016dda:	697b      	ldr	r3, [r7, #20]
 8016ddc:	2200      	movs	r2, #0
 8016dde:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016de0:	697b      	ldr	r3, [r7, #20]
 8016de2:	3304      	adds	r3, #4
 8016de4:	4618      	mov	r0, r3
 8016de6:	f000 fa3d 	bl	8017264 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8016dea:	697b      	ldr	r3, [r7, #20]
 8016dec:	2201      	movs	r2, #1
 8016dee:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8016df0:	697b      	ldr	r3, [r7, #20]
	}
 8016df2:	4618      	mov	r0, r3
 8016df4:	3718      	adds	r7, #24
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}

08016dfa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8016dfa:	b580      	push	{r7, lr}
 8016dfc:	b082      	sub	sp, #8
 8016dfe:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8016e00:	2020      	movs	r0, #32
 8016e02:	f002 fd59 	bl	80198b8 <pvPortMalloc>
 8016e06:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d00a      	beq.n	8016e24 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	2200      	movs	r2, #0
 8016e12:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	3304      	adds	r3, #4
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f000 fa23 	bl	8017264 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	2200      	movs	r2, #0
 8016e22:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8016e24:	687b      	ldr	r3, [r7, #4]
	}
 8016e26:	4618      	mov	r0, r3
 8016e28:	3708      	adds	r7, #8
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	bd80      	pop	{r7, pc}
	...

08016e30 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b090      	sub	sp, #64	; 0x40
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	60f8      	str	r0, [r7, #12]
 8016e38:	60b9      	str	r1, [r7, #8]
 8016e3a:	607a      	str	r2, [r7, #4]
 8016e3c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8016e42:	2300      	movs	r3, #0
 8016e44:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8016e46:	2300      	movs	r3, #0
 8016e48:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d10a      	bne.n	8016e66 <xEventGroupWaitBits+0x36>
	__asm volatile
 8016e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e54:	f383 8811 	msr	BASEPRI, r3
 8016e58:	f3bf 8f6f 	isb	sy
 8016e5c:	f3bf 8f4f 	dsb	sy
 8016e60:	623b      	str	r3, [r7, #32]
}
 8016e62:	bf00      	nop
 8016e64:	e7fe      	b.n	8016e64 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d00a      	beq.n	8016e86 <xEventGroupWaitBits+0x56>
	__asm volatile
 8016e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e74:	f383 8811 	msr	BASEPRI, r3
 8016e78:	f3bf 8f6f 	isb	sy
 8016e7c:	f3bf 8f4f 	dsb	sy
 8016e80:	61fb      	str	r3, [r7, #28]
}
 8016e82:	bf00      	nop
 8016e84:	e7fe      	b.n	8016e84 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d10a      	bne.n	8016ea2 <xEventGroupWaitBits+0x72>
	__asm volatile
 8016e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e90:	f383 8811 	msr	BASEPRI, r3
 8016e94:	f3bf 8f6f 	isb	sy
 8016e98:	f3bf 8f4f 	dsb	sy
 8016e9c:	61bb      	str	r3, [r7, #24]
}
 8016e9e:	bf00      	nop
 8016ea0:	e7fe      	b.n	8016ea0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016ea2:	f001 fe51 	bl	8018b48 <xTaskGetSchedulerState>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d102      	bne.n	8016eb2 <xEventGroupWaitBits+0x82>
 8016eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d101      	bne.n	8016eb6 <xEventGroupWaitBits+0x86>
 8016eb2:	2301      	movs	r3, #1
 8016eb4:	e000      	b.n	8016eb8 <xEventGroupWaitBits+0x88>
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d10a      	bne.n	8016ed2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8016ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ec0:	f383 8811 	msr	BASEPRI, r3
 8016ec4:	f3bf 8f6f 	isb	sy
 8016ec8:	f3bf 8f4f 	dsb	sy
 8016ecc:	617b      	str	r3, [r7, #20]
}
 8016ece:	bf00      	nop
 8016ed0:	e7fe      	b.n	8016ed0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8016ed2:	f001 f9a3 	bl	801821c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8016ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8016edc:	683a      	ldr	r2, [r7, #0]
 8016ede:	68b9      	ldr	r1, [r7, #8]
 8016ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016ee2:	f000 f988 	bl	80171f6 <prvTestWaitCondition>
 8016ee6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8016ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d00e      	beq.n	8016f0c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8016eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d028      	beq.n	8016f4e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016efe:	681a      	ldr	r2, [r3, #0]
 8016f00:	68bb      	ldr	r3, [r7, #8]
 8016f02:	43db      	mvns	r3, r3
 8016f04:	401a      	ands	r2, r3
 8016f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f08:	601a      	str	r2, [r3, #0]
 8016f0a:	e020      	b.n	8016f4e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8016f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d104      	bne.n	8016f1c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8016f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f14:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8016f16:	2301      	movs	r3, #1
 8016f18:	633b      	str	r3, [r7, #48]	; 0x30
 8016f1a:	e018      	b.n	8016f4e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d003      	beq.n	8016f2a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8016f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016f28:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8016f2a:	683b      	ldr	r3, [r7, #0]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d003      	beq.n	8016f38 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8016f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016f36:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8016f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f3a:	1d18      	adds	r0, r3, #4
 8016f3c:	68ba      	ldr	r2, [r7, #8]
 8016f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f40:	4313      	orrs	r3, r2
 8016f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016f44:	4619      	mov	r1, r3
 8016f46:	f001 fb77 	bl	8018638 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8016f4e:	f001 f973 	bl	8018238 <xTaskResumeAll>
 8016f52:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8016f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d031      	beq.n	8016fbe <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8016f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d107      	bne.n	8016f70 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8016f60:	4b19      	ldr	r3, [pc, #100]	; (8016fc8 <xEventGroupWaitBits+0x198>)
 8016f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f66:	601a      	str	r2, [r3, #0]
 8016f68:	f3bf 8f4f 	dsb	sy
 8016f6c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8016f70:	f001 fe76 	bl	8018c60 <uxTaskResetEventItemValue>
 8016f74:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8016f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d11a      	bne.n	8016fb6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8016f80:	f002 fb78 	bl	8019674 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8016f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8016f8a:	683a      	ldr	r2, [r7, #0]
 8016f8c:	68b9      	ldr	r1, [r7, #8]
 8016f8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016f90:	f000 f931 	bl	80171f6 <prvTestWaitCondition>
 8016f94:	4603      	mov	r3, r0
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d009      	beq.n	8016fae <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d006      	beq.n	8016fae <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fa2:	681a      	ldr	r2, [r3, #0]
 8016fa4:	68bb      	ldr	r3, [r7, #8]
 8016fa6:	43db      	mvns	r3, r3
 8016fa8:	401a      	ands	r2, r3
 8016faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fac:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8016fae:	2301      	movs	r3, #1
 8016fb0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8016fb2:	f002 fb8f 	bl	80196d4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8016fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8016fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	3740      	adds	r7, #64	; 0x40
 8016fc4:	46bd      	mov	sp, r7
 8016fc6:	bd80      	pop	{r7, pc}
 8016fc8:	e000ed04 	.word	0xe000ed04

08016fcc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b086      	sub	sp, #24
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	6078      	str	r0, [r7, #4]
 8016fd4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d10a      	bne.n	8016ff6 <xEventGroupClearBits+0x2a>
	__asm volatile
 8016fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fe4:	f383 8811 	msr	BASEPRI, r3
 8016fe8:	f3bf 8f6f 	isb	sy
 8016fec:	f3bf 8f4f 	dsb	sy
 8016ff0:	60fb      	str	r3, [r7, #12]
}
 8016ff2:	bf00      	nop
 8016ff4:	e7fe      	b.n	8016ff4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016ff6:	683b      	ldr	r3, [r7, #0]
 8016ff8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d00a      	beq.n	8017016 <xEventGroupClearBits+0x4a>
	__asm volatile
 8017000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017004:	f383 8811 	msr	BASEPRI, r3
 8017008:	f3bf 8f6f 	isb	sy
 801700c:	f3bf 8f4f 	dsb	sy
 8017010:	60bb      	str	r3, [r7, #8]
}
 8017012:	bf00      	nop
 8017014:	e7fe      	b.n	8017014 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8017016:	f002 fb2d 	bl	8019674 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801701a:	697b      	ldr	r3, [r7, #20]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017020:	697b      	ldr	r3, [r7, #20]
 8017022:	681a      	ldr	r2, [r3, #0]
 8017024:	683b      	ldr	r3, [r7, #0]
 8017026:	43db      	mvns	r3, r3
 8017028:	401a      	ands	r2, r3
 801702a:	697b      	ldr	r3, [r7, #20]
 801702c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801702e:	f002 fb51 	bl	80196d4 <vPortExitCritical>

	return uxReturn;
 8017032:	693b      	ldr	r3, [r7, #16]
}
 8017034:	4618      	mov	r0, r3
 8017036:	3718      	adds	r7, #24
 8017038:	46bd      	mov	sp, r7
 801703a:	bd80      	pop	{r7, pc}

0801703c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 801703c:	b580      	push	{r7, lr}
 801703e:	b084      	sub	sp, #16
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
 8017044:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017046:	2300      	movs	r3, #0
 8017048:	683a      	ldr	r2, [r7, #0]
 801704a:	6879      	ldr	r1, [r7, #4]
 801704c:	4804      	ldr	r0, [pc, #16]	; (8017060 <xEventGroupClearBitsFromISR+0x24>)
 801704e:	f002 f9c1 	bl	80193d4 <xTimerPendFunctionCallFromISR>
 8017052:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8017054:	68fb      	ldr	r3, [r7, #12]
	}
 8017056:	4618      	mov	r0, r3
 8017058:	3710      	adds	r7, #16
 801705a:	46bd      	mov	sp, r7
 801705c:	bd80      	pop	{r7, pc}
 801705e:	bf00      	nop
 8017060:	080171dd 	.word	0x080171dd

08017064 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8017064:	b480      	push	{r7}
 8017066:	b089      	sub	sp, #36	; 0x24
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017070:	f3ef 8211 	mrs	r2, BASEPRI
 8017074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017078:	f383 8811 	msr	BASEPRI, r3
 801707c:	f3bf 8f6f 	isb	sy
 8017080:	f3bf 8f4f 	dsb	sy
 8017084:	60fa      	str	r2, [r7, #12]
 8017086:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017088:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801708a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 801708c:	69fb      	ldr	r3, [r7, #28]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	617b      	str	r3, [r7, #20]
 8017092:	69bb      	ldr	r3, [r7, #24]
 8017094:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017096:	693b      	ldr	r3, [r7, #16]
 8017098:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801709c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801709e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80170a0:	4618      	mov	r0, r3
 80170a2:	3724      	adds	r7, #36	; 0x24
 80170a4:	46bd      	mov	sp, r7
 80170a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170aa:	4770      	bx	lr

080170ac <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b08e      	sub	sp, #56	; 0x38
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
 80170b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80170b6:	2300      	movs	r3, #0
 80170b8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80170be:	2300      	movs	r3, #0
 80170c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d10a      	bne.n	80170de <xEventGroupSetBits+0x32>
	__asm volatile
 80170c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170cc:	f383 8811 	msr	BASEPRI, r3
 80170d0:	f3bf 8f6f 	isb	sy
 80170d4:	f3bf 8f4f 	dsb	sy
 80170d8:	613b      	str	r3, [r7, #16]
}
 80170da:	bf00      	nop
 80170dc:	e7fe      	b.n	80170dc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d00a      	beq.n	80170fe <xEventGroupSetBits+0x52>
	__asm volatile
 80170e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ec:	f383 8811 	msr	BASEPRI, r3
 80170f0:	f3bf 8f6f 	isb	sy
 80170f4:	f3bf 8f4f 	dsb	sy
 80170f8:	60fb      	str	r3, [r7, #12]
}
 80170fa:	bf00      	nop
 80170fc:	e7fe      	b.n	80170fc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80170fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017100:	3304      	adds	r3, #4
 8017102:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017106:	3308      	adds	r3, #8
 8017108:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801710a:	f001 f887 	bl	801821c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017110:	68db      	ldr	r3, [r3, #12]
 8017112:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017116:	681a      	ldr	r2, [r3, #0]
 8017118:	683b      	ldr	r3, [r7, #0]
 801711a:	431a      	orrs	r2, r3
 801711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801711e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017120:	e03c      	b.n	801719c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8017122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017124:	685b      	ldr	r3, [r3, #4]
 8017126:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8017128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801712e:	2300      	movs	r3, #0
 8017130:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8017132:	69bb      	ldr	r3, [r7, #24]
 8017134:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017138:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801713a:	69bb      	ldr	r3, [r7, #24]
 801713c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017140:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8017142:	697b      	ldr	r3, [r7, #20]
 8017144:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017148:	2b00      	cmp	r3, #0
 801714a:	d108      	bne.n	801715e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801714e:	681a      	ldr	r2, [r3, #0]
 8017150:	69bb      	ldr	r3, [r7, #24]
 8017152:	4013      	ands	r3, r2
 8017154:	2b00      	cmp	r3, #0
 8017156:	d00b      	beq.n	8017170 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8017158:	2301      	movs	r3, #1
 801715a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801715c:	e008      	b.n	8017170 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017160:	681a      	ldr	r2, [r3, #0]
 8017162:	69bb      	ldr	r3, [r7, #24]
 8017164:	4013      	ands	r3, r2
 8017166:	69ba      	ldr	r2, [r7, #24]
 8017168:	429a      	cmp	r2, r3
 801716a:	d101      	bne.n	8017170 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801716c:	2301      	movs	r3, #1
 801716e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8017170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017172:	2b00      	cmp	r3, #0
 8017174:	d010      	beq.n	8017198 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8017176:	697b      	ldr	r3, [r7, #20]
 8017178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801717c:	2b00      	cmp	r3, #0
 801717e:	d003      	beq.n	8017188 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8017180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017182:	69bb      	ldr	r3, [r7, #24]
 8017184:	4313      	orrs	r3, r2
 8017186:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8017188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017190:	4619      	mov	r1, r3
 8017192:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017194:	f001 fb1c 	bl	80187d0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8017198:	69fb      	ldr	r3, [r7, #28]
 801719a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 801719c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801719e:	6a3b      	ldr	r3, [r7, #32]
 80171a0:	429a      	cmp	r2, r3
 80171a2:	d1be      	bne.n	8017122 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80171a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a6:	681a      	ldr	r2, [r3, #0]
 80171a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171aa:	43db      	mvns	r3, r3
 80171ac:	401a      	ands	r2, r3
 80171ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80171b2:	f001 f841 	bl	8018238 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80171b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b8:	681b      	ldr	r3, [r3, #0]
}
 80171ba:	4618      	mov	r0, r3
 80171bc:	3738      	adds	r7, #56	; 0x38
 80171be:	46bd      	mov	sp, r7
 80171c0:	bd80      	pop	{r7, pc}

080171c2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80171c2:	b580      	push	{r7, lr}
 80171c4:	b082      	sub	sp, #8
 80171c6:	af00      	add	r7, sp, #0
 80171c8:	6078      	str	r0, [r7, #4]
 80171ca:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80171cc:	6839      	ldr	r1, [r7, #0]
 80171ce:	6878      	ldr	r0, [r7, #4]
 80171d0:	f7ff ff6c 	bl	80170ac <xEventGroupSetBits>
}
 80171d4:	bf00      	nop
 80171d6:	3708      	adds	r7, #8
 80171d8:	46bd      	mov	sp, r7
 80171da:	bd80      	pop	{r7, pc}

080171dc <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b082      	sub	sp, #8
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
 80171e4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80171e6:	6839      	ldr	r1, [r7, #0]
 80171e8:	6878      	ldr	r0, [r7, #4]
 80171ea:	f7ff feef 	bl	8016fcc <xEventGroupClearBits>
}
 80171ee:	bf00      	nop
 80171f0:	3708      	adds	r7, #8
 80171f2:	46bd      	mov	sp, r7
 80171f4:	bd80      	pop	{r7, pc}

080171f6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80171f6:	b480      	push	{r7}
 80171f8:	b087      	sub	sp, #28
 80171fa:	af00      	add	r7, sp, #0
 80171fc:	60f8      	str	r0, [r7, #12]
 80171fe:	60b9      	str	r1, [r7, #8]
 8017200:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017202:	2300      	movs	r3, #0
 8017204:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d107      	bne.n	801721c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801720c:	68fa      	ldr	r2, [r7, #12]
 801720e:	68bb      	ldr	r3, [r7, #8]
 8017210:	4013      	ands	r3, r2
 8017212:	2b00      	cmp	r3, #0
 8017214:	d00a      	beq.n	801722c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017216:	2301      	movs	r3, #1
 8017218:	617b      	str	r3, [r7, #20]
 801721a:	e007      	b.n	801722c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801721c:	68fa      	ldr	r2, [r7, #12]
 801721e:	68bb      	ldr	r3, [r7, #8]
 8017220:	4013      	ands	r3, r2
 8017222:	68ba      	ldr	r2, [r7, #8]
 8017224:	429a      	cmp	r2, r3
 8017226:	d101      	bne.n	801722c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017228:	2301      	movs	r3, #1
 801722a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801722c:	697b      	ldr	r3, [r7, #20]
}
 801722e:	4618      	mov	r0, r3
 8017230:	371c      	adds	r7, #28
 8017232:	46bd      	mov	sp, r7
 8017234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017238:	4770      	bx	lr
	...

0801723c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801723c:	b580      	push	{r7, lr}
 801723e:	b086      	sub	sp, #24
 8017240:	af00      	add	r7, sp, #0
 8017242:	60f8      	str	r0, [r7, #12]
 8017244:	60b9      	str	r1, [r7, #8]
 8017246:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	68ba      	ldr	r2, [r7, #8]
 801724c:	68f9      	ldr	r1, [r7, #12]
 801724e:	4804      	ldr	r0, [pc, #16]	; (8017260 <xEventGroupSetBitsFromISR+0x24>)
 8017250:	f002 f8c0 	bl	80193d4 <xTimerPendFunctionCallFromISR>
 8017254:	6178      	str	r0, [r7, #20]

		return xReturn;
 8017256:	697b      	ldr	r3, [r7, #20]
	}
 8017258:	4618      	mov	r0, r3
 801725a:	3718      	adds	r7, #24
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}
 8017260:	080171c3 	.word	0x080171c3

08017264 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017264:	b480      	push	{r7}
 8017266:	b083      	sub	sp, #12
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	f103 0208 	add.w	r2, r3, #8
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801727c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	f103 0208 	add.w	r2, r3, #8
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	f103 0208 	add.w	r2, r3, #8
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	2200      	movs	r2, #0
 8017296:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017298:	bf00      	nop
 801729a:	370c      	adds	r7, #12
 801729c:	46bd      	mov	sp, r7
 801729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a2:	4770      	bx	lr

080172a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80172a4:	b480      	push	{r7}
 80172a6:	b083      	sub	sp, #12
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	2200      	movs	r2, #0
 80172b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80172b2:	bf00      	nop
 80172b4:	370c      	adds	r7, #12
 80172b6:	46bd      	mov	sp, r7
 80172b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172bc:	4770      	bx	lr

080172be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80172be:	b480      	push	{r7}
 80172c0:	b085      	sub	sp, #20
 80172c2:	af00      	add	r7, sp, #0
 80172c4:	6078      	str	r0, [r7, #4]
 80172c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	685b      	ldr	r3, [r3, #4]
 80172cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80172ce:	683b      	ldr	r3, [r7, #0]
 80172d0:	68fa      	ldr	r2, [r7, #12]
 80172d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	689a      	ldr	r2, [r3, #8]
 80172d8:	683b      	ldr	r3, [r7, #0]
 80172da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	689b      	ldr	r3, [r3, #8]
 80172e0:	683a      	ldr	r2, [r7, #0]
 80172e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	683a      	ldr	r2, [r7, #0]
 80172e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	687a      	ldr	r2, [r7, #4]
 80172ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	1c5a      	adds	r2, r3, #1
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	601a      	str	r2, [r3, #0]
}
 80172fa:	bf00      	nop
 80172fc:	3714      	adds	r7, #20
 80172fe:	46bd      	mov	sp, r7
 8017300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017304:	4770      	bx	lr

08017306 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017306:	b480      	push	{r7}
 8017308:	b085      	sub	sp, #20
 801730a:	af00      	add	r7, sp, #0
 801730c:	6078      	str	r0, [r7, #4]
 801730e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017310:	683b      	ldr	r3, [r7, #0]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017316:	68bb      	ldr	r3, [r7, #8]
 8017318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801731c:	d103      	bne.n	8017326 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	691b      	ldr	r3, [r3, #16]
 8017322:	60fb      	str	r3, [r7, #12]
 8017324:	e00c      	b.n	8017340 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	3308      	adds	r3, #8
 801732a:	60fb      	str	r3, [r7, #12]
 801732c:	e002      	b.n	8017334 <vListInsert+0x2e>
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	685b      	ldr	r3, [r3, #4]
 8017332:	60fb      	str	r3, [r7, #12]
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	685b      	ldr	r3, [r3, #4]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	68ba      	ldr	r2, [r7, #8]
 801733c:	429a      	cmp	r2, r3
 801733e:	d2f6      	bcs.n	801732e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	685a      	ldr	r2, [r3, #4]
 8017344:	683b      	ldr	r3, [r7, #0]
 8017346:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017348:	683b      	ldr	r3, [r7, #0]
 801734a:	685b      	ldr	r3, [r3, #4]
 801734c:	683a      	ldr	r2, [r7, #0]
 801734e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017350:	683b      	ldr	r3, [r7, #0]
 8017352:	68fa      	ldr	r2, [r7, #12]
 8017354:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	683a      	ldr	r2, [r7, #0]
 801735a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801735c:	683b      	ldr	r3, [r7, #0]
 801735e:	687a      	ldr	r2, [r7, #4]
 8017360:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	1c5a      	adds	r2, r3, #1
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	601a      	str	r2, [r3, #0]
}
 801736c:	bf00      	nop
 801736e:	3714      	adds	r7, #20
 8017370:	46bd      	mov	sp, r7
 8017372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017376:	4770      	bx	lr

08017378 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017378:	b480      	push	{r7}
 801737a:	b085      	sub	sp, #20
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	691b      	ldr	r3, [r3, #16]
 8017384:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	685b      	ldr	r3, [r3, #4]
 801738a:	687a      	ldr	r2, [r7, #4]
 801738c:	6892      	ldr	r2, [r2, #8]
 801738e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	689b      	ldr	r3, [r3, #8]
 8017394:	687a      	ldr	r2, [r7, #4]
 8017396:	6852      	ldr	r2, [r2, #4]
 8017398:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	685b      	ldr	r3, [r3, #4]
 801739e:	687a      	ldr	r2, [r7, #4]
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d103      	bne.n	80173ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	689a      	ldr	r2, [r3, #8]
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	2200      	movs	r2, #0
 80173b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	1e5a      	subs	r2, r3, #1
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	681b      	ldr	r3, [r3, #0]
}
 80173c0:	4618      	mov	r0, r3
 80173c2:	3714      	adds	r7, #20
 80173c4:	46bd      	mov	sp, r7
 80173c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ca:	4770      	bx	lr

080173cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b084      	sub	sp, #16
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
 80173d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d10a      	bne.n	80173f6 <xQueueGenericReset+0x2a>
	__asm volatile
 80173e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173e4:	f383 8811 	msr	BASEPRI, r3
 80173e8:	f3bf 8f6f 	isb	sy
 80173ec:	f3bf 8f4f 	dsb	sy
 80173f0:	60bb      	str	r3, [r7, #8]
}
 80173f2:	bf00      	nop
 80173f4:	e7fe      	b.n	80173f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80173f6:	f002 f93d 	bl	8019674 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	681a      	ldr	r2, [r3, #0]
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017402:	68f9      	ldr	r1, [r7, #12]
 8017404:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017406:	fb01 f303 	mul.w	r3, r1, r3
 801740a:	441a      	add	r2, r3
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	2200      	movs	r2, #0
 8017414:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	681a      	ldr	r2, [r3, #0]
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	681a      	ldr	r2, [r3, #0]
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017426:	3b01      	subs	r3, #1
 8017428:	68f9      	ldr	r1, [r7, #12]
 801742a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801742c:	fb01 f303 	mul.w	r3, r1, r3
 8017430:	441a      	add	r2, r3
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	22ff      	movs	r2, #255	; 0xff
 801743a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	22ff      	movs	r2, #255	; 0xff
 8017442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017446:	683b      	ldr	r3, [r7, #0]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d114      	bne.n	8017476 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	691b      	ldr	r3, [r3, #16]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d01a      	beq.n	801748a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	3310      	adds	r3, #16
 8017458:	4618      	mov	r0, r3
 801745a:	f001 f955 	bl	8018708 <xTaskRemoveFromEventList>
 801745e:	4603      	mov	r3, r0
 8017460:	2b00      	cmp	r3, #0
 8017462:	d012      	beq.n	801748a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017464:	4b0c      	ldr	r3, [pc, #48]	; (8017498 <xQueueGenericReset+0xcc>)
 8017466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801746a:	601a      	str	r2, [r3, #0]
 801746c:	f3bf 8f4f 	dsb	sy
 8017470:	f3bf 8f6f 	isb	sy
 8017474:	e009      	b.n	801748a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	3310      	adds	r3, #16
 801747a:	4618      	mov	r0, r3
 801747c:	f7ff fef2 	bl	8017264 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	3324      	adds	r3, #36	; 0x24
 8017484:	4618      	mov	r0, r3
 8017486:	f7ff feed 	bl	8017264 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801748a:	f002 f923 	bl	80196d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801748e:	2301      	movs	r3, #1
}
 8017490:	4618      	mov	r0, r3
 8017492:	3710      	adds	r7, #16
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}
 8017498:	e000ed04 	.word	0xe000ed04

0801749c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801749c:	b580      	push	{r7, lr}
 801749e:	b08e      	sub	sp, #56	; 0x38
 80174a0:	af02      	add	r7, sp, #8
 80174a2:	60f8      	str	r0, [r7, #12]
 80174a4:	60b9      	str	r1, [r7, #8]
 80174a6:	607a      	str	r2, [r7, #4]
 80174a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d10a      	bne.n	80174c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80174b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174b4:	f383 8811 	msr	BASEPRI, r3
 80174b8:	f3bf 8f6f 	isb	sy
 80174bc:	f3bf 8f4f 	dsb	sy
 80174c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80174c2:	bf00      	nop
 80174c4:	e7fe      	b.n	80174c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80174c6:	683b      	ldr	r3, [r7, #0]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d10a      	bne.n	80174e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80174cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174d0:	f383 8811 	msr	BASEPRI, r3
 80174d4:	f3bf 8f6f 	isb	sy
 80174d8:	f3bf 8f4f 	dsb	sy
 80174dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80174de:	bf00      	nop
 80174e0:	e7fe      	b.n	80174e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d002      	beq.n	80174ee <xQueueGenericCreateStatic+0x52>
 80174e8:	68bb      	ldr	r3, [r7, #8]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d001      	beq.n	80174f2 <xQueueGenericCreateStatic+0x56>
 80174ee:	2301      	movs	r3, #1
 80174f0:	e000      	b.n	80174f4 <xQueueGenericCreateStatic+0x58>
 80174f2:	2300      	movs	r3, #0
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d10a      	bne.n	801750e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80174f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174fc:	f383 8811 	msr	BASEPRI, r3
 8017500:	f3bf 8f6f 	isb	sy
 8017504:	f3bf 8f4f 	dsb	sy
 8017508:	623b      	str	r3, [r7, #32]
}
 801750a:	bf00      	nop
 801750c:	e7fe      	b.n	801750c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d102      	bne.n	801751a <xQueueGenericCreateStatic+0x7e>
 8017514:	68bb      	ldr	r3, [r7, #8]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d101      	bne.n	801751e <xQueueGenericCreateStatic+0x82>
 801751a:	2301      	movs	r3, #1
 801751c:	e000      	b.n	8017520 <xQueueGenericCreateStatic+0x84>
 801751e:	2300      	movs	r3, #0
 8017520:	2b00      	cmp	r3, #0
 8017522:	d10a      	bne.n	801753a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017528:	f383 8811 	msr	BASEPRI, r3
 801752c:	f3bf 8f6f 	isb	sy
 8017530:	f3bf 8f4f 	dsb	sy
 8017534:	61fb      	str	r3, [r7, #28]
}
 8017536:	bf00      	nop
 8017538:	e7fe      	b.n	8017538 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801753a:	2350      	movs	r3, #80	; 0x50
 801753c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801753e:	697b      	ldr	r3, [r7, #20]
 8017540:	2b50      	cmp	r3, #80	; 0x50
 8017542:	d00a      	beq.n	801755a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017548:	f383 8811 	msr	BASEPRI, r3
 801754c:	f3bf 8f6f 	isb	sy
 8017550:	f3bf 8f4f 	dsb	sy
 8017554:	61bb      	str	r3, [r7, #24]
}
 8017556:	bf00      	nop
 8017558:	e7fe      	b.n	8017558 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801755a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801755c:	683b      	ldr	r3, [r7, #0]
 801755e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017562:	2b00      	cmp	r3, #0
 8017564:	d00d      	beq.n	8017582 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017568:	2201      	movs	r2, #1
 801756a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801756e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017574:	9300      	str	r3, [sp, #0]
 8017576:	4613      	mov	r3, r2
 8017578:	687a      	ldr	r2, [r7, #4]
 801757a:	68b9      	ldr	r1, [r7, #8]
 801757c:	68f8      	ldr	r0, [r7, #12]
 801757e:	f000 f805 	bl	801758c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017584:	4618      	mov	r0, r3
 8017586:	3730      	adds	r7, #48	; 0x30
 8017588:	46bd      	mov	sp, r7
 801758a:	bd80      	pop	{r7, pc}

0801758c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b084      	sub	sp, #16
 8017590:	af00      	add	r7, sp, #0
 8017592:	60f8      	str	r0, [r7, #12]
 8017594:	60b9      	str	r1, [r7, #8]
 8017596:	607a      	str	r2, [r7, #4]
 8017598:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801759a:	68bb      	ldr	r3, [r7, #8]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d103      	bne.n	80175a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80175a0:	69bb      	ldr	r3, [r7, #24]
 80175a2:	69ba      	ldr	r2, [r7, #24]
 80175a4:	601a      	str	r2, [r3, #0]
 80175a6:	e002      	b.n	80175ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80175a8:	69bb      	ldr	r3, [r7, #24]
 80175aa:	687a      	ldr	r2, [r7, #4]
 80175ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80175ae:	69bb      	ldr	r3, [r7, #24]
 80175b0:	68fa      	ldr	r2, [r7, #12]
 80175b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80175b4:	69bb      	ldr	r3, [r7, #24]
 80175b6:	68ba      	ldr	r2, [r7, #8]
 80175b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80175ba:	2101      	movs	r1, #1
 80175bc:	69b8      	ldr	r0, [r7, #24]
 80175be:	f7ff ff05 	bl	80173cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80175c2:	69bb      	ldr	r3, [r7, #24]
 80175c4:	78fa      	ldrb	r2, [r7, #3]
 80175c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80175ca:	bf00      	nop
 80175cc:	3710      	adds	r7, #16
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}
	...

080175d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b08e      	sub	sp, #56	; 0x38
 80175d8:	af00      	add	r7, sp, #0
 80175da:	60f8      	str	r0, [r7, #12]
 80175dc:	60b9      	str	r1, [r7, #8]
 80175de:	607a      	str	r2, [r7, #4]
 80175e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80175e2:	2300      	movs	r3, #0
 80175e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80175ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d10a      	bne.n	8017606 <xQueueGenericSend+0x32>
	__asm volatile
 80175f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175f4:	f383 8811 	msr	BASEPRI, r3
 80175f8:	f3bf 8f6f 	isb	sy
 80175fc:	f3bf 8f4f 	dsb	sy
 8017600:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017602:	bf00      	nop
 8017604:	e7fe      	b.n	8017604 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017606:	68bb      	ldr	r3, [r7, #8]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d103      	bne.n	8017614 <xQueueGenericSend+0x40>
 801760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017610:	2b00      	cmp	r3, #0
 8017612:	d101      	bne.n	8017618 <xQueueGenericSend+0x44>
 8017614:	2301      	movs	r3, #1
 8017616:	e000      	b.n	801761a <xQueueGenericSend+0x46>
 8017618:	2300      	movs	r3, #0
 801761a:	2b00      	cmp	r3, #0
 801761c:	d10a      	bne.n	8017634 <xQueueGenericSend+0x60>
	__asm volatile
 801761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017622:	f383 8811 	msr	BASEPRI, r3
 8017626:	f3bf 8f6f 	isb	sy
 801762a:	f3bf 8f4f 	dsb	sy
 801762e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017630:	bf00      	nop
 8017632:	e7fe      	b.n	8017632 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017634:	683b      	ldr	r3, [r7, #0]
 8017636:	2b02      	cmp	r3, #2
 8017638:	d103      	bne.n	8017642 <xQueueGenericSend+0x6e>
 801763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801763c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801763e:	2b01      	cmp	r3, #1
 8017640:	d101      	bne.n	8017646 <xQueueGenericSend+0x72>
 8017642:	2301      	movs	r3, #1
 8017644:	e000      	b.n	8017648 <xQueueGenericSend+0x74>
 8017646:	2300      	movs	r3, #0
 8017648:	2b00      	cmp	r3, #0
 801764a:	d10a      	bne.n	8017662 <xQueueGenericSend+0x8e>
	__asm volatile
 801764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017650:	f383 8811 	msr	BASEPRI, r3
 8017654:	f3bf 8f6f 	isb	sy
 8017658:	f3bf 8f4f 	dsb	sy
 801765c:	623b      	str	r3, [r7, #32]
}
 801765e:	bf00      	nop
 8017660:	e7fe      	b.n	8017660 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017662:	f001 fa71 	bl	8018b48 <xTaskGetSchedulerState>
 8017666:	4603      	mov	r3, r0
 8017668:	2b00      	cmp	r3, #0
 801766a:	d102      	bne.n	8017672 <xQueueGenericSend+0x9e>
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d101      	bne.n	8017676 <xQueueGenericSend+0xa2>
 8017672:	2301      	movs	r3, #1
 8017674:	e000      	b.n	8017678 <xQueueGenericSend+0xa4>
 8017676:	2300      	movs	r3, #0
 8017678:	2b00      	cmp	r3, #0
 801767a:	d10a      	bne.n	8017692 <xQueueGenericSend+0xbe>
	__asm volatile
 801767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017680:	f383 8811 	msr	BASEPRI, r3
 8017684:	f3bf 8f6f 	isb	sy
 8017688:	f3bf 8f4f 	dsb	sy
 801768c:	61fb      	str	r3, [r7, #28]
}
 801768e:	bf00      	nop
 8017690:	e7fe      	b.n	8017690 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017692:	f001 ffef 	bl	8019674 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801769c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801769e:	429a      	cmp	r2, r3
 80176a0:	d302      	bcc.n	80176a8 <xQueueGenericSend+0xd4>
 80176a2:	683b      	ldr	r3, [r7, #0]
 80176a4:	2b02      	cmp	r3, #2
 80176a6:	d129      	bne.n	80176fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80176a8:	683a      	ldr	r2, [r7, #0]
 80176aa:	68b9      	ldr	r1, [r7, #8]
 80176ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176ae:	f000 fa0b 	bl	8017ac8 <prvCopyDataToQueue>
 80176b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80176b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d010      	beq.n	80176de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80176bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176be:	3324      	adds	r3, #36	; 0x24
 80176c0:	4618      	mov	r0, r3
 80176c2:	f001 f821 	bl	8018708 <xTaskRemoveFromEventList>
 80176c6:	4603      	mov	r3, r0
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d013      	beq.n	80176f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80176cc:	4b3f      	ldr	r3, [pc, #252]	; (80177cc <xQueueGenericSend+0x1f8>)
 80176ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176d2:	601a      	str	r2, [r3, #0]
 80176d4:	f3bf 8f4f 	dsb	sy
 80176d8:	f3bf 8f6f 	isb	sy
 80176dc:	e00a      	b.n	80176f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80176de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d007      	beq.n	80176f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80176e4:	4b39      	ldr	r3, [pc, #228]	; (80177cc <xQueueGenericSend+0x1f8>)
 80176e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176ea:	601a      	str	r2, [r3, #0]
 80176ec:	f3bf 8f4f 	dsb	sy
 80176f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80176f4:	f001 ffee 	bl	80196d4 <vPortExitCritical>
				return pdPASS;
 80176f8:	2301      	movs	r3, #1
 80176fa:	e063      	b.n	80177c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d103      	bne.n	801770a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017702:	f001 ffe7 	bl	80196d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017706:	2300      	movs	r3, #0
 8017708:	e05c      	b.n	80177c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801770a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801770c:	2b00      	cmp	r3, #0
 801770e:	d106      	bne.n	801771e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017710:	f107 0314 	add.w	r3, r7, #20
 8017714:	4618      	mov	r0, r3
 8017716:	f001 f8bd 	bl	8018894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801771a:	2301      	movs	r3, #1
 801771c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801771e:	f001 ffd9 	bl	80196d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017722:	f000 fd7b 	bl	801821c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017726:	f001 ffa5 	bl	8019674 <vPortEnterCritical>
 801772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801772c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017730:	b25b      	sxtb	r3, r3
 8017732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017736:	d103      	bne.n	8017740 <xQueueGenericSend+0x16c>
 8017738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801773a:	2200      	movs	r2, #0
 801773c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017746:	b25b      	sxtb	r3, r3
 8017748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801774c:	d103      	bne.n	8017756 <xQueueGenericSend+0x182>
 801774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017750:	2200      	movs	r2, #0
 8017752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017756:	f001 ffbd 	bl	80196d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801775a:	1d3a      	adds	r2, r7, #4
 801775c:	f107 0314 	add.w	r3, r7, #20
 8017760:	4611      	mov	r1, r2
 8017762:	4618      	mov	r0, r3
 8017764:	f001 f8ac 	bl	80188c0 <xTaskCheckForTimeOut>
 8017768:	4603      	mov	r3, r0
 801776a:	2b00      	cmp	r3, #0
 801776c:	d124      	bne.n	80177b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801776e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017770:	f000 faa2 	bl	8017cb8 <prvIsQueueFull>
 8017774:	4603      	mov	r3, r0
 8017776:	2b00      	cmp	r3, #0
 8017778:	d018      	beq.n	80177ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801777c:	3310      	adds	r3, #16
 801777e:	687a      	ldr	r2, [r7, #4]
 8017780:	4611      	mov	r1, r2
 8017782:	4618      	mov	r0, r3
 8017784:	f000 ff34 	bl	80185f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801778a:	f000 fa2d 	bl	8017be8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801778e:	f000 fd53 	bl	8018238 <xTaskResumeAll>
 8017792:	4603      	mov	r3, r0
 8017794:	2b00      	cmp	r3, #0
 8017796:	f47f af7c 	bne.w	8017692 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801779a:	4b0c      	ldr	r3, [pc, #48]	; (80177cc <xQueueGenericSend+0x1f8>)
 801779c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177a0:	601a      	str	r2, [r3, #0]
 80177a2:	f3bf 8f4f 	dsb	sy
 80177a6:	f3bf 8f6f 	isb	sy
 80177aa:	e772      	b.n	8017692 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80177ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80177ae:	f000 fa1b 	bl	8017be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80177b2:	f000 fd41 	bl	8018238 <xTaskResumeAll>
 80177b6:	e76c      	b.n	8017692 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80177b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80177ba:	f000 fa15 	bl	8017be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80177be:	f000 fd3b 	bl	8018238 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80177c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80177c4:	4618      	mov	r0, r3
 80177c6:	3738      	adds	r7, #56	; 0x38
 80177c8:	46bd      	mov	sp, r7
 80177ca:	bd80      	pop	{r7, pc}
 80177cc:	e000ed04 	.word	0xe000ed04

080177d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b090      	sub	sp, #64	; 0x40
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	60f8      	str	r0, [r7, #12]
 80177d8:	60b9      	str	r1, [r7, #8]
 80177da:	607a      	str	r2, [r7, #4]
 80177dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80177e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d10a      	bne.n	80177fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80177e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177ec:	f383 8811 	msr	BASEPRI, r3
 80177f0:	f3bf 8f6f 	isb	sy
 80177f4:	f3bf 8f4f 	dsb	sy
 80177f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80177fa:	bf00      	nop
 80177fc:	e7fe      	b.n	80177fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80177fe:	68bb      	ldr	r3, [r7, #8]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d103      	bne.n	801780c <xQueueGenericSendFromISR+0x3c>
 8017804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017808:	2b00      	cmp	r3, #0
 801780a:	d101      	bne.n	8017810 <xQueueGenericSendFromISR+0x40>
 801780c:	2301      	movs	r3, #1
 801780e:	e000      	b.n	8017812 <xQueueGenericSendFromISR+0x42>
 8017810:	2300      	movs	r3, #0
 8017812:	2b00      	cmp	r3, #0
 8017814:	d10a      	bne.n	801782c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801781a:	f383 8811 	msr	BASEPRI, r3
 801781e:	f3bf 8f6f 	isb	sy
 8017822:	f3bf 8f4f 	dsb	sy
 8017826:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017828:	bf00      	nop
 801782a:	e7fe      	b.n	801782a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801782c:	683b      	ldr	r3, [r7, #0]
 801782e:	2b02      	cmp	r3, #2
 8017830:	d103      	bne.n	801783a <xQueueGenericSendFromISR+0x6a>
 8017832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017836:	2b01      	cmp	r3, #1
 8017838:	d101      	bne.n	801783e <xQueueGenericSendFromISR+0x6e>
 801783a:	2301      	movs	r3, #1
 801783c:	e000      	b.n	8017840 <xQueueGenericSendFromISR+0x70>
 801783e:	2300      	movs	r3, #0
 8017840:	2b00      	cmp	r3, #0
 8017842:	d10a      	bne.n	801785a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017848:	f383 8811 	msr	BASEPRI, r3
 801784c:	f3bf 8f6f 	isb	sy
 8017850:	f3bf 8f4f 	dsb	sy
 8017854:	623b      	str	r3, [r7, #32]
}
 8017856:	bf00      	nop
 8017858:	e7fe      	b.n	8017858 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801785a:	f001 ffed 	bl	8019838 <vPortValidateInterruptPriority>
	__asm volatile
 801785e:	f3ef 8211 	mrs	r2, BASEPRI
 8017862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017866:	f383 8811 	msr	BASEPRI, r3
 801786a:	f3bf 8f6f 	isb	sy
 801786e:	f3bf 8f4f 	dsb	sy
 8017872:	61fa      	str	r2, [r7, #28]
 8017874:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017876:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017878:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801787c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017882:	429a      	cmp	r2, r3
 8017884:	d302      	bcc.n	801788c <xQueueGenericSendFromISR+0xbc>
 8017886:	683b      	ldr	r3, [r7, #0]
 8017888:	2b02      	cmp	r3, #2
 801788a:	d12f      	bne.n	80178ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801788e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801789a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801789c:	683a      	ldr	r2, [r7, #0]
 801789e:	68b9      	ldr	r1, [r7, #8]
 80178a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80178a2:	f000 f911 	bl	8017ac8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80178a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80178aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80178ae:	d112      	bne.n	80178d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80178b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d016      	beq.n	80178e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80178b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178ba:	3324      	adds	r3, #36	; 0x24
 80178bc:	4618      	mov	r0, r3
 80178be:	f000 ff23 	bl	8018708 <xTaskRemoveFromEventList>
 80178c2:	4603      	mov	r3, r0
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d00e      	beq.n	80178e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d00b      	beq.n	80178e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	2201      	movs	r2, #1
 80178d2:	601a      	str	r2, [r3, #0]
 80178d4:	e007      	b.n	80178e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80178d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80178da:	3301      	adds	r3, #1
 80178dc:	b2db      	uxtb	r3, r3
 80178de:	b25a      	sxtb	r2, r3
 80178e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80178e6:	2301      	movs	r3, #1
 80178e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80178ea:	e001      	b.n	80178f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80178ec:	2300      	movs	r3, #0
 80178ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80178f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178f2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80178f4:	697b      	ldr	r3, [r7, #20]
 80178f6:	f383 8811 	msr	BASEPRI, r3
}
 80178fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80178fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80178fe:	4618      	mov	r0, r3
 8017900:	3740      	adds	r7, #64	; 0x40
 8017902:	46bd      	mov	sp, r7
 8017904:	bd80      	pop	{r7, pc}
	...

08017908 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b08c      	sub	sp, #48	; 0x30
 801790c:	af00      	add	r7, sp, #0
 801790e:	60f8      	str	r0, [r7, #12]
 8017910:	60b9      	str	r1, [r7, #8]
 8017912:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017914:	2300      	movs	r3, #0
 8017916:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801791e:	2b00      	cmp	r3, #0
 8017920:	d10a      	bne.n	8017938 <xQueueReceive+0x30>
	__asm volatile
 8017922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017926:	f383 8811 	msr	BASEPRI, r3
 801792a:	f3bf 8f6f 	isb	sy
 801792e:	f3bf 8f4f 	dsb	sy
 8017932:	623b      	str	r3, [r7, #32]
}
 8017934:	bf00      	nop
 8017936:	e7fe      	b.n	8017936 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017938:	68bb      	ldr	r3, [r7, #8]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d103      	bne.n	8017946 <xQueueReceive+0x3e>
 801793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017942:	2b00      	cmp	r3, #0
 8017944:	d101      	bne.n	801794a <xQueueReceive+0x42>
 8017946:	2301      	movs	r3, #1
 8017948:	e000      	b.n	801794c <xQueueReceive+0x44>
 801794a:	2300      	movs	r3, #0
 801794c:	2b00      	cmp	r3, #0
 801794e:	d10a      	bne.n	8017966 <xQueueReceive+0x5e>
	__asm volatile
 8017950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017954:	f383 8811 	msr	BASEPRI, r3
 8017958:	f3bf 8f6f 	isb	sy
 801795c:	f3bf 8f4f 	dsb	sy
 8017960:	61fb      	str	r3, [r7, #28]
}
 8017962:	bf00      	nop
 8017964:	e7fe      	b.n	8017964 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017966:	f001 f8ef 	bl	8018b48 <xTaskGetSchedulerState>
 801796a:	4603      	mov	r3, r0
 801796c:	2b00      	cmp	r3, #0
 801796e:	d102      	bne.n	8017976 <xQueueReceive+0x6e>
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d101      	bne.n	801797a <xQueueReceive+0x72>
 8017976:	2301      	movs	r3, #1
 8017978:	e000      	b.n	801797c <xQueueReceive+0x74>
 801797a:	2300      	movs	r3, #0
 801797c:	2b00      	cmp	r3, #0
 801797e:	d10a      	bne.n	8017996 <xQueueReceive+0x8e>
	__asm volatile
 8017980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017984:	f383 8811 	msr	BASEPRI, r3
 8017988:	f3bf 8f6f 	isb	sy
 801798c:	f3bf 8f4f 	dsb	sy
 8017990:	61bb      	str	r3, [r7, #24]
}
 8017992:	bf00      	nop
 8017994:	e7fe      	b.n	8017994 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017996:	f001 fe6d 	bl	8019674 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801799e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80179a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d01f      	beq.n	80179e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80179a6:	68b9      	ldr	r1, [r7, #8]
 80179a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80179aa:	f000 f8f7 	bl	8017b9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80179ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179b0:	1e5a      	subs	r2, r3, #1
 80179b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80179b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179b8:	691b      	ldr	r3, [r3, #16]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d00f      	beq.n	80179de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80179be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179c0:	3310      	adds	r3, #16
 80179c2:	4618      	mov	r0, r3
 80179c4:	f000 fea0 	bl	8018708 <xTaskRemoveFromEventList>
 80179c8:	4603      	mov	r3, r0
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d007      	beq.n	80179de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80179ce:	4b3d      	ldr	r3, [pc, #244]	; (8017ac4 <xQueueReceive+0x1bc>)
 80179d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179d4:	601a      	str	r2, [r3, #0]
 80179d6:	f3bf 8f4f 	dsb	sy
 80179da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80179de:	f001 fe79 	bl	80196d4 <vPortExitCritical>
				return pdPASS;
 80179e2:	2301      	movs	r3, #1
 80179e4:	e069      	b.n	8017aba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d103      	bne.n	80179f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80179ec:	f001 fe72 	bl	80196d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80179f0:	2300      	movs	r3, #0
 80179f2:	e062      	b.n	8017aba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80179f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d106      	bne.n	8017a08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80179fa:	f107 0310 	add.w	r3, r7, #16
 80179fe:	4618      	mov	r0, r3
 8017a00:	f000 ff48 	bl	8018894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017a04:	2301      	movs	r3, #1
 8017a06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017a08:	f001 fe64 	bl	80196d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017a0c:	f000 fc06 	bl	801821c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017a10:	f001 fe30 	bl	8019674 <vPortEnterCritical>
 8017a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017a1a:	b25b      	sxtb	r3, r3
 8017a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a20:	d103      	bne.n	8017a2a <xQueueReceive+0x122>
 8017a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a24:	2200      	movs	r2, #0
 8017a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017a30:	b25b      	sxtb	r3, r3
 8017a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a36:	d103      	bne.n	8017a40 <xQueueReceive+0x138>
 8017a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017a40:	f001 fe48 	bl	80196d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017a44:	1d3a      	adds	r2, r7, #4
 8017a46:	f107 0310 	add.w	r3, r7, #16
 8017a4a:	4611      	mov	r1, r2
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f000 ff37 	bl	80188c0 <xTaskCheckForTimeOut>
 8017a52:	4603      	mov	r3, r0
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d123      	bne.n	8017aa0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a5a:	f000 f917 	bl	8017c8c <prvIsQueueEmpty>
 8017a5e:	4603      	mov	r3, r0
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d017      	beq.n	8017a94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a66:	3324      	adds	r3, #36	; 0x24
 8017a68:	687a      	ldr	r2, [r7, #4]
 8017a6a:	4611      	mov	r1, r2
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	f000 fdbf 	bl	80185f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a74:	f000 f8b8 	bl	8017be8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017a78:	f000 fbde 	bl	8018238 <xTaskResumeAll>
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d189      	bne.n	8017996 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017a82:	4b10      	ldr	r3, [pc, #64]	; (8017ac4 <xQueueReceive+0x1bc>)
 8017a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a88:	601a      	str	r2, [r3, #0]
 8017a8a:	f3bf 8f4f 	dsb	sy
 8017a8e:	f3bf 8f6f 	isb	sy
 8017a92:	e780      	b.n	8017996 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a96:	f000 f8a7 	bl	8017be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017a9a:	f000 fbcd 	bl	8018238 <xTaskResumeAll>
 8017a9e:	e77a      	b.n	8017996 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017aa2:	f000 f8a1 	bl	8017be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017aa6:	f000 fbc7 	bl	8018238 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017aac:	f000 f8ee 	bl	8017c8c <prvIsQueueEmpty>
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	f43f af6f 	beq.w	8017996 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017ab8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017aba:	4618      	mov	r0, r3
 8017abc:	3730      	adds	r7, #48	; 0x30
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	bd80      	pop	{r7, pc}
 8017ac2:	bf00      	nop
 8017ac4:	e000ed04 	.word	0xe000ed04

08017ac8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b086      	sub	sp, #24
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	60f8      	str	r0, [r7, #12]
 8017ad0:	60b9      	str	r1, [r7, #8]
 8017ad2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017adc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d10d      	bne.n	8017b02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d14d      	bne.n	8017b8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	689b      	ldr	r3, [r3, #8]
 8017af2:	4618      	mov	r0, r3
 8017af4:	f001 f846 	bl	8018b84 <xTaskPriorityDisinherit>
 8017af8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	2200      	movs	r2, #0
 8017afe:	609a      	str	r2, [r3, #8]
 8017b00:	e043      	b.n	8017b8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d119      	bne.n	8017b3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	6858      	ldr	r0, [r3, #4]
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b10:	461a      	mov	r2, r3
 8017b12:	68b9      	ldr	r1, [r7, #8]
 8017b14:	f002 f8e4 	bl	8019ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	685a      	ldr	r2, [r3, #4]
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b20:	441a      	add	r2, r3
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	685a      	ldr	r2, [r3, #4]
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	689b      	ldr	r3, [r3, #8]
 8017b2e:	429a      	cmp	r2, r3
 8017b30:	d32b      	bcc.n	8017b8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	681a      	ldr	r2, [r3, #0]
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	605a      	str	r2, [r3, #4]
 8017b3a:	e026      	b.n	8017b8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	68d8      	ldr	r0, [r3, #12]
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b44:	461a      	mov	r2, r3
 8017b46:	68b9      	ldr	r1, [r7, #8]
 8017b48:	f002 f8ca 	bl	8019ce0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	68da      	ldr	r2, [r3, #12]
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b54:	425b      	negs	r3, r3
 8017b56:	441a      	add	r2, r3
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	68da      	ldr	r2, [r3, #12]
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d207      	bcs.n	8017b78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	689a      	ldr	r2, [r3, #8]
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b70:	425b      	negs	r3, r3
 8017b72:	441a      	add	r2, r3
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	2b02      	cmp	r3, #2
 8017b7c:	d105      	bne.n	8017b8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017b7e:	693b      	ldr	r3, [r7, #16]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d002      	beq.n	8017b8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017b84:	693b      	ldr	r3, [r7, #16]
 8017b86:	3b01      	subs	r3, #1
 8017b88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017b8a:	693b      	ldr	r3, [r7, #16]
 8017b8c:	1c5a      	adds	r2, r3, #1
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017b92:	697b      	ldr	r3, [r7, #20]
}
 8017b94:	4618      	mov	r0, r3
 8017b96:	3718      	adds	r7, #24
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}

08017b9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b082      	sub	sp, #8
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
 8017ba4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d018      	beq.n	8017be0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	68da      	ldr	r2, [r3, #12]
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bb6:	441a      	add	r2, r3
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	68da      	ldr	r2, [r3, #12]
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	689b      	ldr	r3, [r3, #8]
 8017bc4:	429a      	cmp	r2, r3
 8017bc6:	d303      	bcc.n	8017bd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	681a      	ldr	r2, [r3, #0]
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	68d9      	ldr	r1, [r3, #12]
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bd8:	461a      	mov	r2, r3
 8017bda:	6838      	ldr	r0, [r7, #0]
 8017bdc:	f002 f880 	bl	8019ce0 <memcpy>
	}
}
 8017be0:	bf00      	nop
 8017be2:	3708      	adds	r7, #8
 8017be4:	46bd      	mov	sp, r7
 8017be6:	bd80      	pop	{r7, pc}

08017be8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b084      	sub	sp, #16
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017bf0:	f001 fd40 	bl	8019674 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017bfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017bfc:	e011      	b.n	8017c22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d012      	beq.n	8017c2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	3324      	adds	r3, #36	; 0x24
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f000 fd7c 	bl	8018708 <xTaskRemoveFromEventList>
 8017c10:	4603      	mov	r3, r0
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d001      	beq.n	8017c1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017c16:	f000 feb5 	bl	8018984 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017c1a:	7bfb      	ldrb	r3, [r7, #15]
 8017c1c:	3b01      	subs	r3, #1
 8017c1e:	b2db      	uxtb	r3, r3
 8017c20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	dce9      	bgt.n	8017bfe <prvUnlockQueue+0x16>
 8017c2a:	e000      	b.n	8017c2e <prvUnlockQueue+0x46>
					break;
 8017c2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	22ff      	movs	r2, #255	; 0xff
 8017c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017c36:	f001 fd4d 	bl	80196d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017c3a:	f001 fd1b 	bl	8019674 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017c44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c46:	e011      	b.n	8017c6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	691b      	ldr	r3, [r3, #16]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d012      	beq.n	8017c76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	3310      	adds	r3, #16
 8017c54:	4618      	mov	r0, r3
 8017c56:	f000 fd57 	bl	8018708 <xTaskRemoveFromEventList>
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d001      	beq.n	8017c64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017c60:	f000 fe90 	bl	8018984 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017c64:	7bbb      	ldrb	r3, [r7, #14]
 8017c66:	3b01      	subs	r3, #1
 8017c68:	b2db      	uxtb	r3, r3
 8017c6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	dce9      	bgt.n	8017c48 <prvUnlockQueue+0x60>
 8017c74:	e000      	b.n	8017c78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017c76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	22ff      	movs	r2, #255	; 0xff
 8017c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017c80:	f001 fd28 	bl	80196d4 <vPortExitCritical>
}
 8017c84:	bf00      	nop
 8017c86:	3710      	adds	r7, #16
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b084      	sub	sp, #16
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017c94:	f001 fcee 	bl	8019674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d102      	bne.n	8017ca6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017ca0:	2301      	movs	r3, #1
 8017ca2:	60fb      	str	r3, [r7, #12]
 8017ca4:	e001      	b.n	8017caa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017caa:	f001 fd13 	bl	80196d4 <vPortExitCritical>

	return xReturn;
 8017cae:	68fb      	ldr	r3, [r7, #12]
}
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	3710      	adds	r7, #16
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bd80      	pop	{r7, pc}

08017cb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b084      	sub	sp, #16
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017cc0:	f001 fcd8 	bl	8019674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ccc:	429a      	cmp	r2, r3
 8017cce:	d102      	bne.n	8017cd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	60fb      	str	r3, [r7, #12]
 8017cd4:	e001      	b.n	8017cda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017cda:	f001 fcfb 	bl	80196d4 <vPortExitCritical>

	return xReturn;
 8017cde:	68fb      	ldr	r3, [r7, #12]
}
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	3710      	adds	r7, #16
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bd80      	pop	{r7, pc}

08017ce8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017ce8:	b480      	push	{r7}
 8017cea:	b085      	sub	sp, #20
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
 8017cf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	60fb      	str	r3, [r7, #12]
 8017cf6:	e014      	b.n	8017d22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017cf8:	4a0f      	ldr	r2, [pc, #60]	; (8017d38 <vQueueAddToRegistry+0x50>)
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d10b      	bne.n	8017d1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017d04:	490c      	ldr	r1, [pc, #48]	; (8017d38 <vQueueAddToRegistry+0x50>)
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	683a      	ldr	r2, [r7, #0]
 8017d0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017d0e:	4a0a      	ldr	r2, [pc, #40]	; (8017d38 <vQueueAddToRegistry+0x50>)
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	00db      	lsls	r3, r3, #3
 8017d14:	4413      	add	r3, r2
 8017d16:	687a      	ldr	r2, [r7, #4]
 8017d18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017d1a:	e006      	b.n	8017d2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	3301      	adds	r3, #1
 8017d20:	60fb      	str	r3, [r7, #12]
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	2b07      	cmp	r3, #7
 8017d26:	d9e7      	bls.n	8017cf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017d28:	bf00      	nop
 8017d2a:	bf00      	nop
 8017d2c:	3714      	adds	r7, #20
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d34:	4770      	bx	lr
 8017d36:	bf00      	nop
 8017d38:	24002678 	.word	0x24002678

08017d3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017d3c:	b580      	push	{r7, lr}
 8017d3e:	b086      	sub	sp, #24
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	60f8      	str	r0, [r7, #12]
 8017d44:	60b9      	str	r1, [r7, #8]
 8017d46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017d4c:	f001 fc92 	bl	8019674 <vPortEnterCritical>
 8017d50:	697b      	ldr	r3, [r7, #20]
 8017d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017d56:	b25b      	sxtb	r3, r3
 8017d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d5c:	d103      	bne.n	8017d66 <vQueueWaitForMessageRestricted+0x2a>
 8017d5e:	697b      	ldr	r3, [r7, #20]
 8017d60:	2200      	movs	r2, #0
 8017d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017d66:	697b      	ldr	r3, [r7, #20]
 8017d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017d6c:	b25b      	sxtb	r3, r3
 8017d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d72:	d103      	bne.n	8017d7c <vQueueWaitForMessageRestricted+0x40>
 8017d74:	697b      	ldr	r3, [r7, #20]
 8017d76:	2200      	movs	r2, #0
 8017d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017d7c:	f001 fcaa 	bl	80196d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017d80:	697b      	ldr	r3, [r7, #20]
 8017d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d106      	bne.n	8017d96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017d88:	697b      	ldr	r3, [r7, #20]
 8017d8a:	3324      	adds	r3, #36	; 0x24
 8017d8c:	687a      	ldr	r2, [r7, #4]
 8017d8e:	68b9      	ldr	r1, [r7, #8]
 8017d90:	4618      	mov	r0, r3
 8017d92:	f000 fc8d 	bl	80186b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017d96:	6978      	ldr	r0, [r7, #20]
 8017d98:	f7ff ff26 	bl	8017be8 <prvUnlockQueue>
	}
 8017d9c:	bf00      	nop
 8017d9e:	3718      	adds	r7, #24
 8017da0:	46bd      	mov	sp, r7
 8017da2:	bd80      	pop	{r7, pc}

08017da4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b08e      	sub	sp, #56	; 0x38
 8017da8:	af04      	add	r7, sp, #16
 8017daa:	60f8      	str	r0, [r7, #12]
 8017dac:	60b9      	str	r1, [r7, #8]
 8017dae:	607a      	str	r2, [r7, #4]
 8017db0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d10a      	bne.n	8017dce <xTaskCreateStatic+0x2a>
	__asm volatile
 8017db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dbc:	f383 8811 	msr	BASEPRI, r3
 8017dc0:	f3bf 8f6f 	isb	sy
 8017dc4:	f3bf 8f4f 	dsb	sy
 8017dc8:	623b      	str	r3, [r7, #32]
}
 8017dca:	bf00      	nop
 8017dcc:	e7fe      	b.n	8017dcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d10a      	bne.n	8017dea <xTaskCreateStatic+0x46>
	__asm volatile
 8017dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dd8:	f383 8811 	msr	BASEPRI, r3
 8017ddc:	f3bf 8f6f 	isb	sy
 8017de0:	f3bf 8f4f 	dsb	sy
 8017de4:	61fb      	str	r3, [r7, #28]
}
 8017de6:	bf00      	nop
 8017de8:	e7fe      	b.n	8017de8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017dea:	235c      	movs	r3, #92	; 0x5c
 8017dec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017dee:	693b      	ldr	r3, [r7, #16]
 8017df0:	2b5c      	cmp	r3, #92	; 0x5c
 8017df2:	d00a      	beq.n	8017e0a <xTaskCreateStatic+0x66>
	__asm volatile
 8017df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017df8:	f383 8811 	msr	BASEPRI, r3
 8017dfc:	f3bf 8f6f 	isb	sy
 8017e00:	f3bf 8f4f 	dsb	sy
 8017e04:	61bb      	str	r3, [r7, #24]
}
 8017e06:	bf00      	nop
 8017e08:	e7fe      	b.n	8017e08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017e0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d01e      	beq.n	8017e50 <xTaskCreateStatic+0xac>
 8017e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d01b      	beq.n	8017e50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017e20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e24:	2202      	movs	r2, #2
 8017e26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	9303      	str	r3, [sp, #12]
 8017e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e30:	9302      	str	r3, [sp, #8]
 8017e32:	f107 0314 	add.w	r3, r7, #20
 8017e36:	9301      	str	r3, [sp, #4]
 8017e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e3a:	9300      	str	r3, [sp, #0]
 8017e3c:	683b      	ldr	r3, [r7, #0]
 8017e3e:	687a      	ldr	r2, [r7, #4]
 8017e40:	68b9      	ldr	r1, [r7, #8]
 8017e42:	68f8      	ldr	r0, [r7, #12]
 8017e44:	f000 f850 	bl	8017ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e4a:	f000 f8dd 	bl	8018008 <prvAddNewTaskToReadyList>
 8017e4e:	e001      	b.n	8017e54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017e50:	2300      	movs	r3, #0
 8017e52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017e54:	697b      	ldr	r3, [r7, #20]
	}
 8017e56:	4618      	mov	r0, r3
 8017e58:	3728      	adds	r7, #40	; 0x28
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	bd80      	pop	{r7, pc}

08017e5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017e5e:	b580      	push	{r7, lr}
 8017e60:	b08c      	sub	sp, #48	; 0x30
 8017e62:	af04      	add	r7, sp, #16
 8017e64:	60f8      	str	r0, [r7, #12]
 8017e66:	60b9      	str	r1, [r7, #8]
 8017e68:	603b      	str	r3, [r7, #0]
 8017e6a:	4613      	mov	r3, r2
 8017e6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017e6e:	88fb      	ldrh	r3, [r7, #6]
 8017e70:	009b      	lsls	r3, r3, #2
 8017e72:	4618      	mov	r0, r3
 8017e74:	f001 fd20 	bl	80198b8 <pvPortMalloc>
 8017e78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017e7a:	697b      	ldr	r3, [r7, #20]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d00e      	beq.n	8017e9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017e80:	205c      	movs	r0, #92	; 0x5c
 8017e82:	f001 fd19 	bl	80198b8 <pvPortMalloc>
 8017e86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017e88:	69fb      	ldr	r3, [r7, #28]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d003      	beq.n	8017e96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017e8e:	69fb      	ldr	r3, [r7, #28]
 8017e90:	697a      	ldr	r2, [r7, #20]
 8017e92:	631a      	str	r2, [r3, #48]	; 0x30
 8017e94:	e005      	b.n	8017ea2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017e96:	6978      	ldr	r0, [r7, #20]
 8017e98:	f001 fdda 	bl	8019a50 <vPortFree>
 8017e9c:	e001      	b.n	8017ea2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017ea2:	69fb      	ldr	r3, [r7, #28]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d017      	beq.n	8017ed8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017ea8:	69fb      	ldr	r3, [r7, #28]
 8017eaa:	2200      	movs	r2, #0
 8017eac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017eb0:	88fa      	ldrh	r2, [r7, #6]
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	9303      	str	r3, [sp, #12]
 8017eb6:	69fb      	ldr	r3, [r7, #28]
 8017eb8:	9302      	str	r3, [sp, #8]
 8017eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ebc:	9301      	str	r3, [sp, #4]
 8017ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec0:	9300      	str	r3, [sp, #0]
 8017ec2:	683b      	ldr	r3, [r7, #0]
 8017ec4:	68b9      	ldr	r1, [r7, #8]
 8017ec6:	68f8      	ldr	r0, [r7, #12]
 8017ec8:	f000 f80e 	bl	8017ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017ecc:	69f8      	ldr	r0, [r7, #28]
 8017ece:	f000 f89b 	bl	8018008 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017ed2:	2301      	movs	r3, #1
 8017ed4:	61bb      	str	r3, [r7, #24]
 8017ed6:	e002      	b.n	8017ede <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017edc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017ede:	69bb      	ldr	r3, [r7, #24]
	}
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	3720      	adds	r7, #32
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}

08017ee8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b088      	sub	sp, #32
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	60f8      	str	r0, [r7, #12]
 8017ef0:	60b9      	str	r1, [r7, #8]
 8017ef2:	607a      	str	r2, [r7, #4]
 8017ef4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ef8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	009b      	lsls	r3, r3, #2
 8017efe:	461a      	mov	r2, r3
 8017f00:	21a5      	movs	r1, #165	; 0xa5
 8017f02:	f001 fefb 	bl	8019cfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017f0a:	6879      	ldr	r1, [r7, #4]
 8017f0c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017f10:	440b      	add	r3, r1
 8017f12:	009b      	lsls	r3, r3, #2
 8017f14:	4413      	add	r3, r2
 8017f16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017f18:	69bb      	ldr	r3, [r7, #24]
 8017f1a:	f023 0307 	bic.w	r3, r3, #7
 8017f1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017f20:	69bb      	ldr	r3, [r7, #24]
 8017f22:	f003 0307 	and.w	r3, r3, #7
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d00a      	beq.n	8017f40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f2e:	f383 8811 	msr	BASEPRI, r3
 8017f32:	f3bf 8f6f 	isb	sy
 8017f36:	f3bf 8f4f 	dsb	sy
 8017f3a:	617b      	str	r3, [r7, #20]
}
 8017f3c:	bf00      	nop
 8017f3e:	e7fe      	b.n	8017f3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017f40:	68bb      	ldr	r3, [r7, #8]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d01f      	beq.n	8017f86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017f46:	2300      	movs	r3, #0
 8017f48:	61fb      	str	r3, [r7, #28]
 8017f4a:	e012      	b.n	8017f72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017f4c:	68ba      	ldr	r2, [r7, #8]
 8017f4e:	69fb      	ldr	r3, [r7, #28]
 8017f50:	4413      	add	r3, r2
 8017f52:	7819      	ldrb	r1, [r3, #0]
 8017f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f56:	69fb      	ldr	r3, [r7, #28]
 8017f58:	4413      	add	r3, r2
 8017f5a:	3334      	adds	r3, #52	; 0x34
 8017f5c:	460a      	mov	r2, r1
 8017f5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017f60:	68ba      	ldr	r2, [r7, #8]
 8017f62:	69fb      	ldr	r3, [r7, #28]
 8017f64:	4413      	add	r3, r2
 8017f66:	781b      	ldrb	r3, [r3, #0]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d006      	beq.n	8017f7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017f6c:	69fb      	ldr	r3, [r7, #28]
 8017f6e:	3301      	adds	r3, #1
 8017f70:	61fb      	str	r3, [r7, #28]
 8017f72:	69fb      	ldr	r3, [r7, #28]
 8017f74:	2b0f      	cmp	r3, #15
 8017f76:	d9e9      	bls.n	8017f4c <prvInitialiseNewTask+0x64>
 8017f78:	e000      	b.n	8017f7c <prvInitialiseNewTask+0x94>
			{
				break;
 8017f7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f7e:	2200      	movs	r2, #0
 8017f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017f84:	e003      	b.n	8017f8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f88:	2200      	movs	r2, #0
 8017f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f90:	2b37      	cmp	r3, #55	; 0x37
 8017f92:	d901      	bls.n	8017f98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017f94:	2337      	movs	r3, #55	; 0x37
 8017f96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017fa2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fac:	3304      	adds	r3, #4
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f7ff f978 	bl	80172a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fb6:	3318      	adds	r3, #24
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f7ff f973 	bl	80172a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017fc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017fd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fd6:	2200      	movs	r2, #0
 8017fd8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fdc:	2200      	movs	r2, #0
 8017fde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017fe2:	683a      	ldr	r2, [r7, #0]
 8017fe4:	68f9      	ldr	r1, [r7, #12]
 8017fe6:	69b8      	ldr	r0, [r7, #24]
 8017fe8:	f001 fa14 	bl	8019414 <pxPortInitialiseStack>
 8017fec:	4602      	mov	r2, r0
 8017fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ff0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d002      	beq.n	8017ffe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017ffe:	bf00      	nop
 8018000:	3720      	adds	r7, #32
 8018002:	46bd      	mov	sp, r7
 8018004:	bd80      	pop	{r7, pc}
	...

08018008 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b082      	sub	sp, #8
 801800c:	af00      	add	r7, sp, #0
 801800e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018010:	f001 fb30 	bl	8019674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018014:	4b2d      	ldr	r3, [pc, #180]	; (80180cc <prvAddNewTaskToReadyList+0xc4>)
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	3301      	adds	r3, #1
 801801a:	4a2c      	ldr	r2, [pc, #176]	; (80180cc <prvAddNewTaskToReadyList+0xc4>)
 801801c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801801e:	4b2c      	ldr	r3, [pc, #176]	; (80180d0 <prvAddNewTaskToReadyList+0xc8>)
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d109      	bne.n	801803a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018026:	4a2a      	ldr	r2, [pc, #168]	; (80180d0 <prvAddNewTaskToReadyList+0xc8>)
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801802c:	4b27      	ldr	r3, [pc, #156]	; (80180cc <prvAddNewTaskToReadyList+0xc4>)
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	2b01      	cmp	r3, #1
 8018032:	d110      	bne.n	8018056 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018034:	f000 fcca 	bl	80189cc <prvInitialiseTaskLists>
 8018038:	e00d      	b.n	8018056 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801803a:	4b26      	ldr	r3, [pc, #152]	; (80180d4 <prvAddNewTaskToReadyList+0xcc>)
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d109      	bne.n	8018056 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018042:	4b23      	ldr	r3, [pc, #140]	; (80180d0 <prvAddNewTaskToReadyList+0xc8>)
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801804c:	429a      	cmp	r2, r3
 801804e:	d802      	bhi.n	8018056 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018050:	4a1f      	ldr	r2, [pc, #124]	; (80180d0 <prvAddNewTaskToReadyList+0xc8>)
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018056:	4b20      	ldr	r3, [pc, #128]	; (80180d8 <prvAddNewTaskToReadyList+0xd0>)
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	3301      	adds	r3, #1
 801805c:	4a1e      	ldr	r2, [pc, #120]	; (80180d8 <prvAddNewTaskToReadyList+0xd0>)
 801805e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018060:	4b1d      	ldr	r3, [pc, #116]	; (80180d8 <prvAddNewTaskToReadyList+0xd0>)
 8018062:	681a      	ldr	r2, [r3, #0]
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801806c:	4b1b      	ldr	r3, [pc, #108]	; (80180dc <prvAddNewTaskToReadyList+0xd4>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	429a      	cmp	r2, r3
 8018072:	d903      	bls.n	801807c <prvAddNewTaskToReadyList+0x74>
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018078:	4a18      	ldr	r2, [pc, #96]	; (80180dc <prvAddNewTaskToReadyList+0xd4>)
 801807a:	6013      	str	r3, [r2, #0]
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018080:	4613      	mov	r3, r2
 8018082:	009b      	lsls	r3, r3, #2
 8018084:	4413      	add	r3, r2
 8018086:	009b      	lsls	r3, r3, #2
 8018088:	4a15      	ldr	r2, [pc, #84]	; (80180e0 <prvAddNewTaskToReadyList+0xd8>)
 801808a:	441a      	add	r2, r3
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	3304      	adds	r3, #4
 8018090:	4619      	mov	r1, r3
 8018092:	4610      	mov	r0, r2
 8018094:	f7ff f913 	bl	80172be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018098:	f001 fb1c 	bl	80196d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801809c:	4b0d      	ldr	r3, [pc, #52]	; (80180d4 <prvAddNewTaskToReadyList+0xcc>)
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d00e      	beq.n	80180c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80180a4:	4b0a      	ldr	r3, [pc, #40]	; (80180d0 <prvAddNewTaskToReadyList+0xc8>)
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180ae:	429a      	cmp	r2, r3
 80180b0:	d207      	bcs.n	80180c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80180b2:	4b0c      	ldr	r3, [pc, #48]	; (80180e4 <prvAddNewTaskToReadyList+0xdc>)
 80180b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180b8:	601a      	str	r2, [r3, #0]
 80180ba:	f3bf 8f4f 	dsb	sy
 80180be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80180c2:	bf00      	nop
 80180c4:	3708      	adds	r7, #8
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bd80      	pop	{r7, pc}
 80180ca:	bf00      	nop
 80180cc:	24002b8c 	.word	0x24002b8c
 80180d0:	240026b8 	.word	0x240026b8
 80180d4:	24002b98 	.word	0x24002b98
 80180d8:	24002ba8 	.word	0x24002ba8
 80180dc:	24002b94 	.word	0x24002b94
 80180e0:	240026bc 	.word	0x240026bc
 80180e4:	e000ed04 	.word	0xe000ed04

080180e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b084      	sub	sp, #16
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80180f0:	2300      	movs	r3, #0
 80180f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d017      	beq.n	801812a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80180fa:	4b13      	ldr	r3, [pc, #76]	; (8018148 <vTaskDelay+0x60>)
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d00a      	beq.n	8018118 <vTaskDelay+0x30>
	__asm volatile
 8018102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018106:	f383 8811 	msr	BASEPRI, r3
 801810a:	f3bf 8f6f 	isb	sy
 801810e:	f3bf 8f4f 	dsb	sy
 8018112:	60bb      	str	r3, [r7, #8]
}
 8018114:	bf00      	nop
 8018116:	e7fe      	b.n	8018116 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018118:	f000 f880 	bl	801821c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801811c:	2100      	movs	r1, #0
 801811e:	6878      	ldr	r0, [r7, #4]
 8018120:	f000 fdb6 	bl	8018c90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018124:	f000 f888 	bl	8018238 <xTaskResumeAll>
 8018128:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d107      	bne.n	8018140 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018130:	4b06      	ldr	r3, [pc, #24]	; (801814c <vTaskDelay+0x64>)
 8018132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018136:	601a      	str	r2, [r3, #0]
 8018138:	f3bf 8f4f 	dsb	sy
 801813c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018140:	bf00      	nop
 8018142:	3710      	adds	r7, #16
 8018144:	46bd      	mov	sp, r7
 8018146:	bd80      	pop	{r7, pc}
 8018148:	24002bb4 	.word	0x24002bb4
 801814c:	e000ed04 	.word	0xe000ed04

08018150 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b08a      	sub	sp, #40	; 0x28
 8018154:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018156:	2300      	movs	r3, #0
 8018158:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801815a:	2300      	movs	r3, #0
 801815c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801815e:	463a      	mov	r2, r7
 8018160:	1d39      	adds	r1, r7, #4
 8018162:	f107 0308 	add.w	r3, r7, #8
 8018166:	4618      	mov	r0, r3
 8018168:	f7fe fddc 	bl	8016d24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801816c:	6839      	ldr	r1, [r7, #0]
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	68ba      	ldr	r2, [r7, #8]
 8018172:	9202      	str	r2, [sp, #8]
 8018174:	9301      	str	r3, [sp, #4]
 8018176:	2300      	movs	r3, #0
 8018178:	9300      	str	r3, [sp, #0]
 801817a:	2300      	movs	r3, #0
 801817c:	460a      	mov	r2, r1
 801817e:	4921      	ldr	r1, [pc, #132]	; (8018204 <vTaskStartScheduler+0xb4>)
 8018180:	4821      	ldr	r0, [pc, #132]	; (8018208 <vTaskStartScheduler+0xb8>)
 8018182:	f7ff fe0f 	bl	8017da4 <xTaskCreateStatic>
 8018186:	4603      	mov	r3, r0
 8018188:	4a20      	ldr	r2, [pc, #128]	; (801820c <vTaskStartScheduler+0xbc>)
 801818a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801818c:	4b1f      	ldr	r3, [pc, #124]	; (801820c <vTaskStartScheduler+0xbc>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d002      	beq.n	801819a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018194:	2301      	movs	r3, #1
 8018196:	617b      	str	r3, [r7, #20]
 8018198:	e001      	b.n	801819e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801819a:	2300      	movs	r3, #0
 801819c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801819e:	697b      	ldr	r3, [r7, #20]
 80181a0:	2b01      	cmp	r3, #1
 80181a2:	d102      	bne.n	80181aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80181a4:	f000 fdc8 	bl	8018d38 <xTimerCreateTimerTask>
 80181a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80181aa:	697b      	ldr	r3, [r7, #20]
 80181ac:	2b01      	cmp	r3, #1
 80181ae:	d116      	bne.n	80181de <vTaskStartScheduler+0x8e>
	__asm volatile
 80181b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181b4:	f383 8811 	msr	BASEPRI, r3
 80181b8:	f3bf 8f6f 	isb	sy
 80181bc:	f3bf 8f4f 	dsb	sy
 80181c0:	613b      	str	r3, [r7, #16]
}
 80181c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80181c4:	4b12      	ldr	r3, [pc, #72]	; (8018210 <vTaskStartScheduler+0xc0>)
 80181c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80181ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80181cc:	4b11      	ldr	r3, [pc, #68]	; (8018214 <vTaskStartScheduler+0xc4>)
 80181ce:	2201      	movs	r2, #1
 80181d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80181d2:	4b11      	ldr	r3, [pc, #68]	; (8018218 <vTaskStartScheduler+0xc8>)
 80181d4:	2200      	movs	r2, #0
 80181d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80181d8:	f001 f9aa 	bl	8019530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80181dc:	e00e      	b.n	80181fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80181de:	697b      	ldr	r3, [r7, #20]
 80181e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80181e4:	d10a      	bne.n	80181fc <vTaskStartScheduler+0xac>
	__asm volatile
 80181e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181ea:	f383 8811 	msr	BASEPRI, r3
 80181ee:	f3bf 8f6f 	isb	sy
 80181f2:	f3bf 8f4f 	dsb	sy
 80181f6:	60fb      	str	r3, [r7, #12]
}
 80181f8:	bf00      	nop
 80181fa:	e7fe      	b.n	80181fa <vTaskStartScheduler+0xaa>
}
 80181fc:	bf00      	nop
 80181fe:	3718      	adds	r7, #24
 8018200:	46bd      	mov	sp, r7
 8018202:	bd80      	pop	{r7, pc}
 8018204:	0801a970 	.word	0x0801a970
 8018208:	0801899d 	.word	0x0801899d
 801820c:	24002bb0 	.word	0x24002bb0
 8018210:	24002bac 	.word	0x24002bac
 8018214:	24002b98 	.word	0x24002b98
 8018218:	24002b90 	.word	0x24002b90

0801821c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801821c:	b480      	push	{r7}
 801821e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018220:	4b04      	ldr	r3, [pc, #16]	; (8018234 <vTaskSuspendAll+0x18>)
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	3301      	adds	r3, #1
 8018226:	4a03      	ldr	r2, [pc, #12]	; (8018234 <vTaskSuspendAll+0x18>)
 8018228:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801822a:	bf00      	nop
 801822c:	46bd      	mov	sp, r7
 801822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018232:	4770      	bx	lr
 8018234:	24002bb4 	.word	0x24002bb4

08018238 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018238:	b580      	push	{r7, lr}
 801823a:	b084      	sub	sp, #16
 801823c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801823e:	2300      	movs	r3, #0
 8018240:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018242:	2300      	movs	r3, #0
 8018244:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018246:	4b42      	ldr	r3, [pc, #264]	; (8018350 <xTaskResumeAll+0x118>)
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d10a      	bne.n	8018264 <xTaskResumeAll+0x2c>
	__asm volatile
 801824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018252:	f383 8811 	msr	BASEPRI, r3
 8018256:	f3bf 8f6f 	isb	sy
 801825a:	f3bf 8f4f 	dsb	sy
 801825e:	603b      	str	r3, [r7, #0]
}
 8018260:	bf00      	nop
 8018262:	e7fe      	b.n	8018262 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018264:	f001 fa06 	bl	8019674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018268:	4b39      	ldr	r3, [pc, #228]	; (8018350 <xTaskResumeAll+0x118>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	3b01      	subs	r3, #1
 801826e:	4a38      	ldr	r2, [pc, #224]	; (8018350 <xTaskResumeAll+0x118>)
 8018270:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018272:	4b37      	ldr	r3, [pc, #220]	; (8018350 <xTaskResumeAll+0x118>)
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d162      	bne.n	8018340 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801827a:	4b36      	ldr	r3, [pc, #216]	; (8018354 <xTaskResumeAll+0x11c>)
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d05e      	beq.n	8018340 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018282:	e02f      	b.n	80182e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018284:	4b34      	ldr	r3, [pc, #208]	; (8018358 <xTaskResumeAll+0x120>)
 8018286:	68db      	ldr	r3, [r3, #12]
 8018288:	68db      	ldr	r3, [r3, #12]
 801828a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	3318      	adds	r3, #24
 8018290:	4618      	mov	r0, r3
 8018292:	f7ff f871 	bl	8017378 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	3304      	adds	r3, #4
 801829a:	4618      	mov	r0, r3
 801829c:	f7ff f86c 	bl	8017378 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182a4:	4b2d      	ldr	r3, [pc, #180]	; (801835c <xTaskResumeAll+0x124>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	429a      	cmp	r2, r3
 80182aa:	d903      	bls.n	80182b4 <xTaskResumeAll+0x7c>
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182b0:	4a2a      	ldr	r2, [pc, #168]	; (801835c <xTaskResumeAll+0x124>)
 80182b2:	6013      	str	r3, [r2, #0]
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182b8:	4613      	mov	r3, r2
 80182ba:	009b      	lsls	r3, r3, #2
 80182bc:	4413      	add	r3, r2
 80182be:	009b      	lsls	r3, r3, #2
 80182c0:	4a27      	ldr	r2, [pc, #156]	; (8018360 <xTaskResumeAll+0x128>)
 80182c2:	441a      	add	r2, r3
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	3304      	adds	r3, #4
 80182c8:	4619      	mov	r1, r3
 80182ca:	4610      	mov	r0, r2
 80182cc:	f7fe fff7 	bl	80172be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182d4:	4b23      	ldr	r3, [pc, #140]	; (8018364 <xTaskResumeAll+0x12c>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182da:	429a      	cmp	r2, r3
 80182dc:	d302      	bcc.n	80182e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80182de:	4b22      	ldr	r3, [pc, #136]	; (8018368 <xTaskResumeAll+0x130>)
 80182e0:	2201      	movs	r2, #1
 80182e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80182e4:	4b1c      	ldr	r3, [pc, #112]	; (8018358 <xTaskResumeAll+0x120>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d1cb      	bne.n	8018284 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d001      	beq.n	80182f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80182f2:	f000 fc09 	bl	8018b08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80182f6:	4b1d      	ldr	r3, [pc, #116]	; (801836c <xTaskResumeAll+0x134>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d010      	beq.n	8018324 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018302:	f000 f847 	bl	8018394 <xTaskIncrementTick>
 8018306:	4603      	mov	r3, r0
 8018308:	2b00      	cmp	r3, #0
 801830a:	d002      	beq.n	8018312 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801830c:	4b16      	ldr	r3, [pc, #88]	; (8018368 <xTaskResumeAll+0x130>)
 801830e:	2201      	movs	r2, #1
 8018310:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	3b01      	subs	r3, #1
 8018316:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d1f1      	bne.n	8018302 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801831e:	4b13      	ldr	r3, [pc, #76]	; (801836c <xTaskResumeAll+0x134>)
 8018320:	2200      	movs	r2, #0
 8018322:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018324:	4b10      	ldr	r3, [pc, #64]	; (8018368 <xTaskResumeAll+0x130>)
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d009      	beq.n	8018340 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801832c:	2301      	movs	r3, #1
 801832e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018330:	4b0f      	ldr	r3, [pc, #60]	; (8018370 <xTaskResumeAll+0x138>)
 8018332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018336:	601a      	str	r2, [r3, #0]
 8018338:	f3bf 8f4f 	dsb	sy
 801833c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018340:	f001 f9c8 	bl	80196d4 <vPortExitCritical>

	return xAlreadyYielded;
 8018344:	68bb      	ldr	r3, [r7, #8]
}
 8018346:	4618      	mov	r0, r3
 8018348:	3710      	adds	r7, #16
 801834a:	46bd      	mov	sp, r7
 801834c:	bd80      	pop	{r7, pc}
 801834e:	bf00      	nop
 8018350:	24002bb4 	.word	0x24002bb4
 8018354:	24002b8c 	.word	0x24002b8c
 8018358:	24002b4c 	.word	0x24002b4c
 801835c:	24002b94 	.word	0x24002b94
 8018360:	240026bc 	.word	0x240026bc
 8018364:	240026b8 	.word	0x240026b8
 8018368:	24002ba0 	.word	0x24002ba0
 801836c:	24002b9c 	.word	0x24002b9c
 8018370:	e000ed04 	.word	0xe000ed04

08018374 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018374:	b480      	push	{r7}
 8018376:	b083      	sub	sp, #12
 8018378:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801837a:	4b05      	ldr	r3, [pc, #20]	; (8018390 <xTaskGetTickCount+0x1c>)
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018380:	687b      	ldr	r3, [r7, #4]
}
 8018382:	4618      	mov	r0, r3
 8018384:	370c      	adds	r7, #12
 8018386:	46bd      	mov	sp, r7
 8018388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801838c:	4770      	bx	lr
 801838e:	bf00      	nop
 8018390:	24002b90 	.word	0x24002b90

08018394 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b086      	sub	sp, #24
 8018398:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801839a:	2300      	movs	r3, #0
 801839c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801839e:	4b53      	ldr	r3, [pc, #332]	; (80184ec <xTaskIncrementTick+0x158>)
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	f040 8095 	bne.w	80184d2 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80183a8:	4b51      	ldr	r3, [pc, #324]	; (80184f0 <xTaskIncrementTick+0x15c>)
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	3301      	adds	r3, #1
 80183ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80183b0:	4a4f      	ldr	r2, [pc, #316]	; (80184f0 <xTaskIncrementTick+0x15c>)
 80183b2:	693b      	ldr	r3, [r7, #16]
 80183b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80183b6:	693b      	ldr	r3, [r7, #16]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d120      	bne.n	80183fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80183bc:	4b4d      	ldr	r3, [pc, #308]	; (80184f4 <xTaskIncrementTick+0x160>)
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d00a      	beq.n	80183dc <xTaskIncrementTick+0x48>
	__asm volatile
 80183c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183ca:	f383 8811 	msr	BASEPRI, r3
 80183ce:	f3bf 8f6f 	isb	sy
 80183d2:	f3bf 8f4f 	dsb	sy
 80183d6:	603b      	str	r3, [r7, #0]
}
 80183d8:	bf00      	nop
 80183da:	e7fe      	b.n	80183da <xTaskIncrementTick+0x46>
 80183dc:	4b45      	ldr	r3, [pc, #276]	; (80184f4 <xTaskIncrementTick+0x160>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	60fb      	str	r3, [r7, #12]
 80183e2:	4b45      	ldr	r3, [pc, #276]	; (80184f8 <xTaskIncrementTick+0x164>)
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	4a43      	ldr	r2, [pc, #268]	; (80184f4 <xTaskIncrementTick+0x160>)
 80183e8:	6013      	str	r3, [r2, #0]
 80183ea:	4a43      	ldr	r2, [pc, #268]	; (80184f8 <xTaskIncrementTick+0x164>)
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	6013      	str	r3, [r2, #0]
 80183f0:	4b42      	ldr	r3, [pc, #264]	; (80184fc <xTaskIncrementTick+0x168>)
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	3301      	adds	r3, #1
 80183f6:	4a41      	ldr	r2, [pc, #260]	; (80184fc <xTaskIncrementTick+0x168>)
 80183f8:	6013      	str	r3, [r2, #0]
 80183fa:	f000 fb85 	bl	8018b08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80183fe:	4b40      	ldr	r3, [pc, #256]	; (8018500 <xTaskIncrementTick+0x16c>)
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	693a      	ldr	r2, [r7, #16]
 8018404:	429a      	cmp	r2, r3
 8018406:	d349      	bcc.n	801849c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018408:	4b3a      	ldr	r3, [pc, #232]	; (80184f4 <xTaskIncrementTick+0x160>)
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d104      	bne.n	801841c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018412:	4b3b      	ldr	r3, [pc, #236]	; (8018500 <xTaskIncrementTick+0x16c>)
 8018414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018418:	601a      	str	r2, [r3, #0]
					break;
 801841a:	e03f      	b.n	801849c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801841c:	4b35      	ldr	r3, [pc, #212]	; (80184f4 <xTaskIncrementTick+0x160>)
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	68db      	ldr	r3, [r3, #12]
 8018422:	68db      	ldr	r3, [r3, #12]
 8018424:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018426:	68bb      	ldr	r3, [r7, #8]
 8018428:	685b      	ldr	r3, [r3, #4]
 801842a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801842c:	693a      	ldr	r2, [r7, #16]
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	429a      	cmp	r2, r3
 8018432:	d203      	bcs.n	801843c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018434:	4a32      	ldr	r2, [pc, #200]	; (8018500 <xTaskIncrementTick+0x16c>)
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801843a:	e02f      	b.n	801849c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801843c:	68bb      	ldr	r3, [r7, #8]
 801843e:	3304      	adds	r3, #4
 8018440:	4618      	mov	r0, r3
 8018442:	f7fe ff99 	bl	8017378 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801844a:	2b00      	cmp	r3, #0
 801844c:	d004      	beq.n	8018458 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801844e:	68bb      	ldr	r3, [r7, #8]
 8018450:	3318      	adds	r3, #24
 8018452:	4618      	mov	r0, r3
 8018454:	f7fe ff90 	bl	8017378 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801845c:	4b29      	ldr	r3, [pc, #164]	; (8018504 <xTaskIncrementTick+0x170>)
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	429a      	cmp	r2, r3
 8018462:	d903      	bls.n	801846c <xTaskIncrementTick+0xd8>
 8018464:	68bb      	ldr	r3, [r7, #8]
 8018466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018468:	4a26      	ldr	r2, [pc, #152]	; (8018504 <xTaskIncrementTick+0x170>)
 801846a:	6013      	str	r3, [r2, #0]
 801846c:	68bb      	ldr	r3, [r7, #8]
 801846e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018470:	4613      	mov	r3, r2
 8018472:	009b      	lsls	r3, r3, #2
 8018474:	4413      	add	r3, r2
 8018476:	009b      	lsls	r3, r3, #2
 8018478:	4a23      	ldr	r2, [pc, #140]	; (8018508 <xTaskIncrementTick+0x174>)
 801847a:	441a      	add	r2, r3
 801847c:	68bb      	ldr	r3, [r7, #8]
 801847e:	3304      	adds	r3, #4
 8018480:	4619      	mov	r1, r3
 8018482:	4610      	mov	r0, r2
 8018484:	f7fe ff1b 	bl	80172be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018488:	68bb      	ldr	r3, [r7, #8]
 801848a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801848c:	4b1f      	ldr	r3, [pc, #124]	; (801850c <xTaskIncrementTick+0x178>)
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018492:	429a      	cmp	r2, r3
 8018494:	d3b8      	bcc.n	8018408 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018496:	2301      	movs	r3, #1
 8018498:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801849a:	e7b5      	b.n	8018408 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801849c:	4b1b      	ldr	r3, [pc, #108]	; (801850c <xTaskIncrementTick+0x178>)
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184a2:	4919      	ldr	r1, [pc, #100]	; (8018508 <xTaskIncrementTick+0x174>)
 80184a4:	4613      	mov	r3, r2
 80184a6:	009b      	lsls	r3, r3, #2
 80184a8:	4413      	add	r3, r2
 80184aa:	009b      	lsls	r3, r3, #2
 80184ac:	440b      	add	r3, r1
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	2b01      	cmp	r3, #1
 80184b2:	d901      	bls.n	80184b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80184b4:	2301      	movs	r3, #1
 80184b6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80184b8:	4b15      	ldr	r3, [pc, #84]	; (8018510 <xTaskIncrementTick+0x17c>)
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d101      	bne.n	80184c4 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80184c0:	f7e9 fdee 	bl	80020a0 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80184c4:	4b13      	ldr	r3, [pc, #76]	; (8018514 <xTaskIncrementTick+0x180>)
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d009      	beq.n	80184e0 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80184cc:	2301      	movs	r3, #1
 80184ce:	617b      	str	r3, [r7, #20]
 80184d0:	e006      	b.n	80184e0 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80184d2:	4b0f      	ldr	r3, [pc, #60]	; (8018510 <xTaskIncrementTick+0x17c>)
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	3301      	adds	r3, #1
 80184d8:	4a0d      	ldr	r2, [pc, #52]	; (8018510 <xTaskIncrementTick+0x17c>)
 80184da:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80184dc:	f7e9 fde0 	bl	80020a0 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80184e0:	697b      	ldr	r3, [r7, #20]
}
 80184e2:	4618      	mov	r0, r3
 80184e4:	3718      	adds	r7, #24
 80184e6:	46bd      	mov	sp, r7
 80184e8:	bd80      	pop	{r7, pc}
 80184ea:	bf00      	nop
 80184ec:	24002bb4 	.word	0x24002bb4
 80184f0:	24002b90 	.word	0x24002b90
 80184f4:	24002b44 	.word	0x24002b44
 80184f8:	24002b48 	.word	0x24002b48
 80184fc:	24002ba4 	.word	0x24002ba4
 8018500:	24002bac 	.word	0x24002bac
 8018504:	24002b94 	.word	0x24002b94
 8018508:	240026bc 	.word	0x240026bc
 801850c:	240026b8 	.word	0x240026b8
 8018510:	24002b9c 	.word	0x24002b9c
 8018514:	24002ba0 	.word	0x24002ba0

08018518 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b084      	sub	sp, #16
 801851c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801851e:	4b2f      	ldr	r3, [pc, #188]	; (80185dc <vTaskSwitchContext+0xc4>)
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	2b00      	cmp	r3, #0
 8018524:	d003      	beq.n	801852e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018526:	4b2e      	ldr	r3, [pc, #184]	; (80185e0 <vTaskSwitchContext+0xc8>)
 8018528:	2201      	movs	r2, #1
 801852a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801852c:	e052      	b.n	80185d4 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 801852e:	4b2c      	ldr	r3, [pc, #176]	; (80185e0 <vTaskSwitchContext+0xc8>)
 8018530:	2200      	movs	r2, #0
 8018532:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018534:	4b2b      	ldr	r3, [pc, #172]	; (80185e4 <vTaskSwitchContext+0xcc>)
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	681a      	ldr	r2, [r3, #0]
 801853a:	4b2a      	ldr	r3, [pc, #168]	; (80185e4 <vTaskSwitchContext+0xcc>)
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018540:	429a      	cmp	r2, r3
 8018542:	d808      	bhi.n	8018556 <vTaskSwitchContext+0x3e>
 8018544:	4b27      	ldr	r3, [pc, #156]	; (80185e4 <vTaskSwitchContext+0xcc>)
 8018546:	681a      	ldr	r2, [r3, #0]
 8018548:	4b26      	ldr	r3, [pc, #152]	; (80185e4 <vTaskSwitchContext+0xcc>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	3334      	adds	r3, #52	; 0x34
 801854e:	4619      	mov	r1, r3
 8018550:	4610      	mov	r0, r2
 8018552:	f7e9 fdb3 	bl	80020bc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018556:	4b24      	ldr	r3, [pc, #144]	; (80185e8 <vTaskSwitchContext+0xd0>)
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	60fb      	str	r3, [r7, #12]
 801855c:	e010      	b.n	8018580 <vTaskSwitchContext+0x68>
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d10a      	bne.n	801857a <vTaskSwitchContext+0x62>
	__asm volatile
 8018564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018568:	f383 8811 	msr	BASEPRI, r3
 801856c:	f3bf 8f6f 	isb	sy
 8018570:	f3bf 8f4f 	dsb	sy
 8018574:	607b      	str	r3, [r7, #4]
}
 8018576:	bf00      	nop
 8018578:	e7fe      	b.n	8018578 <vTaskSwitchContext+0x60>
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	3b01      	subs	r3, #1
 801857e:	60fb      	str	r3, [r7, #12]
 8018580:	491a      	ldr	r1, [pc, #104]	; (80185ec <vTaskSwitchContext+0xd4>)
 8018582:	68fa      	ldr	r2, [r7, #12]
 8018584:	4613      	mov	r3, r2
 8018586:	009b      	lsls	r3, r3, #2
 8018588:	4413      	add	r3, r2
 801858a:	009b      	lsls	r3, r3, #2
 801858c:	440b      	add	r3, r1
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d0e4      	beq.n	801855e <vTaskSwitchContext+0x46>
 8018594:	68fa      	ldr	r2, [r7, #12]
 8018596:	4613      	mov	r3, r2
 8018598:	009b      	lsls	r3, r3, #2
 801859a:	4413      	add	r3, r2
 801859c:	009b      	lsls	r3, r3, #2
 801859e:	4a13      	ldr	r2, [pc, #76]	; (80185ec <vTaskSwitchContext+0xd4>)
 80185a0:	4413      	add	r3, r2
 80185a2:	60bb      	str	r3, [r7, #8]
 80185a4:	68bb      	ldr	r3, [r7, #8]
 80185a6:	685b      	ldr	r3, [r3, #4]
 80185a8:	685a      	ldr	r2, [r3, #4]
 80185aa:	68bb      	ldr	r3, [r7, #8]
 80185ac:	605a      	str	r2, [r3, #4]
 80185ae:	68bb      	ldr	r3, [r7, #8]
 80185b0:	685a      	ldr	r2, [r3, #4]
 80185b2:	68bb      	ldr	r3, [r7, #8]
 80185b4:	3308      	adds	r3, #8
 80185b6:	429a      	cmp	r2, r3
 80185b8:	d104      	bne.n	80185c4 <vTaskSwitchContext+0xac>
 80185ba:	68bb      	ldr	r3, [r7, #8]
 80185bc:	685b      	ldr	r3, [r3, #4]
 80185be:	685a      	ldr	r2, [r3, #4]
 80185c0:	68bb      	ldr	r3, [r7, #8]
 80185c2:	605a      	str	r2, [r3, #4]
 80185c4:	68bb      	ldr	r3, [r7, #8]
 80185c6:	685b      	ldr	r3, [r3, #4]
 80185c8:	68db      	ldr	r3, [r3, #12]
 80185ca:	4a06      	ldr	r2, [pc, #24]	; (80185e4 <vTaskSwitchContext+0xcc>)
 80185cc:	6013      	str	r3, [r2, #0]
 80185ce:	4a06      	ldr	r2, [pc, #24]	; (80185e8 <vTaskSwitchContext+0xd0>)
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	6013      	str	r3, [r2, #0]
}
 80185d4:	bf00      	nop
 80185d6:	3710      	adds	r7, #16
 80185d8:	46bd      	mov	sp, r7
 80185da:	bd80      	pop	{r7, pc}
 80185dc:	24002bb4 	.word	0x24002bb4
 80185e0:	24002ba0 	.word	0x24002ba0
 80185e4:	240026b8 	.word	0x240026b8
 80185e8:	24002b94 	.word	0x24002b94
 80185ec:	240026bc 	.word	0x240026bc

080185f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b084      	sub	sp, #16
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
 80185f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d10a      	bne.n	8018616 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018604:	f383 8811 	msr	BASEPRI, r3
 8018608:	f3bf 8f6f 	isb	sy
 801860c:	f3bf 8f4f 	dsb	sy
 8018610:	60fb      	str	r3, [r7, #12]
}
 8018612:	bf00      	nop
 8018614:	e7fe      	b.n	8018614 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018616:	4b07      	ldr	r3, [pc, #28]	; (8018634 <vTaskPlaceOnEventList+0x44>)
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	3318      	adds	r3, #24
 801861c:	4619      	mov	r1, r3
 801861e:	6878      	ldr	r0, [r7, #4]
 8018620:	f7fe fe71 	bl	8017306 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018624:	2101      	movs	r1, #1
 8018626:	6838      	ldr	r0, [r7, #0]
 8018628:	f000 fb32 	bl	8018c90 <prvAddCurrentTaskToDelayedList>
}
 801862c:	bf00      	nop
 801862e:	3710      	adds	r7, #16
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}
 8018634:	240026b8 	.word	0x240026b8

08018638 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b086      	sub	sp, #24
 801863c:	af00      	add	r7, sp, #0
 801863e:	60f8      	str	r0, [r7, #12]
 8018640:	60b9      	str	r1, [r7, #8]
 8018642:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d10a      	bne.n	8018660 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801864e:	f383 8811 	msr	BASEPRI, r3
 8018652:	f3bf 8f6f 	isb	sy
 8018656:	f3bf 8f4f 	dsb	sy
 801865a:	617b      	str	r3, [r7, #20]
}
 801865c:	bf00      	nop
 801865e:	e7fe      	b.n	801865e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8018660:	4b11      	ldr	r3, [pc, #68]	; (80186a8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d10a      	bne.n	801867e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8018668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801866c:	f383 8811 	msr	BASEPRI, r3
 8018670:	f3bf 8f6f 	isb	sy
 8018674:	f3bf 8f4f 	dsb	sy
 8018678:	613b      	str	r3, [r7, #16]
}
 801867a:	bf00      	nop
 801867c:	e7fe      	b.n	801867c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801867e:	4b0b      	ldr	r3, [pc, #44]	; (80186ac <vTaskPlaceOnUnorderedEventList+0x74>)
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	68ba      	ldr	r2, [r7, #8]
 8018684:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8018688:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801868a:	4b08      	ldr	r3, [pc, #32]	; (80186ac <vTaskPlaceOnUnorderedEventList+0x74>)
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	3318      	adds	r3, #24
 8018690:	4619      	mov	r1, r3
 8018692:	68f8      	ldr	r0, [r7, #12]
 8018694:	f7fe fe13 	bl	80172be <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018698:	2101      	movs	r1, #1
 801869a:	6878      	ldr	r0, [r7, #4]
 801869c:	f000 faf8 	bl	8018c90 <prvAddCurrentTaskToDelayedList>
}
 80186a0:	bf00      	nop
 80186a2:	3718      	adds	r7, #24
 80186a4:	46bd      	mov	sp, r7
 80186a6:	bd80      	pop	{r7, pc}
 80186a8:	24002bb4 	.word	0x24002bb4
 80186ac:	240026b8 	.word	0x240026b8

080186b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b086      	sub	sp, #24
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	60f8      	str	r0, [r7, #12]
 80186b8:	60b9      	str	r1, [r7, #8]
 80186ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d10a      	bne.n	80186d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80186c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186c6:	f383 8811 	msr	BASEPRI, r3
 80186ca:	f3bf 8f6f 	isb	sy
 80186ce:	f3bf 8f4f 	dsb	sy
 80186d2:	617b      	str	r3, [r7, #20]
}
 80186d4:	bf00      	nop
 80186d6:	e7fe      	b.n	80186d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80186d8:	4b0a      	ldr	r3, [pc, #40]	; (8018704 <vTaskPlaceOnEventListRestricted+0x54>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	3318      	adds	r3, #24
 80186de:	4619      	mov	r1, r3
 80186e0:	68f8      	ldr	r0, [r7, #12]
 80186e2:	f7fe fdec 	bl	80172be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d002      	beq.n	80186f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80186ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80186f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80186f2:	6879      	ldr	r1, [r7, #4]
 80186f4:	68b8      	ldr	r0, [r7, #8]
 80186f6:	f000 facb 	bl	8018c90 <prvAddCurrentTaskToDelayedList>
	}
 80186fa:	bf00      	nop
 80186fc:	3718      	adds	r7, #24
 80186fe:	46bd      	mov	sp, r7
 8018700:	bd80      	pop	{r7, pc}
 8018702:	bf00      	nop
 8018704:	240026b8 	.word	0x240026b8

08018708 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b086      	sub	sp, #24
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	68db      	ldr	r3, [r3, #12]
 8018714:	68db      	ldr	r3, [r3, #12]
 8018716:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018718:	693b      	ldr	r3, [r7, #16]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d10a      	bne.n	8018734 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801871e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018722:	f383 8811 	msr	BASEPRI, r3
 8018726:	f3bf 8f6f 	isb	sy
 801872a:	f3bf 8f4f 	dsb	sy
 801872e:	60fb      	str	r3, [r7, #12]
}
 8018730:	bf00      	nop
 8018732:	e7fe      	b.n	8018732 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018734:	693b      	ldr	r3, [r7, #16]
 8018736:	3318      	adds	r3, #24
 8018738:	4618      	mov	r0, r3
 801873a:	f7fe fe1d 	bl	8017378 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801873e:	4b1e      	ldr	r3, [pc, #120]	; (80187b8 <xTaskRemoveFromEventList+0xb0>)
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d11d      	bne.n	8018782 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018746:	693b      	ldr	r3, [r7, #16]
 8018748:	3304      	adds	r3, #4
 801874a:	4618      	mov	r0, r3
 801874c:	f7fe fe14 	bl	8017378 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018750:	693b      	ldr	r3, [r7, #16]
 8018752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018754:	4b19      	ldr	r3, [pc, #100]	; (80187bc <xTaskRemoveFromEventList+0xb4>)
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	429a      	cmp	r2, r3
 801875a:	d903      	bls.n	8018764 <xTaskRemoveFromEventList+0x5c>
 801875c:	693b      	ldr	r3, [r7, #16]
 801875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018760:	4a16      	ldr	r2, [pc, #88]	; (80187bc <xTaskRemoveFromEventList+0xb4>)
 8018762:	6013      	str	r3, [r2, #0]
 8018764:	693b      	ldr	r3, [r7, #16]
 8018766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018768:	4613      	mov	r3, r2
 801876a:	009b      	lsls	r3, r3, #2
 801876c:	4413      	add	r3, r2
 801876e:	009b      	lsls	r3, r3, #2
 8018770:	4a13      	ldr	r2, [pc, #76]	; (80187c0 <xTaskRemoveFromEventList+0xb8>)
 8018772:	441a      	add	r2, r3
 8018774:	693b      	ldr	r3, [r7, #16]
 8018776:	3304      	adds	r3, #4
 8018778:	4619      	mov	r1, r3
 801877a:	4610      	mov	r0, r2
 801877c:	f7fe fd9f 	bl	80172be <vListInsertEnd>
 8018780:	e005      	b.n	801878e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018782:	693b      	ldr	r3, [r7, #16]
 8018784:	3318      	adds	r3, #24
 8018786:	4619      	mov	r1, r3
 8018788:	480e      	ldr	r0, [pc, #56]	; (80187c4 <xTaskRemoveFromEventList+0xbc>)
 801878a:	f7fe fd98 	bl	80172be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801878e:	693b      	ldr	r3, [r7, #16]
 8018790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018792:	4b0d      	ldr	r3, [pc, #52]	; (80187c8 <xTaskRemoveFromEventList+0xc0>)
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018798:	429a      	cmp	r2, r3
 801879a:	d905      	bls.n	80187a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801879c:	2301      	movs	r3, #1
 801879e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80187a0:	4b0a      	ldr	r3, [pc, #40]	; (80187cc <xTaskRemoveFromEventList+0xc4>)
 80187a2:	2201      	movs	r2, #1
 80187a4:	601a      	str	r2, [r3, #0]
 80187a6:	e001      	b.n	80187ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80187a8:	2300      	movs	r3, #0
 80187aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80187ac:	697b      	ldr	r3, [r7, #20]
}
 80187ae:	4618      	mov	r0, r3
 80187b0:	3718      	adds	r7, #24
 80187b2:	46bd      	mov	sp, r7
 80187b4:	bd80      	pop	{r7, pc}
 80187b6:	bf00      	nop
 80187b8:	24002bb4 	.word	0x24002bb4
 80187bc:	24002b94 	.word	0x24002b94
 80187c0:	240026bc 	.word	0x240026bc
 80187c4:	24002b4c 	.word	0x24002b4c
 80187c8:	240026b8 	.word	0x240026b8
 80187cc:	24002ba0 	.word	0x24002ba0

080187d0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b086      	sub	sp, #24
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
 80187d8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80187da:	4b29      	ldr	r3, [pc, #164]	; (8018880 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d10a      	bne.n	80187f8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80187e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187e6:	f383 8811 	msr	BASEPRI, r3
 80187ea:	f3bf 8f6f 	isb	sy
 80187ee:	f3bf 8f4f 	dsb	sy
 80187f2:	613b      	str	r3, [r7, #16]
}
 80187f4:	bf00      	nop
 80187f6:	e7fe      	b.n	80187f6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80187f8:	683b      	ldr	r3, [r7, #0]
 80187fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	68db      	ldr	r3, [r3, #12]
 8018806:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018808:	697b      	ldr	r3, [r7, #20]
 801880a:	2b00      	cmp	r3, #0
 801880c:	d10a      	bne.n	8018824 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018812:	f383 8811 	msr	BASEPRI, r3
 8018816:	f3bf 8f6f 	isb	sy
 801881a:	f3bf 8f4f 	dsb	sy
 801881e:	60fb      	str	r3, [r7, #12]
}
 8018820:	bf00      	nop
 8018822:	e7fe      	b.n	8018822 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018824:	6878      	ldr	r0, [r7, #4]
 8018826:	f7fe fda7 	bl	8017378 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801882a:	697b      	ldr	r3, [r7, #20]
 801882c:	3304      	adds	r3, #4
 801882e:	4618      	mov	r0, r3
 8018830:	f7fe fda2 	bl	8017378 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018834:	697b      	ldr	r3, [r7, #20]
 8018836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018838:	4b12      	ldr	r3, [pc, #72]	; (8018884 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	429a      	cmp	r2, r3
 801883e:	d903      	bls.n	8018848 <vTaskRemoveFromUnorderedEventList+0x78>
 8018840:	697b      	ldr	r3, [r7, #20]
 8018842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018844:	4a0f      	ldr	r2, [pc, #60]	; (8018884 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018846:	6013      	str	r3, [r2, #0]
 8018848:	697b      	ldr	r3, [r7, #20]
 801884a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801884c:	4613      	mov	r3, r2
 801884e:	009b      	lsls	r3, r3, #2
 8018850:	4413      	add	r3, r2
 8018852:	009b      	lsls	r3, r3, #2
 8018854:	4a0c      	ldr	r2, [pc, #48]	; (8018888 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018856:	441a      	add	r2, r3
 8018858:	697b      	ldr	r3, [r7, #20]
 801885a:	3304      	adds	r3, #4
 801885c:	4619      	mov	r1, r3
 801885e:	4610      	mov	r0, r2
 8018860:	f7fe fd2d 	bl	80172be <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018864:	697b      	ldr	r3, [r7, #20]
 8018866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018868:	4b08      	ldr	r3, [pc, #32]	; (801888c <vTaskRemoveFromUnorderedEventList+0xbc>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801886e:	429a      	cmp	r2, r3
 8018870:	d902      	bls.n	8018878 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018872:	4b07      	ldr	r3, [pc, #28]	; (8018890 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018874:	2201      	movs	r2, #1
 8018876:	601a      	str	r2, [r3, #0]
	}
}
 8018878:	bf00      	nop
 801887a:	3718      	adds	r7, #24
 801887c:	46bd      	mov	sp, r7
 801887e:	bd80      	pop	{r7, pc}
 8018880:	24002bb4 	.word	0x24002bb4
 8018884:	24002b94 	.word	0x24002b94
 8018888:	240026bc 	.word	0x240026bc
 801888c:	240026b8 	.word	0x240026b8
 8018890:	24002ba0 	.word	0x24002ba0

08018894 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018894:	b480      	push	{r7}
 8018896:	b083      	sub	sp, #12
 8018898:	af00      	add	r7, sp, #0
 801889a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801889c:	4b06      	ldr	r3, [pc, #24]	; (80188b8 <vTaskInternalSetTimeOutState+0x24>)
 801889e:	681a      	ldr	r2, [r3, #0]
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80188a4:	4b05      	ldr	r3, [pc, #20]	; (80188bc <vTaskInternalSetTimeOutState+0x28>)
 80188a6:	681a      	ldr	r2, [r3, #0]
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	605a      	str	r2, [r3, #4]
}
 80188ac:	bf00      	nop
 80188ae:	370c      	adds	r7, #12
 80188b0:	46bd      	mov	sp, r7
 80188b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b6:	4770      	bx	lr
 80188b8:	24002ba4 	.word	0x24002ba4
 80188bc:	24002b90 	.word	0x24002b90

080188c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b088      	sub	sp, #32
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
 80188c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d10a      	bne.n	80188e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80188d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188d4:	f383 8811 	msr	BASEPRI, r3
 80188d8:	f3bf 8f6f 	isb	sy
 80188dc:	f3bf 8f4f 	dsb	sy
 80188e0:	613b      	str	r3, [r7, #16]
}
 80188e2:	bf00      	nop
 80188e4:	e7fe      	b.n	80188e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80188e6:	683b      	ldr	r3, [r7, #0]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d10a      	bne.n	8018902 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80188ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188f0:	f383 8811 	msr	BASEPRI, r3
 80188f4:	f3bf 8f6f 	isb	sy
 80188f8:	f3bf 8f4f 	dsb	sy
 80188fc:	60fb      	str	r3, [r7, #12]
}
 80188fe:	bf00      	nop
 8018900:	e7fe      	b.n	8018900 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018902:	f000 feb7 	bl	8019674 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018906:	4b1d      	ldr	r3, [pc, #116]	; (801897c <xTaskCheckForTimeOut+0xbc>)
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	685b      	ldr	r3, [r3, #4]
 8018910:	69ba      	ldr	r2, [r7, #24]
 8018912:	1ad3      	subs	r3, r2, r3
 8018914:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018916:	683b      	ldr	r3, [r7, #0]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801891e:	d102      	bne.n	8018926 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018920:	2300      	movs	r3, #0
 8018922:	61fb      	str	r3, [r7, #28]
 8018924:	e023      	b.n	801896e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	681a      	ldr	r2, [r3, #0]
 801892a:	4b15      	ldr	r3, [pc, #84]	; (8018980 <xTaskCheckForTimeOut+0xc0>)
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	429a      	cmp	r2, r3
 8018930:	d007      	beq.n	8018942 <xTaskCheckForTimeOut+0x82>
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	685b      	ldr	r3, [r3, #4]
 8018936:	69ba      	ldr	r2, [r7, #24]
 8018938:	429a      	cmp	r2, r3
 801893a:	d302      	bcc.n	8018942 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801893c:	2301      	movs	r3, #1
 801893e:	61fb      	str	r3, [r7, #28]
 8018940:	e015      	b.n	801896e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	697a      	ldr	r2, [r7, #20]
 8018948:	429a      	cmp	r2, r3
 801894a:	d20b      	bcs.n	8018964 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	681a      	ldr	r2, [r3, #0]
 8018950:	697b      	ldr	r3, [r7, #20]
 8018952:	1ad2      	subs	r2, r2, r3
 8018954:	683b      	ldr	r3, [r7, #0]
 8018956:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018958:	6878      	ldr	r0, [r7, #4]
 801895a:	f7ff ff9b 	bl	8018894 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801895e:	2300      	movs	r3, #0
 8018960:	61fb      	str	r3, [r7, #28]
 8018962:	e004      	b.n	801896e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018964:	683b      	ldr	r3, [r7, #0]
 8018966:	2200      	movs	r2, #0
 8018968:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801896a:	2301      	movs	r3, #1
 801896c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801896e:	f000 feb1 	bl	80196d4 <vPortExitCritical>

	return xReturn;
 8018972:	69fb      	ldr	r3, [r7, #28]
}
 8018974:	4618      	mov	r0, r3
 8018976:	3720      	adds	r7, #32
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}
 801897c:	24002b90 	.word	0x24002b90
 8018980:	24002ba4 	.word	0x24002ba4

08018984 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018984:	b480      	push	{r7}
 8018986:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018988:	4b03      	ldr	r3, [pc, #12]	; (8018998 <vTaskMissedYield+0x14>)
 801898a:	2201      	movs	r2, #1
 801898c:	601a      	str	r2, [r3, #0]
}
 801898e:	bf00      	nop
 8018990:	46bd      	mov	sp, r7
 8018992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018996:	4770      	bx	lr
 8018998:	24002ba0 	.word	0x24002ba0

0801899c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801899c:	b580      	push	{r7, lr}
 801899e:	b082      	sub	sp, #8
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80189a4:	f000 f852 	bl	8018a4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80189a8:	4b06      	ldr	r3, [pc, #24]	; (80189c4 <prvIdleTask+0x28>)
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	2b01      	cmp	r3, #1
 80189ae:	d9f9      	bls.n	80189a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80189b0:	4b05      	ldr	r3, [pc, #20]	; (80189c8 <prvIdleTask+0x2c>)
 80189b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80189b6:	601a      	str	r2, [r3, #0]
 80189b8:	f3bf 8f4f 	dsb	sy
 80189bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80189c0:	e7f0      	b.n	80189a4 <prvIdleTask+0x8>
 80189c2:	bf00      	nop
 80189c4:	240026bc 	.word	0x240026bc
 80189c8:	e000ed04 	.word	0xe000ed04

080189cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b082      	sub	sp, #8
 80189d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80189d2:	2300      	movs	r3, #0
 80189d4:	607b      	str	r3, [r7, #4]
 80189d6:	e00c      	b.n	80189f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80189d8:	687a      	ldr	r2, [r7, #4]
 80189da:	4613      	mov	r3, r2
 80189dc:	009b      	lsls	r3, r3, #2
 80189de:	4413      	add	r3, r2
 80189e0:	009b      	lsls	r3, r3, #2
 80189e2:	4a12      	ldr	r2, [pc, #72]	; (8018a2c <prvInitialiseTaskLists+0x60>)
 80189e4:	4413      	add	r3, r2
 80189e6:	4618      	mov	r0, r3
 80189e8:	f7fe fc3c 	bl	8017264 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	3301      	adds	r3, #1
 80189f0:	607b      	str	r3, [r7, #4]
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	2b37      	cmp	r3, #55	; 0x37
 80189f6:	d9ef      	bls.n	80189d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80189f8:	480d      	ldr	r0, [pc, #52]	; (8018a30 <prvInitialiseTaskLists+0x64>)
 80189fa:	f7fe fc33 	bl	8017264 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80189fe:	480d      	ldr	r0, [pc, #52]	; (8018a34 <prvInitialiseTaskLists+0x68>)
 8018a00:	f7fe fc30 	bl	8017264 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018a04:	480c      	ldr	r0, [pc, #48]	; (8018a38 <prvInitialiseTaskLists+0x6c>)
 8018a06:	f7fe fc2d 	bl	8017264 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018a0a:	480c      	ldr	r0, [pc, #48]	; (8018a3c <prvInitialiseTaskLists+0x70>)
 8018a0c:	f7fe fc2a 	bl	8017264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018a10:	480b      	ldr	r0, [pc, #44]	; (8018a40 <prvInitialiseTaskLists+0x74>)
 8018a12:	f7fe fc27 	bl	8017264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018a16:	4b0b      	ldr	r3, [pc, #44]	; (8018a44 <prvInitialiseTaskLists+0x78>)
 8018a18:	4a05      	ldr	r2, [pc, #20]	; (8018a30 <prvInitialiseTaskLists+0x64>)
 8018a1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018a1c:	4b0a      	ldr	r3, [pc, #40]	; (8018a48 <prvInitialiseTaskLists+0x7c>)
 8018a1e:	4a05      	ldr	r2, [pc, #20]	; (8018a34 <prvInitialiseTaskLists+0x68>)
 8018a20:	601a      	str	r2, [r3, #0]
}
 8018a22:	bf00      	nop
 8018a24:	3708      	adds	r7, #8
 8018a26:	46bd      	mov	sp, r7
 8018a28:	bd80      	pop	{r7, pc}
 8018a2a:	bf00      	nop
 8018a2c:	240026bc 	.word	0x240026bc
 8018a30:	24002b1c 	.word	0x24002b1c
 8018a34:	24002b30 	.word	0x24002b30
 8018a38:	24002b4c 	.word	0x24002b4c
 8018a3c:	24002b60 	.word	0x24002b60
 8018a40:	24002b78 	.word	0x24002b78
 8018a44:	24002b44 	.word	0x24002b44
 8018a48:	24002b48 	.word	0x24002b48

08018a4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b082      	sub	sp, #8
 8018a50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a52:	e019      	b.n	8018a88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018a54:	f000 fe0e 	bl	8019674 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a58:	4b10      	ldr	r3, [pc, #64]	; (8018a9c <prvCheckTasksWaitingTermination+0x50>)
 8018a5a:	68db      	ldr	r3, [r3, #12]
 8018a5c:	68db      	ldr	r3, [r3, #12]
 8018a5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	3304      	adds	r3, #4
 8018a64:	4618      	mov	r0, r3
 8018a66:	f7fe fc87 	bl	8017378 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018a6a:	4b0d      	ldr	r3, [pc, #52]	; (8018aa0 <prvCheckTasksWaitingTermination+0x54>)
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	3b01      	subs	r3, #1
 8018a70:	4a0b      	ldr	r2, [pc, #44]	; (8018aa0 <prvCheckTasksWaitingTermination+0x54>)
 8018a72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018a74:	4b0b      	ldr	r3, [pc, #44]	; (8018aa4 <prvCheckTasksWaitingTermination+0x58>)
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	3b01      	subs	r3, #1
 8018a7a:	4a0a      	ldr	r2, [pc, #40]	; (8018aa4 <prvCheckTasksWaitingTermination+0x58>)
 8018a7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018a7e:	f000 fe29 	bl	80196d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018a82:	6878      	ldr	r0, [r7, #4]
 8018a84:	f000 f810 	bl	8018aa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a88:	4b06      	ldr	r3, [pc, #24]	; (8018aa4 <prvCheckTasksWaitingTermination+0x58>)
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d1e1      	bne.n	8018a54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018a90:	bf00      	nop
 8018a92:	bf00      	nop
 8018a94:	3708      	adds	r7, #8
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd80      	pop	{r7, pc}
 8018a9a:	bf00      	nop
 8018a9c:	24002b60 	.word	0x24002b60
 8018aa0:	24002b8c 	.word	0x24002b8c
 8018aa4:	24002b74 	.word	0x24002b74

08018aa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b084      	sub	sp, #16
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d108      	bne.n	8018acc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f000 ffc6 	bl	8019a50 <vPortFree>
				vPortFree( pxTCB );
 8018ac4:	6878      	ldr	r0, [r7, #4]
 8018ac6:	f000 ffc3 	bl	8019a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018aca:	e018      	b.n	8018afe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018ad2:	2b01      	cmp	r3, #1
 8018ad4:	d103      	bne.n	8018ade <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018ad6:	6878      	ldr	r0, [r7, #4]
 8018ad8:	f000 ffba 	bl	8019a50 <vPortFree>
	}
 8018adc:	e00f      	b.n	8018afe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018ae4:	2b02      	cmp	r3, #2
 8018ae6:	d00a      	beq.n	8018afe <prvDeleteTCB+0x56>
	__asm volatile
 8018ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aec:	f383 8811 	msr	BASEPRI, r3
 8018af0:	f3bf 8f6f 	isb	sy
 8018af4:	f3bf 8f4f 	dsb	sy
 8018af8:	60fb      	str	r3, [r7, #12]
}
 8018afa:	bf00      	nop
 8018afc:	e7fe      	b.n	8018afc <prvDeleteTCB+0x54>
	}
 8018afe:	bf00      	nop
 8018b00:	3710      	adds	r7, #16
 8018b02:	46bd      	mov	sp, r7
 8018b04:	bd80      	pop	{r7, pc}
	...

08018b08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018b08:	b480      	push	{r7}
 8018b0a:	b083      	sub	sp, #12
 8018b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018b0e:	4b0c      	ldr	r3, [pc, #48]	; (8018b40 <prvResetNextTaskUnblockTime+0x38>)
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d104      	bne.n	8018b22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018b18:	4b0a      	ldr	r3, [pc, #40]	; (8018b44 <prvResetNextTaskUnblockTime+0x3c>)
 8018b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018b1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018b20:	e008      	b.n	8018b34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b22:	4b07      	ldr	r3, [pc, #28]	; (8018b40 <prvResetNextTaskUnblockTime+0x38>)
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	68db      	ldr	r3, [r3, #12]
 8018b28:	68db      	ldr	r3, [r3, #12]
 8018b2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	685b      	ldr	r3, [r3, #4]
 8018b30:	4a04      	ldr	r2, [pc, #16]	; (8018b44 <prvResetNextTaskUnblockTime+0x3c>)
 8018b32:	6013      	str	r3, [r2, #0]
}
 8018b34:	bf00      	nop
 8018b36:	370c      	adds	r7, #12
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b3e:	4770      	bx	lr
 8018b40:	24002b44 	.word	0x24002b44
 8018b44:	24002bac 	.word	0x24002bac

08018b48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018b48:	b480      	push	{r7}
 8018b4a:	b083      	sub	sp, #12
 8018b4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018b4e:	4b0b      	ldr	r3, [pc, #44]	; (8018b7c <xTaskGetSchedulerState+0x34>)
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d102      	bne.n	8018b5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018b56:	2301      	movs	r3, #1
 8018b58:	607b      	str	r3, [r7, #4]
 8018b5a:	e008      	b.n	8018b6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b5c:	4b08      	ldr	r3, [pc, #32]	; (8018b80 <xTaskGetSchedulerState+0x38>)
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d102      	bne.n	8018b6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018b64:	2302      	movs	r3, #2
 8018b66:	607b      	str	r3, [r7, #4]
 8018b68:	e001      	b.n	8018b6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018b6e:	687b      	ldr	r3, [r7, #4]
	}
 8018b70:	4618      	mov	r0, r3
 8018b72:	370c      	adds	r7, #12
 8018b74:	46bd      	mov	sp, r7
 8018b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b7a:	4770      	bx	lr
 8018b7c:	24002b98 	.word	0x24002b98
 8018b80:	24002bb4 	.word	0x24002bb4

08018b84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b086      	sub	sp, #24
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018b90:	2300      	movs	r3, #0
 8018b92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d056      	beq.n	8018c48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018b9a:	4b2e      	ldr	r3, [pc, #184]	; (8018c54 <xTaskPriorityDisinherit+0xd0>)
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	693a      	ldr	r2, [r7, #16]
 8018ba0:	429a      	cmp	r2, r3
 8018ba2:	d00a      	beq.n	8018bba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ba8:	f383 8811 	msr	BASEPRI, r3
 8018bac:	f3bf 8f6f 	isb	sy
 8018bb0:	f3bf 8f4f 	dsb	sy
 8018bb4:	60fb      	str	r3, [r7, #12]
}
 8018bb6:	bf00      	nop
 8018bb8:	e7fe      	b.n	8018bb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018bba:	693b      	ldr	r3, [r7, #16]
 8018bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d10a      	bne.n	8018bd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bc6:	f383 8811 	msr	BASEPRI, r3
 8018bca:	f3bf 8f6f 	isb	sy
 8018bce:	f3bf 8f4f 	dsb	sy
 8018bd2:	60bb      	str	r3, [r7, #8]
}
 8018bd4:	bf00      	nop
 8018bd6:	e7fe      	b.n	8018bd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018bd8:	693b      	ldr	r3, [r7, #16]
 8018bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bdc:	1e5a      	subs	r2, r3, #1
 8018bde:	693b      	ldr	r3, [r7, #16]
 8018be0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018be2:	693b      	ldr	r3, [r7, #16]
 8018be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018be6:	693b      	ldr	r3, [r7, #16]
 8018be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018bea:	429a      	cmp	r2, r3
 8018bec:	d02c      	beq.n	8018c48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018bee:	693b      	ldr	r3, [r7, #16]
 8018bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d128      	bne.n	8018c48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018bf6:	693b      	ldr	r3, [r7, #16]
 8018bf8:	3304      	adds	r3, #4
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f7fe fbbc 	bl	8017378 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018c00:	693b      	ldr	r3, [r7, #16]
 8018c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018c04:	693b      	ldr	r3, [r7, #16]
 8018c06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c08:	693b      	ldr	r3, [r7, #16]
 8018c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018c10:	693b      	ldr	r3, [r7, #16]
 8018c12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018c14:	693b      	ldr	r3, [r7, #16]
 8018c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c18:	4b0f      	ldr	r3, [pc, #60]	; (8018c58 <xTaskPriorityDisinherit+0xd4>)
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	429a      	cmp	r2, r3
 8018c1e:	d903      	bls.n	8018c28 <xTaskPriorityDisinherit+0xa4>
 8018c20:	693b      	ldr	r3, [r7, #16]
 8018c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c24:	4a0c      	ldr	r2, [pc, #48]	; (8018c58 <xTaskPriorityDisinherit+0xd4>)
 8018c26:	6013      	str	r3, [r2, #0]
 8018c28:	693b      	ldr	r3, [r7, #16]
 8018c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c2c:	4613      	mov	r3, r2
 8018c2e:	009b      	lsls	r3, r3, #2
 8018c30:	4413      	add	r3, r2
 8018c32:	009b      	lsls	r3, r3, #2
 8018c34:	4a09      	ldr	r2, [pc, #36]	; (8018c5c <xTaskPriorityDisinherit+0xd8>)
 8018c36:	441a      	add	r2, r3
 8018c38:	693b      	ldr	r3, [r7, #16]
 8018c3a:	3304      	adds	r3, #4
 8018c3c:	4619      	mov	r1, r3
 8018c3e:	4610      	mov	r0, r2
 8018c40:	f7fe fb3d 	bl	80172be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018c44:	2301      	movs	r3, #1
 8018c46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c48:	697b      	ldr	r3, [r7, #20]
	}
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	3718      	adds	r7, #24
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	bd80      	pop	{r7, pc}
 8018c52:	bf00      	nop
 8018c54:	240026b8 	.word	0x240026b8
 8018c58:	24002b94 	.word	0x24002b94
 8018c5c:	240026bc 	.word	0x240026bc

08018c60 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018c60:	b480      	push	{r7}
 8018c62:	b083      	sub	sp, #12
 8018c64:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8018c66:	4b09      	ldr	r3, [pc, #36]	; (8018c8c <uxTaskResetEventItemValue+0x2c>)
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	699b      	ldr	r3, [r3, #24]
 8018c6c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c6e:	4b07      	ldr	r3, [pc, #28]	; (8018c8c <uxTaskResetEventItemValue+0x2c>)
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c74:	4b05      	ldr	r3, [pc, #20]	; (8018c8c <uxTaskResetEventItemValue+0x2c>)
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018c7c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8018c7e:	687b      	ldr	r3, [r7, #4]
}
 8018c80:	4618      	mov	r0, r3
 8018c82:	370c      	adds	r7, #12
 8018c84:	46bd      	mov	sp, r7
 8018c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8a:	4770      	bx	lr
 8018c8c:	240026b8 	.word	0x240026b8

08018c90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b084      	sub	sp, #16
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
 8018c98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018c9a:	4b21      	ldr	r3, [pc, #132]	; (8018d20 <prvAddCurrentTaskToDelayedList+0x90>)
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018ca0:	4b20      	ldr	r3, [pc, #128]	; (8018d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	3304      	adds	r3, #4
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	f7fe fb66 	bl	8017378 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018cb2:	d10a      	bne.n	8018cca <prvAddCurrentTaskToDelayedList+0x3a>
 8018cb4:	683b      	ldr	r3, [r7, #0]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d007      	beq.n	8018cca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018cba:	4b1a      	ldr	r3, [pc, #104]	; (8018d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	3304      	adds	r3, #4
 8018cc0:	4619      	mov	r1, r3
 8018cc2:	4819      	ldr	r0, [pc, #100]	; (8018d28 <prvAddCurrentTaskToDelayedList+0x98>)
 8018cc4:	f7fe fafb 	bl	80172be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018cc8:	e026      	b.n	8018d18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018cca:	68fa      	ldr	r2, [r7, #12]
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	4413      	add	r3, r2
 8018cd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018cd2:	4b14      	ldr	r3, [pc, #80]	; (8018d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	68ba      	ldr	r2, [r7, #8]
 8018cd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018cda:	68ba      	ldr	r2, [r7, #8]
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	429a      	cmp	r2, r3
 8018ce0:	d209      	bcs.n	8018cf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018ce2:	4b12      	ldr	r3, [pc, #72]	; (8018d2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8018ce4:	681a      	ldr	r2, [r3, #0]
 8018ce6:	4b0f      	ldr	r3, [pc, #60]	; (8018d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	3304      	adds	r3, #4
 8018cec:	4619      	mov	r1, r3
 8018cee:	4610      	mov	r0, r2
 8018cf0:	f7fe fb09 	bl	8017306 <vListInsert>
}
 8018cf4:	e010      	b.n	8018d18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018cf6:	4b0e      	ldr	r3, [pc, #56]	; (8018d30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018cf8:	681a      	ldr	r2, [r3, #0]
 8018cfa:	4b0a      	ldr	r3, [pc, #40]	; (8018d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	3304      	adds	r3, #4
 8018d00:	4619      	mov	r1, r3
 8018d02:	4610      	mov	r0, r2
 8018d04:	f7fe faff 	bl	8017306 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018d08:	4b0a      	ldr	r3, [pc, #40]	; (8018d34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	68ba      	ldr	r2, [r7, #8]
 8018d0e:	429a      	cmp	r2, r3
 8018d10:	d202      	bcs.n	8018d18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018d12:	4a08      	ldr	r2, [pc, #32]	; (8018d34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018d14:	68bb      	ldr	r3, [r7, #8]
 8018d16:	6013      	str	r3, [r2, #0]
}
 8018d18:	bf00      	nop
 8018d1a:	3710      	adds	r7, #16
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd80      	pop	{r7, pc}
 8018d20:	24002b90 	.word	0x24002b90
 8018d24:	240026b8 	.word	0x240026b8
 8018d28:	24002b78 	.word	0x24002b78
 8018d2c:	24002b48 	.word	0x24002b48
 8018d30:	24002b44 	.word	0x24002b44
 8018d34:	24002bac 	.word	0x24002bac

08018d38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018d38:	b580      	push	{r7, lr}
 8018d3a:	b08a      	sub	sp, #40	; 0x28
 8018d3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018d42:	f000 fb07 	bl	8019354 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018d46:	4b1c      	ldr	r3, [pc, #112]	; (8018db8 <xTimerCreateTimerTask+0x80>)
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d021      	beq.n	8018d92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018d52:	2300      	movs	r3, #0
 8018d54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018d56:	1d3a      	adds	r2, r7, #4
 8018d58:	f107 0108 	add.w	r1, r7, #8
 8018d5c:	f107 030c 	add.w	r3, r7, #12
 8018d60:	4618      	mov	r0, r3
 8018d62:	f7fd fff9 	bl	8016d58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018d66:	6879      	ldr	r1, [r7, #4]
 8018d68:	68bb      	ldr	r3, [r7, #8]
 8018d6a:	68fa      	ldr	r2, [r7, #12]
 8018d6c:	9202      	str	r2, [sp, #8]
 8018d6e:	9301      	str	r3, [sp, #4]
 8018d70:	2302      	movs	r3, #2
 8018d72:	9300      	str	r3, [sp, #0]
 8018d74:	2300      	movs	r3, #0
 8018d76:	460a      	mov	r2, r1
 8018d78:	4910      	ldr	r1, [pc, #64]	; (8018dbc <xTimerCreateTimerTask+0x84>)
 8018d7a:	4811      	ldr	r0, [pc, #68]	; (8018dc0 <xTimerCreateTimerTask+0x88>)
 8018d7c:	f7ff f812 	bl	8017da4 <xTaskCreateStatic>
 8018d80:	4603      	mov	r3, r0
 8018d82:	4a10      	ldr	r2, [pc, #64]	; (8018dc4 <xTimerCreateTimerTask+0x8c>)
 8018d84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018d86:	4b0f      	ldr	r3, [pc, #60]	; (8018dc4 <xTimerCreateTimerTask+0x8c>)
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d001      	beq.n	8018d92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018d8e:	2301      	movs	r3, #1
 8018d90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018d92:	697b      	ldr	r3, [r7, #20]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d10a      	bne.n	8018dae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d9c:	f383 8811 	msr	BASEPRI, r3
 8018da0:	f3bf 8f6f 	isb	sy
 8018da4:	f3bf 8f4f 	dsb	sy
 8018da8:	613b      	str	r3, [r7, #16]
}
 8018daa:	bf00      	nop
 8018dac:	e7fe      	b.n	8018dac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018dae:	697b      	ldr	r3, [r7, #20]
}
 8018db0:	4618      	mov	r0, r3
 8018db2:	3718      	adds	r7, #24
 8018db4:	46bd      	mov	sp, r7
 8018db6:	bd80      	pop	{r7, pc}
 8018db8:	24002be8 	.word	0x24002be8
 8018dbc:	0801a978 	.word	0x0801a978
 8018dc0:	08018efd 	.word	0x08018efd
 8018dc4:	24002bec 	.word	0x24002bec

08018dc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b08a      	sub	sp, #40	; 0x28
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	60f8      	str	r0, [r7, #12]
 8018dd0:	60b9      	str	r1, [r7, #8]
 8018dd2:	607a      	str	r2, [r7, #4]
 8018dd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d10a      	bne.n	8018df6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8018de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018de4:	f383 8811 	msr	BASEPRI, r3
 8018de8:	f3bf 8f6f 	isb	sy
 8018dec:	f3bf 8f4f 	dsb	sy
 8018df0:	623b      	str	r3, [r7, #32]
}
 8018df2:	bf00      	nop
 8018df4:	e7fe      	b.n	8018df4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018df6:	4b1a      	ldr	r3, [pc, #104]	; (8018e60 <xTimerGenericCommand+0x98>)
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d02a      	beq.n	8018e54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018dfe:	68bb      	ldr	r3, [r7, #8]
 8018e00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018e0a:	68bb      	ldr	r3, [r7, #8]
 8018e0c:	2b05      	cmp	r3, #5
 8018e0e:	dc18      	bgt.n	8018e42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018e10:	f7ff fe9a 	bl	8018b48 <xTaskGetSchedulerState>
 8018e14:	4603      	mov	r3, r0
 8018e16:	2b02      	cmp	r3, #2
 8018e18:	d109      	bne.n	8018e2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018e1a:	4b11      	ldr	r3, [pc, #68]	; (8018e60 <xTimerGenericCommand+0x98>)
 8018e1c:	6818      	ldr	r0, [r3, #0]
 8018e1e:	f107 0110 	add.w	r1, r7, #16
 8018e22:	2300      	movs	r3, #0
 8018e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e26:	f7fe fbd5 	bl	80175d4 <xQueueGenericSend>
 8018e2a:	6278      	str	r0, [r7, #36]	; 0x24
 8018e2c:	e012      	b.n	8018e54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018e2e:	4b0c      	ldr	r3, [pc, #48]	; (8018e60 <xTimerGenericCommand+0x98>)
 8018e30:	6818      	ldr	r0, [r3, #0]
 8018e32:	f107 0110 	add.w	r1, r7, #16
 8018e36:	2300      	movs	r3, #0
 8018e38:	2200      	movs	r2, #0
 8018e3a:	f7fe fbcb 	bl	80175d4 <xQueueGenericSend>
 8018e3e:	6278      	str	r0, [r7, #36]	; 0x24
 8018e40:	e008      	b.n	8018e54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018e42:	4b07      	ldr	r3, [pc, #28]	; (8018e60 <xTimerGenericCommand+0x98>)
 8018e44:	6818      	ldr	r0, [r3, #0]
 8018e46:	f107 0110 	add.w	r1, r7, #16
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	683a      	ldr	r2, [r7, #0]
 8018e4e:	f7fe fcbf 	bl	80177d0 <xQueueGenericSendFromISR>
 8018e52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018e56:	4618      	mov	r0, r3
 8018e58:	3728      	adds	r7, #40	; 0x28
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bd80      	pop	{r7, pc}
 8018e5e:	bf00      	nop
 8018e60:	24002be8 	.word	0x24002be8

08018e64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b088      	sub	sp, #32
 8018e68:	af02      	add	r7, sp, #8
 8018e6a:	6078      	str	r0, [r7, #4]
 8018e6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e6e:	4b22      	ldr	r3, [pc, #136]	; (8018ef8 <prvProcessExpiredTimer+0x94>)
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	68db      	ldr	r3, [r3, #12]
 8018e74:	68db      	ldr	r3, [r3, #12]
 8018e76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018e78:	697b      	ldr	r3, [r7, #20]
 8018e7a:	3304      	adds	r3, #4
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	f7fe fa7b 	bl	8017378 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018e82:	697b      	ldr	r3, [r7, #20]
 8018e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e88:	f003 0304 	and.w	r3, r3, #4
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d022      	beq.n	8018ed6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018e90:	697b      	ldr	r3, [r7, #20]
 8018e92:	699a      	ldr	r2, [r3, #24]
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	18d1      	adds	r1, r2, r3
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	683a      	ldr	r2, [r7, #0]
 8018e9c:	6978      	ldr	r0, [r7, #20]
 8018e9e:	f000 f8d1 	bl	8019044 <prvInsertTimerInActiveList>
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d01f      	beq.n	8018ee8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	9300      	str	r3, [sp, #0]
 8018eac:	2300      	movs	r3, #0
 8018eae:	687a      	ldr	r2, [r7, #4]
 8018eb0:	2100      	movs	r1, #0
 8018eb2:	6978      	ldr	r0, [r7, #20]
 8018eb4:	f7ff ff88 	bl	8018dc8 <xTimerGenericCommand>
 8018eb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018eba:	693b      	ldr	r3, [r7, #16]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d113      	bne.n	8018ee8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ec4:	f383 8811 	msr	BASEPRI, r3
 8018ec8:	f3bf 8f6f 	isb	sy
 8018ecc:	f3bf 8f4f 	dsb	sy
 8018ed0:	60fb      	str	r3, [r7, #12]
}
 8018ed2:	bf00      	nop
 8018ed4:	e7fe      	b.n	8018ed4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018ed6:	697b      	ldr	r3, [r7, #20]
 8018ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018edc:	f023 0301 	bic.w	r3, r3, #1
 8018ee0:	b2da      	uxtb	r2, r3
 8018ee2:	697b      	ldr	r3, [r7, #20]
 8018ee4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018ee8:	697b      	ldr	r3, [r7, #20]
 8018eea:	6a1b      	ldr	r3, [r3, #32]
 8018eec:	6978      	ldr	r0, [r7, #20]
 8018eee:	4798      	blx	r3
}
 8018ef0:	bf00      	nop
 8018ef2:	3718      	adds	r7, #24
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bd80      	pop	{r7, pc}
 8018ef8:	24002be0 	.word	0x24002be0

08018efc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b084      	sub	sp, #16
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018f04:	f107 0308 	add.w	r3, r7, #8
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f000 f857 	bl	8018fbc <prvGetNextExpireTime>
 8018f0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018f10:	68bb      	ldr	r3, [r7, #8]
 8018f12:	4619      	mov	r1, r3
 8018f14:	68f8      	ldr	r0, [r7, #12]
 8018f16:	f000 f803 	bl	8018f20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018f1a:	f000 f8d5 	bl	80190c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018f1e:	e7f1      	b.n	8018f04 <prvTimerTask+0x8>

08018f20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018f20:	b580      	push	{r7, lr}
 8018f22:	b084      	sub	sp, #16
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
 8018f28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018f2a:	f7ff f977 	bl	801821c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018f2e:	f107 0308 	add.w	r3, r7, #8
 8018f32:	4618      	mov	r0, r3
 8018f34:	f000 f866 	bl	8019004 <prvSampleTimeNow>
 8018f38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018f3a:	68bb      	ldr	r3, [r7, #8]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d130      	bne.n	8018fa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018f40:	683b      	ldr	r3, [r7, #0]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d10a      	bne.n	8018f5c <prvProcessTimerOrBlockTask+0x3c>
 8018f46:	687a      	ldr	r2, [r7, #4]
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	429a      	cmp	r2, r3
 8018f4c:	d806      	bhi.n	8018f5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018f4e:	f7ff f973 	bl	8018238 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018f52:	68f9      	ldr	r1, [r7, #12]
 8018f54:	6878      	ldr	r0, [r7, #4]
 8018f56:	f7ff ff85 	bl	8018e64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018f5a:	e024      	b.n	8018fa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018f5c:	683b      	ldr	r3, [r7, #0]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d008      	beq.n	8018f74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018f62:	4b13      	ldr	r3, [pc, #76]	; (8018fb0 <prvProcessTimerOrBlockTask+0x90>)
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d101      	bne.n	8018f70 <prvProcessTimerOrBlockTask+0x50>
 8018f6c:	2301      	movs	r3, #1
 8018f6e:	e000      	b.n	8018f72 <prvProcessTimerOrBlockTask+0x52>
 8018f70:	2300      	movs	r3, #0
 8018f72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018f74:	4b0f      	ldr	r3, [pc, #60]	; (8018fb4 <prvProcessTimerOrBlockTask+0x94>)
 8018f76:	6818      	ldr	r0, [r3, #0]
 8018f78:	687a      	ldr	r2, [r7, #4]
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	1ad3      	subs	r3, r2, r3
 8018f7e:	683a      	ldr	r2, [r7, #0]
 8018f80:	4619      	mov	r1, r3
 8018f82:	f7fe fedb 	bl	8017d3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018f86:	f7ff f957 	bl	8018238 <xTaskResumeAll>
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d10a      	bne.n	8018fa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018f90:	4b09      	ldr	r3, [pc, #36]	; (8018fb8 <prvProcessTimerOrBlockTask+0x98>)
 8018f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f96:	601a      	str	r2, [r3, #0]
 8018f98:	f3bf 8f4f 	dsb	sy
 8018f9c:	f3bf 8f6f 	isb	sy
}
 8018fa0:	e001      	b.n	8018fa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018fa2:	f7ff f949 	bl	8018238 <xTaskResumeAll>
}
 8018fa6:	bf00      	nop
 8018fa8:	3710      	adds	r7, #16
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bd80      	pop	{r7, pc}
 8018fae:	bf00      	nop
 8018fb0:	24002be4 	.word	0x24002be4
 8018fb4:	24002be8 	.word	0x24002be8
 8018fb8:	e000ed04 	.word	0xe000ed04

08018fbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018fbc:	b480      	push	{r7}
 8018fbe:	b085      	sub	sp, #20
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018fc4:	4b0e      	ldr	r3, [pc, #56]	; (8019000 <prvGetNextExpireTime+0x44>)
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d101      	bne.n	8018fd2 <prvGetNextExpireTime+0x16>
 8018fce:	2201      	movs	r2, #1
 8018fd0:	e000      	b.n	8018fd4 <prvGetNextExpireTime+0x18>
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d105      	bne.n	8018fec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018fe0:	4b07      	ldr	r3, [pc, #28]	; (8019000 <prvGetNextExpireTime+0x44>)
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	68db      	ldr	r3, [r3, #12]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	60fb      	str	r3, [r7, #12]
 8018fea:	e001      	b.n	8018ff0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018fec:	2300      	movs	r3, #0
 8018fee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018ff0:	68fb      	ldr	r3, [r7, #12]
}
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	3714      	adds	r7, #20
 8018ff6:	46bd      	mov	sp, r7
 8018ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ffc:	4770      	bx	lr
 8018ffe:	bf00      	nop
 8019000:	24002be0 	.word	0x24002be0

08019004 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019004:	b580      	push	{r7, lr}
 8019006:	b084      	sub	sp, #16
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801900c:	f7ff f9b2 	bl	8018374 <xTaskGetTickCount>
 8019010:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019012:	4b0b      	ldr	r3, [pc, #44]	; (8019040 <prvSampleTimeNow+0x3c>)
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	68fa      	ldr	r2, [r7, #12]
 8019018:	429a      	cmp	r2, r3
 801901a:	d205      	bcs.n	8019028 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801901c:	f000 f936 	bl	801928c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	2201      	movs	r2, #1
 8019024:	601a      	str	r2, [r3, #0]
 8019026:	e002      	b.n	801902e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	2200      	movs	r2, #0
 801902c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801902e:	4a04      	ldr	r2, [pc, #16]	; (8019040 <prvSampleTimeNow+0x3c>)
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019034:	68fb      	ldr	r3, [r7, #12]
}
 8019036:	4618      	mov	r0, r3
 8019038:	3710      	adds	r7, #16
 801903a:	46bd      	mov	sp, r7
 801903c:	bd80      	pop	{r7, pc}
 801903e:	bf00      	nop
 8019040:	24002bf0 	.word	0x24002bf0

08019044 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019044:	b580      	push	{r7, lr}
 8019046:	b086      	sub	sp, #24
 8019048:	af00      	add	r7, sp, #0
 801904a:	60f8      	str	r0, [r7, #12]
 801904c:	60b9      	str	r1, [r7, #8]
 801904e:	607a      	str	r2, [r7, #4]
 8019050:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019052:	2300      	movs	r3, #0
 8019054:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	68ba      	ldr	r2, [r7, #8]
 801905a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	68fa      	ldr	r2, [r7, #12]
 8019060:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019062:	68ba      	ldr	r2, [r7, #8]
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	429a      	cmp	r2, r3
 8019068:	d812      	bhi.n	8019090 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801906a:	687a      	ldr	r2, [r7, #4]
 801906c:	683b      	ldr	r3, [r7, #0]
 801906e:	1ad2      	subs	r2, r2, r3
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	699b      	ldr	r3, [r3, #24]
 8019074:	429a      	cmp	r2, r3
 8019076:	d302      	bcc.n	801907e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019078:	2301      	movs	r3, #1
 801907a:	617b      	str	r3, [r7, #20]
 801907c:	e01b      	b.n	80190b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801907e:	4b10      	ldr	r3, [pc, #64]	; (80190c0 <prvInsertTimerInActiveList+0x7c>)
 8019080:	681a      	ldr	r2, [r3, #0]
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	3304      	adds	r3, #4
 8019086:	4619      	mov	r1, r3
 8019088:	4610      	mov	r0, r2
 801908a:	f7fe f93c 	bl	8017306 <vListInsert>
 801908e:	e012      	b.n	80190b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019090:	687a      	ldr	r2, [r7, #4]
 8019092:	683b      	ldr	r3, [r7, #0]
 8019094:	429a      	cmp	r2, r3
 8019096:	d206      	bcs.n	80190a6 <prvInsertTimerInActiveList+0x62>
 8019098:	68ba      	ldr	r2, [r7, #8]
 801909a:	683b      	ldr	r3, [r7, #0]
 801909c:	429a      	cmp	r2, r3
 801909e:	d302      	bcc.n	80190a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80190a0:	2301      	movs	r3, #1
 80190a2:	617b      	str	r3, [r7, #20]
 80190a4:	e007      	b.n	80190b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80190a6:	4b07      	ldr	r3, [pc, #28]	; (80190c4 <prvInsertTimerInActiveList+0x80>)
 80190a8:	681a      	ldr	r2, [r3, #0]
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	3304      	adds	r3, #4
 80190ae:	4619      	mov	r1, r3
 80190b0:	4610      	mov	r0, r2
 80190b2:	f7fe f928 	bl	8017306 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80190b6:	697b      	ldr	r3, [r7, #20]
}
 80190b8:	4618      	mov	r0, r3
 80190ba:	3718      	adds	r7, #24
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	24002be4 	.word	0x24002be4
 80190c4:	24002be0 	.word	0x24002be0

080190c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b08e      	sub	sp, #56	; 0x38
 80190cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80190ce:	e0ca      	b.n	8019266 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	da18      	bge.n	8019108 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80190d6:	1d3b      	adds	r3, r7, #4
 80190d8:	3304      	adds	r3, #4
 80190da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80190dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d10a      	bne.n	80190f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80190e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190e6:	f383 8811 	msr	BASEPRI, r3
 80190ea:	f3bf 8f6f 	isb	sy
 80190ee:	f3bf 8f4f 	dsb	sy
 80190f2:	61fb      	str	r3, [r7, #28]
}
 80190f4:	bf00      	nop
 80190f6:	e7fe      	b.n	80190f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80190f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80190fe:	6850      	ldr	r0, [r2, #4]
 8019100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019102:	6892      	ldr	r2, [r2, #8]
 8019104:	4611      	mov	r1, r2
 8019106:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	2b00      	cmp	r3, #0
 801910c:	f2c0 80aa 	blt.w	8019264 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019116:	695b      	ldr	r3, [r3, #20]
 8019118:	2b00      	cmp	r3, #0
 801911a:	d004      	beq.n	8019126 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801911e:	3304      	adds	r3, #4
 8019120:	4618      	mov	r0, r3
 8019122:	f7fe f929 	bl	8017378 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019126:	463b      	mov	r3, r7
 8019128:	4618      	mov	r0, r3
 801912a:	f7ff ff6b 	bl	8019004 <prvSampleTimeNow>
 801912e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	2b09      	cmp	r3, #9
 8019134:	f200 8097 	bhi.w	8019266 <prvProcessReceivedCommands+0x19e>
 8019138:	a201      	add	r2, pc, #4	; (adr r2, 8019140 <prvProcessReceivedCommands+0x78>)
 801913a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801913e:	bf00      	nop
 8019140:	08019169 	.word	0x08019169
 8019144:	08019169 	.word	0x08019169
 8019148:	08019169 	.word	0x08019169
 801914c:	080191dd 	.word	0x080191dd
 8019150:	080191f1 	.word	0x080191f1
 8019154:	0801923b 	.word	0x0801923b
 8019158:	08019169 	.word	0x08019169
 801915c:	08019169 	.word	0x08019169
 8019160:	080191dd 	.word	0x080191dd
 8019164:	080191f1 	.word	0x080191f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801916a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801916e:	f043 0301 	orr.w	r3, r3, #1
 8019172:	b2da      	uxtb	r2, r3
 8019174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801917a:	68ba      	ldr	r2, [r7, #8]
 801917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801917e:	699b      	ldr	r3, [r3, #24]
 8019180:	18d1      	adds	r1, r2, r3
 8019182:	68bb      	ldr	r3, [r7, #8]
 8019184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019188:	f7ff ff5c 	bl	8019044 <prvInsertTimerInActiveList>
 801918c:	4603      	mov	r3, r0
 801918e:	2b00      	cmp	r3, #0
 8019190:	d069      	beq.n	8019266 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019194:	6a1b      	ldr	r3, [r3, #32]
 8019196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019198:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801919c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191a0:	f003 0304 	and.w	r3, r3, #4
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d05e      	beq.n	8019266 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80191a8:	68ba      	ldr	r2, [r7, #8]
 80191aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ac:	699b      	ldr	r3, [r3, #24]
 80191ae:	441a      	add	r2, r3
 80191b0:	2300      	movs	r3, #0
 80191b2:	9300      	str	r3, [sp, #0]
 80191b4:	2300      	movs	r3, #0
 80191b6:	2100      	movs	r1, #0
 80191b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80191ba:	f7ff fe05 	bl	8018dc8 <xTimerGenericCommand>
 80191be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80191c0:	6a3b      	ldr	r3, [r7, #32]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d14f      	bne.n	8019266 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80191c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191ca:	f383 8811 	msr	BASEPRI, r3
 80191ce:	f3bf 8f6f 	isb	sy
 80191d2:	f3bf 8f4f 	dsb	sy
 80191d6:	61bb      	str	r3, [r7, #24]
}
 80191d8:	bf00      	nop
 80191da:	e7fe      	b.n	80191da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80191dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191e2:	f023 0301 	bic.w	r3, r3, #1
 80191e6:	b2da      	uxtb	r2, r3
 80191e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80191ee:	e03a      	b.n	8019266 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80191f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191f6:	f043 0301 	orr.w	r3, r3, #1
 80191fa:	b2da      	uxtb	r2, r3
 80191fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019202:	68ba      	ldr	r2, [r7, #8]
 8019204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019206:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801920a:	699b      	ldr	r3, [r3, #24]
 801920c:	2b00      	cmp	r3, #0
 801920e:	d10a      	bne.n	8019226 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019214:	f383 8811 	msr	BASEPRI, r3
 8019218:	f3bf 8f6f 	isb	sy
 801921c:	f3bf 8f4f 	dsb	sy
 8019220:	617b      	str	r3, [r7, #20]
}
 8019222:	bf00      	nop
 8019224:	e7fe      	b.n	8019224 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019228:	699a      	ldr	r2, [r3, #24]
 801922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801922c:	18d1      	adds	r1, r2, r3
 801922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019234:	f7ff ff06 	bl	8019044 <prvInsertTimerInActiveList>
					break;
 8019238:	e015      	b.n	8019266 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801923c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019240:	f003 0302 	and.w	r3, r3, #2
 8019244:	2b00      	cmp	r3, #0
 8019246:	d103      	bne.n	8019250 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801924a:	f000 fc01 	bl	8019a50 <vPortFree>
 801924e:	e00a      	b.n	8019266 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019256:	f023 0301 	bic.w	r3, r3, #1
 801925a:	b2da      	uxtb	r2, r3
 801925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801925e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019262:	e000      	b.n	8019266 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019264:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019266:	4b08      	ldr	r3, [pc, #32]	; (8019288 <prvProcessReceivedCommands+0x1c0>)
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	1d39      	adds	r1, r7, #4
 801926c:	2200      	movs	r2, #0
 801926e:	4618      	mov	r0, r3
 8019270:	f7fe fb4a 	bl	8017908 <xQueueReceive>
 8019274:	4603      	mov	r3, r0
 8019276:	2b00      	cmp	r3, #0
 8019278:	f47f af2a 	bne.w	80190d0 <prvProcessReceivedCommands+0x8>
	}
}
 801927c:	bf00      	nop
 801927e:	bf00      	nop
 8019280:	3730      	adds	r7, #48	; 0x30
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}
 8019286:	bf00      	nop
 8019288:	24002be8 	.word	0x24002be8

0801928c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801928c:	b580      	push	{r7, lr}
 801928e:	b088      	sub	sp, #32
 8019290:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019292:	e048      	b.n	8019326 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019294:	4b2d      	ldr	r3, [pc, #180]	; (801934c <prvSwitchTimerLists+0xc0>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	68db      	ldr	r3, [r3, #12]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801929e:	4b2b      	ldr	r3, [pc, #172]	; (801934c <prvSwitchTimerLists+0xc0>)
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	68db      	ldr	r3, [r3, #12]
 80192a4:	68db      	ldr	r3, [r3, #12]
 80192a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	3304      	adds	r3, #4
 80192ac:	4618      	mov	r0, r3
 80192ae:	f7fe f863 	bl	8017378 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	6a1b      	ldr	r3, [r3, #32]
 80192b6:	68f8      	ldr	r0, [r7, #12]
 80192b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80192c0:	f003 0304 	and.w	r3, r3, #4
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d02e      	beq.n	8019326 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	699b      	ldr	r3, [r3, #24]
 80192cc:	693a      	ldr	r2, [r7, #16]
 80192ce:	4413      	add	r3, r2
 80192d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80192d2:	68ba      	ldr	r2, [r7, #8]
 80192d4:	693b      	ldr	r3, [r7, #16]
 80192d6:	429a      	cmp	r2, r3
 80192d8:	d90e      	bls.n	80192f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	68ba      	ldr	r2, [r7, #8]
 80192de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	68fa      	ldr	r2, [r7, #12]
 80192e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80192e6:	4b19      	ldr	r3, [pc, #100]	; (801934c <prvSwitchTimerLists+0xc0>)
 80192e8:	681a      	ldr	r2, [r3, #0]
 80192ea:	68fb      	ldr	r3, [r7, #12]
 80192ec:	3304      	adds	r3, #4
 80192ee:	4619      	mov	r1, r3
 80192f0:	4610      	mov	r0, r2
 80192f2:	f7fe f808 	bl	8017306 <vListInsert>
 80192f6:	e016      	b.n	8019326 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80192f8:	2300      	movs	r3, #0
 80192fa:	9300      	str	r3, [sp, #0]
 80192fc:	2300      	movs	r3, #0
 80192fe:	693a      	ldr	r2, [r7, #16]
 8019300:	2100      	movs	r1, #0
 8019302:	68f8      	ldr	r0, [r7, #12]
 8019304:	f7ff fd60 	bl	8018dc8 <xTimerGenericCommand>
 8019308:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d10a      	bne.n	8019326 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019314:	f383 8811 	msr	BASEPRI, r3
 8019318:	f3bf 8f6f 	isb	sy
 801931c:	f3bf 8f4f 	dsb	sy
 8019320:	603b      	str	r3, [r7, #0]
}
 8019322:	bf00      	nop
 8019324:	e7fe      	b.n	8019324 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019326:	4b09      	ldr	r3, [pc, #36]	; (801934c <prvSwitchTimerLists+0xc0>)
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d1b1      	bne.n	8019294 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019330:	4b06      	ldr	r3, [pc, #24]	; (801934c <prvSwitchTimerLists+0xc0>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019336:	4b06      	ldr	r3, [pc, #24]	; (8019350 <prvSwitchTimerLists+0xc4>)
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	4a04      	ldr	r2, [pc, #16]	; (801934c <prvSwitchTimerLists+0xc0>)
 801933c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801933e:	4a04      	ldr	r2, [pc, #16]	; (8019350 <prvSwitchTimerLists+0xc4>)
 8019340:	697b      	ldr	r3, [r7, #20]
 8019342:	6013      	str	r3, [r2, #0]
}
 8019344:	bf00      	nop
 8019346:	3718      	adds	r7, #24
 8019348:	46bd      	mov	sp, r7
 801934a:	bd80      	pop	{r7, pc}
 801934c:	24002be0 	.word	0x24002be0
 8019350:	24002be4 	.word	0x24002be4

08019354 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019354:	b580      	push	{r7, lr}
 8019356:	b082      	sub	sp, #8
 8019358:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801935a:	f000 f98b 	bl	8019674 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801935e:	4b15      	ldr	r3, [pc, #84]	; (80193b4 <prvCheckForValidListAndQueue+0x60>)
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d120      	bne.n	80193a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019366:	4814      	ldr	r0, [pc, #80]	; (80193b8 <prvCheckForValidListAndQueue+0x64>)
 8019368:	f7fd ff7c 	bl	8017264 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801936c:	4813      	ldr	r0, [pc, #76]	; (80193bc <prvCheckForValidListAndQueue+0x68>)
 801936e:	f7fd ff79 	bl	8017264 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019372:	4b13      	ldr	r3, [pc, #76]	; (80193c0 <prvCheckForValidListAndQueue+0x6c>)
 8019374:	4a10      	ldr	r2, [pc, #64]	; (80193b8 <prvCheckForValidListAndQueue+0x64>)
 8019376:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019378:	4b12      	ldr	r3, [pc, #72]	; (80193c4 <prvCheckForValidListAndQueue+0x70>)
 801937a:	4a10      	ldr	r2, [pc, #64]	; (80193bc <prvCheckForValidListAndQueue+0x68>)
 801937c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801937e:	2300      	movs	r3, #0
 8019380:	9300      	str	r3, [sp, #0]
 8019382:	4b11      	ldr	r3, [pc, #68]	; (80193c8 <prvCheckForValidListAndQueue+0x74>)
 8019384:	4a11      	ldr	r2, [pc, #68]	; (80193cc <prvCheckForValidListAndQueue+0x78>)
 8019386:	2110      	movs	r1, #16
 8019388:	200a      	movs	r0, #10
 801938a:	f7fe f887 	bl	801749c <xQueueGenericCreateStatic>
 801938e:	4603      	mov	r3, r0
 8019390:	4a08      	ldr	r2, [pc, #32]	; (80193b4 <prvCheckForValidListAndQueue+0x60>)
 8019392:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019394:	4b07      	ldr	r3, [pc, #28]	; (80193b4 <prvCheckForValidListAndQueue+0x60>)
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	2b00      	cmp	r3, #0
 801939a:	d005      	beq.n	80193a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801939c:	4b05      	ldr	r3, [pc, #20]	; (80193b4 <prvCheckForValidListAndQueue+0x60>)
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	490b      	ldr	r1, [pc, #44]	; (80193d0 <prvCheckForValidListAndQueue+0x7c>)
 80193a2:	4618      	mov	r0, r3
 80193a4:	f7fe fca0 	bl	8017ce8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80193a8:	f000 f994 	bl	80196d4 <vPortExitCritical>
}
 80193ac:	bf00      	nop
 80193ae:	46bd      	mov	sp, r7
 80193b0:	bd80      	pop	{r7, pc}
 80193b2:	bf00      	nop
 80193b4:	24002be8 	.word	0x24002be8
 80193b8:	24002bb8 	.word	0x24002bb8
 80193bc:	24002bcc 	.word	0x24002bcc
 80193c0:	24002be0 	.word	0x24002be0
 80193c4:	24002be4 	.word	0x24002be4
 80193c8:	24002c94 	.word	0x24002c94
 80193cc:	24002bf4 	.word	0x24002bf4
 80193d0:	0801a980 	.word	0x0801a980

080193d4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b08a      	sub	sp, #40	; 0x28
 80193d8:	af00      	add	r7, sp, #0
 80193da:	60f8      	str	r0, [r7, #12]
 80193dc:	60b9      	str	r1, [r7, #8]
 80193de:	607a      	str	r2, [r7, #4]
 80193e0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80193e2:	f06f 0301 	mvn.w	r3, #1
 80193e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80193ec:	68bb      	ldr	r3, [r7, #8]
 80193ee:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80193f4:	4b06      	ldr	r3, [pc, #24]	; (8019410 <xTimerPendFunctionCallFromISR+0x3c>)
 80193f6:	6818      	ldr	r0, [r3, #0]
 80193f8:	f107 0114 	add.w	r1, r7, #20
 80193fc:	2300      	movs	r3, #0
 80193fe:	683a      	ldr	r2, [r7, #0]
 8019400:	f7fe f9e6 	bl	80177d0 <xQueueGenericSendFromISR>
 8019404:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8019406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019408:	4618      	mov	r0, r3
 801940a:	3728      	adds	r7, #40	; 0x28
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}
 8019410:	24002be8 	.word	0x24002be8

08019414 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019414:	b480      	push	{r7}
 8019416:	b085      	sub	sp, #20
 8019418:	af00      	add	r7, sp, #0
 801941a:	60f8      	str	r0, [r7, #12]
 801941c:	60b9      	str	r1, [r7, #8]
 801941e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	3b04      	subs	r3, #4
 8019424:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801942c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	3b04      	subs	r3, #4
 8019432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019434:	68bb      	ldr	r3, [r7, #8]
 8019436:	f023 0201 	bic.w	r2, r3, #1
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	3b04      	subs	r3, #4
 8019442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019444:	4a0c      	ldr	r2, [pc, #48]	; (8019478 <pxPortInitialiseStack+0x64>)
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	3b14      	subs	r3, #20
 801944e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019450:	687a      	ldr	r2, [r7, #4]
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	3b04      	subs	r3, #4
 801945a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	f06f 0202 	mvn.w	r2, #2
 8019462:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	3b20      	subs	r3, #32
 8019468:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801946a:	68fb      	ldr	r3, [r7, #12]
}
 801946c:	4618      	mov	r0, r3
 801946e:	3714      	adds	r7, #20
 8019470:	46bd      	mov	sp, r7
 8019472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019476:	4770      	bx	lr
 8019478:	0801947d 	.word	0x0801947d

0801947c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801947c:	b480      	push	{r7}
 801947e:	b085      	sub	sp, #20
 8019480:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019482:	2300      	movs	r3, #0
 8019484:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019486:	4b12      	ldr	r3, [pc, #72]	; (80194d0 <prvTaskExitError+0x54>)
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801948e:	d00a      	beq.n	80194a6 <prvTaskExitError+0x2a>
	__asm volatile
 8019490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019494:	f383 8811 	msr	BASEPRI, r3
 8019498:	f3bf 8f6f 	isb	sy
 801949c:	f3bf 8f4f 	dsb	sy
 80194a0:	60fb      	str	r3, [r7, #12]
}
 80194a2:	bf00      	nop
 80194a4:	e7fe      	b.n	80194a4 <prvTaskExitError+0x28>
	__asm volatile
 80194a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194aa:	f383 8811 	msr	BASEPRI, r3
 80194ae:	f3bf 8f6f 	isb	sy
 80194b2:	f3bf 8f4f 	dsb	sy
 80194b6:	60bb      	str	r3, [r7, #8]
}
 80194b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80194ba:	bf00      	nop
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d0fc      	beq.n	80194bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80194c2:	bf00      	nop
 80194c4:	bf00      	nop
 80194c6:	3714      	adds	r7, #20
 80194c8:	46bd      	mov	sp, r7
 80194ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ce:	4770      	bx	lr
 80194d0:	240000a0 	.word	0x240000a0
	...

080194e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80194e0:	4b07      	ldr	r3, [pc, #28]	; (8019500 <pxCurrentTCBConst2>)
 80194e2:	6819      	ldr	r1, [r3, #0]
 80194e4:	6808      	ldr	r0, [r1, #0]
 80194e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ea:	f380 8809 	msr	PSP, r0
 80194ee:	f3bf 8f6f 	isb	sy
 80194f2:	f04f 0000 	mov.w	r0, #0
 80194f6:	f380 8811 	msr	BASEPRI, r0
 80194fa:	4770      	bx	lr
 80194fc:	f3af 8000 	nop.w

08019500 <pxCurrentTCBConst2>:
 8019500:	240026b8 	.word	0x240026b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019504:	bf00      	nop
 8019506:	bf00      	nop

08019508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019508:	4808      	ldr	r0, [pc, #32]	; (801952c <prvPortStartFirstTask+0x24>)
 801950a:	6800      	ldr	r0, [r0, #0]
 801950c:	6800      	ldr	r0, [r0, #0]
 801950e:	f380 8808 	msr	MSP, r0
 8019512:	f04f 0000 	mov.w	r0, #0
 8019516:	f380 8814 	msr	CONTROL, r0
 801951a:	b662      	cpsie	i
 801951c:	b661      	cpsie	f
 801951e:	f3bf 8f4f 	dsb	sy
 8019522:	f3bf 8f6f 	isb	sy
 8019526:	df00      	svc	0
 8019528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801952a:	bf00      	nop
 801952c:	e000ed08 	.word	0xe000ed08

08019530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019530:	b580      	push	{r7, lr}
 8019532:	b086      	sub	sp, #24
 8019534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019536:	4b46      	ldr	r3, [pc, #280]	; (8019650 <xPortStartScheduler+0x120>)
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	4a46      	ldr	r2, [pc, #280]	; (8019654 <xPortStartScheduler+0x124>)
 801953c:	4293      	cmp	r3, r2
 801953e:	d10a      	bne.n	8019556 <xPortStartScheduler+0x26>
	__asm volatile
 8019540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019544:	f383 8811 	msr	BASEPRI, r3
 8019548:	f3bf 8f6f 	isb	sy
 801954c:	f3bf 8f4f 	dsb	sy
 8019550:	613b      	str	r3, [r7, #16]
}
 8019552:	bf00      	nop
 8019554:	e7fe      	b.n	8019554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019556:	4b3e      	ldr	r3, [pc, #248]	; (8019650 <xPortStartScheduler+0x120>)
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	4a3f      	ldr	r2, [pc, #252]	; (8019658 <xPortStartScheduler+0x128>)
 801955c:	4293      	cmp	r3, r2
 801955e:	d10a      	bne.n	8019576 <xPortStartScheduler+0x46>
	__asm volatile
 8019560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019564:	f383 8811 	msr	BASEPRI, r3
 8019568:	f3bf 8f6f 	isb	sy
 801956c:	f3bf 8f4f 	dsb	sy
 8019570:	60fb      	str	r3, [r7, #12]
}
 8019572:	bf00      	nop
 8019574:	e7fe      	b.n	8019574 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019576:	4b39      	ldr	r3, [pc, #228]	; (801965c <xPortStartScheduler+0x12c>)
 8019578:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801957a:	697b      	ldr	r3, [r7, #20]
 801957c:	781b      	ldrb	r3, [r3, #0]
 801957e:	b2db      	uxtb	r3, r3
 8019580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019582:	697b      	ldr	r3, [r7, #20]
 8019584:	22ff      	movs	r2, #255	; 0xff
 8019586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	781b      	ldrb	r3, [r3, #0]
 801958c:	b2db      	uxtb	r3, r3
 801958e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019590:	78fb      	ldrb	r3, [r7, #3]
 8019592:	b2db      	uxtb	r3, r3
 8019594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019598:	b2da      	uxtb	r2, r3
 801959a:	4b31      	ldr	r3, [pc, #196]	; (8019660 <xPortStartScheduler+0x130>)
 801959c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801959e:	4b31      	ldr	r3, [pc, #196]	; (8019664 <xPortStartScheduler+0x134>)
 80195a0:	2207      	movs	r2, #7
 80195a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80195a4:	e009      	b.n	80195ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80195a6:	4b2f      	ldr	r3, [pc, #188]	; (8019664 <xPortStartScheduler+0x134>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	3b01      	subs	r3, #1
 80195ac:	4a2d      	ldr	r2, [pc, #180]	; (8019664 <xPortStartScheduler+0x134>)
 80195ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80195b0:	78fb      	ldrb	r3, [r7, #3]
 80195b2:	b2db      	uxtb	r3, r3
 80195b4:	005b      	lsls	r3, r3, #1
 80195b6:	b2db      	uxtb	r3, r3
 80195b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80195ba:	78fb      	ldrb	r3, [r7, #3]
 80195bc:	b2db      	uxtb	r3, r3
 80195be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80195c2:	2b80      	cmp	r3, #128	; 0x80
 80195c4:	d0ef      	beq.n	80195a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80195c6:	4b27      	ldr	r3, [pc, #156]	; (8019664 <xPortStartScheduler+0x134>)
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	f1c3 0307 	rsb	r3, r3, #7
 80195ce:	2b04      	cmp	r3, #4
 80195d0:	d00a      	beq.n	80195e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80195d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195d6:	f383 8811 	msr	BASEPRI, r3
 80195da:	f3bf 8f6f 	isb	sy
 80195de:	f3bf 8f4f 	dsb	sy
 80195e2:	60bb      	str	r3, [r7, #8]
}
 80195e4:	bf00      	nop
 80195e6:	e7fe      	b.n	80195e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80195e8:	4b1e      	ldr	r3, [pc, #120]	; (8019664 <xPortStartScheduler+0x134>)
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	021b      	lsls	r3, r3, #8
 80195ee:	4a1d      	ldr	r2, [pc, #116]	; (8019664 <xPortStartScheduler+0x134>)
 80195f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80195f2:	4b1c      	ldr	r3, [pc, #112]	; (8019664 <xPortStartScheduler+0x134>)
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80195fa:	4a1a      	ldr	r2, [pc, #104]	; (8019664 <xPortStartScheduler+0x134>)
 80195fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	b2da      	uxtb	r2, r3
 8019602:	697b      	ldr	r3, [r7, #20]
 8019604:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019606:	4b18      	ldr	r3, [pc, #96]	; (8019668 <xPortStartScheduler+0x138>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	4a17      	ldr	r2, [pc, #92]	; (8019668 <xPortStartScheduler+0x138>)
 801960c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019612:	4b15      	ldr	r3, [pc, #84]	; (8019668 <xPortStartScheduler+0x138>)
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	4a14      	ldr	r2, [pc, #80]	; (8019668 <xPortStartScheduler+0x138>)
 8019618:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801961c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801961e:	f000 f8dd 	bl	80197dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019622:	4b12      	ldr	r3, [pc, #72]	; (801966c <xPortStartScheduler+0x13c>)
 8019624:	2200      	movs	r2, #0
 8019626:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019628:	f000 f8fc 	bl	8019824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801962c:	4b10      	ldr	r3, [pc, #64]	; (8019670 <xPortStartScheduler+0x140>)
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	4a0f      	ldr	r2, [pc, #60]	; (8019670 <xPortStartScheduler+0x140>)
 8019632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019636:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019638:	f7ff ff66 	bl	8019508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801963c:	f7fe ff6c 	bl	8018518 <vTaskSwitchContext>
	prvTaskExitError();
 8019640:	f7ff ff1c 	bl	801947c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019644:	2300      	movs	r3, #0
}
 8019646:	4618      	mov	r0, r3
 8019648:	3718      	adds	r7, #24
 801964a:	46bd      	mov	sp, r7
 801964c:	bd80      	pop	{r7, pc}
 801964e:	bf00      	nop
 8019650:	e000ed00 	.word	0xe000ed00
 8019654:	410fc271 	.word	0x410fc271
 8019658:	410fc270 	.word	0x410fc270
 801965c:	e000e400 	.word	0xe000e400
 8019660:	24002ce4 	.word	0x24002ce4
 8019664:	24002ce8 	.word	0x24002ce8
 8019668:	e000ed20 	.word	0xe000ed20
 801966c:	240000a0 	.word	0x240000a0
 8019670:	e000ef34 	.word	0xe000ef34

08019674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019674:	b480      	push	{r7}
 8019676:	b083      	sub	sp, #12
 8019678:	af00      	add	r7, sp, #0
	__asm volatile
 801967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801967e:	f383 8811 	msr	BASEPRI, r3
 8019682:	f3bf 8f6f 	isb	sy
 8019686:	f3bf 8f4f 	dsb	sy
 801968a:	607b      	str	r3, [r7, #4]
}
 801968c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801968e:	4b0f      	ldr	r3, [pc, #60]	; (80196cc <vPortEnterCritical+0x58>)
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	3301      	adds	r3, #1
 8019694:	4a0d      	ldr	r2, [pc, #52]	; (80196cc <vPortEnterCritical+0x58>)
 8019696:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019698:	4b0c      	ldr	r3, [pc, #48]	; (80196cc <vPortEnterCritical+0x58>)
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	2b01      	cmp	r3, #1
 801969e:	d10f      	bne.n	80196c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80196a0:	4b0b      	ldr	r3, [pc, #44]	; (80196d0 <vPortEnterCritical+0x5c>)
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	b2db      	uxtb	r3, r3
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d00a      	beq.n	80196c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80196aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196ae:	f383 8811 	msr	BASEPRI, r3
 80196b2:	f3bf 8f6f 	isb	sy
 80196b6:	f3bf 8f4f 	dsb	sy
 80196ba:	603b      	str	r3, [r7, #0]
}
 80196bc:	bf00      	nop
 80196be:	e7fe      	b.n	80196be <vPortEnterCritical+0x4a>
	}
}
 80196c0:	bf00      	nop
 80196c2:	370c      	adds	r7, #12
 80196c4:	46bd      	mov	sp, r7
 80196c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ca:	4770      	bx	lr
 80196cc:	240000a0 	.word	0x240000a0
 80196d0:	e000ed04 	.word	0xe000ed04

080196d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80196d4:	b480      	push	{r7}
 80196d6:	b083      	sub	sp, #12
 80196d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80196da:	4b12      	ldr	r3, [pc, #72]	; (8019724 <vPortExitCritical+0x50>)
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d10a      	bne.n	80196f8 <vPortExitCritical+0x24>
	__asm volatile
 80196e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196e6:	f383 8811 	msr	BASEPRI, r3
 80196ea:	f3bf 8f6f 	isb	sy
 80196ee:	f3bf 8f4f 	dsb	sy
 80196f2:	607b      	str	r3, [r7, #4]
}
 80196f4:	bf00      	nop
 80196f6:	e7fe      	b.n	80196f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80196f8:	4b0a      	ldr	r3, [pc, #40]	; (8019724 <vPortExitCritical+0x50>)
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	3b01      	subs	r3, #1
 80196fe:	4a09      	ldr	r2, [pc, #36]	; (8019724 <vPortExitCritical+0x50>)
 8019700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019702:	4b08      	ldr	r3, [pc, #32]	; (8019724 <vPortExitCritical+0x50>)
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d105      	bne.n	8019716 <vPortExitCritical+0x42>
 801970a:	2300      	movs	r3, #0
 801970c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	f383 8811 	msr	BASEPRI, r3
}
 8019714:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019716:	bf00      	nop
 8019718:	370c      	adds	r7, #12
 801971a:	46bd      	mov	sp, r7
 801971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019720:	4770      	bx	lr
 8019722:	bf00      	nop
 8019724:	240000a0 	.word	0x240000a0
	...

08019730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019730:	f3ef 8009 	mrs	r0, PSP
 8019734:	f3bf 8f6f 	isb	sy
 8019738:	4b15      	ldr	r3, [pc, #84]	; (8019790 <pxCurrentTCBConst>)
 801973a:	681a      	ldr	r2, [r3, #0]
 801973c:	f01e 0f10 	tst.w	lr, #16
 8019740:	bf08      	it	eq
 8019742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801974a:	6010      	str	r0, [r2, #0]
 801974c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019754:	f380 8811 	msr	BASEPRI, r0
 8019758:	f3bf 8f4f 	dsb	sy
 801975c:	f3bf 8f6f 	isb	sy
 8019760:	f7fe feda 	bl	8018518 <vTaskSwitchContext>
 8019764:	f04f 0000 	mov.w	r0, #0
 8019768:	f380 8811 	msr	BASEPRI, r0
 801976c:	bc09      	pop	{r0, r3}
 801976e:	6819      	ldr	r1, [r3, #0]
 8019770:	6808      	ldr	r0, [r1, #0]
 8019772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019776:	f01e 0f10 	tst.w	lr, #16
 801977a:	bf08      	it	eq
 801977c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019780:	f380 8809 	msr	PSP, r0
 8019784:	f3bf 8f6f 	isb	sy
 8019788:	4770      	bx	lr
 801978a:	bf00      	nop
 801978c:	f3af 8000 	nop.w

08019790 <pxCurrentTCBConst>:
 8019790:	240026b8 	.word	0x240026b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019794:	bf00      	nop
 8019796:	bf00      	nop

08019798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b082      	sub	sp, #8
 801979c:	af00      	add	r7, sp, #0
	__asm volatile
 801979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197a2:	f383 8811 	msr	BASEPRI, r3
 80197a6:	f3bf 8f6f 	isb	sy
 80197aa:	f3bf 8f4f 	dsb	sy
 80197ae:	607b      	str	r3, [r7, #4]
}
 80197b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80197b2:	f7fe fdef 	bl	8018394 <xTaskIncrementTick>
 80197b6:	4603      	mov	r3, r0
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d003      	beq.n	80197c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80197bc:	4b06      	ldr	r3, [pc, #24]	; (80197d8 <xPortSysTickHandler+0x40>)
 80197be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80197c2:	601a      	str	r2, [r3, #0]
 80197c4:	2300      	movs	r3, #0
 80197c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80197c8:	683b      	ldr	r3, [r7, #0]
 80197ca:	f383 8811 	msr	BASEPRI, r3
}
 80197ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80197d0:	bf00      	nop
 80197d2:	3708      	adds	r7, #8
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}
 80197d8:	e000ed04 	.word	0xe000ed04

080197dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80197dc:	b480      	push	{r7}
 80197de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80197e0:	4b0b      	ldr	r3, [pc, #44]	; (8019810 <vPortSetupTimerInterrupt+0x34>)
 80197e2:	2200      	movs	r2, #0
 80197e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80197e6:	4b0b      	ldr	r3, [pc, #44]	; (8019814 <vPortSetupTimerInterrupt+0x38>)
 80197e8:	2200      	movs	r2, #0
 80197ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80197ec:	4b0a      	ldr	r3, [pc, #40]	; (8019818 <vPortSetupTimerInterrupt+0x3c>)
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	4a0a      	ldr	r2, [pc, #40]	; (801981c <vPortSetupTimerInterrupt+0x40>)
 80197f2:	fba2 2303 	umull	r2, r3, r2, r3
 80197f6:	099b      	lsrs	r3, r3, #6
 80197f8:	4a09      	ldr	r2, [pc, #36]	; (8019820 <vPortSetupTimerInterrupt+0x44>)
 80197fa:	3b01      	subs	r3, #1
 80197fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80197fe:	4b04      	ldr	r3, [pc, #16]	; (8019810 <vPortSetupTimerInterrupt+0x34>)
 8019800:	2207      	movs	r2, #7
 8019802:	601a      	str	r2, [r3, #0]
}
 8019804:	bf00      	nop
 8019806:	46bd      	mov	sp, r7
 8019808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801980c:	4770      	bx	lr
 801980e:	bf00      	nop
 8019810:	e000e010 	.word	0xe000e010
 8019814:	e000e018 	.word	0xe000e018
 8019818:	24000090 	.word	0x24000090
 801981c:	10624dd3 	.word	0x10624dd3
 8019820:	e000e014 	.word	0xe000e014

08019824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019834 <vPortEnableVFP+0x10>
 8019828:	6801      	ldr	r1, [r0, #0]
 801982a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801982e:	6001      	str	r1, [r0, #0]
 8019830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019832:	bf00      	nop
 8019834:	e000ed88 	.word	0xe000ed88

08019838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019838:	b480      	push	{r7}
 801983a:	b085      	sub	sp, #20
 801983c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801983e:	f3ef 8305 	mrs	r3, IPSR
 8019842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	2b0f      	cmp	r3, #15
 8019848:	d914      	bls.n	8019874 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801984a:	4a17      	ldr	r2, [pc, #92]	; (80198a8 <vPortValidateInterruptPriority+0x70>)
 801984c:	68fb      	ldr	r3, [r7, #12]
 801984e:	4413      	add	r3, r2
 8019850:	781b      	ldrb	r3, [r3, #0]
 8019852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019854:	4b15      	ldr	r3, [pc, #84]	; (80198ac <vPortValidateInterruptPriority+0x74>)
 8019856:	781b      	ldrb	r3, [r3, #0]
 8019858:	7afa      	ldrb	r2, [r7, #11]
 801985a:	429a      	cmp	r2, r3
 801985c:	d20a      	bcs.n	8019874 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801985e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019862:	f383 8811 	msr	BASEPRI, r3
 8019866:	f3bf 8f6f 	isb	sy
 801986a:	f3bf 8f4f 	dsb	sy
 801986e:	607b      	str	r3, [r7, #4]
}
 8019870:	bf00      	nop
 8019872:	e7fe      	b.n	8019872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019874:	4b0e      	ldr	r3, [pc, #56]	; (80198b0 <vPortValidateInterruptPriority+0x78>)
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801987c:	4b0d      	ldr	r3, [pc, #52]	; (80198b4 <vPortValidateInterruptPriority+0x7c>)
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	429a      	cmp	r2, r3
 8019882:	d90a      	bls.n	801989a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019888:	f383 8811 	msr	BASEPRI, r3
 801988c:	f3bf 8f6f 	isb	sy
 8019890:	f3bf 8f4f 	dsb	sy
 8019894:	603b      	str	r3, [r7, #0]
}
 8019896:	bf00      	nop
 8019898:	e7fe      	b.n	8019898 <vPortValidateInterruptPriority+0x60>
	}
 801989a:	bf00      	nop
 801989c:	3714      	adds	r7, #20
 801989e:	46bd      	mov	sp, r7
 80198a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a4:	4770      	bx	lr
 80198a6:	bf00      	nop
 80198a8:	e000e3f0 	.word	0xe000e3f0
 80198ac:	24002ce4 	.word	0x24002ce4
 80198b0:	e000ed0c 	.word	0xe000ed0c
 80198b4:	24002ce8 	.word	0x24002ce8

080198b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80198b8:	b580      	push	{r7, lr}
 80198ba:	b08a      	sub	sp, #40	; 0x28
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80198c0:	2300      	movs	r3, #0
 80198c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80198c4:	f7fe fcaa 	bl	801821c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80198c8:	4b5b      	ldr	r3, [pc, #364]	; (8019a38 <pvPortMalloc+0x180>)
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d101      	bne.n	80198d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80198d0:	f000 f920 	bl	8019b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80198d4:	4b59      	ldr	r3, [pc, #356]	; (8019a3c <pvPortMalloc+0x184>)
 80198d6:	681a      	ldr	r2, [r3, #0]
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	4013      	ands	r3, r2
 80198dc:	2b00      	cmp	r3, #0
 80198de:	f040 8093 	bne.w	8019a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d01d      	beq.n	8019924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80198e8:	2208      	movs	r2, #8
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	4413      	add	r3, r2
 80198ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	f003 0307 	and.w	r3, r3, #7
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d014      	beq.n	8019924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	f023 0307 	bic.w	r3, r3, #7
 8019900:	3308      	adds	r3, #8
 8019902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	f003 0307 	and.w	r3, r3, #7
 801990a:	2b00      	cmp	r3, #0
 801990c:	d00a      	beq.n	8019924 <pvPortMalloc+0x6c>
	__asm volatile
 801990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019912:	f383 8811 	msr	BASEPRI, r3
 8019916:	f3bf 8f6f 	isb	sy
 801991a:	f3bf 8f4f 	dsb	sy
 801991e:	617b      	str	r3, [r7, #20]
}
 8019920:	bf00      	nop
 8019922:	e7fe      	b.n	8019922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	2b00      	cmp	r3, #0
 8019928:	d06e      	beq.n	8019a08 <pvPortMalloc+0x150>
 801992a:	4b45      	ldr	r3, [pc, #276]	; (8019a40 <pvPortMalloc+0x188>)
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	687a      	ldr	r2, [r7, #4]
 8019930:	429a      	cmp	r2, r3
 8019932:	d869      	bhi.n	8019a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019934:	4b43      	ldr	r3, [pc, #268]	; (8019a44 <pvPortMalloc+0x18c>)
 8019936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019938:	4b42      	ldr	r3, [pc, #264]	; (8019a44 <pvPortMalloc+0x18c>)
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801993e:	e004      	b.n	801994a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801994c:	685b      	ldr	r3, [r3, #4]
 801994e:	687a      	ldr	r2, [r7, #4]
 8019950:	429a      	cmp	r2, r3
 8019952:	d903      	bls.n	801995c <pvPortMalloc+0xa4>
 8019954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d1f1      	bne.n	8019940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801995c:	4b36      	ldr	r3, [pc, #216]	; (8019a38 <pvPortMalloc+0x180>)
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019962:	429a      	cmp	r2, r3
 8019964:	d050      	beq.n	8019a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019966:	6a3b      	ldr	r3, [r7, #32]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	2208      	movs	r2, #8
 801996c:	4413      	add	r3, r2
 801996e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019972:	681a      	ldr	r2, [r3, #0]
 8019974:	6a3b      	ldr	r3, [r7, #32]
 8019976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801997a:	685a      	ldr	r2, [r3, #4]
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	1ad2      	subs	r2, r2, r3
 8019980:	2308      	movs	r3, #8
 8019982:	005b      	lsls	r3, r3, #1
 8019984:	429a      	cmp	r2, r3
 8019986:	d91f      	bls.n	80199c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	4413      	add	r3, r2
 801998e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019990:	69bb      	ldr	r3, [r7, #24]
 8019992:	f003 0307 	and.w	r3, r3, #7
 8019996:	2b00      	cmp	r3, #0
 8019998:	d00a      	beq.n	80199b0 <pvPortMalloc+0xf8>
	__asm volatile
 801999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801999e:	f383 8811 	msr	BASEPRI, r3
 80199a2:	f3bf 8f6f 	isb	sy
 80199a6:	f3bf 8f4f 	dsb	sy
 80199aa:	613b      	str	r3, [r7, #16]
}
 80199ac:	bf00      	nop
 80199ae:	e7fe      	b.n	80199ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80199b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199b2:	685a      	ldr	r2, [r3, #4]
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	1ad2      	subs	r2, r2, r3
 80199b8:	69bb      	ldr	r3, [r7, #24]
 80199ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80199bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199be:	687a      	ldr	r2, [r7, #4]
 80199c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80199c2:	69b8      	ldr	r0, [r7, #24]
 80199c4:	f000 f908 	bl	8019bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80199c8:	4b1d      	ldr	r3, [pc, #116]	; (8019a40 <pvPortMalloc+0x188>)
 80199ca:	681a      	ldr	r2, [r3, #0]
 80199cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ce:	685b      	ldr	r3, [r3, #4]
 80199d0:	1ad3      	subs	r3, r2, r3
 80199d2:	4a1b      	ldr	r2, [pc, #108]	; (8019a40 <pvPortMalloc+0x188>)
 80199d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80199d6:	4b1a      	ldr	r3, [pc, #104]	; (8019a40 <pvPortMalloc+0x188>)
 80199d8:	681a      	ldr	r2, [r3, #0]
 80199da:	4b1b      	ldr	r3, [pc, #108]	; (8019a48 <pvPortMalloc+0x190>)
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	429a      	cmp	r2, r3
 80199e0:	d203      	bcs.n	80199ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80199e2:	4b17      	ldr	r3, [pc, #92]	; (8019a40 <pvPortMalloc+0x188>)
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	4a18      	ldr	r2, [pc, #96]	; (8019a48 <pvPortMalloc+0x190>)
 80199e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80199ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ec:	685a      	ldr	r2, [r3, #4]
 80199ee:	4b13      	ldr	r3, [pc, #76]	; (8019a3c <pvPortMalloc+0x184>)
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	431a      	orrs	r2, r3
 80199f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80199f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199fa:	2200      	movs	r2, #0
 80199fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80199fe:	4b13      	ldr	r3, [pc, #76]	; (8019a4c <pvPortMalloc+0x194>)
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	3301      	adds	r3, #1
 8019a04:	4a11      	ldr	r2, [pc, #68]	; (8019a4c <pvPortMalloc+0x194>)
 8019a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019a08:	f7fe fc16 	bl	8018238 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019a0c:	69fb      	ldr	r3, [r7, #28]
 8019a0e:	f003 0307 	and.w	r3, r3, #7
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d00a      	beq.n	8019a2c <pvPortMalloc+0x174>
	__asm volatile
 8019a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a1a:	f383 8811 	msr	BASEPRI, r3
 8019a1e:	f3bf 8f6f 	isb	sy
 8019a22:	f3bf 8f4f 	dsb	sy
 8019a26:	60fb      	str	r3, [r7, #12]
}
 8019a28:	bf00      	nop
 8019a2a:	e7fe      	b.n	8019a2a <pvPortMalloc+0x172>
	return pvReturn;
 8019a2c:	69fb      	ldr	r3, [r7, #28]
}
 8019a2e:	4618      	mov	r0, r3
 8019a30:	3728      	adds	r7, #40	; 0x28
 8019a32:	46bd      	mov	sp, r7
 8019a34:	bd80      	pop	{r7, pc}
 8019a36:	bf00      	nop
 8019a38:	240068f4 	.word	0x240068f4
 8019a3c:	24006908 	.word	0x24006908
 8019a40:	240068f8 	.word	0x240068f8
 8019a44:	240068ec 	.word	0x240068ec
 8019a48:	240068fc 	.word	0x240068fc
 8019a4c:	24006900 	.word	0x24006900

08019a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b086      	sub	sp, #24
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d04d      	beq.n	8019afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019a62:	2308      	movs	r3, #8
 8019a64:	425b      	negs	r3, r3
 8019a66:	697a      	ldr	r2, [r7, #20]
 8019a68:	4413      	add	r3, r2
 8019a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019a6c:	697b      	ldr	r3, [r7, #20]
 8019a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019a70:	693b      	ldr	r3, [r7, #16]
 8019a72:	685a      	ldr	r2, [r3, #4]
 8019a74:	4b24      	ldr	r3, [pc, #144]	; (8019b08 <vPortFree+0xb8>)
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	4013      	ands	r3, r2
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d10a      	bne.n	8019a94 <vPortFree+0x44>
	__asm volatile
 8019a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a82:	f383 8811 	msr	BASEPRI, r3
 8019a86:	f3bf 8f6f 	isb	sy
 8019a8a:	f3bf 8f4f 	dsb	sy
 8019a8e:	60fb      	str	r3, [r7, #12]
}
 8019a90:	bf00      	nop
 8019a92:	e7fe      	b.n	8019a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019a94:	693b      	ldr	r3, [r7, #16]
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d00a      	beq.n	8019ab2 <vPortFree+0x62>
	__asm volatile
 8019a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aa0:	f383 8811 	msr	BASEPRI, r3
 8019aa4:	f3bf 8f6f 	isb	sy
 8019aa8:	f3bf 8f4f 	dsb	sy
 8019aac:	60bb      	str	r3, [r7, #8]
}
 8019aae:	bf00      	nop
 8019ab0:	e7fe      	b.n	8019ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019ab2:	693b      	ldr	r3, [r7, #16]
 8019ab4:	685a      	ldr	r2, [r3, #4]
 8019ab6:	4b14      	ldr	r3, [pc, #80]	; (8019b08 <vPortFree+0xb8>)
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	4013      	ands	r3, r2
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d01e      	beq.n	8019afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019ac0:	693b      	ldr	r3, [r7, #16]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d11a      	bne.n	8019afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019ac8:	693b      	ldr	r3, [r7, #16]
 8019aca:	685a      	ldr	r2, [r3, #4]
 8019acc:	4b0e      	ldr	r3, [pc, #56]	; (8019b08 <vPortFree+0xb8>)
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	43db      	mvns	r3, r3
 8019ad2:	401a      	ands	r2, r3
 8019ad4:	693b      	ldr	r3, [r7, #16]
 8019ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019ad8:	f7fe fba0 	bl	801821c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019adc:	693b      	ldr	r3, [r7, #16]
 8019ade:	685a      	ldr	r2, [r3, #4]
 8019ae0:	4b0a      	ldr	r3, [pc, #40]	; (8019b0c <vPortFree+0xbc>)
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	4413      	add	r3, r2
 8019ae6:	4a09      	ldr	r2, [pc, #36]	; (8019b0c <vPortFree+0xbc>)
 8019ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019aea:	6938      	ldr	r0, [r7, #16]
 8019aec:	f000 f874 	bl	8019bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019af0:	4b07      	ldr	r3, [pc, #28]	; (8019b10 <vPortFree+0xc0>)
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	3301      	adds	r3, #1
 8019af6:	4a06      	ldr	r2, [pc, #24]	; (8019b10 <vPortFree+0xc0>)
 8019af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019afa:	f7fe fb9d 	bl	8018238 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019afe:	bf00      	nop
 8019b00:	3718      	adds	r7, #24
 8019b02:	46bd      	mov	sp, r7
 8019b04:	bd80      	pop	{r7, pc}
 8019b06:	bf00      	nop
 8019b08:	24006908 	.word	0x24006908
 8019b0c:	240068f8 	.word	0x240068f8
 8019b10:	24006904 	.word	0x24006904

08019b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019b14:	b480      	push	{r7}
 8019b16:	b085      	sub	sp, #20
 8019b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019b1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019b20:	4b27      	ldr	r3, [pc, #156]	; (8019bc0 <prvHeapInit+0xac>)
 8019b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	f003 0307 	and.w	r3, r3, #7
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d00c      	beq.n	8019b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	3307      	adds	r3, #7
 8019b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	f023 0307 	bic.w	r3, r3, #7
 8019b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019b3c:	68ba      	ldr	r2, [r7, #8]
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	1ad3      	subs	r3, r2, r3
 8019b42:	4a1f      	ldr	r2, [pc, #124]	; (8019bc0 <prvHeapInit+0xac>)
 8019b44:	4413      	add	r3, r2
 8019b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019b4c:	4a1d      	ldr	r2, [pc, #116]	; (8019bc4 <prvHeapInit+0xb0>)
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019b52:	4b1c      	ldr	r3, [pc, #112]	; (8019bc4 <prvHeapInit+0xb0>)
 8019b54:	2200      	movs	r2, #0
 8019b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	68ba      	ldr	r2, [r7, #8]
 8019b5c:	4413      	add	r3, r2
 8019b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019b60:	2208      	movs	r2, #8
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	1a9b      	subs	r3, r3, r2
 8019b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	f023 0307 	bic.w	r3, r3, #7
 8019b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	4a15      	ldr	r2, [pc, #84]	; (8019bc8 <prvHeapInit+0xb4>)
 8019b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019b76:	4b14      	ldr	r3, [pc, #80]	; (8019bc8 <prvHeapInit+0xb4>)
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	2200      	movs	r2, #0
 8019b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019b7e:	4b12      	ldr	r3, [pc, #72]	; (8019bc8 <prvHeapInit+0xb4>)
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	2200      	movs	r2, #0
 8019b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	68fa      	ldr	r2, [r7, #12]
 8019b8e:	1ad2      	subs	r2, r2, r3
 8019b90:	683b      	ldr	r3, [r7, #0]
 8019b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019b94:	4b0c      	ldr	r3, [pc, #48]	; (8019bc8 <prvHeapInit+0xb4>)
 8019b96:	681a      	ldr	r2, [r3, #0]
 8019b98:	683b      	ldr	r3, [r7, #0]
 8019b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019b9c:	683b      	ldr	r3, [r7, #0]
 8019b9e:	685b      	ldr	r3, [r3, #4]
 8019ba0:	4a0a      	ldr	r2, [pc, #40]	; (8019bcc <prvHeapInit+0xb8>)
 8019ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019ba4:	683b      	ldr	r3, [r7, #0]
 8019ba6:	685b      	ldr	r3, [r3, #4]
 8019ba8:	4a09      	ldr	r2, [pc, #36]	; (8019bd0 <prvHeapInit+0xbc>)
 8019baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019bac:	4b09      	ldr	r3, [pc, #36]	; (8019bd4 <prvHeapInit+0xc0>)
 8019bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019bb2:	601a      	str	r2, [r3, #0]
}
 8019bb4:	bf00      	nop
 8019bb6:	3714      	adds	r7, #20
 8019bb8:	46bd      	mov	sp, r7
 8019bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bbe:	4770      	bx	lr
 8019bc0:	24002cec 	.word	0x24002cec
 8019bc4:	240068ec 	.word	0x240068ec
 8019bc8:	240068f4 	.word	0x240068f4
 8019bcc:	240068fc 	.word	0x240068fc
 8019bd0:	240068f8 	.word	0x240068f8
 8019bd4:	24006908 	.word	0x24006908

08019bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019bd8:	b480      	push	{r7}
 8019bda:	b085      	sub	sp, #20
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019be0:	4b28      	ldr	r3, [pc, #160]	; (8019c84 <prvInsertBlockIntoFreeList+0xac>)
 8019be2:	60fb      	str	r3, [r7, #12]
 8019be4:	e002      	b.n	8019bec <prvInsertBlockIntoFreeList+0x14>
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	60fb      	str	r3, [r7, #12]
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	687a      	ldr	r2, [r7, #4]
 8019bf2:	429a      	cmp	r2, r3
 8019bf4:	d8f7      	bhi.n	8019be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019bf6:	68fb      	ldr	r3, [r7, #12]
 8019bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	685b      	ldr	r3, [r3, #4]
 8019bfe:	68ba      	ldr	r2, [r7, #8]
 8019c00:	4413      	add	r3, r2
 8019c02:	687a      	ldr	r2, [r7, #4]
 8019c04:	429a      	cmp	r2, r3
 8019c06:	d108      	bne.n	8019c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	685a      	ldr	r2, [r3, #4]
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	685b      	ldr	r3, [r3, #4]
 8019c10:	441a      	add	r2, r3
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	685b      	ldr	r3, [r3, #4]
 8019c22:	68ba      	ldr	r2, [r7, #8]
 8019c24:	441a      	add	r2, r3
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	429a      	cmp	r2, r3
 8019c2c:	d118      	bne.n	8019c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	681a      	ldr	r2, [r3, #0]
 8019c32:	4b15      	ldr	r3, [pc, #84]	; (8019c88 <prvInsertBlockIntoFreeList+0xb0>)
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	429a      	cmp	r2, r3
 8019c38:	d00d      	beq.n	8019c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	685a      	ldr	r2, [r3, #4]
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	685b      	ldr	r3, [r3, #4]
 8019c44:	441a      	add	r2, r3
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	681a      	ldr	r2, [r3, #0]
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	601a      	str	r2, [r3, #0]
 8019c54:	e008      	b.n	8019c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019c56:	4b0c      	ldr	r3, [pc, #48]	; (8019c88 <prvInsertBlockIntoFreeList+0xb0>)
 8019c58:	681a      	ldr	r2, [r3, #0]
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	601a      	str	r2, [r3, #0]
 8019c5e:	e003      	b.n	8019c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	681a      	ldr	r2, [r3, #0]
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019c68:	68fa      	ldr	r2, [r7, #12]
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	429a      	cmp	r2, r3
 8019c6e:	d002      	beq.n	8019c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	687a      	ldr	r2, [r7, #4]
 8019c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019c76:	bf00      	nop
 8019c78:	3714      	adds	r7, #20
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c80:	4770      	bx	lr
 8019c82:	bf00      	nop
 8019c84:	240068ec 	.word	0x240068ec
 8019c88:	240068f4 	.word	0x240068f4

08019c8c <__errno>:
 8019c8c:	4b01      	ldr	r3, [pc, #4]	; (8019c94 <__errno+0x8>)
 8019c8e:	6818      	ldr	r0, [r3, #0]
 8019c90:	4770      	bx	lr
 8019c92:	bf00      	nop
 8019c94:	240000a4 	.word	0x240000a4

08019c98 <__libc_init_array>:
 8019c98:	b570      	push	{r4, r5, r6, lr}
 8019c9a:	4d0d      	ldr	r5, [pc, #52]	; (8019cd0 <__libc_init_array+0x38>)
 8019c9c:	4c0d      	ldr	r4, [pc, #52]	; (8019cd4 <__libc_init_array+0x3c>)
 8019c9e:	1b64      	subs	r4, r4, r5
 8019ca0:	10a4      	asrs	r4, r4, #2
 8019ca2:	2600      	movs	r6, #0
 8019ca4:	42a6      	cmp	r6, r4
 8019ca6:	d109      	bne.n	8019cbc <__libc_init_array+0x24>
 8019ca8:	4d0b      	ldr	r5, [pc, #44]	; (8019cd8 <__libc_init_array+0x40>)
 8019caa:	4c0c      	ldr	r4, [pc, #48]	; (8019cdc <__libc_init_array+0x44>)
 8019cac:	f000 fd2c 	bl	801a708 <_init>
 8019cb0:	1b64      	subs	r4, r4, r5
 8019cb2:	10a4      	asrs	r4, r4, #2
 8019cb4:	2600      	movs	r6, #0
 8019cb6:	42a6      	cmp	r6, r4
 8019cb8:	d105      	bne.n	8019cc6 <__libc_init_array+0x2e>
 8019cba:	bd70      	pop	{r4, r5, r6, pc}
 8019cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cc0:	4798      	blx	r3
 8019cc2:	3601      	adds	r6, #1
 8019cc4:	e7ee      	b.n	8019ca4 <__libc_init_array+0xc>
 8019cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cca:	4798      	blx	r3
 8019ccc:	3601      	adds	r6, #1
 8019cce:	e7f2      	b.n	8019cb6 <__libc_init_array+0x1e>
 8019cd0:	0801abc0 	.word	0x0801abc0
 8019cd4:	0801abc0 	.word	0x0801abc0
 8019cd8:	0801abc0 	.word	0x0801abc0
 8019cdc:	0801abc4 	.word	0x0801abc4

08019ce0 <memcpy>:
 8019ce0:	440a      	add	r2, r1
 8019ce2:	4291      	cmp	r1, r2
 8019ce4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019ce8:	d100      	bne.n	8019cec <memcpy+0xc>
 8019cea:	4770      	bx	lr
 8019cec:	b510      	push	{r4, lr}
 8019cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019cf6:	4291      	cmp	r1, r2
 8019cf8:	d1f9      	bne.n	8019cee <memcpy+0xe>
 8019cfa:	bd10      	pop	{r4, pc}

08019cfc <memset>:
 8019cfc:	4402      	add	r2, r0
 8019cfe:	4603      	mov	r3, r0
 8019d00:	4293      	cmp	r3, r2
 8019d02:	d100      	bne.n	8019d06 <memset+0xa>
 8019d04:	4770      	bx	lr
 8019d06:	f803 1b01 	strb.w	r1, [r3], #1
 8019d0a:	e7f9      	b.n	8019d00 <memset+0x4>

08019d0c <_puts_r>:
 8019d0c:	b570      	push	{r4, r5, r6, lr}
 8019d0e:	460e      	mov	r6, r1
 8019d10:	4605      	mov	r5, r0
 8019d12:	b118      	cbz	r0, 8019d1c <_puts_r+0x10>
 8019d14:	6983      	ldr	r3, [r0, #24]
 8019d16:	b90b      	cbnz	r3, 8019d1c <_puts_r+0x10>
 8019d18:	f000 fa48 	bl	801a1ac <__sinit>
 8019d1c:	69ab      	ldr	r3, [r5, #24]
 8019d1e:	68ac      	ldr	r4, [r5, #8]
 8019d20:	b913      	cbnz	r3, 8019d28 <_puts_r+0x1c>
 8019d22:	4628      	mov	r0, r5
 8019d24:	f000 fa42 	bl	801a1ac <__sinit>
 8019d28:	4b2c      	ldr	r3, [pc, #176]	; (8019ddc <_puts_r+0xd0>)
 8019d2a:	429c      	cmp	r4, r3
 8019d2c:	d120      	bne.n	8019d70 <_puts_r+0x64>
 8019d2e:	686c      	ldr	r4, [r5, #4]
 8019d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d32:	07db      	lsls	r3, r3, #31
 8019d34:	d405      	bmi.n	8019d42 <_puts_r+0x36>
 8019d36:	89a3      	ldrh	r3, [r4, #12]
 8019d38:	0598      	lsls	r0, r3, #22
 8019d3a:	d402      	bmi.n	8019d42 <_puts_r+0x36>
 8019d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d3e:	f000 fad3 	bl	801a2e8 <__retarget_lock_acquire_recursive>
 8019d42:	89a3      	ldrh	r3, [r4, #12]
 8019d44:	0719      	lsls	r1, r3, #28
 8019d46:	d51d      	bpl.n	8019d84 <_puts_r+0x78>
 8019d48:	6923      	ldr	r3, [r4, #16]
 8019d4a:	b1db      	cbz	r3, 8019d84 <_puts_r+0x78>
 8019d4c:	3e01      	subs	r6, #1
 8019d4e:	68a3      	ldr	r3, [r4, #8]
 8019d50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019d54:	3b01      	subs	r3, #1
 8019d56:	60a3      	str	r3, [r4, #8]
 8019d58:	bb39      	cbnz	r1, 8019daa <_puts_r+0x9e>
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	da38      	bge.n	8019dd0 <_puts_r+0xc4>
 8019d5e:	4622      	mov	r2, r4
 8019d60:	210a      	movs	r1, #10
 8019d62:	4628      	mov	r0, r5
 8019d64:	f000 f848 	bl	8019df8 <__swbuf_r>
 8019d68:	3001      	adds	r0, #1
 8019d6a:	d011      	beq.n	8019d90 <_puts_r+0x84>
 8019d6c:	250a      	movs	r5, #10
 8019d6e:	e011      	b.n	8019d94 <_puts_r+0x88>
 8019d70:	4b1b      	ldr	r3, [pc, #108]	; (8019de0 <_puts_r+0xd4>)
 8019d72:	429c      	cmp	r4, r3
 8019d74:	d101      	bne.n	8019d7a <_puts_r+0x6e>
 8019d76:	68ac      	ldr	r4, [r5, #8]
 8019d78:	e7da      	b.n	8019d30 <_puts_r+0x24>
 8019d7a:	4b1a      	ldr	r3, [pc, #104]	; (8019de4 <_puts_r+0xd8>)
 8019d7c:	429c      	cmp	r4, r3
 8019d7e:	bf08      	it	eq
 8019d80:	68ec      	ldreq	r4, [r5, #12]
 8019d82:	e7d5      	b.n	8019d30 <_puts_r+0x24>
 8019d84:	4621      	mov	r1, r4
 8019d86:	4628      	mov	r0, r5
 8019d88:	f000 f888 	bl	8019e9c <__swsetup_r>
 8019d8c:	2800      	cmp	r0, #0
 8019d8e:	d0dd      	beq.n	8019d4c <_puts_r+0x40>
 8019d90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d96:	07da      	lsls	r2, r3, #31
 8019d98:	d405      	bmi.n	8019da6 <_puts_r+0x9a>
 8019d9a:	89a3      	ldrh	r3, [r4, #12]
 8019d9c:	059b      	lsls	r3, r3, #22
 8019d9e:	d402      	bmi.n	8019da6 <_puts_r+0x9a>
 8019da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019da2:	f000 faa2 	bl	801a2ea <__retarget_lock_release_recursive>
 8019da6:	4628      	mov	r0, r5
 8019da8:	bd70      	pop	{r4, r5, r6, pc}
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	da04      	bge.n	8019db8 <_puts_r+0xac>
 8019dae:	69a2      	ldr	r2, [r4, #24]
 8019db0:	429a      	cmp	r2, r3
 8019db2:	dc06      	bgt.n	8019dc2 <_puts_r+0xb6>
 8019db4:	290a      	cmp	r1, #10
 8019db6:	d004      	beq.n	8019dc2 <_puts_r+0xb6>
 8019db8:	6823      	ldr	r3, [r4, #0]
 8019dba:	1c5a      	adds	r2, r3, #1
 8019dbc:	6022      	str	r2, [r4, #0]
 8019dbe:	7019      	strb	r1, [r3, #0]
 8019dc0:	e7c5      	b.n	8019d4e <_puts_r+0x42>
 8019dc2:	4622      	mov	r2, r4
 8019dc4:	4628      	mov	r0, r5
 8019dc6:	f000 f817 	bl	8019df8 <__swbuf_r>
 8019dca:	3001      	adds	r0, #1
 8019dcc:	d1bf      	bne.n	8019d4e <_puts_r+0x42>
 8019dce:	e7df      	b.n	8019d90 <_puts_r+0x84>
 8019dd0:	6823      	ldr	r3, [r4, #0]
 8019dd2:	250a      	movs	r5, #10
 8019dd4:	1c5a      	adds	r2, r3, #1
 8019dd6:	6022      	str	r2, [r4, #0]
 8019dd8:	701d      	strb	r5, [r3, #0]
 8019dda:	e7db      	b.n	8019d94 <_puts_r+0x88>
 8019ddc:	0801ab78 	.word	0x0801ab78
 8019de0:	0801ab98 	.word	0x0801ab98
 8019de4:	0801ab58 	.word	0x0801ab58

08019de8 <puts>:
 8019de8:	4b02      	ldr	r3, [pc, #8]	; (8019df4 <puts+0xc>)
 8019dea:	4601      	mov	r1, r0
 8019dec:	6818      	ldr	r0, [r3, #0]
 8019dee:	f7ff bf8d 	b.w	8019d0c <_puts_r>
 8019df2:	bf00      	nop
 8019df4:	240000a4 	.word	0x240000a4

08019df8 <__swbuf_r>:
 8019df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dfa:	460e      	mov	r6, r1
 8019dfc:	4614      	mov	r4, r2
 8019dfe:	4605      	mov	r5, r0
 8019e00:	b118      	cbz	r0, 8019e0a <__swbuf_r+0x12>
 8019e02:	6983      	ldr	r3, [r0, #24]
 8019e04:	b90b      	cbnz	r3, 8019e0a <__swbuf_r+0x12>
 8019e06:	f000 f9d1 	bl	801a1ac <__sinit>
 8019e0a:	4b21      	ldr	r3, [pc, #132]	; (8019e90 <__swbuf_r+0x98>)
 8019e0c:	429c      	cmp	r4, r3
 8019e0e:	d12b      	bne.n	8019e68 <__swbuf_r+0x70>
 8019e10:	686c      	ldr	r4, [r5, #4]
 8019e12:	69a3      	ldr	r3, [r4, #24]
 8019e14:	60a3      	str	r3, [r4, #8]
 8019e16:	89a3      	ldrh	r3, [r4, #12]
 8019e18:	071a      	lsls	r2, r3, #28
 8019e1a:	d52f      	bpl.n	8019e7c <__swbuf_r+0x84>
 8019e1c:	6923      	ldr	r3, [r4, #16]
 8019e1e:	b36b      	cbz	r3, 8019e7c <__swbuf_r+0x84>
 8019e20:	6923      	ldr	r3, [r4, #16]
 8019e22:	6820      	ldr	r0, [r4, #0]
 8019e24:	1ac0      	subs	r0, r0, r3
 8019e26:	6963      	ldr	r3, [r4, #20]
 8019e28:	b2f6      	uxtb	r6, r6
 8019e2a:	4283      	cmp	r3, r0
 8019e2c:	4637      	mov	r7, r6
 8019e2e:	dc04      	bgt.n	8019e3a <__swbuf_r+0x42>
 8019e30:	4621      	mov	r1, r4
 8019e32:	4628      	mov	r0, r5
 8019e34:	f000 f926 	bl	801a084 <_fflush_r>
 8019e38:	bb30      	cbnz	r0, 8019e88 <__swbuf_r+0x90>
 8019e3a:	68a3      	ldr	r3, [r4, #8]
 8019e3c:	3b01      	subs	r3, #1
 8019e3e:	60a3      	str	r3, [r4, #8]
 8019e40:	6823      	ldr	r3, [r4, #0]
 8019e42:	1c5a      	adds	r2, r3, #1
 8019e44:	6022      	str	r2, [r4, #0]
 8019e46:	701e      	strb	r6, [r3, #0]
 8019e48:	6963      	ldr	r3, [r4, #20]
 8019e4a:	3001      	adds	r0, #1
 8019e4c:	4283      	cmp	r3, r0
 8019e4e:	d004      	beq.n	8019e5a <__swbuf_r+0x62>
 8019e50:	89a3      	ldrh	r3, [r4, #12]
 8019e52:	07db      	lsls	r3, r3, #31
 8019e54:	d506      	bpl.n	8019e64 <__swbuf_r+0x6c>
 8019e56:	2e0a      	cmp	r6, #10
 8019e58:	d104      	bne.n	8019e64 <__swbuf_r+0x6c>
 8019e5a:	4621      	mov	r1, r4
 8019e5c:	4628      	mov	r0, r5
 8019e5e:	f000 f911 	bl	801a084 <_fflush_r>
 8019e62:	b988      	cbnz	r0, 8019e88 <__swbuf_r+0x90>
 8019e64:	4638      	mov	r0, r7
 8019e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e68:	4b0a      	ldr	r3, [pc, #40]	; (8019e94 <__swbuf_r+0x9c>)
 8019e6a:	429c      	cmp	r4, r3
 8019e6c:	d101      	bne.n	8019e72 <__swbuf_r+0x7a>
 8019e6e:	68ac      	ldr	r4, [r5, #8]
 8019e70:	e7cf      	b.n	8019e12 <__swbuf_r+0x1a>
 8019e72:	4b09      	ldr	r3, [pc, #36]	; (8019e98 <__swbuf_r+0xa0>)
 8019e74:	429c      	cmp	r4, r3
 8019e76:	bf08      	it	eq
 8019e78:	68ec      	ldreq	r4, [r5, #12]
 8019e7a:	e7ca      	b.n	8019e12 <__swbuf_r+0x1a>
 8019e7c:	4621      	mov	r1, r4
 8019e7e:	4628      	mov	r0, r5
 8019e80:	f000 f80c 	bl	8019e9c <__swsetup_r>
 8019e84:	2800      	cmp	r0, #0
 8019e86:	d0cb      	beq.n	8019e20 <__swbuf_r+0x28>
 8019e88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019e8c:	e7ea      	b.n	8019e64 <__swbuf_r+0x6c>
 8019e8e:	bf00      	nop
 8019e90:	0801ab78 	.word	0x0801ab78
 8019e94:	0801ab98 	.word	0x0801ab98
 8019e98:	0801ab58 	.word	0x0801ab58

08019e9c <__swsetup_r>:
 8019e9c:	4b32      	ldr	r3, [pc, #200]	; (8019f68 <__swsetup_r+0xcc>)
 8019e9e:	b570      	push	{r4, r5, r6, lr}
 8019ea0:	681d      	ldr	r5, [r3, #0]
 8019ea2:	4606      	mov	r6, r0
 8019ea4:	460c      	mov	r4, r1
 8019ea6:	b125      	cbz	r5, 8019eb2 <__swsetup_r+0x16>
 8019ea8:	69ab      	ldr	r3, [r5, #24]
 8019eaa:	b913      	cbnz	r3, 8019eb2 <__swsetup_r+0x16>
 8019eac:	4628      	mov	r0, r5
 8019eae:	f000 f97d 	bl	801a1ac <__sinit>
 8019eb2:	4b2e      	ldr	r3, [pc, #184]	; (8019f6c <__swsetup_r+0xd0>)
 8019eb4:	429c      	cmp	r4, r3
 8019eb6:	d10f      	bne.n	8019ed8 <__swsetup_r+0x3c>
 8019eb8:	686c      	ldr	r4, [r5, #4]
 8019eba:	89a3      	ldrh	r3, [r4, #12]
 8019ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ec0:	0719      	lsls	r1, r3, #28
 8019ec2:	d42c      	bmi.n	8019f1e <__swsetup_r+0x82>
 8019ec4:	06dd      	lsls	r5, r3, #27
 8019ec6:	d411      	bmi.n	8019eec <__swsetup_r+0x50>
 8019ec8:	2309      	movs	r3, #9
 8019eca:	6033      	str	r3, [r6, #0]
 8019ecc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019ed0:	81a3      	strh	r3, [r4, #12]
 8019ed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ed6:	e03e      	b.n	8019f56 <__swsetup_r+0xba>
 8019ed8:	4b25      	ldr	r3, [pc, #148]	; (8019f70 <__swsetup_r+0xd4>)
 8019eda:	429c      	cmp	r4, r3
 8019edc:	d101      	bne.n	8019ee2 <__swsetup_r+0x46>
 8019ede:	68ac      	ldr	r4, [r5, #8]
 8019ee0:	e7eb      	b.n	8019eba <__swsetup_r+0x1e>
 8019ee2:	4b24      	ldr	r3, [pc, #144]	; (8019f74 <__swsetup_r+0xd8>)
 8019ee4:	429c      	cmp	r4, r3
 8019ee6:	bf08      	it	eq
 8019ee8:	68ec      	ldreq	r4, [r5, #12]
 8019eea:	e7e6      	b.n	8019eba <__swsetup_r+0x1e>
 8019eec:	0758      	lsls	r0, r3, #29
 8019eee:	d512      	bpl.n	8019f16 <__swsetup_r+0x7a>
 8019ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ef2:	b141      	cbz	r1, 8019f06 <__swsetup_r+0x6a>
 8019ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ef8:	4299      	cmp	r1, r3
 8019efa:	d002      	beq.n	8019f02 <__swsetup_r+0x66>
 8019efc:	4630      	mov	r0, r6
 8019efe:	f000 fa5b 	bl	801a3b8 <_free_r>
 8019f02:	2300      	movs	r3, #0
 8019f04:	6363      	str	r3, [r4, #52]	; 0x34
 8019f06:	89a3      	ldrh	r3, [r4, #12]
 8019f08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019f0c:	81a3      	strh	r3, [r4, #12]
 8019f0e:	2300      	movs	r3, #0
 8019f10:	6063      	str	r3, [r4, #4]
 8019f12:	6923      	ldr	r3, [r4, #16]
 8019f14:	6023      	str	r3, [r4, #0]
 8019f16:	89a3      	ldrh	r3, [r4, #12]
 8019f18:	f043 0308 	orr.w	r3, r3, #8
 8019f1c:	81a3      	strh	r3, [r4, #12]
 8019f1e:	6923      	ldr	r3, [r4, #16]
 8019f20:	b94b      	cbnz	r3, 8019f36 <__swsetup_r+0x9a>
 8019f22:	89a3      	ldrh	r3, [r4, #12]
 8019f24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019f2c:	d003      	beq.n	8019f36 <__swsetup_r+0x9a>
 8019f2e:	4621      	mov	r1, r4
 8019f30:	4630      	mov	r0, r6
 8019f32:	f000 fa01 	bl	801a338 <__smakebuf_r>
 8019f36:	89a0      	ldrh	r0, [r4, #12]
 8019f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019f3c:	f010 0301 	ands.w	r3, r0, #1
 8019f40:	d00a      	beq.n	8019f58 <__swsetup_r+0xbc>
 8019f42:	2300      	movs	r3, #0
 8019f44:	60a3      	str	r3, [r4, #8]
 8019f46:	6963      	ldr	r3, [r4, #20]
 8019f48:	425b      	negs	r3, r3
 8019f4a:	61a3      	str	r3, [r4, #24]
 8019f4c:	6923      	ldr	r3, [r4, #16]
 8019f4e:	b943      	cbnz	r3, 8019f62 <__swsetup_r+0xc6>
 8019f50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019f54:	d1ba      	bne.n	8019ecc <__swsetup_r+0x30>
 8019f56:	bd70      	pop	{r4, r5, r6, pc}
 8019f58:	0781      	lsls	r1, r0, #30
 8019f5a:	bf58      	it	pl
 8019f5c:	6963      	ldrpl	r3, [r4, #20]
 8019f5e:	60a3      	str	r3, [r4, #8]
 8019f60:	e7f4      	b.n	8019f4c <__swsetup_r+0xb0>
 8019f62:	2000      	movs	r0, #0
 8019f64:	e7f7      	b.n	8019f56 <__swsetup_r+0xba>
 8019f66:	bf00      	nop
 8019f68:	240000a4 	.word	0x240000a4
 8019f6c:	0801ab78 	.word	0x0801ab78
 8019f70:	0801ab98 	.word	0x0801ab98
 8019f74:	0801ab58 	.word	0x0801ab58

08019f78 <__sflush_r>:
 8019f78:	898a      	ldrh	r2, [r1, #12]
 8019f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f7e:	4605      	mov	r5, r0
 8019f80:	0710      	lsls	r0, r2, #28
 8019f82:	460c      	mov	r4, r1
 8019f84:	d458      	bmi.n	801a038 <__sflush_r+0xc0>
 8019f86:	684b      	ldr	r3, [r1, #4]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	dc05      	bgt.n	8019f98 <__sflush_r+0x20>
 8019f8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	dc02      	bgt.n	8019f98 <__sflush_r+0x20>
 8019f92:	2000      	movs	r0, #0
 8019f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019f9a:	2e00      	cmp	r6, #0
 8019f9c:	d0f9      	beq.n	8019f92 <__sflush_r+0x1a>
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019fa4:	682f      	ldr	r7, [r5, #0]
 8019fa6:	602b      	str	r3, [r5, #0]
 8019fa8:	d032      	beq.n	801a010 <__sflush_r+0x98>
 8019faa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019fac:	89a3      	ldrh	r3, [r4, #12]
 8019fae:	075a      	lsls	r2, r3, #29
 8019fb0:	d505      	bpl.n	8019fbe <__sflush_r+0x46>
 8019fb2:	6863      	ldr	r3, [r4, #4]
 8019fb4:	1ac0      	subs	r0, r0, r3
 8019fb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019fb8:	b10b      	cbz	r3, 8019fbe <__sflush_r+0x46>
 8019fba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019fbc:	1ac0      	subs	r0, r0, r3
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	4602      	mov	r2, r0
 8019fc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019fc4:	6a21      	ldr	r1, [r4, #32]
 8019fc6:	4628      	mov	r0, r5
 8019fc8:	47b0      	blx	r6
 8019fca:	1c43      	adds	r3, r0, #1
 8019fcc:	89a3      	ldrh	r3, [r4, #12]
 8019fce:	d106      	bne.n	8019fde <__sflush_r+0x66>
 8019fd0:	6829      	ldr	r1, [r5, #0]
 8019fd2:	291d      	cmp	r1, #29
 8019fd4:	d82c      	bhi.n	801a030 <__sflush_r+0xb8>
 8019fd6:	4a2a      	ldr	r2, [pc, #168]	; (801a080 <__sflush_r+0x108>)
 8019fd8:	40ca      	lsrs	r2, r1
 8019fda:	07d6      	lsls	r6, r2, #31
 8019fdc:	d528      	bpl.n	801a030 <__sflush_r+0xb8>
 8019fde:	2200      	movs	r2, #0
 8019fe0:	6062      	str	r2, [r4, #4]
 8019fe2:	04d9      	lsls	r1, r3, #19
 8019fe4:	6922      	ldr	r2, [r4, #16]
 8019fe6:	6022      	str	r2, [r4, #0]
 8019fe8:	d504      	bpl.n	8019ff4 <__sflush_r+0x7c>
 8019fea:	1c42      	adds	r2, r0, #1
 8019fec:	d101      	bne.n	8019ff2 <__sflush_r+0x7a>
 8019fee:	682b      	ldr	r3, [r5, #0]
 8019ff0:	b903      	cbnz	r3, 8019ff4 <__sflush_r+0x7c>
 8019ff2:	6560      	str	r0, [r4, #84]	; 0x54
 8019ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ff6:	602f      	str	r7, [r5, #0]
 8019ff8:	2900      	cmp	r1, #0
 8019ffa:	d0ca      	beq.n	8019f92 <__sflush_r+0x1a>
 8019ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a000:	4299      	cmp	r1, r3
 801a002:	d002      	beq.n	801a00a <__sflush_r+0x92>
 801a004:	4628      	mov	r0, r5
 801a006:	f000 f9d7 	bl	801a3b8 <_free_r>
 801a00a:	2000      	movs	r0, #0
 801a00c:	6360      	str	r0, [r4, #52]	; 0x34
 801a00e:	e7c1      	b.n	8019f94 <__sflush_r+0x1c>
 801a010:	6a21      	ldr	r1, [r4, #32]
 801a012:	2301      	movs	r3, #1
 801a014:	4628      	mov	r0, r5
 801a016:	47b0      	blx	r6
 801a018:	1c41      	adds	r1, r0, #1
 801a01a:	d1c7      	bne.n	8019fac <__sflush_r+0x34>
 801a01c:	682b      	ldr	r3, [r5, #0]
 801a01e:	2b00      	cmp	r3, #0
 801a020:	d0c4      	beq.n	8019fac <__sflush_r+0x34>
 801a022:	2b1d      	cmp	r3, #29
 801a024:	d001      	beq.n	801a02a <__sflush_r+0xb2>
 801a026:	2b16      	cmp	r3, #22
 801a028:	d101      	bne.n	801a02e <__sflush_r+0xb6>
 801a02a:	602f      	str	r7, [r5, #0]
 801a02c:	e7b1      	b.n	8019f92 <__sflush_r+0x1a>
 801a02e:	89a3      	ldrh	r3, [r4, #12]
 801a030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a034:	81a3      	strh	r3, [r4, #12]
 801a036:	e7ad      	b.n	8019f94 <__sflush_r+0x1c>
 801a038:	690f      	ldr	r7, [r1, #16]
 801a03a:	2f00      	cmp	r7, #0
 801a03c:	d0a9      	beq.n	8019f92 <__sflush_r+0x1a>
 801a03e:	0793      	lsls	r3, r2, #30
 801a040:	680e      	ldr	r6, [r1, #0]
 801a042:	bf08      	it	eq
 801a044:	694b      	ldreq	r3, [r1, #20]
 801a046:	600f      	str	r7, [r1, #0]
 801a048:	bf18      	it	ne
 801a04a:	2300      	movne	r3, #0
 801a04c:	eba6 0807 	sub.w	r8, r6, r7
 801a050:	608b      	str	r3, [r1, #8]
 801a052:	f1b8 0f00 	cmp.w	r8, #0
 801a056:	dd9c      	ble.n	8019f92 <__sflush_r+0x1a>
 801a058:	6a21      	ldr	r1, [r4, #32]
 801a05a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a05c:	4643      	mov	r3, r8
 801a05e:	463a      	mov	r2, r7
 801a060:	4628      	mov	r0, r5
 801a062:	47b0      	blx	r6
 801a064:	2800      	cmp	r0, #0
 801a066:	dc06      	bgt.n	801a076 <__sflush_r+0xfe>
 801a068:	89a3      	ldrh	r3, [r4, #12]
 801a06a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a06e:	81a3      	strh	r3, [r4, #12]
 801a070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a074:	e78e      	b.n	8019f94 <__sflush_r+0x1c>
 801a076:	4407      	add	r7, r0
 801a078:	eba8 0800 	sub.w	r8, r8, r0
 801a07c:	e7e9      	b.n	801a052 <__sflush_r+0xda>
 801a07e:	bf00      	nop
 801a080:	20400001 	.word	0x20400001

0801a084 <_fflush_r>:
 801a084:	b538      	push	{r3, r4, r5, lr}
 801a086:	690b      	ldr	r3, [r1, #16]
 801a088:	4605      	mov	r5, r0
 801a08a:	460c      	mov	r4, r1
 801a08c:	b913      	cbnz	r3, 801a094 <_fflush_r+0x10>
 801a08e:	2500      	movs	r5, #0
 801a090:	4628      	mov	r0, r5
 801a092:	bd38      	pop	{r3, r4, r5, pc}
 801a094:	b118      	cbz	r0, 801a09e <_fflush_r+0x1a>
 801a096:	6983      	ldr	r3, [r0, #24]
 801a098:	b90b      	cbnz	r3, 801a09e <_fflush_r+0x1a>
 801a09a:	f000 f887 	bl	801a1ac <__sinit>
 801a09e:	4b14      	ldr	r3, [pc, #80]	; (801a0f0 <_fflush_r+0x6c>)
 801a0a0:	429c      	cmp	r4, r3
 801a0a2:	d11b      	bne.n	801a0dc <_fflush_r+0x58>
 801a0a4:	686c      	ldr	r4, [r5, #4]
 801a0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d0ef      	beq.n	801a08e <_fflush_r+0xa>
 801a0ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a0b0:	07d0      	lsls	r0, r2, #31
 801a0b2:	d404      	bmi.n	801a0be <_fflush_r+0x3a>
 801a0b4:	0599      	lsls	r1, r3, #22
 801a0b6:	d402      	bmi.n	801a0be <_fflush_r+0x3a>
 801a0b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0ba:	f000 f915 	bl	801a2e8 <__retarget_lock_acquire_recursive>
 801a0be:	4628      	mov	r0, r5
 801a0c0:	4621      	mov	r1, r4
 801a0c2:	f7ff ff59 	bl	8019f78 <__sflush_r>
 801a0c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a0c8:	07da      	lsls	r2, r3, #31
 801a0ca:	4605      	mov	r5, r0
 801a0cc:	d4e0      	bmi.n	801a090 <_fflush_r+0xc>
 801a0ce:	89a3      	ldrh	r3, [r4, #12]
 801a0d0:	059b      	lsls	r3, r3, #22
 801a0d2:	d4dd      	bmi.n	801a090 <_fflush_r+0xc>
 801a0d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0d6:	f000 f908 	bl	801a2ea <__retarget_lock_release_recursive>
 801a0da:	e7d9      	b.n	801a090 <_fflush_r+0xc>
 801a0dc:	4b05      	ldr	r3, [pc, #20]	; (801a0f4 <_fflush_r+0x70>)
 801a0de:	429c      	cmp	r4, r3
 801a0e0:	d101      	bne.n	801a0e6 <_fflush_r+0x62>
 801a0e2:	68ac      	ldr	r4, [r5, #8]
 801a0e4:	e7df      	b.n	801a0a6 <_fflush_r+0x22>
 801a0e6:	4b04      	ldr	r3, [pc, #16]	; (801a0f8 <_fflush_r+0x74>)
 801a0e8:	429c      	cmp	r4, r3
 801a0ea:	bf08      	it	eq
 801a0ec:	68ec      	ldreq	r4, [r5, #12]
 801a0ee:	e7da      	b.n	801a0a6 <_fflush_r+0x22>
 801a0f0:	0801ab78 	.word	0x0801ab78
 801a0f4:	0801ab98 	.word	0x0801ab98
 801a0f8:	0801ab58 	.word	0x0801ab58

0801a0fc <std>:
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	b510      	push	{r4, lr}
 801a100:	4604      	mov	r4, r0
 801a102:	e9c0 3300 	strd	r3, r3, [r0]
 801a106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a10a:	6083      	str	r3, [r0, #8]
 801a10c:	8181      	strh	r1, [r0, #12]
 801a10e:	6643      	str	r3, [r0, #100]	; 0x64
 801a110:	81c2      	strh	r2, [r0, #14]
 801a112:	6183      	str	r3, [r0, #24]
 801a114:	4619      	mov	r1, r3
 801a116:	2208      	movs	r2, #8
 801a118:	305c      	adds	r0, #92	; 0x5c
 801a11a:	f7ff fdef 	bl	8019cfc <memset>
 801a11e:	4b05      	ldr	r3, [pc, #20]	; (801a134 <std+0x38>)
 801a120:	6263      	str	r3, [r4, #36]	; 0x24
 801a122:	4b05      	ldr	r3, [pc, #20]	; (801a138 <std+0x3c>)
 801a124:	62a3      	str	r3, [r4, #40]	; 0x28
 801a126:	4b05      	ldr	r3, [pc, #20]	; (801a13c <std+0x40>)
 801a128:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a12a:	4b05      	ldr	r3, [pc, #20]	; (801a140 <std+0x44>)
 801a12c:	6224      	str	r4, [r4, #32]
 801a12e:	6323      	str	r3, [r4, #48]	; 0x30
 801a130:	bd10      	pop	{r4, pc}
 801a132:	bf00      	nop
 801a134:	0801a599 	.word	0x0801a599
 801a138:	0801a5bb 	.word	0x0801a5bb
 801a13c:	0801a5f3 	.word	0x0801a5f3
 801a140:	0801a617 	.word	0x0801a617

0801a144 <_cleanup_r>:
 801a144:	4901      	ldr	r1, [pc, #4]	; (801a14c <_cleanup_r+0x8>)
 801a146:	f000 b8af 	b.w	801a2a8 <_fwalk_reent>
 801a14a:	bf00      	nop
 801a14c:	0801a085 	.word	0x0801a085

0801a150 <__sfmoreglue>:
 801a150:	b570      	push	{r4, r5, r6, lr}
 801a152:	2268      	movs	r2, #104	; 0x68
 801a154:	1e4d      	subs	r5, r1, #1
 801a156:	4355      	muls	r5, r2
 801a158:	460e      	mov	r6, r1
 801a15a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a15e:	f000 f997 	bl	801a490 <_malloc_r>
 801a162:	4604      	mov	r4, r0
 801a164:	b140      	cbz	r0, 801a178 <__sfmoreglue+0x28>
 801a166:	2100      	movs	r1, #0
 801a168:	e9c0 1600 	strd	r1, r6, [r0]
 801a16c:	300c      	adds	r0, #12
 801a16e:	60a0      	str	r0, [r4, #8]
 801a170:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a174:	f7ff fdc2 	bl	8019cfc <memset>
 801a178:	4620      	mov	r0, r4
 801a17a:	bd70      	pop	{r4, r5, r6, pc}

0801a17c <__sfp_lock_acquire>:
 801a17c:	4801      	ldr	r0, [pc, #4]	; (801a184 <__sfp_lock_acquire+0x8>)
 801a17e:	f000 b8b3 	b.w	801a2e8 <__retarget_lock_acquire_recursive>
 801a182:	bf00      	nop
 801a184:	2400690d 	.word	0x2400690d

0801a188 <__sfp_lock_release>:
 801a188:	4801      	ldr	r0, [pc, #4]	; (801a190 <__sfp_lock_release+0x8>)
 801a18a:	f000 b8ae 	b.w	801a2ea <__retarget_lock_release_recursive>
 801a18e:	bf00      	nop
 801a190:	2400690d 	.word	0x2400690d

0801a194 <__sinit_lock_acquire>:
 801a194:	4801      	ldr	r0, [pc, #4]	; (801a19c <__sinit_lock_acquire+0x8>)
 801a196:	f000 b8a7 	b.w	801a2e8 <__retarget_lock_acquire_recursive>
 801a19a:	bf00      	nop
 801a19c:	2400690e 	.word	0x2400690e

0801a1a0 <__sinit_lock_release>:
 801a1a0:	4801      	ldr	r0, [pc, #4]	; (801a1a8 <__sinit_lock_release+0x8>)
 801a1a2:	f000 b8a2 	b.w	801a2ea <__retarget_lock_release_recursive>
 801a1a6:	bf00      	nop
 801a1a8:	2400690e 	.word	0x2400690e

0801a1ac <__sinit>:
 801a1ac:	b510      	push	{r4, lr}
 801a1ae:	4604      	mov	r4, r0
 801a1b0:	f7ff fff0 	bl	801a194 <__sinit_lock_acquire>
 801a1b4:	69a3      	ldr	r3, [r4, #24]
 801a1b6:	b11b      	cbz	r3, 801a1c0 <__sinit+0x14>
 801a1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a1bc:	f7ff bff0 	b.w	801a1a0 <__sinit_lock_release>
 801a1c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a1c4:	6523      	str	r3, [r4, #80]	; 0x50
 801a1c6:	4b13      	ldr	r3, [pc, #76]	; (801a214 <__sinit+0x68>)
 801a1c8:	4a13      	ldr	r2, [pc, #76]	; (801a218 <__sinit+0x6c>)
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	62a2      	str	r2, [r4, #40]	; 0x28
 801a1ce:	42a3      	cmp	r3, r4
 801a1d0:	bf04      	itt	eq
 801a1d2:	2301      	moveq	r3, #1
 801a1d4:	61a3      	streq	r3, [r4, #24]
 801a1d6:	4620      	mov	r0, r4
 801a1d8:	f000 f820 	bl	801a21c <__sfp>
 801a1dc:	6060      	str	r0, [r4, #4]
 801a1de:	4620      	mov	r0, r4
 801a1e0:	f000 f81c 	bl	801a21c <__sfp>
 801a1e4:	60a0      	str	r0, [r4, #8]
 801a1e6:	4620      	mov	r0, r4
 801a1e8:	f000 f818 	bl	801a21c <__sfp>
 801a1ec:	2200      	movs	r2, #0
 801a1ee:	60e0      	str	r0, [r4, #12]
 801a1f0:	2104      	movs	r1, #4
 801a1f2:	6860      	ldr	r0, [r4, #4]
 801a1f4:	f7ff ff82 	bl	801a0fc <std>
 801a1f8:	68a0      	ldr	r0, [r4, #8]
 801a1fa:	2201      	movs	r2, #1
 801a1fc:	2109      	movs	r1, #9
 801a1fe:	f7ff ff7d 	bl	801a0fc <std>
 801a202:	68e0      	ldr	r0, [r4, #12]
 801a204:	2202      	movs	r2, #2
 801a206:	2112      	movs	r1, #18
 801a208:	f7ff ff78 	bl	801a0fc <std>
 801a20c:	2301      	movs	r3, #1
 801a20e:	61a3      	str	r3, [r4, #24]
 801a210:	e7d2      	b.n	801a1b8 <__sinit+0xc>
 801a212:	bf00      	nop
 801a214:	0801ab54 	.word	0x0801ab54
 801a218:	0801a145 	.word	0x0801a145

0801a21c <__sfp>:
 801a21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a21e:	4607      	mov	r7, r0
 801a220:	f7ff ffac 	bl	801a17c <__sfp_lock_acquire>
 801a224:	4b1e      	ldr	r3, [pc, #120]	; (801a2a0 <__sfp+0x84>)
 801a226:	681e      	ldr	r6, [r3, #0]
 801a228:	69b3      	ldr	r3, [r6, #24]
 801a22a:	b913      	cbnz	r3, 801a232 <__sfp+0x16>
 801a22c:	4630      	mov	r0, r6
 801a22e:	f7ff ffbd 	bl	801a1ac <__sinit>
 801a232:	3648      	adds	r6, #72	; 0x48
 801a234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a238:	3b01      	subs	r3, #1
 801a23a:	d503      	bpl.n	801a244 <__sfp+0x28>
 801a23c:	6833      	ldr	r3, [r6, #0]
 801a23e:	b30b      	cbz	r3, 801a284 <__sfp+0x68>
 801a240:	6836      	ldr	r6, [r6, #0]
 801a242:	e7f7      	b.n	801a234 <__sfp+0x18>
 801a244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a248:	b9d5      	cbnz	r5, 801a280 <__sfp+0x64>
 801a24a:	4b16      	ldr	r3, [pc, #88]	; (801a2a4 <__sfp+0x88>)
 801a24c:	60e3      	str	r3, [r4, #12]
 801a24e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a252:	6665      	str	r5, [r4, #100]	; 0x64
 801a254:	f000 f847 	bl	801a2e6 <__retarget_lock_init_recursive>
 801a258:	f7ff ff96 	bl	801a188 <__sfp_lock_release>
 801a25c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a260:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a264:	6025      	str	r5, [r4, #0]
 801a266:	61a5      	str	r5, [r4, #24]
 801a268:	2208      	movs	r2, #8
 801a26a:	4629      	mov	r1, r5
 801a26c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a270:	f7ff fd44 	bl	8019cfc <memset>
 801a274:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a278:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a27c:	4620      	mov	r0, r4
 801a27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a280:	3468      	adds	r4, #104	; 0x68
 801a282:	e7d9      	b.n	801a238 <__sfp+0x1c>
 801a284:	2104      	movs	r1, #4
 801a286:	4638      	mov	r0, r7
 801a288:	f7ff ff62 	bl	801a150 <__sfmoreglue>
 801a28c:	4604      	mov	r4, r0
 801a28e:	6030      	str	r0, [r6, #0]
 801a290:	2800      	cmp	r0, #0
 801a292:	d1d5      	bne.n	801a240 <__sfp+0x24>
 801a294:	f7ff ff78 	bl	801a188 <__sfp_lock_release>
 801a298:	230c      	movs	r3, #12
 801a29a:	603b      	str	r3, [r7, #0]
 801a29c:	e7ee      	b.n	801a27c <__sfp+0x60>
 801a29e:	bf00      	nop
 801a2a0:	0801ab54 	.word	0x0801ab54
 801a2a4:	ffff0001 	.word	0xffff0001

0801a2a8 <_fwalk_reent>:
 801a2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2ac:	4606      	mov	r6, r0
 801a2ae:	4688      	mov	r8, r1
 801a2b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a2b4:	2700      	movs	r7, #0
 801a2b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a2ba:	f1b9 0901 	subs.w	r9, r9, #1
 801a2be:	d505      	bpl.n	801a2cc <_fwalk_reent+0x24>
 801a2c0:	6824      	ldr	r4, [r4, #0]
 801a2c2:	2c00      	cmp	r4, #0
 801a2c4:	d1f7      	bne.n	801a2b6 <_fwalk_reent+0xe>
 801a2c6:	4638      	mov	r0, r7
 801a2c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2cc:	89ab      	ldrh	r3, [r5, #12]
 801a2ce:	2b01      	cmp	r3, #1
 801a2d0:	d907      	bls.n	801a2e2 <_fwalk_reent+0x3a>
 801a2d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a2d6:	3301      	adds	r3, #1
 801a2d8:	d003      	beq.n	801a2e2 <_fwalk_reent+0x3a>
 801a2da:	4629      	mov	r1, r5
 801a2dc:	4630      	mov	r0, r6
 801a2de:	47c0      	blx	r8
 801a2e0:	4307      	orrs	r7, r0
 801a2e2:	3568      	adds	r5, #104	; 0x68
 801a2e4:	e7e9      	b.n	801a2ba <_fwalk_reent+0x12>

0801a2e6 <__retarget_lock_init_recursive>:
 801a2e6:	4770      	bx	lr

0801a2e8 <__retarget_lock_acquire_recursive>:
 801a2e8:	4770      	bx	lr

0801a2ea <__retarget_lock_release_recursive>:
 801a2ea:	4770      	bx	lr

0801a2ec <__swhatbuf_r>:
 801a2ec:	b570      	push	{r4, r5, r6, lr}
 801a2ee:	460e      	mov	r6, r1
 801a2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2f4:	2900      	cmp	r1, #0
 801a2f6:	b096      	sub	sp, #88	; 0x58
 801a2f8:	4614      	mov	r4, r2
 801a2fa:	461d      	mov	r5, r3
 801a2fc:	da08      	bge.n	801a310 <__swhatbuf_r+0x24>
 801a2fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a302:	2200      	movs	r2, #0
 801a304:	602a      	str	r2, [r5, #0]
 801a306:	061a      	lsls	r2, r3, #24
 801a308:	d410      	bmi.n	801a32c <__swhatbuf_r+0x40>
 801a30a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a30e:	e00e      	b.n	801a32e <__swhatbuf_r+0x42>
 801a310:	466a      	mov	r2, sp
 801a312:	f000 f9a7 	bl	801a664 <_fstat_r>
 801a316:	2800      	cmp	r0, #0
 801a318:	dbf1      	blt.n	801a2fe <__swhatbuf_r+0x12>
 801a31a:	9a01      	ldr	r2, [sp, #4]
 801a31c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a320:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a324:	425a      	negs	r2, r3
 801a326:	415a      	adcs	r2, r3
 801a328:	602a      	str	r2, [r5, #0]
 801a32a:	e7ee      	b.n	801a30a <__swhatbuf_r+0x1e>
 801a32c:	2340      	movs	r3, #64	; 0x40
 801a32e:	2000      	movs	r0, #0
 801a330:	6023      	str	r3, [r4, #0]
 801a332:	b016      	add	sp, #88	; 0x58
 801a334:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a338 <__smakebuf_r>:
 801a338:	898b      	ldrh	r3, [r1, #12]
 801a33a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a33c:	079d      	lsls	r5, r3, #30
 801a33e:	4606      	mov	r6, r0
 801a340:	460c      	mov	r4, r1
 801a342:	d507      	bpl.n	801a354 <__smakebuf_r+0x1c>
 801a344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a348:	6023      	str	r3, [r4, #0]
 801a34a:	6123      	str	r3, [r4, #16]
 801a34c:	2301      	movs	r3, #1
 801a34e:	6163      	str	r3, [r4, #20]
 801a350:	b002      	add	sp, #8
 801a352:	bd70      	pop	{r4, r5, r6, pc}
 801a354:	ab01      	add	r3, sp, #4
 801a356:	466a      	mov	r2, sp
 801a358:	f7ff ffc8 	bl	801a2ec <__swhatbuf_r>
 801a35c:	9900      	ldr	r1, [sp, #0]
 801a35e:	4605      	mov	r5, r0
 801a360:	4630      	mov	r0, r6
 801a362:	f000 f895 	bl	801a490 <_malloc_r>
 801a366:	b948      	cbnz	r0, 801a37c <__smakebuf_r+0x44>
 801a368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a36c:	059a      	lsls	r2, r3, #22
 801a36e:	d4ef      	bmi.n	801a350 <__smakebuf_r+0x18>
 801a370:	f023 0303 	bic.w	r3, r3, #3
 801a374:	f043 0302 	orr.w	r3, r3, #2
 801a378:	81a3      	strh	r3, [r4, #12]
 801a37a:	e7e3      	b.n	801a344 <__smakebuf_r+0xc>
 801a37c:	4b0d      	ldr	r3, [pc, #52]	; (801a3b4 <__smakebuf_r+0x7c>)
 801a37e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a380:	89a3      	ldrh	r3, [r4, #12]
 801a382:	6020      	str	r0, [r4, #0]
 801a384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a388:	81a3      	strh	r3, [r4, #12]
 801a38a:	9b00      	ldr	r3, [sp, #0]
 801a38c:	6163      	str	r3, [r4, #20]
 801a38e:	9b01      	ldr	r3, [sp, #4]
 801a390:	6120      	str	r0, [r4, #16]
 801a392:	b15b      	cbz	r3, 801a3ac <__smakebuf_r+0x74>
 801a394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a398:	4630      	mov	r0, r6
 801a39a:	f000 f975 	bl	801a688 <_isatty_r>
 801a39e:	b128      	cbz	r0, 801a3ac <__smakebuf_r+0x74>
 801a3a0:	89a3      	ldrh	r3, [r4, #12]
 801a3a2:	f023 0303 	bic.w	r3, r3, #3
 801a3a6:	f043 0301 	orr.w	r3, r3, #1
 801a3aa:	81a3      	strh	r3, [r4, #12]
 801a3ac:	89a0      	ldrh	r0, [r4, #12]
 801a3ae:	4305      	orrs	r5, r0
 801a3b0:	81a5      	strh	r5, [r4, #12]
 801a3b2:	e7cd      	b.n	801a350 <__smakebuf_r+0x18>
 801a3b4:	0801a145 	.word	0x0801a145

0801a3b8 <_free_r>:
 801a3b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a3ba:	2900      	cmp	r1, #0
 801a3bc:	d044      	beq.n	801a448 <_free_r+0x90>
 801a3be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3c2:	9001      	str	r0, [sp, #4]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	f1a1 0404 	sub.w	r4, r1, #4
 801a3ca:	bfb8      	it	lt
 801a3cc:	18e4      	addlt	r4, r4, r3
 801a3ce:	f000 f97d 	bl	801a6cc <__malloc_lock>
 801a3d2:	4a1e      	ldr	r2, [pc, #120]	; (801a44c <_free_r+0x94>)
 801a3d4:	9801      	ldr	r0, [sp, #4]
 801a3d6:	6813      	ldr	r3, [r2, #0]
 801a3d8:	b933      	cbnz	r3, 801a3e8 <_free_r+0x30>
 801a3da:	6063      	str	r3, [r4, #4]
 801a3dc:	6014      	str	r4, [r2, #0]
 801a3de:	b003      	add	sp, #12
 801a3e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a3e4:	f000 b978 	b.w	801a6d8 <__malloc_unlock>
 801a3e8:	42a3      	cmp	r3, r4
 801a3ea:	d908      	bls.n	801a3fe <_free_r+0x46>
 801a3ec:	6825      	ldr	r5, [r4, #0]
 801a3ee:	1961      	adds	r1, r4, r5
 801a3f0:	428b      	cmp	r3, r1
 801a3f2:	bf01      	itttt	eq
 801a3f4:	6819      	ldreq	r1, [r3, #0]
 801a3f6:	685b      	ldreq	r3, [r3, #4]
 801a3f8:	1949      	addeq	r1, r1, r5
 801a3fa:	6021      	streq	r1, [r4, #0]
 801a3fc:	e7ed      	b.n	801a3da <_free_r+0x22>
 801a3fe:	461a      	mov	r2, r3
 801a400:	685b      	ldr	r3, [r3, #4]
 801a402:	b10b      	cbz	r3, 801a408 <_free_r+0x50>
 801a404:	42a3      	cmp	r3, r4
 801a406:	d9fa      	bls.n	801a3fe <_free_r+0x46>
 801a408:	6811      	ldr	r1, [r2, #0]
 801a40a:	1855      	adds	r5, r2, r1
 801a40c:	42a5      	cmp	r5, r4
 801a40e:	d10b      	bne.n	801a428 <_free_r+0x70>
 801a410:	6824      	ldr	r4, [r4, #0]
 801a412:	4421      	add	r1, r4
 801a414:	1854      	adds	r4, r2, r1
 801a416:	42a3      	cmp	r3, r4
 801a418:	6011      	str	r1, [r2, #0]
 801a41a:	d1e0      	bne.n	801a3de <_free_r+0x26>
 801a41c:	681c      	ldr	r4, [r3, #0]
 801a41e:	685b      	ldr	r3, [r3, #4]
 801a420:	6053      	str	r3, [r2, #4]
 801a422:	4421      	add	r1, r4
 801a424:	6011      	str	r1, [r2, #0]
 801a426:	e7da      	b.n	801a3de <_free_r+0x26>
 801a428:	d902      	bls.n	801a430 <_free_r+0x78>
 801a42a:	230c      	movs	r3, #12
 801a42c:	6003      	str	r3, [r0, #0]
 801a42e:	e7d6      	b.n	801a3de <_free_r+0x26>
 801a430:	6825      	ldr	r5, [r4, #0]
 801a432:	1961      	adds	r1, r4, r5
 801a434:	428b      	cmp	r3, r1
 801a436:	bf04      	itt	eq
 801a438:	6819      	ldreq	r1, [r3, #0]
 801a43a:	685b      	ldreq	r3, [r3, #4]
 801a43c:	6063      	str	r3, [r4, #4]
 801a43e:	bf04      	itt	eq
 801a440:	1949      	addeq	r1, r1, r5
 801a442:	6021      	streq	r1, [r4, #0]
 801a444:	6054      	str	r4, [r2, #4]
 801a446:	e7ca      	b.n	801a3de <_free_r+0x26>
 801a448:	b003      	add	sp, #12
 801a44a:	bd30      	pop	{r4, r5, pc}
 801a44c:	24006910 	.word	0x24006910

0801a450 <sbrk_aligned>:
 801a450:	b570      	push	{r4, r5, r6, lr}
 801a452:	4e0e      	ldr	r6, [pc, #56]	; (801a48c <sbrk_aligned+0x3c>)
 801a454:	460c      	mov	r4, r1
 801a456:	6831      	ldr	r1, [r6, #0]
 801a458:	4605      	mov	r5, r0
 801a45a:	b911      	cbnz	r1, 801a462 <sbrk_aligned+0x12>
 801a45c:	f000 f88c 	bl	801a578 <_sbrk_r>
 801a460:	6030      	str	r0, [r6, #0]
 801a462:	4621      	mov	r1, r4
 801a464:	4628      	mov	r0, r5
 801a466:	f000 f887 	bl	801a578 <_sbrk_r>
 801a46a:	1c43      	adds	r3, r0, #1
 801a46c:	d00a      	beq.n	801a484 <sbrk_aligned+0x34>
 801a46e:	1cc4      	adds	r4, r0, #3
 801a470:	f024 0403 	bic.w	r4, r4, #3
 801a474:	42a0      	cmp	r0, r4
 801a476:	d007      	beq.n	801a488 <sbrk_aligned+0x38>
 801a478:	1a21      	subs	r1, r4, r0
 801a47a:	4628      	mov	r0, r5
 801a47c:	f000 f87c 	bl	801a578 <_sbrk_r>
 801a480:	3001      	adds	r0, #1
 801a482:	d101      	bne.n	801a488 <sbrk_aligned+0x38>
 801a484:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a488:	4620      	mov	r0, r4
 801a48a:	bd70      	pop	{r4, r5, r6, pc}
 801a48c:	24006914 	.word	0x24006914

0801a490 <_malloc_r>:
 801a490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a494:	1ccd      	adds	r5, r1, #3
 801a496:	f025 0503 	bic.w	r5, r5, #3
 801a49a:	3508      	adds	r5, #8
 801a49c:	2d0c      	cmp	r5, #12
 801a49e:	bf38      	it	cc
 801a4a0:	250c      	movcc	r5, #12
 801a4a2:	2d00      	cmp	r5, #0
 801a4a4:	4607      	mov	r7, r0
 801a4a6:	db01      	blt.n	801a4ac <_malloc_r+0x1c>
 801a4a8:	42a9      	cmp	r1, r5
 801a4aa:	d905      	bls.n	801a4b8 <_malloc_r+0x28>
 801a4ac:	230c      	movs	r3, #12
 801a4ae:	603b      	str	r3, [r7, #0]
 801a4b0:	2600      	movs	r6, #0
 801a4b2:	4630      	mov	r0, r6
 801a4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4b8:	4e2e      	ldr	r6, [pc, #184]	; (801a574 <_malloc_r+0xe4>)
 801a4ba:	f000 f907 	bl	801a6cc <__malloc_lock>
 801a4be:	6833      	ldr	r3, [r6, #0]
 801a4c0:	461c      	mov	r4, r3
 801a4c2:	bb34      	cbnz	r4, 801a512 <_malloc_r+0x82>
 801a4c4:	4629      	mov	r1, r5
 801a4c6:	4638      	mov	r0, r7
 801a4c8:	f7ff ffc2 	bl	801a450 <sbrk_aligned>
 801a4cc:	1c43      	adds	r3, r0, #1
 801a4ce:	4604      	mov	r4, r0
 801a4d0:	d14d      	bne.n	801a56e <_malloc_r+0xde>
 801a4d2:	6834      	ldr	r4, [r6, #0]
 801a4d4:	4626      	mov	r6, r4
 801a4d6:	2e00      	cmp	r6, #0
 801a4d8:	d140      	bne.n	801a55c <_malloc_r+0xcc>
 801a4da:	6823      	ldr	r3, [r4, #0]
 801a4dc:	4631      	mov	r1, r6
 801a4de:	4638      	mov	r0, r7
 801a4e0:	eb04 0803 	add.w	r8, r4, r3
 801a4e4:	f000 f848 	bl	801a578 <_sbrk_r>
 801a4e8:	4580      	cmp	r8, r0
 801a4ea:	d13a      	bne.n	801a562 <_malloc_r+0xd2>
 801a4ec:	6821      	ldr	r1, [r4, #0]
 801a4ee:	3503      	adds	r5, #3
 801a4f0:	1a6d      	subs	r5, r5, r1
 801a4f2:	f025 0503 	bic.w	r5, r5, #3
 801a4f6:	3508      	adds	r5, #8
 801a4f8:	2d0c      	cmp	r5, #12
 801a4fa:	bf38      	it	cc
 801a4fc:	250c      	movcc	r5, #12
 801a4fe:	4629      	mov	r1, r5
 801a500:	4638      	mov	r0, r7
 801a502:	f7ff ffa5 	bl	801a450 <sbrk_aligned>
 801a506:	3001      	adds	r0, #1
 801a508:	d02b      	beq.n	801a562 <_malloc_r+0xd2>
 801a50a:	6823      	ldr	r3, [r4, #0]
 801a50c:	442b      	add	r3, r5
 801a50e:	6023      	str	r3, [r4, #0]
 801a510:	e00e      	b.n	801a530 <_malloc_r+0xa0>
 801a512:	6822      	ldr	r2, [r4, #0]
 801a514:	1b52      	subs	r2, r2, r5
 801a516:	d41e      	bmi.n	801a556 <_malloc_r+0xc6>
 801a518:	2a0b      	cmp	r2, #11
 801a51a:	d916      	bls.n	801a54a <_malloc_r+0xba>
 801a51c:	1961      	adds	r1, r4, r5
 801a51e:	42a3      	cmp	r3, r4
 801a520:	6025      	str	r5, [r4, #0]
 801a522:	bf18      	it	ne
 801a524:	6059      	strne	r1, [r3, #4]
 801a526:	6863      	ldr	r3, [r4, #4]
 801a528:	bf08      	it	eq
 801a52a:	6031      	streq	r1, [r6, #0]
 801a52c:	5162      	str	r2, [r4, r5]
 801a52e:	604b      	str	r3, [r1, #4]
 801a530:	4638      	mov	r0, r7
 801a532:	f104 060b 	add.w	r6, r4, #11
 801a536:	f000 f8cf 	bl	801a6d8 <__malloc_unlock>
 801a53a:	f026 0607 	bic.w	r6, r6, #7
 801a53e:	1d23      	adds	r3, r4, #4
 801a540:	1af2      	subs	r2, r6, r3
 801a542:	d0b6      	beq.n	801a4b2 <_malloc_r+0x22>
 801a544:	1b9b      	subs	r3, r3, r6
 801a546:	50a3      	str	r3, [r4, r2]
 801a548:	e7b3      	b.n	801a4b2 <_malloc_r+0x22>
 801a54a:	6862      	ldr	r2, [r4, #4]
 801a54c:	42a3      	cmp	r3, r4
 801a54e:	bf0c      	ite	eq
 801a550:	6032      	streq	r2, [r6, #0]
 801a552:	605a      	strne	r2, [r3, #4]
 801a554:	e7ec      	b.n	801a530 <_malloc_r+0xa0>
 801a556:	4623      	mov	r3, r4
 801a558:	6864      	ldr	r4, [r4, #4]
 801a55a:	e7b2      	b.n	801a4c2 <_malloc_r+0x32>
 801a55c:	4634      	mov	r4, r6
 801a55e:	6876      	ldr	r6, [r6, #4]
 801a560:	e7b9      	b.n	801a4d6 <_malloc_r+0x46>
 801a562:	230c      	movs	r3, #12
 801a564:	603b      	str	r3, [r7, #0]
 801a566:	4638      	mov	r0, r7
 801a568:	f000 f8b6 	bl	801a6d8 <__malloc_unlock>
 801a56c:	e7a1      	b.n	801a4b2 <_malloc_r+0x22>
 801a56e:	6025      	str	r5, [r4, #0]
 801a570:	e7de      	b.n	801a530 <_malloc_r+0xa0>
 801a572:	bf00      	nop
 801a574:	24006910 	.word	0x24006910

0801a578 <_sbrk_r>:
 801a578:	b538      	push	{r3, r4, r5, lr}
 801a57a:	4d06      	ldr	r5, [pc, #24]	; (801a594 <_sbrk_r+0x1c>)
 801a57c:	2300      	movs	r3, #0
 801a57e:	4604      	mov	r4, r0
 801a580:	4608      	mov	r0, r1
 801a582:	602b      	str	r3, [r5, #0]
 801a584:	f7ea f8c8 	bl	8004718 <_sbrk>
 801a588:	1c43      	adds	r3, r0, #1
 801a58a:	d102      	bne.n	801a592 <_sbrk_r+0x1a>
 801a58c:	682b      	ldr	r3, [r5, #0]
 801a58e:	b103      	cbz	r3, 801a592 <_sbrk_r+0x1a>
 801a590:	6023      	str	r3, [r4, #0]
 801a592:	bd38      	pop	{r3, r4, r5, pc}
 801a594:	24006918 	.word	0x24006918

0801a598 <__sread>:
 801a598:	b510      	push	{r4, lr}
 801a59a:	460c      	mov	r4, r1
 801a59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5a0:	f000 f8a0 	bl	801a6e4 <_read_r>
 801a5a4:	2800      	cmp	r0, #0
 801a5a6:	bfab      	itete	ge
 801a5a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a5aa:	89a3      	ldrhlt	r3, [r4, #12]
 801a5ac:	181b      	addge	r3, r3, r0
 801a5ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a5b2:	bfac      	ite	ge
 801a5b4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a5b6:	81a3      	strhlt	r3, [r4, #12]
 801a5b8:	bd10      	pop	{r4, pc}

0801a5ba <__swrite>:
 801a5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5be:	461f      	mov	r7, r3
 801a5c0:	898b      	ldrh	r3, [r1, #12]
 801a5c2:	05db      	lsls	r3, r3, #23
 801a5c4:	4605      	mov	r5, r0
 801a5c6:	460c      	mov	r4, r1
 801a5c8:	4616      	mov	r6, r2
 801a5ca:	d505      	bpl.n	801a5d8 <__swrite+0x1e>
 801a5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5d0:	2302      	movs	r3, #2
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	f000 f868 	bl	801a6a8 <_lseek_r>
 801a5d8:	89a3      	ldrh	r3, [r4, #12]
 801a5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a5de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a5e2:	81a3      	strh	r3, [r4, #12]
 801a5e4:	4632      	mov	r2, r6
 801a5e6:	463b      	mov	r3, r7
 801a5e8:	4628      	mov	r0, r5
 801a5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5ee:	f000 b817 	b.w	801a620 <_write_r>

0801a5f2 <__sseek>:
 801a5f2:	b510      	push	{r4, lr}
 801a5f4:	460c      	mov	r4, r1
 801a5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5fa:	f000 f855 	bl	801a6a8 <_lseek_r>
 801a5fe:	1c43      	adds	r3, r0, #1
 801a600:	89a3      	ldrh	r3, [r4, #12]
 801a602:	bf15      	itete	ne
 801a604:	6560      	strne	r0, [r4, #84]	; 0x54
 801a606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a60a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a60e:	81a3      	strheq	r3, [r4, #12]
 801a610:	bf18      	it	ne
 801a612:	81a3      	strhne	r3, [r4, #12]
 801a614:	bd10      	pop	{r4, pc}

0801a616 <__sclose>:
 801a616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a61a:	f000 b813 	b.w	801a644 <_close_r>
	...

0801a620 <_write_r>:
 801a620:	b538      	push	{r3, r4, r5, lr}
 801a622:	4d07      	ldr	r5, [pc, #28]	; (801a640 <_write_r+0x20>)
 801a624:	4604      	mov	r4, r0
 801a626:	4608      	mov	r0, r1
 801a628:	4611      	mov	r1, r2
 801a62a:	2200      	movs	r2, #0
 801a62c:	602a      	str	r2, [r5, #0]
 801a62e:	461a      	mov	r2, r3
 801a630:	f7ea f821 	bl	8004676 <_write>
 801a634:	1c43      	adds	r3, r0, #1
 801a636:	d102      	bne.n	801a63e <_write_r+0x1e>
 801a638:	682b      	ldr	r3, [r5, #0]
 801a63a:	b103      	cbz	r3, 801a63e <_write_r+0x1e>
 801a63c:	6023      	str	r3, [r4, #0]
 801a63e:	bd38      	pop	{r3, r4, r5, pc}
 801a640:	24006918 	.word	0x24006918

0801a644 <_close_r>:
 801a644:	b538      	push	{r3, r4, r5, lr}
 801a646:	4d06      	ldr	r5, [pc, #24]	; (801a660 <_close_r+0x1c>)
 801a648:	2300      	movs	r3, #0
 801a64a:	4604      	mov	r4, r0
 801a64c:	4608      	mov	r0, r1
 801a64e:	602b      	str	r3, [r5, #0]
 801a650:	f7ea f82d 	bl	80046ae <_close>
 801a654:	1c43      	adds	r3, r0, #1
 801a656:	d102      	bne.n	801a65e <_close_r+0x1a>
 801a658:	682b      	ldr	r3, [r5, #0]
 801a65a:	b103      	cbz	r3, 801a65e <_close_r+0x1a>
 801a65c:	6023      	str	r3, [r4, #0]
 801a65e:	bd38      	pop	{r3, r4, r5, pc}
 801a660:	24006918 	.word	0x24006918

0801a664 <_fstat_r>:
 801a664:	b538      	push	{r3, r4, r5, lr}
 801a666:	4d07      	ldr	r5, [pc, #28]	; (801a684 <_fstat_r+0x20>)
 801a668:	2300      	movs	r3, #0
 801a66a:	4604      	mov	r4, r0
 801a66c:	4608      	mov	r0, r1
 801a66e:	4611      	mov	r1, r2
 801a670:	602b      	str	r3, [r5, #0]
 801a672:	f7ea f828 	bl	80046c6 <_fstat>
 801a676:	1c43      	adds	r3, r0, #1
 801a678:	d102      	bne.n	801a680 <_fstat_r+0x1c>
 801a67a:	682b      	ldr	r3, [r5, #0]
 801a67c:	b103      	cbz	r3, 801a680 <_fstat_r+0x1c>
 801a67e:	6023      	str	r3, [r4, #0]
 801a680:	bd38      	pop	{r3, r4, r5, pc}
 801a682:	bf00      	nop
 801a684:	24006918 	.word	0x24006918

0801a688 <_isatty_r>:
 801a688:	b538      	push	{r3, r4, r5, lr}
 801a68a:	4d06      	ldr	r5, [pc, #24]	; (801a6a4 <_isatty_r+0x1c>)
 801a68c:	2300      	movs	r3, #0
 801a68e:	4604      	mov	r4, r0
 801a690:	4608      	mov	r0, r1
 801a692:	602b      	str	r3, [r5, #0]
 801a694:	f7ea f827 	bl	80046e6 <_isatty>
 801a698:	1c43      	adds	r3, r0, #1
 801a69a:	d102      	bne.n	801a6a2 <_isatty_r+0x1a>
 801a69c:	682b      	ldr	r3, [r5, #0]
 801a69e:	b103      	cbz	r3, 801a6a2 <_isatty_r+0x1a>
 801a6a0:	6023      	str	r3, [r4, #0]
 801a6a2:	bd38      	pop	{r3, r4, r5, pc}
 801a6a4:	24006918 	.word	0x24006918

0801a6a8 <_lseek_r>:
 801a6a8:	b538      	push	{r3, r4, r5, lr}
 801a6aa:	4d07      	ldr	r5, [pc, #28]	; (801a6c8 <_lseek_r+0x20>)
 801a6ac:	4604      	mov	r4, r0
 801a6ae:	4608      	mov	r0, r1
 801a6b0:	4611      	mov	r1, r2
 801a6b2:	2200      	movs	r2, #0
 801a6b4:	602a      	str	r2, [r5, #0]
 801a6b6:	461a      	mov	r2, r3
 801a6b8:	f7ea f820 	bl	80046fc <_lseek>
 801a6bc:	1c43      	adds	r3, r0, #1
 801a6be:	d102      	bne.n	801a6c6 <_lseek_r+0x1e>
 801a6c0:	682b      	ldr	r3, [r5, #0]
 801a6c2:	b103      	cbz	r3, 801a6c6 <_lseek_r+0x1e>
 801a6c4:	6023      	str	r3, [r4, #0]
 801a6c6:	bd38      	pop	{r3, r4, r5, pc}
 801a6c8:	24006918 	.word	0x24006918

0801a6cc <__malloc_lock>:
 801a6cc:	4801      	ldr	r0, [pc, #4]	; (801a6d4 <__malloc_lock+0x8>)
 801a6ce:	f7ff be0b 	b.w	801a2e8 <__retarget_lock_acquire_recursive>
 801a6d2:	bf00      	nop
 801a6d4:	2400690c 	.word	0x2400690c

0801a6d8 <__malloc_unlock>:
 801a6d8:	4801      	ldr	r0, [pc, #4]	; (801a6e0 <__malloc_unlock+0x8>)
 801a6da:	f7ff be06 	b.w	801a2ea <__retarget_lock_release_recursive>
 801a6de:	bf00      	nop
 801a6e0:	2400690c 	.word	0x2400690c

0801a6e4 <_read_r>:
 801a6e4:	b538      	push	{r3, r4, r5, lr}
 801a6e6:	4d07      	ldr	r5, [pc, #28]	; (801a704 <_read_r+0x20>)
 801a6e8:	4604      	mov	r4, r0
 801a6ea:	4608      	mov	r0, r1
 801a6ec:	4611      	mov	r1, r2
 801a6ee:	2200      	movs	r2, #0
 801a6f0:	602a      	str	r2, [r5, #0]
 801a6f2:	461a      	mov	r2, r3
 801a6f4:	f7e9 ffa2 	bl	800463c <_read>
 801a6f8:	1c43      	adds	r3, r0, #1
 801a6fa:	d102      	bne.n	801a702 <_read_r+0x1e>
 801a6fc:	682b      	ldr	r3, [r5, #0]
 801a6fe:	b103      	cbz	r3, 801a702 <_read_r+0x1e>
 801a700:	6023      	str	r3, [r4, #0]
 801a702:	bd38      	pop	{r3, r4, r5, pc}
 801a704:	24006918 	.word	0x24006918

0801a708 <_init>:
 801a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a70a:	bf00      	nop
 801a70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a70e:	bc08      	pop	{r3}
 801a710:	469e      	mov	lr, r3
 801a712:	4770      	bx	lr

0801a714 <_fini>:
 801a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a716:	bf00      	nop
 801a718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a71a:	bc08      	pop	{r3}
 801a71c:	469e      	mov	lr, r3
 801a71e:	4770      	bx	lr
