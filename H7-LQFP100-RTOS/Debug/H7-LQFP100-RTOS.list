
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a430  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801a6d0  0801a6d0  0002a6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ab68  0801ab68  0002ab68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ab70  0801ab70  0002ab70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ab74  0801ab74  0002ab74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  0801ab78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000067fc  24000120  0801ac80  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400691c  0801ac80  0003691c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   000402eb  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007aa0  00000000  00000000  00070421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b40  00000000  00000000  00077ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002818  00000000  00000000  0007aa08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045d3e  00000000  00000000  0007d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004161c  00000000  00000000  000c2f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196364  00000000  00000000  0010457a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029a8de  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bb7c  00000000  00000000  0029a930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a6b8 	.word	0x0801a6b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0801a6b8 	.word	0x0801a6b8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fa67 	bl	8005b3c <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 f812 	bl	800369c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 fb82 	bl	8006d8c <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f805 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 fcc5 	bl	8006044 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f002 ffec 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 fcb7 	bl	8006044 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f002 ffde 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 fca9 	bl	8006044 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f002 ffd0 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 fc9b 	bl	8006044 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f002 ffc2 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f005 fc8c 	bl	8006044 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f002 ffb3 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f005 fc7d 	bl	8006044 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f002 ffa4 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f005 fc6e 	bl	8006044 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f002 ff95 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f005 fc5f 	bl	8006044 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f002 ff86 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f005 fc50 	bl	8006044 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f002 ff77 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 fc41 	bl	8006044 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f002 ff68 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 fc32 	bl	8006044 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f002 ff59 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400013c 	.word	0x2400013c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 f94f 	bl	8005b3c <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f002 fefa 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 fbba 	bl	8006044 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f002 fee1 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 fbac 	bl	8006044 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f002 fed3 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 fb9e 	bl	8006044 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f002 fec5 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 fb90 	bl	8006044 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f002 feb7 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001a0 	.word	0x240001a0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a f932 	bl	800ac64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a f926 	bl	800ac64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a f91a 	bl	800ac64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f006 ffc5 	bl	8007a04 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 fe0c 	bl	800369c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f004 fe08 	bl	80056f4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f004 fe02 	bl	80056f4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f006 ff65 	bl	8007a04 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 fdac 	bl	800369c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000204 	.word	0x24000204
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400027c 	.word	0x2400027c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 f88d 	bl	8019cac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 fb2d 	bl	80071f8 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 fd7a 	bl	800369c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 fd48 	bl	8007658 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 fd65 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002f4 	.word	0x240002f4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a f805 	bl	800ac64 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f006 feb0 	bl	8007a04 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fcf7 	bl	800369c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 f9fa 	bl	80070b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fa11 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000308 	.word	0x24000308
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 f9d1 	bl	80070b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 f9e8 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 f9c9 	bl	80070b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 f9e0 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 f9c1 	bl	80070b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 f9d8 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 f9b9 	bl	80070b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 f9d0 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 f9b1 	bl	80070b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 f9c8 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 f9a9 	bl	80070b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 f9c0 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 f9a1 	bl	80070b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 f9b8 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 f999 	bl	80070b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 f9b0 	bl	80070ec <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f018 ff6e 	bl	8019cac <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f009 fd88 	bl	800a980 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fd2d 	bl	800a980 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 fb7a 	bl	800a6b0 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	24000380 	.word	0x24000380
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 face 	bl	800a6b0 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fbda 	bl	800a980 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fb77 	bl	800a980 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 f9c4 	bl	800a6b0 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 faa2 	bl	800a980 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b04      	cmp	r3, #4
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 f8ad 	bl	800a6b0 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 f9ba 	bl	800a980 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	24000380 	.word	0x24000380
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 fa5a 	bl	8019cac <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 f895 	bl	800a980 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f008 fee3 	bl	800a6b0 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f008 fff7 	bl	800a980 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 f8f5 	bl	8019cac <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 f8ec 	bl	8019cac <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f008 fdaf 	bl	800a6b0 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f008 fd9c 	bl	800a6b0 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 f837 	bl	8019cac <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 f830 	bl	8019cac <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f008 fcf5 	bl	800a6b0 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f008 fd0d 	bl	800a7d4 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 fdb5 	bl	800a980 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fc01 	bl	800a6b0 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	24000380 	.word	0x24000380
 8001f2c:	52002000 	.word	0x52002000

08001f30 <handle_error>:
#include "eeprom.h"

uint16_t VirtAddVarTab[NB_OF_VAR] = { 0x5555, 0x6666, 0x7777, 0x8888, 0x9999 };
uint16_t VarDataTab[NB_OF_VAR] = { 0, 0, 0, 0, 0 };

void handle_error(ERROR_STRUCT error) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	80b8      	strh	r0, [r7, #4]
	switch (error.detail) {
 8001f38:	797b      	ldrb	r3, [r7, #5]
 8001f3a:	2b14      	cmp	r3, #20
 8001f3c:	d831      	bhi.n	8001fa2 <handle_error+0x72>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <handle_error+0x14>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f99 	.word	0x08001f99
 8001f48:	08001f99 	.word	0x08001f99
 8001f4c:	08001f99 	.word	0x08001f99
 8001f50:	08001f99 	.word	0x08001f99
 8001f54:	08001f99 	.word	0x08001f99
 8001f58:	08001f99 	.word	0x08001f99
 8001f5c:	08001f99 	.word	0x08001f99
 8001f60:	08001f99 	.word	0x08001f99
 8001f64:	08001f99 	.word	0x08001f99
 8001f68:	08001f99 	.word	0x08001f99
 8001f6c:	08001f99 	.word	0x08001f99
 8001f70:	08001f99 	.word	0x08001f99
 8001f74:	08001f99 	.word	0x08001f99
 8001f78:	08001f99 	.word	0x08001f99
 8001f7c:	08001f99 	.word	0x08001f99
 8001f80:	08001f99 	.word	0x08001f99
 8001f84:	08001f99 	.word	0x08001f99
 8001f88:	08001f99 	.word	0x08001f99
 8001f8c:	08001fa3 	.word	0x08001fa3
 8001f90:	08001fa3 	.word	0x08001fa3
 8001f94:	08001fa3 	.word	0x08001fa3
	case ED_5vref:
	case ED_n200v:
	case ED_n800v:
	case ED_TMP1:
		// TODO: system reset?
		increment_reset_counter(error.category);
 8001f98:	793b      	ldrb	r3, [r7, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f806 	bl	8001fac <increment_reset_counter>
		break;
 8001fa0:	e000      	b.n	8001fa4 <handle_error+0x74>
		break;
	case ED_UNDEFINED:
		// TODO: send error packet?
		break;
	default:
		break;
 8001fa2:	bf00      	nop
	}
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <increment_reset_counter>:

void increment_reset_counter(ERROR_CATEGORY category) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
	uint16_t counter_value;
	counter_value = get_eeprom_error_counter(category);
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f80f 	bl	8001fdc <get_eeprom_error_counter>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	81fb      	strh	r3, [r7, #14]
	counter_value++;
 8001fc2:	89fb      	ldrh	r3, [r7, #14]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	81fb      	strh	r3, [r7, #14]
	set_eeprom_error_counter(category, counter_value);
 8001fc8:	89fa      	ldrh	r2, [r7, #14]
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f82a 	bl	8002028 <set_eeprom_error_counter>

}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <get_eeprom_error_counter>:

uint16_t get_eeprom_error_counter(ERROR_CATEGORY category) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
	uint16_t retval = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	81fb      	strh	r3, [r7, #14]
	HAL_FLASH_Unlock();
 8001fea:	f008 fbf3 	bl	800a7d4 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001fee:	f7fe fed3 	bl	8000d98 <EE_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <get_eeprom_error_counter+0x20>
		Error_Handler();
 8001ff8:	f001 fb50 	bl	800369c <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[category], &retval)) != HAL_OK) {
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	4a09      	ldr	r2, [pc, #36]	; (8002024 <get_eeprom_error_counter+0x48>)
 8002000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002004:	f107 020e 	add.w	r2, r7, #14
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fb7c 	bl	8001708 <EE_ReadVariable>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <get_eeprom_error_counter+0x3e>
		Error_Handler();
 8002016:	f001 fb41 	bl	800369c <Error_Handler>
	}
	return retval;
 800201a:	89fb      	ldrh	r3, [r7, #14]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	24000000 	.word	0x24000000

08002028 <set_eeprom_error_counter>:

void set_eeprom_error_counter(ERROR_CATEGORY category, uint16_t new_counter_value) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	460a      	mov	r2, r1
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	4613      	mov	r3, r2
 8002036:	80bb      	strh	r3, [r7, #4]
	if ((EE_WriteVariable(VirtAddVarTab[category], new_counter_value))
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <set_eeprom_error_counter+0x34>)
 800203c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002040:	88ba      	ldrh	r2, [r7, #4]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fba7 	bl	8001798 <EE_WriteVariable>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <set_eeprom_error_counter+0x2c>
			!= HAL_OK) {
		Error_Handler();
 8002050:	f001 fb24 	bl	800369c <Error_Handler>
	}
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	24000000 	.word	0x24000000

08002060 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <vApplicationTickHook+0x18>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	4a03      	ldr	r2, [pc, #12]	; (8002078 <vApplicationTickHook+0x18>)
 800206c:	6013      	str	r3, [r2, #0]
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	24001a78 	.word	0x24001a78

0800207c <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8002098:	4a24      	ldr	r2, [pc, #144]	; (800212c <MX_FREERTOS_Init+0x98>)
 800209a:	2100      	movs	r1, #0
 800209c:	4824      	ldr	r0, [pc, #144]	; (8002130 <MX_FREERTOS_Init+0x9c>)
 800209e:	f014 fc35 	bl	801690c <osThreadNew>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <MX_FREERTOS_Init+0xa0>)
 80020a6:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80020a8:	4a23      	ldr	r2, [pc, #140]	; (8002138 <MX_FREERTOS_Init+0xa4>)
 80020aa:	2100      	movs	r1, #0
 80020ac:	4823      	ldr	r0, [pc, #140]	; (800213c <MX_FREERTOS_Init+0xa8>)
 80020ae:	f014 fc2d 	bl	801690c <osThreadNew>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a22      	ldr	r2, [pc, #136]	; (8002140 <MX_FREERTOS_Init+0xac>)
 80020b6:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80020b8:	4a22      	ldr	r2, [pc, #136]	; (8002144 <MX_FREERTOS_Init+0xb0>)
 80020ba:	2100      	movs	r1, #0
 80020bc:	4822      	ldr	r0, [pc, #136]	; (8002148 <MX_FREERTOS_Init+0xb4>)
 80020be:	f014 fc25 	bl	801690c <osThreadNew>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a21      	ldr	r2, [pc, #132]	; (800214c <MX_FREERTOS_Init+0xb8>)
 80020c6:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 80020c8:	4a21      	ldr	r2, [pc, #132]	; (8002150 <MX_FREERTOS_Init+0xbc>)
 80020ca:	2100      	movs	r1, #0
 80020cc:	4821      	ldr	r0, [pc, #132]	; (8002154 <MX_FREERTOS_Init+0xc0>)
 80020ce:	f014 fc1d 	bl	801690c <osThreadNew>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4a20      	ldr	r2, [pc, #128]	; (8002158 <MX_FREERTOS_Init+0xc4>)
 80020d6:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 80020d8:	4a20      	ldr	r2, [pc, #128]	; (800215c <MX_FREERTOS_Init+0xc8>)
 80020da:	2100      	movs	r1, #0
 80020dc:	4820      	ldr	r0, [pc, #128]	; (8002160 <MX_FREERTOS_Init+0xcc>)
 80020de:	f014 fc15 	bl	801690c <osThreadNew>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a1f      	ldr	r2, [pc, #124]	; (8002164 <MX_FREERTOS_Init+0xd0>)
 80020e6:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 80020e8:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <MX_FREERTOS_Init+0xd4>)
 80020ea:	2100      	movs	r1, #0
 80020ec:	481f      	ldr	r0, [pc, #124]	; (800216c <MX_FREERTOS_Init+0xd8>)
 80020ee:	f014 fc0d 	bl	801690c <osThreadNew>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <MX_FREERTOS_Init+0xdc>)
 80020f6:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 80020f8:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <MX_FREERTOS_Init+0xe0>)
 80020fa:	2100      	movs	r1, #0
 80020fc:	481e      	ldr	r0, [pc, #120]	; (8002178 <MX_FREERTOS_Init+0xe4>)
 80020fe:	f014 fc05 	bl	801690c <osThreadNew>
 8002102:	4603      	mov	r3, r0
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <MX_FREERTOS_Init+0xe8>)
 8002106:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002108:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <MX_FREERTOS_Init+0xec>)
 800210a:	2100      	movs	r1, #0
 800210c:	481d      	ldr	r0, [pc, #116]	; (8002184 <MX_FREERTOS_Init+0xf0>)
 800210e:	f014 fbfd 	bl	801690c <osThreadNew>
 8002112:	4603      	mov	r3, r0
 8002114:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <MX_FREERTOS_Init+0xf4>)
 8002116:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002118:	4a1c      	ldr	r2, [pc, #112]	; (800218c <MX_FREERTOS_Init+0xf8>)
 800211a:	2100      	movs	r1, #0
 800211c:	481c      	ldr	r0, [pc, #112]	; (8002190 <MX_FREERTOS_Init+0xfc>)
 800211e:	f014 fbf5 	bl	801690c <osThreadNew>
 8002122:	4603      	mov	r3, r0
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <MX_FREERTOS_Init+0x100>)
 8002126:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	0801a938 	.word	0x0801a938
 8002130:	08002199 	.word	0x08002199
 8002134:	24000384 	.word	0x24000384
 8002138:	0801a95c 	.word	0x0801a95c
 800213c:	080021c1 	.word	0x080021c1
 8002140:	240005e4 	.word	0x240005e4
 8002144:	0801a980 	.word	0x0801a980
 8002148:	080021e9 	.word	0x080021e9
 800214c:	24000844 	.word	0x24000844
 8002150:	0801a9a4 	.word	0x0801a9a4
 8002154:	08002211 	.word	0x08002211
 8002158:	24000aa4 	.word	0x24000aa4
 800215c:	0801a9c8 	.word	0x0801a9c8
 8002160:	08002289 	.word	0x08002289
 8002164:	24000d04 	.word	0x24000d04
 8002168:	0801a9ec 	.word	0x0801a9ec
 800216c:	08002301 	.word	0x08002301
 8002170:	24000f64 	.word	0x24000f64
 8002174:	0801aa10 	.word	0x0801aa10
 8002178:	08002329 	.word	0x08002329
 800217c:	240011c4 	.word	0x240011c4
 8002180:	0801aa34 	.word	0x0801aa34
 8002184:	08002359 	.word	0x08002359
 8002188:	24001424 	.word	0x24001424
 800218c:	0801aa58 	.word	0x0801aa58
 8002190:	08002429 	.word	0x08002429
 8002194:	24001684 	.word	0x24001684

08002198 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <PMT_init+0x24>)
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a8:	2200      	movs	r2, #0
 80021aa:	2101      	movs	r1, #1
 80021ac:	f014 fd30 	bl	8016c10 <osEventFlagsWait>

		create_pmt_packet();
 80021b0:	f001 fa7a 	bl	80036a8 <create_pmt_packet>

		osThreadYield();
 80021b4:	f014 fc3c 	bl	8016a30 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80021b8:	e7f2      	b.n	80021a0 <PMT_init+0x8>
 80021ba:	bf00      	nop
 80021bc:	24001a28 	.word	0x24001a28

080021c0 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <ERPA_init+0x24>)
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d0:	2200      	movs	r2, #0
 80021d2:	2102      	movs	r1, #2
 80021d4:	f014 fd1c 	bl	8016c10 <osEventFlagsWait>

		create_erpa_packet();
 80021d8:	f001 faac 	bl	8003734 <create_erpa_packet>

		osThreadYield();
 80021dc:	f014 fc28 	bl	8016a30 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80021e0:	e7f2      	b.n	80021c8 <ERPA_init+0x8>
 80021e2:	bf00      	nop
 80021e4:	24001a28 	.word	0x24001a28

080021e8 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <HK_init+0x24>)
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021f8:	2200      	movs	r2, #0
 80021fa:	2104      	movs	r1, #4
 80021fc:	f014 fd08 	bl	8016c10 <osEventFlagsWait>

		create_hk_packet();
 8002200:	f001 faf6 	bl	80037f0 <create_hk_packet>

		osThreadYield();
 8002204:	f014 fc14 	bl	8016a30 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002208:	e7f2      	b.n	80021f0 <HK_init+0x8>
 800220a:	bf00      	nop
 800220c:	24001a28 	.word	0x24001a28

08002210 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <AUTOINIT_init+0x70>)
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002220:	2200      	movs	r2, #0
 8002222:	2104      	movs	r1, #4
 8002224:	f014 fcf4 	bl	8016c10 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e012      	b.n	8002254 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800222e:	4a15      	ldr	r2, [pc, #84]	; (8002284 <AUTOINIT_init+0x74>)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <AUTOINIT_init+0x74>)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	889b      	ldrh	r3, [r3, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	4619      	mov	r1, r3
 8002244:	f008 fed6 	bl	800aff4 <HAL_GPIO_WritePin>
			osDelay(100);
 8002248:	2064      	movs	r0, #100	; 0x64
 800224a:	f014 fc11 	bl	8016a70 <osDelay>
		for (int i = 0; i < 7; i++) {
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3301      	adds	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b06      	cmp	r3, #6
 8002258:	dde9      	ble.n	800222e <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 800225a:	2308      	movs	r3, #8
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	e008      	b.n	8002272 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2101      	movs	r1, #1
 8002266:	4618      	mov	r0, r3
 8002268:	f003 f83e 	bl	80052e8 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	3301      	adds	r3, #1
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b0d      	cmp	r3, #13
 8002276:	ddf3      	ble.n	8002260 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8002278:	f014 fbda 	bl	8016a30 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800227c:	e7cc      	b.n	8002218 <AUTOINIT_init+0x8>
 800227e:	bf00      	nop
 8002280:	24001a2c 	.word	0x24001a2c
 8002284:	0801aa7c 	.word	0x0801aa7c

08002288 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <AUTODEINIT_init+0x70>)
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002298:	2200      	movs	r2, #0
 800229a:	2108      	movs	r1, #8
 800229c:	f014 fcb8 	bl	8016c10 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80022a0:	230d      	movs	r3, #13
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e008      	b.n	80022b8 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 f81b 	bl	80052e8 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	dcf3      	bgt.n	80022a6 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 80022be:	2306      	movs	r3, #6
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	e012      	b.n	80022ea <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <AUTODEINIT_init+0x74>)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80022cc:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <AUTODEINIT_init+0x74>)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	889b      	ldrh	r3, [r3, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	4619      	mov	r1, r3
 80022da:	f008 fe8b 	bl	800aff4 <HAL_GPIO_WritePin>
			osDelay(100);
 80022de:	2064      	movs	r0, #100	; 0x64
 80022e0:	f014 fbc6 	bl	8016a70 <osDelay>
		for (int i = 6; i >= 0; i--) {
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	dae9      	bge.n	80022c4 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 80022f0:	f014 fb9e 	bl	8016a30 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80022f4:	e7cc      	b.n	8002290 <AUTODEINIT_init+0x8>
 80022f6:	bf00      	nop
 80022f8:	24001a2c 	.word	0x24001a2c
 80022fc:	0801aa7c 	.word	0x0801aa7c

08002300 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <Voltage_Monitor_init+0x24>)
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002310:	2200      	movs	r2, #0
 8002312:	2101      	movs	r1, #1
 8002314:	f014 fc7c 	bl	8016c10 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8002318:	f003 f806 	bl	8005328 <set_rail_monitor>
	  monitor_rails();
 800231c:	f003 f888 	bl	8005430 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002320:	e7f2      	b.n	8002308 <Voltage_Monitor_init+0x8>
 8002322:	bf00      	nop
 8002324:	24001a2c 	.word	0x24001a2c

08002328 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <STOP_init+0x2c>)
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002338:	2200      	movs	r2, #0
 800233a:	2102      	movs	r1, #2
 800233c:	f014 fc68 	bl	8016c10 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <STOP_init+0x2c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2102      	movs	r1, #2
 8002346:	4618      	mov	r0, r3
 8002348:	f014 fc30 	bl	8016bac <osEventFlagsClear>

	  enter_stop();
 800234c:	f001 f946 	bl	80035dc <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002350:	e7ee      	b.n	8002330 <STOP_init+0x8>
 8002352:	bf00      	nop
 8002354:	24001a2c 	.word	0x24001a2c

08002358 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af02      	add	r7, sp, #8
 800235e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <Science_init+0xb0>)
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002368:	2200      	movs	r2, #0
 800236a:	2101      	movs	r1, #1
 800236c:	f014 fc50 	bl	8016c10 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	e012      	b.n	800239c <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002376:	4a25      	ldr	r2, [pc, #148]	; (800240c <Science_init+0xb4>)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800237e:	4a23      	ldr	r2, [pc, #140]	; (800240c <Science_init+0xb4>)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	889b      	ldrh	r3, [r3, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	4619      	mov	r1, r3
 800238c:	f008 fe32 	bl	800aff4 <HAL_GPIO_WritePin>
			osDelay(200);
 8002390:	20c8      	movs	r0, #200	; 0xc8
 8002392:	f014 fb6d 	bl	8016a70 <osDelay>
		for (int i = 0; i < 9; i++) {
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3301      	adds	r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b08      	cmp	r3, #8
 80023a0:	dde9      	ble.n	8002376 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80023a2:	2308      	movs	r3, #8
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	e008      	b.n	80023ba <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2101      	movs	r1, #1
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 ff9a 	bl	80052e8 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	3301      	adds	r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b10      	cmp	r3, #16
 80023be:	ddf3      	ble.n	80023a8 <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 80023c0:	b672      	cpsid	i
}
 80023c2:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 80023c4:	2300      	movs	r3, #0
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2320      	movs	r3, #32
 80023ca:	4a11      	ldr	r2, [pc, #68]	; (8002410 <Science_init+0xb8>)
 80023cc:	2100      	movs	r1, #0
 80023ce:	4811      	ldr	r0, [pc, #68]	; (8002414 <Science_init+0xbc>)
 80023d0:	f004 ff8c 	bl	80072ec <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <Science_init+0xc0>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <Science_init+0xc4>)
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <Science_init+0xc8>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 80023e6:	f001 fb51 	bl	8003a8c <reset_packet_sequence_numbers>
		TIM2->CCR4 = 312;
 80023ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ee:	f44f 729c 	mov.w	r2, #312	; 0x138
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 80023f4:	2100      	movs	r1, #0
 80023f6:	480b      	ldr	r0, [pc, #44]	; (8002424 <Science_init+0xcc>)
 80023f8:	f010 f8a6 	bl	8012548 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 80023fc:	b662      	cpsie	i
}
 80023fe:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002400:	f014 fb16 	bl	8016a30 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002404:	e7ac      	b.n	8002360 <Science_init+0x8>
 8002406:	bf00      	nop
 8002408:	24001a30 	.word	0x24001a30
 800240c:	0801aa7c 	.word	0x0801aa7c
 8002410:	2400000c 	.word	0x2400000c
 8002414:	240002f4 	.word	0x240002f4
 8002418:	24001a74 	.word	0x24001a74
 800241c:	24001a75 	.word	0x24001a75
 8002420:	24001a78 	.word	0x24001a78
 8002424:	24001d44 	.word	0x24001d44

08002428 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <Idle_init+0x94>)
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002438:	2200      	movs	r2, #0
 800243a:	2102      	movs	r1, #2
 800243c:	f014 fbe8 	bl	8016c10 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 8002440:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <Idle_init+0x98>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800244a:	2200      	movs	r2, #0
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 800244e:	2100      	movs	r1, #0
 8002450:	481c      	ldr	r0, [pc, #112]	; (80024c4 <Idle_init+0x9c>)
 8002452:	f010 f9d3 	bl	80127fc <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <Idle_init+0xa0>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 800245c:	2100      	movs	r1, #0
 800245e:	481b      	ldr	r0, [pc, #108]	; (80024cc <Idle_init+0xa4>)
 8002460:	f005 f804 	bl	800746c <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002464:	2310      	movs	r3, #16
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e008      	b.n	800247c <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f002 ff39 	bl	80052e8 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3b01      	subs	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b07      	cmp	r3, #7
 8002480:	dcf3      	bgt.n	800246a <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8002482:	2308      	movs	r3, #8
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	e012      	b.n	80024ae <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002488:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <Idle_init+0xa8>)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002490:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <Idle_init+0xa8>)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	889b      	ldrh	r3, [r3, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	4619      	mov	r1, r3
 800249e:	f008 fda9 	bl	800aff4 <HAL_GPIO_WritePin>
			osDelay(200);
 80024a2:	20c8      	movs	r0, #200	; 0xc8
 80024a4:	f014 fae4 	bl	8016a70 <osDelay>
		for (int i = 8; i >= 0; i--) {
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	dae9      	bge.n	8002488 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 80024b4:	f014 fabc 	bl	8016a30 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80024b8:	e7ba      	b.n	8002430 <Idle_init+0x8>
 80024ba:	bf00      	nop
 80024bc:	24001a30 	.word	0x24001a30
 80024c0:	24001a75 	.word	0x24001a75
 80024c4:	24001d44 	.word	0x24001d44
 80024c8:	24001a74 	.word	0x24001a74
 80024cc:	240002f4 	.word	0x240002f4
 80024d0:	0801aa7c 	.word	0x0801aa7c

080024d4 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ea:	4b34      	ldr	r3, [pc, #208]	; (80025bc <MX_GPIO_Init+0xe8>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f0:	4a32      	ldr	r2, [pc, #200]	; (80025bc <MX_GPIO_Init+0xe8>)
 80024f2:	f043 0304 	orr.w	r3, r3, #4
 80024f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024fa:	4b30      	ldr	r3, [pc, #192]	; (80025bc <MX_GPIO_Init+0xe8>)
 80024fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002508:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <MX_GPIO_Init+0xe8>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250e:	4a2b      	ldr	r2, [pc, #172]	; (80025bc <MX_GPIO_Init+0xe8>)
 8002510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <MX_GPIO_Init+0xe8>)
 800251a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800251e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002526:	4b25      	ldr	r3, [pc, #148]	; (80025bc <MX_GPIO_Init+0xe8>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252c:	4a23      	ldr	r2, [pc, #140]	; (80025bc <MX_GPIO_Init+0xe8>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <MX_GPIO_Init+0xe8>)
 8002538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <MX_GPIO_Init+0xe8>)
 8002546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254a:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <MX_GPIO_Init+0xe8>)
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <MX_GPIO_Init+0xe8>)
 8002556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002562:	2200      	movs	r2, #0
 8002564:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002568:	4815      	ldr	r0, [pc, #84]	; (80025c0 <MX_GPIO_Init+0xec>)
 800256a:	f008 fd43 	bl	800aff4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800256e:	2200      	movs	r2, #0
 8002570:	2164      	movs	r1, #100	; 0x64
 8002572:	4814      	ldr	r0, [pc, #80]	; (80025c4 <MX_GPIO_Init+0xf0>)
 8002574:	f008 fd3e 	bl	800aff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002578:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 800257c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257e:	2301      	movs	r3, #1
 8002580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002582:	2302      	movs	r3, #2
 8002584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	480b      	ldr	r0, [pc, #44]	; (80025c0 <MX_GPIO_Init+0xec>)
 8002592:	f008 fb67 	bl	800ac64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002596:	2364      	movs	r3, #100	; 0x64
 8002598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259a:	2301      	movs	r3, #1
 800259c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800259e:	2302      	movs	r3, #2
 80025a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_GPIO_Init+0xf0>)
 80025ae:	f008 fb59 	bl	800ac64 <HAL_GPIO_Init>

}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	; 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	58024400 	.word	0x58024400
 80025c0:	58020800 	.word	0x58020800
 80025c4:	58020400 	.word	0x58020400

080025c8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025cc:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <MX_I2C1_Init+0x78>)
 80025ce:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <MX_I2C1_Init+0x7c>)
 80025d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 80025d2:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <MX_I2C1_Init+0x78>)
 80025d4:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <MX_I2C1_Init+0x80>)
 80025d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <MX_I2C1_Init+0x78>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <MX_I2C1_Init+0x78>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <MX_I2C1_Init+0x78>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <MX_I2C1_Init+0x78>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <MX_I2C1_Init+0x78>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <MX_I2C1_Init+0x78>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <MX_I2C1_Init+0x78>)
 80025fe:	2200      	movs	r2, #0
 8002600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002602:	480f      	ldr	r0, [pc, #60]	; (8002640 <MX_I2C1_Init+0x78>)
 8002604:	f008 fd10 	bl	800b028 <HAL_I2C_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800260e:	f001 f845 	bl	800369c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002612:	2100      	movs	r1, #0
 8002614:	480a      	ldr	r0, [pc, #40]	; (8002640 <MX_I2C1_Init+0x78>)
 8002616:	f00a ffaf 	bl	800d578 <HAL_I2CEx_ConfigAnalogFilter>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002620:	f001 f83c 	bl	800369c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002624:	2100      	movs	r1, #0
 8002626:	4806      	ldr	r0, [pc, #24]	; (8002640 <MX_I2C1_Init+0x78>)
 8002628:	f00a fff1 	bl	800d60e <HAL_I2CEx_ConfigDigitalFilter>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002632:	f001 f833 	bl	800369c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002636:	2001      	movs	r0, #1
 8002638:	f00b f836 	bl	800d6a8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	240018e4 	.word	0x240018e4
 8002644:	40005400 	.word	0x40005400
 8002648:	00100517 	.word	0x00100517

0800264c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b0ba      	sub	sp, #232	; 0xe8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	22c0      	movs	r2, #192	; 0xc0
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f017 fb1d 	bl	8019cac <memset>
  if(i2cHandle->Instance==I2C1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a5d      	ldr	r2, [pc, #372]	; (80027ec <HAL_I2C_MspInit+0x1a0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	f040 80b3 	bne.w	80027e4 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800267e:	f04f 0208 	mov.w	r2, #8
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800268a:	2300      	movs	r3, #0
 800268c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	4618      	mov	r0, r3
 8002696:	f00c f8c9 	bl	800e82c <HAL_RCCEx_PeriphCLKConfig>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80026a0:	f000 fffc 	bl	800369c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a4:	4b52      	ldr	r3, [pc, #328]	; (80027f0 <HAL_I2C_MspInit+0x1a4>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026aa:	4a51      	ldr	r2, [pc, #324]	; (80027f0 <HAL_I2C_MspInit+0x1a4>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b4:	4b4e      	ldr	r3, [pc, #312]	; (80027f0 <HAL_I2C_MspInit+0x1a4>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ca:	2312      	movs	r3, #18
 80026cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026dc:	2304      	movs	r3, #4
 80026de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026e6:	4619      	mov	r1, r3
 80026e8:	4842      	ldr	r0, [pc, #264]	; (80027f4 <HAL_I2C_MspInit+0x1a8>)
 80026ea:	f008 fabb 	bl	800ac64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026ee:	4b40      	ldr	r3, [pc, #256]	; (80027f0 <HAL_I2C_MspInit+0x1a4>)
 80026f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026f4:	4a3e      	ldr	r2, [pc, #248]	; (80027f0 <HAL_I2C_MspInit+0x1a4>)
 80026f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026fe:	4b3c      	ldr	r3, [pc, #240]	; (80027f0 <HAL_I2C_MspInit+0x1a4>)
 8002700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800270c:	4b3a      	ldr	r3, [pc, #232]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 800270e:	4a3b      	ldr	r2, [pc, #236]	; (80027fc <HAL_I2C_MspInit+0x1b0>)
 8002710:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 8002714:	2222      	movs	r2, #34	; 0x22
 8002716:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002718:	4b37      	ldr	r3, [pc, #220]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 800271a:	2240      	movs	r2, #64	; 0x40
 800271c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800271e:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 8002720:	2200      	movs	r2, #0
 8002722:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002724:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 8002726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800272a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800272c:	4b32      	ldr	r3, [pc, #200]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 800272e:	2200      	movs	r2, #0
 8002730:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002732:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002738:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800273e:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 8002740:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002744:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002746:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 8002748:	2200      	movs	r2, #0
 800274a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800274c:	482a      	ldr	r0, [pc, #168]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 800274e:	f005 f959 	bl	8007a04 <HAL_DMA_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002758:	f000 ffa0 	bl	800369c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a26      	ldr	r2, [pc, #152]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
 8002762:	4a25      	ldr	r2, [pc, #148]	; (80027f8 <HAL_I2C_MspInit+0x1ac>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002768:	4b25      	ldr	r3, [pc, #148]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 800276a:	4a26      	ldr	r2, [pc, #152]	; (8002804 <HAL_I2C_MspInit+0x1b8>)
 800276c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 8002770:	2221      	movs	r2, #33	; 0x21
 8002772:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277a:	4b21      	ldr	r3, [pc, #132]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002780:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 8002782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002786:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 800278a:	2200      	movs	r2, #0
 800278c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002794:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 800279c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80027a0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80027a8:	4815      	ldr	r0, [pc, #84]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 80027aa:	f005 f92b 	bl	8007a04 <HAL_DMA_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 80027b4:	f000 ff72 	bl	800369c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a11      	ldr	r2, [pc, #68]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 80027bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80027be:	4a10      	ldr	r2, [pc, #64]	; (8002800 <HAL_I2C_MspInit+0x1b4>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2105      	movs	r1, #5
 80027c8:	201f      	movs	r0, #31
 80027ca:	f004 fc75 	bl	80070b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027ce:	201f      	movs	r0, #31
 80027d0:	f004 fc8c 	bl	80070ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2105      	movs	r1, #5
 80027d8:	2020      	movs	r0, #32
 80027da:	f004 fc6d 	bl	80070b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80027de:	2020      	movs	r0, #32
 80027e0:	f004 fc84 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80027e4:	bf00      	nop
 80027e6:	37e8      	adds	r7, #232	; 0xe8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40005400 	.word	0x40005400
 80027f0:	58024400 	.word	0x58024400
 80027f4:	58020400 	.word	0x58020400
 80027f8:	24001938 	.word	0x24001938
 80027fc:	400200a0 	.word	0x400200a0
 8002800:	240019b0 	.word	0x240019b0
 8002804:	400200b8 	.word	0x400200b8

08002808 <__NVIC_SystemReset>:
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800280c:	f3bf 8f4f 	dsb	sy
}
 8002810:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <__NVIC_SystemReset+0x24>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800281a:	4904      	ldr	r1, [pc, #16]	; (800282c <__NVIC_SystemReset+0x24>)
 800281c:	4b04      	ldr	r3, [pc, #16]	; (8002830 <__NVIC_SystemReset+0x28>)
 800281e:	4313      	orrs	r3, r2
 8002820:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002822:	f3bf 8f4f 	dsb	sy
}
 8002826:	bf00      	nop
    __NOP();
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <__NVIC_SystemReset+0x20>
 800282c:	e000ed00 	.word	0xe000ed00
 8002830:	05fa0004 	.word	0x05fa0004

08002834 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d106      	bne.n	8002852 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2101      	movs	r1, #1
 800284a:	4618      	mov	r0, r3
 800284c:	f014 f96a 	bl	8016b24 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002850:	e032      	b.n	80028b8 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d12b      	bne.n	80028b2 <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2102      	movs	r1, #2
 800286a:	4618      	mov	r0, r3
 800286c:	f014 f95a 	bl	8016b24 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b20      	cmp	r3, #32
 8002878:	d113      	bne.n	80028a2 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2101      	movs	r1, #1
 8002880:	4618      	mov	r0, r3
 8002882:	f014 f94f 	bl	8016b24 <osEventFlagsSet>
			if (HK_ENABLED){
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2104      	movs	r1, #4
 8002896:	4618      	mov	r0, r3
 8002898:	f014 f944 	bl	8016b24 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	3301      	adds	r3, #1
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80028ae:	701a      	strb	r2, [r3, #0]
}
 80028b0:	e002      	b.n	80028b8 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 80028b2:	480a      	ldr	r0, [pc, #40]	; (80028dc <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 80028b4:	f017 fa70 	bl	8019d98 <puts>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	24001d44 	.word	0x24001d44
 80028c4:	24001a28 	.word	0x24001a28
 80028c8:	24001d90 	.word	0x24001d90
 80028cc:	24001a75 	.word	0x24001a75
 80028d0:	24001a7c 	.word	0x24001a7c
 80028d4:	24001a2c 	.word	0x24001a2c
 80028d8:	24001a74 	.word	0x24001a74
 80028dc:	0801a748 	.word	0x0801a748

080028e0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80028e8:	2201      	movs	r2, #1
 80028ea:	49f2      	ldr	r1, [pc, #968]	; (8002cb4 <HAL_UART_RxCpltCallback+0x3d4>)
 80028ec:	48f2      	ldr	r0, [pc, #968]	; (8002cb8 <HAL_UART_RxCpltCallback+0x3d8>)
 80028ee:	f011 fb0b 	bl	8013f08 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 80028f2:	4bf0      	ldr	r3, [pc, #960]	; (8002cb4 <HAL_UART_RxCpltCallback+0x3d4>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2be0      	cmp	r3, #224	; 0xe0
 80028fc:	f200 8421 	bhi.w	8003142 <HAL_UART_RxCpltCallback+0x862>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <HAL_UART_RxCpltCallback+0x28>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	08002ca1 	.word	0x08002ca1
 800290c:	08002ce5 	.word	0x08002ce5
 8002910:	08002d55 	.word	0x08002d55
 8002914:	08002d8f 	.word	0x08002d8f
 8002918:	08002dc7 	.word	0x08002dc7
 800291c:	08002e01 	.word	0x08002e01
 8002920:	08002e3d 	.word	0x08002e3d
 8002924:	08002e79 	.word	0x08002e79
 8002928:	08002eb3 	.word	0x08002eb3
 800292c:	08002ee7 	.word	0x08002ee7
 8002930:	08002f1b 	.word	0x08002f1b
 8002934:	08002f4d 	.word	0x08002f4d
 8002938:	08002f77 	.word	0x08002f77
 800293c:	08003055 	.word	0x08003055
 8002940:	080030bd 	.word	0x080030bd
 8002944:	080030e5 	.word	0x080030e5
 8002948:	08002c8d 	.word	0x08002c8d
 800294c:	08002cc9 	.word	0x08002cc9
 8002950:	08002d37 	.word	0x08002d37
 8002954:	08002d73 	.word	0x08002d73
 8002958:	08002dab 	.word	0x08002dab
 800295c:	08002de3 	.word	0x08002de3
 8002960:	08002e1f 	.word	0x08002e1f
 8002964:	08002e5b 	.word	0x08002e5b
 8002968:	08002e97 	.word	0x08002e97
 800296c:	08002ecf 	.word	0x08002ecf
 8002970:	08002ef7 	.word	0x08002ef7
 8002974:	08002f31 	.word	0x08002f31
 8002978:	08002f5d 	.word	0x08002f5d
 800297c:	08002f85 	.word	0x08002f85
 8002980:	08003095 	.word	0x08003095
 8002984:	08003143 	.word	0x08003143
 8002988:	08003143 	.word	0x08003143
 800298c:	08003143 	.word	0x08003143
 8002990:	08003143 	.word	0x08003143
 8002994:	08003143 	.word	0x08003143
 8002998:	08003143 	.word	0x08003143
 800299c:	08003143 	.word	0x08003143
 80029a0:	08003143 	.word	0x08003143
 80029a4:	08003143 	.word	0x08003143
 80029a8:	08003143 	.word	0x08003143
 80029ac:	08003143 	.word	0x08003143
 80029b0:	08003143 	.word	0x08003143
 80029b4:	08003143 	.word	0x08003143
 80029b8:	08003143 	.word	0x08003143
 80029bc:	08003143 	.word	0x08003143
 80029c0:	08003143 	.word	0x08003143
 80029c4:	08003143 	.word	0x08003143
 80029c8:	08003143 	.word	0x08003143
 80029cc:	08003143 	.word	0x08003143
 80029d0:	08003143 	.word	0x08003143
 80029d4:	08003143 	.word	0x08003143
 80029d8:	08003143 	.word	0x08003143
 80029dc:	08003143 	.word	0x08003143
 80029e0:	08003143 	.word	0x08003143
 80029e4:	08003143 	.word	0x08003143
 80029e8:	08003143 	.word	0x08003143
 80029ec:	08003143 	.word	0x08003143
 80029f0:	08003143 	.word	0x08003143
 80029f4:	08003143 	.word	0x08003143
 80029f8:	08003143 	.word	0x08003143
 80029fc:	08003143 	.word	0x08003143
 8002a00:	08003143 	.word	0x08003143
 8002a04:	08003143 	.word	0x08003143
 8002a08:	08003143 	.word	0x08003143
 8002a0c:	08003143 	.word	0x08003143
 8002a10:	08003143 	.word	0x08003143
 8002a14:	08003143 	.word	0x08003143
 8002a18:	08003143 	.word	0x08003143
 8002a1c:	08003143 	.word	0x08003143
 8002a20:	08003143 	.word	0x08003143
 8002a24:	08003143 	.word	0x08003143
 8002a28:	08003143 	.word	0x08003143
 8002a2c:	08003143 	.word	0x08003143
 8002a30:	08003143 	.word	0x08003143
 8002a34:	08003143 	.word	0x08003143
 8002a38:	08003143 	.word	0x08003143
 8002a3c:	08003143 	.word	0x08003143
 8002a40:	08003143 	.word	0x08003143
 8002a44:	08003143 	.word	0x08003143
 8002a48:	08003143 	.word	0x08003143
 8002a4c:	08003143 	.word	0x08003143
 8002a50:	08003143 	.word	0x08003143
 8002a54:	08003143 	.word	0x08003143
 8002a58:	08003143 	.word	0x08003143
 8002a5c:	08003143 	.word	0x08003143
 8002a60:	08003143 	.word	0x08003143
 8002a64:	08003143 	.word	0x08003143
 8002a68:	08003143 	.word	0x08003143
 8002a6c:	08003143 	.word	0x08003143
 8002a70:	08003143 	.word	0x08003143
 8002a74:	08003143 	.word	0x08003143
 8002a78:	08003143 	.word	0x08003143
 8002a7c:	08003143 	.word	0x08003143
 8002a80:	08003143 	.word	0x08003143
 8002a84:	08003143 	.word	0x08003143
 8002a88:	08003143 	.word	0x08003143
 8002a8c:	08003143 	.word	0x08003143
 8002a90:	08003143 	.word	0x08003143
 8002a94:	08003143 	.word	0x08003143
 8002a98:	08003143 	.word	0x08003143
 8002a9c:	08003143 	.word	0x08003143
 8002aa0:	08003143 	.word	0x08003143
 8002aa4:	08003143 	.word	0x08003143
 8002aa8:	08003143 	.word	0x08003143
 8002aac:	08003143 	.word	0x08003143
 8002ab0:	08003143 	.word	0x08003143
 8002ab4:	08003143 	.word	0x08003143
 8002ab8:	08003143 	.word	0x08003143
 8002abc:	08003143 	.word	0x08003143
 8002ac0:	08003143 	.word	0x08003143
 8002ac4:	08003143 	.word	0x08003143
 8002ac8:	08003143 	.word	0x08003143
 8002acc:	08003143 	.word	0x08003143
 8002ad0:	08003143 	.word	0x08003143
 8002ad4:	08003143 	.word	0x08003143
 8002ad8:	08003143 	.word	0x08003143
 8002adc:	08003143 	.word	0x08003143
 8002ae0:	08003143 	.word	0x08003143
 8002ae4:	08003143 	.word	0x08003143
 8002ae8:	08003143 	.word	0x08003143
 8002aec:	08003143 	.word	0x08003143
 8002af0:	08003143 	.word	0x08003143
 8002af4:	08003143 	.word	0x08003143
 8002af8:	08003143 	.word	0x08003143
 8002afc:	08003143 	.word	0x08003143
 8002b00:	08003143 	.word	0x08003143
 8002b04:	08003143 	.word	0x08003143
 8002b08:	08003143 	.word	0x08003143
 8002b0c:	08003143 	.word	0x08003143
 8002b10:	08003143 	.word	0x08003143
 8002b14:	08003143 	.word	0x08003143
 8002b18:	08003143 	.word	0x08003143
 8002b1c:	08003143 	.word	0x08003143
 8002b20:	08003143 	.word	0x08003143
 8002b24:	08003143 	.word	0x08003143
 8002b28:	08003143 	.word	0x08003143
 8002b2c:	08003143 	.word	0x08003143
 8002b30:	08003143 	.word	0x08003143
 8002b34:	08003143 	.word	0x08003143
 8002b38:	08003143 	.word	0x08003143
 8002b3c:	08003143 	.word	0x08003143
 8002b40:	08003143 	.word	0x08003143
 8002b44:	08003143 	.word	0x08003143
 8002b48:	08003143 	.word	0x08003143
 8002b4c:	08003143 	.word	0x08003143
 8002b50:	08003143 	.word	0x08003143
 8002b54:	08003143 	.word	0x08003143
 8002b58:	08003143 	.word	0x08003143
 8002b5c:	08003143 	.word	0x08003143
 8002b60:	08003143 	.word	0x08003143
 8002b64:	08003143 	.word	0x08003143
 8002b68:	08003143 	.word	0x08003143
 8002b6c:	08003143 	.word	0x08003143
 8002b70:	08003143 	.word	0x08003143
 8002b74:	08003143 	.word	0x08003143
 8002b78:	08003143 	.word	0x08003143
 8002b7c:	08003143 	.word	0x08003143
 8002b80:	08003143 	.word	0x08003143
 8002b84:	08003143 	.word	0x08003143
 8002b88:	08003143 	.word	0x08003143
 8002b8c:	08003143 	.word	0x08003143
 8002b90:	08003143 	.word	0x08003143
 8002b94:	08003143 	.word	0x08003143
 8002b98:	08003143 	.word	0x08003143
 8002b9c:	08003143 	.word	0x08003143
 8002ba0:	08003143 	.word	0x08003143
 8002ba4:	08003143 	.word	0x08003143
 8002ba8:	08003143 	.word	0x08003143
 8002bac:	08003143 	.word	0x08003143
 8002bb0:	08003143 	.word	0x08003143
 8002bb4:	08003143 	.word	0x08003143
 8002bb8:	08003143 	.word	0x08003143
 8002bbc:	08003143 	.word	0x08003143
 8002bc0:	08003143 	.word	0x08003143
 8002bc4:	08003121 	.word	0x08003121
 8002bc8:	08003143 	.word	0x08003143
 8002bcc:	08003143 	.word	0x08003143
 8002bd0:	08003143 	.word	0x08003143
 8002bd4:	08003143 	.word	0x08003143
 8002bd8:	08003143 	.word	0x08003143
 8002bdc:	08003143 	.word	0x08003143
 8002be0:	08003143 	.word	0x08003143
 8002be4:	08003143 	.word	0x08003143
 8002be8:	08003143 	.word	0x08003143
 8002bec:	08003143 	.word	0x08003143
 8002bf0:	08003143 	.word	0x08003143
 8002bf4:	08003143 	.word	0x08003143
 8002bf8:	08003143 	.word	0x08003143
 8002bfc:	08003143 	.word	0x08003143
 8002c00:	08003143 	.word	0x08003143
 8002c04:	08003127 	.word	0x08003127
 8002c08:	08003143 	.word	0x08003143
 8002c0c:	08003143 	.word	0x08003143
 8002c10:	08003143 	.word	0x08003143
 8002c14:	08003143 	.word	0x08003143
 8002c18:	08003143 	.word	0x08003143
 8002c1c:	08003143 	.word	0x08003143
 8002c20:	08003143 	.word	0x08003143
 8002c24:	08003143 	.word	0x08003143
 8002c28:	08003143 	.word	0x08003143
 8002c2c:	08003143 	.word	0x08003143
 8002c30:	08003143 	.word	0x08003143
 8002c34:	08003143 	.word	0x08003143
 8002c38:	08003143 	.word	0x08003143
 8002c3c:	08003143 	.word	0x08003143
 8002c40:	08003143 	.word	0x08003143
 8002c44:	08003135 	.word	0x08003135
 8002c48:	0800310d 	.word	0x0800310d
 8002c4c:	08003143 	.word	0x08003143
 8002c50:	08003143 	.word	0x08003143
 8002c54:	08003143 	.word	0x08003143
 8002c58:	08003143 	.word	0x08003143
 8002c5c:	08003143 	.word	0x08003143
 8002c60:	08003143 	.word	0x08003143
 8002c64:	08003143 	.word	0x08003143
 8002c68:	08003143 	.word	0x08003143
 8002c6c:	08003143 	.word	0x08003143
 8002c70:	08003143 	.word	0x08003143
 8002c74:	08003143 	.word	0x08003143
 8002c78:	08003143 	.word	0x08003143
 8002c7c:	08003143 	.word	0x08003143
 8002c80:	08003143 	.word	0x08003143
 8002c84:	08003143 	.word	0x08003143
 8002c88:	080030f9 	.word	0x080030f9
	case 0x10: {
		printf("SDN1 ON\n");
 8002c8c:	480b      	ldr	r0, [pc, #44]	; (8002cbc <HAL_UART_RxCpltCallback+0x3dc>)
 8002c8e:	f017 f883 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_UART_RxCpltCallback+0x3e0>)
 8002c94:	2104      	movs	r1, #4
 8002c96:	2201      	movs	r2, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f008 f9ab 	bl	800aff4 <HAL_GPIO_WritePin>
		break;
 8002c9e:	e25b      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8002ca0:	4808      	ldr	r0, [pc, #32]	; (8002cc4 <HAL_UART_RxCpltCallback+0x3e4>)
 8002ca2:	f017 f879 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_UART_RxCpltCallback+0x3e0>)
 8002ca8:	2104      	movs	r1, #4
 8002caa:	2200      	movs	r2, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f008 f9a1 	bl	800aff4 <HAL_GPIO_WritePin>
		break;
 8002cb2:	e251      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
 8002cb4:	24001a34 	.word	0x24001a34
 8002cb8:	24001ddc 	.word	0x24001ddc
 8002cbc:	0801a760 	.word	0x0801a760
 8002cc0:	58020400 	.word	0x58020400
 8002cc4:	0801a768 	.word	0x0801a768
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8002cc8:	48bf      	ldr	r0, [pc, #764]	; (8002fc8 <HAL_UART_RxCpltCallback+0x6e8>)
 8002cca:	f017 f865 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8002cce:	4bbf      	ldr	r3, [pc, #764]	; (8002fcc <HAL_UART_RxCpltCallback+0x6ec>)
 8002cd0:	2120      	movs	r1, #32
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f008 f98d 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8002cda:	2101      	movs	r1, #1
 8002cdc:	2008      	movs	r0, #8
 8002cde:	f002 fb03 	bl	80052e8 <set_rail_monitor_enable>
		break;
 8002ce2:	e239      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8002ce4:	48ba      	ldr	r0, [pc, #744]	; (8002fd0 <HAL_UART_RxCpltCallback+0x6f0>)
 8002ce6:	f017 f857 	bl	8019d98 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8002cea:	2308      	movs	r3, #8
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e00f      	b.n	8002d10 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002cf0:	4ab8      	ldr	r2, [pc, #736]	; (8002fd4 <HAL_UART_RxCpltCallback+0x6f4>)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002cf8:	4ab6      	ldr	r2, [pc, #728]	; (8002fd4 <HAL_UART_RxCpltCallback+0x6f4>)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	889b      	ldrh	r3, [r3, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	4619      	mov	r1, r3
 8002d06:	f008 f975 	bl	800aff4 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	dcec      	bgt.n	8002cf0 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002d16:	2310      	movs	r3, #16
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	e008      	b.n	8002d2e <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2100      	movs	r1, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f002 fae0 	bl	80052e8 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b07      	cmp	r3, #7
 8002d32:	dcf3      	bgt.n	8002d1c <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8002d34:	e210      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8002d36:	48a8      	ldr	r0, [pc, #672]	; (8002fd8 <HAL_UART_RxCpltCallback+0x6f8>)
 8002d38:	f017 f82e 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8002d3c:	4ba7      	ldr	r3, [pc, #668]	; (8002fdc <HAL_UART_RxCpltCallback+0x6fc>)
 8002d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d42:	2201      	movs	r2, #1
 8002d44:	4618      	mov	r0, r3
 8002d46:	f008 f955 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	2009      	movs	r0, #9
 8002d4e:	f002 facb 	bl	80052e8 <set_rail_monitor_enable>

		break;
 8002d52:	e201      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8002d54:	48a2      	ldr	r0, [pc, #648]	; (8002fe0 <HAL_UART_RxCpltCallback+0x700>)
 8002d56:	f017 f81f 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8002d5a:	4ba0      	ldr	r3, [pc, #640]	; (8002fdc <HAL_UART_RxCpltCallback+0x6fc>)
 8002d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d60:	2200      	movs	r2, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f008 f946 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2009      	movs	r0, #9
 8002d6c:	f002 fabc 	bl	80052e8 <set_rail_monitor_enable>
		break;
 8002d70:	e1f2      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8002d72:	489c      	ldr	r0, [pc, #624]	; (8002fe4 <HAL_UART_RxCpltCallback+0x704>)
 8002d74:	f017 f810 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8002d78:	4b98      	ldr	r3, [pc, #608]	; (8002fdc <HAL_UART_RxCpltCallback+0x6fc>)
 8002d7a:	2180      	movs	r1, #128	; 0x80
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f008 f938 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8002d84:	2101      	movs	r1, #1
 8002d86:	200a      	movs	r0, #10
 8002d88:	f002 faae 	bl	80052e8 <set_rail_monitor_enable>

		break;
 8002d8c:	e1e4      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8002d8e:	4896      	ldr	r0, [pc, #600]	; (8002fe8 <HAL_UART_RxCpltCallback+0x708>)
 8002d90:	f017 f802 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8002d94:	4b91      	ldr	r3, [pc, #580]	; (8002fdc <HAL_UART_RxCpltCallback+0x6fc>)
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	2200      	movs	r2, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f008 f92a 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8002da0:	2100      	movs	r1, #0
 8002da2:	200a      	movs	r0, #10
 8002da4:	f002 faa0 	bl	80052e8 <set_rail_monitor_enable>
		break;
 8002da8:	e1d6      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8002daa:	4890      	ldr	r0, [pc, #576]	; (8002fec <HAL_UART_RxCpltCallback+0x70c>)
 8002dac:	f016 fff4 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8002db0:	4b8a      	ldr	r3, [pc, #552]	; (8002fdc <HAL_UART_RxCpltCallback+0x6fc>)
 8002db2:	2140      	movs	r1, #64	; 0x40
 8002db4:	2201      	movs	r2, #1
 8002db6:	4618      	mov	r0, r3
 8002db8:	f008 f91c 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	200b      	movs	r0, #11
 8002dc0:	f002 fa92 	bl	80052e8 <set_rail_monitor_enable>

		break;
 8002dc4:	e1c8      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8002dc6:	488a      	ldr	r0, [pc, #552]	; (8002ff0 <HAL_UART_RxCpltCallback+0x710>)
 8002dc8:	f016 ffe6 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8002dcc:	4b83      	ldr	r3, [pc, #524]	; (8002fdc <HAL_UART_RxCpltCallback+0x6fc>)
 8002dce:	2140      	movs	r1, #64	; 0x40
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f008 f90e 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8002dd8:	2100      	movs	r1, #0
 8002dda:	200b      	movs	r0, #11
 8002ddc:	f002 fa84 	bl	80052e8 <set_rail_monitor_enable>
		break;
 8002de0:	e1ba      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8002de2:	4884      	ldr	r0, [pc, #528]	; (8002ff4 <HAL_UART_RxCpltCallback+0x714>)
 8002de4:	f016 ffd8 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8002de8:	4b7c      	ldr	r3, [pc, #496]	; (8002fdc <HAL_UART_RxCpltCallback+0x6fc>)
 8002dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dee:	2201      	movs	r2, #1
 8002df0:	4618      	mov	r0, r3
 8002df2:	f008 f8ff 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8002df6:	2101      	movs	r1, #1
 8002df8:	200c      	movs	r0, #12
 8002dfa:	f002 fa75 	bl	80052e8 <set_rail_monitor_enable>

		break;
 8002dfe:	e1ab      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8002e00:	487d      	ldr	r0, [pc, #500]	; (8002ff8 <HAL_UART_RxCpltCallback+0x718>)
 8002e02:	f016 ffc9 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8002e06:	4b75      	ldr	r3, [pc, #468]	; (8002fdc <HAL_UART_RxCpltCallback+0x6fc>)
 8002e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f008 f8f0 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8002e14:	2100      	movs	r1, #0
 8002e16:	200c      	movs	r0, #12
 8002e18:	f002 fa66 	bl	80052e8 <set_rail_monitor_enable>
		break;
 8002e1c:	e19c      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8002e1e:	4877      	ldr	r0, [pc, #476]	; (8002ffc <HAL_UART_RxCpltCallback+0x71c>)
 8002e20:	f016 ffba 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8002e24:	4b6d      	ldr	r3, [pc, #436]	; (8002fdc <HAL_UART_RxCpltCallback+0x6fc>)
 8002e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f008 f8e1 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8002e32:	2101      	movs	r1, #1
 8002e34:	200d      	movs	r0, #13
 8002e36:	f002 fa57 	bl	80052e8 <set_rail_monitor_enable>

		break;
 8002e3a:	e18d      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8002e3c:	4870      	ldr	r0, [pc, #448]	; (8003000 <HAL_UART_RxCpltCallback+0x720>)
 8002e3e:	f016 ffab 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8002e42:	4b66      	ldr	r3, [pc, #408]	; (8002fdc <HAL_UART_RxCpltCallback+0x6fc>)
 8002e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e48:	2200      	movs	r2, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f008 f8d2 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8002e50:	2100      	movs	r1, #0
 8002e52:	200d      	movs	r0, #13
 8002e54:	f002 fa48 	bl	80052e8 <set_rail_monitor_enable>
		break;
 8002e58:	e17e      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8002e5a:	486a      	ldr	r0, [pc, #424]	; (8003004 <HAL_UART_RxCpltCallback+0x724>)
 8002e5c:	f016 ff9c 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8002e60:	4b5e      	ldr	r3, [pc, #376]	; (8002fdc <HAL_UART_RxCpltCallback+0x6fc>)
 8002e62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e66:	2201      	movs	r2, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f008 f8c3 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8002e6e:	2101      	movs	r1, #1
 8002e70:	200f      	movs	r0, #15
 8002e72:	f002 fa39 	bl	80052e8 <set_rail_monitor_enable>

		break;
 8002e76:	e16f      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8002e78:	4863      	ldr	r0, [pc, #396]	; (8003008 <HAL_UART_RxCpltCallback+0x728>)
 8002e7a:	f016 ff8d 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8002e7e:	4b57      	ldr	r3, [pc, #348]	; (8002fdc <HAL_UART_RxCpltCallback+0x6fc>)
 8002e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e84:	2200      	movs	r2, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f008 f8b4 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	200f      	movs	r0, #15
 8002e90:	f002 fa2a 	bl	80052e8 <set_rail_monitor_enable>
		break;
 8002e94:	e160      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8002e96:	485d      	ldr	r0, [pc, #372]	; (800300c <HAL_UART_RxCpltCallback+0x72c>)
 8002e98:	f016 ff7e 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8002e9c:	4b4b      	ldr	r3, [pc, #300]	; (8002fcc <HAL_UART_RxCpltCallback+0x6ec>)
 8002e9e:	2140      	movs	r1, #64	; 0x40
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f008 f8a6 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	2010      	movs	r0, #16
 8002eac:	f002 fa1c 	bl	80052e8 <set_rail_monitor_enable>

		break;
 8002eb0:	e152      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8002eb2:	4857      	ldr	r0, [pc, #348]	; (8003010 <HAL_UART_RxCpltCallback+0x730>)
 8002eb4:	f016 ff70 	bl	8019d98 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8002eb8:	4b44      	ldr	r3, [pc, #272]	; (8002fcc <HAL_UART_RxCpltCallback+0x6ec>)
 8002eba:	2140      	movs	r1, #64	; 0x40
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f008 f898 	bl	800aff4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	2010      	movs	r0, #16
 8002ec8:	f002 fa0e 	bl	80052e8 <set_rail_monitor_enable>
		break;
 8002ecc:	e144      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8002ece:	4851      	ldr	r0, [pc, #324]	; (8003014 <HAL_UART_RxCpltCallback+0x734>)
 8002ed0:	f016 ff62 	bl	8019d98 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2320      	movs	r3, #32
 8002eda:	4a4f      	ldr	r2, [pc, #316]	; (8003018 <HAL_UART_RxCpltCallback+0x738>)
 8002edc:	2100      	movs	r1, #0
 8002ede:	484f      	ldr	r0, [pc, #316]	; (800301c <HAL_UART_RxCpltCallback+0x73c>)
 8002ee0:	f004 fa04 	bl	80072ec <HAL_DAC_Start_DMA>
		break;
 8002ee4:	e138      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8002ee6:	484e      	ldr	r0, [pc, #312]	; (8003020 <HAL_UART_RxCpltCallback+0x740>)
 8002ee8:	f016 ff56 	bl	8019d98 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8002eec:	2100      	movs	r1, #0
 8002eee:	484b      	ldr	r0, [pc, #300]	; (800301c <HAL_UART_RxCpltCallback+0x73c>)
 8002ef0:	f004 fabc 	bl	800746c <HAL_DAC_Stop_DMA>
		break;
 8002ef4:	e130      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8002ef6:	484b      	ldr	r0, [pc, #300]	; (8003024 <HAL_UART_RxCpltCallback+0x744>)
 8002ef8:	f016 ff4e 	bl	8019d98 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002efc:	4b4a      	ldr	r3, [pc, #296]	; (8003028 <HAL_UART_RxCpltCallback+0x748>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2102      	movs	r1, #2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f013 fe0e 	bl	8016b24 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8002f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f0c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 8002f12:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_UART_RxCpltCallback+0x74c>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]

		break;
 8002f18:	e11e      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8002f1a:	4845      	ldr	r0, [pc, #276]	; (8003030 <HAL_UART_RxCpltCallback+0x750>)
 8002f1c:	f016 ff3c 	bl	8019d98 <puts>
		ERPA_ENABLED = 0;
 8002f20:	4b42      	ldr	r3, [pc, #264]	; (800302c <HAL_UART_RxCpltCallback+0x74c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002f2e:	e113      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8002f30:	4840      	ldr	r0, [pc, #256]	; (8003034 <HAL_UART_RxCpltCallback+0x754>)
 8002f32:	f016 ff31 	bl	8019d98 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002f36:	2100      	movs	r1, #0
 8002f38:	483f      	ldr	r0, [pc, #252]	; (8003038 <HAL_UART_RxCpltCallback+0x758>)
 8002f3a:	f00f fb05 	bl	8012548 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	; (8003028 <HAL_UART_RxCpltCallback+0x748>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f013 fded 	bl	8016b24 <osEventFlagsSet>
		break;
 8002f4a:	e105      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8002f4c:	483b      	ldr	r0, [pc, #236]	; (800303c <HAL_UART_RxCpltCallback+0x75c>)
 8002f4e:	f016 ff23 	bl	8019d98 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8002f52:	2100      	movs	r1, #0
 8002f54:	4838      	ldr	r0, [pc, #224]	; (8003038 <HAL_UART_RxCpltCallback+0x758>)
 8002f56:	f00f fc51 	bl	80127fc <HAL_TIM_OC_Stop_IT>
		break;
 8002f5a:	e0fd      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x1C: {
		printf("HK ON \n");
 8002f5c:	4838      	ldr	r0, [pc, #224]	; (8003040 <HAL_UART_RxCpltCallback+0x760>)
 8002f5e:	f016 ff1b 	bl	8019d98 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <HAL_UART_RxCpltCallback+0x748>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2104      	movs	r1, #4
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f013 fddb 	bl	8016b24 <osEventFlagsSet>
		HK_ENABLED = 1;
 8002f6e:	4b35      	ldr	r3, [pc, #212]	; (8003044 <HAL_UART_RxCpltCallback+0x764>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
		break;
 8002f74:	e0f0      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8002f76:	4834      	ldr	r0, [pc, #208]	; (8003048 <HAL_UART_RxCpltCallback+0x768>)
 8002f78:	f016 ff0e 	bl	8019d98 <puts>
		HK_ENABLED = 0;
 8002f7c:	4b31      	ldr	r3, [pc, #196]	; (8003044 <HAL_UART_RxCpltCallback+0x764>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
		break;
 8002f82:	e0e9      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x1D: {
		printf("Step Up\n");
 8002f84:	4831      	ldr	r0, [pc, #196]	; (800304c <HAL_UART_RxCpltCallback+0x76c>)
 8002f86:	f016 ff07 	bl	8019d98 <puts>
		if (step < 14) {
 8002f8a:	4b31      	ldr	r3, [pc, #196]	; (8003050 <HAL_UART_RxCpltCallback+0x770>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b0d      	cmp	r3, #13
 8002f92:	f200 80da 	bhi.w	800314a <HAL_UART_RxCpltCallback+0x86a>
			step += 2;
 8002f96:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <HAL_UART_RxCpltCallback+0x770>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <HAL_UART_RxCpltCallback+0x770>)
 8002fa2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8002fa4:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <HAL_UART_RxCpltCallback+0x770>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <HAL_UART_RxCpltCallback+0x738>)
 8002fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4819      	ldr	r0, [pc, #100]	; (800301c <HAL_UART_RxCpltCallback+0x73c>)
 8002fb8:	f004 fafb 	bl	80075b2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4817      	ldr	r0, [pc, #92]	; (800301c <HAL_UART_RxCpltCallback+0x73c>)
 8002fc0:	f004 f93c 	bl	800723c <HAL_DAC_Start>
		}
		break;
 8002fc4:	e0c1      	b.n	800314a <HAL_UART_RxCpltCallback+0x86a>
 8002fc6:	bf00      	nop
 8002fc8:	0801a774 	.word	0x0801a774
 8002fcc:	58020400 	.word	0x58020400
 8002fd0:	0801a780 	.word	0x0801a780
 8002fd4:	0801aa7c 	.word	0x0801aa7c
 8002fd8:	0801a78c 	.word	0x0801a78c
 8002fdc:	58020800 	.word	0x58020800
 8002fe0:	0801a798 	.word	0x0801a798
 8002fe4:	0801a7a8 	.word	0x0801a7a8
 8002fe8:	0801a7b4 	.word	0x0801a7b4
 8002fec:	0801a7c0 	.word	0x0801a7c0
 8002ff0:	0801a7cc 	.word	0x0801a7cc
 8002ff4:	0801a7dc 	.word	0x0801a7dc
 8002ff8:	0801a7e8 	.word	0x0801a7e8
 8002ffc:	0801a7f4 	.word	0x0801a7f4
 8003000:	0801a800 	.word	0x0801a800
 8003004:	0801a80c 	.word	0x0801a80c
 8003008:	0801a81c 	.word	0x0801a81c
 800300c:	0801a82c 	.word	0x0801a82c
 8003010:	0801a838 	.word	0x0801a838
 8003014:	0801a848 	.word	0x0801a848
 8003018:	2400000c 	.word	0x2400000c
 800301c:	240002f4 	.word	0x240002f4
 8003020:	0801a858 	.word	0x0801a858
 8003024:	0801a868 	.word	0x0801a868
 8003028:	24001a28 	.word	0x24001a28
 800302c:	24001a75 	.word	0x24001a75
 8003030:	0801a870 	.word	0x0801a870
 8003034:	0801a87c 	.word	0x0801a87c
 8003038:	24001d44 	.word	0x24001d44
 800303c:	0801a884 	.word	0x0801a884
 8003040:	0801a88c 	.word	0x0801a88c
 8003044:	24001a74 	.word	0x24001a74
 8003048:	0801a894 	.word	0x0801a894
 800304c:	0801a89c 	.word	0x0801a89c
 8003050:	24001a76 	.word	0x24001a76
	}
	case 0x0D: {
		printf("Step Down\n");
 8003054:	4842      	ldr	r0, [pc, #264]	; (8003160 <HAL_UART_RxCpltCallback+0x880>)
 8003056:	f016 fe9f 	bl	8019d98 <puts>
		if (step > 1) {
 800305a:	4b42      	ldr	r3, [pc, #264]	; (8003164 <HAL_UART_RxCpltCallback+0x884>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d974      	bls.n	800314e <HAL_UART_RxCpltCallback+0x86e>
			step -= 2;
 8003064:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <HAL_UART_RxCpltCallback+0x884>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3b02      	subs	r3, #2
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <HAL_UART_RxCpltCallback+0x884>)
 8003070:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003072:	4b3c      	ldr	r3, [pc, #240]	; (8003164 <HAL_UART_RxCpltCallback+0x884>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_UART_RxCpltCallback+0x888>)
 800307c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003080:	2200      	movs	r2, #0
 8003082:	2100      	movs	r1, #0
 8003084:	4839      	ldr	r0, [pc, #228]	; (800316c <HAL_UART_RxCpltCallback+0x88c>)
 8003086:	f004 fa94 	bl	80075b2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800308a:	2100      	movs	r1, #0
 800308c:	4837      	ldr	r0, [pc, #220]	; (800316c <HAL_UART_RxCpltCallback+0x88c>)
 800308e:	f004 f8d5 	bl	800723c <HAL_DAC_Start>
		}
		break;
 8003092:	e05c      	b.n	800314e <HAL_UART_RxCpltCallback+0x86e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8003094:	4836      	ldr	r0, [pc, #216]	; (8003170 <HAL_UART_RxCpltCallback+0x890>)
 8003096:	f016 fe7f 	bl	8019d98 <puts>
		if (cadence <= 50000) {
 800309a:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_UART_RxCpltCallback+0x894>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f24c 3250 	movw	r2, #50000	; 0xc350
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d855      	bhi.n	8003152 <HAL_UART_RxCpltCallback+0x872>
			cadence *= 2;
 80030a6:	4b33      	ldr	r3, [pc, #204]	; (8003174 <HAL_UART_RxCpltCallback+0x894>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4a31      	ldr	r2, [pc, #196]	; (8003174 <HAL_UART_RxCpltCallback+0x894>)
 80030ae:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80030b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030b4:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <HAL_UART_RxCpltCallback+0x894>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80030ba:	e04a      	b.n	8003152 <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x0E: {
		printf("Factor Down\n");
 80030bc:	482e      	ldr	r0, [pc, #184]	; (8003178 <HAL_UART_RxCpltCallback+0x898>)
 80030be:	f016 fe6b 	bl	8019d98 <puts>
		if (cadence >= 6250) {
 80030c2:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_UART_RxCpltCallback+0x894>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f641 0269 	movw	r2, #6249	; 0x1869
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d943      	bls.n	8003156 <HAL_UART_RxCpltCallback+0x876>
			cadence /= 2;
 80030ce:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_UART_RxCpltCallback+0x894>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	4a27      	ldr	r2, [pc, #156]	; (8003174 <HAL_UART_RxCpltCallback+0x894>)
 80030d6:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80030d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030dc:	4b25      	ldr	r3, [pc, #148]	; (8003174 <HAL_UART_RxCpltCallback+0x894>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80030e2:	e038      	b.n	8003156 <HAL_UART_RxCpltCallback+0x876>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 80030e4:	4825      	ldr	r0, [pc, #148]	; (800317c <HAL_UART_RxCpltCallback+0x89c>)
 80030e6:	f016 fe57 	bl	8019d98 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80030ea:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_UART_RxCpltCallback+0x8a0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f013 fd17 	bl	8016b24 <osEventFlagsSet>
		break;
 80030f6:	e02f      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80030f8:	4822      	ldr	r0, [pc, #136]	; (8003184 <HAL_UART_RxCpltCallback+0x8a4>)
 80030fa:	f016 fe4d 	bl	8019d98 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <HAL_UART_RxCpltCallback+0x8a0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2104      	movs	r1, #4
 8003104:	4618      	mov	r0, r3
 8003106:	f013 fd0d 	bl	8016b24 <osEventFlagsSet>
		break;
 800310a:	e025      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 800310c:	481e      	ldr	r0, [pc, #120]	; (8003188 <HAL_UART_RxCpltCallback+0x8a8>)
 800310e:	f016 fe43 	bl	8019d98 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8003112:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_UART_RxCpltCallback+0x8a0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2108      	movs	r1, #8
 8003118:	4618      	mov	r0, r3
 800311a:	f013 fd03 	bl	8016b24 <osEventFlagsSet>
		break;
 800311e:	e01b      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0xAF: {
		sync();
 8003120:	f000 f9c4 	bl	80034ac <sync>
		break;
 8003124:	e018      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_UART_RxCpltCallback+0x8ac>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2101      	movs	r1, #1
 800312c:	4618      	mov	r0, r3
 800312e:	f013 fcf9 	bl	8016b24 <osEventFlagsSet>
		break;
 8003132:	e011      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8003134:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_UART_RxCpltCallback+0x8ac>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2102      	movs	r1, #2
 800313a:	4618      	mov	r0, r3
 800313c:	f013 fcf2 	bl	8016b24 <osEventFlagsSet>
		break;
 8003140:	e00a      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
	}
	default: {
		printf("Unknown Command\n");
 8003142:	4813      	ldr	r0, [pc, #76]	; (8003190 <HAL_UART_RxCpltCallback+0x8b0>)
 8003144:	f016 fe28 	bl	8019d98 <puts>
		break;
 8003148:	e006      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
		break;
 800314a:	bf00      	nop
 800314c:	e004      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
		break;
 800314e:	bf00      	nop
 8003150:	e002      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
		break;
 8003152:	bf00      	nop
 8003154:	e000      	b.n	8003158 <HAL_UART_RxCpltCallback+0x878>
		break;
 8003156:	bf00      	nop
	}
	}
}
 8003158:	bf00      	nop
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	0801a8a4 	.word	0x0801a8a4
 8003164:	24001a76 	.word	0x24001a76
 8003168:	2400000c 	.word	0x2400000c
 800316c:	240002f4 	.word	0x240002f4
 8003170:	0801a8b0 	.word	0x0801a8b0
 8003174:	2400008c 	.word	0x2400008c
 8003178:	0801a8bc 	.word	0x0801a8bc
 800317c:	0801a8c8 	.word	0x0801a8c8
 8003180:	24001a2c 	.word	0x24001a2c
 8003184:	0801a8d8 	.word	0x0801a8d8
 8003188:	0801a8e4 	.word	0x0801a8e4
 800318c:	24001a30 	.word	0x24001a30
 8003190:	0801a8f0 	.word	0x0801a8f0

08003194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800319a:	f000 fa2b 	bl	80035f4 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800319e:	4b45      	ldr	r3, [pc, #276]	; (80032b4 <main+0x120>)
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d11b      	bne.n	80031e2 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 80031aa:	f3bf 8f4f 	dsb	sy
}
 80031ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031b0:	f3bf 8f6f 	isb	sy
}
 80031b4:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80031b6:	4b3f      	ldr	r3, [pc, #252]	; (80032b4 <main+0x120>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80031be:	f3bf 8f4f 	dsb	sy
}
 80031c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031c4:	f3bf 8f6f 	isb	sy
}
 80031c8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80031ca:	4b3a      	ldr	r3, [pc, #232]	; (80032b4 <main+0x120>)
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4a39      	ldr	r2, [pc, #228]	; (80032b4 <main+0x120>)
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80031d6:	f3bf 8f4f 	dsb	sy
}
 80031da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031dc:	f3bf 8f6f 	isb	sy
}
 80031e0:	e000      	b.n	80031e4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80031e2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80031e4:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <main+0x120>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d138      	bne.n	8003262 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80031f0:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <main+0x120>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80031f8:	f3bf 8f4f 	dsb	sy
}
 80031fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80031fe:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <main+0x120>)
 8003200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003204:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	0b5b      	lsrs	r3, r3, #13
 800320a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800320e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	08db      	lsrs	r3, r3, #3
 8003214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003218:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003222:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003228:	4922      	ldr	r1, [pc, #136]	; (80032b4 <main+0x120>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	1e5a      	subs	r2, r3, #1
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1ef      	bne.n	800321a <main+0x86>
    } while(sets-- != 0U);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1e5a      	subs	r2, r3, #1
 800323e:	60ba      	str	r2, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1e5      	bne.n	8003210 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8003244:	f3bf 8f4f 	dsb	sy
}
 8003248:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800324a:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <main+0x120>)
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	4a19      	ldr	r2, [pc, #100]	; (80032b4 <main+0x120>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003256:	f3bf 8f4f 	dsb	sy
}
 800325a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800325c:	f3bf 8f6f 	isb	sy
}
 8003260:	e000      	b.n	8003264 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003262:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003264:	f002 f9de 	bl	8005624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003268:	f000 f826 	bl	80032b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800326c:	f000 f8a4 	bl	80033b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003270:	f7ff f930 	bl	80024d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003274:	f7fd fd38 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003278:	f001 fd6e 	bl	8004d58 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800327c:	f7ff f9a4 	bl	80025c8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8003280:	f000 fea4 	bl	8003fcc <MX_SPI2_Init>
  MX_TIM2_Init();
 8003284:	f001 fb90 	bl	80049a8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003288:	f001 fae0 	bl	800484c <MX_TIM1_Init>
  MX_ADC3_Init();
 800328c:	f7fd facc 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8003290:	f7fd f9a8 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003294:	f7fd fc74 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8003298:	f000 fe40 	bl	8003f1c <MX_SPI1_Init>
  MX_RTC_Init();
 800329c:	f000 fc0c 	bl	8003ab8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 80032a0:	f000 f8ba 	bl	8003418 <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80032a4:	f013 fae8 	bl	8016878 <osKernelInitialize>
  MX_FREERTOS_Init();
 80032a8:	f7fe fef4 	bl	8002094 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80032ac:	f013 fb08 	bl	80168c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80032b0:	e7fe      	b.n	80032b0 <main+0x11c>
 80032b2:	bf00      	nop
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b09c      	sub	sp, #112	; 0x70
 80032bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c2:	224c      	movs	r2, #76	; 0x4c
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f016 fcf0 	bl	8019cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	2220      	movs	r2, #32
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f016 fcea 	bl	8019cac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80032d8:	2002      	movs	r0, #2
 80032da:	f00a fa45 	bl	800d768 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80032de:	2300      	movs	r3, #0
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4b33      	ldr	r3, [pc, #204]	; (80033b0 <SystemClock_Config+0xf8>)
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	4a32      	ldr	r2, [pc, #200]	; (80033b0 <SystemClock_Config+0xf8>)
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80032ee:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <SystemClock_Config+0xf8>)
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <SystemClock_Config+0xfc>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003300:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <SystemClock_Config+0xfc>)
 8003302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003306:	6193      	str	r3, [r2, #24]
 8003308:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <SystemClock_Config+0xfc>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003314:	bf00      	nop
 8003316:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <SystemClock_Config+0xfc>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003322:	d1f8      	bne.n	8003316 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003324:	2303      	movs	r3, #3
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800332e:	2309      	movs	r3, #9
 8003330:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003332:	2340      	movs	r3, #64	; 0x40
 8003334:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003336:	2302      	movs	r3, #2
 8003338:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800333a:	2302      	movs	r3, #2
 800333c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800333e:	2304      	movs	r3, #4
 8003340:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8003342:	2318      	movs	r3, #24
 8003344:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003346:	2302      	movs	r3, #2
 8003348:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800334a:	2302      	movs	r3, #2
 800334c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800334e:	2302      	movs	r3, #2
 8003350:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003352:	2308      	movs	r3, #8
 8003354:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8003356:	2302      	movs	r3, #2
 8003358:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800335e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003362:	4618      	mov	r0, r3
 8003364:	f00a fa3a 	bl	800d7dc <HAL_RCC_OscConfig>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800336e:	f000 f995 	bl	800369c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003372:	233f      	movs	r3, #63	; 0x3f
 8003374:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003376:	2303      	movs	r3, #3
 8003378:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003386:	2340      	movs	r3, #64	; 0x40
 8003388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	2101      	movs	r1, #1
 8003396:	4618      	mov	r0, r3
 8003398:	f00a fe7a 	bl	800e090 <HAL_RCC_ClockConfig>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80033a2:	f000 f97b 	bl	800369c <Error_Handler>
  }
}
 80033a6:	bf00      	nop
 80033a8:	3770      	adds	r7, #112	; 0x70
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	58000400 	.word	0x58000400
 80033b4:	58024800 	.word	0x58024800

080033b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b0b0      	sub	sp, #192	; 0xc0
 80033bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033be:	463b      	mov	r3, r7
 80033c0:	22c0      	movs	r2, #192	; 0xc0
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f016 fc71 	bl	8019cac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80033ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80033d6:	2304      	movs	r3, #4
 80033d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80033da:	2318      	movs	r3, #24
 80033dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80033de:	2308      	movs	r3, #8
 80033e0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80033e2:	2302      	movs	r3, #2
 80033e4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80033e6:	2302      	movs	r3, #2
 80033e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80033ee:	2320      	movs	r3, #32
 80033f0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80033f6:	2300      	movs	r3, #0
 80033f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033fc:	463b      	mov	r3, r7
 80033fe:	4618      	mov	r0, r3
 8003400:	f00b fa14 	bl	800e82c <HAL_RCCEx_PeriphCLKConfig>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800340a:	f000 f947 	bl	800369c <Error_Handler>
  }
}
 800340e:	bf00      	nop
 8003410:	37c0      	adds	r7, #192	; 0xc0
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	packet_event_flags = osEventFlagsNew(NULL);
 800341c:	2000      	movs	r0, #0
 800341e:	f013 fb42 	bl	8016aa6 <osEventFlagsNew>
 8003422:	4603      	mov	r3, r0
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <system_setup+0x7c>)
 8003426:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003428:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <system_setup+0x7c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d100      	bne.n	8003432 <system_setup+0x1a>
        while (1);
 8003430:	e7fe      	b.n	8003430 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8003432:	2000      	movs	r0, #0
 8003434:	f013 fb37 	bl	8016aa6 <osEventFlagsNew>
 8003438:	4603      	mov	r3, r0
 800343a:	4a17      	ldr	r2, [pc, #92]	; (8003498 <system_setup+0x80>)
 800343c:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <system_setup+0x80>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d100      	bne.n	8003448 <system_setup+0x30>
        while (1);
 8003446:	e7fe      	b.n	8003446 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003448:	2000      	movs	r0, #0
 800344a:	f013 fb2c 	bl	8016aa6 <osEventFlagsNew>
 800344e:	4603      	mov	r3, r0
 8003450:	4a12      	ldr	r2, [pc, #72]	; (800349c <system_setup+0x84>)
 8003452:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <system_setup+0x84>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d100      	bne.n	800345e <system_setup+0x46>
        while (1);
 800345c:	e7fe      	b.n	800345c <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 800345e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003462:	2200      	movs	r2, #0
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8003466:	210c      	movs	r1, #12
 8003468:	480d      	ldr	r0, [pc, #52]	; (80034a0 <system_setup+0x88>)
 800346a:	f00f f86d 	bl	8012548 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 800346e:	f001 fd7d 	bl	8004f6c <voltage_monitor_init>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d100      	bne.n	800347a <system_setup+0x62>
		while (1);
 8003478:	e7fe      	b.n	8003478 <system_setup+0x60>
	}




	if (!init_adc_dma()) {
 800347a:	f000 fbaf 	bl	8003bdc <init_adc_dma>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d100      	bne.n	8003486 <system_setup+0x6e>
		while (1);
 8003484:	e7fe      	b.n	8003484 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8003486:	2201      	movs	r2, #1
 8003488:	4906      	ldr	r1, [pc, #24]	; (80034a4 <system_setup+0x8c>)
 800348a:	4807      	ldr	r0, [pc, #28]	; (80034a8 <system_setup+0x90>)
 800348c:	f010 fd3c 	bl	8013f08 <HAL_UART_Receive_IT>

}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}
 8003494:	24001a28 	.word	0x24001a28
 8003498:	24001a2c 	.word	0x24001a2c
 800349c:	24001a30 	.word	0x24001a30
 80034a0:	24001d90 	.word	0x24001d90
 80034a4:	24001a34 	.word	0x24001a34
 80034a8:	24001ddc 	.word	0x24001ddc

080034ac <sync>:

void sync() {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
	send_ACK();
 80034b2:	f000 f81f 	bl	80034f4 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80034b6:	480d      	ldr	r0, [pc, #52]	; (80034ec <sync+0x40>)
 80034b8:	f010 fd72 	bl	8013fa0 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80034bc:	2364      	movs	r3, #100	; 0x64
 80034be:	2209      	movs	r2, #9
 80034c0:	490b      	ldr	r1, [pc, #44]	; (80034f0 <sync+0x44>)
 80034c2:	480a      	ldr	r0, [pc, #40]	; (80034ec <sync+0x40>)
 80034c4:	f010 fc58 	bl	8013d78 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <sync+0x44>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	2bff      	cmp	r3, #255	; 0xff
 80034d2:	d1f3      	bne.n	80034bc <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80034d4:	2201      	movs	r2, #1
 80034d6:	4906      	ldr	r1, [pc, #24]	; (80034f0 <sync+0x44>)
 80034d8:	4804      	ldr	r0, [pc, #16]	; (80034ec <sync+0x40>)
 80034da:	f010 fd15 	bl	8013f08 <HAL_UART_Receive_IT>

	send_ACK();
 80034de:	f000 f809 	bl	80034f4 <send_ACK>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	24001ddc 	.word	0x24001ddc
 80034f0:	24001a34 	.word	0x24001a34

080034f4 <send_ACK>:

void send_ACK() {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <send_ACK+0x1c>)
 80034fa:	22ff      	movs	r2, #255	; 0xff
 80034fc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80034fe:	2364      	movs	r3, #100	; 0x64
 8003500:	2201      	movs	r2, #1
 8003502:	4903      	ldr	r1, [pc, #12]	; (8003510 <send_ACK+0x1c>)
 8003504:	4803      	ldr	r0, [pc, #12]	; (8003514 <send_ACK+0x20>)
 8003506:	f010 fba9 	bl	8013c5c <HAL_UART_Transmit>
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	24001a80 	.word	0x24001a80
 8003514:	24001ddc 	.word	0x24001ddc

08003518 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800351e:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <get_current_step+0xc0>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f640 72ff 	movw	r2, #4095	; 0xfff
 800352a:	4293      	cmp	r3, r2
 800352c:	d04a      	beq.n	80035c4 <get_current_step+0xac>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003534:	da48      	bge.n	80035c8 <get_current_step+0xb0>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f640 628b 	movw	r2, #3723	; 0xe8b
 800353c:	4293      	cmp	r3, r2
 800353e:	d03f      	beq.n	80035c0 <get_current_step+0xa8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003546:	4293      	cmp	r3, r2
 8003548:	dc3e      	bgt.n	80035c8 <get_current_step+0xb0>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003550:	4293      	cmp	r3, r2
 8003552:	d033      	beq.n	80035bc <get_current_step+0xa4>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 800355a:	da35      	bge.n	80035c8 <get_current_step+0xb0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003562:	4293      	cmp	r3, r2
 8003564:	d028      	beq.n	80035b8 <get_current_step+0xa0>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800356c:	4293      	cmp	r3, r2
 800356e:	dc2b      	bgt.n	80035c8 <get_current_step+0xb0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f240 7245 	movw	r2, #1861	; 0x745
 8003576:	4293      	cmp	r3, r2
 8003578:	d01c      	beq.n	80035b4 <get_current_step+0x9c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f240 7245 	movw	r2, #1861	; 0x745
 8003580:	4293      	cmp	r3, r2
 8003582:	dc21      	bgt.n	80035c8 <get_current_step+0xb0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800358a:	4293      	cmp	r3, r2
 800358c:	d010      	beq.n	80035b0 <get_current_step+0x98>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003594:	4293      	cmp	r3, r2
 8003596:	dc17      	bgt.n	80035c8 <get_current_step+0xb0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d004      	beq.n	80035a8 <get_current_step+0x90>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80035a4:	d002      	beq.n	80035ac <get_current_step+0x94>
 80035a6:	e00f      	b.n	80035c8 <get_current_step+0xb0>
	case 0:
		return 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e00e      	b.n	80035ca <get_current_step+0xb2>
	case 620:
		return 1;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e00c      	b.n	80035ca <get_current_step+0xb2>
	case 1241:
		return 2;
 80035b0:	2302      	movs	r3, #2
 80035b2:	e00a      	b.n	80035ca <get_current_step+0xb2>
	case 1861:
		return 3;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e008      	b.n	80035ca <get_current_step+0xb2>
	case 2482:
		return 4;
 80035b8:	2304      	movs	r3, #4
 80035ba:	e006      	b.n	80035ca <get_current_step+0xb2>
	case 3103:
		return 5;
 80035bc:	2305      	movs	r3, #5
 80035be:	e004      	b.n	80035ca <get_current_step+0xb2>
	case 3723:
		return 6;
 80035c0:	2306      	movs	r3, #6
 80035c2:	e002      	b.n	80035ca <get_current_step+0xb2>
	case 4095:
		return 7;
 80035c4:	2307      	movs	r3, #7
 80035c6:	e000      	b.n	80035ca <get_current_step+0xb2>
	default:
		return -1;
 80035c8:	23ff      	movs	r3, #255	; 0xff
	}
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40007400 	.word	0x40007400

080035dc <enter_stop>:

void enter_stop() {
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
	  send_ACK();
 80035e0:	f7ff ff88 	bl	80034f4 <send_ACK>

	  vTaskSuspendAll();
 80035e4:	f014 fdf6 	bl	80181d4 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80035e8:	2101      	movs	r1, #1
 80035ea:	2001      	movs	r0, #1
 80035ec:	f00a f880 	bl	800d6f0 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 80035f0:	f7ff f90a 	bl	8002808 <__NVIC_SystemReset>

080035f4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80035fa:	463b      	mov	r3, r7
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003606:	f003 fd7f 	bl	8007108 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800360a:	2301      	movs	r3, #1
 800360c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800360e:	2300      	movs	r3, #0
 8003610:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003616:	231f      	movs	r3, #31
 8003618:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800361a:	2387      	movs	r3, #135	; 0x87
 800361c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800361e:	2300      	movs	r3, #0
 8003620:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003622:	2300      	movs	r3, #0
 8003624:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003626:	2301      	movs	r3, #1
 8003628:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800362a:	2301      	movs	r3, #1
 800362c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800362e:	2300      	movs	r3, #0
 8003630:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003636:	463b      	mov	r3, r7
 8003638:	4618      	mov	r0, r3
 800363a:	f003 fd9d 	bl	8007178 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800363e:	2301      	movs	r3, #1
 8003640:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x081C0000;
 8003642:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <MPU_Config+0x80>)
 8003644:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8003646:	2311      	movs	r3, #17
 8003648:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800364a:	2300      	movs	r3, #0
 800364c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800364e:	2301      	movs	r3, #1
 8003650:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003652:	2303      	movs	r3, #3
 8003654:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800365e:	463b      	mov	r3, r7
 8003660:	4618      	mov	r0, r3
 8003662:	f003 fd89 	bl	8007178 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003666:	2004      	movs	r0, #4
 8003668:	f003 fd66 	bl	8007138 <HAL_MPU_Enable>

}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	081c0000 	.word	0x081c0000

08003678 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a04      	ldr	r2, [pc, #16]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800368a:	f002 f807 	bl	800569c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40001000 	.word	0x40001000

0800369c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80036a0:	b672      	cpsid	i
}
 80036a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80036a4:	e7fe      	b.n	80036a4 <Error_Handler+0x8>
	...

080036a8 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80036ae:	bf00      	nop
 80036b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036b4:	481c      	ldr	r0, [pc, #112]	; (8003728 <create_pmt_packet+0x80>)
 80036b6:	f007 fc85 	bl	800afc4 <HAL_GPIO_ReadPin>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f7      	bne.n	80036b0 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 faa8 	bl	8004c18 <get_uptime>
	sample_pmt_spi(pmt_spi);
 80036c8:	f107 0308 	add.w	r3, r7, #8
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fad9 	bl	8003c84 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 80036d2:	23bb      	movs	r3, #187	; 0xbb
 80036d4:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 80036d6:	23bb      	movs	r3, #187	; 0xbb
 80036d8:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <create_pmt_packet+0x84>)
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 80036e6:	4b11      	ldr	r3, [pc, #68]	; (800372c <create_pmt_packet+0x84>)
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 80036ee:	7a3b      	ldrb	r3, [r7, #8]
 80036f0:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 80036f2:	7a7b      	ldrb	r3, [r7, #9]
 80036f4:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 80036f6:	793b      	ldrb	r3, [r7, #4]
 80036f8:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 80036fa:	797b      	ldrb	r3, [r7, #5]
 80036fc:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 80036fe:	79bb      	ldrb	r3, [r7, #6]
 8003700:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8003706:	f107 010c 	add.w	r1, r7, #12
 800370a:	2364      	movs	r3, #100	; 0x64
 800370c:	220a      	movs	r2, #10
 800370e:	4808      	ldr	r0, [pc, #32]	; (8003730 <create_pmt_packet+0x88>)
 8003710:	f010 faa4 	bl	8013c5c <HAL_UART_Transmit>

	pmt_seq++;
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <create_pmt_packet+0x84>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	3301      	adds	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <create_pmt_packet+0x84>)
 800371e:	801a      	strh	r2, [r3, #0]
}
 8003720:	bf00      	nop
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	58020000 	.word	0x58020000
 800372c:	24001a82 	.word	0x24001a82
 8003730:	24001ddc 	.word	0x24001ddc

08003734 <create_erpa_packet>:


void create_erpa_packet() {
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800373a:	bf00      	nop
 800373c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003740:	4828      	ldr	r0, [pc, #160]	; (80037e4 <create_erpa_packet+0xb0>)
 8003742:	f007 fc3f 	bl	800afc4 <HAL_GPIO_ReadPin>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f7      	bne.n	800373c <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 800374c:	23ff      	movs	r3, #255	; 0xff
 800374e:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003750:	1d3b      	adds	r3, r7, #4
 8003752:	4618      	mov	r0, r3
 8003754:	f001 fa60 	bl	8004c18 <get_uptime>
	sweep_step = get_current_step();
 8003758:	f7ff fede 	bl	8003518 <get_current_step>
 800375c:	4603      	mov	r3, r0
 800375e:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003760:	f107 030c 	add.w	r3, r7, #12
 8003764:	4618      	mov	r0, r3
 8003766:	f000 faad 	bl	8003cc4 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 800376a:	f107 0308 	add.w	r3, r7, #8
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fac8 	bl	8003d04 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003774:	23aa      	movs	r3, #170	; 0xaa
 8003776:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003778:	23aa      	movs	r3, #170	; 0xaa
 800377a:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 800377c:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <create_erpa_packet+0xb4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	b2db      	uxtb	r3, r3
 8003784:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003786:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <create_erpa_packet+0xb4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	b2db      	uxtb	r3, r3
 800378e:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003790:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <create_erpa_packet+0xb4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003798:	7ffb      	ldrb	r3, [r7, #31]
 800379a:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800379c:	893b      	ldrh	r3, [r7, #8]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80037a6:	893b      	ldrh	r3, [r7, #8]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80037ac:	7b3b      	ldrb	r3, [r7, #12]
 80037ae:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80037b0:	7b7b      	ldrb	r3, [r7, #13]
 80037b2:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 80037b4:	793b      	ldrb	r3, [r7, #4]
 80037b6:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 80037b8:	797b      	ldrb	r3, [r7, #5]
 80037ba:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 80037bc:	79bb      	ldrb	r3, [r7, #6]
 80037be:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 80037c4:	f107 0110 	add.w	r1, r7, #16
 80037c8:	2364      	movs	r3, #100	; 0x64
 80037ca:	220e      	movs	r2, #14
 80037cc:	4807      	ldr	r0, [pc, #28]	; (80037ec <create_erpa_packet+0xb8>)
 80037ce:	f010 fa45 	bl	8013c5c <HAL_UART_Transmit>

	erpa_seq++;
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <create_erpa_packet+0xb4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	4a03      	ldr	r2, [pc, #12]	; (80037e8 <create_erpa_packet+0xb4>)
 80037da:	6013      	str	r3, [r2, #0]
}
 80037dc:	bf00      	nop
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	58020400 	.word	0x58020400
 80037e8:	24001a84 	.word	0x24001a84
 80037ec:	24001ddc 	.word	0x24001ddc

080037f0 <create_hk_packet>:


void create_hk_packet() {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b094      	sub	sp, #80	; 0x50
 80037f4:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80037f6:	1d3b      	adds	r3, r7, #4
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 fa0d 	bl	8004c18 <get_uptime>
	get_timestamp(timestamp);
 80037fe:	f107 0308 	add.w	r3, r7, #8
 8003802:	4618      	mov	r0, r3
 8003804:	f001 fa58 	bl	8004cb8 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8003808:	f001 fdf0 	bl	80053ec <get_rail_monitor>
 800380c:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800380e:	23cc      	movs	r3, #204	; 0xcc
 8003810:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003812:	23cc      	movs	r3, #204	; 0xcc
 8003814:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003816:	4b9b      	ldr	r3, [pc, #620]	; (8003a84 <create_hk_packet+0x294>)
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	b29b      	uxth	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003822:	4b98      	ldr	r3, [pc, #608]	; (8003a84 <create_hk_packet+0x294>)
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 800382a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382c:	889b      	ldrh	r3, [r3, #4]
 800382e:	0a1b      	lsrs	r3, r3, #8
 8003830:	b29b      	uxth	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003838:	889b      	ldrh	r3, [r3, #4]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 800383e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003840:	330a      	adds	r3, #10
 8003842:	889b      	ldrh	r3, [r3, #4]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	b29b      	uxth	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 800384c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384e:	330a      	adds	r3, #10
 8003850:	889b      	ldrh	r3, [r3, #4]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003858:	3314      	adds	r3, #20
 800385a:	889b      	ldrh	r3, [r3, #4]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	b29b      	uxth	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003866:	3314      	adds	r3, #20
 8003868:	889b      	ldrh	r3, [r3, #4]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 800386e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003870:	331e      	adds	r3, #30
 8003872:	889b      	ldrh	r3, [r3, #4]
 8003874:	0a1b      	lsrs	r3, r3, #8
 8003876:	b29b      	uxth	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 800387c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387e:	331e      	adds	r3, #30
 8003880:	889b      	ldrh	r3, [r3, #4]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003888:	3328      	adds	r3, #40	; 0x28
 800388a:	889b      	ldrh	r3, [r3, #4]
 800388c:	0a1b      	lsrs	r3, r3, #8
 800388e:	b29b      	uxth	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003898:	3328      	adds	r3, #40	; 0x28
 800389a:	889b      	ldrh	r3, [r3, #4]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80038a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a4:	3332      	adds	r3, #50	; 0x32
 80038a6:	889b      	ldrh	r3, [r3, #4]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 80038b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b4:	3332      	adds	r3, #50	; 0x32
 80038b6:	889b      	ldrh	r3, [r3, #4]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 80038be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c0:	333c      	adds	r3, #60	; 0x3c
 80038c2:	889b      	ldrh	r3, [r3, #4]
 80038c4:	0a1b      	lsrs	r3, r3, #8
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 80038ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d0:	333c      	adds	r3, #60	; 0x3c
 80038d2:	889b      	ldrh	r3, [r3, #4]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 80038da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038dc:	3346      	adds	r3, #70	; 0x46
 80038de:	889b      	ldrh	r3, [r3, #4]
 80038e0:	0a1b      	lsrs	r3, r3, #8
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 80038ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ec:	3346      	adds	r3, #70	; 0x46
 80038ee:	889b      	ldrh	r3, [r3, #4]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 80038f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f8:	3350      	adds	r3, #80	; 0x50
 80038fa:	889b      	ldrh	r3, [r3, #4]
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	b29b      	uxth	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003908:	3350      	adds	r3, #80	; 0x50
 800390a:	889b      	ldrh	r3, [r3, #4]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003914:	335a      	adds	r3, #90	; 0x5a
 8003916:	889b      	ldrh	r3, [r3, #4]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	b29b      	uxth	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003924:	335a      	adds	r3, #90	; 0x5a
 8003926:	889b      	ldrh	r3, [r3, #4]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 800392e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003930:	3364      	adds	r3, #100	; 0x64
 8003932:	889b      	ldrh	r3, [r3, #4]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	b29b      	uxth	r3, r3
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 800393e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003940:	3364      	adds	r3, #100	; 0x64
 8003942:	889b      	ldrh	r3, [r3, #4]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 800394a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800394c:	336e      	adds	r3, #110	; 0x6e
 800394e:	889b      	ldrh	r3, [r3, #4]
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	b29b      	uxth	r3, r3
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 800395a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395c:	336e      	adds	r3, #110	; 0x6e
 800395e:	889b      	ldrh	r3, [r3, #4]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003968:	3378      	adds	r3, #120	; 0x78
 800396a:	889b      	ldrh	r3, [r3, #4]
 800396c:	0a1b      	lsrs	r3, r3, #8
 800396e:	b29b      	uxth	r3, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003978:	3378      	adds	r3, #120	; 0x78
 800397a:	889b      	ldrh	r3, [r3, #4]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003984:	3382      	adds	r3, #130	; 0x82
 8003986:	889b      	ldrh	r3, [r3, #4]
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	b29b      	uxth	r3, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003994:	3382      	adds	r3, #130	; 0x82
 8003996:	889b      	ldrh	r3, [r3, #4]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 800399e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a0:	338c      	adds	r3, #140	; 0x8c
 80039a2:	889b      	ldrh	r3, [r3, #4]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 80039ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b0:	338c      	adds	r3, #140	; 0x8c
 80039b2:	889b      	ldrh	r3, [r3, #4]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 80039ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039bc:	3396      	adds	r3, #150	; 0x96
 80039be:	889b      	ldrh	r3, [r3, #4]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 80039ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039cc:	3396      	adds	r3, #150	; 0x96
 80039ce:	889b      	ldrh	r3, [r3, #4]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	33a0      	adds	r3, #160	; 0xa0
 80039da:	889b      	ldrh	r3, [r3, #4]
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	b29b      	uxth	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 80039e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e8:	33a0      	adds	r3, #160	; 0xa0
 80039ea:	889b      	ldrh	r3, [r3, #4]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80039f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f4:	33aa      	adds	r3, #170	; 0xaa
 80039f6:	889b      	ldrh	r3, [r3, #4]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a04:	33aa      	adds	r3, #170	; 0xaa
 8003a06:	889b      	ldrh	r3, [r3, #4]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8003a0e:	7a3b      	ldrb	r3, [r7, #8]
 8003a10:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8003a14:	7a7b      	ldrb	r3, [r7, #9]
 8003a16:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8003a1a:	7abb      	ldrb	r3, [r7, #10]
 8003a1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8003a20:	7afb      	ldrb	r3, [r7, #11]
 8003a22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8003a26:	7b3b      	ldrb	r3, [r7, #12]
 8003a28:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8003a2c:	7b7b      	ldrb	r3, [r7, #13]
 8003a2e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8003a32:	7bbb      	ldrb	r3, [r7, #14]
 8003a34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8003a3e:	7c3b      	ldrb	r3, [r7, #16]
 8003a40:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8003a44:	7c7b      	ldrb	r3, [r7, #17]
 8003a46:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8003a4a:	793b      	ldrb	r3, [r7, #4]
 8003a4c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8003a50:	797b      	ldrb	r3, [r7, #5]
 8003a52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8003a56:	79bb      	ldrb	r3, [r7, #6]
 8003a58:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003a62:	f107 0114 	add.w	r1, r7, #20
 8003a66:	2364      	movs	r3, #100	; 0x64
 8003a68:	2236      	movs	r2, #54	; 0x36
 8003a6a:	4807      	ldr	r0, [pc, #28]	; (8003a88 <create_hk_packet+0x298>)
 8003a6c:	f010 f8f6 	bl	8013c5c <HAL_UART_Transmit>

	hk_seq++;
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <create_hk_packet+0x294>)
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	4b02      	ldr	r3, [pc, #8]	; (8003a84 <create_hk_packet+0x294>)
 8003a7a:	801a      	strh	r2, [r3, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	3750      	adds	r7, #80	; 0x50
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	24001a88 	.word	0x24001a88
 8003a88:	24001ddc 	.word	0x24001ddc

08003a8c <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <reset_packet_sequence_numbers+0x20>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <reset_packet_sequence_numbers+0x24>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <reset_packet_sequence_numbers+0x28>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	801a      	strh	r2, [r3, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	24001a82 	.word	0x24001a82
 8003ab0:	24001a84 	.word	0x24001a84
 8003ab4:	24001a88 	.word	0x24001a88

08003ab8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003acc:	2300      	movs	r3, #0
 8003ace:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <MX_RTC_Init+0xb4>)
 8003ad2:	4a27      	ldr	r2, [pc, #156]	; (8003b70 <MX_RTC_Init+0xb8>)
 8003ad4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003ad6:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <MX_RTC_Init+0xb4>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003adc:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <MX_RTC_Init+0xb4>)
 8003ade:	2263      	movs	r2, #99	; 0x63
 8003ae0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003ae2:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <MX_RTC_Init+0xb4>)
 8003ae4:	f242 720f 	movw	r2, #9999	; 0x270f
 8003ae8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <MX_RTC_Init+0xb4>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003af0:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <MX_RTC_Init+0xb4>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003af6:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <MX_RTC_Init+0xb4>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <MX_RTC_Init+0xb4>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003b02:	481a      	ldr	r0, [pc, #104]	; (8003b6c <MX_RTC_Init+0xb4>)
 8003b04:	f00d fb90 	bl	8011228 <HAL_RTC_Init>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003b0e:	f7ff fdc5 	bl	800369c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	2201      	movs	r2, #1
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	480f      	ldr	r0, [pc, #60]	; (8003b6c <MX_RTC_Init+0xb4>)
 8003b2e:	f00d fbfd 	bl	801132c <HAL_RTC_SetTime>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003b38:	f7ff fdb0 	bl	800369c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003b40:	2301      	movs	r3, #1
 8003b42:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003b44:	2301      	movs	r3, #1
 8003b46:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003b4c:	463b      	mov	r3, r7
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4619      	mov	r1, r3
 8003b52:	4806      	ldr	r0, [pc, #24]	; (8003b6c <MX_RTC_Init+0xb4>)
 8003b54:	f00d fce4 	bl	8011520 <HAL_RTC_SetDate>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003b5e:	f7ff fd9d 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	24001a8c 	.word	0x24001a8c
 8003b70:	58004000 	.word	0x58004000

08003b74 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b0b2      	sub	sp, #200	; 0xc8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b7c:	f107 0308 	add.w	r3, r7, #8
 8003b80:	22c0      	movs	r2, #192	; 0xc0
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f016 f891 	bl	8019cac <memset>
  if(rtcHandle->Instance==RTC)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <HAL_RTC_MspInit+0x5c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d118      	bne.n	8003bc6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003b94:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <HAL_RTC_MspInit+0x60>)
 8003ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ba6:	f107 0308 	add.w	r3, r7, #8
 8003baa:	4618      	mov	r0, r3
 8003bac:	f00a fe3e 	bl	800e82c <HAL_RCCEx_PeriphCLKConfig>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003bb6:	f7ff fd71 	bl	800369c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003bba:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <HAL_RTC_MspInit+0x64>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a06      	ldr	r2, [pc, #24]	; (8003bd8 <HAL_RTC_MspInit+0x64>)
 8003bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	37c8      	adds	r7, #200	; 0xc8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	58004000 	.word	0x58004000
 8003bd4:	00019300 	.word	0x00019300
 8003bd8:	58024400 	.word	0x58024400

08003bdc <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003be6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003bea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bee:	481f      	ldr	r0, [pc, #124]	; (8003c6c <init_adc_dma+0x90>)
 8003bf0:	f003 f868 	bl	8006cc4 <HAL_ADCEx_Calibration_Start>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003bfa:	f7ff fd4f 	bl	800369c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003bfe:	220b      	movs	r2, #11
 8003c00:	491b      	ldr	r1, [pc, #108]	; (8003c70 <init_adc_dma+0x94>)
 8003c02:	481a      	ldr	r0, [pc, #104]	; (8003c6c <init_adc_dma+0x90>)
 8003c04:	f002 f93c 	bl	8005e80 <HAL_ADC_Start_DMA>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003c0e:	f7ff fd45 	bl	800369c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003c12:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003c16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c1a:	4816      	ldr	r0, [pc, #88]	; (8003c74 <init_adc_dma+0x98>)
 8003c1c:	f003 f852 	bl	8006cc4 <HAL_ADCEx_Calibration_Start>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003c26:	f7ff fd39 	bl	800369c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	4912      	ldr	r1, [pc, #72]	; (8003c78 <init_adc_dma+0x9c>)
 8003c2e:	4811      	ldr	r0, [pc, #68]	; (8003c74 <init_adc_dma+0x98>)
 8003c30:	f002 f926 	bl	8005e80 <HAL_ADC_Start_DMA>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003c3a:	f7ff fd2f 	bl	800369c <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <init_adc_dma+0xa0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <init_adc_dma+0xa0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c4c:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <init_adc_dma+0xa4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <init_adc_dma+0xa4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c5c:	601a      	str	r2, [r3, #0]


	status = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	71fb      	strb	r3, [r7, #7]

	return status;
 8003c62:	79fb      	ldrb	r3, [r7, #7]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	2400013c 	.word	0x2400013c
 8003c70:	24001ac0 	.word	0x24001ac0
 8003c74:	240001a0 	.word	0x240001a0
 8003c78:	24001ae0 	.word	0x24001ae0
 8003c7c:	24001b7c 	.word	0x24001b7c
 8003c80:	24001af4 	.word	0x24001af4

08003c84 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	490b      	ldr	r1, [pc, #44]	; (8003cbc <sample_pmt_spi+0x38>)
 8003c90:	480b      	ldr	r0, [pc, #44]	; (8003cc0 <sample_pmt_spi+0x3c>)
 8003c92:	f00d ff0f 	bl	8011ab4 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <sample_pmt_spi+0x38>)
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <sample_pmt_spi+0x38>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	7bba      	ldrb	r2, [r7, #14]
 8003cb2:	701a      	strb	r2, [r3, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	24001aec 	.word	0x24001aec
 8003cc0:	24001af4 	.word	0x24001af4

08003cc4 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8003ccc:	2201      	movs	r2, #1
 8003cce:	490b      	ldr	r1, [pc, #44]	; (8003cfc <sample_erpa_spi+0x38>)
 8003cd0:	480b      	ldr	r0, [pc, #44]	; (8003d00 <sample_erpa_spi+0x3c>)
 8003cd2:	f00d feef 	bl	8011ab4 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <sample_erpa_spi+0x38>)
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <sample_erpa_spi+0x38>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	7bba      	ldrb	r2, [r7, #14]
 8003cf2:	701a      	strb	r2, [r3, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	24001ae8 	.word	0x24001ae8
 8003d00:	24001b7c 	.word	0x24001b7c

08003d04 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <sample_erpa_adc+0x20>)
 8003d0e:	885b      	ldrh	r3, [r3, #2]
 8003d10:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	89fa      	ldrh	r2, [r7, #14]
 8003d16:	801a      	strh	r2, [r3, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	24001ac0 	.word	0x24001ac0

08003d28 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8003d30:	2390      	movs	r3, #144	; 0x90
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 f8a2 	bl	8003e7c <poll_i2c_sensor>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8003d3c:	2394      	movs	r3, #148	; 0x94
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 f89c 	bl	8003e7c <poll_i2c_sensor>
 8003d44:	4603      	mov	r3, r0
 8003d46:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8003d48:	2392      	movs	r3, #146	; 0x92
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f896 	bl	8003e7c <poll_i2c_sensor>
 8003d50:	4603      	mov	r3, r0
 8003d52:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8003d54:	2396      	movs	r3, #150	; 0x96
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f890 	bl	8003e7c <poll_i2c_sensor>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	89fa      	ldrh	r2, [r7, #14]
 8003d64:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3302      	adds	r3, #2
 8003d6a:	89ba      	ldrh	r2, [r7, #12]
 8003d6c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3304      	adds	r3, #4
 8003d72:	897a      	ldrh	r2, [r7, #10]
 8003d74:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3306      	adds	r3, #6
 8003d7a:	893a      	ldrh	r2, [r7, #8]
 8003d7c:	801a      	strh	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	; 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <sample_hk_adc1+0xa0>)
 8003d92:	8a9b      	ldrh	r3, [r3, #20]
 8003d94:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <sample_hk_adc1+0xa0>)
 8003d98:	8a1b      	ldrh	r3, [r3, #16]
 8003d9a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8003d9c:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <sample_hk_adc1+0xa0>)
 8003d9e:	899b      	ldrh	r3, [r3, #12]
 8003da0:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8003da2:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <sample_hk_adc1+0xa0>)
 8003da4:	8a5b      	ldrh	r3, [r3, #18]
 8003da6:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8003da8:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <sample_hk_adc1+0xa0>)
 8003daa:	889b      	ldrh	r3, [r3, #4]
 8003dac:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8003dae:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <sample_hk_adc1+0xa0>)
 8003db0:	88db      	ldrh	r3, [r3, #6]
 8003db2:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8003db4:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <sample_hk_adc1+0xa0>)
 8003db6:	89db      	ldrh	r3, [r3, #14]
 8003db8:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8003dba:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <sample_hk_adc1+0xa0>)
 8003dbc:	891b      	ldrh	r3, [r3, #8]
 8003dbe:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <sample_hk_adc1+0xa0>)
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8003dc6:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <sample_hk_adc1+0xa0>)
 8003dc8:	895b      	ldrh	r3, [r3, #10]
 8003dca:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8bfa      	ldrh	r2, [r7, #30]
 8003dd0:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	8bba      	ldrh	r2, [r7, #28]
 8003dd8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	8b7a      	ldrh	r2, [r7, #26]
 8003de0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3306      	adds	r3, #6
 8003de6:	8b3a      	ldrh	r2, [r7, #24]
 8003de8:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3308      	adds	r3, #8
 8003dee:	8afa      	ldrh	r2, [r7, #22]
 8003df0:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	330a      	adds	r3, #10
 8003df6:	8aba      	ldrh	r2, [r7, #20]
 8003df8:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	8a7a      	ldrh	r2, [r7, #18]
 8003e00:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	330e      	adds	r3, #14
 8003e06:	8a3a      	ldrh	r2, [r7, #16]
 8003e08:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3310      	adds	r3, #16
 8003e0e:	89fa      	ldrh	r2, [r7, #14]
 8003e10:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3312      	adds	r3, #18
 8003e16:	89ba      	ldrh	r2, [r7, #12]
 8003e18:	801a      	strh	r2, [r3, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	3724      	adds	r7, #36	; 0x24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	24001ac0 	.word	0x24001ac0

08003e2c <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8003e34:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <sample_hk_adc3+0x4c>)
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <sample_hk_adc3+0x4c>)
 8003e3c:	885b      	ldrh	r3, [r3, #2]
 8003e3e:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8003e40:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <sample_hk_adc3+0x4c>)
 8003e42:	889b      	ldrh	r3, [r3, #4]
 8003e44:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <sample_hk_adc3+0x4c>)
 8003e48:	88db      	ldrh	r3, [r3, #6]
 8003e4a:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	89fa      	ldrh	r2, [r7, #14]
 8003e50:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3302      	adds	r3, #2
 8003e56:	89ba      	ldrh	r2, [r7, #12]
 8003e58:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	897a      	ldrh	r2, [r7, #10]
 8003e60:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3306      	adds	r3, #6
 8003e66:	893a      	ldrh	r2, [r7, #8]
 8003e68:	801a      	strh	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	24001ae0 	.word	0x24001ae0

08003e7c <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8003e86:	2200      	movs	r2, #0
 8003e88:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <poll_i2c_sensor+0x90>)
 8003e8a:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	b299      	uxth	r1, r3
 8003e90:	2301      	movs	r3, #1
 8003e92:	4a1e      	ldr	r2, [pc, #120]	; (8003f0c <poll_i2c_sensor+0x90>)
 8003e94:	481e      	ldr	r0, [pc, #120]	; (8003f10 <poll_i2c_sensor+0x94>)
 8003e96:	f007 f963 	bl	800b160 <HAL_I2C_Master_Transmit_DMA>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8003e9e:	7b7b      	ldrb	r3, [r7, #13]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8003ea4:	481b      	ldr	r0, [pc, #108]	; (8003f14 <poll_i2c_sensor+0x98>)
 8003ea6:	f015 ff77 	bl	8019d98 <puts>
 8003eaa:	e028      	b.n	8003efe <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8003eac:	bf00      	nop
 8003eae:	4818      	ldr	r0, [pc, #96]	; (8003f10 <poll_i2c_sensor+0x94>)
 8003eb0:	f007 fc3d 	bl	800b72e <HAL_I2C_GetState>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d1f9      	bne.n	8003eae <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	b299      	uxth	r1, r3
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <poll_i2c_sensor+0x90>)
 8003ec2:	4813      	ldr	r0, [pc, #76]	; (8003f10 <poll_i2c_sensor+0x94>)
 8003ec4:	f007 fa60 	bl	800b388 <HAL_I2C_Master_Receive_DMA>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8003ecc:	7b7b      	ldrb	r3, [r7, #13]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8003ed2:	4811      	ldr	r0, [pc, #68]	; (8003f18 <poll_i2c_sensor+0x9c>)
 8003ed4:	f015 ff60 	bl	8019d98 <puts>
 8003ed8:	e011      	b.n	8003efe <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8003eda:	bf00      	nop
 8003edc:	480c      	ldr	r0, [pc, #48]	; (8003f10 <poll_i2c_sensor+0x94>)
 8003ede:	f007 fc26 	bl	800b72e <HAL_I2C_GetState>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d1f9      	bne.n	8003edc <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <poll_i2c_sensor+0x90>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8003ef0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ef4:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <poll_i2c_sensor+0x90>)
 8003ef6:	7852      	ldrb	r2, [r2, #1]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	10db      	asrs	r3, r3, #3
 8003efc:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8003efe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	24001af0 	.word	0x24001af0
 8003f10:	240018e4 	.word	0x240018e4
 8003f14:	0801a900 	.word	0x0801a900
 8003f18:	0801a910 	.word	0x0801a910

08003f1c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003f20:	4b28      	ldr	r3, [pc, #160]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f22:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <MX_SPI1_Init+0xac>)
 8003f24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f26:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003f2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003f2e:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003f34:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003f36:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f38:	220f      	movs	r2, #15
 8003f3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f3c:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f48:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003f4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003f50:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f52:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003f56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f5e:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f64:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003f6a:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f70:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f76:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003f84:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003f8a:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003f96:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003fae:	4805      	ldr	r0, [pc, #20]	; (8003fc4 <MX_SPI1_Init+0xa8>)
 8003fb0:	f00d fc5c 	bl	801186c <HAL_SPI_Init>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8003fba:	f7ff fb6f 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	24001af4 	.word	0x24001af4
 8003fc8:	40013000 	.word	0x40013000

08003fcc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003fd0:	4b28      	ldr	r3, [pc, #160]	; (8004074 <MX_SPI2_Init+0xa8>)
 8003fd2:	4a29      	ldr	r2, [pc, #164]	; (8004078 <MX_SPI2_Init+0xac>)
 8003fd4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003fd6:	4b27      	ldr	r3, [pc, #156]	; (8004074 <MX_SPI2_Init+0xa8>)
 8003fd8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003fdc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003fde:	4b25      	ldr	r3, [pc, #148]	; (8004074 <MX_SPI2_Init+0xa8>)
 8003fe0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003fe4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003fe6:	4b23      	ldr	r3, [pc, #140]	; (8004074 <MX_SPI2_Init+0xa8>)
 8003fe8:	220f      	movs	r2, #15
 8003fea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fec:	4b21      	ldr	r3, [pc, #132]	; (8004074 <MX_SPI2_Init+0xa8>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <MX_SPI2_Init+0xa8>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ff8:	4b1e      	ldr	r3, [pc, #120]	; (8004074 <MX_SPI2_Init+0xa8>)
 8003ffa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ffe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004000:	4b1c      	ldr	r3, [pc, #112]	; (8004074 <MX_SPI2_Init+0xa8>)
 8004002:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004006:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <MX_SPI2_Init+0xa8>)
 800400a:	2200      	movs	r2, #0
 800400c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800400e:	4b19      	ldr	r3, [pc, #100]	; (8004074 <MX_SPI2_Init+0xa8>)
 8004010:	2200      	movs	r2, #0
 8004012:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <MX_SPI2_Init+0xa8>)
 8004016:	2200      	movs	r2, #0
 8004018:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800401a:	4b16      	ldr	r3, [pc, #88]	; (8004074 <MX_SPI2_Init+0xa8>)
 800401c:	2200      	movs	r2, #0
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004020:	4b14      	ldr	r3, [pc, #80]	; (8004074 <MX_SPI2_Init+0xa8>)
 8004022:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004026:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004028:	4b12      	ldr	r3, [pc, #72]	; (8004074 <MX_SPI2_Init+0xa8>)
 800402a:	2200      	movs	r2, #0
 800402c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <MX_SPI2_Init+0xa8>)
 8004030:	2200      	movs	r2, #0
 8004032:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004034:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <MX_SPI2_Init+0xa8>)
 8004036:	2200      	movs	r2, #0
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <MX_SPI2_Init+0xa8>)
 800403c:	2200      	movs	r2, #0
 800403e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004040:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <MX_SPI2_Init+0xa8>)
 8004042:	2200      	movs	r2, #0
 8004044:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <MX_SPI2_Init+0xa8>)
 8004048:	2200      	movs	r2, #0
 800404a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <MX_SPI2_Init+0xa8>)
 800404e:	2200      	movs	r2, #0
 8004050:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <MX_SPI2_Init+0xa8>)
 8004054:	2200      	movs	r2, #0
 8004056:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <MX_SPI2_Init+0xa8>)
 800405a:	2200      	movs	r2, #0
 800405c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800405e:	4805      	ldr	r0, [pc, #20]	; (8004074 <MX_SPI2_Init+0xa8>)
 8004060:	f00d fc04 	bl	801186c <HAL_SPI_Init>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800406a:	f7ff fb17 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	24001b7c 	.word	0x24001b7c
 8004078:	40003800 	.word	0x40003800

0800407c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b0bc      	sub	sp, #240	; 0xf0
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004084:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004094:	f107 0318 	add.w	r3, r7, #24
 8004098:	22c0      	movs	r2, #192	; 0xc0
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f015 fe05 	bl	8019cac <memset>
  if(spiHandle->Instance==SPI1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a83      	ldr	r2, [pc, #524]	; (80042b4 <HAL_SPI_MspInit+0x238>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d17c      	bne.n	80041a6 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80040ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040bc:	f107 0318 	add.w	r3, r7, #24
 80040c0:	4618      	mov	r0, r3
 80040c2:	f00a fbb3 	bl	800e82c <HAL_RCCEx_PeriphCLKConfig>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80040cc:	f7ff fae6 	bl	800369c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040d0:	4b79      	ldr	r3, [pc, #484]	; (80042b8 <HAL_SPI_MspInit+0x23c>)
 80040d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040d6:	4a78      	ldr	r2, [pc, #480]	; (80042b8 <HAL_SPI_MspInit+0x23c>)
 80040d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80040e0:	4b75      	ldr	r3, [pc, #468]	; (80042b8 <HAL_SPI_MspInit+0x23c>)
 80040e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ee:	4b72      	ldr	r3, [pc, #456]	; (80042b8 <HAL_SPI_MspInit+0x23c>)
 80040f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f4:	4a70      	ldr	r2, [pc, #448]	; (80042b8 <HAL_SPI_MspInit+0x23c>)
 80040f6:	f043 0302 	orr.w	r3, r3, #2
 80040fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040fe:	4b6e      	ldr	r3, [pc, #440]	; (80042b8 <HAL_SPI_MspInit+0x23c>)
 8004100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800410c:	2318      	movs	r3, #24
 800410e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004112:	2302      	movs	r3, #2
 8004114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411e:	2300      	movs	r3, #0
 8004120:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004124:	2305      	movs	r3, #5
 8004126:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800412a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800412e:	4619      	mov	r1, r3
 8004130:	4862      	ldr	r0, [pc, #392]	; (80042bc <HAL_SPI_MspInit+0x240>)
 8004132:	f006 fd97 	bl	800ac64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8004136:	4b62      	ldr	r3, [pc, #392]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 8004138:	4a62      	ldr	r2, [pc, #392]	; (80042c4 <HAL_SPI_MspInit+0x248>)
 800413a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800413c:	4b60      	ldr	r3, [pc, #384]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 800413e:	2225      	movs	r2, #37	; 0x25
 8004140:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004142:	4b5f      	ldr	r3, [pc, #380]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 8004144:	2200      	movs	r2, #0
 8004146:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004148:	4b5d      	ldr	r3, [pc, #372]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 800414a:	2200      	movs	r2, #0
 800414c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800414e:	4b5c      	ldr	r3, [pc, #368]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 8004150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004154:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004156:	4b5a      	ldr	r3, [pc, #360]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 8004158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800415c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800415e:	4b58      	ldr	r3, [pc, #352]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 8004160:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004164:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004166:	4b56      	ldr	r3, [pc, #344]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 8004168:	2200      	movs	r2, #0
 800416a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800416c:	4b54      	ldr	r3, [pc, #336]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 800416e:	2200      	movs	r2, #0
 8004170:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004172:	4b53      	ldr	r3, [pc, #332]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 8004174:	2200      	movs	r2, #0
 8004176:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004178:	4851      	ldr	r0, [pc, #324]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 800417a:	f003 fc43 	bl	8007a04 <HAL_DMA_Init>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004184:	f7ff fa8a 	bl	800369c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a4d      	ldr	r2, [pc, #308]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 800418c:	67da      	str	r2, [r3, #124]	; 0x7c
 800418e:	4a4c      	ldr	r2, [pc, #304]	; (80042c0 <HAL_SPI_MspInit+0x244>)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004194:	2200      	movs	r2, #0
 8004196:	2105      	movs	r1, #5
 8004198:	2023      	movs	r0, #35	; 0x23
 800419a:	f002 ff8d 	bl	80070b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800419e:	2023      	movs	r0, #35	; 0x23
 80041a0:	f002 ffa4 	bl	80070ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80041a4:	e081      	b.n	80042aa <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a47      	ldr	r2, [pc, #284]	; (80042c8 <HAL_SPI_MspInit+0x24c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d17c      	bne.n	80042aa <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80041b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80041bc:	2300      	movs	r3, #0
 80041be:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041c0:	f107 0318 	add.w	r3, r7, #24
 80041c4:	4618      	mov	r0, r3
 80041c6:	f00a fb31 	bl	800e82c <HAL_RCCEx_PeriphCLKConfig>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 80041d0:	f7ff fa64 	bl	800369c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80041d4:	4b38      	ldr	r3, [pc, #224]	; (80042b8 <HAL_SPI_MspInit+0x23c>)
 80041d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041da:	4a37      	ldr	r2, [pc, #220]	; (80042b8 <HAL_SPI_MspInit+0x23c>)
 80041dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041e4:	4b34      	ldr	r3, [pc, #208]	; (80042b8 <HAL_SPI_MspInit+0x23c>)
 80041e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f2:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_SPI_MspInit+0x23c>)
 80041f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f8:	4a2f      	ldr	r2, [pc, #188]	; (80042b8 <HAL_SPI_MspInit+0x23c>)
 80041fa:	f043 0302 	orr.w	r3, r3, #2
 80041fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004202:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_SPI_MspInit+0x23c>)
 8004204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004210:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004214:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004218:	2302      	movs	r3, #2
 800421a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800422a:	2305      	movs	r3, #5
 800422c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004230:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004234:	4619      	mov	r1, r3
 8004236:	4821      	ldr	r0, [pc, #132]	; (80042bc <HAL_SPI_MspInit+0x240>)
 8004238:	f006 fd14 	bl	800ac64 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800423c:	4b23      	ldr	r3, [pc, #140]	; (80042cc <HAL_SPI_MspInit+0x250>)
 800423e:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <HAL_SPI_MspInit+0x254>)
 8004240:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8004242:	4b22      	ldr	r3, [pc, #136]	; (80042cc <HAL_SPI_MspInit+0x250>)
 8004244:	2227      	movs	r2, #39	; 0x27
 8004246:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004248:	4b20      	ldr	r3, [pc, #128]	; (80042cc <HAL_SPI_MspInit+0x250>)
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800424e:	4b1f      	ldr	r3, [pc, #124]	; (80042cc <HAL_SPI_MspInit+0x250>)
 8004250:	2200      	movs	r2, #0
 8004252:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004254:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HAL_SPI_MspInit+0x250>)
 8004256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800425a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <HAL_SPI_MspInit+0x250>)
 800425e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004262:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004264:	4b19      	ldr	r3, [pc, #100]	; (80042cc <HAL_SPI_MspInit+0x250>)
 8004266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800426a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800426c:	4b17      	ldr	r3, [pc, #92]	; (80042cc <HAL_SPI_MspInit+0x250>)
 800426e:	2200      	movs	r2, #0
 8004270:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004272:	4b16      	ldr	r3, [pc, #88]	; (80042cc <HAL_SPI_MspInit+0x250>)
 8004274:	2200      	movs	r2, #0
 8004276:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004278:	4b14      	ldr	r3, [pc, #80]	; (80042cc <HAL_SPI_MspInit+0x250>)
 800427a:	2200      	movs	r2, #0
 800427c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800427e:	4813      	ldr	r0, [pc, #76]	; (80042cc <HAL_SPI_MspInit+0x250>)
 8004280:	f003 fbc0 	bl	8007a04 <HAL_DMA_Init>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_SPI_MspInit+0x212>
      Error_Handler();
 800428a:	f7ff fa07 	bl	800369c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a0e      	ldr	r2, [pc, #56]	; (80042cc <HAL_SPI_MspInit+0x250>)
 8004292:	67da      	str	r2, [r3, #124]	; 0x7c
 8004294:	4a0d      	ldr	r2, [pc, #52]	; (80042cc <HAL_SPI_MspInit+0x250>)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800429a:	2200      	movs	r2, #0
 800429c:	2105      	movs	r1, #5
 800429e:	2024      	movs	r0, #36	; 0x24
 80042a0:	f002 ff0a 	bl	80070b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80042a4:	2024      	movs	r0, #36	; 0x24
 80042a6:	f002 ff21 	bl	80070ec <HAL_NVIC_EnableIRQ>
}
 80042aa:	bf00      	nop
 80042ac:	37f0      	adds	r7, #240	; 0xf0
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40013000 	.word	0x40013000
 80042b8:	58024400 	.word	0x58024400
 80042bc:	58020400 	.word	0x58020400
 80042c0:	24001c04 	.word	0x24001c04
 80042c4:	40020070 	.word	0x40020070
 80042c8:	40003800 	.word	0x40003800
 80042cc:	24001c7c 	.word	0x24001c7c
 80042d0:	40020058 	.word	0x40020058

080042d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042da:	4b0c      	ldr	r3, [pc, #48]	; (800430c <HAL_MspInit+0x38>)
 80042dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042e0:	4a0a      	ldr	r2, [pc, #40]	; (800430c <HAL_MspInit+0x38>)
 80042e2:	f043 0302 	orr.w	r3, r3, #2
 80042e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_MspInit+0x38>)
 80042ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80042f8:	2200      	movs	r2, #0
 80042fa:	210f      	movs	r1, #15
 80042fc:	f06f 0001 	mvn.w	r0, #1
 8004300:	f002 feda 	bl	80070b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	58024400 	.word	0x58024400

08004310 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b090      	sub	sp, #64	; 0x40
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b0f      	cmp	r3, #15
 800431c:	d827      	bhi.n	800436e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800431e:	2200      	movs	r2, #0
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	2036      	movs	r0, #54	; 0x36
 8004324:	f002 fec8 	bl	80070b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004328:	2036      	movs	r0, #54	; 0x36
 800432a:	f002 fedf 	bl	80070ec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800432e:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <HAL_InitTick+0xc4>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <HAL_InitTick+0xc8>)
 8004336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800433a:	4a27      	ldr	r2, [pc, #156]	; (80043d8 <HAL_InitTick+0xc8>)
 800433c:	f043 0310 	orr.w	r3, r3, #16
 8004340:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004344:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_InitTick+0xc8>)
 8004346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004352:	f107 0210 	add.w	r2, r7, #16
 8004356:	f107 0314 	add.w	r3, r7, #20
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f00a fa23 	bl	800e7a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <HAL_InitTick+0x6a>
 800436c:	e001      	b.n	8004372 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e02b      	b.n	80043ca <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004372:	f00a f9ed 	bl	800e750 <HAL_RCC_GetPCLK1Freq>
 8004376:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004378:	e004      	b.n	8004384 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800437a:	f00a f9e9 	bl	800e750 <HAL_RCC_GetPCLK1Freq>
 800437e:	4603      	mov	r3, r0
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004386:	4a15      	ldr	r2, [pc, #84]	; (80043dc <HAL_InitTick+0xcc>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	0c9b      	lsrs	r3, r3, #18
 800438e:	3b01      	subs	r3, #1
 8004390:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004392:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <HAL_InitTick+0xd0>)
 8004394:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <HAL_InitTick+0xd4>)
 8004396:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <HAL_InitTick+0xd0>)
 800439a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800439e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80043a0:	4a0f      	ldr	r2, [pc, #60]	; (80043e0 <HAL_InitTick+0xd0>)
 80043a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80043a6:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <HAL_InitTick+0xd0>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <HAL_InitTick+0xd0>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80043b2:	480b      	ldr	r0, [pc, #44]	; (80043e0 <HAL_InitTick+0xd0>)
 80043b4:	f00d fff9 	bl	80123aa <HAL_TIM_Base_Init>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80043be:	4808      	ldr	r0, [pc, #32]	; (80043e0 <HAL_InitTick+0xd0>)
 80043c0:	f00e f84a 	bl	8012458 <HAL_TIM_Base_Start_IT>
 80043c4:	4603      	mov	r3, r0
 80043c6:	e000      	b.n	80043ca <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3740      	adds	r7, #64	; 0x40
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	24000098 	.word	0x24000098
 80043d8:	58024400 	.word	0x58024400
 80043dc:	431bde83 	.word	0x431bde83
 80043e0:	24001cf4 	.word	0x24001cf4
 80043e4:	40001000 	.word	0x40001000

080043e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80043ec:	e7fe      	b.n	80043ec <NMI_Handler+0x4>

080043ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043ee:	b480      	push	{r7}
 80043f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043f2:	e7fe      	b.n	80043f2 <HardFault_Handler+0x4>

080043f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043f8:	e7fe      	b.n	80043f8 <MemManage_Handler+0x4>

080043fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043fa:	b480      	push	{r7}
 80043fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043fe:	e7fe      	b.n	80043fe <BusFault_Handler+0x4>

08004400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004404:	e7fe      	b.n	8004404 <UsageFault_Handler+0x4>

08004406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004406:	b480      	push	{r7}
 8004408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800440a:	bf00      	nop
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004418:	4802      	ldr	r0, [pc, #8]	; (8004424 <DMA1_Stream0_IRQHandler+0x10>)
 800441a:	f004 fe1d 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800441e:	bf00      	nop
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	24000204 	.word	0x24000204

08004428 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800442c:	4802      	ldr	r0, [pc, #8]	; (8004438 <DMA1_Stream1_IRQHandler+0x10>)
 800442e:	f004 fe13 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004432:	bf00      	nop
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	2400027c 	.word	0x2400027c

0800443c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004440:	4802      	ldr	r0, [pc, #8]	; (800444c <DMA1_Stream2_IRQHandler+0x10>)
 8004442:	f004 fe09 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004446:	bf00      	nop
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	24001e70 	.word	0x24001e70

08004450 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004454:	4802      	ldr	r0, [pc, #8]	; (8004460 <DMA1_Stream3_IRQHandler+0x10>)
 8004456:	f004 fdff 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	24001c7c 	.word	0x24001c7c

08004464 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004468:	4802      	ldr	r0, [pc, #8]	; (8004474 <DMA1_Stream4_IRQHandler+0x10>)
 800446a:	f004 fdf5 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	24001c04 	.word	0x24001c04

08004478 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800447c:	4802      	ldr	r0, [pc, #8]	; (8004488 <DMA1_Stream5_IRQHandler+0x10>)
 800447e:	f004 fdeb 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	24000308 	.word	0x24000308

0800448c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004490:	4802      	ldr	r0, [pc, #8]	; (800449c <DMA1_Stream6_IRQHandler+0x10>)
 8004492:	f004 fde1 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	24001938 	.word	0x24001938

080044a0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044a4:	4802      	ldr	r0, [pc, #8]	; (80044b0 <TIM1_BRK_IRQHandler+0x10>)
 80044a6:	f00e faee 	bl	8012a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	24001d44 	.word	0x24001d44

080044b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044b8:	4802      	ldr	r0, [pc, #8]	; (80044c4 <TIM1_UP_IRQHandler+0x10>)
 80044ba:	f00e fae4 	bl	8012a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	24001d44 	.word	0x24001d44

080044c8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044cc:	4802      	ldr	r0, [pc, #8]	; (80044d8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80044ce:	f00e fada 	bl	8012a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	24001d44 	.word	0x24001d44

080044dc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044e0:	4802      	ldr	r0, [pc, #8]	; (80044ec <TIM1_CC_IRQHandler+0x10>)
 80044e2:	f00e fad0 	bl	8012a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	24001d44 	.word	0x24001d44

080044f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80044f4:	4802      	ldr	r0, [pc, #8]	; (8004500 <TIM2_IRQHandler+0x10>)
 80044f6:	f00e fac6 	bl	8012a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	24001d90 	.word	0x24001d90

08004504 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <I2C1_EV_IRQHandler+0x10>)
 800450a:	f007 f82d 	bl	800b568 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	240018e4 	.word	0x240018e4

08004518 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800451c:	4802      	ldr	r0, [pc, #8]	; (8004528 <I2C1_ER_IRQHandler+0x10>)
 800451e:	f007 f83d 	bl	800b59c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	240018e4 	.word	0x240018e4

0800452c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004530:	4802      	ldr	r0, [pc, #8]	; (800453c <SPI1_IRQHandler+0x10>)
 8004532:	f00d fc07 	bl	8011d44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	24001af4 	.word	0x24001af4

08004540 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004544:	4802      	ldr	r0, [pc, #8]	; (8004550 <SPI2_IRQHandler+0x10>)
 8004546:	f00d fbfd 	bl	8011d44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	24001b7c 	.word	0x24001b7c

08004554 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004558:	4802      	ldr	r0, [pc, #8]	; (8004564 <USART1_IRQHandler+0x10>)
 800455a:	f00f fdd7 	bl	801410c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800455e:	bf00      	nop
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	24001ddc 	.word	0x24001ddc

08004568 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800456c:	4802      	ldr	r0, [pc, #8]	; (8004578 <DMA1_Stream7_IRQHandler+0x10>)
 800456e:	f004 fd73 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004572:	bf00      	nop
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	240019b0 	.word	0x240019b0

0800457c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <TIM6_DAC_IRQHandler+0x20>)
 8004582:	791b      	ldrb	r3, [r3, #4]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800458a:	4804      	ldr	r0, [pc, #16]	; (800459c <TIM6_DAC_IRQHandler+0x20>)
 800458c:	f002 ffbb 	bl	8007506 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004590:	4803      	ldr	r0, [pc, #12]	; (80045a0 <TIM6_DAC_IRQHandler+0x24>)
 8004592:	f00e fa78 	bl	8012a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	240002f4 	.word	0x240002f4
 80045a0:	24001cf4 	.word	0x24001cf4

080045a4 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <ITM_SendChar+0x48>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a0e      	ldr	r2, [pc, #56]	; (80045ec <ITM_SendChar+0x48>)
 80045b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b8:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80045ba:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <ITM_SendChar+0x4c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <ITM_SendChar+0x4c>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80045c6:	bf00      	nop
 80045c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f8      	beq.n	80045c8 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80045d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	6013      	str	r3, [r2, #0]
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	e000edfc 	.word	0xe000edfc
 80045f0:	e0000e00 	.word	0xe0000e00

080045f4 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e00a      	b.n	800461c <_read+0x28>
		*ptr++ = __io_getchar();
 8004606:	f3af 8000 	nop.w
 800460a:	4601      	mov	r1, r0
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	60ba      	str	r2, [r7, #8]
 8004612:	b2ca      	uxtb	r2, r1
 8004614:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	3301      	adds	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	dbf0      	blt.n	8004606 <_read+0x12>
	}

	return len;
 8004624:	687b      	ldr	r3, [r7, #4]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e009      	b.n	8004654 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	60ba      	str	r2, [r7, #8]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff ffab 	bl	80045a4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	3301      	adds	r3, #1
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	429a      	cmp	r2, r3
 800465a:	dbf1      	blt.n	8004640 <_write+0x12>
	}
	return len;
 800465c:	687b      	ldr	r3, [r7, #4]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <_close>:

int _close(int file) {
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800466e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <_fstat>:

int _fstat(int file, struct stat *st) {
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800468e:	605a      	str	r2, [r3, #4]
	return 0;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <_isatty>:

int _isatty(int file) {
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80046a6:	2301      	movs	r3, #1
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80046d8:	4a14      	ldr	r2, [pc, #80]	; (800472c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80046da:	4b15      	ldr	r3, [pc, #84]	; (8004730 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <_sbrk+0x64>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d102      	bne.n	80046f2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80046ec:	4b11      	ldr	r3, [pc, #68]	; (8004734 <_sbrk+0x64>)
 80046ee:	4a12      	ldr	r2, [pc, #72]	; (8004738 <_sbrk+0x68>)
 80046f0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <_sbrk+0x64>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4413      	add	r3, r2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d207      	bcs.n	8004710 <_sbrk+0x40>
		errno = ENOMEM;
 8004700:	f015 fa9c 	bl	8019c3c <__errno>
 8004704:	4603      	mov	r3, r0
 8004706:	220c      	movs	r2, #12
 8004708:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800470e:	e009      	b.n	8004724 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004710:	4b08      	ldr	r3, [pc, #32]	; (8004734 <_sbrk+0x64>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004716:	4b07      	ldr	r3, [pc, #28]	; (8004734 <_sbrk+0x64>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4413      	add	r3, r2
 800471e:	4a05      	ldr	r2, [pc, #20]	; (8004734 <_sbrk+0x64>)
 8004720:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004722:	68fb      	ldr	r3, [r7, #12]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	24080000 	.word	0x24080000
 8004730:	00000400 	.word	0x00000400
 8004734:	24001d40 	.word	0x24001d40
 8004738:	24006920 	.word	0x24006920

0800473c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004740:	4b37      	ldr	r3, [pc, #220]	; (8004820 <SystemInit+0xe4>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004746:	4a36      	ldr	r2, [pc, #216]	; (8004820 <SystemInit+0xe4>)
 8004748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800474c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004750:	4b34      	ldr	r3, [pc, #208]	; (8004824 <SystemInit+0xe8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	2b06      	cmp	r3, #6
 800475a:	d807      	bhi.n	800476c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800475c:	4b31      	ldr	r3, [pc, #196]	; (8004824 <SystemInit+0xe8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f023 030f 	bic.w	r3, r3, #15
 8004764:	4a2f      	ldr	r2, [pc, #188]	; (8004824 <SystemInit+0xe8>)
 8004766:	f043 0307 	orr.w	r3, r3, #7
 800476a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 800476c:	4b2e      	ldr	r3, [pc, #184]	; (8004828 <SystemInit+0xec>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2d      	ldr	r2, [pc, #180]	; (8004828 <SystemInit+0xec>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004778:	4b2b      	ldr	r3, [pc, #172]	; (8004828 <SystemInit+0xec>)
 800477a:	2200      	movs	r2, #0
 800477c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800477e:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <SystemInit+0xec>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4929      	ldr	r1, [pc, #164]	; (8004828 <SystemInit+0xec>)
 8004784:	4b29      	ldr	r3, [pc, #164]	; (800482c <SystemInit+0xf0>)
 8004786:	4013      	ands	r3, r2
 8004788:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <SystemInit+0xe8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004796:	4b23      	ldr	r3, [pc, #140]	; (8004824 <SystemInit+0xe8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 030f 	bic.w	r3, r3, #15
 800479e:	4a21      	ldr	r2, [pc, #132]	; (8004824 <SystemInit+0xe8>)
 80047a0:	f043 0307 	orr.w	r3, r3, #7
 80047a4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <SystemInit+0xec>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80047ac:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <SystemInit+0xec>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <SystemInit+0xec>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80047b8:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <SystemInit+0xec>)
 80047ba:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <SystemInit+0xf4>)
 80047bc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80047be:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <SystemInit+0xec>)
 80047c0:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <SystemInit+0xf8>)
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80047c4:	4b18      	ldr	r3, [pc, #96]	; (8004828 <SystemInit+0xec>)
 80047c6:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <SystemInit+0xfc>)
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80047ca:	4b17      	ldr	r3, [pc, #92]	; (8004828 <SystemInit+0xec>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80047d0:	4b15      	ldr	r3, [pc, #84]	; (8004828 <SystemInit+0xec>)
 80047d2:	4a19      	ldr	r2, [pc, #100]	; (8004838 <SystemInit+0xfc>)
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <SystemInit+0xec>)
 80047d8:	2200      	movs	r2, #0
 80047da:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80047dc:	4b12      	ldr	r3, [pc, #72]	; (8004828 <SystemInit+0xec>)
 80047de:	4a16      	ldr	r2, [pc, #88]	; (8004838 <SystemInit+0xfc>)
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80047e2:	4b11      	ldr	r3, [pc, #68]	; (8004828 <SystemInit+0xec>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <SystemInit+0xec>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a0e      	ldr	r2, [pc, #56]	; (8004828 <SystemInit+0xec>)
 80047ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <SystemInit+0xec>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <SystemInit+0x100>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <SystemInit+0x104>)
 8004800:	4013      	ands	r3, r2
 8004802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004806:	d202      	bcs.n	800480e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004808:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <SystemInit+0x108>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800480e:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <SystemInit+0x10c>)
 8004810:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004814:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004816:	bf00      	nop
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	e000ed00 	.word	0xe000ed00
 8004824:	52002000 	.word	0x52002000
 8004828:	58024400 	.word	0x58024400
 800482c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004830:	02020200 	.word	0x02020200
 8004834:	01ff0000 	.word	0x01ff0000
 8004838:	01010280 	.word	0x01010280
 800483c:	5c001000 	.word	0x5c001000
 8004840:	ffff0000 	.word	0xffff0000
 8004844:	51008108 	.word	0x51008108
 8004848:	52004000 	.word	0x52004000

0800484c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b09a      	sub	sp, #104	; 0x68
 8004850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004852:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	605a      	str	r2, [r3, #4]
 800485c:	609a      	str	r2, [r3, #8]
 800485e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004860:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800486c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	605a      	str	r2, [r3, #4]
 8004876:	609a      	str	r2, [r3, #8]
 8004878:	60da      	str	r2, [r3, #12]
 800487a:	611a      	str	r2, [r3, #16]
 800487c:	615a      	str	r2, [r3, #20]
 800487e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004880:	1d3b      	adds	r3, r7, #4
 8004882:	222c      	movs	r2, #44	; 0x2c
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f015 fa10 	bl	8019cac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800488c:	4b44      	ldr	r3, [pc, #272]	; (80049a0 <MX_TIM1_Init+0x154>)
 800488e:	4a45      	ldr	r2, [pc, #276]	; (80049a4 <MX_TIM1_Init+0x158>)
 8004890:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004892:	4b43      	ldr	r3, [pc, #268]	; (80049a0 <MX_TIM1_Init+0x154>)
 8004894:	224a      	movs	r2, #74	; 0x4a
 8004896:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004898:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <MX_TIM1_Init+0x154>)
 800489a:	2200      	movs	r2, #0
 800489c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800489e:	4b40      	ldr	r3, [pc, #256]	; (80049a0 <MX_TIM1_Init+0x154>)
 80048a0:	f24f 4223 	movw	r2, #62499	; 0xf423
 80048a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048a6:	4b3e      	ldr	r3, [pc, #248]	; (80049a0 <MX_TIM1_Init+0x154>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80048ac:	4b3c      	ldr	r3, [pc, #240]	; (80049a0 <MX_TIM1_Init+0x154>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048b2:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <MX_TIM1_Init+0x154>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80048b8:	4839      	ldr	r0, [pc, #228]	; (80049a0 <MX_TIM1_Init+0x154>)
 80048ba:	f00d fd76 	bl	80123aa <HAL_TIM_Base_Init>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80048c4:	f7fe feea 	bl	800369c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048cc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80048ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80048d2:	4619      	mov	r1, r3
 80048d4:	4832      	ldr	r0, [pc, #200]	; (80049a0 <MX_TIM1_Init+0x154>)
 80048d6:	f00e faf1 	bl	8012ebc <HAL_TIM_ConfigClockSource>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80048e0:	f7fe fedc 	bl	800369c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80048e4:	482e      	ldr	r0, [pc, #184]	; (80049a0 <MX_TIM1_Init+0x154>)
 80048e6:	f00e f86d 	bl	80129c4 <HAL_TIM_PWM_Init>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80048f0:	f7fe fed4 	bl	800369c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048f4:	2300      	movs	r3, #0
 80048f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80048f8:	2300      	movs	r3, #0
 80048fa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004900:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004904:	4619      	mov	r1, r3
 8004906:	4826      	ldr	r0, [pc, #152]	; (80049a0 <MX_TIM1_Init+0x154>)
 8004908:	f00f f82e 	bl	8013968 <HAL_TIMEx_MasterConfigSynchronization>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004912:	f7fe fec3 	bl	800369c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004916:	2360      	movs	r3, #96	; 0x60
 8004918:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800491a:	f240 13df 	movw	r3, #479	; 0x1df
 800491e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004920:	2300      	movs	r3, #0
 8004922:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004924:	2300      	movs	r3, #0
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004928:	2300      	movs	r3, #0
 800492a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800492c:	2300      	movs	r3, #0
 800492e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004930:	2300      	movs	r3, #0
 8004932:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004934:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004938:	2200      	movs	r2, #0
 800493a:	4619      	mov	r1, r3
 800493c:	4818      	ldr	r0, [pc, #96]	; (80049a0 <MX_TIM1_Init+0x154>)
 800493e:	f00e f9a9 	bl	8012c94 <HAL_TIM_PWM_ConfigChannel>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004948:	f7fe fea8 	bl	800369c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800494c:	2300      	movs	r3, #0
 800494e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004950:	2300      	movs	r3, #0
 8004952:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004964:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800496a:	2300      	movs	r3, #0
 800496c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800496e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004978:	2300      	movs	r3, #0
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	4619      	mov	r1, r3
 8004980:	4807      	ldr	r0, [pc, #28]	; (80049a0 <MX_TIM1_Init+0x154>)
 8004982:	f00f f87f 	bl	8013a84 <HAL_TIMEx_ConfigBreakDeadTime>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800498c:	f7fe fe86 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004990:	4803      	ldr	r0, [pc, #12]	; (80049a0 <MX_TIM1_Init+0x154>)
 8004992:	f000 f8dd 	bl	8004b50 <HAL_TIM_MspPostInit>

}
 8004996:	bf00      	nop
 8004998:	3768      	adds	r7, #104	; 0x68
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	24001d44 	.word	0x24001d44
 80049a4:	40010000 	.word	0x40010000

080049a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08e      	sub	sp, #56	; 0x38
 80049ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	609a      	str	r2, [r3, #8]
 80049ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049bc:	f107 031c 	add.w	r3, r7, #28
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049c8:	463b      	mov	r3, r7
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	609a      	str	r2, [r3, #8]
 80049d2:	60da      	str	r2, [r3, #12]
 80049d4:	611a      	str	r2, [r3, #16]
 80049d6:	615a      	str	r2, [r3, #20]
 80049d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80049da:	4b2d      	ldr	r3, [pc, #180]	; (8004a90 <MX_TIM2_Init+0xe8>)
 80049dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 80049e2:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <MX_TIM2_Init+0xe8>)
 80049e4:	224a      	movs	r2, #74	; 0x4a
 80049e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049e8:	4b29      	ldr	r3, [pc, #164]	; (8004a90 <MX_TIM2_Init+0xe8>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80049ee:	4b28      	ldr	r3, [pc, #160]	; (8004a90 <MX_TIM2_Init+0xe8>)
 80049f0:	f640 4234 	movw	r2, #3124	; 0xc34
 80049f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049f6:	4b26      	ldr	r3, [pc, #152]	; (8004a90 <MX_TIM2_Init+0xe8>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049fc:	4b24      	ldr	r3, [pc, #144]	; (8004a90 <MX_TIM2_Init+0xe8>)
 80049fe:	2280      	movs	r2, #128	; 0x80
 8004a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a02:	4823      	ldr	r0, [pc, #140]	; (8004a90 <MX_TIM2_Init+0xe8>)
 8004a04:	f00d fcd1 	bl	80123aa <HAL_TIM_Base_Init>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004a0e:	f7fe fe45 	bl	800369c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	481c      	ldr	r0, [pc, #112]	; (8004a90 <MX_TIM2_Init+0xe8>)
 8004a20:	f00e fa4c 	bl	8012ebc <HAL_TIM_ConfigClockSource>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004a2a:	f7fe fe37 	bl	800369c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004a2e:	4818      	ldr	r0, [pc, #96]	; (8004a90 <MX_TIM2_Init+0xe8>)
 8004a30:	f00d ffc8 	bl	80129c4 <HAL_TIM_PWM_Init>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004a3a:	f7fe fe2f 	bl	800369c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a3e:	2320      	movs	r3, #32
 8004a40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a46:	f107 031c 	add.w	r3, r7, #28
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4810      	ldr	r0, [pc, #64]	; (8004a90 <MX_TIM2_Init+0xe8>)
 8004a4e:	f00e ff8b 	bl	8013968 <HAL_TIMEx_MasterConfigSynchronization>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004a58:	f7fe fe20 	bl	800369c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a5c:	2360      	movs	r3, #96	; 0x60
 8004a5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a6c:	463b      	mov	r3, r7
 8004a6e:	220c      	movs	r2, #12
 8004a70:	4619      	mov	r1, r3
 8004a72:	4807      	ldr	r0, [pc, #28]	; (8004a90 <MX_TIM2_Init+0xe8>)
 8004a74:	f00e f90e 	bl	8012c94 <HAL_TIM_PWM_ConfigChannel>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004a7e:	f7fe fe0d 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004a82:	4803      	ldr	r0, [pc, #12]	; (8004a90 <MX_TIM2_Init+0xe8>)
 8004a84:	f000 f864 	bl	8004b50 <HAL_TIM_MspPostInit>

}
 8004a88:	bf00      	nop
 8004a8a:	3738      	adds	r7, #56	; 0x38
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	24001d90 	.word	0x24001d90

08004a94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a29      	ldr	r2, [pc, #164]	; (8004b48 <HAL_TIM_Base_MspInit+0xb4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d12f      	bne.n	8004b06 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004aa6:	4b29      	ldr	r3, [pc, #164]	; (8004b4c <HAL_TIM_Base_MspInit+0xb8>)
 8004aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004aac:	4a27      	ldr	r2, [pc, #156]	; (8004b4c <HAL_TIM_Base_MspInit+0xb8>)
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004ab6:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <HAL_TIM_Base_MspInit+0xb8>)
 8004ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2105      	movs	r1, #5
 8004ac8:	2018      	movs	r0, #24
 8004aca:	f002 faf5 	bl	80070b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004ace:	2018      	movs	r0, #24
 8004ad0:	f002 fb0c 	bl	80070ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2105      	movs	r1, #5
 8004ad8:	2019      	movs	r0, #25
 8004ada:	f002 faed 	bl	80070b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004ade:	2019      	movs	r0, #25
 8004ae0:	f002 fb04 	bl	80070ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2105      	movs	r1, #5
 8004ae8:	201a      	movs	r0, #26
 8004aea:	f002 fae5 	bl	80070b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004aee:	201a      	movs	r0, #26
 8004af0:	f002 fafc 	bl	80070ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004af4:	2200      	movs	r2, #0
 8004af6:	2105      	movs	r1, #5
 8004af8:	201b      	movs	r0, #27
 8004afa:	f002 fadd 	bl	80070b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004afe:	201b      	movs	r0, #27
 8004b00:	f002 faf4 	bl	80070ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004b04:	e01b      	b.n	8004b3e <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0e:	d116      	bne.n	8004b3e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b10:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <HAL_TIM_Base_MspInit+0xb8>)
 8004b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b16:	4a0d      	ldr	r2, [pc, #52]	; (8004b4c <HAL_TIM_Base_MspInit+0xb8>)
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b20:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <HAL_TIM_Base_MspInit+0xb8>)
 8004b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2105      	movs	r1, #5
 8004b32:	201c      	movs	r0, #28
 8004b34:	f002 fac0 	bl	80070b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004b38:	201c      	movs	r0, #28
 8004b3a:	f002 fad7 	bl	80070ec <HAL_NVIC_EnableIRQ>
}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	58024400 	.word	0x58024400

08004b50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	; 0x28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b58:	f107 0314 	add.w	r3, r7, #20
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <HAL_TIM_MspPostInit+0xb8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d120      	bne.n	8004bb4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b72:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <HAL_TIM_MspPostInit+0xbc>)
 8004b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b78:	4a24      	ldr	r2, [pc, #144]	; (8004c0c <HAL_TIM_MspPostInit+0xbc>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b82:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <HAL_TIM_MspPostInit+0xbc>)
 8004b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b96:	2302      	movs	r3, #2
 8004b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba6:	f107 0314 	add.w	r3, r7, #20
 8004baa:	4619      	mov	r1, r3
 8004bac:	4818      	ldr	r0, [pc, #96]	; (8004c10 <HAL_TIM_MspPostInit+0xc0>)
 8004bae:	f006 f859 	bl	800ac64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004bb2:	e024      	b.n	8004bfe <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bbc:	d11f      	bne.n	8004bfe <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <HAL_TIM_MspPostInit+0xbc>)
 8004bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bc4:	4a11      	ldr	r2, [pc, #68]	; (8004c0c <HAL_TIM_MspPostInit+0xbc>)
 8004bc6:	f043 0302 	orr.w	r3, r3, #2
 8004bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <HAL_TIM_MspPostInit+0xbc>)
 8004bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004bdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be2:	2302      	movs	r3, #2
 8004be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bea:	2300      	movs	r3, #0
 8004bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf2:	f107 0314 	add.w	r3, r7, #20
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4806      	ldr	r0, [pc, #24]	; (8004c14 <HAL_TIM_MspPostInit+0xc4>)
 8004bfa:	f006 f833 	bl	800ac64 <HAL_GPIO_Init>
}
 8004bfe:	bf00      	nop
 8004c00:	3728      	adds	r7, #40	; 0x28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40010000 	.word	0x40010000
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	58020000 	.word	0x58020000
 8004c14:	58020400 	.word	0x58020400

08004c18 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004c24:	4b21      	ldr	r3, [pc, #132]	; (8004cac <get_uptime+0x94>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004c2a:	4b21      	ldr	r3, [pc, #132]	; (8004cb0 <get_uptime+0x98>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004c30:	4b1e      	ldr	r3, [pc, #120]	; (8004cac <get_uptime+0x94>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d005      	beq.n	8004c46 <get_uptime+0x2e>
		ms = uptime_millis;
 8004c3a:	4b1c      	ldr	r3, [pc, #112]	; (8004cac <get_uptime+0x94>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004c40:	4b1b      	ldr	r3, [pc, #108]	; (8004cb0 <get_uptime+0x98>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c4c:	fb03 f202 	mul.w	r2, r3, r2
 8004c50:	4b17      	ldr	r3, [pc, #92]	; (8004cb0 <get_uptime+0x98>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	3301      	adds	r3, #1
 8004c56:	4917      	ldr	r1, [pc, #92]	; (8004cb4 <get_uptime+0x9c>)
 8004c58:	fba1 1303 	umull	r1, r3, r1, r3
 8004c5c:	099b      	lsrs	r3, r3, #6
 8004c5e:	68f9      	ldr	r1, [r7, #12]
 8004c60:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <get_uptime+0x5a>
		uptime = 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	0e1b      	lsrs	r3, r3, #24
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	0c1a      	lsrs	r2, r3, #16
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3301      	adds	r3, #1
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	0a1a      	lsrs	r2, r3, #8
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3302      	adds	r3, #2
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3303      	adds	r3, #3
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	24001a78 	.word	0x24001a78
 8004cb0:	e000e010 	.word	0xe000e010
 8004cb4:	10624dd3 	.word	0x10624dd3

08004cb8 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08a      	sub	sp, #40	; 0x28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8004cc0:	f107 0310 	add.w	r3, r7, #16
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4821      	ldr	r0, [pc, #132]	; (8004d50 <get_timestamp+0x98>)
 8004cca:	f00c fbcd 	bl	8011468 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8004cce:	f107 030c 	add.w	r3, r7, #12
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	481e      	ldr	r0, [pc, #120]	; (8004d50 <get_timestamp+0x98>)
 8004cd8:	f00c fcaa 	bl	8011630 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2264      	movs	r2, #100	; 0x64
 8004ce0:	fb03 f202 	mul.w	r2, r3, r2
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <get_timestamp+0x9c>)
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8004cea:	7bfa      	ldrb	r2, [r7, #15]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	7b7a      	ldrb	r2, [r7, #13]
 8004cf6:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	7bba      	ldrb	r2, [r7, #14]
 8004cfe:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3303      	adds	r3, #3
 8004d04:	7c3a      	ldrb	r2, [r7, #16]
 8004d06:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	7c7a      	ldrb	r2, [r7, #17]
 8004d0e:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3305      	adds	r3, #5
 8004d14:	7cba      	ldrb	r2, [r7, #18]
 8004d16:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	0e1a      	lsrs	r2, r3, #24
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3306      	adds	r3, #6
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	0c1a      	lsrs	r2, r3, #16
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3307      	adds	r3, #7
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	0a1a      	lsrs	r2, r3, #8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3308      	adds	r3, #8
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3309      	adds	r3, #9
 8004d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]
}
 8004d46:	bf00      	nop
 8004d48:	3728      	adds	r7, #40	; 0x28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	24001a8c 	.word	0x24001a8c
 8004d54:	000f4240 	.word	0x000f4240

08004d58 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d5c:	4b30      	ldr	r3, [pc, #192]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004d5e:	4a31      	ldr	r2, [pc, #196]	; (8004e24 <MX_USART1_UART_Init+0xcc>)
 8004d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8004d62:	4b2f      	ldr	r3, [pc, #188]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004d64:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d6a:	4b2d      	ldr	r3, [pc, #180]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d70:	4b2b      	ldr	r3, [pc, #172]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d76:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d7c:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004d7e:	220c      	movs	r2, #12
 8004d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d82:	4b27      	ldr	r3, [pc, #156]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d88:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004d94:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d9a:	4b21      	ldr	r3, [pc, #132]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004da0:	481f      	ldr	r0, [pc, #124]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004da2:	f00e ff0b 	bl	8013bbc <HAL_UART_Init>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004dac:	f7fe fc76 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004db0:	2100      	movs	r1, #0
 8004db2:	481b      	ldr	r0, [pc, #108]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004db4:	f011 fc51 	bl	801665a <HAL_UARTEx_SetTxFifoThreshold>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004dbe:	f7fe fc6d 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4816      	ldr	r0, [pc, #88]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004dc6:	f011 fc86 	bl	80166d6 <HAL_UARTEx_SetRxFifoThreshold>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004dd0:	f7fe fc64 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004dd4:	4812      	ldr	r0, [pc, #72]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004dd6:	f011 fc07 	bl	80165e8 <HAL_UARTEx_DisableFifoMode>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004de0:	f7fe fc5c 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8004de4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004de8:	480d      	ldr	r0, [pc, #52]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004dea:	f011 fc74 	bl	80166d6 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8004dee:	480c      	ldr	r0, [pc, #48]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004df0:	f011 fbbf 	bl	8016572 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8004df4:	480a      	ldr	r0, [pc, #40]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004df6:	f011 fb89 	bl	801650c <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8004dfa:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e08:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <MX_USART1_UART_Init+0xc8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004e18:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8004e1a:	bf00      	nop
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	24001ddc 	.word	0x24001ddc
 8004e24:	40011000 	.word	0x40011000

08004e28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b0ba      	sub	sp, #232	; 0xe8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e40:	f107 0310 	add.w	r3, r7, #16
 8004e44:	22c0      	movs	r2, #192	; 0xc0
 8004e46:	2100      	movs	r1, #0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f014 ff2f 	bl	8019cac <memset>
  if(uartHandle->Instance==USART1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a41      	ldr	r2, [pc, #260]	; (8004f58 <HAL_UART_MspInit+0x130>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d17b      	bne.n	8004f50 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004e58:	f04f 0201 	mov.w	r2, #1
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8004e64:	2318      	movs	r3, #24
 8004e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e6a:	f107 0310 	add.w	r3, r7, #16
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f009 fcdc 	bl	800e82c <HAL_RCCEx_PeriphCLKConfig>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004e7a:	f7fe fc0f 	bl	800369c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e7e:	4b37      	ldr	r3, [pc, #220]	; (8004f5c <HAL_UART_MspInit+0x134>)
 8004e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e84:	4a35      	ldr	r2, [pc, #212]	; (8004f5c <HAL_UART_MspInit+0x134>)
 8004e86:	f043 0310 	orr.w	r3, r3, #16
 8004e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e8e:	4b33      	ldr	r3, [pc, #204]	; (8004f5c <HAL_UART_MspInit+0x134>)
 8004e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e9c:	4b2f      	ldr	r3, [pc, #188]	; (8004f5c <HAL_UART_MspInit+0x134>)
 8004e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ea2:	4a2e      	ldr	r2, [pc, #184]	; (8004f5c <HAL_UART_MspInit+0x134>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004eac:	4b2b      	ldr	r3, [pc, #172]	; (8004f5c <HAL_UART_MspInit+0x134>)
 8004eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004eba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ed4:	2307      	movs	r3, #7
 8004ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eda:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	481f      	ldr	r0, [pc, #124]	; (8004f60 <HAL_UART_MspInit+0x138>)
 8004ee2:	f005 febf 	bl	800ac64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <HAL_UART_MspInit+0x140>)
 8004eea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004eec:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004eee:	222a      	movs	r2, #42	; 0x2a
 8004ef0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ef2:	4b1c      	ldr	r3, [pc, #112]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004ef4:	2240      	movs	r2, #64	; 0x40
 8004ef6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ef8:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004efe:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f04:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f06:	4b17      	ldr	r3, [pc, #92]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f0c:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004f12:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f18:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004f24:	480f      	ldr	r0, [pc, #60]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004f26:	f002 fd6d 	bl	8007a04 <HAL_DMA_Init>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004f30:	f7fe fbb4 	bl	800369c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004f38:	67da      	str	r2, [r3, #124]	; 0x7c
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <HAL_UART_MspInit+0x13c>)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004f40:	2200      	movs	r2, #0
 8004f42:	2105      	movs	r1, #5
 8004f44:	2025      	movs	r0, #37	; 0x25
 8004f46:	f002 f8b7 	bl	80070b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004f4a:	2025      	movs	r0, #37	; 0x25
 8004f4c:	f002 f8ce 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004f50:	bf00      	nop
 8004f52:	37e8      	adds	r7, #232	; 0xe8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40011000 	.word	0x40011000
 8004f5c:	58024400 	.word	0x58024400
 8004f60:	58020000 	.word	0x58020000
 8004f64:	24001e70 	.word	0x24001e70
 8004f68:	40020040 	.word	0x40020040

08004f6c <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8004f76:	4bc2      	ldr	r3, [pc, #776]	; (8005280 <voltage_monitor_init+0x314>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8004f7c:	4bc0      	ldr	r3, [pc, #768]	; (8005280 <voltage_monitor_init+0x314>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8004f82:	4bbf      	ldr	r3, [pc, #764]	; (8005280 <voltage_monitor_init+0x314>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8004f88:	4bbd      	ldr	r3, [pc, #756]	; (8005280 <voltage_monitor_init+0x314>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004f8e:	4bbc      	ldr	r3, [pc, #752]	; (8005280 <voltage_monitor_init+0x314>)
 8004f90:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f94:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8004f96:	4bba      	ldr	r3, [pc, #744]	; (8005280 <voltage_monitor_init+0x314>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8004f9c:	4bb8      	ldr	r3, [pc, #736]	; (8005280 <voltage_monitor_init+0x314>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8004fa2:	4bb7      	ldr	r3, [pc, #732]	; (8005280 <voltage_monitor_init+0x314>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8004fa8:	4bb5      	ldr	r3, [pc, #724]	; (8005280 <voltage_monitor_init+0x314>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8004fae:	4bb4      	ldr	r3, [pc, #720]	; (8005280 <voltage_monitor_init+0x314>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004fb4:	4bb2      	ldr	r3, [pc, #712]	; (8005280 <voltage_monitor_init+0x314>)
 8004fb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fba:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8004fbc:	4bb0      	ldr	r3, [pc, #704]	; (8005280 <voltage_monitor_init+0x314>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8004fc2:	4baf      	ldr	r3, [pc, #700]	; (8005280 <voltage_monitor_init+0x314>)
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8004fc8:	4bad      	ldr	r3, [pc, #692]	; (8005280 <voltage_monitor_init+0x314>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8004fce:	4bac      	ldr	r3, [pc, #688]	; (8005280 <voltage_monitor_init+0x314>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8004fd4:	4baa      	ldr	r3, [pc, #680]	; (8005280 <voltage_monitor_init+0x314>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004fda:	4ba9      	ldr	r3, [pc, #676]	; (8005280 <voltage_monitor_init+0x314>)
 8004fdc:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fe0:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8004fe2:	4ba7      	ldr	r3, [pc, #668]	; (8005280 <voltage_monitor_init+0x314>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8004fe8:	4ba5      	ldr	r3, [pc, #660]	; (8005280 <voltage_monitor_init+0x314>)
 8004fea:	2203      	movs	r2, #3
 8004fec:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8004fee:	4ba4      	ldr	r3, [pc, #656]	; (8005280 <voltage_monitor_init+0x314>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8004ff4:	4ba2      	ldr	r3, [pc, #648]	; (8005280 <voltage_monitor_init+0x314>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8004ffc:	4ba0      	ldr	r3, [pc, #640]	; (8005280 <voltage_monitor_init+0x314>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005002:	4b9f      	ldr	r3, [pc, #636]	; (8005280 <voltage_monitor_init+0x314>)
 8005004:	f242 7210 	movw	r2, #10000	; 0x2710
 8005008:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 800500a:	4b9d      	ldr	r3, [pc, #628]	; (8005280 <voltage_monitor_init+0x314>)
 800500c:	2200      	movs	r2, #0
 800500e:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8005010:	4b9b      	ldr	r3, [pc, #620]	; (8005280 <voltage_monitor_init+0x314>)
 8005012:	2204      	movs	r2, #4
 8005014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005018:	4b99      	ldr	r3, [pc, #612]	; (8005280 <voltage_monitor_init+0x314>)
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8005020:	4b97      	ldr	r3, [pc, #604]	; (8005280 <voltage_monitor_init+0x314>)
 8005022:	2201      	movs	r2, #1
 8005024:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005028:	4b95      	ldr	r3, [pc, #596]	; (8005280 <voltage_monitor_init+0x314>)
 800502a:	2200      	movs	r2, #0
 800502c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800502e:	4b94      	ldr	r3, [pc, #592]	; (8005280 <voltage_monitor_init+0x314>)
 8005030:	f242 7210 	movw	r2, #10000	; 0x2710
 8005034:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8005036:	4b92      	ldr	r3, [pc, #584]	; (8005280 <voltage_monitor_init+0x314>)
 8005038:	2200      	movs	r2, #0
 800503a:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 800503c:	4b90      	ldr	r3, [pc, #576]	; (8005280 <voltage_monitor_init+0x314>)
 800503e:	2205      	movs	r2, #5
 8005040:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8005044:	4b8e      	ldr	r3, [pc, #568]	; (8005280 <voltage_monitor_init+0x314>)
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 800504c:	4b8c      	ldr	r3, [pc, #560]	; (8005280 <voltage_monitor_init+0x314>)
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8005054:	4b8a      	ldr	r3, [pc, #552]	; (8005280 <voltage_monitor_init+0x314>)
 8005056:	2200      	movs	r2, #0
 8005058:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 800505a:	4b89      	ldr	r3, [pc, #548]	; (8005280 <voltage_monitor_init+0x314>)
 800505c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005060:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8005062:	4b87      	ldr	r3, [pc, #540]	; (8005280 <voltage_monitor_init+0x314>)
 8005064:	2200      	movs	r2, #0
 8005066:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8005068:	4b85      	ldr	r3, [pc, #532]	; (8005280 <voltage_monitor_init+0x314>)
 800506a:	2206      	movs	r2, #6
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8005070:	4b83      	ldr	r3, [pc, #524]	; (8005280 <voltage_monitor_init+0x314>)
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8005078:	4b81      	ldr	r3, [pc, #516]	; (8005280 <voltage_monitor_init+0x314>)
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8005080:	4b7f      	ldr	r3, [pc, #508]	; (8005280 <voltage_monitor_init+0x314>)
 8005082:	2200      	movs	r2, #0
 8005084:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005088:	4b7d      	ldr	r3, [pc, #500]	; (8005280 <voltage_monitor_init+0x314>)
 800508a:	f242 7210 	movw	r2, #10000	; 0x2710
 800508e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8005092:	4b7b      	ldr	r3, [pc, #492]	; (8005280 <voltage_monitor_init+0x314>)
 8005094:	2200      	movs	r2, #0
 8005096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 800509a:	4b79      	ldr	r3, [pc, #484]	; (8005280 <voltage_monitor_init+0x314>)
 800509c:	2207      	movs	r2, #7
 800509e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 80050a2:	4b77      	ldr	r3, [pc, #476]	; (8005280 <voltage_monitor_init+0x314>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 80050aa:	4b75      	ldr	r3, [pc, #468]	; (8005280 <voltage_monitor_init+0x314>)
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 80050b2:	4b73      	ldr	r3, [pc, #460]	; (8005280 <voltage_monitor_init+0x314>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80050ba:	4b71      	ldr	r3, [pc, #452]	; (8005280 <voltage_monitor_init+0x314>)
 80050bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80050c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80050c4:	4b6e      	ldr	r3, [pc, #440]	; (8005280 <voltage_monitor_init+0x314>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80050cc:	4b6c      	ldr	r3, [pc, #432]	; (8005280 <voltage_monitor_init+0x314>)
 80050ce:	2208      	movs	r2, #8
 80050d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80050d4:	4b6a      	ldr	r3, [pc, #424]	; (8005280 <voltage_monitor_init+0x314>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80050dc:	4b68      	ldr	r3, [pc, #416]	; (8005280 <voltage_monitor_init+0x314>)
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 80050e4:	4b66      	ldr	r3, [pc, #408]	; (8005280 <voltage_monitor_init+0x314>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 80050ec:	4b64      	ldr	r3, [pc, #400]	; (8005280 <voltage_monitor_init+0x314>)
 80050ee:	f640 42b9 	movw	r2, #3257	; 0xcb9
 80050f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 80050f6:	4b62      	ldr	r3, [pc, #392]	; (8005280 <voltage_monitor_init+0x314>)
 80050f8:	f640 3283 	movw	r2, #2947	; 0xb83
 80050fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8005100:	4b5f      	ldr	r3, [pc, #380]	; (8005280 <voltage_monitor_init+0x314>)
 8005102:	2209      	movs	r2, #9
 8005104:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005108:	4b5d      	ldr	r3, [pc, #372]	; (8005280 <voltage_monitor_init+0x314>)
 800510a:	2200      	movs	r2, #0
 800510c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8005110:	4b5b      	ldr	r3, [pc, #364]	; (8005280 <voltage_monitor_init+0x314>)
 8005112:	2200      	movs	r2, #0
 8005114:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005118:	4b59      	ldr	r3, [pc, #356]	; (8005280 <voltage_monitor_init+0x314>)
 800511a:	2200      	movs	r2, #0
 800511c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8005120:	4b57      	ldr	r3, [pc, #348]	; (8005280 <voltage_monitor_init+0x314>)
 8005122:	f640 7245 	movw	r2, #3909	; 0xf45
 8005126:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 800512a:	4b55      	ldr	r3, [pc, #340]	; (8005280 <voltage_monitor_init+0x314>)
 800512c:	2200      	movs	r2, #0
 800512e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8005132:	4b53      	ldr	r3, [pc, #332]	; (8005280 <voltage_monitor_init+0x314>)
 8005134:	220a      	movs	r2, #10
 8005136:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 800513a:	4b51      	ldr	r3, [pc, #324]	; (8005280 <voltage_monitor_init+0x314>)
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8005142:	4b4f      	ldr	r3, [pc, #316]	; (8005280 <voltage_monitor_init+0x314>)
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 800514a:	4b4d      	ldr	r3, [pc, #308]	; (8005280 <voltage_monitor_init+0x314>)
 800514c:	2200      	movs	r2, #0
 800514e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8005152:	4b4b      	ldr	r3, [pc, #300]	; (8005280 <voltage_monitor_init+0x314>)
 8005154:	f640 7245 	movw	r2, #3909	; 0xf45
 8005158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 800515c:	4b48      	ldr	r3, [pc, #288]	; (8005280 <voltage_monitor_init+0x314>)
 800515e:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005162:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8005166:	4b46      	ldr	r3, [pc, #280]	; (8005280 <voltage_monitor_init+0x314>)
 8005168:	220b      	movs	r2, #11
 800516a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 800516e:	4b44      	ldr	r3, [pc, #272]	; (8005280 <voltage_monitor_init+0x314>)
 8005170:	2200      	movs	r2, #0
 8005172:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8005176:	4b42      	ldr	r3, [pc, #264]	; (8005280 <voltage_monitor_init+0x314>)
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 800517e:	4b40      	ldr	r3, [pc, #256]	; (8005280 <voltage_monitor_init+0x314>)
 8005180:	2200      	movs	r2, #0
 8005182:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8005186:	4b3e      	ldr	r3, [pc, #248]	; (8005280 <voltage_monitor_init+0x314>)
 8005188:	f640 72fb 	movw	r2, #4091	; 0xffb
 800518c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8005190:	4b3b      	ldr	r3, [pc, #236]	; (8005280 <voltage_monitor_init+0x314>)
 8005192:	f640 6276 	movw	r2, #3702	; 0xe76
 8005196:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 800519a:	4b39      	ldr	r3, [pc, #228]	; (8005280 <voltage_monitor_init+0x314>)
 800519c:	220c      	movs	r2, #12
 800519e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 80051a2:	4b37      	ldr	r3, [pc, #220]	; (8005280 <voltage_monitor_init+0x314>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 80051aa:	4b35      	ldr	r3, [pc, #212]	; (8005280 <voltage_monitor_init+0x314>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 80051b2:	4b33      	ldr	r3, [pc, #204]	; (8005280 <voltage_monitor_init+0x314>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 80051ba:	4b31      	ldr	r3, [pc, #196]	; (8005280 <voltage_monitor_init+0x314>)
 80051bc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80051c0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 80051c4:	4b2e      	ldr	r3, [pc, #184]	; (8005280 <voltage_monitor_init+0x314>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 80051cc:	4b2c      	ldr	r3, [pc, #176]	; (8005280 <voltage_monitor_init+0x314>)
 80051ce:	220d      	movs	r2, #13
 80051d0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 80051d4:	4b2a      	ldr	r3, [pc, #168]	; (8005280 <voltage_monitor_init+0x314>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 80051dc:	4b28      	ldr	r3, [pc, #160]	; (8005280 <voltage_monitor_init+0x314>)
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 80051e4:	4b26      	ldr	r3, [pc, #152]	; (8005280 <voltage_monitor_init+0x314>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 80051ec:	4b24      	ldr	r3, [pc, #144]	; (8005280 <voltage_monitor_init+0x314>)
 80051ee:	f640 7238 	movw	r2, #3896	; 0xf38
 80051f2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 80051f6:	4b22      	ldr	r3, [pc, #136]	; (8005280 <voltage_monitor_init+0x314>)
 80051f8:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80051fc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8005200:	4b1f      	ldr	r3, [pc, #124]	; (8005280 <voltage_monitor_init+0x314>)
 8005202:	220e      	movs	r2, #14
 8005204:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005208:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <voltage_monitor_init+0x314>)
 800520a:	2200      	movs	r2, #0
 800520c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8005210:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <voltage_monitor_init+0x314>)
 8005212:	2200      	movs	r2, #0
 8005214:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005218:	4b19      	ldr	r3, [pc, #100]	; (8005280 <voltage_monitor_init+0x314>)
 800521a:	2200      	movs	r2, #0
 800521c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8005220:	4b17      	ldr	r3, [pc, #92]	; (8005280 <voltage_monitor_init+0x314>)
 8005222:	f640 7245 	movw	r2, #3909	; 0xf45
 8005226:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 800522a:	4b15      	ldr	r3, [pc, #84]	; (8005280 <voltage_monitor_init+0x314>)
 800522c:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005230:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8005234:	4b12      	ldr	r3, [pc, #72]	; (8005280 <voltage_monitor_init+0x314>)
 8005236:	220f      	movs	r2, #15
 8005238:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 800523c:	4b10      	ldr	r3, [pc, #64]	; (8005280 <voltage_monitor_init+0x314>)
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8005244:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <voltage_monitor_init+0x314>)
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 800524c:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <voltage_monitor_init+0x314>)
 800524e:	2200      	movs	r2, #0
 8005250:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8005254:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <voltage_monitor_init+0x314>)
 8005256:	f241 0264 	movw	r2, #4196	; 0x1064
 800525a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 800525e:	4b08      	ldr	r3, [pc, #32]	; (8005280 <voltage_monitor_init+0x314>)
 8005260:	2200      	movs	r2, #0
 8005262:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <voltage_monitor_init+0x314>)
 8005268:	2210      	movs	r2, #16
 800526a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 800526e:	4b04      	ldr	r3, [pc, #16]	; (8005280 <voltage_monitor_init+0x314>)
 8005270:	2200      	movs	r2, #0
 8005272:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8005276:	4b02      	ldr	r3, [pc, #8]	; (8005280 <voltage_monitor_init+0x314>)
 8005278:	2200      	movs	r2, #0
 800527a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800527e:	e001      	b.n	8005284 <voltage_monitor_init+0x318>
 8005280:	24001ee8 	.word	0x24001ee8
	rail_monitor[RAIL_n800v].data = 0;
 8005284:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <voltage_monitor_init+0x378>)
 8005286:	2200      	movs	r2, #0
 8005288:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 800528c:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <voltage_monitor_init+0x378>)
 800528e:	f640 5208 	movw	r2, #3336	; 0xd08
 8005292:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8005296:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <voltage_monitor_init+0x378>)
 8005298:	f640 32ca 	movw	r2, #3018	; 0xbca
 800529c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80052a0:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <voltage_monitor_init+0x378>)
 80052a2:	2211      	movs	r2, #17
 80052a4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 80052a8:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <voltage_monitor_init+0x378>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 80052b0:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <voltage_monitor_init+0x378>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 80052b8:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <voltage_monitor_init+0x378>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80052c0:	4b08      	ldr	r3, [pc, #32]	; (80052e4 <voltage_monitor_init+0x378>)
 80052c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80052c6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <voltage_monitor_init+0x378>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 80052d2:	2301      	movs	r3, #1
 80052d4:	71fb      	strb	r3, [r7, #7]

	return status;
 80052d6:	79fb      	ldrb	r3, [r7, #7]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	24001ee8 	.word	0x24001ee8

080052e8 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	460a      	mov	r2, r1
 80052f2:	71fb      	strb	r3, [r7, #7]
 80052f4:	4613      	mov	r3, r2
 80052f6:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 80052fc:	79fa      	ldrb	r2, [r7, #7]
 80052fe:	4909      	ldr	r1, [pc, #36]	; (8005324 <set_rail_monitor_enable+0x3c>)
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	440b      	add	r3, r1
 800530a:	3302      	adds	r3, #2
 800530c:	79ba      	ldrb	r2, [r7, #6]
 800530e:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]

	return status;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	24001ee8 	.word	0x24001ee8

08005328 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005328:	b580      	push	{r7, lr}
 800532a:	b08a      	sub	sp, #40	; 0x28
 800532c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005334:	463b      	mov	r3, r7
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fcf6 	bl	8003d28 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 800533c:	f107 0310 	add.w	r3, r7, #16
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe fd21 	bl	8003d88 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8005346:	f107 0308 	add.w	r3, r7, #8
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fd6e 	bl	8003e2c <sample_hk_adc3>
 8005350:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8005352:	4b25      	ldr	r3, [pc, #148]	; (80053e8 <set_rail_monitor+0xc0>)
 8005354:	809a      	strh	r2, [r3, #4]
 8005356:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8005358:	4b23      	ldr	r3, [pc, #140]	; (80053e8 <set_rail_monitor+0xc0>)
 800535a:	81da      	strh	r2, [r3, #14]
 800535c:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 800535e:	4b22      	ldr	r3, [pc, #136]	; (80053e8 <set_rail_monitor+0xc0>)
 8005360:	831a      	strh	r2, [r3, #24]
 8005362:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8005364:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <set_rail_monitor+0xc0>)
 8005366:	845a      	strh	r2, [r3, #34]	; 0x22
 8005368:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 800536a:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <set_rail_monitor+0xc0>)
 800536c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800536e:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8005370:	4b1d      	ldr	r3, [pc, #116]	; (80053e8 <set_rail_monitor+0xc0>)
 8005372:	86da      	strh	r2, [r3, #54]	; 0x36
 8005374:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8005376:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <set_rail_monitor+0xc0>)
 8005378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800537c:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 800537e:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <set_rail_monitor+0xc0>)
 8005380:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005384:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8005386:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <set_rail_monitor+0xc0>)
 8005388:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800538c:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 800538e:	4b16      	ldr	r3, [pc, #88]	; (80053e8 <set_rail_monitor+0xc0>)
 8005390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005394:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <set_rail_monitor+0xc0>)
 8005398:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800539c:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 800539e:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <set_rail_monitor+0xc0>)
 80053a0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80053a4:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <set_rail_monitor+0xc0>)
 80053a8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80053ac:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 80053ae:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <set_rail_monitor+0xc0>)
 80053b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80053b4:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 80053b6:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <set_rail_monitor+0xc0>)
 80053b8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80053bc:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 80053be:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <set_rail_monitor+0xc0>)
 80053c0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80053c4:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 80053c6:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <set_rail_monitor+0xc0>)
 80053c8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80053cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <set_rail_monitor+0xc0>)
 80053d0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 80053d4:	2301      	movs	r3, #1
 80053d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 80053da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	24001ee8 	.word	0x24001ee8

080053ec <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
	return rail_monitor;
 80053f0:	4b02      	ldr	r3, [pc, #8]	; (80053fc <get_rail_monitor+0x10>)
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	24001ee8 	.word	0x24001ee8

08005400 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 800540e:	89fb      	ldrh	r3, [r7, #14]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	429a      	cmp	r2, r3
 8005414:	db05      	blt.n	8005422 <in_range+0x22>
 8005416:	89fb      	ldrh	r3, [r7, #14]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	429a      	cmp	r2, r3
 800541c:	dc01      	bgt.n	8005422 <in_range+0x22>
		return 1;
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <in_range+0x24>
	}
	return 0;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <monitor_rails>:


void monitor_rails() {
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005436:	2300      	movs	r3, #0
 8005438:	607b      	str	r3, [r7, #4]
 800543a:	e062      	b.n	8005502 <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 800543c:	4935      	ldr	r1, [pc, #212]	; (8005514 <monitor_rails+0xe4>)
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	440b      	add	r3, r1
 800544a:	3302      	adds	r3, #2
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d054      	beq.n	80054fc <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8005452:	4930      	ldr	r1, [pc, #192]	; (8005514 <monitor_rails+0xe4>)
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	440b      	add	r3, r1
 8005460:	3304      	adds	r3, #4
 8005462:	8818      	ldrh	r0, [r3, #0]
 8005464:	492b      	ldr	r1, [pc, #172]	; (8005514 <monitor_rails+0xe4>)
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	440b      	add	r3, r1
 8005472:	3308      	adds	r3, #8
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	461c      	mov	r4, r3
 8005478:	4926      	ldr	r1, [pc, #152]	; (8005514 <monitor_rails+0xe4>)
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	440b      	add	r3, r1
 8005486:	3306      	adds	r3, #6
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	4621      	mov	r1, r4
 800548e:	f7ff ffb7 	bl	8005400 <in_range>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d131      	bne.n	80054fc <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005498:	491e      	ldr	r1, [pc, #120]	; (8005514 <monitor_rails+0xe4>)
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	440b      	add	r3, r1
 80054a6:	3301      	adds	r3, #1
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	b2d8      	uxtb	r0, r3
 80054ae:	4919      	ldr	r1, [pc, #100]	; (8005514 <monitor_rails+0xe4>)
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	440b      	add	r3, r1
 80054bc:	3301      	adds	r3, #1
 80054be:	4602      	mov	r2, r0
 80054c0:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 80054c2:	4914      	ldr	r1, [pc, #80]	; (8005514 <monitor_rails+0xe4>)
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	440b      	add	r3, r1
 80054d0:	3301      	adds	r3, #1
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d111      	bne.n	80054fc <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 80054d8:	490e      	ldr	r1, [pc, #56]	; (8005514 <monitor_rails+0xe4>)
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	440b      	add	r3, r1
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 f815 	bl	8005518 <get_rail_name_error_detail>
 80054ee:	4603      	mov	r3, r0
 80054f0:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 80054f2:	2300      	movs	r3, #0
 80054f4:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 80054f6:	6838      	ldr	r0, [r7, #0]
 80054f8:	f7fc fd1a 	bl	8001f30 <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3301      	adds	r3, #1
 8005500:	607b      	str	r3, [r7, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b11      	cmp	r3, #17
 8005506:	dd99      	ble.n	800543c <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	bd90      	pop	{r4, r7, pc}
 8005512:	bf00      	nop
 8005514:	24001ee8 	.word	0x24001ee8

08005518 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	2b11      	cmp	r3, #17
 8005526:	d84b      	bhi.n	80055c0 <get_rail_name_error_detail+0xa8>
 8005528:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <get_rail_name_error_detail+0x18>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005579 	.word	0x08005579
 8005534:	0800557d 	.word	0x0800557d
 8005538:	08005581 	.word	0x08005581
 800553c:	08005585 	.word	0x08005585
 8005540:	08005589 	.word	0x08005589
 8005544:	0800558d 	.word	0x0800558d
 8005548:	08005591 	.word	0x08005591
 800554c:	08005595 	.word	0x08005595
 8005550:	08005599 	.word	0x08005599
 8005554:	0800559d 	.word	0x0800559d
 8005558:	080055a1 	.word	0x080055a1
 800555c:	080055a5 	.word	0x080055a5
 8005560:	080055a9 	.word	0x080055a9
 8005564:	080055ad 	.word	0x080055ad
 8005568:	080055b1 	.word	0x080055b1
 800556c:	080055b5 	.word	0x080055b5
 8005570:	080055b9 	.word	0x080055b9
 8005574:	080055bd 	.word	0x080055bd
	case RAIL_vsense:
		return ED_vsense;
 8005578:	2300      	movs	r3, #0
 800557a:	e022      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 800557c:	2301      	movs	r3, #1
 800557e:	e020      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8005580:	2302      	movs	r3, #2
 8005582:	e01e      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8005584:	2303      	movs	r3, #3
 8005586:	e01c      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8005588:	2304      	movs	r3, #4
 800558a:	e01a      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 800558c:	2305      	movs	r3, #5
 800558e:	e018      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8005590:	2306      	movs	r3, #6
 8005592:	e016      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8005594:	2307      	movs	r3, #7
 8005596:	e014      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8005598:	2308      	movs	r3, #8
 800559a:	e012      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 800559c:	2309      	movs	r3, #9
 800559e:	e010      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 80055a0:	230a      	movs	r3, #10
 80055a2:	e00e      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 80055a4:	230b      	movs	r3, #11
 80055a6:	e00c      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 80055a8:	230c      	movs	r3, #12
 80055aa:	e00a      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 80055ac:	230d      	movs	r3, #13
 80055ae:	e008      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 80055b0:	230e      	movs	r3, #14
 80055b2:	e006      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 80055b4:	230f      	movs	r3, #15
 80055b6:	e004      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 80055b8:	2310      	movs	r3, #16
 80055ba:	e002      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 80055bc:	2311      	movs	r3, #17
 80055be:	e000      	b.n	80055c2 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 80055c0:	2314      	movs	r3, #20
	}
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop

080055d0 <Reset_Handler>:
 80055d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005608 <LoopFillZerobss+0xe>
 80055d4:	f7ff f8b2 	bl	800473c <SystemInit>
 80055d8:	480c      	ldr	r0, [pc, #48]	; (800560c <LoopFillZerobss+0x12>)
 80055da:	490d      	ldr	r1, [pc, #52]	; (8005610 <LoopFillZerobss+0x16>)
 80055dc:	4a0d      	ldr	r2, [pc, #52]	; (8005614 <LoopFillZerobss+0x1a>)
 80055de:	2300      	movs	r3, #0
 80055e0:	e002      	b.n	80055e8 <LoopCopyDataInit>

080055e2 <CopyDataInit>:
 80055e2:	58d4      	ldr	r4, [r2, r3]
 80055e4:	50c4      	str	r4, [r0, r3]
 80055e6:	3304      	adds	r3, #4

080055e8 <LoopCopyDataInit>:
 80055e8:	18c4      	adds	r4, r0, r3
 80055ea:	428c      	cmp	r4, r1
 80055ec:	d3f9      	bcc.n	80055e2 <CopyDataInit>
 80055ee:	4a0a      	ldr	r2, [pc, #40]	; (8005618 <LoopFillZerobss+0x1e>)
 80055f0:	4c0a      	ldr	r4, [pc, #40]	; (800561c <LoopFillZerobss+0x22>)
 80055f2:	2300      	movs	r3, #0
 80055f4:	e001      	b.n	80055fa <LoopFillZerobss>

080055f6 <FillZerobss>:
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	3204      	adds	r2, #4

080055fa <LoopFillZerobss>:
 80055fa:	42a2      	cmp	r2, r4
 80055fc:	d3fb      	bcc.n	80055f6 <FillZerobss>
 80055fe:	f014 fb23 	bl	8019c48 <__libc_init_array>
 8005602:	f7fd fdc7 	bl	8003194 <main>
 8005606:	4770      	bx	lr
 8005608:	24080000 	.word	0x24080000
 800560c:	24000000 	.word	0x24000000
 8005610:	24000108 	.word	0x24000108
 8005614:	0801ab78 	.word	0x0801ab78
 8005618:	24000120 	.word	0x24000120
 800561c:	2400691c 	.word	0x2400691c

08005620 <ADC3_IRQHandler>:
 8005620:	e7fe      	b.n	8005620 <ADC3_IRQHandler>
	...

08005624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800562a:	2003      	movs	r0, #3
 800562c:	f001 fd39 	bl	80070a2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005630:	f008 fee4 	bl	800e3fc <HAL_RCC_GetSysClockFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <HAL_Init+0x68>)
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	4913      	ldr	r1, [pc, #76]	; (8005690 <HAL_Init+0x6c>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	fa22 f303 	lsr.w	r3, r2, r3
 800564c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800564e:	4b0f      	ldr	r3, [pc, #60]	; (800568c <HAL_Init+0x68>)
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	4a0e      	ldr	r2, [pc, #56]	; (8005690 <HAL_Init+0x6c>)
 8005658:	5cd3      	ldrb	r3, [r2, r3]
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
 8005664:	4a0b      	ldr	r2, [pc, #44]	; (8005694 <HAL_Init+0x70>)
 8005666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005668:	4a0b      	ldr	r2, [pc, #44]	; (8005698 <HAL_Init+0x74>)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800566e:	2005      	movs	r0, #5
 8005670:	f7fe fe4e 	bl	8004310 <HAL_InitTick>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e002      	b.n	8005684 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800567e:	f7fe fe29 	bl	80042d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	58024400 	.word	0x58024400
 8005690:	0801aac4 	.word	0x0801aac4
 8005694:	24000094 	.word	0x24000094
 8005698:	24000090 	.word	0x24000090

0800569c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <HAL_IncTick+0x20>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	461a      	mov	r2, r3
 80056a6:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <HAL_IncTick+0x24>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4413      	add	r3, r2
 80056ac:	4a04      	ldr	r2, [pc, #16]	; (80056c0 <HAL_IncTick+0x24>)
 80056ae:	6013      	str	r3, [r2, #0]
}
 80056b0:	bf00      	nop
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	2400009c 	.word	0x2400009c
 80056c0:	24001f9c 	.word	0x24001f9c

080056c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  return uwTick;
 80056c8:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <HAL_GetTick+0x14>)
 80056ca:	681b      	ldr	r3, [r3, #0]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	24001f9c 	.word	0x24001f9c

080056dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80056e0:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <HAL_GetREVID+0x14>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	0c1b      	lsrs	r3, r3, #16
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	5c001000 	.word	0x5c001000

080056f4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80056fe:	4b07      	ldr	r3, [pc, #28]	; (800571c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	43db      	mvns	r3, r3
 8005706:	401a      	ands	r2, r3
 8005708:	4904      	ldr	r1, [pc, #16]	; (800571c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	4313      	orrs	r3, r2
 800570e:	604b      	str	r3, [r1, #4]
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	58000400 	.word	0x58000400

08005720 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	609a      	str	r2, [r3, #8]
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	609a      	str	r2, [r3, #8]
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3360      	adds	r3, #96	; 0x60
 800579a:	461a      	mov	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	430b      	orrs	r3, r1
 80057b6:	431a      	orrs	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80057bc:	bf00      	nop
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	fa01 f303 	lsl.w	r3, r1, r3
 80057e8:	431a      	orrs	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	611a      	str	r2, [r3, #16]
}
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b087      	sub	sp, #28
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3360      	adds	r3, #96	; 0x60
 800580a:	461a      	mov	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	431a      	orrs	r2, r3
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	601a      	str	r2, [r3, #0]
  }
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005856:	b480      	push	{r7}
 8005858:	b087      	sub	sp, #28
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3330      	adds	r3, #48	; 0x30
 8005866:	461a      	mov	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	0a1b      	lsrs	r3, r3, #8
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	4413      	add	r3, r2
 8005874:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	211f      	movs	r1, #31
 8005882:	fa01 f303 	lsl.w	r3, r1, r3
 8005886:	43db      	mvns	r3, r3
 8005888:	401a      	ands	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0e9b      	lsrs	r3, r3, #26
 800588e:	f003 011f 	and.w	r1, r3, #31
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	fa01 f303 	lsl.w	r3, r1, r3
 800589c:	431a      	orrs	r2, r3
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80058a2:	bf00      	nop
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f023 0203 	bic.w	r2, r3, #3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60da      	str	r2, [r3, #12]
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3314      	adds	r3, #20
 80058e4:	461a      	mov	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	0e5b      	lsrs	r3, r3, #25
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	4413      	add	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	0d1b      	lsrs	r3, r3, #20
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	2107      	movs	r1, #7
 8005902:	fa01 f303 	lsl.w	r3, r1, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	401a      	ands	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	0d1b      	lsrs	r3, r3, #20
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	fa01 f303 	lsl.w	r3, r1, r3
 8005918:	431a      	orrs	r2, r3
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005944:	43db      	mvns	r3, r3
 8005946:	401a      	ands	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f003 0318 	and.w	r3, r3, #24
 800594e:	4908      	ldr	r1, [pc, #32]	; (8005970 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005950:	40d9      	lsrs	r1, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	400b      	ands	r3, r1
 8005956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800595a:	431a      	orrs	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	000fffff 	.word	0x000fffff

08005974 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 031f 	and.w	r3, r3, #31
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800599e:	4013      	ands	r3, r2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6093      	str	r3, [r2, #8]
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	5fffffc0 	.word	0x5fffffc0

080059b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059c8:	d101      	bne.n	80059ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <LL_ADC_EnableInternalRegulator+0x24>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	6fffffc0 	.word	0x6fffffc0

08005a04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a18:	d101      	bne.n	8005a1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <LL_ADC_Enable+0x24>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	f043 0201 	orr.w	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	7fffffc0 	.word	0x7fffffc0

08005a54 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <LL_ADC_Disable+0x24>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	f043 0202 	orr.w	r2, r3, #2
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	7fffffc0 	.word	0x7fffffc0

08005a7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <LL_ADC_IsEnabled+0x18>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <LL_ADC_IsEnabled+0x1a>
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d101      	bne.n	8005aba <LL_ADC_IsDisableOngoing+0x18>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <LL_ADC_IsDisableOngoing+0x1a>
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	4b05      	ldr	r3, [pc, #20]	; (8005aec <LL_ADC_REG_StartConversion+0x24>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	f043 0204 	orr.w	r2, r3, #4
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	7fffffc0 	.word	0x7fffffc0

08005af0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d101      	bne.n	8005b08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d101      	bne.n	8005b2e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b3c:	b590      	push	{r4, r7, lr}
 8005b3e:	b089      	sub	sp, #36	; 0x24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e18f      	b.n	8005e76 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d109      	bne.n	8005b78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7fa fef1 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff ff19 	bl	80059b4 <LL_ADC_IsDeepPowerDownEnabled>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff feff 	bl	8005990 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff ff34 	bl	8005a04 <LL_ADC_IsInternalRegulatorEnabled>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d114      	bne.n	8005bcc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff ff18 	bl	80059dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bac:	4b87      	ldr	r3, [pc, #540]	; (8005dcc <HAL_ADC_Init+0x290>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	099b      	lsrs	r3, r3, #6
 8005bb2:	4a87      	ldr	r2, [pc, #540]	; (8005dd0 <HAL_ADC_Init+0x294>)
 8005bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb8:	099b      	lsrs	r3, r3, #6
 8005bba:	3301      	adds	r3, #1
 8005bbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bbe:	e002      	b.n	8005bc6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f9      	bne.n	8005bc0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff ff17 	bl	8005a04 <LL_ADC_IsInternalRegulatorEnabled>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10d      	bne.n	8005bf8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be0:	f043 0210 	orr.w	r2, r3, #16
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bec:	f043 0201 	orr.w	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff ff77 	bl	8005af0 <LL_ADC_REG_IsConversionOngoing>
 8005c02:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f040 8129 	bne.w	8005e64 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 8125 	bne.w	8005e64 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005c22:	f043 0202 	orr.w	r2, r3, #2
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff ff24 	bl	8005a7c <LL_ADC_IsEnabled>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d136      	bne.n	8005ca8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a65      	ldr	r2, [pc, #404]	; (8005dd4 <HAL_ADC_Init+0x298>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d004      	beq.n	8005c4e <HAL_ADC_Init+0x112>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a63      	ldr	r2, [pc, #396]	; (8005dd8 <HAL_ADC_Init+0x29c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d10e      	bne.n	8005c6c <HAL_ADC_Init+0x130>
 8005c4e:	4861      	ldr	r0, [pc, #388]	; (8005dd4 <HAL_ADC_Init+0x298>)
 8005c50:	f7ff ff14 	bl	8005a7c <LL_ADC_IsEnabled>
 8005c54:	4604      	mov	r4, r0
 8005c56:	4860      	ldr	r0, [pc, #384]	; (8005dd8 <HAL_ADC_Init+0x29c>)
 8005c58:	f7ff ff10 	bl	8005a7c <LL_ADC_IsEnabled>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	4323      	orrs	r3, r4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bf0c      	ite	eq
 8005c64:	2301      	moveq	r3, #1
 8005c66:	2300      	movne	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e008      	b.n	8005c7e <HAL_ADC_Init+0x142>
 8005c6c:	485b      	ldr	r0, [pc, #364]	; (8005ddc <HAL_ADC_Init+0x2a0>)
 8005c6e:	f7ff ff05 	bl	8005a7c <LL_ADC_IsEnabled>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bf0c      	ite	eq
 8005c78:	2301      	moveq	r3, #1
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d012      	beq.n	8005ca8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a53      	ldr	r2, [pc, #332]	; (8005dd4 <HAL_ADC_Init+0x298>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_ADC_Init+0x15a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a51      	ldr	r2, [pc, #324]	; (8005dd8 <HAL_ADC_Init+0x29c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_ADC_Init+0x15e>
 8005c96:	4a52      	ldr	r2, [pc, #328]	; (8005de0 <HAL_ADC_Init+0x2a4>)
 8005c98:	e000      	b.n	8005c9c <HAL_ADC_Init+0x160>
 8005c9a:	4a52      	ldr	r2, [pc, #328]	; (8005de4 <HAL_ADC_Init+0x2a8>)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	f7ff fd3c 	bl	8005720 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005ca8:	f7ff fd18 	bl	80056dc <HAL_GetREVID>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d914      	bls.n	8005ce0 <HAL_ADC_Init+0x1a4>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2b10      	cmp	r3, #16
 8005cbc:	d110      	bne.n	8005ce0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	7d5b      	ldrb	r3, [r3, #21]
 8005cc2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005cc8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005cce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	7f1b      	ldrb	r3, [r3, #28]
 8005cd4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005cd6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005cd8:	f043 030c 	orr.w	r3, r3, #12
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	e00d      	b.n	8005cfc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	7d5b      	ldrb	r3, [r3, #21]
 8005ce4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005cea:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005cf0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	7f1b      	ldrb	r3, [r3, #28]
 8005cf6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	7f1b      	ldrb	r3, [r3, #28]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d106      	bne.n	8005d12 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	045b      	lsls	r3, r3, #17
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d009      	beq.n	8005d2e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	4b2c      	ldr	r3, [pc, #176]	; (8005de8 <HAL_ADC_Init+0x2ac>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	69b9      	ldr	r1, [r7, #24]
 8005d3e:	430b      	orrs	r3, r1
 8005d40:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff fed2 	bl	8005af0 <LL_ADC_REG_IsConversionOngoing>
 8005d4c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fedf 	bl	8005b16 <LL_ADC_INJ_IsConversionOngoing>
 8005d58:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d15f      	bne.n	8005e20 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d15c      	bne.n	8005e20 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	7d1b      	ldrb	r3, [r3, #20]
 8005d6a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <HAL_ADC_Init+0x2b0>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	69b9      	ldr	r1, [r7, #24]
 8005d84:	430b      	orrs	r3, r1
 8005d86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d130      	bne.n	8005df4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <HAL_ADC_Init+0x2b4>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005da6:	3a01      	subs	r2, #1
 8005da8:	0411      	lsls	r1, r2, #16
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005dae:	4311      	orrs	r1, r2
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005db4:	4311      	orrs	r1, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	611a      	str	r2, [r3, #16]
 8005dc8:	e01c      	b.n	8005e04 <HAL_ADC_Init+0x2c8>
 8005dca:	bf00      	nop
 8005dcc:	24000090 	.word	0x24000090
 8005dd0:	053e2d63 	.word	0x053e2d63
 8005dd4:	40022000 	.word	0x40022000
 8005dd8:	40022100 	.word	0x40022100
 8005ddc:	58026000 	.word	0x58026000
 8005de0:	40022300 	.word	0x40022300
 8005de4:	58026300 	.word	0x58026300
 8005de8:	fff0c003 	.word	0xfff0c003
 8005dec:	ffffbffc 	.word	0xffffbffc
 8005df0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0201 	bic.w	r2, r2, #1
 8005e02:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fdec 	bl	80069f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d10c      	bne.n	8005e42 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	f023 010f 	bic.w	r1, r3, #15
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	1e5a      	subs	r2, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	631a      	str	r2, [r3, #48]	; 0x30
 8005e40:	e007      	b.n	8005e52 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 020f 	bic.w	r2, r2, #15
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	f043 0201 	orr.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
 8005e62:	e007      	b.n	8005e74 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e68:	f043 0210 	orr.w	r2, r3, #16
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3724      	adds	r7, #36	; 0x24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd90      	pop	{r4, r7, pc}
 8005e7e:	bf00      	nop

08005e80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a55      	ldr	r2, [pc, #340]	; (8005fe8 <HAL_ADC_Start_DMA+0x168>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_ADC_Start_DMA+0x20>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a54      	ldr	r2, [pc, #336]	; (8005fec <HAL_ADC_Start_DMA+0x16c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d101      	bne.n	8005ea4 <HAL_ADC_Start_DMA+0x24>
 8005ea0:	4b53      	ldr	r3, [pc, #332]	; (8005ff0 <HAL_ADC_Start_DMA+0x170>)
 8005ea2:	e000      	b.n	8005ea6 <HAL_ADC_Start_DMA+0x26>
 8005ea4:	4b53      	ldr	r3, [pc, #332]	; (8005ff4 <HAL_ADC_Start_DMA+0x174>)
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fd64 	bl	8005974 <LL_ADC_GetMultimode>
 8005eac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fe1c 	bl	8005af0 <LL_ADC_REG_IsConversionOngoing>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f040 808c 	bne.w	8005fd8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_ADC_Start_DMA+0x4e>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e087      	b.n	8005fde <HAL_ADC_Start_DMA+0x15e>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b05      	cmp	r3, #5
 8005ee0:	d002      	beq.n	8005ee8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	d170      	bne.n	8005fca <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fc07 	bl	80066fc <ADC_Enable>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d163      	bne.n	8005fc0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005efc:	4b3e      	ldr	r3, [pc, #248]	; (8005ff8 <HAL_ADC_Start_DMA+0x178>)
 8005efe:	4013      	ands	r3, r2
 8005f00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a37      	ldr	r2, [pc, #220]	; (8005fec <HAL_ADC_Start_DMA+0x16c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d002      	beq.n	8005f18 <HAL_ADC_Start_DMA+0x98>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	e000      	b.n	8005f1a <HAL_ADC_Start_DMA+0x9a>
 8005f18:	4b33      	ldr	r3, [pc, #204]	; (8005fe8 <HAL_ADC_Start_DMA+0x168>)
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	6812      	ldr	r2, [r2, #0]
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d002      	beq.n	8005f28 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d105      	bne.n	8005f34 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d006      	beq.n	8005f4e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f44:	f023 0206 	bic.w	r2, r3, #6
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	659a      	str	r2, [r3, #88]	; 0x58
 8005f4c:	e002      	b.n	8005f54 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f58:	4a28      	ldr	r2, [pc, #160]	; (8005ffc <HAL_ADC_Start_DMA+0x17c>)
 8005f5a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f60:	4a27      	ldr	r2, [pc, #156]	; (8006000 <HAL_ADC_Start_DMA+0x180>)
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f68:	4a26      	ldr	r2, [pc, #152]	; (8006004 <HAL_ADC_Start_DMA+0x184>)
 8005f6a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	221c      	movs	r2, #28
 8005f72:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0210 	orr.w	r2, r2, #16
 8005f8a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f7ff fc89 	bl	80058ae <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3340      	adds	r3, #64	; 0x40
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f002 f886 	bl	80080bc <HAL_DMA_Start_IT>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff fd85 	bl	8005ac8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005fbe:	e00d      	b.n	8005fdc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8005fc8:	e008      	b.n	8005fdc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005fd6:	e001      	b.n	8005fdc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40022000 	.word	0x40022000
 8005fec:	40022100 	.word	0x40022100
 8005ff0:	40022300 	.word	0x40022300
 8005ff4:	58026300 	.word	0x58026300
 8005ff8:	fffff0fe 	.word	0xfffff0fe
 8005ffc:	080068cf 	.word	0x080068cf
 8006000:	080069a7 	.word	0x080069a7
 8006004:	080069c3 	.word	0x080069c3

08006008 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006044:	b590      	push	{r4, r7, lr}
 8006046:	b0a1      	sub	sp, #132	; 0x84
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	4a65      	ldr	r2, [pc, #404]	; (80061f4 <HAL_ADC_ConfigChannel+0x1b0>)
 800605e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_ADC_ConfigChannel+0x2a>
 800606a:	2302      	movs	r3, #2
 800606c:	e32e      	b.n	80066cc <HAL_ADC_ConfigChannel+0x688>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fd38 	bl	8005af0 <LL_ADC_REG_IsConversionOngoing>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f040 8313 	bne.w	80066ae <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	db2c      	blt.n	80060ea <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006098:	2b00      	cmp	r3, #0
 800609a:	d108      	bne.n	80060ae <HAL_ADC_ConfigChannel+0x6a>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	0e9b      	lsrs	r3, r3, #26
 80060a2:	f003 031f 	and.w	r3, r3, #31
 80060a6:	2201      	movs	r2, #1
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	e016      	b.n	80060dc <HAL_ADC_ConfigChannel+0x98>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b6:	fa93 f3a3 	rbit	r3, r3
 80060ba:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80060bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060be:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80060c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80060c6:	2320      	movs	r3, #32
 80060c8:	e003      	b.n	80060d2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80060ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060cc:	fab3 f383 	clz	r3, r3
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	2201      	movs	r2, #1
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	69d1      	ldr	r1, [r2, #28]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	430b      	orrs	r3, r1
 80060e8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f7ff fbad 	bl	8005856 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff fcf5 	bl	8005af0 <LL_ADC_REG_IsConversionOngoing>
 8006106:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fd02 	bl	8005b16 <LL_ADC_INJ_IsConversionOngoing>
 8006112:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006116:	2b00      	cmp	r3, #0
 8006118:	f040 80b8 	bne.w	800628c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800611c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800611e:	2b00      	cmp	r3, #0
 8006120:	f040 80b4 	bne.w	800628c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	6819      	ldr	r1, [r3, #0]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	461a      	mov	r2, r3
 8006132:	f7ff fbcf 	bl	80058d4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006136:	4b30      	ldr	r3, [pc, #192]	; (80061f8 <HAL_ADC_ConfigChannel+0x1b4>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800613e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006142:	d10b      	bne.n	800615c <HAL_ADC_ConfigChannel+0x118>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	695a      	ldr	r2, [r3, #20]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	089b      	lsrs	r3, r3, #2
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	e01d      	b.n	8006198 <HAL_ADC_ConfigChannel+0x154>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f003 0310 	and.w	r3, r3, #16
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <HAL_ADC_ConfigChannel+0x13e>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695a      	ldr	r2, [r3, #20]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	089b      	lsrs	r3, r3, #2
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	e00a      	b.n	8006198 <HAL_ADC_ConfigChannel+0x154>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	089b      	lsrs	r3, r3, #2
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d02c      	beq.n	80061fc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6919      	ldr	r1, [r3, #16]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061b0:	f7ff faea 	bl	8005788 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	6919      	ldr	r1, [r3, #16]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	7e5b      	ldrb	r3, [r3, #25]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d102      	bne.n	80061ca <HAL_ADC_ConfigChannel+0x186>
 80061c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061c8:	e000      	b.n	80061cc <HAL_ADC_ConfigChannel+0x188>
 80061ca:	2300      	movs	r3, #0
 80061cc:	461a      	mov	r2, r3
 80061ce:	f7ff fb14 	bl	80057fa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6919      	ldr	r1, [r3, #16]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	7e1b      	ldrb	r3, [r3, #24]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d102      	bne.n	80061e8 <HAL_ADC_ConfigChannel+0x1a4>
 80061e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061e6:	e000      	b.n	80061ea <HAL_ADC_ConfigChannel+0x1a6>
 80061e8:	2300      	movs	r3, #0
 80061ea:	461a      	mov	r2, r3
 80061ec:	f7ff faec 	bl	80057c8 <LL_ADC_SetDataRightShift>
 80061f0:	e04c      	b.n	800628c <HAL_ADC_ConfigChannel+0x248>
 80061f2:	bf00      	nop
 80061f4:	47ff0000 	.word	0x47ff0000
 80061f8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	069b      	lsls	r3, r3, #26
 800620c:	429a      	cmp	r2, r3
 800620e:	d107      	bne.n	8006220 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800621e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006226:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	069b      	lsls	r3, r3, #26
 8006230:	429a      	cmp	r2, r3
 8006232:	d107      	bne.n	8006244 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006242:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	069b      	lsls	r3, r3, #26
 8006254:	429a      	cmp	r2, r3
 8006256:	d107      	bne.n	8006268 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006266:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	069b      	lsls	r3, r3, #26
 8006278:	429a      	cmp	r2, r3
 800627a:	d107      	bne.n	800628c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800628a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fbf3 	bl	8005a7c <LL_ADC_IsEnabled>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	f040 8211 	bne.w	80066c0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6819      	ldr	r1, [r3, #0]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f7ff fb3e 	bl	800592c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	4aa1      	ldr	r2, [pc, #644]	; (800653c <HAL_ADC_ConfigChannel+0x4f8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	f040 812e 	bne.w	8006518 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10b      	bne.n	80062e4 <HAL_ADC_ConfigChannel+0x2a0>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	0e9b      	lsrs	r3, r3, #26
 80062d2:	3301      	adds	r3, #1
 80062d4:	f003 031f 	and.w	r3, r3, #31
 80062d8:	2b09      	cmp	r3, #9
 80062da:	bf94      	ite	ls
 80062dc:	2301      	movls	r3, #1
 80062de:	2300      	movhi	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	e019      	b.n	8006318 <HAL_ADC_ConfigChannel+0x2d4>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062ec:	fa93 f3a3 	rbit	r3, r3
 80062f0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80062f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80062f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80062fc:	2320      	movs	r3, #32
 80062fe:	e003      	b.n	8006308 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006302:	fab3 f383 	clz	r3, r3
 8006306:	b2db      	uxtb	r3, r3
 8006308:	3301      	adds	r3, #1
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2b09      	cmp	r3, #9
 8006310:	bf94      	ite	ls
 8006312:	2301      	movls	r3, #1
 8006314:	2300      	movhi	r3, #0
 8006316:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006318:	2b00      	cmp	r3, #0
 800631a:	d079      	beq.n	8006410 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006324:	2b00      	cmp	r3, #0
 8006326:	d107      	bne.n	8006338 <HAL_ADC_ConfigChannel+0x2f4>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	0e9b      	lsrs	r3, r3, #26
 800632e:	3301      	adds	r3, #1
 8006330:	069b      	lsls	r3, r3, #26
 8006332:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006336:	e015      	b.n	8006364 <HAL_ADC_ConfigChannel+0x320>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006340:	fa93 f3a3 	rbit	r3, r3
 8006344:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006348:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800634a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006350:	2320      	movs	r3, #32
 8006352:	e003      	b.n	800635c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006356:	fab3 f383 	clz	r3, r3
 800635a:	b2db      	uxtb	r3, r3
 800635c:	3301      	adds	r3, #1
 800635e:	069b      	lsls	r3, r3, #26
 8006360:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800636c:	2b00      	cmp	r3, #0
 800636e:	d109      	bne.n	8006384 <HAL_ADC_ConfigChannel+0x340>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	0e9b      	lsrs	r3, r3, #26
 8006376:	3301      	adds	r3, #1
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2101      	movs	r1, #1
 800637e:	fa01 f303 	lsl.w	r3, r1, r3
 8006382:	e017      	b.n	80063b4 <HAL_ADC_ConfigChannel+0x370>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800638c:	fa93 f3a3 	rbit	r3, r3
 8006390:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006394:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800639c:	2320      	movs	r3, #32
 800639e:	e003      	b.n	80063a8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80063a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a2:	fab3 f383 	clz	r3, r3
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	3301      	adds	r3, #1
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	2101      	movs	r1, #1
 80063b0:	fa01 f303 	lsl.w	r3, r1, r3
 80063b4:	ea42 0103 	orr.w	r1, r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <HAL_ADC_ConfigChannel+0x396>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	0e9b      	lsrs	r3, r3, #26
 80063ca:	3301      	adds	r3, #1
 80063cc:	f003 021f 	and.w	r2, r3, #31
 80063d0:	4613      	mov	r3, r2
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	4413      	add	r3, r2
 80063d6:	051b      	lsls	r3, r3, #20
 80063d8:	e018      	b.n	800640c <HAL_ADC_ConfigChannel+0x3c8>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e2:	fa93 f3a3 	rbit	r3, r3
 80063e6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80063ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80063f2:	2320      	movs	r3, #32
 80063f4:	e003      	b.n	80063fe <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	fab3 f383 	clz	r3, r3
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	3301      	adds	r3, #1
 8006400:	f003 021f 	and.w	r2, r3, #31
 8006404:	4613      	mov	r3, r2
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	4413      	add	r3, r2
 800640a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800640c:	430b      	orrs	r3, r1
 800640e:	e07e      	b.n	800650e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006418:	2b00      	cmp	r3, #0
 800641a:	d107      	bne.n	800642c <HAL_ADC_ConfigChannel+0x3e8>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	0e9b      	lsrs	r3, r3, #26
 8006422:	3301      	adds	r3, #1
 8006424:	069b      	lsls	r3, r3, #26
 8006426:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800642a:	e015      	b.n	8006458 <HAL_ADC_ConfigChannel+0x414>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	fa93 f3a3 	rbit	r3, r3
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8006444:	2320      	movs	r3, #32
 8006446:	e003      	b.n	8006450 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	fab3 f383 	clz	r3, r3
 800644e:	b2db      	uxtb	r3, r3
 8006450:	3301      	adds	r3, #1
 8006452:	069b      	lsls	r3, r3, #26
 8006454:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006460:	2b00      	cmp	r3, #0
 8006462:	d109      	bne.n	8006478 <HAL_ADC_ConfigChannel+0x434>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	0e9b      	lsrs	r3, r3, #26
 800646a:	3301      	adds	r3, #1
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	2101      	movs	r1, #1
 8006472:	fa01 f303 	lsl.w	r3, r1, r3
 8006476:	e017      	b.n	80064a8 <HAL_ADC_ConfigChannel+0x464>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	fa93 f3a3 	rbit	r3, r3
 8006484:	61bb      	str	r3, [r7, #24]
  return result;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8006490:	2320      	movs	r3, #32
 8006492:	e003      	b.n	800649c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	fab3 f383 	clz	r3, r3
 800649a:	b2db      	uxtb	r3, r3
 800649c:	3301      	adds	r3, #1
 800649e:	f003 031f 	and.w	r3, r3, #31
 80064a2:	2101      	movs	r1, #1
 80064a4:	fa01 f303 	lsl.w	r3, r1, r3
 80064a8:	ea42 0103 	orr.w	r1, r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10d      	bne.n	80064d4 <HAL_ADC_ConfigChannel+0x490>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	0e9b      	lsrs	r3, r3, #26
 80064be:	3301      	adds	r3, #1
 80064c0:	f003 021f 	and.w	r2, r3, #31
 80064c4:	4613      	mov	r3, r2
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	4413      	add	r3, r2
 80064ca:	3b1e      	subs	r3, #30
 80064cc:	051b      	lsls	r3, r3, #20
 80064ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064d2:	e01b      	b.n	800650c <HAL_ADC_ConfigChannel+0x4c8>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	fa93 f3a3 	rbit	r3, r3
 80064e0:	60fb      	str	r3, [r7, #12]
  return result;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80064ec:	2320      	movs	r3, #32
 80064ee:	e003      	b.n	80064f8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	fab3 f383 	clz	r3, r3
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	3301      	adds	r3, #1
 80064fa:	f003 021f 	and.w	r2, r3, #31
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	3b1e      	subs	r3, #30
 8006506:	051b      	lsls	r3, r3, #20
 8006508:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800650c:	430b      	orrs	r3, r1
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	6892      	ldr	r2, [r2, #8]
 8006512:	4619      	mov	r1, r3
 8006514:	f7ff f9de 	bl	80058d4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	f280 80cf 	bge.w	80066c0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a06      	ldr	r2, [pc, #24]	; (8006540 <HAL_ADC_ConfigChannel+0x4fc>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d004      	beq.n	8006536 <HAL_ADC_ConfigChannel+0x4f2>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a04      	ldr	r2, [pc, #16]	; (8006544 <HAL_ADC_ConfigChannel+0x500>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d10a      	bne.n	800654c <HAL_ADC_ConfigChannel+0x508>
 8006536:	4b04      	ldr	r3, [pc, #16]	; (8006548 <HAL_ADC_ConfigChannel+0x504>)
 8006538:	e009      	b.n	800654e <HAL_ADC_ConfigChannel+0x50a>
 800653a:	bf00      	nop
 800653c:	47ff0000 	.word	0x47ff0000
 8006540:	40022000 	.word	0x40022000
 8006544:	40022100 	.word	0x40022100
 8006548:	40022300 	.word	0x40022300
 800654c:	4b61      	ldr	r3, [pc, #388]	; (80066d4 <HAL_ADC_ConfigChannel+0x690>)
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff f90c 	bl	800576c <LL_ADC_GetCommonPathInternalCh>
 8006554:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a5f      	ldr	r2, [pc, #380]	; (80066d8 <HAL_ADC_ConfigChannel+0x694>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_ADC_ConfigChannel+0x526>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a5d      	ldr	r2, [pc, #372]	; (80066dc <HAL_ADC_ConfigChannel+0x698>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d10e      	bne.n	8006588 <HAL_ADC_ConfigChannel+0x544>
 800656a:	485b      	ldr	r0, [pc, #364]	; (80066d8 <HAL_ADC_ConfigChannel+0x694>)
 800656c:	f7ff fa86 	bl	8005a7c <LL_ADC_IsEnabled>
 8006570:	4604      	mov	r4, r0
 8006572:	485a      	ldr	r0, [pc, #360]	; (80066dc <HAL_ADC_ConfigChannel+0x698>)
 8006574:	f7ff fa82 	bl	8005a7c <LL_ADC_IsEnabled>
 8006578:	4603      	mov	r3, r0
 800657a:	4323      	orrs	r3, r4
 800657c:	2b00      	cmp	r3, #0
 800657e:	bf0c      	ite	eq
 8006580:	2301      	moveq	r3, #1
 8006582:	2300      	movne	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	e008      	b.n	800659a <HAL_ADC_ConfigChannel+0x556>
 8006588:	4855      	ldr	r0, [pc, #340]	; (80066e0 <HAL_ADC_ConfigChannel+0x69c>)
 800658a:	f7ff fa77 	bl	8005a7c <LL_ADC_IsEnabled>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	bf0c      	ite	eq
 8006594:	2301      	moveq	r3, #1
 8006596:	2300      	movne	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d07d      	beq.n	800669a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a50      	ldr	r2, [pc, #320]	; (80066e4 <HAL_ADC_ConfigChannel+0x6a0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d130      	bne.n	800660a <HAL_ADC_ConfigChannel+0x5c6>
 80065a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d12b      	bne.n	800660a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a4a      	ldr	r2, [pc, #296]	; (80066e0 <HAL_ADC_ConfigChannel+0x69c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	f040 8081 	bne.w	80066c0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a45      	ldr	r2, [pc, #276]	; (80066d8 <HAL_ADC_ConfigChannel+0x694>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_ADC_ConfigChannel+0x58e>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a43      	ldr	r2, [pc, #268]	; (80066dc <HAL_ADC_ConfigChannel+0x698>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d101      	bne.n	80065d6 <HAL_ADC_ConfigChannel+0x592>
 80065d2:	4a45      	ldr	r2, [pc, #276]	; (80066e8 <HAL_ADC_ConfigChannel+0x6a4>)
 80065d4:	e000      	b.n	80065d8 <HAL_ADC_ConfigChannel+0x594>
 80065d6:	4a3f      	ldr	r2, [pc, #252]	; (80066d4 <HAL_ADC_ConfigChannel+0x690>)
 80065d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f7ff f8b0 	bl	8005746 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065e6:	4b41      	ldr	r3, [pc, #260]	; (80066ec <HAL_ADC_ConfigChannel+0x6a8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	099b      	lsrs	r3, r3, #6
 80065ec:	4a40      	ldr	r2, [pc, #256]	; (80066f0 <HAL_ADC_ConfigChannel+0x6ac>)
 80065ee:	fba2 2303 	umull	r2, r3, r2, r3
 80065f2:	099b      	lsrs	r3, r3, #6
 80065f4:	3301      	adds	r3, #1
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80065fa:	e002      	b.n	8006602 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	3b01      	subs	r3, #1
 8006600:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1f9      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006608:	e05a      	b.n	80066c0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a39      	ldr	r2, [pc, #228]	; (80066f4 <HAL_ADC_ConfigChannel+0x6b0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d11e      	bne.n	8006652 <HAL_ADC_ConfigChannel+0x60e>
 8006614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d119      	bne.n	8006652 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a2f      	ldr	r2, [pc, #188]	; (80066e0 <HAL_ADC_ConfigChannel+0x69c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d14b      	bne.n	80066c0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a2a      	ldr	r2, [pc, #168]	; (80066d8 <HAL_ADC_ConfigChannel+0x694>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_ADC_ConfigChannel+0x5f8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a29      	ldr	r2, [pc, #164]	; (80066dc <HAL_ADC_ConfigChannel+0x698>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d101      	bne.n	8006640 <HAL_ADC_ConfigChannel+0x5fc>
 800663c:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <HAL_ADC_ConfigChannel+0x6a4>)
 800663e:	e000      	b.n	8006642 <HAL_ADC_ConfigChannel+0x5fe>
 8006640:	4a24      	ldr	r2, [pc, #144]	; (80066d4 <HAL_ADC_ConfigChannel+0x690>)
 8006642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f7ff f87b 	bl	8005746 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006650:	e036      	b.n	80066c0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a28      	ldr	r2, [pc, #160]	; (80066f8 <HAL_ADC_ConfigChannel+0x6b4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d131      	bne.n	80066c0 <HAL_ADC_ConfigChannel+0x67c>
 800665c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d12c      	bne.n	80066c0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a1d      	ldr	r2, [pc, #116]	; (80066e0 <HAL_ADC_ConfigChannel+0x69c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d127      	bne.n	80066c0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a18      	ldr	r2, [pc, #96]	; (80066d8 <HAL_ADC_ConfigChannel+0x694>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <HAL_ADC_ConfigChannel+0x640>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a17      	ldr	r2, [pc, #92]	; (80066dc <HAL_ADC_ConfigChannel+0x698>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d101      	bne.n	8006688 <HAL_ADC_ConfigChannel+0x644>
 8006684:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <HAL_ADC_ConfigChannel+0x6a4>)
 8006686:	e000      	b.n	800668a <HAL_ADC_ConfigChannel+0x646>
 8006688:	4a12      	ldr	r2, [pc, #72]	; (80066d4 <HAL_ADC_ConfigChannel+0x690>)
 800668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006690:	4619      	mov	r1, r3
 8006692:	4610      	mov	r0, r2
 8006694:	f7ff f857 	bl	8005746 <LL_ADC_SetCommonPathInternalCh>
 8006698:	e012      	b.n	80066c0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669e:	f043 0220 	orr.w	r2, r3, #32
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80066ac:	e008      	b.n	80066c0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b2:	f043 0220 	orr.w	r2, r3, #32
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80066c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3784      	adds	r7, #132	; 0x84
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd90      	pop	{r4, r7, pc}
 80066d4:	58026300 	.word	0x58026300
 80066d8:	40022000 	.word	0x40022000
 80066dc:	40022100 	.word	0x40022100
 80066e0:	58026000 	.word	0x58026000
 80066e4:	cb840000 	.word	0xcb840000
 80066e8:	40022300 	.word	0x40022300
 80066ec:	24000090 	.word	0x24000090
 80066f0:	053e2d63 	.word	0x053e2d63
 80066f4:	c7520000 	.word	0xc7520000
 80066f8:	cfb80000 	.word	0xcfb80000

080066fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff f9b7 	bl	8005a7c <LL_ADC_IsEnabled>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d16e      	bne.n	80067f2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	4b38      	ldr	r3, [pc, #224]	; (80067fc <ADC_Enable+0x100>)
 800671c:	4013      	ands	r3, r2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00d      	beq.n	800673e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006726:	f043 0210 	orr.w	r2, r3, #16
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006732:	f043 0201 	orr.w	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e05a      	b.n	80067f4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff f972 	bl	8005a2c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006748:	f7fe ffbc 	bl	80056c4 <HAL_GetTick>
 800674c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a2b      	ldr	r2, [pc, #172]	; (8006800 <ADC_Enable+0x104>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d004      	beq.n	8006762 <ADC_Enable+0x66>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a29      	ldr	r2, [pc, #164]	; (8006804 <ADC_Enable+0x108>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d101      	bne.n	8006766 <ADC_Enable+0x6a>
 8006762:	4b29      	ldr	r3, [pc, #164]	; (8006808 <ADC_Enable+0x10c>)
 8006764:	e000      	b.n	8006768 <ADC_Enable+0x6c>
 8006766:	4b29      	ldr	r3, [pc, #164]	; (800680c <ADC_Enable+0x110>)
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff f903 	bl	8005974 <LL_ADC_GetMultimode>
 800676e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a23      	ldr	r2, [pc, #140]	; (8006804 <ADC_Enable+0x108>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d002      	beq.n	8006780 <ADC_Enable+0x84>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	e000      	b.n	8006782 <ADC_Enable+0x86>
 8006780:	4b1f      	ldr	r3, [pc, #124]	; (8006800 <ADC_Enable+0x104>)
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	4293      	cmp	r3, r2
 8006788:	d02c      	beq.n	80067e4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d130      	bne.n	80067f2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006790:	e028      	b.n	80067e4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff f970 	bl	8005a7c <LL_ADC_IsEnabled>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff f940 	bl	8005a2c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80067ac:	f7fe ff8a 	bl	80056c4 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d914      	bls.n	80067e4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d00d      	beq.n	80067e4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067cc:	f043 0210 	orr.w	r2, r3, #16
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d8:	f043 0201 	orr.w	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e007      	b.n	80067f4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d1cf      	bne.n	8006792 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	8000003f 	.word	0x8000003f
 8006800:	40022000 	.word	0x40022000
 8006804:	40022100 	.word	0x40022100
 8006808:	40022300 	.word	0x40022300
 800680c:	58026300 	.word	0x58026300

08006810 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff f940 	bl	8005aa2 <LL_ADC_IsDisableOngoing>
 8006822:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff f927 	bl	8005a7c <LL_ADC_IsEnabled>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d047      	beq.n	80068c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d144      	bne.n	80068c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 030d 	and.w	r3, r3, #13
 8006844:	2b01      	cmp	r3, #1
 8006846:	d10c      	bne.n	8006862 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff f901 	bl	8005a54 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2203      	movs	r2, #3
 8006858:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800685a:	f7fe ff33 	bl	80056c4 <HAL_GetTick>
 800685e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006860:	e029      	b.n	80068b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	f043 0210 	orr.w	r2, r3, #16
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006872:	f043 0201 	orr.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e023      	b.n	80068c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800687e:	f7fe ff21 	bl	80056c4 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d914      	bls.n	80068b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00d      	beq.n	80068b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689e:	f043 0210 	orr.w	r2, r3, #16
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068aa:	f043 0201 	orr.w	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e007      	b.n	80068c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1dc      	bne.n	800687e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d14b      	bne.n	8006980 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d021      	beq.n	8006946 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe ff92 	bl	8005830 <LL_ADC_REG_IsTriggerSourceSWStart>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d032      	beq.n	8006978 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d12b      	bne.n	8006978 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d11f      	bne.n	8006978 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693c:	f043 0201 	orr.w	r2, r3, #1
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	655a      	str	r2, [r3, #84]	; 0x54
 8006944:	e018      	b.n	8006978 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0303 	and.w	r3, r3, #3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d111      	bne.n	8006978 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006958:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d105      	bne.n	8006978 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006970:	f043 0201 	orr.w	r2, r3, #1
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7ff fb45 	bl	8006008 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800697e:	e00e      	b.n	800699e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006984:	f003 0310 	and.w	r3, r3, #16
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff fb4f 	bl	8006030 <HAL_ADC_ErrorCallback>
}
 8006992:	e004      	b.n	800699e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
}
 800699e:	bf00      	nop
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7ff fb31 	bl	800601c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e0:	f043 0204 	orr.w	r2, r3, #4
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f7ff fb21 	bl	8006030 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069ee:	bf00      	nop
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a7a      	ldr	r2, [pc, #488]	; (8006bf0 <ADC_ConfigureBoostMode+0x1f8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <ADC_ConfigureBoostMode+0x1c>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a79      	ldr	r2, [pc, #484]	; (8006bf4 <ADC_ConfigureBoostMode+0x1fc>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d109      	bne.n	8006a28 <ADC_ConfigureBoostMode+0x30>
 8006a14:	4b78      	ldr	r3, [pc, #480]	; (8006bf8 <ADC_ConfigureBoostMode+0x200>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	bf14      	ite	ne
 8006a20:	2301      	movne	r3, #1
 8006a22:	2300      	moveq	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	e008      	b.n	8006a3a <ADC_ConfigureBoostMode+0x42>
 8006a28:	4b74      	ldr	r3, [pc, #464]	; (8006bfc <ADC_ConfigureBoostMode+0x204>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bf14      	ite	ne
 8006a34:	2301      	movne	r3, #1
 8006a36:	2300      	moveq	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01c      	beq.n	8006a78 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006a3e:	f007 fe57 	bl	800e6f0 <HAL_RCC_GetHCLKFreq>
 8006a42:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a4c:	d010      	beq.n	8006a70 <ADC_ConfigureBoostMode+0x78>
 8006a4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a52:	d873      	bhi.n	8006b3c <ADC_ConfigureBoostMode+0x144>
 8006a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a58:	d002      	beq.n	8006a60 <ADC_ConfigureBoostMode+0x68>
 8006a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a5e:	d16d      	bne.n	8006b3c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	0c1b      	lsrs	r3, r3, #16
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6c:	60fb      	str	r3, [r7, #12]
        break;
 8006a6e:	e068      	b.n	8006b42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	089b      	lsrs	r3, r3, #2
 8006a74:	60fb      	str	r3, [r7, #12]
        break;
 8006a76:	e064      	b.n	8006b42 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006a78:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006a7c:	f04f 0100 	mov.w	r1, #0
 8006a80:	f009 f8de 	bl	800fc40 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a84:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006a8e:	d051      	beq.n	8006b34 <ADC_ConfigureBoostMode+0x13c>
 8006a90:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006a94:	d854      	bhi.n	8006b40 <ADC_ConfigureBoostMode+0x148>
 8006a96:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006a9a:	d047      	beq.n	8006b2c <ADC_ConfigureBoostMode+0x134>
 8006a9c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006aa0:	d84e      	bhi.n	8006b40 <ADC_ConfigureBoostMode+0x148>
 8006aa2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006aa6:	d03d      	beq.n	8006b24 <ADC_ConfigureBoostMode+0x12c>
 8006aa8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006aac:	d848      	bhi.n	8006b40 <ADC_ConfigureBoostMode+0x148>
 8006aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ab2:	d033      	beq.n	8006b1c <ADC_ConfigureBoostMode+0x124>
 8006ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ab8:	d842      	bhi.n	8006b40 <ADC_ConfigureBoostMode+0x148>
 8006aba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006abe:	d029      	beq.n	8006b14 <ADC_ConfigureBoostMode+0x11c>
 8006ac0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006ac4:	d83c      	bhi.n	8006b40 <ADC_ConfigureBoostMode+0x148>
 8006ac6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006aca:	d01a      	beq.n	8006b02 <ADC_ConfigureBoostMode+0x10a>
 8006acc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006ad0:	d836      	bhi.n	8006b40 <ADC_ConfigureBoostMode+0x148>
 8006ad2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006ad6:	d014      	beq.n	8006b02 <ADC_ConfigureBoostMode+0x10a>
 8006ad8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006adc:	d830      	bhi.n	8006b40 <ADC_ConfigureBoostMode+0x148>
 8006ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ae2:	d00e      	beq.n	8006b02 <ADC_ConfigureBoostMode+0x10a>
 8006ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ae8:	d82a      	bhi.n	8006b40 <ADC_ConfigureBoostMode+0x148>
 8006aea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006aee:	d008      	beq.n	8006b02 <ADC_ConfigureBoostMode+0x10a>
 8006af0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006af4:	d824      	bhi.n	8006b40 <ADC_ConfigureBoostMode+0x148>
 8006af6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006afa:	d002      	beq.n	8006b02 <ADC_ConfigureBoostMode+0x10a>
 8006afc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b00:	d11e      	bne.n	8006b40 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	0c9b      	lsrs	r3, r3, #18
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b10:	60fb      	str	r3, [r7, #12]
        break;
 8006b12:	e016      	b.n	8006b42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	091b      	lsrs	r3, r3, #4
 8006b18:	60fb      	str	r3, [r7, #12]
        break;
 8006b1a:	e012      	b.n	8006b42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	60fb      	str	r3, [r7, #12]
        break;
 8006b22:	e00e      	b.n	8006b42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	099b      	lsrs	r3, r3, #6
 8006b28:	60fb      	str	r3, [r7, #12]
        break;
 8006b2a:	e00a      	b.n	8006b42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	09db      	lsrs	r3, r3, #7
 8006b30:	60fb      	str	r3, [r7, #12]
        break;
 8006b32:	e006      	b.n	8006b42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	60fb      	str	r3, [r7, #12]
        break;
 8006b3a:	e002      	b.n	8006b42 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006b3c:	bf00      	nop
 8006b3e:	e000      	b.n	8006b42 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006b40:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006b42:	f7fe fdcb 	bl	80056dc <HAL_GetREVID>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d815      	bhi.n	8006b7c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4a2b      	ldr	r2, [pc, #172]	; (8006c00 <ADC_ConfigureBoostMode+0x208>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d908      	bls.n	8006b6a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b66:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006b68:	e03e      	b.n	8006be8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b78:	609a      	str	r2, [r3, #8]
}
 8006b7a:	e035      	b.n	8006be8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	085b      	lsrs	r3, r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4a1f      	ldr	r2, [pc, #124]	; (8006c04 <ADC_ConfigureBoostMode+0x20c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d808      	bhi.n	8006b9c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b98:	609a      	str	r2, [r3, #8]
}
 8006b9a:	e025      	b.n	8006be8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4a1a      	ldr	r2, [pc, #104]	; (8006c08 <ADC_ConfigureBoostMode+0x210>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d80a      	bhi.n	8006bba <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bb6:	609a      	str	r2, [r3, #8]
}
 8006bb8:	e016      	b.n	8006be8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a13      	ldr	r2, [pc, #76]	; (8006c0c <ADC_ConfigureBoostMode+0x214>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d80a      	bhi.n	8006bd8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd4:	609a      	str	r2, [r3, #8]
}
 8006bd6:	e007      	b.n	8006be8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006be6:	609a      	str	r2, [r3, #8]
}
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	40022000 	.word	0x40022000
 8006bf4:	40022100 	.word	0x40022100
 8006bf8:	40022300 	.word	0x40022300
 8006bfc:	58026300 	.word	0x58026300
 8006c00:	01312d00 	.word	0x01312d00
 8006c04:	005f5e10 	.word	0x005f5e10
 8006c08:	00bebc20 	.word	0x00bebc20
 8006c0c:	017d7840 	.word	0x017d7840

08006c10 <LL_ADC_IsEnabled>:
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <LL_ADC_IsEnabled+0x18>
 8006c24:	2301      	movs	r3, #1
 8006c26:	e000      	b.n	8006c2a <LL_ADC_IsEnabled+0x1a>
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
	...

08006c38 <LL_ADC_StartCalibration>:
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <LL_ADC_StartCalibration+0x38>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	609a      	str	r2, [r3, #8]
}
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	3ffeffc0 	.word	0x3ffeffc0

08006c74 <LL_ADC_IsCalibrationOnGoing>:
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c88:	d101      	bne.n	8006c8e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <LL_ADC_REG_IsConversionOngoing>:
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d101      	bne.n	8006cb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
	...

08006cc4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_ADCEx_Calibration_Start+0x1e>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e04c      	b.n	8006d7c <HAL_ADCEx_Calibration_Start+0xb8>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7ff fd90 	bl	8006810 <ADC_Disable>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d135      	bne.n	8006d66 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cfe:	4b21      	ldr	r3, [pc, #132]	; (8006d84 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	f043 0202 	orr.w	r2, r3, #2
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff ff90 	bl	8006c38 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006d18:	e014      	b.n	8006d44 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	4a19      	ldr	r2, [pc, #100]	; (8006d88 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d30d      	bcc.n	8006d44 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2c:	f023 0312 	bic.w	r3, r3, #18
 8006d30:	f043 0210 	orr.w	r2, r3, #16
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e01b      	b.n	8006d7c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff ff93 	bl	8006c74 <LL_ADC_IsCalibrationOnGoing>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e2      	bne.n	8006d1a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d58:	f023 0303 	bic.w	r3, r3, #3
 8006d5c:	f043 0201 	orr.w	r2, r3, #1
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	655a      	str	r2, [r3, #84]	; 0x54
 8006d64:	e005      	b.n	8006d72 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6a:	f043 0210 	orr.w	r2, r3, #16
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	ffffeefd 	.word	0xffffeefd
 8006d88:	25c3f800 	.word	0x25c3f800

08006d8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006d8c:	b590      	push	{r4, r7, lr}
 8006d8e:	b09f      	sub	sp, #124	; 0x7c
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e0be      	b.n	8006f28 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006db2:	2300      	movs	r3, #0
 8006db4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a5c      	ldr	r2, [pc, #368]	; (8006f30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d102      	bne.n	8006dca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006dc4:	4b5b      	ldr	r3, [pc, #364]	; (8006f34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006dc6:	60bb      	str	r3, [r7, #8]
 8006dc8:	e001      	b.n	8006dce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10b      	bne.n	8006dec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd8:	f043 0220 	orr.w	r2, r3, #32
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e09d      	b.n	8006f28 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff ff54 	bl	8006c9c <LL_ADC_REG_IsConversionOngoing>
 8006df4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff ff4e 	bl	8006c9c <LL_ADC_REG_IsConversionOngoing>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d17f      	bne.n	8006f06 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d17c      	bne.n	8006f06 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a47      	ldr	r2, [pc, #284]	; (8006f30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a46      	ldr	r2, [pc, #280]	; (8006f34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d101      	bne.n	8006e24 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006e20:	4b45      	ldr	r3, [pc, #276]	; (8006f38 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e22:	e000      	b.n	8006e26 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006e24:	4b45      	ldr	r3, [pc, #276]	; (8006f3c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e26:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d039      	beq.n	8006ea4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e40:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a3a      	ldr	r2, [pc, #232]	; (8006f30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a38      	ldr	r2, [pc, #224]	; (8006f34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d10e      	bne.n	8006e74 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006e56:	4836      	ldr	r0, [pc, #216]	; (8006f30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e58:	f7ff feda 	bl	8006c10 <LL_ADC_IsEnabled>
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	4835      	ldr	r0, [pc, #212]	; (8006f34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e60:	f7ff fed6 	bl	8006c10 <LL_ADC_IsEnabled>
 8006e64:	4603      	mov	r3, r0
 8006e66:	4323      	orrs	r3, r4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bf0c      	ite	eq
 8006e6c:	2301      	moveq	r3, #1
 8006e6e:	2300      	movne	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	e008      	b.n	8006e86 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006e74:	4832      	ldr	r0, [pc, #200]	; (8006f40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006e76:	f7ff fecb 	bl	8006c10 <LL_ADC_IsEnabled>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf0c      	ite	eq
 8006e80:	2301      	moveq	r3, #1
 8006e82:	2300      	movne	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d047      	beq.n	8006f1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	4b2d      	ldr	r3, [pc, #180]	; (8006f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006e90:	4013      	ands	r3, r2
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	6811      	ldr	r1, [r2, #0]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	6892      	ldr	r2, [r2, #8]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ea2:	e03a      	b.n	8006f1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a1e      	ldr	r2, [pc, #120]	; (8006f30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d004      	beq.n	8006ec4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d10e      	bne.n	8006ee2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006ec4:	481a      	ldr	r0, [pc, #104]	; (8006f30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ec6:	f7ff fea3 	bl	8006c10 <LL_ADC_IsEnabled>
 8006eca:	4604      	mov	r4, r0
 8006ecc:	4819      	ldr	r0, [pc, #100]	; (8006f34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006ece:	f7ff fe9f 	bl	8006c10 <LL_ADC_IsEnabled>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4323      	orrs	r3, r4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bf0c      	ite	eq
 8006eda:	2301      	moveq	r3, #1
 8006edc:	2300      	movne	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	e008      	b.n	8006ef4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006ee2:	4817      	ldr	r0, [pc, #92]	; (8006f40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006ee4:	f7ff fe94 	bl	8006c10 <LL_ADC_IsEnabled>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bf0c      	ite	eq
 8006eee:	2301      	moveq	r3, #1
 8006ef0:	2300      	movne	r3, #0
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d010      	beq.n	8006f1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	4b11      	ldr	r3, [pc, #68]	; (8006f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f02:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f04:	e009      	b.n	8006f1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0a:	f043 0220 	orr.w	r2, r3, #32
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006f18:	e000      	b.n	8006f1c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f1a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006f24:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	377c      	adds	r7, #124	; 0x7c
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd90      	pop	{r4, r7, pc}
 8006f30:	40022000 	.word	0x40022000
 8006f34:	40022100 	.word	0x40022100
 8006f38:	40022300 	.word	0x40022300
 8006f3c:	58026300 	.word	0x58026300
 8006f40:	58026000 	.word	0x58026000
 8006f44:	fffff0e0 	.word	0xfffff0e0

08006f48 <__NVIC_SetPriorityGrouping>:
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f003 0307 	and.w	r3, r3, #7
 8006f56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f58:	4b0b      	ldr	r3, [pc, #44]	; (8006f88 <__NVIC_SetPriorityGrouping+0x40>)
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f64:	4013      	ands	r3, r2
 8006f66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <__NVIC_SetPriorityGrouping+0x44>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f76:	4a04      	ldr	r2, [pc, #16]	; (8006f88 <__NVIC_SetPriorityGrouping+0x40>)
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	60d3      	str	r3, [r2, #12]
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	e000ed00 	.word	0xe000ed00
 8006f8c:	05fa0000 	.word	0x05fa0000

08006f90 <__NVIC_GetPriorityGrouping>:
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f94:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	0a1b      	lsrs	r3, r3, #8
 8006f9a:	f003 0307 	and.w	r3, r3, #7
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	e000ed00 	.word	0xe000ed00

08006fac <__NVIC_EnableIRQ>:
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	db0b      	blt.n	8006fd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fbe:	88fb      	ldrh	r3, [r7, #6]
 8006fc0:	f003 021f 	and.w	r2, r3, #31
 8006fc4:	4907      	ldr	r1, [pc, #28]	; (8006fe4 <__NVIC_EnableIRQ+0x38>)
 8006fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fca:	095b      	lsrs	r3, r3, #5
 8006fcc:	2001      	movs	r0, #1
 8006fce:	fa00 f202 	lsl.w	r2, r0, r2
 8006fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	e000e100 	.word	0xe000e100

08006fe8 <__NVIC_SetPriority>:
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	db0a      	blt.n	8007012 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	490c      	ldr	r1, [pc, #48]	; (8007034 <__NVIC_SetPriority+0x4c>)
 8007002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007006:	0112      	lsls	r2, r2, #4
 8007008:	b2d2      	uxtb	r2, r2
 800700a:	440b      	add	r3, r1
 800700c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007010:	e00a      	b.n	8007028 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	4908      	ldr	r1, [pc, #32]	; (8007038 <__NVIC_SetPriority+0x50>)
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	3b04      	subs	r3, #4
 8007020:	0112      	lsls	r2, r2, #4
 8007022:	b2d2      	uxtb	r2, r2
 8007024:	440b      	add	r3, r1
 8007026:	761a      	strb	r2, [r3, #24]
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	e000e100 	.word	0xe000e100
 8007038:	e000ed00 	.word	0xe000ed00

0800703c <NVIC_EncodePriority>:
{
 800703c:	b480      	push	{r7}
 800703e:	b089      	sub	sp, #36	; 0x24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f1c3 0307 	rsb	r3, r3, #7
 8007056:	2b04      	cmp	r3, #4
 8007058:	bf28      	it	cs
 800705a:	2304      	movcs	r3, #4
 800705c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	3304      	adds	r3, #4
 8007062:	2b06      	cmp	r3, #6
 8007064:	d902      	bls.n	800706c <NVIC_EncodePriority+0x30>
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	3b03      	subs	r3, #3
 800706a:	e000      	b.n	800706e <NVIC_EncodePriority+0x32>
 800706c:	2300      	movs	r3, #0
 800706e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	fa02 f303 	lsl.w	r3, r2, r3
 800707a:	43da      	mvns	r2, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	401a      	ands	r2, r3
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007084:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	fa01 f303 	lsl.w	r3, r1, r3
 800708e:	43d9      	mvns	r1, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007094:	4313      	orrs	r3, r2
}
 8007096:	4618      	mov	r0, r3
 8007098:	3724      	adds	r7, #36	; 0x24
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff ff4c 	bl	8006f48 <__NVIC_SetPriorityGrouping>
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80070c6:	f7ff ff63 	bl	8006f90 <__NVIC_GetPriorityGrouping>
 80070ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	68b9      	ldr	r1, [r7, #8]
 80070d0:	6978      	ldr	r0, [r7, #20]
 80070d2:	f7ff ffb3 	bl	800703c <NVIC_EncodePriority>
 80070d6:	4602      	mov	r2, r0
 80070d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80070dc:	4611      	mov	r1, r2
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff ff82 	bl	8006fe8 <__NVIC_SetPriority>
}
 80070e4:	bf00      	nop
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80070f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff ff56 	bl	8006fac <__NVIC_EnableIRQ>
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800710c:	f3bf 8f5f 	dmb	sy
}
 8007110:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007112:	4b07      	ldr	r3, [pc, #28]	; (8007130 <HAL_MPU_Disable+0x28>)
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	4a06      	ldr	r2, [pc, #24]	; (8007130 <HAL_MPU_Disable+0x28>)
 8007118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800711e:	4b05      	ldr	r3, [pc, #20]	; (8007134 <HAL_MPU_Disable+0x2c>)
 8007120:	2200      	movs	r2, #0
 8007122:	605a      	str	r2, [r3, #4]
}
 8007124:	bf00      	nop
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	e000ed00 	.word	0xe000ed00
 8007134:	e000ed90 	.word	0xe000ed90

08007138 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007140:	4a0b      	ldr	r2, [pc, #44]	; (8007170 <HAL_MPU_Enable+0x38>)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f043 0301 	orr.w	r3, r3, #1
 8007148:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800714a:	4b0a      	ldr	r3, [pc, #40]	; (8007174 <HAL_MPU_Enable+0x3c>)
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	4a09      	ldr	r2, [pc, #36]	; (8007174 <HAL_MPU_Enable+0x3c>)
 8007150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007154:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007156:	f3bf 8f4f 	dsb	sy
}
 800715a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800715c:	f3bf 8f6f 	isb	sy
}
 8007160:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	e000ed90 	.word	0xe000ed90
 8007174:	e000ed00 	.word	0xe000ed00

08007178 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	785a      	ldrb	r2, [r3, #1]
 8007184:	4b1b      	ldr	r3, [pc, #108]	; (80071f4 <HAL_MPU_ConfigRegion+0x7c>)
 8007186:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007188:	4b1a      	ldr	r3, [pc, #104]	; (80071f4 <HAL_MPU_ConfigRegion+0x7c>)
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	4a19      	ldr	r2, [pc, #100]	; (80071f4 <HAL_MPU_ConfigRegion+0x7c>)
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8007194:	4a17      	ldr	r2, [pc, #92]	; (80071f4 <HAL_MPU_ConfigRegion+0x7c>)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	7b1b      	ldrb	r3, [r3, #12]
 80071a0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7adb      	ldrb	r3, [r3, #11]
 80071a6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80071a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	7a9b      	ldrb	r3, [r3, #10]
 80071ae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80071b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	7b5b      	ldrb	r3, [r3, #13]
 80071b6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80071b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	7b9b      	ldrb	r3, [r3, #14]
 80071be:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80071c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	7bdb      	ldrb	r3, [r3, #15]
 80071c6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80071c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	7a5b      	ldrb	r3, [r3, #9]
 80071ce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80071d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7a1b      	ldrb	r3, [r3, #8]
 80071d6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80071d8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	7812      	ldrb	r2, [r2, #0]
 80071de:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80071e0:	4a04      	ldr	r2, [pc, #16]	; (80071f4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80071e2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80071e4:	6113      	str	r3, [r2, #16]
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	e000ed90 	.word	0xe000ed90

080071f8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e014      	b.n	8007234 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	791b      	ldrb	r3, [r3, #4]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d105      	bne.n	8007220 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7f9 fce2 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e046      	b.n	80072de <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	795b      	ldrb	r3, [r3, #5]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_DAC_Start+0x20>
 8007258:	2302      	movs	r3, #2
 800725a:	e040      	b.n	80072de <HAL_DAC_Start+0xa2>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6819      	ldr	r1, [r3, #0]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	f003 0310 	and.w	r3, r3, #16
 8007274:	2201      	movs	r2, #1
 8007276:	409a      	lsls	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10f      	bne.n	80072a6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007290:	2b02      	cmp	r3, #2
 8007292:	d11d      	bne.n	80072d0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	605a      	str	r2, [r3, #4]
 80072a4:	e014      	b.n	80072d0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	f003 0310 	and.w	r3, r3, #16
 80072b6:	2102      	movs	r1, #2
 80072b8:	fa01 f303 	lsl.w	r3, r1, r3
 80072bc:	429a      	cmp	r2, r3
 80072be:	d107      	bne.n	80072d0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0202 	orr.w	r2, r2, #2
 80072ce:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
	...

080072ec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e0a2      	b.n	800744a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	795b      	ldrb	r3, [r3, #5]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_DAC_Start_DMA+0x24>
 800730c:	2302      	movs	r3, #2
 800730e:	e09c      	b.n	800744a <HAL_DAC_Start_DMA+0x15e>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2201      	movs	r2, #1
 8007314:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2202      	movs	r2, #2
 800731a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d129      	bne.n	8007376 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	4a4b      	ldr	r2, [pc, #300]	; (8007454 <HAL_DAC_Start_DMA+0x168>)
 8007328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	4a4a      	ldr	r2, [pc, #296]	; (8007458 <HAL_DAC_Start_DMA+0x16c>)
 8007330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	4a49      	ldr	r2, [pc, #292]	; (800745c <HAL_DAC_Start_DMA+0x170>)
 8007338:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007348:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <HAL_DAC_Start_DMA+0x6c>
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	2b04      	cmp	r3, #4
 8007354:	d005      	beq.n	8007362 <HAL_DAC_Start_DMA+0x76>
 8007356:	e009      	b.n	800736c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3308      	adds	r3, #8
 800735e:	613b      	str	r3, [r7, #16]
        break;
 8007360:	e033      	b.n	80073ca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	330c      	adds	r3, #12
 8007368:	613b      	str	r3, [r7, #16]
        break;
 800736a:	e02e      	b.n	80073ca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3310      	adds	r3, #16
 8007372:	613b      	str	r3, [r7, #16]
        break;
 8007374:	e029      	b.n	80073ca <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	4a39      	ldr	r2, [pc, #228]	; (8007460 <HAL_DAC_Start_DMA+0x174>)
 800737c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	4a38      	ldr	r2, [pc, #224]	; (8007464 <HAL_DAC_Start_DMA+0x178>)
 8007384:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	4a37      	ldr	r2, [pc, #220]	; (8007468 <HAL_DAC_Start_DMA+0x17c>)
 800738c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800739c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <HAL_DAC_Start_DMA+0xc0>
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d005      	beq.n	80073b6 <HAL_DAC_Start_DMA+0xca>
 80073aa:	e009      	b.n	80073c0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3314      	adds	r3, #20
 80073b2:	613b      	str	r3, [r7, #16]
        break;
 80073b4:	e009      	b.n	80073ca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3318      	adds	r3, #24
 80073bc:	613b      	str	r3, [r7, #16]
        break;
 80073be:	e004      	b.n	80073ca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	331c      	adds	r3, #28
 80073c6:	613b      	str	r3, [r7, #16]
        break;
 80073c8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d111      	bne.n	80073f4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6898      	ldr	r0, [r3, #8]
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	f000 fe67 	bl	80080bc <HAL_DMA_Start_IT>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]
 80073f2:	e010      	b.n	8007416 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007402:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	68d8      	ldr	r0, [r3, #12]
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	f000 fe55 	bl	80080bc <HAL_DMA_Start_IT>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800741c:	7dfb      	ldrb	r3, [r7, #23]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10c      	bne.n	800743c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6819      	ldr	r1, [r3, #0]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	2201      	movs	r2, #1
 8007430:	409a      	lsls	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	e005      	b.n	8007448 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f043 0204 	orr.w	r2, r3, #4
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	080078dd 	.word	0x080078dd
 8007458:	080078ff 	.word	0x080078ff
 800745c:	0800791b 	.word	0x0800791b
 8007460:	08007999 	.word	0x08007999
 8007464:	080079bb 	.word	0x080079bb
 8007468:	080079d7 	.word	0x080079d7

0800746c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e03e      	b.n	80074fe <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6819      	ldr	r1, [r3, #0]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	f003 0310 	and.w	r3, r3, #16
 800748c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	43da      	mvns	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	400a      	ands	r2, r1
 800749c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	f003 0310 	and.w	r3, r3, #16
 80074aa:	2201      	movs	r2, #1
 80074ac:	fa02 f303 	lsl.w	r3, r2, r3
 80074b0:	43da      	mvns	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	400a      	ands	r2, r1
 80074b8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10d      	bne.n	80074dc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 f863 	bl	8008590 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	e00c      	b.n	80074f6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 f855 	bl	8008590 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80074f4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01d      	beq.n	8007564 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d018      	beq.n	8007564 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2204      	movs	r2, #4
 8007536:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	f043 0201 	orr.w	r2, r3, #1
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800754c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800755c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f86f 	bl	8007642 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d01d      	beq.n	80075aa <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d018      	beq.n	80075aa <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2204      	movs	r2, #4
 800757c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f043 0202 	orr.w	r2, r3, #2
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007592:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80075a2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f9ed 	bl	8007984 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80075aa:	bf00      	nop
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b087      	sub	sp, #28
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	607a      	str	r2, [r7, #4]
 80075be:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e015      	b.n	80075fa <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d105      	bne.n	80075e6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	3308      	adds	r3, #8
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	e004      	b.n	80075f0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4413      	add	r3, r2
 80075ec:	3314      	adds	r3, #20
 80075ee:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	461a      	mov	r2, r3
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	; 0x28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <HAL_DAC_ConfigChannel+0x1e>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e12a      	b.n	80078d0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	795b      	ldrb	r3, [r3, #5]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <HAL_DAC_ConfigChannel+0x2e>
 8007682:	2302      	movs	r3, #2
 8007684:	e124      	b.n	80078d0 <HAL_DAC_ConfigChannel+0x278>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2202      	movs	r2, #2
 8007690:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b04      	cmp	r3, #4
 8007698:	d17a      	bne.n	8007790 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800769a:	f7fe f813 	bl	80056c4 <HAL_GetTick>
 800769e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d13d      	bne.n	8007722 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80076a6:	e018      	b.n	80076da <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80076a8:	f7fe f80c 	bl	80056c4 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d911      	bls.n	80076da <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076bc:	4b86      	ldr	r3, [pc, #536]	; (80078d8 <HAL_DAC_ConfigChannel+0x280>)
 80076be:	4013      	ands	r3, r2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f043 0208 	orr.w	r2, r3, #8
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2203      	movs	r2, #3
 80076d4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e0fa      	b.n	80078d0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076e0:	4b7d      	ldr	r3, [pc, #500]	; (80078d8 <HAL_DAC_ConfigChannel+0x280>)
 80076e2:	4013      	ands	r3, r2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1df      	bne.n	80076a8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	6992      	ldr	r2, [r2, #24]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
 80076f2:	e020      	b.n	8007736 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80076f4:	f7fd ffe6 	bl	80056c4 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d90f      	bls.n	8007722 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007708:	2b00      	cmp	r3, #0
 800770a:	da0a      	bge.n	8007722 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f043 0208 	orr.w	r2, r3, #8
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2203      	movs	r2, #3
 800771c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e0d6      	b.n	80078d0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007728:	2b00      	cmp	r3, #0
 800772a:	dbe3      	blt.n	80076f4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	6992      	ldr	r2, [r2, #24]
 8007734:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f003 0310 	and.w	r3, r3, #16
 8007742:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007746:	fa01 f303 	lsl.w	r3, r1, r3
 800774a:	43db      	mvns	r3, r3
 800774c:	ea02 0103 	and.w	r1, r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	69da      	ldr	r2, [r3, #28]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f003 0310 	and.w	r3, r3, #16
 800775a:	409a      	lsls	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f003 0310 	and.w	r3, r3, #16
 8007770:	21ff      	movs	r1, #255	; 0xff
 8007772:	fa01 f303 	lsl.w	r3, r1, r3
 8007776:	43db      	mvns	r3, r3
 8007778:	ea02 0103 	and.w	r1, r2, r3
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	6a1a      	ldr	r2, [r3, #32]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	409a      	lsls	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d11d      	bne.n	80077d4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	221f      	movs	r2, #31
 80077a8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ac:	43db      	mvns	r3, r3
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	4013      	ands	r3, r2
 80077b2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	fa02 f303 	lsl.w	r3, r2, r3
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077da:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2207      	movs	r2, #7
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	43db      	mvns	r3, r3
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	4013      	ands	r3, r2
 80077ee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d102      	bne.n	80077fe <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
 80077fc:	e00f      	b.n	800781e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	2b02      	cmp	r3, #2
 8007804:	d102      	bne.n	800780c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007806:	2301      	movs	r3, #1
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
 800780a:	e008      	b.n	800781e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d102      	bne.n	800781a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007814:	2301      	movs	r3, #1
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
 8007818:	e001      	b.n	800781e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800781a:	2300      	movs	r3, #0
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	4313      	orrs	r3, r2
 8007828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	fa02 f303 	lsl.w	r3, r2, r3
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	4313      	orrs	r3, r2
 800783e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6819      	ldr	r1, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f003 0310 	and.w	r3, r3, #16
 8007854:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007858:	fa02 f303 	lsl.w	r3, r2, r3
 800785c:	43da      	mvns	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	400a      	ands	r2, r1
 8007864:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f003 0310 	and.w	r3, r3, #16
 8007874:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007878:	fa02 f303 	lsl.w	r3, r2, r3
 800787c:	43db      	mvns	r3, r3
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	4013      	ands	r3, r2
 8007882:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	fa02 f303 	lsl.w	r3, r2, r3
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	4313      	orrs	r3, r2
 800789a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6819      	ldr	r1, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f003 0310 	and.w	r3, r3, #16
 80078b0:	22c0      	movs	r2, #192	; 0xc0
 80078b2:	fa02 f303 	lsl.w	r3, r2, r3
 80078b6:	43da      	mvns	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	400a      	ands	r2, r1
 80078be:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80078cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3728      	adds	r7, #40	; 0x28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	20008000 	.word	0x20008000

080078dc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff fe8b 	bl	8007606 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	711a      	strb	r2, [r3, #4]
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f7ff fe84 	bl	800761a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007912:	bf00      	nop
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f043 0204 	orr.w	r2, r3, #4
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7ff fe7a 	bl	800762e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	711a      	strb	r2, [r3, #4]
}
 8007940:	bf00      	nop
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f7ff ffce 	bl	8007948 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	711a      	strb	r2, [r3, #4]
}
 80079b2:	bf00      	nop
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f7ff ffc7 	bl	800795c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80079ce:	bf00      	nop
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	f043 0204 	orr.w	r2, r3, #4
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f7ff ffbd 	bl	8007970 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	711a      	strb	r2, [r3, #4]
}
 80079fc:	bf00      	nop
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007a0c:	f7fd fe5a 	bl	80056c4 <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e316      	b.n	800804a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a66      	ldr	r2, [pc, #408]	; (8007bbc <HAL_DMA_Init+0x1b8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d04a      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a65      	ldr	r2, [pc, #404]	; (8007bc0 <HAL_DMA_Init+0x1bc>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d045      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a63      	ldr	r2, [pc, #396]	; (8007bc4 <HAL_DMA_Init+0x1c0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d040      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a62      	ldr	r2, [pc, #392]	; (8007bc8 <HAL_DMA_Init+0x1c4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d03b      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a60      	ldr	r2, [pc, #384]	; (8007bcc <HAL_DMA_Init+0x1c8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d036      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a5f      	ldr	r2, [pc, #380]	; (8007bd0 <HAL_DMA_Init+0x1cc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d031      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a5d      	ldr	r2, [pc, #372]	; (8007bd4 <HAL_DMA_Init+0x1d0>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d02c      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a5c      	ldr	r2, [pc, #368]	; (8007bd8 <HAL_DMA_Init+0x1d4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d027      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a5a      	ldr	r2, [pc, #360]	; (8007bdc <HAL_DMA_Init+0x1d8>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d022      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a59      	ldr	r2, [pc, #356]	; (8007be0 <HAL_DMA_Init+0x1dc>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d01d      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a57      	ldr	r2, [pc, #348]	; (8007be4 <HAL_DMA_Init+0x1e0>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d018      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a56      	ldr	r2, [pc, #344]	; (8007be8 <HAL_DMA_Init+0x1e4>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d013      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a54      	ldr	r2, [pc, #336]	; (8007bec <HAL_DMA_Init+0x1e8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00e      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a53      	ldr	r2, [pc, #332]	; (8007bf0 <HAL_DMA_Init+0x1ec>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d009      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a51      	ldr	r2, [pc, #324]	; (8007bf4 <HAL_DMA_Init+0x1f0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d004      	beq.n	8007abc <HAL_DMA_Init+0xb8>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a50      	ldr	r2, [pc, #320]	; (8007bf8 <HAL_DMA_Init+0x1f4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d101      	bne.n	8007ac0 <HAL_DMA_Init+0xbc>
 8007abc:	2301      	movs	r3, #1
 8007abe:	e000      	b.n	8007ac2 <HAL_DMA_Init+0xbe>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 813b 	beq.w	8007d3e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a37      	ldr	r2, [pc, #220]	; (8007bbc <HAL_DMA_Init+0x1b8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d04a      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a36      	ldr	r2, [pc, #216]	; (8007bc0 <HAL_DMA_Init+0x1bc>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d045      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a34      	ldr	r2, [pc, #208]	; (8007bc4 <HAL_DMA_Init+0x1c0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d040      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a33      	ldr	r2, [pc, #204]	; (8007bc8 <HAL_DMA_Init+0x1c4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d03b      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a31      	ldr	r2, [pc, #196]	; (8007bcc <HAL_DMA_Init+0x1c8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d036      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a30      	ldr	r2, [pc, #192]	; (8007bd0 <HAL_DMA_Init+0x1cc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d031      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a2e      	ldr	r2, [pc, #184]	; (8007bd4 <HAL_DMA_Init+0x1d0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d02c      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a2d      	ldr	r2, [pc, #180]	; (8007bd8 <HAL_DMA_Init+0x1d4>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d027      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a2b      	ldr	r2, [pc, #172]	; (8007bdc <HAL_DMA_Init+0x1d8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d022      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a2a      	ldr	r2, [pc, #168]	; (8007be0 <HAL_DMA_Init+0x1dc>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d01d      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a28      	ldr	r2, [pc, #160]	; (8007be4 <HAL_DMA_Init+0x1e0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d018      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a27      	ldr	r2, [pc, #156]	; (8007be8 <HAL_DMA_Init+0x1e4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d013      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a25      	ldr	r2, [pc, #148]	; (8007bec <HAL_DMA_Init+0x1e8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00e      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a24      	ldr	r2, [pc, #144]	; (8007bf0 <HAL_DMA_Init+0x1ec>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d009      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a22      	ldr	r2, [pc, #136]	; (8007bf4 <HAL_DMA_Init+0x1f0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d004      	beq.n	8007b78 <HAL_DMA_Init+0x174>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a21      	ldr	r2, [pc, #132]	; (8007bf8 <HAL_DMA_Init+0x1f4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d108      	bne.n	8007b8a <HAL_DMA_Init+0x186>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0201 	bic.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	e007      	b.n	8007b9a <HAL_DMA_Init+0x196>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 0201 	bic.w	r2, r2, #1
 8007b98:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007b9a:	e02f      	b.n	8007bfc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b9c:	f7fd fd92 	bl	80056c4 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b05      	cmp	r3, #5
 8007ba8:	d928      	bls.n	8007bfc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2203      	movs	r2, #3
 8007bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e246      	b.n	800804a <HAL_DMA_Init+0x646>
 8007bbc:	40020010 	.word	0x40020010
 8007bc0:	40020028 	.word	0x40020028
 8007bc4:	40020040 	.word	0x40020040
 8007bc8:	40020058 	.word	0x40020058
 8007bcc:	40020070 	.word	0x40020070
 8007bd0:	40020088 	.word	0x40020088
 8007bd4:	400200a0 	.word	0x400200a0
 8007bd8:	400200b8 	.word	0x400200b8
 8007bdc:	40020410 	.word	0x40020410
 8007be0:	40020428 	.word	0x40020428
 8007be4:	40020440 	.word	0x40020440
 8007be8:	40020458 	.word	0x40020458
 8007bec:	40020470 	.word	0x40020470
 8007bf0:	40020488 	.word	0x40020488
 8007bf4:	400204a0 	.word	0x400204a0
 8007bf8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1c8      	bne.n	8007b9c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	4b83      	ldr	r3, [pc, #524]	; (8007e24 <HAL_DMA_Init+0x420>)
 8007c16:	4013      	ands	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007c22:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c3a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d107      	bne.n	8007c60 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007c60:	4b71      	ldr	r3, [pc, #452]	; (8007e28 <HAL_DMA_Init+0x424>)
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	4b71      	ldr	r3, [pc, #452]	; (8007e2c <HAL_DMA_Init+0x428>)
 8007c66:	4013      	ands	r3, r2
 8007c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c6c:	d328      	bcc.n	8007cc0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	2b28      	cmp	r3, #40	; 0x28
 8007c74:	d903      	bls.n	8007c7e <HAL_DMA_Init+0x27a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c7c:	d917      	bls.n	8007cae <HAL_DMA_Init+0x2aa>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	2b3e      	cmp	r3, #62	; 0x3e
 8007c84:	d903      	bls.n	8007c8e <HAL_DMA_Init+0x28a>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b42      	cmp	r3, #66	; 0x42
 8007c8c:	d90f      	bls.n	8007cae <HAL_DMA_Init+0x2aa>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b46      	cmp	r3, #70	; 0x46
 8007c94:	d903      	bls.n	8007c9e <HAL_DMA_Init+0x29a>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	2b48      	cmp	r3, #72	; 0x48
 8007c9c:	d907      	bls.n	8007cae <HAL_DMA_Init+0x2aa>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2b4e      	cmp	r3, #78	; 0x4e
 8007ca4:	d905      	bls.n	8007cb2 <HAL_DMA_Init+0x2ae>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	2b52      	cmp	r3, #82	; 0x52
 8007cac:	d801      	bhi.n	8007cb2 <HAL_DMA_Init+0x2ae>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <HAL_DMA_Init+0x2b0>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cbe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f023 0307 	bic.w	r3, r3, #7
 8007cd6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d117      	bne.n	8007d1a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00e      	beq.n	8007d1a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f002 fb4d 	bl	800a39c <DMA_CheckFifoParam>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d008      	beq.n	8007d1a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2240      	movs	r2, #64	; 0x40
 8007d0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e197      	b.n	800804a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f002 fa88 	bl	800a238 <DMA_CalcBaseAndBitshift>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d30:	f003 031f 	and.w	r3, r3, #31
 8007d34:	223f      	movs	r2, #63	; 0x3f
 8007d36:	409a      	lsls	r2, r3
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	609a      	str	r2, [r3, #8]
 8007d3c:	e0cd      	b.n	8007eda <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a3b      	ldr	r2, [pc, #236]	; (8007e30 <HAL_DMA_Init+0x42c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d022      	beq.n	8007d8e <HAL_DMA_Init+0x38a>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a39      	ldr	r2, [pc, #228]	; (8007e34 <HAL_DMA_Init+0x430>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d01d      	beq.n	8007d8e <HAL_DMA_Init+0x38a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a38      	ldr	r2, [pc, #224]	; (8007e38 <HAL_DMA_Init+0x434>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d018      	beq.n	8007d8e <HAL_DMA_Init+0x38a>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a36      	ldr	r2, [pc, #216]	; (8007e3c <HAL_DMA_Init+0x438>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d013      	beq.n	8007d8e <HAL_DMA_Init+0x38a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a35      	ldr	r2, [pc, #212]	; (8007e40 <HAL_DMA_Init+0x43c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00e      	beq.n	8007d8e <HAL_DMA_Init+0x38a>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a33      	ldr	r2, [pc, #204]	; (8007e44 <HAL_DMA_Init+0x440>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d009      	beq.n	8007d8e <HAL_DMA_Init+0x38a>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a32      	ldr	r2, [pc, #200]	; (8007e48 <HAL_DMA_Init+0x444>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d004      	beq.n	8007d8e <HAL_DMA_Init+0x38a>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a30      	ldr	r2, [pc, #192]	; (8007e4c <HAL_DMA_Init+0x448>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d101      	bne.n	8007d92 <HAL_DMA_Init+0x38e>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e000      	b.n	8007d94 <HAL_DMA_Init+0x390>
 8007d92:	2300      	movs	r3, #0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 8097 	beq.w	8007ec8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a24      	ldr	r2, [pc, #144]	; (8007e30 <HAL_DMA_Init+0x42c>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d021      	beq.n	8007de8 <HAL_DMA_Init+0x3e4>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a22      	ldr	r2, [pc, #136]	; (8007e34 <HAL_DMA_Init+0x430>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01c      	beq.n	8007de8 <HAL_DMA_Init+0x3e4>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a21      	ldr	r2, [pc, #132]	; (8007e38 <HAL_DMA_Init+0x434>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d017      	beq.n	8007de8 <HAL_DMA_Init+0x3e4>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a1f      	ldr	r2, [pc, #124]	; (8007e3c <HAL_DMA_Init+0x438>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d012      	beq.n	8007de8 <HAL_DMA_Init+0x3e4>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a1e      	ldr	r2, [pc, #120]	; (8007e40 <HAL_DMA_Init+0x43c>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00d      	beq.n	8007de8 <HAL_DMA_Init+0x3e4>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a1c      	ldr	r2, [pc, #112]	; (8007e44 <HAL_DMA_Init+0x440>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d008      	beq.n	8007de8 <HAL_DMA_Init+0x3e4>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a1b      	ldr	r2, [pc, #108]	; (8007e48 <HAL_DMA_Init+0x444>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d003      	beq.n	8007de8 <HAL_DMA_Init+0x3e4>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a19      	ldr	r2, [pc, #100]	; (8007e4c <HAL_DMA_Init+0x448>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2202      	movs	r2, #2
 8007dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <HAL_DMA_Init+0x44c>)
 8007e06:	4013      	ands	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	2b40      	cmp	r3, #64	; 0x40
 8007e10:	d020      	beq.n	8007e54 <HAL_DMA_Init+0x450>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	2b80      	cmp	r3, #128	; 0x80
 8007e18:	d102      	bne.n	8007e20 <HAL_DMA_Init+0x41c>
 8007e1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e1e:	e01a      	b.n	8007e56 <HAL_DMA_Init+0x452>
 8007e20:	2300      	movs	r3, #0
 8007e22:	e018      	b.n	8007e56 <HAL_DMA_Init+0x452>
 8007e24:	fe10803f 	.word	0xfe10803f
 8007e28:	5c001000 	.word	0x5c001000
 8007e2c:	ffff0000 	.word	0xffff0000
 8007e30:	58025408 	.word	0x58025408
 8007e34:	5802541c 	.word	0x5802541c
 8007e38:	58025430 	.word	0x58025430
 8007e3c:	58025444 	.word	0x58025444
 8007e40:	58025458 	.word	0x58025458
 8007e44:	5802546c 	.word	0x5802546c
 8007e48:	58025480 	.word	0x58025480
 8007e4c:	58025494 	.word	0x58025494
 8007e50:	fffe000f 	.word	0xfffe000f
 8007e54:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	68d2      	ldr	r2, [r2, #12]
 8007e5a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007e5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007e64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007e6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007e84:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	4b6e      	ldr	r3, [pc, #440]	; (8008054 <HAL_DMA_Init+0x650>)
 8007e9c:	4413      	add	r3, r2
 8007e9e:	4a6e      	ldr	r2, [pc, #440]	; (8008058 <HAL_DMA_Init+0x654>)
 8007ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea4:	091b      	lsrs	r3, r3, #4
 8007ea6:	009a      	lsls	r2, r3, #2
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f002 f9c3 	bl	800a238 <DMA_CalcBaseAndBitshift>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eba:	f003 031f 	and.w	r3, r3, #31
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	409a      	lsls	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	605a      	str	r2, [r3, #4]
 8007ec6:	e008      	b.n	8007eda <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2240      	movs	r2, #64	; 0x40
 8007ecc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2203      	movs	r2, #3
 8007ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e0b7      	b.n	800804a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a5f      	ldr	r2, [pc, #380]	; (800805c <HAL_DMA_Init+0x658>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d072      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a5d      	ldr	r2, [pc, #372]	; (8008060 <HAL_DMA_Init+0x65c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d06d      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a5c      	ldr	r2, [pc, #368]	; (8008064 <HAL_DMA_Init+0x660>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d068      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a5a      	ldr	r2, [pc, #360]	; (8008068 <HAL_DMA_Init+0x664>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d063      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a59      	ldr	r2, [pc, #356]	; (800806c <HAL_DMA_Init+0x668>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d05e      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a57      	ldr	r2, [pc, #348]	; (8008070 <HAL_DMA_Init+0x66c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d059      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a56      	ldr	r2, [pc, #344]	; (8008074 <HAL_DMA_Init+0x670>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d054      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a54      	ldr	r2, [pc, #336]	; (8008078 <HAL_DMA_Init+0x674>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d04f      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a53      	ldr	r2, [pc, #332]	; (800807c <HAL_DMA_Init+0x678>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d04a      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a51      	ldr	r2, [pc, #324]	; (8008080 <HAL_DMA_Init+0x67c>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d045      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a50      	ldr	r2, [pc, #320]	; (8008084 <HAL_DMA_Init+0x680>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d040      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a4e      	ldr	r2, [pc, #312]	; (8008088 <HAL_DMA_Init+0x684>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d03b      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a4d      	ldr	r2, [pc, #308]	; (800808c <HAL_DMA_Init+0x688>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d036      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a4b      	ldr	r2, [pc, #300]	; (8008090 <HAL_DMA_Init+0x68c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d031      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a4a      	ldr	r2, [pc, #296]	; (8008094 <HAL_DMA_Init+0x690>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d02c      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a48      	ldr	r2, [pc, #288]	; (8008098 <HAL_DMA_Init+0x694>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d027      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a47      	ldr	r2, [pc, #284]	; (800809c <HAL_DMA_Init+0x698>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d022      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a45      	ldr	r2, [pc, #276]	; (80080a0 <HAL_DMA_Init+0x69c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d01d      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a44      	ldr	r2, [pc, #272]	; (80080a4 <HAL_DMA_Init+0x6a0>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d018      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a42      	ldr	r2, [pc, #264]	; (80080a8 <HAL_DMA_Init+0x6a4>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d013      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a41      	ldr	r2, [pc, #260]	; (80080ac <HAL_DMA_Init+0x6a8>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00e      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a3f      	ldr	r2, [pc, #252]	; (80080b0 <HAL_DMA_Init+0x6ac>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d009      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a3e      	ldr	r2, [pc, #248]	; (80080b4 <HAL_DMA_Init+0x6b0>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d004      	beq.n	8007fca <HAL_DMA_Init+0x5c6>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a3c      	ldr	r2, [pc, #240]	; (80080b8 <HAL_DMA_Init+0x6b4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d101      	bne.n	8007fce <HAL_DMA_Init+0x5ca>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e000      	b.n	8007fd0 <HAL_DMA_Init+0x5cc>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d032      	beq.n	800803a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f002 fa5d 	bl	800a494 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b80      	cmp	r3, #128	; 0x80
 8007fe0:	d102      	bne.n	8007fe8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff0:	b2d2      	uxtb	r2, r2
 8007ff2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ffc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d010      	beq.n	8008028 <HAL_DMA_Init+0x624>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2b08      	cmp	r3, #8
 800800c:	d80c      	bhi.n	8008028 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f002 fada 	bl	800a5c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008024:	605a      	str	r2, [r3, #4]
 8008026:	e008      	b.n	800803a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	a7fdabf8 	.word	0xa7fdabf8
 8008058:	cccccccd 	.word	0xcccccccd
 800805c:	40020010 	.word	0x40020010
 8008060:	40020028 	.word	0x40020028
 8008064:	40020040 	.word	0x40020040
 8008068:	40020058 	.word	0x40020058
 800806c:	40020070 	.word	0x40020070
 8008070:	40020088 	.word	0x40020088
 8008074:	400200a0 	.word	0x400200a0
 8008078:	400200b8 	.word	0x400200b8
 800807c:	40020410 	.word	0x40020410
 8008080:	40020428 	.word	0x40020428
 8008084:	40020440 	.word	0x40020440
 8008088:	40020458 	.word	0x40020458
 800808c:	40020470 	.word	0x40020470
 8008090:	40020488 	.word	0x40020488
 8008094:	400204a0 	.word	0x400204a0
 8008098:	400204b8 	.word	0x400204b8
 800809c:	58025408 	.word	0x58025408
 80080a0:	5802541c 	.word	0x5802541c
 80080a4:	58025430 	.word	0x58025430
 80080a8:	58025444 	.word	0x58025444
 80080ac:	58025458 	.word	0x58025458
 80080b0:	5802546c 	.word	0x5802546c
 80080b4:	58025480 	.word	0x58025480
 80080b8:	58025494 	.word	0x58025494

080080bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e226      	b.n	8008526 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d101      	bne.n	80080e6 <HAL_DMA_Start_IT+0x2a>
 80080e2:	2302      	movs	r3, #2
 80080e4:	e21f      	b.n	8008526 <HAL_DMA_Start_IT+0x46a>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	f040 820a 	bne.w	8008510 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a68      	ldr	r2, [pc, #416]	; (80082b0 <HAL_DMA_Start_IT+0x1f4>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d04a      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a66      	ldr	r2, [pc, #408]	; (80082b4 <HAL_DMA_Start_IT+0x1f8>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d045      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a65      	ldr	r2, [pc, #404]	; (80082b8 <HAL_DMA_Start_IT+0x1fc>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d040      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a63      	ldr	r2, [pc, #396]	; (80082bc <HAL_DMA_Start_IT+0x200>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d03b      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a62      	ldr	r2, [pc, #392]	; (80082c0 <HAL_DMA_Start_IT+0x204>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d036      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a60      	ldr	r2, [pc, #384]	; (80082c4 <HAL_DMA_Start_IT+0x208>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d031      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a5f      	ldr	r2, [pc, #380]	; (80082c8 <HAL_DMA_Start_IT+0x20c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d02c      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a5d      	ldr	r2, [pc, #372]	; (80082cc <HAL_DMA_Start_IT+0x210>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d027      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a5c      	ldr	r2, [pc, #368]	; (80082d0 <HAL_DMA_Start_IT+0x214>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d022      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a5a      	ldr	r2, [pc, #360]	; (80082d4 <HAL_DMA_Start_IT+0x218>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d01d      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a59      	ldr	r2, [pc, #356]	; (80082d8 <HAL_DMA_Start_IT+0x21c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d018      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a57      	ldr	r2, [pc, #348]	; (80082dc <HAL_DMA_Start_IT+0x220>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d013      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a56      	ldr	r2, [pc, #344]	; (80082e0 <HAL_DMA_Start_IT+0x224>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d00e      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a54      	ldr	r2, [pc, #336]	; (80082e4 <HAL_DMA_Start_IT+0x228>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d009      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a53      	ldr	r2, [pc, #332]	; (80082e8 <HAL_DMA_Start_IT+0x22c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d004      	beq.n	80081aa <HAL_DMA_Start_IT+0xee>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a51      	ldr	r2, [pc, #324]	; (80082ec <HAL_DMA_Start_IT+0x230>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d108      	bne.n	80081bc <HAL_DMA_Start_IT+0x100>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 0201 	bic.w	r2, r2, #1
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	e007      	b.n	80081cc <HAL_DMA_Start_IT+0x110>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0201 	bic.w	r2, r2, #1
 80081ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f001 fe84 	bl	8009ee0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a34      	ldr	r2, [pc, #208]	; (80082b0 <HAL_DMA_Start_IT+0x1f4>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d04a      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a33      	ldr	r2, [pc, #204]	; (80082b4 <HAL_DMA_Start_IT+0x1f8>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d045      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a31      	ldr	r2, [pc, #196]	; (80082b8 <HAL_DMA_Start_IT+0x1fc>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d040      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a30      	ldr	r2, [pc, #192]	; (80082bc <HAL_DMA_Start_IT+0x200>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d03b      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a2e      	ldr	r2, [pc, #184]	; (80082c0 <HAL_DMA_Start_IT+0x204>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d036      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a2d      	ldr	r2, [pc, #180]	; (80082c4 <HAL_DMA_Start_IT+0x208>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d031      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a2b      	ldr	r2, [pc, #172]	; (80082c8 <HAL_DMA_Start_IT+0x20c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d02c      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a2a      	ldr	r2, [pc, #168]	; (80082cc <HAL_DMA_Start_IT+0x210>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d027      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a28      	ldr	r2, [pc, #160]	; (80082d0 <HAL_DMA_Start_IT+0x214>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d022      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a27      	ldr	r2, [pc, #156]	; (80082d4 <HAL_DMA_Start_IT+0x218>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d01d      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a25      	ldr	r2, [pc, #148]	; (80082d8 <HAL_DMA_Start_IT+0x21c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d018      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a24      	ldr	r2, [pc, #144]	; (80082dc <HAL_DMA_Start_IT+0x220>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d013      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a22      	ldr	r2, [pc, #136]	; (80082e0 <HAL_DMA_Start_IT+0x224>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00e      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a21      	ldr	r2, [pc, #132]	; (80082e4 <HAL_DMA_Start_IT+0x228>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d009      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a1f      	ldr	r2, [pc, #124]	; (80082e8 <HAL_DMA_Start_IT+0x22c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d004      	beq.n	8008278 <HAL_DMA_Start_IT+0x1bc>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a1e      	ldr	r2, [pc, #120]	; (80082ec <HAL_DMA_Start_IT+0x230>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d101      	bne.n	800827c <HAL_DMA_Start_IT+0x1c0>
 8008278:	2301      	movs	r3, #1
 800827a:	e000      	b.n	800827e <HAL_DMA_Start_IT+0x1c2>
 800827c:	2300      	movs	r3, #0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d036      	beq.n	80082f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f023 021e 	bic.w	r2, r3, #30
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f042 0216 	orr.w	r2, r2, #22
 8008294:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	2b00      	cmp	r3, #0
 800829c:	d03e      	beq.n	800831c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f042 0208 	orr.w	r2, r2, #8
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	e035      	b.n	800831c <HAL_DMA_Start_IT+0x260>
 80082b0:	40020010 	.word	0x40020010
 80082b4:	40020028 	.word	0x40020028
 80082b8:	40020040 	.word	0x40020040
 80082bc:	40020058 	.word	0x40020058
 80082c0:	40020070 	.word	0x40020070
 80082c4:	40020088 	.word	0x40020088
 80082c8:	400200a0 	.word	0x400200a0
 80082cc:	400200b8 	.word	0x400200b8
 80082d0:	40020410 	.word	0x40020410
 80082d4:	40020428 	.word	0x40020428
 80082d8:	40020440 	.word	0x40020440
 80082dc:	40020458 	.word	0x40020458
 80082e0:	40020470 	.word	0x40020470
 80082e4:	40020488 	.word	0x40020488
 80082e8:	400204a0 	.word	0x400204a0
 80082ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f023 020e 	bic.w	r2, r3, #14
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f042 020a 	orr.w	r2, r2, #10
 8008302:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008308:	2b00      	cmp	r3, #0
 800830a:	d007      	beq.n	800831c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0204 	orr.w	r2, r2, #4
 800831a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a83      	ldr	r2, [pc, #524]	; (8008530 <HAL_DMA_Start_IT+0x474>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d072      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a82      	ldr	r2, [pc, #520]	; (8008534 <HAL_DMA_Start_IT+0x478>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d06d      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a80      	ldr	r2, [pc, #512]	; (8008538 <HAL_DMA_Start_IT+0x47c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d068      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a7f      	ldr	r2, [pc, #508]	; (800853c <HAL_DMA_Start_IT+0x480>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d063      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a7d      	ldr	r2, [pc, #500]	; (8008540 <HAL_DMA_Start_IT+0x484>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d05e      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a7c      	ldr	r2, [pc, #496]	; (8008544 <HAL_DMA_Start_IT+0x488>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d059      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a7a      	ldr	r2, [pc, #488]	; (8008548 <HAL_DMA_Start_IT+0x48c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d054      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a79      	ldr	r2, [pc, #484]	; (800854c <HAL_DMA_Start_IT+0x490>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d04f      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a77      	ldr	r2, [pc, #476]	; (8008550 <HAL_DMA_Start_IT+0x494>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d04a      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a76      	ldr	r2, [pc, #472]	; (8008554 <HAL_DMA_Start_IT+0x498>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d045      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a74      	ldr	r2, [pc, #464]	; (8008558 <HAL_DMA_Start_IT+0x49c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d040      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a73      	ldr	r2, [pc, #460]	; (800855c <HAL_DMA_Start_IT+0x4a0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d03b      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a71      	ldr	r2, [pc, #452]	; (8008560 <HAL_DMA_Start_IT+0x4a4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d036      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a70      	ldr	r2, [pc, #448]	; (8008564 <HAL_DMA_Start_IT+0x4a8>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d031      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a6e      	ldr	r2, [pc, #440]	; (8008568 <HAL_DMA_Start_IT+0x4ac>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d02c      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a6d      	ldr	r2, [pc, #436]	; (800856c <HAL_DMA_Start_IT+0x4b0>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d027      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a6b      	ldr	r2, [pc, #428]	; (8008570 <HAL_DMA_Start_IT+0x4b4>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d022      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a6a      	ldr	r2, [pc, #424]	; (8008574 <HAL_DMA_Start_IT+0x4b8>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d01d      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a68      	ldr	r2, [pc, #416]	; (8008578 <HAL_DMA_Start_IT+0x4bc>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d018      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a67      	ldr	r2, [pc, #412]	; (800857c <HAL_DMA_Start_IT+0x4c0>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d013      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a65      	ldr	r2, [pc, #404]	; (8008580 <HAL_DMA_Start_IT+0x4c4>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d00e      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a64      	ldr	r2, [pc, #400]	; (8008584 <HAL_DMA_Start_IT+0x4c8>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d009      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a62      	ldr	r2, [pc, #392]	; (8008588 <HAL_DMA_Start_IT+0x4cc>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d004      	beq.n	800840c <HAL_DMA_Start_IT+0x350>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a61      	ldr	r2, [pc, #388]	; (800858c <HAL_DMA_Start_IT+0x4d0>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d101      	bne.n	8008410 <HAL_DMA_Start_IT+0x354>
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <HAL_DMA_Start_IT+0x356>
 8008410:	2300      	movs	r3, #0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d01a      	beq.n	800844c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d007      	beq.n	8008434 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800842e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008432:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d007      	beq.n	800844c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800844a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a37      	ldr	r2, [pc, #220]	; (8008530 <HAL_DMA_Start_IT+0x474>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d04a      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a36      	ldr	r2, [pc, #216]	; (8008534 <HAL_DMA_Start_IT+0x478>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d045      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a34      	ldr	r2, [pc, #208]	; (8008538 <HAL_DMA_Start_IT+0x47c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d040      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a33      	ldr	r2, [pc, #204]	; (800853c <HAL_DMA_Start_IT+0x480>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d03b      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a31      	ldr	r2, [pc, #196]	; (8008540 <HAL_DMA_Start_IT+0x484>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d036      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a30      	ldr	r2, [pc, #192]	; (8008544 <HAL_DMA_Start_IT+0x488>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d031      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a2e      	ldr	r2, [pc, #184]	; (8008548 <HAL_DMA_Start_IT+0x48c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d02c      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a2d      	ldr	r2, [pc, #180]	; (800854c <HAL_DMA_Start_IT+0x490>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d027      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a2b      	ldr	r2, [pc, #172]	; (8008550 <HAL_DMA_Start_IT+0x494>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d022      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a2a      	ldr	r2, [pc, #168]	; (8008554 <HAL_DMA_Start_IT+0x498>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d01d      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a28      	ldr	r2, [pc, #160]	; (8008558 <HAL_DMA_Start_IT+0x49c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d018      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a27      	ldr	r2, [pc, #156]	; (800855c <HAL_DMA_Start_IT+0x4a0>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d013      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a25      	ldr	r2, [pc, #148]	; (8008560 <HAL_DMA_Start_IT+0x4a4>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00e      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a24      	ldr	r2, [pc, #144]	; (8008564 <HAL_DMA_Start_IT+0x4a8>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d009      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a22      	ldr	r2, [pc, #136]	; (8008568 <HAL_DMA_Start_IT+0x4ac>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d004      	beq.n	80084ec <HAL_DMA_Start_IT+0x430>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a21      	ldr	r2, [pc, #132]	; (800856c <HAL_DMA_Start_IT+0x4b0>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d108      	bne.n	80084fe <HAL_DMA_Start_IT+0x442>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0201 	orr.w	r2, r2, #1
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	e012      	b.n	8008524 <HAL_DMA_Start_IT+0x468>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f042 0201 	orr.w	r2, r2, #1
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	e009      	b.n	8008524 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008516:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008524:	7dfb      	ldrb	r3, [r7, #23]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40020010 	.word	0x40020010
 8008534:	40020028 	.word	0x40020028
 8008538:	40020040 	.word	0x40020040
 800853c:	40020058 	.word	0x40020058
 8008540:	40020070 	.word	0x40020070
 8008544:	40020088 	.word	0x40020088
 8008548:	400200a0 	.word	0x400200a0
 800854c:	400200b8 	.word	0x400200b8
 8008550:	40020410 	.word	0x40020410
 8008554:	40020428 	.word	0x40020428
 8008558:	40020440 	.word	0x40020440
 800855c:	40020458 	.word	0x40020458
 8008560:	40020470 	.word	0x40020470
 8008564:	40020488 	.word	0x40020488
 8008568:	400204a0 	.word	0x400204a0
 800856c:	400204b8 	.word	0x400204b8
 8008570:	58025408 	.word	0x58025408
 8008574:	5802541c 	.word	0x5802541c
 8008578:	58025430 	.word	0x58025430
 800857c:	58025444 	.word	0x58025444
 8008580:	58025458 	.word	0x58025458
 8008584:	5802546c 	.word	0x5802546c
 8008588:	58025480 	.word	0x58025480
 800858c:	58025494 	.word	0x58025494

08008590 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008598:	f7fd f894 	bl	80056c4 <HAL_GetTick>
 800859c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e2dc      	b.n	8008b62 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d008      	beq.n	80085c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2280      	movs	r2, #128	; 0x80
 80085b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e2cd      	b.n	8008b62 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a76      	ldr	r2, [pc, #472]	; (80087a4 <HAL_DMA_Abort+0x214>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d04a      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a74      	ldr	r2, [pc, #464]	; (80087a8 <HAL_DMA_Abort+0x218>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d045      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a73      	ldr	r2, [pc, #460]	; (80087ac <HAL_DMA_Abort+0x21c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d040      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a71      	ldr	r2, [pc, #452]	; (80087b0 <HAL_DMA_Abort+0x220>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d03b      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a70      	ldr	r2, [pc, #448]	; (80087b4 <HAL_DMA_Abort+0x224>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d036      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a6e      	ldr	r2, [pc, #440]	; (80087b8 <HAL_DMA_Abort+0x228>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d031      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a6d      	ldr	r2, [pc, #436]	; (80087bc <HAL_DMA_Abort+0x22c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d02c      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a6b      	ldr	r2, [pc, #428]	; (80087c0 <HAL_DMA_Abort+0x230>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d027      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a6a      	ldr	r2, [pc, #424]	; (80087c4 <HAL_DMA_Abort+0x234>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d022      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a68      	ldr	r2, [pc, #416]	; (80087c8 <HAL_DMA_Abort+0x238>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d01d      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a67      	ldr	r2, [pc, #412]	; (80087cc <HAL_DMA_Abort+0x23c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d018      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a65      	ldr	r2, [pc, #404]	; (80087d0 <HAL_DMA_Abort+0x240>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d013      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a64      	ldr	r2, [pc, #400]	; (80087d4 <HAL_DMA_Abort+0x244>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00e      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a62      	ldr	r2, [pc, #392]	; (80087d8 <HAL_DMA_Abort+0x248>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d009      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a61      	ldr	r2, [pc, #388]	; (80087dc <HAL_DMA_Abort+0x24c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d004      	beq.n	8008666 <HAL_DMA_Abort+0xd6>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a5f      	ldr	r2, [pc, #380]	; (80087e0 <HAL_DMA_Abort+0x250>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d101      	bne.n	800866a <HAL_DMA_Abort+0xda>
 8008666:	2301      	movs	r3, #1
 8008668:	e000      	b.n	800866c <HAL_DMA_Abort+0xdc>
 800866a:	2300      	movs	r3, #0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d013      	beq.n	8008698 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 021e 	bic.w	r2, r2, #30
 800867e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	695a      	ldr	r2, [r3, #20]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800868e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	617b      	str	r3, [r7, #20]
 8008696:	e00a      	b.n	80086ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 020e 	bic.w	r2, r2, #14
 80086a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a3c      	ldr	r2, [pc, #240]	; (80087a4 <HAL_DMA_Abort+0x214>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d072      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a3a      	ldr	r2, [pc, #232]	; (80087a8 <HAL_DMA_Abort+0x218>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d06d      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a39      	ldr	r2, [pc, #228]	; (80087ac <HAL_DMA_Abort+0x21c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d068      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a37      	ldr	r2, [pc, #220]	; (80087b0 <HAL_DMA_Abort+0x220>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d063      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a36      	ldr	r2, [pc, #216]	; (80087b4 <HAL_DMA_Abort+0x224>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d05e      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a34      	ldr	r2, [pc, #208]	; (80087b8 <HAL_DMA_Abort+0x228>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d059      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a33      	ldr	r2, [pc, #204]	; (80087bc <HAL_DMA_Abort+0x22c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d054      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a31      	ldr	r2, [pc, #196]	; (80087c0 <HAL_DMA_Abort+0x230>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d04f      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a30      	ldr	r2, [pc, #192]	; (80087c4 <HAL_DMA_Abort+0x234>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d04a      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a2e      	ldr	r2, [pc, #184]	; (80087c8 <HAL_DMA_Abort+0x238>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d045      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a2d      	ldr	r2, [pc, #180]	; (80087cc <HAL_DMA_Abort+0x23c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d040      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a2b      	ldr	r2, [pc, #172]	; (80087d0 <HAL_DMA_Abort+0x240>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d03b      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a2a      	ldr	r2, [pc, #168]	; (80087d4 <HAL_DMA_Abort+0x244>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d036      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a28      	ldr	r2, [pc, #160]	; (80087d8 <HAL_DMA_Abort+0x248>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d031      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a27      	ldr	r2, [pc, #156]	; (80087dc <HAL_DMA_Abort+0x24c>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d02c      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a25      	ldr	r2, [pc, #148]	; (80087e0 <HAL_DMA_Abort+0x250>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d027      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a24      	ldr	r2, [pc, #144]	; (80087e4 <HAL_DMA_Abort+0x254>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d022      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a22      	ldr	r2, [pc, #136]	; (80087e8 <HAL_DMA_Abort+0x258>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d01d      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a21      	ldr	r2, [pc, #132]	; (80087ec <HAL_DMA_Abort+0x25c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d018      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a1f      	ldr	r2, [pc, #124]	; (80087f0 <HAL_DMA_Abort+0x260>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d013      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <HAL_DMA_Abort+0x264>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d00e      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a1c      	ldr	r2, [pc, #112]	; (80087f8 <HAL_DMA_Abort+0x268>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d009      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a1b      	ldr	r2, [pc, #108]	; (80087fc <HAL_DMA_Abort+0x26c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d004      	beq.n	800879e <HAL_DMA_Abort+0x20e>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a19      	ldr	r2, [pc, #100]	; (8008800 <HAL_DMA_Abort+0x270>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d132      	bne.n	8008804 <HAL_DMA_Abort+0x274>
 800879e:	2301      	movs	r3, #1
 80087a0:	e031      	b.n	8008806 <HAL_DMA_Abort+0x276>
 80087a2:	bf00      	nop
 80087a4:	40020010 	.word	0x40020010
 80087a8:	40020028 	.word	0x40020028
 80087ac:	40020040 	.word	0x40020040
 80087b0:	40020058 	.word	0x40020058
 80087b4:	40020070 	.word	0x40020070
 80087b8:	40020088 	.word	0x40020088
 80087bc:	400200a0 	.word	0x400200a0
 80087c0:	400200b8 	.word	0x400200b8
 80087c4:	40020410 	.word	0x40020410
 80087c8:	40020428 	.word	0x40020428
 80087cc:	40020440 	.word	0x40020440
 80087d0:	40020458 	.word	0x40020458
 80087d4:	40020470 	.word	0x40020470
 80087d8:	40020488 	.word	0x40020488
 80087dc:	400204a0 	.word	0x400204a0
 80087e0:	400204b8 	.word	0x400204b8
 80087e4:	58025408 	.word	0x58025408
 80087e8:	5802541c 	.word	0x5802541c
 80087ec:	58025430 	.word	0x58025430
 80087f0:	58025444 	.word	0x58025444
 80087f4:	58025458 	.word	0x58025458
 80087f8:	5802546c 	.word	0x5802546c
 80087fc:	58025480 	.word	0x58025480
 8008800:	58025494 	.word	0x58025494
 8008804:	2300      	movs	r3, #0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d007      	beq.n	800881a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008818:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a6d      	ldr	r2, [pc, #436]	; (80089d4 <HAL_DMA_Abort+0x444>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d04a      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a6b      	ldr	r2, [pc, #428]	; (80089d8 <HAL_DMA_Abort+0x448>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d045      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a6a      	ldr	r2, [pc, #424]	; (80089dc <HAL_DMA_Abort+0x44c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d040      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a68      	ldr	r2, [pc, #416]	; (80089e0 <HAL_DMA_Abort+0x450>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d03b      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a67      	ldr	r2, [pc, #412]	; (80089e4 <HAL_DMA_Abort+0x454>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d036      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a65      	ldr	r2, [pc, #404]	; (80089e8 <HAL_DMA_Abort+0x458>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d031      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a64      	ldr	r2, [pc, #400]	; (80089ec <HAL_DMA_Abort+0x45c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d02c      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a62      	ldr	r2, [pc, #392]	; (80089f0 <HAL_DMA_Abort+0x460>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d027      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a61      	ldr	r2, [pc, #388]	; (80089f4 <HAL_DMA_Abort+0x464>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d022      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a5f      	ldr	r2, [pc, #380]	; (80089f8 <HAL_DMA_Abort+0x468>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d01d      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a5e      	ldr	r2, [pc, #376]	; (80089fc <HAL_DMA_Abort+0x46c>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d018      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a5c      	ldr	r2, [pc, #368]	; (8008a00 <HAL_DMA_Abort+0x470>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d013      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a5b      	ldr	r2, [pc, #364]	; (8008a04 <HAL_DMA_Abort+0x474>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d00e      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a59      	ldr	r2, [pc, #356]	; (8008a08 <HAL_DMA_Abort+0x478>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d009      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a58      	ldr	r2, [pc, #352]	; (8008a0c <HAL_DMA_Abort+0x47c>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d004      	beq.n	80088ba <HAL_DMA_Abort+0x32a>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a56      	ldr	r2, [pc, #344]	; (8008a10 <HAL_DMA_Abort+0x480>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d108      	bne.n	80088cc <HAL_DMA_Abort+0x33c>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 0201 	bic.w	r2, r2, #1
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	e007      	b.n	80088dc <HAL_DMA_Abort+0x34c>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0201 	bic.w	r2, r2, #1
 80088da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80088dc:	e013      	b.n	8008906 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80088de:	f7fc fef1 	bl	80056c4 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	2b05      	cmp	r3, #5
 80088ea:	d90c      	bls.n	8008906 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2220      	movs	r2, #32
 80088f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2203      	movs	r2, #3
 80088f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e12d      	b.n	8008b62 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1e5      	bne.n	80088de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a2f      	ldr	r2, [pc, #188]	; (80089d4 <HAL_DMA_Abort+0x444>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d04a      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a2d      	ldr	r2, [pc, #180]	; (80089d8 <HAL_DMA_Abort+0x448>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d045      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a2c      	ldr	r2, [pc, #176]	; (80089dc <HAL_DMA_Abort+0x44c>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d040      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a2a      	ldr	r2, [pc, #168]	; (80089e0 <HAL_DMA_Abort+0x450>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d03b      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a29      	ldr	r2, [pc, #164]	; (80089e4 <HAL_DMA_Abort+0x454>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d036      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a27      	ldr	r2, [pc, #156]	; (80089e8 <HAL_DMA_Abort+0x458>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d031      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a26      	ldr	r2, [pc, #152]	; (80089ec <HAL_DMA_Abort+0x45c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d02c      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a24      	ldr	r2, [pc, #144]	; (80089f0 <HAL_DMA_Abort+0x460>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d027      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a23      	ldr	r2, [pc, #140]	; (80089f4 <HAL_DMA_Abort+0x464>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d022      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a21      	ldr	r2, [pc, #132]	; (80089f8 <HAL_DMA_Abort+0x468>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d01d      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a20      	ldr	r2, [pc, #128]	; (80089fc <HAL_DMA_Abort+0x46c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d018      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a1e      	ldr	r2, [pc, #120]	; (8008a00 <HAL_DMA_Abort+0x470>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d013      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a1d      	ldr	r2, [pc, #116]	; (8008a04 <HAL_DMA_Abort+0x474>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d00e      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a1b      	ldr	r2, [pc, #108]	; (8008a08 <HAL_DMA_Abort+0x478>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d009      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a1a      	ldr	r2, [pc, #104]	; (8008a0c <HAL_DMA_Abort+0x47c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d004      	beq.n	80089b2 <HAL_DMA_Abort+0x422>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a18      	ldr	r2, [pc, #96]	; (8008a10 <HAL_DMA_Abort+0x480>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d101      	bne.n	80089b6 <HAL_DMA_Abort+0x426>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e000      	b.n	80089b8 <HAL_DMA_Abort+0x428>
 80089b6:	2300      	movs	r3, #0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d02b      	beq.n	8008a14 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c6:	f003 031f 	and.w	r3, r3, #31
 80089ca:	223f      	movs	r2, #63	; 0x3f
 80089cc:	409a      	lsls	r2, r3
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	609a      	str	r2, [r3, #8]
 80089d2:	e02a      	b.n	8008a2a <HAL_DMA_Abort+0x49a>
 80089d4:	40020010 	.word	0x40020010
 80089d8:	40020028 	.word	0x40020028
 80089dc:	40020040 	.word	0x40020040
 80089e0:	40020058 	.word	0x40020058
 80089e4:	40020070 	.word	0x40020070
 80089e8:	40020088 	.word	0x40020088
 80089ec:	400200a0 	.word	0x400200a0
 80089f0:	400200b8 	.word	0x400200b8
 80089f4:	40020410 	.word	0x40020410
 80089f8:	40020428 	.word	0x40020428
 80089fc:	40020440 	.word	0x40020440
 8008a00:	40020458 	.word	0x40020458
 8008a04:	40020470 	.word	0x40020470
 8008a08:	40020488 	.word	0x40020488
 8008a0c:	400204a0 	.word	0x400204a0
 8008a10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a18:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a1e:	f003 031f 	and.w	r3, r3, #31
 8008a22:	2201      	movs	r2, #1
 8008a24:	409a      	lsls	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a4f      	ldr	r2, [pc, #316]	; (8008b6c <HAL_DMA_Abort+0x5dc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d072      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a4d      	ldr	r2, [pc, #308]	; (8008b70 <HAL_DMA_Abort+0x5e0>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d06d      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a4c      	ldr	r2, [pc, #304]	; (8008b74 <HAL_DMA_Abort+0x5e4>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d068      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a4a      	ldr	r2, [pc, #296]	; (8008b78 <HAL_DMA_Abort+0x5e8>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d063      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a49      	ldr	r2, [pc, #292]	; (8008b7c <HAL_DMA_Abort+0x5ec>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d05e      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a47      	ldr	r2, [pc, #284]	; (8008b80 <HAL_DMA_Abort+0x5f0>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d059      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a46      	ldr	r2, [pc, #280]	; (8008b84 <HAL_DMA_Abort+0x5f4>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d054      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a44      	ldr	r2, [pc, #272]	; (8008b88 <HAL_DMA_Abort+0x5f8>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d04f      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a43      	ldr	r2, [pc, #268]	; (8008b8c <HAL_DMA_Abort+0x5fc>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d04a      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a41      	ldr	r2, [pc, #260]	; (8008b90 <HAL_DMA_Abort+0x600>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d045      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a40      	ldr	r2, [pc, #256]	; (8008b94 <HAL_DMA_Abort+0x604>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d040      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a3e      	ldr	r2, [pc, #248]	; (8008b98 <HAL_DMA_Abort+0x608>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d03b      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a3d      	ldr	r2, [pc, #244]	; (8008b9c <HAL_DMA_Abort+0x60c>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d036      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a3b      	ldr	r2, [pc, #236]	; (8008ba0 <HAL_DMA_Abort+0x610>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d031      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a3a      	ldr	r2, [pc, #232]	; (8008ba4 <HAL_DMA_Abort+0x614>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d02c      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a38      	ldr	r2, [pc, #224]	; (8008ba8 <HAL_DMA_Abort+0x618>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d027      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a37      	ldr	r2, [pc, #220]	; (8008bac <HAL_DMA_Abort+0x61c>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d022      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a35      	ldr	r2, [pc, #212]	; (8008bb0 <HAL_DMA_Abort+0x620>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d01d      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a34      	ldr	r2, [pc, #208]	; (8008bb4 <HAL_DMA_Abort+0x624>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d018      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a32      	ldr	r2, [pc, #200]	; (8008bb8 <HAL_DMA_Abort+0x628>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d013      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a31      	ldr	r2, [pc, #196]	; (8008bbc <HAL_DMA_Abort+0x62c>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d00e      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a2f      	ldr	r2, [pc, #188]	; (8008bc0 <HAL_DMA_Abort+0x630>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d009      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a2e      	ldr	r2, [pc, #184]	; (8008bc4 <HAL_DMA_Abort+0x634>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d004      	beq.n	8008b1a <HAL_DMA_Abort+0x58a>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a2c      	ldr	r2, [pc, #176]	; (8008bc8 <HAL_DMA_Abort+0x638>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d101      	bne.n	8008b1e <HAL_DMA_Abort+0x58e>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e000      	b.n	8008b20 <HAL_DMA_Abort+0x590>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d015      	beq.n	8008b50 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008b2c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00c      	beq.n	8008b50 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b44:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008b4e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3718      	adds	r7, #24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	40020010 	.word	0x40020010
 8008b70:	40020028 	.word	0x40020028
 8008b74:	40020040 	.word	0x40020040
 8008b78:	40020058 	.word	0x40020058
 8008b7c:	40020070 	.word	0x40020070
 8008b80:	40020088 	.word	0x40020088
 8008b84:	400200a0 	.word	0x400200a0
 8008b88:	400200b8 	.word	0x400200b8
 8008b8c:	40020410 	.word	0x40020410
 8008b90:	40020428 	.word	0x40020428
 8008b94:	40020440 	.word	0x40020440
 8008b98:	40020458 	.word	0x40020458
 8008b9c:	40020470 	.word	0x40020470
 8008ba0:	40020488 	.word	0x40020488
 8008ba4:	400204a0 	.word	0x400204a0
 8008ba8:	400204b8 	.word	0x400204b8
 8008bac:	58025408 	.word	0x58025408
 8008bb0:	5802541c 	.word	0x5802541c
 8008bb4:	58025430 	.word	0x58025430
 8008bb8:	58025444 	.word	0x58025444
 8008bbc:	58025458 	.word	0x58025458
 8008bc0:	5802546c 	.word	0x5802546c
 8008bc4:	58025480 	.word	0x58025480
 8008bc8:	58025494 	.word	0x58025494

08008bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e237      	b.n	800904e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d004      	beq.n	8008bf4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2280      	movs	r2, #128	; 0x80
 8008bee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e22c      	b.n	800904e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a5c      	ldr	r2, [pc, #368]	; (8008d6c <HAL_DMA_Abort_IT+0x1a0>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d04a      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a5b      	ldr	r2, [pc, #364]	; (8008d70 <HAL_DMA_Abort_IT+0x1a4>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d045      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a59      	ldr	r2, [pc, #356]	; (8008d74 <HAL_DMA_Abort_IT+0x1a8>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d040      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a58      	ldr	r2, [pc, #352]	; (8008d78 <HAL_DMA_Abort_IT+0x1ac>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d03b      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a56      	ldr	r2, [pc, #344]	; (8008d7c <HAL_DMA_Abort_IT+0x1b0>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d036      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a55      	ldr	r2, [pc, #340]	; (8008d80 <HAL_DMA_Abort_IT+0x1b4>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d031      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a53      	ldr	r2, [pc, #332]	; (8008d84 <HAL_DMA_Abort_IT+0x1b8>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d02c      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a52      	ldr	r2, [pc, #328]	; (8008d88 <HAL_DMA_Abort_IT+0x1bc>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d027      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a50      	ldr	r2, [pc, #320]	; (8008d8c <HAL_DMA_Abort_IT+0x1c0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d022      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a4f      	ldr	r2, [pc, #316]	; (8008d90 <HAL_DMA_Abort_IT+0x1c4>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d01d      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a4d      	ldr	r2, [pc, #308]	; (8008d94 <HAL_DMA_Abort_IT+0x1c8>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d018      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a4c      	ldr	r2, [pc, #304]	; (8008d98 <HAL_DMA_Abort_IT+0x1cc>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d013      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a4a      	ldr	r2, [pc, #296]	; (8008d9c <HAL_DMA_Abort_IT+0x1d0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d00e      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a49      	ldr	r2, [pc, #292]	; (8008da0 <HAL_DMA_Abort_IT+0x1d4>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d009      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a47      	ldr	r2, [pc, #284]	; (8008da4 <HAL_DMA_Abort_IT+0x1d8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d004      	beq.n	8008c94 <HAL_DMA_Abort_IT+0xc8>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a46      	ldr	r2, [pc, #280]	; (8008da8 <HAL_DMA_Abort_IT+0x1dc>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d101      	bne.n	8008c98 <HAL_DMA_Abort_IT+0xcc>
 8008c94:	2301      	movs	r3, #1
 8008c96:	e000      	b.n	8008c9a <HAL_DMA_Abort_IT+0xce>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 8086 	beq.w	8008dac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2204      	movs	r2, #4
 8008ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a2f      	ldr	r2, [pc, #188]	; (8008d6c <HAL_DMA_Abort_IT+0x1a0>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d04a      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a2e      	ldr	r2, [pc, #184]	; (8008d70 <HAL_DMA_Abort_IT+0x1a4>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d045      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a2c      	ldr	r2, [pc, #176]	; (8008d74 <HAL_DMA_Abort_IT+0x1a8>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d040      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a2b      	ldr	r2, [pc, #172]	; (8008d78 <HAL_DMA_Abort_IT+0x1ac>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d03b      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a29      	ldr	r2, [pc, #164]	; (8008d7c <HAL_DMA_Abort_IT+0x1b0>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d036      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a28      	ldr	r2, [pc, #160]	; (8008d80 <HAL_DMA_Abort_IT+0x1b4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d031      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a26      	ldr	r2, [pc, #152]	; (8008d84 <HAL_DMA_Abort_IT+0x1b8>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d02c      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a25      	ldr	r2, [pc, #148]	; (8008d88 <HAL_DMA_Abort_IT+0x1bc>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d027      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a23      	ldr	r2, [pc, #140]	; (8008d8c <HAL_DMA_Abort_IT+0x1c0>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d022      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a22      	ldr	r2, [pc, #136]	; (8008d90 <HAL_DMA_Abort_IT+0x1c4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d01d      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a20      	ldr	r2, [pc, #128]	; (8008d94 <HAL_DMA_Abort_IT+0x1c8>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d018      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a1f      	ldr	r2, [pc, #124]	; (8008d98 <HAL_DMA_Abort_IT+0x1cc>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d013      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a1d      	ldr	r2, [pc, #116]	; (8008d9c <HAL_DMA_Abort_IT+0x1d0>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00e      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a1c      	ldr	r2, [pc, #112]	; (8008da0 <HAL_DMA_Abort_IT+0x1d4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d009      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a1a      	ldr	r2, [pc, #104]	; (8008da4 <HAL_DMA_Abort_IT+0x1d8>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d004      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x17c>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a19      	ldr	r2, [pc, #100]	; (8008da8 <HAL_DMA_Abort_IT+0x1dc>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d108      	bne.n	8008d5a <HAL_DMA_Abort_IT+0x18e>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 0201 	bic.w	r2, r2, #1
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	e178      	b.n	800904c <HAL_DMA_Abort_IT+0x480>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 0201 	bic.w	r2, r2, #1
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	e16f      	b.n	800904c <HAL_DMA_Abort_IT+0x480>
 8008d6c:	40020010 	.word	0x40020010
 8008d70:	40020028 	.word	0x40020028
 8008d74:	40020040 	.word	0x40020040
 8008d78:	40020058 	.word	0x40020058
 8008d7c:	40020070 	.word	0x40020070
 8008d80:	40020088 	.word	0x40020088
 8008d84:	400200a0 	.word	0x400200a0
 8008d88:	400200b8 	.word	0x400200b8
 8008d8c:	40020410 	.word	0x40020410
 8008d90:	40020428 	.word	0x40020428
 8008d94:	40020440 	.word	0x40020440
 8008d98:	40020458 	.word	0x40020458
 8008d9c:	40020470 	.word	0x40020470
 8008da0:	40020488 	.word	0x40020488
 8008da4:	400204a0 	.word	0x400204a0
 8008da8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 020e 	bic.w	r2, r2, #14
 8008dba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a6c      	ldr	r2, [pc, #432]	; (8008f74 <HAL_DMA_Abort_IT+0x3a8>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d04a      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a6b      	ldr	r2, [pc, #428]	; (8008f78 <HAL_DMA_Abort_IT+0x3ac>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d045      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a69      	ldr	r2, [pc, #420]	; (8008f7c <HAL_DMA_Abort_IT+0x3b0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d040      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a68      	ldr	r2, [pc, #416]	; (8008f80 <HAL_DMA_Abort_IT+0x3b4>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d03b      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a66      	ldr	r2, [pc, #408]	; (8008f84 <HAL_DMA_Abort_IT+0x3b8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d036      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a65      	ldr	r2, [pc, #404]	; (8008f88 <HAL_DMA_Abort_IT+0x3bc>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d031      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a63      	ldr	r2, [pc, #396]	; (8008f8c <HAL_DMA_Abort_IT+0x3c0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d02c      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a62      	ldr	r2, [pc, #392]	; (8008f90 <HAL_DMA_Abort_IT+0x3c4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d027      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a60      	ldr	r2, [pc, #384]	; (8008f94 <HAL_DMA_Abort_IT+0x3c8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d022      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a5f      	ldr	r2, [pc, #380]	; (8008f98 <HAL_DMA_Abort_IT+0x3cc>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d01d      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a5d      	ldr	r2, [pc, #372]	; (8008f9c <HAL_DMA_Abort_IT+0x3d0>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d018      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a5c      	ldr	r2, [pc, #368]	; (8008fa0 <HAL_DMA_Abort_IT+0x3d4>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d013      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a5a      	ldr	r2, [pc, #360]	; (8008fa4 <HAL_DMA_Abort_IT+0x3d8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d00e      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a59      	ldr	r2, [pc, #356]	; (8008fa8 <HAL_DMA_Abort_IT+0x3dc>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d009      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a57      	ldr	r2, [pc, #348]	; (8008fac <HAL_DMA_Abort_IT+0x3e0>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d004      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x290>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a56      	ldr	r2, [pc, #344]	; (8008fb0 <HAL_DMA_Abort_IT+0x3e4>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d108      	bne.n	8008e6e <HAL_DMA_Abort_IT+0x2a2>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f022 0201 	bic.w	r2, r2, #1
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	e007      	b.n	8008e7e <HAL_DMA_Abort_IT+0x2b2>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f022 0201 	bic.w	r2, r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a3c      	ldr	r2, [pc, #240]	; (8008f74 <HAL_DMA_Abort_IT+0x3a8>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d072      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a3a      	ldr	r2, [pc, #232]	; (8008f78 <HAL_DMA_Abort_IT+0x3ac>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d06d      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a39      	ldr	r2, [pc, #228]	; (8008f7c <HAL_DMA_Abort_IT+0x3b0>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d068      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a37      	ldr	r2, [pc, #220]	; (8008f80 <HAL_DMA_Abort_IT+0x3b4>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d063      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a36      	ldr	r2, [pc, #216]	; (8008f84 <HAL_DMA_Abort_IT+0x3b8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d05e      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a34      	ldr	r2, [pc, #208]	; (8008f88 <HAL_DMA_Abort_IT+0x3bc>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d059      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a33      	ldr	r2, [pc, #204]	; (8008f8c <HAL_DMA_Abort_IT+0x3c0>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d054      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a31      	ldr	r2, [pc, #196]	; (8008f90 <HAL_DMA_Abort_IT+0x3c4>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d04f      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a30      	ldr	r2, [pc, #192]	; (8008f94 <HAL_DMA_Abort_IT+0x3c8>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d04a      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a2e      	ldr	r2, [pc, #184]	; (8008f98 <HAL_DMA_Abort_IT+0x3cc>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d045      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a2d      	ldr	r2, [pc, #180]	; (8008f9c <HAL_DMA_Abort_IT+0x3d0>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d040      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a2b      	ldr	r2, [pc, #172]	; (8008fa0 <HAL_DMA_Abort_IT+0x3d4>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d03b      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a2a      	ldr	r2, [pc, #168]	; (8008fa4 <HAL_DMA_Abort_IT+0x3d8>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d036      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a28      	ldr	r2, [pc, #160]	; (8008fa8 <HAL_DMA_Abort_IT+0x3dc>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d031      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a27      	ldr	r2, [pc, #156]	; (8008fac <HAL_DMA_Abort_IT+0x3e0>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d02c      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a25      	ldr	r2, [pc, #148]	; (8008fb0 <HAL_DMA_Abort_IT+0x3e4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d027      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a24      	ldr	r2, [pc, #144]	; (8008fb4 <HAL_DMA_Abort_IT+0x3e8>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d022      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a22      	ldr	r2, [pc, #136]	; (8008fb8 <HAL_DMA_Abort_IT+0x3ec>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d01d      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a21      	ldr	r2, [pc, #132]	; (8008fbc <HAL_DMA_Abort_IT+0x3f0>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d018      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a1f      	ldr	r2, [pc, #124]	; (8008fc0 <HAL_DMA_Abort_IT+0x3f4>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d013      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a1e      	ldr	r2, [pc, #120]	; (8008fc4 <HAL_DMA_Abort_IT+0x3f8>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d00e      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a1c      	ldr	r2, [pc, #112]	; (8008fc8 <HAL_DMA_Abort_IT+0x3fc>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d009      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a1b      	ldr	r2, [pc, #108]	; (8008fcc <HAL_DMA_Abort_IT+0x400>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d004      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x3a2>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a19      	ldr	r2, [pc, #100]	; (8008fd0 <HAL_DMA_Abort_IT+0x404>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d132      	bne.n	8008fd4 <HAL_DMA_Abort_IT+0x408>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e031      	b.n	8008fd6 <HAL_DMA_Abort_IT+0x40a>
 8008f72:	bf00      	nop
 8008f74:	40020010 	.word	0x40020010
 8008f78:	40020028 	.word	0x40020028
 8008f7c:	40020040 	.word	0x40020040
 8008f80:	40020058 	.word	0x40020058
 8008f84:	40020070 	.word	0x40020070
 8008f88:	40020088 	.word	0x40020088
 8008f8c:	400200a0 	.word	0x400200a0
 8008f90:	400200b8 	.word	0x400200b8
 8008f94:	40020410 	.word	0x40020410
 8008f98:	40020428 	.word	0x40020428
 8008f9c:	40020440 	.word	0x40020440
 8008fa0:	40020458 	.word	0x40020458
 8008fa4:	40020470 	.word	0x40020470
 8008fa8:	40020488 	.word	0x40020488
 8008fac:	400204a0 	.word	0x400204a0
 8008fb0:	400204b8 	.word	0x400204b8
 8008fb4:	58025408 	.word	0x58025408
 8008fb8:	5802541c 	.word	0x5802541c
 8008fbc:	58025430 	.word	0x58025430
 8008fc0:	58025444 	.word	0x58025444
 8008fc4:	58025458 	.word	0x58025458
 8008fc8:	5802546c 	.word	0x5802546c
 8008fcc:	58025480 	.word	0x58025480
 8008fd0:	58025494 	.word	0x58025494
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d028      	beq.n	800902c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fe8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ff4:	f003 031f 	and.w	r3, r3, #31
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	409a      	lsls	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009008:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00c      	beq.n	800902c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800901c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009020:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800902a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009040:	2b00      	cmp	r3, #0
 8009042:	d003      	beq.n	800904c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop

08009058 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b08a      	sub	sp, #40	; 0x28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009064:	4b67      	ldr	r3, [pc, #412]	; (8009204 <HAL_DMA_IRQHandler+0x1ac>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a67      	ldr	r2, [pc, #412]	; (8009208 <HAL_DMA_IRQHandler+0x1b0>)
 800906a:	fba2 2303 	umull	r2, r3, r2, r3
 800906e:	0a9b      	lsrs	r3, r3, #10
 8009070:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009076:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800907c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a5f      	ldr	r2, [pc, #380]	; (800920c <HAL_DMA_IRQHandler+0x1b4>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d04a      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a5d      	ldr	r2, [pc, #372]	; (8009210 <HAL_DMA_IRQHandler+0x1b8>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d045      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a5c      	ldr	r2, [pc, #368]	; (8009214 <HAL_DMA_IRQHandler+0x1bc>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d040      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a5a      	ldr	r2, [pc, #360]	; (8009218 <HAL_DMA_IRQHandler+0x1c0>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d03b      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a59      	ldr	r2, [pc, #356]	; (800921c <HAL_DMA_IRQHandler+0x1c4>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d036      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a57      	ldr	r2, [pc, #348]	; (8009220 <HAL_DMA_IRQHandler+0x1c8>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d031      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a56      	ldr	r2, [pc, #344]	; (8009224 <HAL_DMA_IRQHandler+0x1cc>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d02c      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a54      	ldr	r2, [pc, #336]	; (8009228 <HAL_DMA_IRQHandler+0x1d0>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d027      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a53      	ldr	r2, [pc, #332]	; (800922c <HAL_DMA_IRQHandler+0x1d4>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d022      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a51      	ldr	r2, [pc, #324]	; (8009230 <HAL_DMA_IRQHandler+0x1d8>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d01d      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a50      	ldr	r2, [pc, #320]	; (8009234 <HAL_DMA_IRQHandler+0x1dc>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d018      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a4e      	ldr	r2, [pc, #312]	; (8009238 <HAL_DMA_IRQHandler+0x1e0>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d013      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a4d      	ldr	r2, [pc, #308]	; (800923c <HAL_DMA_IRQHandler+0x1e4>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d00e      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a4b      	ldr	r2, [pc, #300]	; (8009240 <HAL_DMA_IRQHandler+0x1e8>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d009      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a4a      	ldr	r2, [pc, #296]	; (8009244 <HAL_DMA_IRQHandler+0x1ec>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d004      	beq.n	800912a <HAL_DMA_IRQHandler+0xd2>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a48      	ldr	r2, [pc, #288]	; (8009248 <HAL_DMA_IRQHandler+0x1f0>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d101      	bne.n	800912e <HAL_DMA_IRQHandler+0xd6>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <HAL_DMA_IRQHandler+0xd8>
 800912e:	2300      	movs	r3, #0
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 842b 	beq.w	800998c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800913a:	f003 031f 	and.w	r3, r3, #31
 800913e:	2208      	movs	r2, #8
 8009140:	409a      	lsls	r2, r3
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	4013      	ands	r3, r2
 8009146:	2b00      	cmp	r3, #0
 8009148:	f000 80a2 	beq.w	8009290 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a2e      	ldr	r2, [pc, #184]	; (800920c <HAL_DMA_IRQHandler+0x1b4>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d04a      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a2d      	ldr	r2, [pc, #180]	; (8009210 <HAL_DMA_IRQHandler+0x1b8>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d045      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a2b      	ldr	r2, [pc, #172]	; (8009214 <HAL_DMA_IRQHandler+0x1bc>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d040      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a2a      	ldr	r2, [pc, #168]	; (8009218 <HAL_DMA_IRQHandler+0x1c0>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d03b      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a28      	ldr	r2, [pc, #160]	; (800921c <HAL_DMA_IRQHandler+0x1c4>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d036      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a27      	ldr	r2, [pc, #156]	; (8009220 <HAL_DMA_IRQHandler+0x1c8>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d031      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a25      	ldr	r2, [pc, #148]	; (8009224 <HAL_DMA_IRQHandler+0x1cc>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d02c      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a24      	ldr	r2, [pc, #144]	; (8009228 <HAL_DMA_IRQHandler+0x1d0>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d027      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a22      	ldr	r2, [pc, #136]	; (800922c <HAL_DMA_IRQHandler+0x1d4>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d022      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a21      	ldr	r2, [pc, #132]	; (8009230 <HAL_DMA_IRQHandler+0x1d8>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d01d      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a1f      	ldr	r2, [pc, #124]	; (8009234 <HAL_DMA_IRQHandler+0x1dc>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d018      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a1e      	ldr	r2, [pc, #120]	; (8009238 <HAL_DMA_IRQHandler+0x1e0>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d013      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a1c      	ldr	r2, [pc, #112]	; (800923c <HAL_DMA_IRQHandler+0x1e4>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d00e      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a1b      	ldr	r2, [pc, #108]	; (8009240 <HAL_DMA_IRQHandler+0x1e8>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d009      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a19      	ldr	r2, [pc, #100]	; (8009244 <HAL_DMA_IRQHandler+0x1ec>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d004      	beq.n	80091ec <HAL_DMA_IRQHandler+0x194>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a18      	ldr	r2, [pc, #96]	; (8009248 <HAL_DMA_IRQHandler+0x1f0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d12f      	bne.n	800924c <HAL_DMA_IRQHandler+0x1f4>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0304 	and.w	r3, r3, #4
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	bf14      	ite	ne
 80091fa:	2301      	movne	r3, #1
 80091fc:	2300      	moveq	r3, #0
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	e02e      	b.n	8009260 <HAL_DMA_IRQHandler+0x208>
 8009202:	bf00      	nop
 8009204:	24000090 	.word	0x24000090
 8009208:	1b4e81b5 	.word	0x1b4e81b5
 800920c:	40020010 	.word	0x40020010
 8009210:	40020028 	.word	0x40020028
 8009214:	40020040 	.word	0x40020040
 8009218:	40020058 	.word	0x40020058
 800921c:	40020070 	.word	0x40020070
 8009220:	40020088 	.word	0x40020088
 8009224:	400200a0 	.word	0x400200a0
 8009228:	400200b8 	.word	0x400200b8
 800922c:	40020410 	.word	0x40020410
 8009230:	40020428 	.word	0x40020428
 8009234:	40020440 	.word	0x40020440
 8009238:	40020458 	.word	0x40020458
 800923c:	40020470 	.word	0x40020470
 8009240:	40020488 	.word	0x40020488
 8009244:	400204a0 	.word	0x400204a0
 8009248:	400204b8 	.word	0x400204b8
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0308 	and.w	r3, r3, #8
 8009256:	2b00      	cmp	r3, #0
 8009258:	bf14      	ite	ne
 800925a:	2301      	movne	r3, #1
 800925c:	2300      	moveq	r3, #0
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b00      	cmp	r3, #0
 8009262:	d015      	beq.n	8009290 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f022 0204 	bic.w	r2, r2, #4
 8009272:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009278:	f003 031f 	and.w	r3, r3, #31
 800927c:	2208      	movs	r2, #8
 800927e:	409a      	lsls	r2, r3
 8009280:	6a3b      	ldr	r3, [r7, #32]
 8009282:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009288:	f043 0201 	orr.w	r2, r3, #1
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009294:	f003 031f 	and.w	r3, r3, #31
 8009298:	69ba      	ldr	r2, [r7, #24]
 800929a:	fa22 f303 	lsr.w	r3, r2, r3
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d06e      	beq.n	8009384 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a69      	ldr	r2, [pc, #420]	; (8009450 <HAL_DMA_IRQHandler+0x3f8>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d04a      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a67      	ldr	r2, [pc, #412]	; (8009454 <HAL_DMA_IRQHandler+0x3fc>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d045      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a66      	ldr	r2, [pc, #408]	; (8009458 <HAL_DMA_IRQHandler+0x400>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d040      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a64      	ldr	r2, [pc, #400]	; (800945c <HAL_DMA_IRQHandler+0x404>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d03b      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a63      	ldr	r2, [pc, #396]	; (8009460 <HAL_DMA_IRQHandler+0x408>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d036      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a61      	ldr	r2, [pc, #388]	; (8009464 <HAL_DMA_IRQHandler+0x40c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d031      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a60      	ldr	r2, [pc, #384]	; (8009468 <HAL_DMA_IRQHandler+0x410>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d02c      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a5e      	ldr	r2, [pc, #376]	; (800946c <HAL_DMA_IRQHandler+0x414>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d027      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a5d      	ldr	r2, [pc, #372]	; (8009470 <HAL_DMA_IRQHandler+0x418>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d022      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a5b      	ldr	r2, [pc, #364]	; (8009474 <HAL_DMA_IRQHandler+0x41c>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d01d      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a5a      	ldr	r2, [pc, #360]	; (8009478 <HAL_DMA_IRQHandler+0x420>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d018      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a58      	ldr	r2, [pc, #352]	; (800947c <HAL_DMA_IRQHandler+0x424>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d013      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a57      	ldr	r2, [pc, #348]	; (8009480 <HAL_DMA_IRQHandler+0x428>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d00e      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a55      	ldr	r2, [pc, #340]	; (8009484 <HAL_DMA_IRQHandler+0x42c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d009      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a54      	ldr	r2, [pc, #336]	; (8009488 <HAL_DMA_IRQHandler+0x430>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d004      	beq.n	8009346 <HAL_DMA_IRQHandler+0x2ee>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a52      	ldr	r2, [pc, #328]	; (800948c <HAL_DMA_IRQHandler+0x434>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d10a      	bne.n	800935c <HAL_DMA_IRQHandler+0x304>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009350:	2b00      	cmp	r3, #0
 8009352:	bf14      	ite	ne
 8009354:	2301      	movne	r3, #1
 8009356:	2300      	moveq	r3, #0
 8009358:	b2db      	uxtb	r3, r3
 800935a:	e003      	b.n	8009364 <HAL_DMA_IRQHandler+0x30c>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2300      	movs	r3, #0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00d      	beq.n	8009384 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800936c:	f003 031f 	and.w	r3, r3, #31
 8009370:	2201      	movs	r2, #1
 8009372:	409a      	lsls	r2, r3
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937c:	f043 0202 	orr.w	r2, r3, #2
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009388:	f003 031f 	and.w	r3, r3, #31
 800938c:	2204      	movs	r2, #4
 800938e:	409a      	lsls	r2, r3
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	4013      	ands	r3, r2
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 808f 	beq.w	80094b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a2c      	ldr	r2, [pc, #176]	; (8009450 <HAL_DMA_IRQHandler+0x3f8>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d04a      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a2a      	ldr	r2, [pc, #168]	; (8009454 <HAL_DMA_IRQHandler+0x3fc>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d045      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a29      	ldr	r2, [pc, #164]	; (8009458 <HAL_DMA_IRQHandler+0x400>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d040      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a27      	ldr	r2, [pc, #156]	; (800945c <HAL_DMA_IRQHandler+0x404>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d03b      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a26      	ldr	r2, [pc, #152]	; (8009460 <HAL_DMA_IRQHandler+0x408>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d036      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a24      	ldr	r2, [pc, #144]	; (8009464 <HAL_DMA_IRQHandler+0x40c>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d031      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a23      	ldr	r2, [pc, #140]	; (8009468 <HAL_DMA_IRQHandler+0x410>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d02c      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a21      	ldr	r2, [pc, #132]	; (800946c <HAL_DMA_IRQHandler+0x414>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d027      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a20      	ldr	r2, [pc, #128]	; (8009470 <HAL_DMA_IRQHandler+0x418>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d022      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a1e      	ldr	r2, [pc, #120]	; (8009474 <HAL_DMA_IRQHandler+0x41c>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d01d      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a1d      	ldr	r2, [pc, #116]	; (8009478 <HAL_DMA_IRQHandler+0x420>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d018      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a1b      	ldr	r2, [pc, #108]	; (800947c <HAL_DMA_IRQHandler+0x424>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d013      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a1a      	ldr	r2, [pc, #104]	; (8009480 <HAL_DMA_IRQHandler+0x428>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00e      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a18      	ldr	r2, [pc, #96]	; (8009484 <HAL_DMA_IRQHandler+0x42c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d009      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a17      	ldr	r2, [pc, #92]	; (8009488 <HAL_DMA_IRQHandler+0x430>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d004      	beq.n	800943a <HAL_DMA_IRQHandler+0x3e2>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a15      	ldr	r2, [pc, #84]	; (800948c <HAL_DMA_IRQHandler+0x434>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d12a      	bne.n	8009490 <HAL_DMA_IRQHandler+0x438>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0302 	and.w	r3, r3, #2
 8009444:	2b00      	cmp	r3, #0
 8009446:	bf14      	ite	ne
 8009448:	2301      	movne	r3, #1
 800944a:	2300      	moveq	r3, #0
 800944c:	b2db      	uxtb	r3, r3
 800944e:	e023      	b.n	8009498 <HAL_DMA_IRQHandler+0x440>
 8009450:	40020010 	.word	0x40020010
 8009454:	40020028 	.word	0x40020028
 8009458:	40020040 	.word	0x40020040
 800945c:	40020058 	.word	0x40020058
 8009460:	40020070 	.word	0x40020070
 8009464:	40020088 	.word	0x40020088
 8009468:	400200a0 	.word	0x400200a0
 800946c:	400200b8 	.word	0x400200b8
 8009470:	40020410 	.word	0x40020410
 8009474:	40020428 	.word	0x40020428
 8009478:	40020440 	.word	0x40020440
 800947c:	40020458 	.word	0x40020458
 8009480:	40020470 	.word	0x40020470
 8009484:	40020488 	.word	0x40020488
 8009488:	400204a0 	.word	0x400204a0
 800948c:	400204b8 	.word	0x400204b8
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2300      	movs	r3, #0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00d      	beq.n	80094b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094a0:	f003 031f 	and.w	r3, r3, #31
 80094a4:	2204      	movs	r2, #4
 80094a6:	409a      	lsls	r2, r3
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b0:	f043 0204 	orr.w	r2, r3, #4
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094bc:	f003 031f 	and.w	r3, r3, #31
 80094c0:	2210      	movs	r2, #16
 80094c2:	409a      	lsls	r2, r3
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	4013      	ands	r3, r2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 80a6 	beq.w	800961a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a85      	ldr	r2, [pc, #532]	; (80096e8 <HAL_DMA_IRQHandler+0x690>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d04a      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a83      	ldr	r2, [pc, #524]	; (80096ec <HAL_DMA_IRQHandler+0x694>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d045      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a82      	ldr	r2, [pc, #520]	; (80096f0 <HAL_DMA_IRQHandler+0x698>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d040      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a80      	ldr	r2, [pc, #512]	; (80096f4 <HAL_DMA_IRQHandler+0x69c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d03b      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a7f      	ldr	r2, [pc, #508]	; (80096f8 <HAL_DMA_IRQHandler+0x6a0>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d036      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a7d      	ldr	r2, [pc, #500]	; (80096fc <HAL_DMA_IRQHandler+0x6a4>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d031      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a7c      	ldr	r2, [pc, #496]	; (8009700 <HAL_DMA_IRQHandler+0x6a8>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d02c      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a7a      	ldr	r2, [pc, #488]	; (8009704 <HAL_DMA_IRQHandler+0x6ac>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d027      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a79      	ldr	r2, [pc, #484]	; (8009708 <HAL_DMA_IRQHandler+0x6b0>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d022      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a77      	ldr	r2, [pc, #476]	; (800970c <HAL_DMA_IRQHandler+0x6b4>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d01d      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a76      	ldr	r2, [pc, #472]	; (8009710 <HAL_DMA_IRQHandler+0x6b8>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d018      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a74      	ldr	r2, [pc, #464]	; (8009714 <HAL_DMA_IRQHandler+0x6bc>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d013      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a73      	ldr	r2, [pc, #460]	; (8009718 <HAL_DMA_IRQHandler+0x6c0>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d00e      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a71      	ldr	r2, [pc, #452]	; (800971c <HAL_DMA_IRQHandler+0x6c4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d009      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a70      	ldr	r2, [pc, #448]	; (8009720 <HAL_DMA_IRQHandler+0x6c8>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d004      	beq.n	800956e <HAL_DMA_IRQHandler+0x516>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a6e      	ldr	r2, [pc, #440]	; (8009724 <HAL_DMA_IRQHandler+0x6cc>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d10a      	bne.n	8009584 <HAL_DMA_IRQHandler+0x52c>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0308 	and.w	r3, r3, #8
 8009578:	2b00      	cmp	r3, #0
 800957a:	bf14      	ite	ne
 800957c:	2301      	movne	r3, #1
 800957e:	2300      	moveq	r3, #0
 8009580:	b2db      	uxtb	r3, r3
 8009582:	e009      	b.n	8009598 <HAL_DMA_IRQHandler+0x540>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0304 	and.w	r3, r3, #4
 800958e:	2b00      	cmp	r3, #0
 8009590:	bf14      	ite	ne
 8009592:	2301      	movne	r3, #1
 8009594:	2300      	moveq	r3, #0
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	d03e      	beq.n	800961a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a0:	f003 031f 	and.w	r3, r3, #31
 80095a4:	2210      	movs	r2, #16
 80095a6:	409a      	lsls	r2, r3
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d018      	beq.n	80095ec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d108      	bne.n	80095da <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d024      	beq.n	800961a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	4798      	blx	r3
 80095d8:	e01f      	b.n	800961a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d01b      	beq.n	800961a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	4798      	blx	r3
 80095ea:	e016      	b.n	800961a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d107      	bne.n	800960a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0208 	bic.w	r2, r2, #8
 8009608:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800961e:	f003 031f 	and.w	r3, r3, #31
 8009622:	2220      	movs	r2, #32
 8009624:	409a      	lsls	r2, r3
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	4013      	ands	r3, r2
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 8110 	beq.w	8009850 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a2c      	ldr	r2, [pc, #176]	; (80096e8 <HAL_DMA_IRQHandler+0x690>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d04a      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a2b      	ldr	r2, [pc, #172]	; (80096ec <HAL_DMA_IRQHandler+0x694>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d045      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a29      	ldr	r2, [pc, #164]	; (80096f0 <HAL_DMA_IRQHandler+0x698>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d040      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a28      	ldr	r2, [pc, #160]	; (80096f4 <HAL_DMA_IRQHandler+0x69c>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d03b      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a26      	ldr	r2, [pc, #152]	; (80096f8 <HAL_DMA_IRQHandler+0x6a0>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d036      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a25      	ldr	r2, [pc, #148]	; (80096fc <HAL_DMA_IRQHandler+0x6a4>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d031      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a23      	ldr	r2, [pc, #140]	; (8009700 <HAL_DMA_IRQHandler+0x6a8>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d02c      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a22      	ldr	r2, [pc, #136]	; (8009704 <HAL_DMA_IRQHandler+0x6ac>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d027      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a20      	ldr	r2, [pc, #128]	; (8009708 <HAL_DMA_IRQHandler+0x6b0>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d022      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a1f      	ldr	r2, [pc, #124]	; (800970c <HAL_DMA_IRQHandler+0x6b4>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d01d      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a1d      	ldr	r2, [pc, #116]	; (8009710 <HAL_DMA_IRQHandler+0x6b8>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d018      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a1c      	ldr	r2, [pc, #112]	; (8009714 <HAL_DMA_IRQHandler+0x6bc>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d013      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a1a      	ldr	r2, [pc, #104]	; (8009718 <HAL_DMA_IRQHandler+0x6c0>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00e      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a19      	ldr	r2, [pc, #100]	; (800971c <HAL_DMA_IRQHandler+0x6c4>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d009      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a17      	ldr	r2, [pc, #92]	; (8009720 <HAL_DMA_IRQHandler+0x6c8>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d004      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x678>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a16      	ldr	r2, [pc, #88]	; (8009724 <HAL_DMA_IRQHandler+0x6cc>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d12b      	bne.n	8009728 <HAL_DMA_IRQHandler+0x6d0>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 0310 	and.w	r3, r3, #16
 80096da:	2b00      	cmp	r3, #0
 80096dc:	bf14      	ite	ne
 80096de:	2301      	movne	r3, #1
 80096e0:	2300      	moveq	r3, #0
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	e02a      	b.n	800973c <HAL_DMA_IRQHandler+0x6e4>
 80096e6:	bf00      	nop
 80096e8:	40020010 	.word	0x40020010
 80096ec:	40020028 	.word	0x40020028
 80096f0:	40020040 	.word	0x40020040
 80096f4:	40020058 	.word	0x40020058
 80096f8:	40020070 	.word	0x40020070
 80096fc:	40020088 	.word	0x40020088
 8009700:	400200a0 	.word	0x400200a0
 8009704:	400200b8 	.word	0x400200b8
 8009708:	40020410 	.word	0x40020410
 800970c:	40020428 	.word	0x40020428
 8009710:	40020440 	.word	0x40020440
 8009714:	40020458 	.word	0x40020458
 8009718:	40020470 	.word	0x40020470
 800971c:	40020488 	.word	0x40020488
 8009720:	400204a0 	.word	0x400204a0
 8009724:	400204b8 	.word	0x400204b8
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0302 	and.w	r3, r3, #2
 8009732:	2b00      	cmp	r3, #0
 8009734:	bf14      	ite	ne
 8009736:	2301      	movne	r3, #1
 8009738:	2300      	moveq	r3, #0
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8087 	beq.w	8009850 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009746:	f003 031f 	and.w	r3, r3, #31
 800974a:	2220      	movs	r2, #32
 800974c:	409a      	lsls	r2, r3
 800974e:	6a3b      	ldr	r3, [r7, #32]
 8009750:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b04      	cmp	r3, #4
 800975c:	d139      	bne.n	80097d2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f022 0216 	bic.w	r2, r2, #22
 800976c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	695a      	ldr	r2, [r3, #20]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800977c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009782:	2b00      	cmp	r3, #0
 8009784:	d103      	bne.n	800978e <HAL_DMA_IRQHandler+0x736>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800978a:	2b00      	cmp	r3, #0
 800978c:	d007      	beq.n	800979e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f022 0208 	bic.w	r2, r2, #8
 800979c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097a2:	f003 031f 	and.w	r3, r3, #31
 80097a6:	223f      	movs	r2, #63	; 0x3f
 80097a8:	409a      	lsls	r2, r3
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 834a 	beq.w	8009e5c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	4798      	blx	r3
          }
          return;
 80097d0:	e344      	b.n	8009e5c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d018      	beq.n	8009812 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d108      	bne.n	8009800 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d02c      	beq.n	8009850 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	4798      	blx	r3
 80097fe:	e027      	b.n	8009850 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009804:	2b00      	cmp	r3, #0
 8009806:	d023      	beq.n	8009850 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
 8009810:	e01e      	b.n	8009850 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10f      	bne.n	8009840 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f022 0210 	bic.w	r2, r2, #16
 800982e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 8306 	beq.w	8009e66 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 8088 	beq.w	8009978 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2204      	movs	r2, #4
 800986c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a7a      	ldr	r2, [pc, #488]	; (8009a60 <HAL_DMA_IRQHandler+0xa08>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d04a      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a79      	ldr	r2, [pc, #484]	; (8009a64 <HAL_DMA_IRQHandler+0xa0c>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d045      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a77      	ldr	r2, [pc, #476]	; (8009a68 <HAL_DMA_IRQHandler+0xa10>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d040      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a76      	ldr	r2, [pc, #472]	; (8009a6c <HAL_DMA_IRQHandler+0xa14>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d03b      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a74      	ldr	r2, [pc, #464]	; (8009a70 <HAL_DMA_IRQHandler+0xa18>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d036      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a73      	ldr	r2, [pc, #460]	; (8009a74 <HAL_DMA_IRQHandler+0xa1c>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d031      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a71      	ldr	r2, [pc, #452]	; (8009a78 <HAL_DMA_IRQHandler+0xa20>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d02c      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a70      	ldr	r2, [pc, #448]	; (8009a7c <HAL_DMA_IRQHandler+0xa24>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d027      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a6e      	ldr	r2, [pc, #440]	; (8009a80 <HAL_DMA_IRQHandler+0xa28>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d022      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a6d      	ldr	r2, [pc, #436]	; (8009a84 <HAL_DMA_IRQHandler+0xa2c>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d01d      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a6b      	ldr	r2, [pc, #428]	; (8009a88 <HAL_DMA_IRQHandler+0xa30>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d018      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a6a      	ldr	r2, [pc, #424]	; (8009a8c <HAL_DMA_IRQHandler+0xa34>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d013      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a68      	ldr	r2, [pc, #416]	; (8009a90 <HAL_DMA_IRQHandler+0xa38>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d00e      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a67      	ldr	r2, [pc, #412]	; (8009a94 <HAL_DMA_IRQHandler+0xa3c>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d009      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a65      	ldr	r2, [pc, #404]	; (8009a98 <HAL_DMA_IRQHandler+0xa40>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d004      	beq.n	8009910 <HAL_DMA_IRQHandler+0x8b8>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a64      	ldr	r2, [pc, #400]	; (8009a9c <HAL_DMA_IRQHandler+0xa44>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d108      	bne.n	8009922 <HAL_DMA_IRQHandler+0x8ca>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f022 0201 	bic.w	r2, r2, #1
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	e007      	b.n	8009932 <HAL_DMA_IRQHandler+0x8da>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f022 0201 	bic.w	r2, r2, #1
 8009930:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3301      	adds	r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993a:	429a      	cmp	r2, r3
 800993c:	d307      	bcc.n	800994e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0301 	and.w	r3, r3, #1
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1f2      	bne.n	8009932 <HAL_DMA_IRQHandler+0x8da>
 800994c:	e000      	b.n	8009950 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800994e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d004      	beq.n	8009968 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2203      	movs	r2, #3
 8009962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009966:	e003      	b.n	8009970 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800997c:	2b00      	cmp	r3, #0
 800997e:	f000 8272 	beq.w	8009e66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	4798      	blx	r3
 800998a:	e26c      	b.n	8009e66 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a43      	ldr	r2, [pc, #268]	; (8009aa0 <HAL_DMA_IRQHandler+0xa48>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d022      	beq.n	80099dc <HAL_DMA_IRQHandler+0x984>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a42      	ldr	r2, [pc, #264]	; (8009aa4 <HAL_DMA_IRQHandler+0xa4c>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d01d      	beq.n	80099dc <HAL_DMA_IRQHandler+0x984>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a40      	ldr	r2, [pc, #256]	; (8009aa8 <HAL_DMA_IRQHandler+0xa50>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d018      	beq.n	80099dc <HAL_DMA_IRQHandler+0x984>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a3f      	ldr	r2, [pc, #252]	; (8009aac <HAL_DMA_IRQHandler+0xa54>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d013      	beq.n	80099dc <HAL_DMA_IRQHandler+0x984>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a3d      	ldr	r2, [pc, #244]	; (8009ab0 <HAL_DMA_IRQHandler+0xa58>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d00e      	beq.n	80099dc <HAL_DMA_IRQHandler+0x984>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a3c      	ldr	r2, [pc, #240]	; (8009ab4 <HAL_DMA_IRQHandler+0xa5c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d009      	beq.n	80099dc <HAL_DMA_IRQHandler+0x984>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a3a      	ldr	r2, [pc, #232]	; (8009ab8 <HAL_DMA_IRQHandler+0xa60>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d004      	beq.n	80099dc <HAL_DMA_IRQHandler+0x984>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a39      	ldr	r2, [pc, #228]	; (8009abc <HAL_DMA_IRQHandler+0xa64>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d101      	bne.n	80099e0 <HAL_DMA_IRQHandler+0x988>
 80099dc:	2301      	movs	r3, #1
 80099de:	e000      	b.n	80099e2 <HAL_DMA_IRQHandler+0x98a>
 80099e0:	2300      	movs	r3, #0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f000 823f 	beq.w	8009e66 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099f4:	f003 031f 	and.w	r3, r3, #31
 80099f8:	2204      	movs	r2, #4
 80099fa:	409a      	lsls	r2, r3
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	4013      	ands	r3, r2
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 80cd 	beq.w	8009ba0 <HAL_DMA_IRQHandler+0xb48>
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 80c7 	beq.w	8009ba0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a16:	f003 031f 	and.w	r3, r3, #31
 8009a1a:	2204      	movs	r2, #4
 8009a1c:	409a      	lsls	r2, r3
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d049      	beq.n	8009ac0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d109      	bne.n	8009a4a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 8210 	beq.w	8009e60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a48:	e20a      	b.n	8009e60 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 8206 	beq.w	8009e60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a5c:	e200      	b.n	8009e60 <HAL_DMA_IRQHandler+0xe08>
 8009a5e:	bf00      	nop
 8009a60:	40020010 	.word	0x40020010
 8009a64:	40020028 	.word	0x40020028
 8009a68:	40020040 	.word	0x40020040
 8009a6c:	40020058 	.word	0x40020058
 8009a70:	40020070 	.word	0x40020070
 8009a74:	40020088 	.word	0x40020088
 8009a78:	400200a0 	.word	0x400200a0
 8009a7c:	400200b8 	.word	0x400200b8
 8009a80:	40020410 	.word	0x40020410
 8009a84:	40020428 	.word	0x40020428
 8009a88:	40020440 	.word	0x40020440
 8009a8c:	40020458 	.word	0x40020458
 8009a90:	40020470 	.word	0x40020470
 8009a94:	40020488 	.word	0x40020488
 8009a98:	400204a0 	.word	0x400204a0
 8009a9c:	400204b8 	.word	0x400204b8
 8009aa0:	58025408 	.word	0x58025408
 8009aa4:	5802541c 	.word	0x5802541c
 8009aa8:	58025430 	.word	0x58025430
 8009aac:	58025444 	.word	0x58025444
 8009ab0:	58025458 	.word	0x58025458
 8009ab4:	5802546c 	.word	0x5802546c
 8009ab8:	58025480 	.word	0x58025480
 8009abc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f003 0320 	and.w	r3, r3, #32
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d160      	bne.n	8009b8c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a7f      	ldr	r2, [pc, #508]	; (8009ccc <HAL_DMA_IRQHandler+0xc74>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d04a      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a7d      	ldr	r2, [pc, #500]	; (8009cd0 <HAL_DMA_IRQHandler+0xc78>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d045      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a7c      	ldr	r2, [pc, #496]	; (8009cd4 <HAL_DMA_IRQHandler+0xc7c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d040      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a7a      	ldr	r2, [pc, #488]	; (8009cd8 <HAL_DMA_IRQHandler+0xc80>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d03b      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a79      	ldr	r2, [pc, #484]	; (8009cdc <HAL_DMA_IRQHandler+0xc84>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d036      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a77      	ldr	r2, [pc, #476]	; (8009ce0 <HAL_DMA_IRQHandler+0xc88>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d031      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a76      	ldr	r2, [pc, #472]	; (8009ce4 <HAL_DMA_IRQHandler+0xc8c>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d02c      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a74      	ldr	r2, [pc, #464]	; (8009ce8 <HAL_DMA_IRQHandler+0xc90>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d027      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a73      	ldr	r2, [pc, #460]	; (8009cec <HAL_DMA_IRQHandler+0xc94>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d022      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a71      	ldr	r2, [pc, #452]	; (8009cf0 <HAL_DMA_IRQHandler+0xc98>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d01d      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a70      	ldr	r2, [pc, #448]	; (8009cf4 <HAL_DMA_IRQHandler+0xc9c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d018      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a6e      	ldr	r2, [pc, #440]	; (8009cf8 <HAL_DMA_IRQHandler+0xca0>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d013      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a6d      	ldr	r2, [pc, #436]	; (8009cfc <HAL_DMA_IRQHandler+0xca4>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d00e      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a6b      	ldr	r2, [pc, #428]	; (8009d00 <HAL_DMA_IRQHandler+0xca8>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d009      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a6a      	ldr	r2, [pc, #424]	; (8009d04 <HAL_DMA_IRQHandler+0xcac>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d004      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xb12>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a68      	ldr	r2, [pc, #416]	; (8009d08 <HAL_DMA_IRQHandler+0xcb0>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d108      	bne.n	8009b7c <HAL_DMA_IRQHandler+0xb24>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 0208 	bic.w	r2, r2, #8
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	e007      	b.n	8009b8c <HAL_DMA_IRQHandler+0xb34>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 0204 	bic.w	r2, r2, #4
 8009b8a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 8165 	beq.w	8009e60 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b9e:	e15f      	b.n	8009e60 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ba4:	f003 031f 	and.w	r3, r3, #31
 8009ba8:	2202      	movs	r2, #2
 8009baa:	409a      	lsls	r2, r3
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 80c5 	beq.w	8009d40 <HAL_DMA_IRQHandler+0xce8>
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	f003 0302 	and.w	r3, r3, #2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 80bf 	beq.w	8009d40 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bc6:	f003 031f 	and.w	r3, r3, #31
 8009bca:	2202      	movs	r2, #2
 8009bcc:	409a      	lsls	r2, r3
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d018      	beq.n	8009c0e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d109      	bne.n	8009bfa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 813a 	beq.w	8009e64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009bf8:	e134      	b.n	8009e64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 8130 	beq.w	8009e64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c0c:	e12a      	b.n	8009e64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f003 0320 	and.w	r3, r3, #32
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f040 8089 	bne.w	8009d2c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a2b      	ldr	r2, [pc, #172]	; (8009ccc <HAL_DMA_IRQHandler+0xc74>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d04a      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a29      	ldr	r2, [pc, #164]	; (8009cd0 <HAL_DMA_IRQHandler+0xc78>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d045      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a28      	ldr	r2, [pc, #160]	; (8009cd4 <HAL_DMA_IRQHandler+0xc7c>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d040      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a26      	ldr	r2, [pc, #152]	; (8009cd8 <HAL_DMA_IRQHandler+0xc80>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d03b      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a25      	ldr	r2, [pc, #148]	; (8009cdc <HAL_DMA_IRQHandler+0xc84>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d036      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a23      	ldr	r2, [pc, #140]	; (8009ce0 <HAL_DMA_IRQHandler+0xc88>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d031      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a22      	ldr	r2, [pc, #136]	; (8009ce4 <HAL_DMA_IRQHandler+0xc8c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d02c      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a20      	ldr	r2, [pc, #128]	; (8009ce8 <HAL_DMA_IRQHandler+0xc90>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d027      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a1f      	ldr	r2, [pc, #124]	; (8009cec <HAL_DMA_IRQHandler+0xc94>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d022      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a1d      	ldr	r2, [pc, #116]	; (8009cf0 <HAL_DMA_IRQHandler+0xc98>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d01d      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a1c      	ldr	r2, [pc, #112]	; (8009cf4 <HAL_DMA_IRQHandler+0xc9c>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d018      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a1a      	ldr	r2, [pc, #104]	; (8009cf8 <HAL_DMA_IRQHandler+0xca0>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d013      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a19      	ldr	r2, [pc, #100]	; (8009cfc <HAL_DMA_IRQHandler+0xca4>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d00e      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a17      	ldr	r2, [pc, #92]	; (8009d00 <HAL_DMA_IRQHandler+0xca8>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d009      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a16      	ldr	r2, [pc, #88]	; (8009d04 <HAL_DMA_IRQHandler+0xcac>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d004      	beq.n	8009cba <HAL_DMA_IRQHandler+0xc62>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a14      	ldr	r2, [pc, #80]	; (8009d08 <HAL_DMA_IRQHandler+0xcb0>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d128      	bne.n	8009d0c <HAL_DMA_IRQHandler+0xcb4>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f022 0214 	bic.w	r2, r2, #20
 8009cc8:	601a      	str	r2, [r3, #0]
 8009cca:	e027      	b.n	8009d1c <HAL_DMA_IRQHandler+0xcc4>
 8009ccc:	40020010 	.word	0x40020010
 8009cd0:	40020028 	.word	0x40020028
 8009cd4:	40020040 	.word	0x40020040
 8009cd8:	40020058 	.word	0x40020058
 8009cdc:	40020070 	.word	0x40020070
 8009ce0:	40020088 	.word	0x40020088
 8009ce4:	400200a0 	.word	0x400200a0
 8009ce8:	400200b8 	.word	0x400200b8
 8009cec:	40020410 	.word	0x40020410
 8009cf0:	40020428 	.word	0x40020428
 8009cf4:	40020440 	.word	0x40020440
 8009cf8:	40020458 	.word	0x40020458
 8009cfc:	40020470 	.word	0x40020470
 8009d00:	40020488 	.word	0x40020488
 8009d04:	400204a0 	.word	0x400204a0
 8009d08:	400204b8 	.word	0x400204b8
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f022 020a 	bic.w	r2, r2, #10
 8009d1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f000 8097 	beq.w	8009e64 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d3e:	e091      	b.n	8009e64 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d44:	f003 031f 	and.w	r3, r3, #31
 8009d48:	2208      	movs	r2, #8
 8009d4a:	409a      	lsls	r2, r3
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	4013      	ands	r3, r2
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 8088 	beq.w	8009e66 <HAL_DMA_IRQHandler+0xe0e>
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f003 0308 	and.w	r3, r3, #8
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 8082 	beq.w	8009e66 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a41      	ldr	r2, [pc, #260]	; (8009e6c <HAL_DMA_IRQHandler+0xe14>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d04a      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a3f      	ldr	r2, [pc, #252]	; (8009e70 <HAL_DMA_IRQHandler+0xe18>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d045      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a3e      	ldr	r2, [pc, #248]	; (8009e74 <HAL_DMA_IRQHandler+0xe1c>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d040      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a3c      	ldr	r2, [pc, #240]	; (8009e78 <HAL_DMA_IRQHandler+0xe20>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d03b      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a3b      	ldr	r2, [pc, #236]	; (8009e7c <HAL_DMA_IRQHandler+0xe24>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d036      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a39      	ldr	r2, [pc, #228]	; (8009e80 <HAL_DMA_IRQHandler+0xe28>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d031      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a38      	ldr	r2, [pc, #224]	; (8009e84 <HAL_DMA_IRQHandler+0xe2c>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d02c      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a36      	ldr	r2, [pc, #216]	; (8009e88 <HAL_DMA_IRQHandler+0xe30>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d027      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a35      	ldr	r2, [pc, #212]	; (8009e8c <HAL_DMA_IRQHandler+0xe34>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d022      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a33      	ldr	r2, [pc, #204]	; (8009e90 <HAL_DMA_IRQHandler+0xe38>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d01d      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a32      	ldr	r2, [pc, #200]	; (8009e94 <HAL_DMA_IRQHandler+0xe3c>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d018      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a30      	ldr	r2, [pc, #192]	; (8009e98 <HAL_DMA_IRQHandler+0xe40>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d013      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a2f      	ldr	r2, [pc, #188]	; (8009e9c <HAL_DMA_IRQHandler+0xe44>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d00e      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a2d      	ldr	r2, [pc, #180]	; (8009ea0 <HAL_DMA_IRQHandler+0xe48>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d009      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a2c      	ldr	r2, [pc, #176]	; (8009ea4 <HAL_DMA_IRQHandler+0xe4c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d004      	beq.n	8009e02 <HAL_DMA_IRQHandler+0xdaa>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a2a      	ldr	r2, [pc, #168]	; (8009ea8 <HAL_DMA_IRQHandler+0xe50>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d108      	bne.n	8009e14 <HAL_DMA_IRQHandler+0xdbc>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f022 021c 	bic.w	r2, r2, #28
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	e007      	b.n	8009e24 <HAL_DMA_IRQHandler+0xdcc>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 020e 	bic.w	r2, r2, #14
 8009e22:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e28:	f003 031f 	and.w	r3, r3, #31
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	409a      	lsls	r2, r3
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d009      	beq.n	8009e66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	4798      	blx	r3
 8009e5a:	e004      	b.n	8009e66 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009e5c:	bf00      	nop
 8009e5e:	e002      	b.n	8009e66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e60:	bf00      	nop
 8009e62:	e000      	b.n	8009e66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e64:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009e66:	3728      	adds	r7, #40	; 0x28
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	40020010 	.word	0x40020010
 8009e70:	40020028 	.word	0x40020028
 8009e74:	40020040 	.word	0x40020040
 8009e78:	40020058 	.word	0x40020058
 8009e7c:	40020070 	.word	0x40020070
 8009e80:	40020088 	.word	0x40020088
 8009e84:	400200a0 	.word	0x400200a0
 8009e88:	400200b8 	.word	0x400200b8
 8009e8c:	40020410 	.word	0x40020410
 8009e90:	40020428 	.word	0x40020428
 8009e94:	40020440 	.word	0x40020440
 8009e98:	40020458 	.word	0x40020458
 8009e9c:	40020470 	.word	0x40020470
 8009ea0:	40020488 	.word	0x40020488
 8009ea4:	400204a0 	.word	0x400204a0
 8009ea8:	400204b8 	.word	0x400204b8

08009eac <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009eba:	b2db      	uxtb	r3, r3
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
 8009eec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a7f      	ldr	r2, [pc, #508]	; (800a0fc <DMA_SetConfig+0x21c>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d072      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a7d      	ldr	r2, [pc, #500]	; (800a100 <DMA_SetConfig+0x220>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d06d      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a7c      	ldr	r2, [pc, #496]	; (800a104 <DMA_SetConfig+0x224>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d068      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a7a      	ldr	r2, [pc, #488]	; (800a108 <DMA_SetConfig+0x228>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d063      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a79      	ldr	r2, [pc, #484]	; (800a10c <DMA_SetConfig+0x22c>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d05e      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a77      	ldr	r2, [pc, #476]	; (800a110 <DMA_SetConfig+0x230>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d059      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a76      	ldr	r2, [pc, #472]	; (800a114 <DMA_SetConfig+0x234>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d054      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a74      	ldr	r2, [pc, #464]	; (800a118 <DMA_SetConfig+0x238>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d04f      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a73      	ldr	r2, [pc, #460]	; (800a11c <DMA_SetConfig+0x23c>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d04a      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a71      	ldr	r2, [pc, #452]	; (800a120 <DMA_SetConfig+0x240>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d045      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a70      	ldr	r2, [pc, #448]	; (800a124 <DMA_SetConfig+0x244>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d040      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a6e      	ldr	r2, [pc, #440]	; (800a128 <DMA_SetConfig+0x248>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d03b      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a6d      	ldr	r2, [pc, #436]	; (800a12c <DMA_SetConfig+0x24c>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d036      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a6b      	ldr	r2, [pc, #428]	; (800a130 <DMA_SetConfig+0x250>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d031      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a6a      	ldr	r2, [pc, #424]	; (800a134 <DMA_SetConfig+0x254>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d02c      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a68      	ldr	r2, [pc, #416]	; (800a138 <DMA_SetConfig+0x258>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d027      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a67      	ldr	r2, [pc, #412]	; (800a13c <DMA_SetConfig+0x25c>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d022      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a65      	ldr	r2, [pc, #404]	; (800a140 <DMA_SetConfig+0x260>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d01d      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a64      	ldr	r2, [pc, #400]	; (800a144 <DMA_SetConfig+0x264>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d018      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a62      	ldr	r2, [pc, #392]	; (800a148 <DMA_SetConfig+0x268>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d013      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a61      	ldr	r2, [pc, #388]	; (800a14c <DMA_SetConfig+0x26c>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d00e      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a5f      	ldr	r2, [pc, #380]	; (800a150 <DMA_SetConfig+0x270>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d009      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a5e      	ldr	r2, [pc, #376]	; (800a154 <DMA_SetConfig+0x274>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d004      	beq.n	8009fea <DMA_SetConfig+0x10a>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a5c      	ldr	r2, [pc, #368]	; (800a158 <DMA_SetConfig+0x278>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d101      	bne.n	8009fee <DMA_SetConfig+0x10e>
 8009fea:	2301      	movs	r3, #1
 8009fec:	e000      	b.n	8009ff0 <DMA_SetConfig+0x110>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00d      	beq.n	800a010 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009ffc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a002:	2b00      	cmp	r3, #0
 800a004:	d004      	beq.n	800a010 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a00e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a39      	ldr	r2, [pc, #228]	; (800a0fc <DMA_SetConfig+0x21c>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d04a      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a38      	ldr	r2, [pc, #224]	; (800a100 <DMA_SetConfig+0x220>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d045      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a36      	ldr	r2, [pc, #216]	; (800a104 <DMA_SetConfig+0x224>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d040      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a35      	ldr	r2, [pc, #212]	; (800a108 <DMA_SetConfig+0x228>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d03b      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a33      	ldr	r2, [pc, #204]	; (800a10c <DMA_SetConfig+0x22c>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d036      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a32      	ldr	r2, [pc, #200]	; (800a110 <DMA_SetConfig+0x230>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d031      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a30      	ldr	r2, [pc, #192]	; (800a114 <DMA_SetConfig+0x234>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d02c      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a2f      	ldr	r2, [pc, #188]	; (800a118 <DMA_SetConfig+0x238>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d027      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a2d      	ldr	r2, [pc, #180]	; (800a11c <DMA_SetConfig+0x23c>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d022      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a2c      	ldr	r2, [pc, #176]	; (800a120 <DMA_SetConfig+0x240>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d01d      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a2a      	ldr	r2, [pc, #168]	; (800a124 <DMA_SetConfig+0x244>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d018      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a29      	ldr	r2, [pc, #164]	; (800a128 <DMA_SetConfig+0x248>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d013      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a27      	ldr	r2, [pc, #156]	; (800a12c <DMA_SetConfig+0x24c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d00e      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a26      	ldr	r2, [pc, #152]	; (800a130 <DMA_SetConfig+0x250>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d009      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a24      	ldr	r2, [pc, #144]	; (800a134 <DMA_SetConfig+0x254>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d004      	beq.n	800a0b0 <DMA_SetConfig+0x1d0>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a23      	ldr	r2, [pc, #140]	; (800a138 <DMA_SetConfig+0x258>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d101      	bne.n	800a0b4 <DMA_SetConfig+0x1d4>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e000      	b.n	800a0b6 <DMA_SetConfig+0x1d6>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d059      	beq.n	800a16e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0be:	f003 031f 	and.w	r3, r3, #31
 800a0c2:	223f      	movs	r2, #63	; 0x3f
 800a0c4:	409a      	lsls	r2, r3
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a0d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	2b40      	cmp	r3, #64	; 0x40
 800a0e8:	d138      	bne.n	800a15c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a0fa:	e086      	b.n	800a20a <DMA_SetConfig+0x32a>
 800a0fc:	40020010 	.word	0x40020010
 800a100:	40020028 	.word	0x40020028
 800a104:	40020040 	.word	0x40020040
 800a108:	40020058 	.word	0x40020058
 800a10c:	40020070 	.word	0x40020070
 800a110:	40020088 	.word	0x40020088
 800a114:	400200a0 	.word	0x400200a0
 800a118:	400200b8 	.word	0x400200b8
 800a11c:	40020410 	.word	0x40020410
 800a120:	40020428 	.word	0x40020428
 800a124:	40020440 	.word	0x40020440
 800a128:	40020458 	.word	0x40020458
 800a12c:	40020470 	.word	0x40020470
 800a130:	40020488 	.word	0x40020488
 800a134:	400204a0 	.word	0x400204a0
 800a138:	400204b8 	.word	0x400204b8
 800a13c:	58025408 	.word	0x58025408
 800a140:	5802541c 	.word	0x5802541c
 800a144:	58025430 	.word	0x58025430
 800a148:	58025444 	.word	0x58025444
 800a14c:	58025458 	.word	0x58025458
 800a150:	5802546c 	.word	0x5802546c
 800a154:	58025480 	.word	0x58025480
 800a158:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	60da      	str	r2, [r3, #12]
}
 800a16c:	e04d      	b.n	800a20a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a29      	ldr	r2, [pc, #164]	; (800a218 <DMA_SetConfig+0x338>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d022      	beq.n	800a1be <DMA_SetConfig+0x2de>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a27      	ldr	r2, [pc, #156]	; (800a21c <DMA_SetConfig+0x33c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d01d      	beq.n	800a1be <DMA_SetConfig+0x2de>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a26      	ldr	r2, [pc, #152]	; (800a220 <DMA_SetConfig+0x340>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d018      	beq.n	800a1be <DMA_SetConfig+0x2de>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a24      	ldr	r2, [pc, #144]	; (800a224 <DMA_SetConfig+0x344>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d013      	beq.n	800a1be <DMA_SetConfig+0x2de>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a23      	ldr	r2, [pc, #140]	; (800a228 <DMA_SetConfig+0x348>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d00e      	beq.n	800a1be <DMA_SetConfig+0x2de>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a21      	ldr	r2, [pc, #132]	; (800a22c <DMA_SetConfig+0x34c>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d009      	beq.n	800a1be <DMA_SetConfig+0x2de>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a20      	ldr	r2, [pc, #128]	; (800a230 <DMA_SetConfig+0x350>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d004      	beq.n	800a1be <DMA_SetConfig+0x2de>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a1e      	ldr	r2, [pc, #120]	; (800a234 <DMA_SetConfig+0x354>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d101      	bne.n	800a1c2 <DMA_SetConfig+0x2e2>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e000      	b.n	800a1c4 <DMA_SetConfig+0x2e4>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d020      	beq.n	800a20a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1cc:	f003 031f 	and.w	r3, r3, #31
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	409a      	lsls	r2, r3
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	2b40      	cmp	r3, #64	; 0x40
 800a1e6:	d108      	bne.n	800a1fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	60da      	str	r2, [r3, #12]
}
 800a1f8:	e007      	b.n	800a20a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	60da      	str	r2, [r3, #12]
}
 800a20a:	bf00      	nop
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	58025408 	.word	0x58025408
 800a21c:	5802541c 	.word	0x5802541c
 800a220:	58025430 	.word	0x58025430
 800a224:	58025444 	.word	0x58025444
 800a228:	58025458 	.word	0x58025458
 800a22c:	5802546c 	.word	0x5802546c
 800a230:	58025480 	.word	0x58025480
 800a234:	58025494 	.word	0x58025494

0800a238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a42      	ldr	r2, [pc, #264]	; (800a350 <DMA_CalcBaseAndBitshift+0x118>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d04a      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a41      	ldr	r2, [pc, #260]	; (800a354 <DMA_CalcBaseAndBitshift+0x11c>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d045      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a3f      	ldr	r2, [pc, #252]	; (800a358 <DMA_CalcBaseAndBitshift+0x120>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d040      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a3e      	ldr	r2, [pc, #248]	; (800a35c <DMA_CalcBaseAndBitshift+0x124>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d03b      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a3c      	ldr	r2, [pc, #240]	; (800a360 <DMA_CalcBaseAndBitshift+0x128>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d036      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a3b      	ldr	r2, [pc, #236]	; (800a364 <DMA_CalcBaseAndBitshift+0x12c>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d031      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a39      	ldr	r2, [pc, #228]	; (800a368 <DMA_CalcBaseAndBitshift+0x130>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d02c      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a38      	ldr	r2, [pc, #224]	; (800a36c <DMA_CalcBaseAndBitshift+0x134>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d027      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a36      	ldr	r2, [pc, #216]	; (800a370 <DMA_CalcBaseAndBitshift+0x138>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d022      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a35      	ldr	r2, [pc, #212]	; (800a374 <DMA_CalcBaseAndBitshift+0x13c>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d01d      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a33      	ldr	r2, [pc, #204]	; (800a378 <DMA_CalcBaseAndBitshift+0x140>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d018      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a32      	ldr	r2, [pc, #200]	; (800a37c <DMA_CalcBaseAndBitshift+0x144>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d013      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a30      	ldr	r2, [pc, #192]	; (800a380 <DMA_CalcBaseAndBitshift+0x148>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d00e      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a2f      	ldr	r2, [pc, #188]	; (800a384 <DMA_CalcBaseAndBitshift+0x14c>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d009      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a2d      	ldr	r2, [pc, #180]	; (800a388 <DMA_CalcBaseAndBitshift+0x150>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d004      	beq.n	800a2e0 <DMA_CalcBaseAndBitshift+0xa8>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a2c      	ldr	r2, [pc, #176]	; (800a38c <DMA_CalcBaseAndBitshift+0x154>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d101      	bne.n	800a2e4 <DMA_CalcBaseAndBitshift+0xac>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e000      	b.n	800a2e6 <DMA_CalcBaseAndBitshift+0xae>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d024      	beq.n	800a334 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	3b10      	subs	r3, #16
 800a2f2:	4a27      	ldr	r2, [pc, #156]	; (800a390 <DMA_CalcBaseAndBitshift+0x158>)
 800a2f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2f8:	091b      	lsrs	r3, r3, #4
 800a2fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f003 0307 	and.w	r3, r3, #7
 800a302:	4a24      	ldr	r2, [pc, #144]	; (800a394 <DMA_CalcBaseAndBitshift+0x15c>)
 800a304:	5cd3      	ldrb	r3, [r2, r3]
 800a306:	461a      	mov	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d908      	bls.n	800a324 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	4b1f      	ldr	r3, [pc, #124]	; (800a398 <DMA_CalcBaseAndBitshift+0x160>)
 800a31a:	4013      	ands	r3, r2
 800a31c:	1d1a      	adds	r2, r3, #4
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	659a      	str	r2, [r3, #88]	; 0x58
 800a322:	e00d      	b.n	800a340 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	461a      	mov	r2, r3
 800a32a:	4b1b      	ldr	r3, [pc, #108]	; (800a398 <DMA_CalcBaseAndBitshift+0x160>)
 800a32c:	4013      	ands	r3, r2
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	6593      	str	r3, [r2, #88]	; 0x58
 800a332:	e005      	b.n	800a340 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	40020010 	.word	0x40020010
 800a354:	40020028 	.word	0x40020028
 800a358:	40020040 	.word	0x40020040
 800a35c:	40020058 	.word	0x40020058
 800a360:	40020070 	.word	0x40020070
 800a364:	40020088 	.word	0x40020088
 800a368:	400200a0 	.word	0x400200a0
 800a36c:	400200b8 	.word	0x400200b8
 800a370:	40020410 	.word	0x40020410
 800a374:	40020428 	.word	0x40020428
 800a378:	40020440 	.word	0x40020440
 800a37c:	40020458 	.word	0x40020458
 800a380:	40020470 	.word	0x40020470
 800a384:	40020488 	.word	0x40020488
 800a388:	400204a0 	.word	0x400204a0
 800a38c:	400204b8 	.word	0x400204b8
 800a390:	aaaaaaab 	.word	0xaaaaaaab
 800a394:	0801aad4 	.word	0x0801aad4
 800a398:	fffffc00 	.word	0xfffffc00

0800a39c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d120      	bne.n	800a3f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d858      	bhi.n	800a46a <DMA_CheckFifoParam+0xce>
 800a3b8:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <DMA_CheckFifoParam+0x24>)
 800a3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3be:	bf00      	nop
 800a3c0:	0800a3d1 	.word	0x0800a3d1
 800a3c4:	0800a3e3 	.word	0x0800a3e3
 800a3c8:	0800a3d1 	.word	0x0800a3d1
 800a3cc:	0800a46b 	.word	0x0800a46b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d048      	beq.n	800a46e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a3e0:	e045      	b.n	800a46e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a3ea:	d142      	bne.n	800a472 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a3f0:	e03f      	b.n	800a472 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3fa:	d123      	bne.n	800a444 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a400:	2b03      	cmp	r3, #3
 800a402:	d838      	bhi.n	800a476 <DMA_CheckFifoParam+0xda>
 800a404:	a201      	add	r2, pc, #4	; (adr r2, 800a40c <DMA_CheckFifoParam+0x70>)
 800a406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40a:	bf00      	nop
 800a40c:	0800a41d 	.word	0x0800a41d
 800a410:	0800a423 	.word	0x0800a423
 800a414:	0800a41d 	.word	0x0800a41d
 800a418:	0800a435 	.word	0x0800a435
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	73fb      	strb	r3, [r7, #15]
        break;
 800a420:	e030      	b.n	800a484 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d025      	beq.n	800a47a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a432:	e022      	b.n	800a47a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a438:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a43c:	d11f      	bne.n	800a47e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a442:	e01c      	b.n	800a47e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d902      	bls.n	800a452 <DMA_CheckFifoParam+0xb6>
 800a44c:	2b03      	cmp	r3, #3
 800a44e:	d003      	beq.n	800a458 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a450:	e018      	b.n	800a484 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	73fb      	strb	r3, [r7, #15]
        break;
 800a456:	e015      	b.n	800a484 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00e      	beq.n	800a482 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	73fb      	strb	r3, [r7, #15]
    break;
 800a468:	e00b      	b.n	800a482 <DMA_CheckFifoParam+0xe6>
        break;
 800a46a:	bf00      	nop
 800a46c:	e00a      	b.n	800a484 <DMA_CheckFifoParam+0xe8>
        break;
 800a46e:	bf00      	nop
 800a470:	e008      	b.n	800a484 <DMA_CheckFifoParam+0xe8>
        break;
 800a472:	bf00      	nop
 800a474:	e006      	b.n	800a484 <DMA_CheckFifoParam+0xe8>
        break;
 800a476:	bf00      	nop
 800a478:	e004      	b.n	800a484 <DMA_CheckFifoParam+0xe8>
        break;
 800a47a:	bf00      	nop
 800a47c:	e002      	b.n	800a484 <DMA_CheckFifoParam+0xe8>
        break;
 800a47e:	bf00      	nop
 800a480:	e000      	b.n	800a484 <DMA_CheckFifoParam+0xe8>
    break;
 800a482:	bf00      	nop
    }
  }

  return status;
 800a484:	7bfb      	ldrb	r3, [r7, #15]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop

0800a494 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a38      	ldr	r2, [pc, #224]	; (800a588 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d022      	beq.n	800a4f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a36      	ldr	r2, [pc, #216]	; (800a58c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d01d      	beq.n	800a4f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a35      	ldr	r2, [pc, #212]	; (800a590 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d018      	beq.n	800a4f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a33      	ldr	r2, [pc, #204]	; (800a594 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d013      	beq.n	800a4f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a32      	ldr	r2, [pc, #200]	; (800a598 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d00e      	beq.n	800a4f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a30      	ldr	r2, [pc, #192]	; (800a59c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d009      	beq.n	800a4f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a2f      	ldr	r2, [pc, #188]	; (800a5a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d004      	beq.n	800a4f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a2d      	ldr	r2, [pc, #180]	; (800a5a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d101      	bne.n	800a4f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e000      	b.n	800a4f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01a      	beq.n	800a532 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	b2db      	uxtb	r3, r3
 800a502:	3b08      	subs	r3, #8
 800a504:	4a28      	ldr	r2, [pc, #160]	; (800a5a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a506:	fba2 2303 	umull	r2, r3, r2, r3
 800a50a:	091b      	lsrs	r3, r3, #4
 800a50c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	4b26      	ldr	r3, [pc, #152]	; (800a5ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a512:	4413      	add	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	461a      	mov	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a24      	ldr	r2, [pc, #144]	; (800a5b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a520:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f003 031f 	and.w	r3, r3, #31
 800a528:	2201      	movs	r2, #1
 800a52a:	409a      	lsls	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a530:	e024      	b.n	800a57c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	b2db      	uxtb	r3, r3
 800a538:	3b10      	subs	r3, #16
 800a53a:	4a1e      	ldr	r2, [pc, #120]	; (800a5b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a53c:	fba2 2303 	umull	r2, r3, r2, r3
 800a540:	091b      	lsrs	r3, r3, #4
 800a542:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	4a1c      	ldr	r2, [pc, #112]	; (800a5b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d806      	bhi.n	800a55a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	4a1b      	ldr	r2, [pc, #108]	; (800a5bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d902      	bls.n	800a55a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	3308      	adds	r3, #8
 800a558:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4b18      	ldr	r3, [pc, #96]	; (800a5c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a55e:	4413      	add	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	461a      	mov	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a16      	ldr	r2, [pc, #88]	; (800a5c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a56c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f003 031f 	and.w	r3, r3, #31
 800a574:	2201      	movs	r2, #1
 800a576:	409a      	lsls	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a57c:	bf00      	nop
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	58025408 	.word	0x58025408
 800a58c:	5802541c 	.word	0x5802541c
 800a590:	58025430 	.word	0x58025430
 800a594:	58025444 	.word	0x58025444
 800a598:	58025458 	.word	0x58025458
 800a59c:	5802546c 	.word	0x5802546c
 800a5a0:	58025480 	.word	0x58025480
 800a5a4:	58025494 	.word	0x58025494
 800a5a8:	cccccccd 	.word	0xcccccccd
 800a5ac:	16009600 	.word	0x16009600
 800a5b0:	58025880 	.word	0x58025880
 800a5b4:	aaaaaaab 	.word	0xaaaaaaab
 800a5b8:	400204b8 	.word	0x400204b8
 800a5bc:	4002040f 	.word	0x4002040f
 800a5c0:	10008200 	.word	0x10008200
 800a5c4:	40020880 	.word	0x40020880

0800a5c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d04a      	beq.n	800a674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2b08      	cmp	r3, #8
 800a5e2:	d847      	bhi.n	800a674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a25      	ldr	r2, [pc, #148]	; (800a680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d022      	beq.n	800a634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a24      	ldr	r2, [pc, #144]	; (800a684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d01d      	beq.n	800a634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a22      	ldr	r2, [pc, #136]	; (800a688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d018      	beq.n	800a634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a21      	ldr	r2, [pc, #132]	; (800a68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d013      	beq.n	800a634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a1f      	ldr	r2, [pc, #124]	; (800a690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d00e      	beq.n	800a634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a1e      	ldr	r2, [pc, #120]	; (800a694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d009      	beq.n	800a634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a1c      	ldr	r2, [pc, #112]	; (800a698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d004      	beq.n	800a634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a1b      	ldr	r2, [pc, #108]	; (800a69c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d101      	bne.n	800a638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a634:	2301      	movs	r3, #1
 800a636:	e000      	b.n	800a63a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a638:	2300      	movs	r3, #0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00a      	beq.n	800a654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	4b17      	ldr	r3, [pc, #92]	; (800a6a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a642:	4413      	add	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	461a      	mov	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a15      	ldr	r2, [pc, #84]	; (800a6a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a650:	671a      	str	r2, [r3, #112]	; 0x70
 800a652:	e009      	b.n	800a668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a658:	4413      	add	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	461a      	mov	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a11      	ldr	r2, [pc, #68]	; (800a6ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a666:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	2201      	movs	r2, #1
 800a66e:	409a      	lsls	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a674:	bf00      	nop
 800a676:	3714      	adds	r7, #20
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr
 800a680:	58025408 	.word	0x58025408
 800a684:	5802541c 	.word	0x5802541c
 800a688:	58025430 	.word	0x58025430
 800a68c:	58025444 	.word	0x58025444
 800a690:	58025458 	.word	0x58025458
 800a694:	5802546c 	.word	0x5802546c
 800a698:	58025480 	.word	0x58025480
 800a69c:	58025494 	.word	0x58025494
 800a6a0:	1600963f 	.word	0x1600963f
 800a6a4:	58025940 	.word	0x58025940
 800a6a8:	1000823f 	.word	0x1000823f
 800a6ac:	40020940 	.word	0x40020940

0800a6b0 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b08a      	sub	sp, #40	; 0x28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a6c4:	2308      	movs	r3, #8
 800a6c6:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a6c8:	4b40      	ldr	r3, [pc, #256]	; (800a7cc <HAL_FLASH_Program+0x11c>)
 800a6ca:	7d1b      	ldrb	r3, [r3, #20]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d101      	bne.n	800a6d4 <HAL_FLASH_Program+0x24>
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	e076      	b.n	800a7c2 <HAL_FLASH_Program+0x112>
 800a6d4:	4b3d      	ldr	r3, [pc, #244]	; (800a7cc <HAL_FLASH_Program+0x11c>)
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6e0:	d306      	bcc.n	800a6f0 <HAL_FLASH_Program+0x40>
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a6e8:	d202      	bcs.n	800a6f0 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800a6ee:	e00c      	b.n	800a70a <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a6f6:	d306      	bcc.n	800a706 <HAL_FLASH_Program+0x56>
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800a6fe:	d202      	bcs.n	800a706 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800a700:	2302      	movs	r3, #2
 800a702:	61bb      	str	r3, [r7, #24]
 800a704:	e001      	b.n	800a70a <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e05b      	b.n	800a7c2 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a70a:	4b30      	ldr	r3, [pc, #192]	; (800a7cc <HAL_FLASH_Program+0x11c>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a710:	69b9      	ldr	r1, [r7, #24]
 800a712:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a716:	f000 f897 	bl	800a848 <FLASH_WaitForLastOperation>
 800a71a:	4603      	mov	r3, r0
 800a71c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800a720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a724:	2b00      	cmp	r3, #0
 800a726:	d147      	bne.n	800a7b8 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d106      	bne.n	800a73c <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a72e:	4b28      	ldr	r3, [pc, #160]	; (800a7d0 <HAL_FLASH_Program+0x120>)
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	4a27      	ldr	r2, [pc, #156]	; (800a7d0 <HAL_FLASH_Program+0x120>)
 800a734:	f043 0302 	orr.w	r3, r3, #2
 800a738:	60d3      	str	r3, [r2, #12]
 800a73a:	e007      	b.n	800a74c <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800a73c:	4b24      	ldr	r3, [pc, #144]	; (800a7d0 <HAL_FLASH_Program+0x120>)
 800a73e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a742:	4a23      	ldr	r2, [pc, #140]	; (800a7d0 <HAL_FLASH_Program+0x120>)
 800a744:	f043 0302 	orr.w	r3, r3, #2
 800a748:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800a74c:	f3bf 8f6f 	isb	sy
}
 800a750:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a752:	f3bf 8f4f 	dsb	sy
}
 800a756:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	3304      	adds	r3, #4
 800a764:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	3304      	adds	r3, #4
 800a76a:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a76c:	7dfb      	ldrb	r3, [r7, #23]
 800a76e:	3b01      	subs	r3, #1
 800a770:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800a772:	7dfb      	ldrb	r3, [r7, #23]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1ef      	bne.n	800a758 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800a778:	f3bf 8f6f 	isb	sy
}
 800a77c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a77e:	f3bf 8f4f 	dsb	sy
}
 800a782:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a784:	69b9      	ldr	r1, [r7, #24]
 800a786:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a78a:	f000 f85d 	bl	800a848 <FLASH_WaitForLastOperation>
 800a78e:	4603      	mov	r3, r0
 800a790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	2b01      	cmp	r3, #1
 800a798:	d106      	bne.n	800a7a8 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800a79a:	4b0d      	ldr	r3, [pc, #52]	; (800a7d0 <HAL_FLASH_Program+0x120>)
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	4a0c      	ldr	r2, [pc, #48]	; (800a7d0 <HAL_FLASH_Program+0x120>)
 800a7a0:	f023 0302 	bic.w	r3, r3, #2
 800a7a4:	60d3      	str	r3, [r2, #12]
 800a7a6:	e007      	b.n	800a7b8 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800a7a8:	4b09      	ldr	r3, [pc, #36]	; (800a7d0 <HAL_FLASH_Program+0x120>)
 800a7aa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a7ae:	4a08      	ldr	r2, [pc, #32]	; (800a7d0 <HAL_FLASH_Program+0x120>)
 800a7b0:	f023 0302 	bic.w	r3, r3, #2
 800a7b4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a7b8:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <HAL_FLASH_Program+0x11c>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	751a      	strb	r2, [r3, #20]

  return status;
 800a7be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3728      	adds	r7, #40	; 0x28
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	24001fa0 	.word	0x24001fa0
 800a7d0:	52002000 	.word	0x52002000

0800a7d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a7d8:	4b18      	ldr	r3, [pc, #96]	; (800a83c <HAL_FLASH_Unlock+0x68>)
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00d      	beq.n	800a800 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800a7e4:	4b15      	ldr	r3, [pc, #84]	; (800a83c <HAL_FLASH_Unlock+0x68>)
 800a7e6:	4a16      	ldr	r2, [pc, #88]	; (800a840 <HAL_FLASH_Unlock+0x6c>)
 800a7e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800a7ea:	4b14      	ldr	r3, [pc, #80]	; (800a83c <HAL_FLASH_Unlock+0x68>)
 800a7ec:	4a15      	ldr	r2, [pc, #84]	; (800a844 <HAL_FLASH_Unlock+0x70>)
 800a7ee:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a7f0:	4b12      	ldr	r3, [pc, #72]	; (800a83c <HAL_FLASH_Unlock+0x68>)
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	f003 0301 	and.w	r3, r3, #1
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e018      	b.n	800a832 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800a800:	4b0e      	ldr	r3, [pc, #56]	; (800a83c <HAL_FLASH_Unlock+0x68>)
 800a802:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d010      	beq.n	800a830 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800a80e:	4b0b      	ldr	r3, [pc, #44]	; (800a83c <HAL_FLASH_Unlock+0x68>)
 800a810:	4a0b      	ldr	r2, [pc, #44]	; (800a840 <HAL_FLASH_Unlock+0x6c>)
 800a812:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800a816:	4b09      	ldr	r3, [pc, #36]	; (800a83c <HAL_FLASH_Unlock+0x68>)
 800a818:	4a0a      	ldr	r2, [pc, #40]	; (800a844 <HAL_FLASH_Unlock+0x70>)
 800a81a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800a81e:	4b07      	ldr	r3, [pc, #28]	; (800a83c <HAL_FLASH_Unlock+0x68>)
 800a820:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e000      	b.n	800a832 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	52002000 	.word	0x52002000
 800a840:	45670123 	.word	0x45670123
 800a844:	cdef89ab 	.word	0xcdef89ab

0800a848 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800a852:	2304      	movs	r3, #4
 800a854:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800a85a:	f7fa ff33 	bl	80056c4 <HAL_GetTick>
 800a85e:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	2b02      	cmp	r3, #2
 800a864:	d113      	bne.n	800a88e <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800a866:	4b41      	ldr	r3, [pc, #260]	; (800a96c <FLASH_WaitForLastOperation+0x124>)
 800a868:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a86a:	e010      	b.n	800a88e <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a872:	d00c      	beq.n	800a88e <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a874:	f7fa ff26 	bl	80056c4 <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	429a      	cmp	r2, r3
 800a882:	d302      	bcc.n	800a88a <FLASH_WaitForLastOperation+0x42>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800a88a:	2303      	movs	r3, #3
 800a88c:	e06a      	b.n	800a964 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	4b37      	ldr	r3, [pc, #220]	; (800a970 <FLASH_WaitForLastOperation+0x128>)
 800a892:	4013      	ands	r3, r2
 800a894:	697a      	ldr	r2, [r7, #20]
 800a896:	429a      	cmp	r2, r3
 800a898:	d10a      	bne.n	800a8b0 <FLASH_WaitForLastOperation+0x68>
 800a89a:	4b36      	ldr	r3, [pc, #216]	; (800a974 <FLASH_WaitForLastOperation+0x12c>)
 800a89c:	691a      	ldr	r2, [r3, #16]
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	bf0c      	ite	eq
 800a8a8:	2301      	moveq	r3, #1
 800a8aa:	2300      	movne	r3, #0
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	e00c      	b.n	800a8ca <FLASH_WaitForLastOperation+0x82>
 800a8b0:	4b30      	ldr	r3, [pc, #192]	; (800a974 <FLASH_WaitForLastOperation+0x12c>)
 800a8b2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a8b6:	43da      	mvns	r2, r3
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	bf0c      	ite	eq
 800a8c4:	2301      	moveq	r3, #1
 800a8c6:	2300      	movne	r3, #0
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1ce      	bne.n	800a86c <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d105      	bne.n	800a8e0 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800a8d4:	4b27      	ldr	r3, [pc, #156]	; (800a974 <FLASH_WaitForLastOperation+0x12c>)
 800a8d6:	691a      	ldr	r2, [r3, #16]
 800a8d8:	4b27      	ldr	r3, [pc, #156]	; (800a978 <FLASH_WaitForLastOperation+0x130>)
 800a8da:	4013      	ands	r3, r2
 800a8dc:	613b      	str	r3, [r7, #16]
 800a8de:	e007      	b.n	800a8f0 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800a8e0:	4b24      	ldr	r3, [pc, #144]	; (800a974 <FLASH_WaitForLastOperation+0x12c>)
 800a8e2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800a8e6:	4b24      	ldr	r3, [pc, #144]	; (800a978 <FLASH_WaitForLastOperation+0x130>)
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8ee:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d017      	beq.n	800a92a <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800a8fa:	4b20      	ldr	r3, [pc, #128]	; (800a97c <FLASH_WaitForLastOperation+0x134>)
 800a8fc:	699a      	ldr	r2, [r3, #24]
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	4313      	orrs	r3, r2
 800a902:	4a1e      	ldr	r2, [pc, #120]	; (800a97c <FLASH_WaitForLastOperation+0x134>)
 800a904:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800a906:	693a      	ldr	r2, [r7, #16]
 800a908:	4b19      	ldr	r3, [pc, #100]	; (800a970 <FLASH_WaitForLastOperation+0x128>)
 800a90a:	4013      	ands	r3, r2
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d103      	bne.n	800a91a <FLASH_WaitForLastOperation+0xd2>
 800a912:	4a18      	ldr	r2, [pc, #96]	; (800a974 <FLASH_WaitForLastOperation+0x12c>)
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	6153      	str	r3, [r2, #20]
 800a918:	e005      	b.n	800a926 <FLASH_WaitForLastOperation+0xde>
 800a91a:	4a16      	ldr	r2, [pc, #88]	; (800a974 <FLASH_WaitForLastOperation+0x12c>)
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a922:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e01c      	b.n	800a964 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d10b      	bne.n	800a948 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a930:	4b10      	ldr	r3, [pc, #64]	; (800a974 <FLASH_WaitForLastOperation+0x12c>)
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a93c:	d111      	bne.n	800a962 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a93e:	4b0d      	ldr	r3, [pc, #52]	; (800a974 <FLASH_WaitForLastOperation+0x12c>)
 800a940:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a944:	615a      	str	r2, [r3, #20]
 800a946:	e00c      	b.n	800a962 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800a948:	4b0a      	ldr	r3, [pc, #40]	; (800a974 <FLASH_WaitForLastOperation+0x12c>)
 800a94a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a94e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a956:	d104      	bne.n	800a962 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800a958:	4b06      	ldr	r3, [pc, #24]	; (800a974 <FLASH_WaitForLastOperation+0x12c>)
 800a95a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a95e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	80000004 	.word	0x80000004
 800a970:	1fef000f 	.word	0x1fef000f
 800a974:	52002000 	.word	0x52002000
 800a978:	17ee0000 	.word	0x17ee0000
 800a97c:	24001fa0 	.word	0x24001fa0

0800a980 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a98e:	4b5e      	ldr	r3, [pc, #376]	; (800ab08 <HAL_FLASHEx_Erase+0x188>)
 800a990:	7d1b      	ldrb	r3, [r3, #20]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d101      	bne.n	800a99a <HAL_FLASHEx_Erase+0x1a>
 800a996:	2302      	movs	r3, #2
 800a998:	e0b2      	b.n	800ab00 <HAL_FLASHEx_Erase+0x180>
 800a99a:	4b5b      	ldr	r3, [pc, #364]	; (800ab08 <HAL_FLASHEx_Erase+0x188>)
 800a99c:	2201      	movs	r2, #1
 800a99e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a9a0:	4b59      	ldr	r3, [pc, #356]	; (800ab08 <HAL_FLASHEx_Erase+0x188>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d009      	beq.n	800a9c6 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a9b8:	f7ff ff46 	bl	800a848 <FLASH_WaitForLastOperation>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	f003 0302 	and.w	r3, r3, #2
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d009      	beq.n	800a9e6 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800a9d2:	2102      	movs	r1, #2
 800a9d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a9d8:	f7ff ff36 	bl	800a848 <FLASH_WaitForLastOperation>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f040 8085 	bne.w	800aaf8 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d136      	bne.n	800aa64 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	691a      	ldr	r2, [r3, #16]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	4610      	mov	r0, r2
 800aa02:	f000 f887 	bl	800ab14 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00f      	beq.n	800aa32 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800aa12:	2101      	movs	r1, #1
 800aa14:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa18:	f7ff ff16 	bl	800a848 <FLASH_WaitForLastOperation>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800aa26:	4b39      	ldr	r3, [pc, #228]	; (800ab0c <HAL_FLASHEx_Erase+0x18c>)
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	4a38      	ldr	r2, [pc, #224]	; (800ab0c <HAL_FLASHEx_Erase+0x18c>)
 800aa2c:	f023 0308 	bic.w	r3, r3, #8
 800aa30:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d05c      	beq.n	800aaf8 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800aa3e:	2102      	movs	r1, #2
 800aa40:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa44:	f7ff ff00 	bl	800a848 <FLASH_WaitForLastOperation>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d001      	beq.n	800aa52 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800aa52:	4b2e      	ldr	r3, [pc, #184]	; (800ab0c <HAL_FLASHEx_Erase+0x18c>)
 800aa54:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aa58:	4a2c      	ldr	r2, [pc, #176]	; (800ab0c <HAL_FLASHEx_Erase+0x18c>)
 800aa5a:	f023 0308 	bic.w	r3, r3, #8
 800aa5e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800aa62:	e049      	b.n	800aaf8 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa6a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	60bb      	str	r3, [r7, #8]
 800aa72:	e039      	b.n	800aae8 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6859      	ldr	r1, [r3, #4]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	68b8      	ldr	r0, [r7, #8]
 800aa80:	f000 f8b2 	bl	800abe8 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00c      	beq.n	800aaaa <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800aa90:	2101      	movs	r1, #1
 800aa92:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa96:	f7ff fed7 	bl	800a848 <FLASH_WaitForLastOperation>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800aa9e:	4b1b      	ldr	r3, [pc, #108]	; (800ab0c <HAL_FLASHEx_Erase+0x18c>)
 800aaa0:	68da      	ldr	r2, [r3, #12]
 800aaa2:	491a      	ldr	r1, [pc, #104]	; (800ab0c <HAL_FLASHEx_Erase+0x18c>)
 800aaa4:	4b1a      	ldr	r3, [pc, #104]	; (800ab10 <HAL_FLASHEx_Erase+0x190>)
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f003 0302 	and.w	r3, r3, #2
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00e      	beq.n	800aad4 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800aab6:	2102      	movs	r1, #2
 800aab8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aabc:	f7ff fec4 	bl	800a848 <FLASH_WaitForLastOperation>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800aac4:	4b11      	ldr	r3, [pc, #68]	; (800ab0c <HAL_FLASHEx_Erase+0x18c>)
 800aac6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800aaca:	4910      	ldr	r1, [pc, #64]	; (800ab0c <HAL_FLASHEx_Erase+0x18c>)
 800aacc:	4b10      	ldr	r3, [pc, #64]	; (800ab10 <HAL_FLASHEx_Erase+0x190>)
 800aace:	4013      	ands	r3, r2
 800aad0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	601a      	str	r2, [r3, #0]
          break;
 800aae0:	e00a      	b.n	800aaf8 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	3301      	adds	r3, #1
 800aae6:	60bb      	str	r3, [r7, #8]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d3bd      	bcc.n	800aa74 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aaf8:	4b03      	ldr	r3, [pc, #12]	; (800ab08 <HAL_FLASHEx_Erase+0x188>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	751a      	strb	r2, [r3, #20]

  return status;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	24001fa0 	.word	0x24001fa0
 800ab0c:	52002000 	.word	0x52002000
 800ab10:	fffff8fb 	.word	0xfffff8fb

0800ab14 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	f003 0303 	and.w	r3, r3, #3
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d122      	bne.n	800ab6e <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ab28:	4b2e      	ldr	r3, [pc, #184]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	4a2d      	ldr	r2, [pc, #180]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ab32:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800ab34:	4b2b      	ldr	r3, [pc, #172]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab36:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ab3a:	4a2a      	ldr	r2, [pc, #168]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab3c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ab40:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800ab44:	4b27      	ldr	r3, [pc, #156]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab46:	68da      	ldr	r2, [r3, #12]
 800ab48:	4926      	ldr	r1, [pc, #152]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800ab50:	4b24      	ldr	r3, [pc, #144]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab52:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ab56:	4923      	ldr	r1, [pc, #140]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800ab60:	4b20      	ldr	r3, [pc, #128]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	4a1f      	ldr	r2, [pc, #124]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab66:	f043 0310 	orr.w	r3, r3, #16
 800ab6a:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800ab6c:	e033      	b.n	800abd6 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	f003 0301 	and.w	r3, r3, #1
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d011      	beq.n	800ab9c <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ab78:	4b1a      	ldr	r3, [pc, #104]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	4a19      	ldr	r2, [pc, #100]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ab82:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800ab84:	4b17      	ldr	r3, [pc, #92]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab86:	68da      	ldr	r2, [r3, #12]
 800ab88:	4916      	ldr	r1, [pc, #88]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800ab90:	4b14      	ldr	r3, [pc, #80]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	4a13      	ldr	r2, [pc, #76]	; (800abe4 <FLASH_MassErase+0xd0>)
 800ab96:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800ab9a:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	f003 0302 	and.w	r3, r3, #2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d017      	beq.n	800abd6 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800aba6:	4b0f      	ldr	r3, [pc, #60]	; (800abe4 <FLASH_MassErase+0xd0>)
 800aba8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800abac:	4a0d      	ldr	r2, [pc, #52]	; (800abe4 <FLASH_MassErase+0xd0>)
 800abae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800abb2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800abb6:	4b0b      	ldr	r3, [pc, #44]	; (800abe4 <FLASH_MassErase+0xd0>)
 800abb8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800abbc:	4909      	ldr	r1, [pc, #36]	; (800abe4 <FLASH_MassErase+0xd0>)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800abc6:	4b07      	ldr	r3, [pc, #28]	; (800abe4 <FLASH_MassErase+0xd0>)
 800abc8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800abcc:	4a05      	ldr	r2, [pc, #20]	; (800abe4 <FLASH_MassErase+0xd0>)
 800abce:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800abd2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800abd6:	bf00      	nop
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	52002000 	.word	0x52002000

0800abe8 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d010      	beq.n	800ac20 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800abfe:	4b18      	ldr	r3, [pc, #96]	; (800ac60 <FLASH_Erase_Sector+0x78>)
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	4a17      	ldr	r2, [pc, #92]	; (800ac60 <FLASH_Erase_Sector+0x78>)
 800ac04:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800ac08:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800ac0a:	4b15      	ldr	r3, [pc, #84]	; (800ac60 <FLASH_Erase_Sector+0x78>)
 800ac0c:	68da      	ldr	r2, [r3, #12]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	0219      	lsls	r1, r3, #8
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	430b      	orrs	r3, r1
 800ac16:	4313      	orrs	r3, r2
 800ac18:	4a11      	ldr	r2, [pc, #68]	; (800ac60 <FLASH_Erase_Sector+0x78>)
 800ac1a:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800ac1e:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	f003 0302 	and.w	r3, r3, #2
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d014      	beq.n	800ac54 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800ac2a:	4b0d      	ldr	r3, [pc, #52]	; (800ac60 <FLASH_Erase_Sector+0x78>)
 800ac2c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac30:	4a0b      	ldr	r2, [pc, #44]	; (800ac60 <FLASH_Erase_Sector+0x78>)
 800ac32:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800ac36:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800ac3a:	4b09      	ldr	r3, [pc, #36]	; (800ac60 <FLASH_Erase_Sector+0x78>)
 800ac3c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	0219      	lsls	r1, r3, #8
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	430b      	orrs	r3, r1
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	4a05      	ldr	r2, [pc, #20]	; (800ac60 <FLASH_Erase_Sector+0x78>)
 800ac4c:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800ac50:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800ac54:	bf00      	nop
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	52002000 	.word	0x52002000

0800ac64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b089      	sub	sp, #36	; 0x24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ac72:	4b89      	ldr	r3, [pc, #548]	; (800ae98 <HAL_GPIO_Init+0x234>)
 800ac74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ac76:	e194      	b.n	800afa2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	2101      	movs	r1, #1
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	fa01 f303 	lsl.w	r3, r1, r3
 800ac84:	4013      	ands	r3, r2
 800ac86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f000 8186 	beq.w	800af9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	f003 0303 	and.w	r3, r3, #3
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d005      	beq.n	800aca8 <HAL_GPIO_Init+0x44>
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	f003 0303 	and.w	r3, r3, #3
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d130      	bne.n	800ad0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	005b      	lsls	r3, r3, #1
 800acb2:	2203      	movs	r2, #3
 800acb4:	fa02 f303 	lsl.w	r3, r2, r3
 800acb8:	43db      	mvns	r3, r3
 800acba:	69ba      	ldr	r2, [r7, #24]
 800acbc:	4013      	ands	r3, r2
 800acbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	68da      	ldr	r2, [r3, #12]
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	005b      	lsls	r3, r3, #1
 800acc8:	fa02 f303 	lsl.w	r3, r2, r3
 800accc:	69ba      	ldr	r2, [r7, #24]
 800acce:	4313      	orrs	r3, r2
 800acd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800acde:	2201      	movs	r2, #1
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	fa02 f303 	lsl.w	r3, r2, r3
 800ace6:	43db      	mvns	r3, r3
 800ace8:	69ba      	ldr	r2, [r7, #24]
 800acea:	4013      	ands	r3, r2
 800acec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	091b      	lsrs	r3, r3, #4
 800acf4:	f003 0201 	and.w	r2, r3, #1
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	fa02 f303 	lsl.w	r3, r2, r3
 800acfe:	69ba      	ldr	r2, [r7, #24]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	f003 0303 	and.w	r3, r3, #3
 800ad12:	2b03      	cmp	r3, #3
 800ad14:	d017      	beq.n	800ad46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	2203      	movs	r2, #3
 800ad22:	fa02 f303 	lsl.w	r3, r2, r3
 800ad26:	43db      	mvns	r3, r3
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	689a      	ldr	r2, [r3, #8]
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	fa02 f303 	lsl.w	r3, r2, r3
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	69ba      	ldr	r2, [r7, #24]
 800ad44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	f003 0303 	and.w	r3, r3, #3
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d123      	bne.n	800ad9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	08da      	lsrs	r2, r3, #3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3208      	adds	r2, #8
 800ad5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	f003 0307 	and.w	r3, r3, #7
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	220f      	movs	r2, #15
 800ad6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad6e:	43db      	mvns	r3, r3
 800ad70:	69ba      	ldr	r2, [r7, #24]
 800ad72:	4013      	ands	r3, r2
 800ad74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	691a      	ldr	r2, [r3, #16]
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	f003 0307 	and.w	r3, r3, #7
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	fa02 f303 	lsl.w	r3, r2, r3
 800ad86:	69ba      	ldr	r2, [r7, #24]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	08da      	lsrs	r2, r3, #3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3208      	adds	r2, #8
 800ad94:	69b9      	ldr	r1, [r7, #24]
 800ad96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	005b      	lsls	r3, r3, #1
 800ada4:	2203      	movs	r2, #3
 800ada6:	fa02 f303 	lsl.w	r3, r2, r3
 800adaa:	43db      	mvns	r3, r3
 800adac:	69ba      	ldr	r2, [r7, #24]
 800adae:	4013      	ands	r3, r2
 800adb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f003 0203 	and.w	r2, r3, #3
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	005b      	lsls	r3, r3, #1
 800adbe:	fa02 f303 	lsl.w	r3, r2, r3
 800adc2:	69ba      	ldr	r2, [r7, #24]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	69ba      	ldr	r2, [r7, #24]
 800adcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800add6:	2b00      	cmp	r3, #0
 800add8:	f000 80e0 	beq.w	800af9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800addc:	4b2f      	ldr	r3, [pc, #188]	; (800ae9c <HAL_GPIO_Init+0x238>)
 800adde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ade2:	4a2e      	ldr	r2, [pc, #184]	; (800ae9c <HAL_GPIO_Init+0x238>)
 800ade4:	f043 0302 	orr.w	r3, r3, #2
 800ade8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800adec:	4b2b      	ldr	r3, [pc, #172]	; (800ae9c <HAL_GPIO_Init+0x238>)
 800adee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800adf2:	f003 0302 	and.w	r3, r3, #2
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800adfa:	4a29      	ldr	r2, [pc, #164]	; (800aea0 <HAL_GPIO_Init+0x23c>)
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	089b      	lsrs	r3, r3, #2
 800ae00:	3302      	adds	r3, #2
 800ae02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	f003 0303 	and.w	r3, r3, #3
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	220f      	movs	r2, #15
 800ae12:	fa02 f303 	lsl.w	r3, r2, r3
 800ae16:	43db      	mvns	r3, r3
 800ae18:	69ba      	ldr	r2, [r7, #24]
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a20      	ldr	r2, [pc, #128]	; (800aea4 <HAL_GPIO_Init+0x240>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d052      	beq.n	800aecc <HAL_GPIO_Init+0x268>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a1f      	ldr	r2, [pc, #124]	; (800aea8 <HAL_GPIO_Init+0x244>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d031      	beq.n	800ae92 <HAL_GPIO_Init+0x22e>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a1e      	ldr	r2, [pc, #120]	; (800aeac <HAL_GPIO_Init+0x248>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d02b      	beq.n	800ae8e <HAL_GPIO_Init+0x22a>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a1d      	ldr	r2, [pc, #116]	; (800aeb0 <HAL_GPIO_Init+0x24c>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d025      	beq.n	800ae8a <HAL_GPIO_Init+0x226>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a1c      	ldr	r2, [pc, #112]	; (800aeb4 <HAL_GPIO_Init+0x250>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d01f      	beq.n	800ae86 <HAL_GPIO_Init+0x222>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a1b      	ldr	r2, [pc, #108]	; (800aeb8 <HAL_GPIO_Init+0x254>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d019      	beq.n	800ae82 <HAL_GPIO_Init+0x21e>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a1a      	ldr	r2, [pc, #104]	; (800aebc <HAL_GPIO_Init+0x258>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d013      	beq.n	800ae7e <HAL_GPIO_Init+0x21a>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a19      	ldr	r2, [pc, #100]	; (800aec0 <HAL_GPIO_Init+0x25c>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d00d      	beq.n	800ae7a <HAL_GPIO_Init+0x216>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a18      	ldr	r2, [pc, #96]	; (800aec4 <HAL_GPIO_Init+0x260>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d007      	beq.n	800ae76 <HAL_GPIO_Init+0x212>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a17      	ldr	r2, [pc, #92]	; (800aec8 <HAL_GPIO_Init+0x264>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d101      	bne.n	800ae72 <HAL_GPIO_Init+0x20e>
 800ae6e:	2309      	movs	r3, #9
 800ae70:	e02d      	b.n	800aece <HAL_GPIO_Init+0x26a>
 800ae72:	230a      	movs	r3, #10
 800ae74:	e02b      	b.n	800aece <HAL_GPIO_Init+0x26a>
 800ae76:	2308      	movs	r3, #8
 800ae78:	e029      	b.n	800aece <HAL_GPIO_Init+0x26a>
 800ae7a:	2307      	movs	r3, #7
 800ae7c:	e027      	b.n	800aece <HAL_GPIO_Init+0x26a>
 800ae7e:	2306      	movs	r3, #6
 800ae80:	e025      	b.n	800aece <HAL_GPIO_Init+0x26a>
 800ae82:	2305      	movs	r3, #5
 800ae84:	e023      	b.n	800aece <HAL_GPIO_Init+0x26a>
 800ae86:	2304      	movs	r3, #4
 800ae88:	e021      	b.n	800aece <HAL_GPIO_Init+0x26a>
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e01f      	b.n	800aece <HAL_GPIO_Init+0x26a>
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e01d      	b.n	800aece <HAL_GPIO_Init+0x26a>
 800ae92:	2301      	movs	r3, #1
 800ae94:	e01b      	b.n	800aece <HAL_GPIO_Init+0x26a>
 800ae96:	bf00      	nop
 800ae98:	58000080 	.word	0x58000080
 800ae9c:	58024400 	.word	0x58024400
 800aea0:	58000400 	.word	0x58000400
 800aea4:	58020000 	.word	0x58020000
 800aea8:	58020400 	.word	0x58020400
 800aeac:	58020800 	.word	0x58020800
 800aeb0:	58020c00 	.word	0x58020c00
 800aeb4:	58021000 	.word	0x58021000
 800aeb8:	58021400 	.word	0x58021400
 800aebc:	58021800 	.word	0x58021800
 800aec0:	58021c00 	.word	0x58021c00
 800aec4:	58022000 	.word	0x58022000
 800aec8:	58022400 	.word	0x58022400
 800aecc:	2300      	movs	r3, #0
 800aece:	69fa      	ldr	r2, [r7, #28]
 800aed0:	f002 0203 	and.w	r2, r2, #3
 800aed4:	0092      	lsls	r2, r2, #2
 800aed6:	4093      	lsls	r3, r2
 800aed8:	69ba      	ldr	r2, [r7, #24]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aede:	4938      	ldr	r1, [pc, #224]	; (800afc0 <HAL_GPIO_Init+0x35c>)
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	089b      	lsrs	r3, r3, #2
 800aee4:	3302      	adds	r3, #2
 800aee6:	69ba      	ldr	r2, [r7, #24]
 800aee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aeec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	43db      	mvns	r3, r3
 800aef8:	69ba      	ldr	r2, [r7, #24]
 800aefa:	4013      	ands	r3, r2
 800aefc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af06:	2b00      	cmp	r3, #0
 800af08:	d003      	beq.n	800af12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800af0a:	69ba      	ldr	r2, [r7, #24]
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	4313      	orrs	r3, r2
 800af10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800af12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800af1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	43db      	mvns	r3, r3
 800af26:	69ba      	ldr	r2, [r7, #24]
 800af28:	4013      	ands	r3, r2
 800af2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d003      	beq.n	800af40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800af38:	69ba      	ldr	r2, [r7, #24]
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800af40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	43db      	mvns	r3, r3
 800af52:	69ba      	ldr	r2, [r7, #24]
 800af54:	4013      	ands	r3, r2
 800af56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800af64:	69ba      	ldr	r2, [r7, #24]
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	4313      	orrs	r3, r2
 800af6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	69ba      	ldr	r2, [r7, #24]
 800af70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	43db      	mvns	r3, r3
 800af7c:	69ba      	ldr	r2, [r7, #24]
 800af7e:	4013      	ands	r3, r2
 800af80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d003      	beq.n	800af96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800af8e:	69ba      	ldr	r2, [r7, #24]
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	4313      	orrs	r3, r2
 800af94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	69ba      	ldr	r2, [r7, #24]
 800af9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	3301      	adds	r3, #1
 800afa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	fa22 f303 	lsr.w	r3, r2, r3
 800afac:	2b00      	cmp	r3, #0
 800afae:	f47f ae63 	bne.w	800ac78 <HAL_GPIO_Init+0x14>
  }
}
 800afb2:	bf00      	nop
 800afb4:	bf00      	nop
 800afb6:	3724      	adds	r7, #36	; 0x24
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	58000400 	.word	0x58000400

0800afc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	691a      	ldr	r2, [r3, #16]
 800afd4:	887b      	ldrh	r3, [r7, #2]
 800afd6:	4013      	ands	r3, r2
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800afdc:	2301      	movs	r3, #1
 800afde:	73fb      	strb	r3, [r7, #15]
 800afe0:	e001      	b.n	800afe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800afe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3714      	adds	r7, #20
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	460b      	mov	r3, r1
 800affe:	807b      	strh	r3, [r7, #2]
 800b000:	4613      	mov	r3, r2
 800b002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b004:	787b      	ldrb	r3, [r7, #1]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d003      	beq.n	800b012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b00a:	887a      	ldrh	r2, [r7, #2]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b010:	e003      	b.n	800b01a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b012:	887b      	ldrh	r3, [r7, #2]
 800b014:	041a      	lsls	r2, r3, #16
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	619a      	str	r2, [r3, #24]
}
 800b01a:	bf00      	nop
 800b01c:	370c      	adds	r7, #12
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
	...

0800b028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	e08b      	b.n	800b152 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b040:	b2db      	uxtb	r3, r3
 800b042:	2b00      	cmp	r3, #0
 800b044:	d106      	bne.n	800b054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7f7 fafc 	bl	800264c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2224      	movs	r2, #36	; 0x24
 800b058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0201 	bic.w	r2, r2, #1
 800b06a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b078:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	689a      	ldr	r2, [r3, #8]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b088:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d107      	bne.n	800b0a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	689a      	ldr	r2, [r3, #8]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b09e:	609a      	str	r2, [r3, #8]
 800b0a0:	e006      	b.n	800b0b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	689a      	ldr	r2, [r3, #8]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b0ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d108      	bne.n	800b0ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	685a      	ldr	r2, [r3, #4]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0c6:	605a      	str	r2, [r3, #4]
 800b0c8:	e007      	b.n	800b0da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	6859      	ldr	r1, [r3, #4]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	4b1d      	ldr	r3, [pc, #116]	; (800b15c <HAL_I2C_Init+0x134>)
 800b0e6:	430b      	orrs	r3, r1
 800b0e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68da      	ldr	r2, [r3, #12]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b0f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	691a      	ldr	r2, [r3, #16]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	430a      	orrs	r2, r1
 800b112:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	69d9      	ldr	r1, [r3, #28]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a1a      	ldr	r2, [r3, #32]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	430a      	orrs	r2, r1
 800b122:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f042 0201 	orr.w	r2, r2, #1
 800b132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2220      	movs	r2, #32
 800b13e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	02008000 	.word	0x02008000

0800b160 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08a      	sub	sp, #40	; 0x28
 800b164:	af02      	add	r7, sp, #8
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	607a      	str	r2, [r7, #4]
 800b16a:	461a      	mov	r2, r3
 800b16c:	460b      	mov	r3, r1
 800b16e:	817b      	strh	r3, [r7, #10]
 800b170:	4613      	mov	r3, r2
 800b172:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b174:	2300      	movs	r3, #0
 800b176:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b20      	cmp	r3, #32
 800b182:	f040 80ef 	bne.w	800b364 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b194:	d101      	bne.n	800b19a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b196:	2302      	movs	r3, #2
 800b198:	e0e5      	b.n	800b366 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d101      	bne.n	800b1a8 <HAL_I2C_Master_Transmit_DMA+0x48>
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	e0de      	b.n	800b366 <HAL_I2C_Master_Transmit_DMA+0x206>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2221      	movs	r2, #33	; 0x21
 800b1b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2210      	movs	r2, #16
 800b1bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	893a      	ldrh	r2, [r7, #8]
 800b1d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	4a66      	ldr	r2, [pc, #408]	; (800b370 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b1d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	4a66      	ldr	r2, [pc, #408]	; (800b374 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b1dc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	2bff      	cmp	r3, #255	; 0xff
 800b1e6:	d906      	bls.n	800b1f6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	22ff      	movs	r2, #255	; 0xff
 800b1ec:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b1ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1f2:	61fb      	str	r3, [r7, #28]
 800b1f4:	e007      	b.n	800b206 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b204:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d01a      	beq.n	800b244 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b212:	781a      	ldrb	r2, [r3, #0]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b228:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b22e:	b29b      	uxth	r3, r3
 800b230:	3b01      	subs	r3, #1
 800b232:	b29a      	uxth	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b23c:	3b01      	subs	r3, #1
 800b23e:	b29a      	uxth	r2, r3
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d074      	beq.n	800b336 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b250:	2b00      	cmp	r3, #0
 800b252:	d022      	beq.n	800b29a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b258:	4a47      	ldr	r2, [pc, #284]	; (800b378 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b25a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b260:	4a46      	ldr	r2, [pc, #280]	; (800b37c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b262:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b268:	2200      	movs	r2, #0
 800b26a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b270:	2200      	movs	r2, #0
 800b272:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b284:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b28a:	f7fc ff17 	bl	80080bc <HAL_DMA_Start_IT>
 800b28e:	4603      	mov	r3, r0
 800b290:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b292:	7dfb      	ldrb	r3, [r7, #23]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d13a      	bne.n	800b30e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800b298:	e013      	b.n	800b2c2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2220      	movs	r2, #32
 800b29e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e051      	b.n	800b366 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	b2da      	uxtb	r2, r3
 800b2cc:	8979      	ldrh	r1, [r7, #10]
 800b2ce:	4b2c      	ldr	r3, [pc, #176]	; (800b380 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f002 f83b 	bl	800d350 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b2f4:	2110      	movs	r1, #16
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f002 f85c 	bl	800d3b4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	e028      	b.n	800b360 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2220      	movs	r2, #32
 800b312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b322:	f043 0210 	orr.w	r2, r3, #16
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e017      	b.n	800b366 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	4a12      	ldr	r2, [pc, #72]	; (800b384 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800b33a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	8979      	ldrh	r1, [r7, #10]
 800b342:	4b0f      	ldr	r3, [pc, #60]	; (800b380 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f002 f800 	bl	800d350 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b358:	2101      	movs	r1, #1
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f002 f82a 	bl	800d3b4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	e000      	b.n	800b366 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b364:	2302      	movs	r3, #2
  }
}
 800b366:	4618      	mov	r0, r3
 800b368:	3720      	adds	r7, #32
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	ffff0000 	.word	0xffff0000
 800b374:	0800bbbb 	.word	0x0800bbbb
 800b378:	0800cf73 	.word	0x0800cf73
 800b37c:	0800d0a1 	.word	0x0800d0a1
 800b380:	80002000 	.word	0x80002000
 800b384:	0800b74b 	.word	0x0800b74b

0800b388 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af02      	add	r7, sp, #8
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	607a      	str	r2, [r7, #4]
 800b392:	461a      	mov	r2, r3
 800b394:	460b      	mov	r3, r1
 800b396:	817b      	strh	r3, [r7, #10]
 800b398:	4613      	mov	r3, r2
 800b39a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b20      	cmp	r3, #32
 800b3a6:	f040 80cd 	bne.w	800b544 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3b8:	d101      	bne.n	800b3be <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	e0c3      	b.n	800b546 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d101      	bne.n	800b3cc <HAL_I2C_Master_Receive_DMA+0x44>
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	e0bc      	b.n	800b546 <HAL_I2C_Master_Receive_DMA+0x1be>
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2222      	movs	r2, #34	; 0x22
 800b3d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2210      	movs	r2, #16
 800b3e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	893a      	ldrh	r2, [r7, #8]
 800b3f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	4a55      	ldr	r2, [pc, #340]	; (800b550 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800b3fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	4a55      	ldr	r2, [pc, #340]	; (800b554 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800b400:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b406:	b29b      	uxth	r3, r3
 800b408:	2bff      	cmp	r3, #255	; 0xff
 800b40a:	d906      	bls.n	800b41a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	22ff      	movs	r2, #255	; 0xff
 800b410:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	e007      	b.n	800b42a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b41e:	b29a      	uxth	r2, r3
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b428:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d070      	beq.n	800b514 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b436:	2b00      	cmp	r3, #0
 800b438:	d020      	beq.n	800b47c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b43e:	4a46      	ldr	r2, [pc, #280]	; (800b558 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800b440:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b446:	4a45      	ldr	r2, [pc, #276]	; (800b55c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800b448:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b44e:	2200      	movs	r2, #0
 800b450:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b456:	2200      	movs	r2, #0
 800b458:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	3324      	adds	r3, #36	; 0x24
 800b464:	4619      	mov	r1, r3
 800b466:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b46c:	f7fc fe26 	bl	80080bc <HAL_DMA_Start_IT>
 800b470:	4603      	mov	r3, r0
 800b472:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b474:	7cfb      	ldrb	r3, [r7, #19]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d138      	bne.n	800b4ec <HAL_I2C_Master_Receive_DMA+0x164>
 800b47a:	e013      	b.n	800b4a4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2220      	movs	r2, #32
 800b480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b490:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e050      	b.n	800b546 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	8979      	ldrh	r1, [r7, #10]
 800b4ac:	4b2c      	ldr	r3, [pc, #176]	; (800b560 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f001 ff4c 	bl	800d350 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4bc:	b29a      	uxth	r2, r3
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b4d2:	2110      	movs	r1, #16
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f001 ff6d 	bl	800d3b4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	e029      	b.n	800b540 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b500:	f043 0210 	orr.w	r2, r3, #16
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	e018      	b.n	800b546 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4a13      	ldr	r2, [pc, #76]	; (800b564 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800b518:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	8979      	ldrh	r1, [r7, #10]
 800b522:	4b0f      	ldr	r3, [pc, #60]	; (800b560 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f001 ff10 	bl	800d350 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b538:	2102      	movs	r1, #2
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f001 ff3a 	bl	800d3b4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b540:	2300      	movs	r3, #0
 800b542:	e000      	b.n	800b546 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800b544:	2302      	movs	r3, #2
  }
}
 800b546:	4618      	mov	r0, r3
 800b548:	3718      	adds	r7, #24
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	ffff0000 	.word	0xffff0000
 800b554:	0800bbbb 	.word	0x0800bbbb
 800b558:	0800d009 	.word	0x0800d009
 800b55c:	0800d0a1 	.word	0x0800d0a1
 800b560:	80002400 	.word	0x80002400
 800b564:	0800b74b 	.word	0x0800b74b

0800b568 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b584:	2b00      	cmp	r3, #0
 800b586:	d005      	beq.n	800b594 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	68f9      	ldr	r1, [r7, #12]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	4798      	blx	r3
  }
}
 800b594:	bf00      	nop
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	0a1b      	lsrs	r3, r3, #8
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d010      	beq.n	800b5e2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	09db      	lsrs	r3, r3, #7
 800b5c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00a      	beq.n	800b5e2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d0:	f043 0201 	orr.w	r2, r3, #1
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	0a9b      	lsrs	r3, r3, #10
 800b5e6:	f003 0301 	and.w	r3, r3, #1
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d010      	beq.n	800b610 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	09db      	lsrs	r3, r3, #7
 800b5f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5fe:	f043 0208 	orr.w	r2, r3, #8
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b60e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	0a5b      	lsrs	r3, r3, #9
 800b614:	f003 0301 	and.w	r3, r3, #1
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d010      	beq.n	800b63e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	09db      	lsrs	r3, r3, #7
 800b620:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00a      	beq.n	800b63e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b62c:	f043 0202 	orr.w	r2, r3, #2
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b63c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b642:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f003 030b 	and.w	r3, r3, #11
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d003      	beq.n	800b656 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b64e:	68f9      	ldr	r1, [r7, #12]
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f001 fb53 	bl	800ccfc <I2C_ITError>
  }
}
 800b656:	bf00      	nop
 800b658:	3718      	adds	r7, #24
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b65e:	b480      	push	{r7}
 800b660:	b083      	sub	sp, #12
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b666:	bf00      	nop
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b672:	b480      	push	{r7}
 800b674:	b083      	sub	sp, #12
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b67a:	bf00      	nop
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b68e:	bf00      	nop
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b083      	sub	sp, #12
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b6a2:	bf00      	nop
 800b6a4:	370c      	adds	r7, #12
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b083      	sub	sp, #12
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	70fb      	strb	r3, [r7, #3]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b6be:	bf00      	nop
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b083      	sub	sp, #12
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b6d2:	bf00      	nop
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b6e6:	bf00      	nop
 800b6e8:	370c      	adds	r7, #12
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6f2:	b480      	push	{r7}
 800b6f4:	b083      	sub	sp, #12
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800b6fa:	bf00      	nop
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b70e:	bf00      	nop
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b083      	sub	sp, #12
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b722:	bf00      	nop
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b72e:	b480      	push	{r7}
 800b730:	b083      	sub	sp, #12
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b73c:	b2db      	uxtb	r3, r3
}
 800b73e:	4618      	mov	r0, r3
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b088      	sub	sp, #32
 800b74e:	af02      	add	r7, sp, #8
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	60b9      	str	r1, [r7, #8]
 800b754:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b760:	2b01      	cmp	r3, #1
 800b762:	d101      	bne.n	800b768 <I2C_Master_ISR_IT+0x1e>
 800b764:	2302      	movs	r3, #2
 800b766:	e120      	b.n	800b9aa <I2C_Master_ISR_IT+0x260>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2201      	movs	r2, #1
 800b76c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	091b      	lsrs	r3, r3, #4
 800b774:	f003 0301 	and.w	r3, r3, #1
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d013      	beq.n	800b7a4 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	091b      	lsrs	r3, r3, #4
 800b780:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00d      	beq.n	800b7a4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2210      	movs	r2, #16
 800b78e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b794:	f043 0204 	orr.w	r2, r3, #4
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f001 fbc4 	bl	800cf2a <I2C_Flush_TXDR>
 800b7a2:	e0ed      	b.n	800b980 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	089b      	lsrs	r3, r3, #2
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d023      	beq.n	800b7f8 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	089b      	lsrs	r3, r3, #2
 800b7b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d01d      	beq.n	800b7f8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	f023 0304 	bic.w	r3, r3, #4
 800b7c2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ce:	b2d2      	uxtb	r2, r2
 800b7d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	1c5a      	adds	r2, r3, #1
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b7f6:	e0c3      	b.n	800b980 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	099b      	lsrs	r3, r3, #6
 800b7fc:	f003 0301 	and.w	r3, r3, #1
 800b800:	2b00      	cmp	r3, #0
 800b802:	d12a      	bne.n	800b85a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	085b      	lsrs	r3, r3, #1
 800b808:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d024      	beq.n	800b85a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	085b      	lsrs	r3, r3, #1
 800b814:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d01e      	beq.n	800b85a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b820:	b29b      	uxth	r3, r3
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 80ac 	beq.w	800b980 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82c:	781a      	ldrb	r2, [r3, #0]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b838:	1c5a      	adds	r2, r3, #1
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b842:	3b01      	subs	r3, #1
 800b844:	b29a      	uxth	r2, r3
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b84e:	b29b      	uxth	r3, r3
 800b850:	3b01      	subs	r3, #1
 800b852:	b29a      	uxth	r2, r3
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800b858:	e092      	b.n	800b980 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	09db      	lsrs	r3, r3, #7
 800b85e:	f003 0301 	and.w	r3, r3, #1
 800b862:	2b00      	cmp	r3, #0
 800b864:	d05d      	beq.n	800b922 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	099b      	lsrs	r3, r3, #6
 800b86a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d057      	beq.n	800b922 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b876:	b29b      	uxth	r3, r3
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d040      	beq.n	800b8fe <I2C_Master_ISR_IT+0x1b4>
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b880:	2b00      	cmp	r3, #0
 800b882:	d13c      	bne.n	800b8fe <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b890:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b896:	b29b      	uxth	r3, r3
 800b898:	2bff      	cmp	r3, #255	; 0xff
 800b89a:	d90e      	bls.n	800b8ba <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	22ff      	movs	r2, #255	; 0xff
 800b8a0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8a6:	b2da      	uxtb	r2, r3
 800b8a8:	8a79      	ldrh	r1, [r7, #18]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f001 fd4c 	bl	800d350 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8b8:	e032      	b.n	800b920 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b8cc:	d00b      	beq.n	800b8e6 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d8:	8a79      	ldrh	r1, [r7, #18]
 800b8da:	2000      	movs	r0, #0
 800b8dc:	9000      	str	r0, [sp, #0]
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f001 fd36 	bl	800d350 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8e4:	e01c      	b.n	800b920 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	8a79      	ldrh	r1, [r7, #18]
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f001 fd2a 	bl	800d350 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8fc:	e010      	b.n	800b920 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b90c:	d003      	beq.n	800b916 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f000 fdde 	bl	800c4d0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b914:	e034      	b.n	800b980 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b916:	2140      	movs	r1, #64	; 0x40
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f001 f9ef 	bl	800ccfc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b91e:	e02f      	b.n	800b980 <I2C_Master_ISR_IT+0x236>
 800b920:	e02e      	b.n	800b980 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	099b      	lsrs	r3, r3, #6
 800b926:	f003 0301 	and.w	r3, r3, #1
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d028      	beq.n	800b980 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	099b      	lsrs	r3, r3, #6
 800b932:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800b936:	2b00      	cmp	r3, #0
 800b938:	d022      	beq.n	800b980 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b93e:	b29b      	uxth	r3, r3
 800b940:	2b00      	cmp	r3, #0
 800b942:	d119      	bne.n	800b978 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b94e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b952:	d015      	beq.n	800b980 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b958:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b95c:	d108      	bne.n	800b970 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	685a      	ldr	r2, [r3, #4]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b96c:	605a      	str	r2, [r3, #4]
 800b96e:	e007      	b.n	800b980 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f000 fdad 	bl	800c4d0 <I2C_ITMasterSeqCplt>
 800b976:	e003      	b.n	800b980 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b978:	2140      	movs	r1, #64	; 0x40
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f001 f9be 	bl	800ccfc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	095b      	lsrs	r3, r3, #5
 800b984:	f003 0301 	and.w	r3, r3, #1
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d009      	beq.n	800b9a0 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	095b      	lsrs	r3, r3, #5
 800b990:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800b998:	6979      	ldr	r1, [r7, #20]
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f000 fe34 	bl	800c608 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b086      	sub	sp, #24
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	60b9      	str	r1, [r7, #8]
 800b9bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d101      	bne.n	800b9d6 <I2C_Slave_ISR_IT+0x24>
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	e0ed      	b.n	800bbb2 <I2C_Slave_ISR_IT+0x200>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	095b      	lsrs	r3, r3, #5
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00a      	beq.n	800ba00 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	095b      	lsrs	r3, r3, #5
 800b9ee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d004      	beq.n	800ba00 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b9f6:	6939      	ldr	r1, [r7, #16]
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f000 fecf 	bl	800c79c <I2C_ITSlaveCplt>
 800b9fe:	e0d3      	b.n	800bba8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	091b      	lsrs	r3, r3, #4
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d04d      	beq.n	800baa8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	091b      	lsrs	r3, r3, #4
 800ba10:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d047      	beq.n	800baa8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d128      	bne.n	800ba74 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	2b28      	cmp	r3, #40	; 0x28
 800ba2c:	d108      	bne.n	800ba40 <I2C_Slave_ISR_IT+0x8e>
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba34:	d104      	bne.n	800ba40 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ba36:	6939      	ldr	r1, [r7, #16]
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f001 f909 	bl	800cc50 <I2C_ITListenCplt>
 800ba3e:	e032      	b.n	800baa6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	2b29      	cmp	r3, #41	; 0x29
 800ba4a:	d10e      	bne.n	800ba6a <I2C_Slave_ISR_IT+0xb8>
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba52:	d00a      	beq.n	800ba6a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2210      	movs	r2, #16
 800ba5a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f001 fa64 	bl	800cf2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f000 fd71 	bl	800c54a <I2C_ITSlaveSeqCplt>
 800ba68:	e01d      	b.n	800baa6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2210      	movs	r2, #16
 800ba70:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800ba72:	e096      	b.n	800bba2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2210      	movs	r2, #16
 800ba7a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba80:	f043 0204 	orr.w	r2, r3, #4
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d004      	beq.n	800ba98 <I2C_Slave_ISR_IT+0xe6>
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba94:	f040 8085 	bne.w	800bba2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f001 f92c 	bl	800ccfc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800baa4:	e07d      	b.n	800bba2 <I2C_Slave_ISR_IT+0x1f0>
 800baa6:	e07c      	b.n	800bba2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	089b      	lsrs	r3, r3, #2
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d030      	beq.n	800bb16 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	089b      	lsrs	r3, r3, #2
 800bab8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800babc:	2b00      	cmp	r3, #0
 800babe:	d02a      	beq.n	800bb16 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d018      	beq.n	800bafc <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad4:	b2d2      	uxtb	r2, r2
 800bad6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800badc:	1c5a      	adds	r2, r3, #1
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bae6:	3b01      	subs	r3, #1
 800bae8:	b29a      	uxth	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	3b01      	subs	r3, #1
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d14f      	bne.n	800bba6 <I2C_Slave_ISR_IT+0x1f4>
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb0c:	d04b      	beq.n	800bba6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f000 fd1b 	bl	800c54a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bb14:	e047      	b.n	800bba6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	08db      	lsrs	r3, r3, #3
 800bb1a:	f003 0301 	and.w	r3, r3, #1
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00a      	beq.n	800bb38 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	08db      	lsrs	r3, r3, #3
 800bb26:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d004      	beq.n	800bb38 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bb2e:	6939      	ldr	r1, [r7, #16]
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f000 fc49 	bl	800c3c8 <I2C_ITAddrCplt>
 800bb36:	e037      	b.n	800bba8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	085b      	lsrs	r3, r3, #1
 800bb3c:	f003 0301 	and.w	r3, r3, #1
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d031      	beq.n	800bba8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	085b      	lsrs	r3, r3, #1
 800bb48:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d02b      	beq.n	800bba8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d018      	beq.n	800bb8c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5e:	781a      	ldrb	r2, [r3, #0]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	3b01      	subs	r3, #1
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb82:	3b01      	subs	r3, #1
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	851a      	strh	r2, [r3, #40]	; 0x28
 800bb8a:	e00d      	b.n	800bba8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bb92:	d002      	beq.n	800bb9a <I2C_Slave_ISR_IT+0x1e8>
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d106      	bne.n	800bba8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f000 fcd5 	bl	800c54a <I2C_ITSlaveSeqCplt>
 800bba0:	e002      	b.n	800bba8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800bba2:	bf00      	nop
 800bba4:	e000      	b.n	800bba8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800bba6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3718      	adds	r7, #24
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b088      	sub	sp, #32
 800bbbe:	af02      	add	r7, sp, #8
 800bbc0:	60f8      	str	r0, [r7, #12]
 800bbc2:	60b9      	str	r1, [r7, #8]
 800bbc4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d101      	bne.n	800bbd4 <I2C_Master_ISR_DMA+0x1a>
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	e0e1      	b.n	800bd98 <I2C_Master_ISR_DMA+0x1de>
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	091b      	lsrs	r3, r3, #4
 800bbe0:	f003 0301 	and.w	r3, r3, #1
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d017      	beq.n	800bc18 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	091b      	lsrs	r3, r3, #4
 800bbec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d011      	beq.n	800bc18 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2210      	movs	r2, #16
 800bbfa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc00:	f043 0204 	orr.w	r2, r3, #4
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bc08:	2120      	movs	r1, #32
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f001 fbd2 	bl	800d3b4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f001 f98a 	bl	800cf2a <I2C_Flush_TXDR>
 800bc16:	e0ba      	b.n	800bd8e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	09db      	lsrs	r3, r3, #7
 800bc1c:	f003 0301 	and.w	r3, r3, #1
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d072      	beq.n	800bd0a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	099b      	lsrs	r3, r3, #6
 800bc28:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d06c      	beq.n	800bd0a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc3e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d04e      	beq.n	800bce8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc56:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	2bff      	cmp	r3, #255	; 0xff
 800bc60:	d906      	bls.n	800bc70 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	22ff      	movs	r2, #255	; 0xff
 800bc66:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800bc68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc6c:	617b      	str	r3, [r7, #20]
 800bc6e:	e010      	b.n	800bc92 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc82:	d003      	beq.n	800bc8c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc88:	617b      	str	r3, [r7, #20]
 800bc8a:	e002      	b.n	800bc92 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800bc8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc90:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	8a79      	ldrh	r1, [r7, #18]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f001 fb55 	bl	800d350 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	2b22      	cmp	r3, #34	; 0x22
 800bcc2:	d108      	bne.n	800bcd6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bcd2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bcd4:	e05b      	b.n	800bd8e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bce4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bce6:	e052      	b.n	800bd8e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcf6:	d003      	beq.n	800bd00 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 fbe9 	bl	800c4d0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800bcfe:	e046      	b.n	800bd8e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bd00:	2140      	movs	r1, #64	; 0x40
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f000 fffa 	bl	800ccfc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800bd08:	e041      	b.n	800bd8e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	099b      	lsrs	r3, r3, #6
 800bd0e:	f003 0301 	and.w	r3, r3, #1
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d029      	beq.n	800bd6a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	099b      	lsrs	r3, r3, #6
 800bd1a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d023      	beq.n	800bd6a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d119      	bne.n	800bd60 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd3a:	d027      	beq.n	800bd8c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd44:	d108      	bne.n	800bd58 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd54:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800bd56:	e019      	b.n	800bd8c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f000 fbb9 	bl	800c4d0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800bd5e:	e015      	b.n	800bd8c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bd60:	2140      	movs	r1, #64	; 0x40
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f000 ffca 	bl	800ccfc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bd68:	e010      	b.n	800bd8c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	095b      	lsrs	r3, r3, #5
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00b      	beq.n	800bd8e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	095b      	lsrs	r3, r3, #5
 800bd7a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d005      	beq.n	800bd8e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800bd82:	68b9      	ldr	r1, [r7, #8]
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f000 fc3f 	bl	800c608 <I2C_ITMasterCplt>
 800bd8a:	e000      	b.n	800bd8e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800bd8c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3718      	adds	r7, #24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b088      	sub	sp, #32
 800bda4:	af02      	add	r7, sp, #8
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800bdac:	4b92      	ldr	r3, [pc, #584]	; (800bff8 <I2C_Mem_ISR_DMA+0x258>)
 800bdae:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d101      	bne.n	800bdbe <I2C_Mem_ISR_DMA+0x1e>
 800bdba:	2302      	movs	r3, #2
 800bdbc:	e118      	b.n	800bff0 <I2C_Mem_ISR_DMA+0x250>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	091b      	lsrs	r3, r3, #4
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d017      	beq.n	800be02 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	091b      	lsrs	r3, r3, #4
 800bdd6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d011      	beq.n	800be02 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2210      	movs	r2, #16
 800bde4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdea:	f043 0204 	orr.w	r2, r3, #4
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bdf2:	2120      	movs	r1, #32
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f001 fadd 	bl	800d3b4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f001 f895 	bl	800cf2a <I2C_Flush_TXDR>
 800be00:	e0f1      	b.n	800bfe6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	085b      	lsrs	r3, r3, #1
 800be06:	f003 0301 	and.w	r3, r3, #1
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d00f      	beq.n	800be2e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	085b      	lsrs	r3, r3, #1
 800be12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be16:	2b00      	cmp	r3, #0
 800be18:	d009      	beq.n	800be2e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800be22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be2a:	651a      	str	r2, [r3, #80]	; 0x50
 800be2c:	e0db      	b.n	800bfe6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	09db      	lsrs	r3, r3, #7
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	2b00      	cmp	r3, #0
 800be38:	d060      	beq.n	800befc <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	099b      	lsrs	r3, r3, #6
 800be3e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be42:	2b00      	cmp	r3, #0
 800be44:	d05a      	beq.n	800befc <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800be46:	2101      	movs	r1, #1
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f001 fb37 	bl	800d4bc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800be4e:	2110      	movs	r1, #16
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f001 faaf 	bl	800d3b4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d048      	beq.n	800bef2 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be64:	b29b      	uxth	r3, r3
 800be66:	2bff      	cmp	r3, #255	; 0xff
 800be68:	d910      	bls.n	800be8c <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	22ff      	movs	r2, #255	; 0xff
 800be6e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be74:	b299      	uxth	r1, r3
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	2300      	movs	r3, #0
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f001 fa63 	bl	800d350 <I2C_TransferConfig>
 800be8a:	e011      	b.n	800beb0 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be90:	b29a      	uxth	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be9a:	b299      	uxth	r1, r3
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	2300      	movs	r3, #0
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800beaa:	68f8      	ldr	r0, [r7, #12]
 800beac:	f001 fa50 	bl	800d350 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b22      	cmp	r3, #34	; 0x22
 800becc:	d108      	bne.n	800bee0 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bedc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bede:	e082      	b.n	800bfe6 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800beee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bef0:	e079      	b.n	800bfe6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bef2:	2140      	movs	r1, #64	; 0x40
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f000 ff01 	bl	800ccfc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800befa:	e074      	b.n	800bfe6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	099b      	lsrs	r3, r3, #6
 800bf00:	f003 0301 	and.w	r3, r3, #1
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d05e      	beq.n	800bfc6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	099b      	lsrs	r3, r3, #6
 800bf0c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d058      	beq.n	800bfc6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bf14:	2101      	movs	r1, #1
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f001 fad0 	bl	800d4bc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bf1c:	2110      	movs	r1, #16
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f001 fa48 	bl	800d3b4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	2b22      	cmp	r3, #34	; 0x22
 800bf2e:	d101      	bne.n	800bf34 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800bf30:	4b32      	ldr	r3, [pc, #200]	; (800bffc <I2C_Mem_ISR_DMA+0x25c>)
 800bf32:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	2bff      	cmp	r3, #255	; 0xff
 800bf3c:	d910      	bls.n	800bf60 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	22ff      	movs	r2, #255	; 0xff
 800bf42:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf48:	b299      	uxth	r1, r3
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f001 f9f9 	bl	800d350 <I2C_TransferConfig>
 800bf5e:	e011      	b.n	800bf84 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf6e:	b299      	uxth	r1, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f001 f9e6 	bl	800d350 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	2b22      	cmp	r3, #34	; 0x22
 800bfa0:	d108      	bne.n	800bfb4 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bfb0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bfb2:	e018      	b.n	800bfe6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfc2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bfc4:	e00f      	b.n	800bfe6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	095b      	lsrs	r3, r3, #5
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d009      	beq.n	800bfe6 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	095b      	lsrs	r3, r3, #5
 800bfd6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d003      	beq.n	800bfe6 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800bfde:	68b9      	ldr	r1, [r7, #8]
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f000 fb11 	bl	800c608 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3718      	adds	r7, #24
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	80002000 	.word	0x80002000
 800bffc:	80002400 	.word	0x80002400

0800c000 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b088      	sub	sp, #32
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c010:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c012:	2300      	movs	r3, #0
 800c014:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d101      	bne.n	800c024 <I2C_Slave_ISR_DMA+0x24>
 800c020:	2302      	movs	r3, #2
 800c022:	e1cc      	b.n	800c3be <I2C_Slave_ISR_DMA+0x3be>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2201      	movs	r2, #1
 800c028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	095b      	lsrs	r3, r3, #5
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00a      	beq.n	800c04e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	095b      	lsrs	r3, r3, #5
 800c03c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c040:	2b00      	cmp	r3, #0
 800c042:	d004      	beq.n	800c04e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c044:	68b9      	ldr	r1, [r7, #8]
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f000 fba8 	bl	800c79c <I2C_ITSlaveCplt>
 800c04c:	e1b2      	b.n	800c3b4 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	091b      	lsrs	r3, r3, #4
 800c052:	f003 0301 	and.w	r3, r3, #1
 800c056:	2b00      	cmp	r3, #0
 800c058:	f000 819c 	beq.w	800c394 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	091b      	lsrs	r3, r3, #4
 800c060:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c064:	2b00      	cmp	r3, #0
 800c066:	f000 8195 	beq.w	800c394 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	0b9b      	lsrs	r3, r3, #14
 800c06e:	f003 0301 	and.w	r3, r3, #1
 800c072:	2b00      	cmp	r3, #0
 800c074:	d106      	bne.n	800c084 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	0bdb      	lsrs	r3, r3, #15
 800c07a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 8181 	beq.w	800c386 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d07c      	beq.n	800c186 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	0bdb      	lsrs	r3, r3, #15
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b00      	cmp	r3, #0
 800c096:	d076      	beq.n	800c186 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a75      	ldr	r2, [pc, #468]	; (800c274 <I2C_Slave_ISR_DMA+0x274>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d059      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a73      	ldr	r2, [pc, #460]	; (800c278 <I2C_Slave_ISR_DMA+0x278>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d053      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a71      	ldr	r2, [pc, #452]	; (800c27c <I2C_Slave_ISR_DMA+0x27c>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d04d      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a6f      	ldr	r2, [pc, #444]	; (800c280 <I2C_Slave_ISR_DMA+0x280>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d047      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a6d      	ldr	r2, [pc, #436]	; (800c284 <I2C_Slave_ISR_DMA+0x284>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d041      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a6b      	ldr	r2, [pc, #428]	; (800c288 <I2C_Slave_ISR_DMA+0x288>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d03b      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a69      	ldr	r2, [pc, #420]	; (800c28c <I2C_Slave_ISR_DMA+0x28c>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d035      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a67      	ldr	r2, [pc, #412]	; (800c290 <I2C_Slave_ISR_DMA+0x290>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d02f      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a65      	ldr	r2, [pc, #404]	; (800c294 <I2C_Slave_ISR_DMA+0x294>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d029      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a63      	ldr	r2, [pc, #396]	; (800c298 <I2C_Slave_ISR_DMA+0x298>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d023      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a61      	ldr	r2, [pc, #388]	; (800c29c <I2C_Slave_ISR_DMA+0x29c>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d01d      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a5f      	ldr	r2, [pc, #380]	; (800c2a0 <I2C_Slave_ISR_DMA+0x2a0>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d017      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a5d      	ldr	r2, [pc, #372]	; (800c2a4 <I2C_Slave_ISR_DMA+0x2a4>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d011      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a5b      	ldr	r2, [pc, #364]	; (800c2a8 <I2C_Slave_ISR_DMA+0x2a8>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d00b      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a59      	ldr	r2, [pc, #356]	; (800c2ac <I2C_Slave_ISR_DMA+0x2ac>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d005      	beq.n	800c158 <I2C_Slave_ISR_DMA+0x158>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a57      	ldr	r2, [pc, #348]	; (800c2b0 <I2C_Slave_ISR_DMA+0x2b0>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d109      	bne.n	800c16c <I2C_Slave_ISR_DMA+0x16c>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	bf0c      	ite	eq
 800c164:	2301      	moveq	r3, #1
 800c166:	2300      	movne	r3, #0
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	e008      	b.n	800c17e <I2C_Slave_ISR_DMA+0x17e>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	bf0c      	ite	eq
 800c178:	2301      	moveq	r3, #1
 800c17a:	2300      	movne	r3, #0
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d001      	beq.n	800c186 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c182:	2301      	movs	r3, #1
 800c184:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f000 809f 	beq.w	800c2ce <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	0b9b      	lsrs	r3, r3, #14
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 8098 	beq.w	800c2ce <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a33      	ldr	r2, [pc, #204]	; (800c274 <I2C_Slave_ISR_DMA+0x274>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d059      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a31      	ldr	r2, [pc, #196]	; (800c278 <I2C_Slave_ISR_DMA+0x278>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d053      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a2f      	ldr	r2, [pc, #188]	; (800c27c <I2C_Slave_ISR_DMA+0x27c>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d04d      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a2d      	ldr	r2, [pc, #180]	; (800c280 <I2C_Slave_ISR_DMA+0x280>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d047      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a2b      	ldr	r2, [pc, #172]	; (800c284 <I2C_Slave_ISR_DMA+0x284>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d041      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a29      	ldr	r2, [pc, #164]	; (800c288 <I2C_Slave_ISR_DMA+0x288>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d03b      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a27      	ldr	r2, [pc, #156]	; (800c28c <I2C_Slave_ISR_DMA+0x28c>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d035      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a25      	ldr	r2, [pc, #148]	; (800c290 <I2C_Slave_ISR_DMA+0x290>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d02f      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a23      	ldr	r2, [pc, #140]	; (800c294 <I2C_Slave_ISR_DMA+0x294>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d029      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a21      	ldr	r2, [pc, #132]	; (800c298 <I2C_Slave_ISR_DMA+0x298>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d023      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a1f      	ldr	r2, [pc, #124]	; (800c29c <I2C_Slave_ISR_DMA+0x29c>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d01d      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a1d      	ldr	r2, [pc, #116]	; (800c2a0 <I2C_Slave_ISR_DMA+0x2a0>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d017      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a1b      	ldr	r2, [pc, #108]	; (800c2a4 <I2C_Slave_ISR_DMA+0x2a4>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d011      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a19      	ldr	r2, [pc, #100]	; (800c2a8 <I2C_Slave_ISR_DMA+0x2a8>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d00b      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a17      	ldr	r2, [pc, #92]	; (800c2ac <I2C_Slave_ISR_DMA+0x2ac>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d005      	beq.n	800c25e <I2C_Slave_ISR_DMA+0x25e>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a15      	ldr	r2, [pc, #84]	; (800c2b0 <I2C_Slave_ISR_DMA+0x2b0>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d12a      	bne.n	800c2b4 <I2C_Slave_ISR_DMA+0x2b4>
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	bf0c      	ite	eq
 800c26a:	2301      	moveq	r3, #1
 800c26c:	2300      	movne	r3, #0
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	e029      	b.n	800c2c6 <I2C_Slave_ISR_DMA+0x2c6>
 800c272:	bf00      	nop
 800c274:	40020010 	.word	0x40020010
 800c278:	40020028 	.word	0x40020028
 800c27c:	40020040 	.word	0x40020040
 800c280:	40020058 	.word	0x40020058
 800c284:	40020070 	.word	0x40020070
 800c288:	40020088 	.word	0x40020088
 800c28c:	400200a0 	.word	0x400200a0
 800c290:	400200b8 	.word	0x400200b8
 800c294:	40020410 	.word	0x40020410
 800c298:	40020428 	.word	0x40020428
 800c29c:	40020440 	.word	0x40020440
 800c2a0:	40020458 	.word	0x40020458
 800c2a4:	40020470 	.word	0x40020470
 800c2a8:	40020488 	.word	0x40020488
 800c2ac:	400204a0 	.word	0x400204a0
 800c2b0:	400204b8 	.word	0x400204b8
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	bf0c      	ite	eq
 800c2c0:	2301      	moveq	r3, #1
 800c2c2:	2300      	movne	r3, #0
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d128      	bne.n	800c326 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b28      	cmp	r3, #40	; 0x28
 800c2de:	d108      	bne.n	800c2f2 <I2C_Slave_ISR_DMA+0x2f2>
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2e6:	d104      	bne.n	800c2f2 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c2e8:	68b9      	ldr	r1, [r7, #8]
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f000 fcb0 	bl	800cc50 <I2C_ITListenCplt>
 800c2f0:	e048      	b.n	800c384 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b29      	cmp	r3, #41	; 0x29
 800c2fc:	d10e      	bne.n	800c31c <I2C_Slave_ISR_DMA+0x31c>
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c304:	d00a      	beq.n	800c31c <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2210      	movs	r2, #16
 800c30c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f000 fe0b 	bl	800cf2a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f000 f918 	bl	800c54a <I2C_ITSlaveSeqCplt>
 800c31a:	e033      	b.n	800c384 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2210      	movs	r2, #16
 800c322:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c324:	e034      	b.n	800c390 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2210      	movs	r2, #16
 800c32c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c332:	f043 0204 	orr.w	r2, r3, #4
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c340:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d003      	beq.n	800c350 <I2C_Slave_ISR_DMA+0x350>
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c34e:	d11f      	bne.n	800c390 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c350:	7dfb      	ldrb	r3, [r7, #23]
 800c352:	2b21      	cmp	r3, #33	; 0x21
 800c354:	d002      	beq.n	800c35c <I2C_Slave_ISR_DMA+0x35c>
 800c356:	7dfb      	ldrb	r3, [r7, #23]
 800c358:	2b29      	cmp	r3, #41	; 0x29
 800c35a:	d103      	bne.n	800c364 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2221      	movs	r2, #33	; 0x21
 800c360:	631a      	str	r2, [r3, #48]	; 0x30
 800c362:	e008      	b.n	800c376 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c364:	7dfb      	ldrb	r3, [r7, #23]
 800c366:	2b22      	cmp	r3, #34	; 0x22
 800c368:	d002      	beq.n	800c370 <I2C_Slave_ISR_DMA+0x370>
 800c36a:	7dfb      	ldrb	r3, [r7, #23]
 800c36c:	2b2a      	cmp	r3, #42	; 0x2a
 800c36e:	d102      	bne.n	800c376 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2222      	movs	r2, #34	; 0x22
 800c374:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c37a:	4619      	mov	r1, r3
 800c37c:	68f8      	ldr	r0, [r7, #12]
 800c37e:	f000 fcbd 	bl	800ccfc <I2C_ITError>
      if (treatdmanack == 1U)
 800c382:	e005      	b.n	800c390 <I2C_Slave_ISR_DMA+0x390>
 800c384:	e004      	b.n	800c390 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2210      	movs	r2, #16
 800c38c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c38e:	e011      	b.n	800c3b4 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800c390:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c392:	e00f      	b.n	800c3b4 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	08db      	lsrs	r3, r3, #3
 800c398:	f003 0301 	and.w	r3, r3, #1
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d009      	beq.n	800c3b4 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	08db      	lsrs	r3, r3, #3
 800c3a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d003      	beq.n	800c3b4 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c3ac:	68b9      	ldr	r1, [r7, #8]
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f000 f80a 	bl	800c3c8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3720      	adds	r7, #32
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop

0800c3c8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c3de:	2b28      	cmp	r3, #40	; 0x28
 800c3e0:	d16a      	bne.n	800c4b8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	0c1b      	lsrs	r3, r3, #16
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	f003 0301 	and.w	r3, r3, #1
 800c3f0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	0c1b      	lsrs	r3, r3, #16
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c400:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	b29b      	uxth	r3, r3
 800c40a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c40e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	b29b      	uxth	r3, r3
 800c418:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c41c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	2b02      	cmp	r3, #2
 800c424:	d138      	bne.n	800c498 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c426:	897b      	ldrh	r3, [r7, #10]
 800c428:	09db      	lsrs	r3, r3, #7
 800c42a:	b29a      	uxth	r2, r3
 800c42c:	89bb      	ldrh	r3, [r7, #12]
 800c42e:	4053      	eors	r3, r2
 800c430:	b29b      	uxth	r3, r3
 800c432:	f003 0306 	and.w	r3, r3, #6
 800c436:	2b00      	cmp	r3, #0
 800c438:	d11c      	bne.n	800c474 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c43a:	897b      	ldrh	r3, [r7, #10]
 800c43c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d13b      	bne.n	800c4c8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2208      	movs	r2, #8
 800c45c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c466:	89ba      	ldrh	r2, [r7, #12]
 800c468:	7bfb      	ldrb	r3, [r7, #15]
 800c46a:	4619      	mov	r1, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7ff f91e 	bl	800b6ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c472:	e029      	b.n	800c4c8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c474:	893b      	ldrh	r3, [r7, #8]
 800c476:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f001 f81d 	bl	800d4bc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c48a:	89ba      	ldrh	r2, [r7, #12]
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f7ff f90c 	bl	800b6ae <HAL_I2C_AddrCallback>
}
 800c496:	e017      	b.n	800c4c8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f001 f80d 	bl	800d4bc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c4aa:	89ba      	ldrh	r2, [r7, #12]
 800c4ac:	7bfb      	ldrb	r3, [r7, #15]
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff f8fc 	bl	800b6ae <HAL_I2C_AddrCallback>
}
 800c4b6:	e007      	b.n	800c4c8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2208      	movs	r2, #8
 800c4be:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c4c8:	bf00      	nop
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	2b21      	cmp	r3, #33	; 0x21
 800c4ea:	d115      	bne.n	800c518 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2220      	movs	r2, #32
 800c4f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2211      	movs	r2, #17
 800c4f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c500:	2101      	movs	r1, #1
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 ffda 	bl	800d4bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7ff f8a4 	bl	800b65e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c516:	e014      	b.n	800c542 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2220      	movs	r2, #32
 800c51c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2212      	movs	r2, #18
 800c524:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c52c:	2102      	movs	r1, #2
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 ffc4 	bl	800d4bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7ff f898 	bl	800b672 <HAL_I2C_MasterRxCpltCallback>
}
 800c542:	bf00      	nop
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b084      	sub	sp, #16
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	0b9b      	lsrs	r3, r3, #14
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d008      	beq.n	800c580 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c57c:	601a      	str	r2, [r3, #0]
 800c57e:	e00d      	b.n	800c59c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	0bdb      	lsrs	r3, r3, #15
 800c584:	f003 0301 	and.w	r3, r3, #1
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d007      	beq.n	800c59c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c59a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b29      	cmp	r3, #41	; 0x29
 800c5a6:	d112      	bne.n	800c5ce <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2228      	movs	r2, #40	; 0x28
 800c5ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2221      	movs	r2, #33	; 0x21
 800c5b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c5b6:	2101      	movs	r1, #1
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 ff7f 	bl	800d4bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7ff f85d 	bl	800b686 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c5cc:	e017      	b.n	800c5fe <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5d8:	d111      	bne.n	800c5fe <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2228      	movs	r2, #40	; 0x28
 800c5de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2222      	movs	r2, #34	; 0x22
 800c5e6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c5e8:	2102      	movs	r1, #2
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 ff66 	bl	800d4bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f7ff f84e 	bl	800b69a <HAL_I2C_SlaveRxCpltCallback>
}
 800c5fe:	bf00      	nop
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
	...

0800c608 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b086      	sub	sp, #24
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2220      	movs	r2, #32
 800c61c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b21      	cmp	r3, #33	; 0x21
 800c628:	d107      	bne.n	800c63a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c62a:	2101      	movs	r1, #1
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 ff45 	bl	800d4bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2211      	movs	r2, #17
 800c636:	631a      	str	r2, [r3, #48]	; 0x30
 800c638:	e00c      	b.n	800c654 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b22      	cmp	r3, #34	; 0x22
 800c644:	d106      	bne.n	800c654 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c646:	2102      	movs	r1, #2
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 ff37 	bl	800d4bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2212      	movs	r2, #18
 800c652:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	6859      	ldr	r1, [r3, #4]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	4b4d      	ldr	r3, [pc, #308]	; (800c794 <I2C_ITMasterCplt+0x18c>)
 800c660:	400b      	ands	r3, r1
 800c662:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a4a      	ldr	r2, [pc, #296]	; (800c798 <I2C_ITMasterCplt+0x190>)
 800c66e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	091b      	lsrs	r3, r3, #4
 800c674:	f003 0301 	and.w	r3, r3, #1
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d009      	beq.n	800c690 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2210      	movs	r2, #16
 800c682:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c688:	f043 0204 	orr.w	r2, r3, #4
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c696:	b2db      	uxtb	r3, r3
 800c698:	2b60      	cmp	r3, #96	; 0x60
 800c69a:	d10b      	bne.n	800c6b4 <I2C_ITMasterCplt+0xac>
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	089b      	lsrs	r3, r3, #2
 800c6a0:	f003 0301 	and.w	r3, r3, #1
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d005      	beq.n	800c6b4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fc38 	bl	800cf2a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6be:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b60      	cmp	r3, #96	; 0x60
 800c6ca:	d002      	beq.n	800c6d2 <I2C_ITMasterCplt+0xca>
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d006      	beq.n	800c6e0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 fb0f 	bl	800ccfc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c6de:	e054      	b.n	800c78a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b21      	cmp	r3, #33	; 0x21
 800c6ea:	d124      	bne.n	800c736 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2220      	movs	r2, #32
 800c6f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c700:	b2db      	uxtb	r3, r3
 800c702:	2b40      	cmp	r3, #64	; 0x40
 800c704:	d10b      	bne.n	800c71e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7fe ffe1 	bl	800b6de <HAL_I2C_MemTxCpltCallback>
}
 800c71c:	e035      	b.n	800c78a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7fe ff95 	bl	800b65e <HAL_I2C_MasterTxCpltCallback>
}
 800c734:	e029      	b.n	800c78a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b22      	cmp	r3, #34	; 0x22
 800c740:	d123      	bne.n	800c78a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2220      	movs	r2, #32
 800c746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c756:	b2db      	uxtb	r3, r3
 800c758:	2b40      	cmp	r3, #64	; 0x40
 800c75a:	d10b      	bne.n	800c774 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7fe ffc0 	bl	800b6f2 <HAL_I2C_MemRxCpltCallback>
}
 800c772:	e00a      	b.n	800c78a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7fe ff74 	bl	800b672 <HAL_I2C_MasterRxCpltCallback>
}
 800c78a:	bf00      	nop
 800c78c:	3718      	adds	r7, #24
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	fe00e800 	.word	0xfe00e800
 800c798:	ffff0000 	.word	0xffff0000

0800c79c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b086      	sub	sp, #24
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7be:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2220      	movs	r2, #32
 800c7c6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c7c8:	7afb      	ldrb	r3, [r7, #11]
 800c7ca:	2b21      	cmp	r3, #33	; 0x21
 800c7cc:	d002      	beq.n	800c7d4 <I2C_ITSlaveCplt+0x38>
 800c7ce:	7afb      	ldrb	r3, [r7, #11]
 800c7d0:	2b29      	cmp	r3, #41	; 0x29
 800c7d2:	d108      	bne.n	800c7e6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c7d4:	f248 0101 	movw	r1, #32769	; 0x8001
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 fe6f 	bl	800d4bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2221      	movs	r2, #33	; 0x21
 800c7e2:	631a      	str	r2, [r3, #48]	; 0x30
 800c7e4:	e019      	b.n	800c81a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c7e6:	7afb      	ldrb	r3, [r7, #11]
 800c7e8:	2b22      	cmp	r3, #34	; 0x22
 800c7ea:	d002      	beq.n	800c7f2 <I2C_ITSlaveCplt+0x56>
 800c7ec:	7afb      	ldrb	r3, [r7, #11]
 800c7ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f0:	d108      	bne.n	800c804 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c7f2:	f248 0102 	movw	r1, #32770	; 0x8002
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fe60 	bl	800d4bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2222      	movs	r2, #34	; 0x22
 800c800:	631a      	str	r2, [r3, #48]	; 0x30
 800c802:	e00a      	b.n	800c81a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800c804:	7afb      	ldrb	r3, [r7, #11]
 800c806:	2b28      	cmp	r3, #40	; 0x28
 800c808:	d107      	bne.n	800c81a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800c80a:	f248 0103 	movw	r1, #32771	; 0x8003
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fe54 	bl	800d4bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	685a      	ldr	r2, [r3, #4]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c828:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	6859      	ldr	r1, [r3, #4]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	4b80      	ldr	r3, [pc, #512]	; (800ca38 <I2C_ITSlaveCplt+0x29c>)
 800c836:	400b      	ands	r3, r1
 800c838:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 fb75 	bl	800cf2a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	0b9b      	lsrs	r3, r3, #14
 800c844:	f003 0301 	and.w	r3, r3, #1
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d07a      	beq.n	800c942 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c85a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c860:	2b00      	cmp	r3, #0
 800c862:	f000 8112 	beq.w	800ca8a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a73      	ldr	r2, [pc, #460]	; (800ca3c <I2C_ITSlaveCplt+0x2a0>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d059      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a71      	ldr	r2, [pc, #452]	; (800ca40 <I2C_ITSlaveCplt+0x2a4>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d053      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a6f      	ldr	r2, [pc, #444]	; (800ca44 <I2C_ITSlaveCplt+0x2a8>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d04d      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a6d      	ldr	r2, [pc, #436]	; (800ca48 <I2C_ITSlaveCplt+0x2ac>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d047      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a6b      	ldr	r2, [pc, #428]	; (800ca4c <I2C_ITSlaveCplt+0x2b0>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d041      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a69      	ldr	r2, [pc, #420]	; (800ca50 <I2C_ITSlaveCplt+0x2b4>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d03b      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a67      	ldr	r2, [pc, #412]	; (800ca54 <I2C_ITSlaveCplt+0x2b8>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d035      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a65      	ldr	r2, [pc, #404]	; (800ca58 <I2C_ITSlaveCplt+0x2bc>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d02f      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a63      	ldr	r2, [pc, #396]	; (800ca5c <I2C_ITSlaveCplt+0x2c0>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d029      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a61      	ldr	r2, [pc, #388]	; (800ca60 <I2C_ITSlaveCplt+0x2c4>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d023      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a5f      	ldr	r2, [pc, #380]	; (800ca64 <I2C_ITSlaveCplt+0x2c8>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d01d      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a5d      	ldr	r2, [pc, #372]	; (800ca68 <I2C_ITSlaveCplt+0x2cc>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d017      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a5b      	ldr	r2, [pc, #364]	; (800ca6c <I2C_ITSlaveCplt+0x2d0>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d011      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a59      	ldr	r2, [pc, #356]	; (800ca70 <I2C_ITSlaveCplt+0x2d4>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d00b      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a57      	ldr	r2, [pc, #348]	; (800ca74 <I2C_ITSlaveCplt+0x2d8>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d005      	beq.n	800c926 <I2C_ITSlaveCplt+0x18a>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a55      	ldr	r2, [pc, #340]	; (800ca78 <I2C_ITSlaveCplt+0x2dc>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d105      	bne.n	800c932 <I2C_ITSlaveCplt+0x196>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	b29b      	uxth	r3, r3
 800c930:	e004      	b.n	800c93c <I2C_ITSlaveCplt+0x1a0>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	8553      	strh	r3, [r2, #42]	; 0x2a
 800c940:	e0a3      	b.n	800ca8a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	0bdb      	lsrs	r3, r3, #15
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f000 809d 	beq.w	800ca8a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c95e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c964:	2b00      	cmp	r3, #0
 800c966:	f000 8090 	beq.w	800ca8a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a32      	ldr	r2, [pc, #200]	; (800ca3c <I2C_ITSlaveCplt+0x2a0>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d059      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a30      	ldr	r2, [pc, #192]	; (800ca40 <I2C_ITSlaveCplt+0x2a4>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d053      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a2e      	ldr	r2, [pc, #184]	; (800ca44 <I2C_ITSlaveCplt+0x2a8>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d04d      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a2c      	ldr	r2, [pc, #176]	; (800ca48 <I2C_ITSlaveCplt+0x2ac>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d047      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a2a      	ldr	r2, [pc, #168]	; (800ca4c <I2C_ITSlaveCplt+0x2b0>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d041      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a28      	ldr	r2, [pc, #160]	; (800ca50 <I2C_ITSlaveCplt+0x2b4>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d03b      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a26      	ldr	r2, [pc, #152]	; (800ca54 <I2C_ITSlaveCplt+0x2b8>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d035      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a24      	ldr	r2, [pc, #144]	; (800ca58 <I2C_ITSlaveCplt+0x2bc>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d02f      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a22      	ldr	r2, [pc, #136]	; (800ca5c <I2C_ITSlaveCplt+0x2c0>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d029      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a20      	ldr	r2, [pc, #128]	; (800ca60 <I2C_ITSlaveCplt+0x2c4>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d023      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a1e      	ldr	r2, [pc, #120]	; (800ca64 <I2C_ITSlaveCplt+0x2c8>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d01d      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a1c      	ldr	r2, [pc, #112]	; (800ca68 <I2C_ITSlaveCplt+0x2cc>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d017      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a1a      	ldr	r2, [pc, #104]	; (800ca6c <I2C_ITSlaveCplt+0x2d0>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d011      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a18      	ldr	r2, [pc, #96]	; (800ca70 <I2C_ITSlaveCplt+0x2d4>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d00b      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a16      	ldr	r2, [pc, #88]	; (800ca74 <I2C_ITSlaveCplt+0x2d8>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d005      	beq.n	800ca2a <I2C_ITSlaveCplt+0x28e>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a14      	ldr	r2, [pc, #80]	; (800ca78 <I2C_ITSlaveCplt+0x2dc>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d128      	bne.n	800ca7c <I2C_ITSlaveCplt+0x2e0>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	e027      	b.n	800ca86 <I2C_ITSlaveCplt+0x2ea>
 800ca36:	bf00      	nop
 800ca38:	fe00e800 	.word	0xfe00e800
 800ca3c:	40020010 	.word	0x40020010
 800ca40:	40020028 	.word	0x40020028
 800ca44:	40020040 	.word	0x40020040
 800ca48:	40020058 	.word	0x40020058
 800ca4c:	40020070 	.word	0x40020070
 800ca50:	40020088 	.word	0x40020088
 800ca54:	400200a0 	.word	0x400200a0
 800ca58:	400200b8 	.word	0x400200b8
 800ca5c:	40020410 	.word	0x40020410
 800ca60:	40020428 	.word	0x40020428
 800ca64:	40020440 	.word	0x40020440
 800ca68:	40020458 	.word	0x40020458
 800ca6c:	40020470 	.word	0x40020470
 800ca70:	40020488 	.word	0x40020488
 800ca74:	400204a0 	.word	0x400204a0
 800ca78:	400204b8 	.word	0x400204b8
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	089b      	lsrs	r3, r3, #2
 800ca8e:	f003 0301 	and.w	r3, r3, #1
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d020      	beq.n	800cad8 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	f023 0304 	bic.w	r3, r3, #4
 800ca9c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa8:	b2d2      	uxtb	r2, r2
 800caaa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab0:	1c5a      	adds	r2, r3, #1
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00c      	beq.n	800cad8 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cac2:	3b01      	subs	r3, #1
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cace:	b29b      	uxth	r3, r3
 800cad0:	3b01      	subs	r3, #1
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cadc:	b29b      	uxth	r3, r3
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d005      	beq.n	800caee <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cae6:	f043 0204 	orr.w	r2, r3, #4
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	091b      	lsrs	r3, r3, #4
 800caf2:	f003 0301 	and.w	r3, r3, #1
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d04a      	beq.n	800cb90 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	091b      	lsrs	r3, r3, #4
 800cafe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d044      	beq.n	800cb90 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d128      	bne.n	800cb62 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	2b28      	cmp	r3, #40	; 0x28
 800cb1a:	d108      	bne.n	800cb2e <I2C_ITSlaveCplt+0x392>
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb22:	d104      	bne.n	800cb2e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800cb24:	6979      	ldr	r1, [r7, #20]
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 f892 	bl	800cc50 <I2C_ITListenCplt>
 800cb2c:	e030      	b.n	800cb90 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	2b29      	cmp	r3, #41	; 0x29
 800cb38:	d10e      	bne.n	800cb58 <I2C_ITSlaveCplt+0x3bc>
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cb40:	d00a      	beq.n	800cb58 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2210      	movs	r2, #16
 800cb48:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f9ed 	bl	800cf2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f7ff fcfa 	bl	800c54a <I2C_ITSlaveSeqCplt>
 800cb56:	e01b      	b.n	800cb90 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2210      	movs	r2, #16
 800cb5e:	61da      	str	r2, [r3, #28]
 800cb60:	e016      	b.n	800cb90 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2210      	movs	r2, #16
 800cb68:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb6e:	f043 0204 	orr.w	r2, r3, #4
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d003      	beq.n	800cb84 <I2C_ITSlaveCplt+0x3e8>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cb82:	d105      	bne.n	800cb90 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 f8b6 	bl	800ccfc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d010      	beq.n	800cbc8 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbaa:	4619      	mov	r1, r3
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f8a5 	bl	800ccfc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b28      	cmp	r3, #40	; 0x28
 800cbbc:	d141      	bne.n	800cc42 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cbbe:	6979      	ldr	r1, [r7, #20]
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 f845 	bl	800cc50 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cbc6:	e03c      	b.n	800cc42 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cbd0:	d014      	beq.n	800cbfc <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7ff fcb9 	bl	800c54a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a1c      	ldr	r2, [pc, #112]	; (800cc4c <I2C_ITSlaveCplt+0x4b0>)
 800cbdc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2220      	movs	r2, #32
 800cbe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7fe fd68 	bl	800b6ca <HAL_I2C_ListenCpltCallback>
}
 800cbfa:	e022      	b.n	800cc42 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b22      	cmp	r3, #34	; 0x22
 800cc06:	d10e      	bne.n	800cc26 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2220      	movs	r2, #32
 800cc0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7fe fd3b 	bl	800b69a <HAL_I2C_SlaveRxCpltCallback>
}
 800cc24:	e00d      	b.n	800cc42 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2220      	movs	r2, #32
 800cc2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7fe fd22 	bl	800b686 <HAL_I2C_SlaveTxCpltCallback>
}
 800cc42:	bf00      	nop
 800cc44:	3718      	adds	r7, #24
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	ffff0000 	.word	0xffff0000

0800cc50 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a26      	ldr	r2, [pc, #152]	; (800ccf8 <I2C_ITListenCplt+0xa8>)
 800cc5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2220      	movs	r2, #32
 800cc6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	089b      	lsrs	r3, r3, #2
 800cc80:	f003 0301 	and.w	r3, r3, #1
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d022      	beq.n	800ccce <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc92:	b2d2      	uxtb	r2, r2
 800cc94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9a:	1c5a      	adds	r2, r3, #1
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d012      	beq.n	800ccce <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccac:	3b01      	subs	r3, #1
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccc6:	f043 0204 	orr.w	r2, r3, #4
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ccce:	f248 0103 	movw	r1, #32771	; 0x8003
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fbf2 	bl	800d4bc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2210      	movs	r2, #16
 800ccde:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f7fe fcee 	bl	800b6ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ccee:	bf00      	nop
 800ccf0:	3708      	adds	r7, #8
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	ffff0000 	.word	0xffff0000

0800ccfc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd0c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	4a6d      	ldr	r2, [pc, #436]	; (800ced0 <I2C_ITError+0x1d4>)
 800cd1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	431a      	orrs	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
 800cd30:	2b28      	cmp	r3, #40	; 0x28
 800cd32:	d005      	beq.n	800cd40 <I2C_ITError+0x44>
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	2b29      	cmp	r3, #41	; 0x29
 800cd38:	d002      	beq.n	800cd40 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cd3a:	7bfb      	ldrb	r3, [r7, #15]
 800cd3c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd3e:	d10b      	bne.n	800cd58 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd40:	2103      	movs	r1, #3
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fbba 	bl	800d4bc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2228      	movs	r2, #40	; 0x28
 800cd4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4a60      	ldr	r2, [pc, #384]	; (800ced4 <I2C_ITError+0x1d8>)
 800cd54:	635a      	str	r2, [r3, #52]	; 0x34
 800cd56:	e030      	b.n	800cdba <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd58:	f248 0103 	movw	r1, #32771	; 0x8003
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 fbad 	bl	800d4bc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f8e1 	bl	800cf2a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	2b60      	cmp	r3, #96	; 0x60
 800cd72:	d01f      	beq.n	800cdb4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2220      	movs	r2, #32
 800cd78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	699b      	ldr	r3, [r3, #24]
 800cd82:	f003 0320 	and.w	r3, r3, #32
 800cd86:	2b20      	cmp	r3, #32
 800cd88:	d114      	bne.n	800cdb4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	699b      	ldr	r3, [r3, #24]
 800cd90:	f003 0310 	and.w	r3, r3, #16
 800cd94:	2b10      	cmp	r3, #16
 800cd96:	d109      	bne.n	800cdac <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2210      	movs	r2, #16
 800cd9e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cda4:	f043 0204 	orr.w	r2, r3, #4
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	2220      	movs	r2, #32
 800cdb2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdbe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d039      	beq.n	800ce3c <I2C_ITError+0x140>
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	2b11      	cmp	r3, #17
 800cdcc:	d002      	beq.n	800cdd4 <I2C_ITError+0xd8>
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	2b21      	cmp	r3, #33	; 0x21
 800cdd2:	d133      	bne.n	800ce3c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cde2:	d107      	bne.n	800cdf4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cdf2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fd f857 	bl	8009eac <HAL_DMA_GetState>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d017      	beq.n	800ce34 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce08:	4a33      	ldr	r2, [pc, #204]	; (800ced8 <I2C_ITError+0x1dc>)
 800ce0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fb fed7 	bl	8008bcc <HAL_DMA_Abort_IT>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d04d      	beq.n	800cec0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ce2e:	4610      	mov	r0, r2
 800ce30:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce32:	e045      	b.n	800cec0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 f851 	bl	800cedc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce3a:	e041      	b.n	800cec0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d039      	beq.n	800ceb8 <I2C_ITError+0x1bc>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2b12      	cmp	r3, #18
 800ce48:	d002      	beq.n	800ce50 <I2C_ITError+0x154>
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2b22      	cmp	r3, #34	; 0x22
 800ce4e:	d133      	bne.n	800ceb8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce5e:	d107      	bne.n	800ce70 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ce6e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fd f819 	bl	8009eac <HAL_DMA_GetState>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d017      	beq.n	800ceb0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce84:	4a14      	ldr	r2, [pc, #80]	; (800ced8 <I2C_ITError+0x1dc>)
 800ce86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fb fe99 	bl	8008bcc <HAL_DMA_Abort_IT>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d011      	beq.n	800cec4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ceaa:	4610      	mov	r0, r2
 800ceac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ceae:	e009      	b.n	800cec4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 f813 	bl	800cedc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ceb6:	e005      	b.n	800cec4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 f80f 	bl	800cedc <I2C_TreatErrorCallback>
  }
}
 800cebe:	e002      	b.n	800cec6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cec0:	bf00      	nop
 800cec2:	e000      	b.n	800cec6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cec4:	bf00      	nop
}
 800cec6:	bf00      	nop
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	ffff0000 	.word	0xffff0000
 800ced4:	0800b9b3 	.word	0x0800b9b3
 800ced8:	0800d315 	.word	0x0800d315

0800cedc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	2b60      	cmp	r3, #96	; 0x60
 800ceee:	d10e      	bne.n	800cf0e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2220      	movs	r2, #32
 800cef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7fe fc07 	bl	800b71a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cf0c:	e009      	b.n	800cf22 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7fe fbf2 	bl	800b706 <HAL_I2C_ErrorCallback>
}
 800cf22:	bf00      	nop
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cf2a:	b480      	push	{r7}
 800cf2c:	b083      	sub	sp, #12
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	699b      	ldr	r3, [r3, #24]
 800cf38:	f003 0302 	and.w	r3, r3, #2
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	d103      	bne.n	800cf48 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2200      	movs	r2, #0
 800cf46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	699b      	ldr	r3, [r3, #24]
 800cf4e:	f003 0301 	and.w	r3, r3, #1
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d007      	beq.n	800cf66 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	699a      	ldr	r2, [r3, #24]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f042 0201 	orr.w	r2, r2, #1
 800cf64:	619a      	str	r2, [r3, #24]
  }
}
 800cf66:	bf00      	nop
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cf8e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d104      	bne.n	800cfa4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800cf9a:	2120      	movs	r1, #32
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f000 fa09 	bl	800d3b4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800cfa2:	e02d      	b.n	800d000 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cfac:	441a      	add	r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	2bff      	cmp	r3, #255	; 0xff
 800cfba:	d903      	bls.n	800cfc4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	22ff      	movs	r2, #255	; 0xff
 800cfc0:	851a      	strh	r2, [r3, #40]	; 0x28
 800cfc2:	e004      	b.n	800cfce <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfc8:	b29a      	uxth	r2, r3
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3328      	adds	r3, #40	; 0x28
 800cfde:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800cfe4:	f7fb f86a 	bl	80080bc <HAL_DMA_Start_IT>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d004      	beq.n	800cff8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800cfee:	2110      	movs	r1, #16
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f7ff fe83 	bl	800ccfc <I2C_ITError>
}
 800cff6:	e003      	b.n	800d000 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800cff8:	2140      	movs	r1, #64	; 0x40
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f000 f9da 	bl	800d3b4 <I2C_Enable_IRQ>
}
 800d000:	bf00      	nop
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d014:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d024:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d104      	bne.n	800d03a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d030:	2120      	movs	r1, #32
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	f000 f9be 	bl	800d3b4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d038:	e02d      	b.n	800d096 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03e:	68fa      	ldr	r2, [r7, #12]
 800d040:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d042:	441a      	add	r2, r3
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	2bff      	cmp	r3, #255	; 0xff
 800d050:	d903      	bls.n	800d05a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	22ff      	movs	r2, #255	; 0xff
 800d056:	851a      	strh	r2, [r3, #40]	; 0x28
 800d058:	e004      	b.n	800d064 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d05e:	b29a      	uxth	r2, r3
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	3324      	adds	r3, #36	; 0x24
 800d06e:	4619      	mov	r1, r3
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d074:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d07a:	f7fb f81f 	bl	80080bc <HAL_DMA_Start_IT>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d004      	beq.n	800d08e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d084:	2110      	movs	r1, #16
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f7ff fe38 	bl	800ccfc <I2C_ITError>
}
 800d08c:	e003      	b.n	800d096 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d08e:	2140      	movs	r1, #64	; 0x40
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f000 f98f 	bl	800d3b4 <I2C_Enable_IRQ>
}
 800d096:	bf00      	nop
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
	...

0800d0a0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d076      	beq.n	800d1a8 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a71      	ldr	r2, [pc, #452]	; (800d288 <I2C_DMAError+0x1e8>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d059      	beq.n	800d17a <I2C_DMAError+0xda>
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a6f      	ldr	r2, [pc, #444]	; (800d28c <I2C_DMAError+0x1ec>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d053      	beq.n	800d17a <I2C_DMAError+0xda>
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a6d      	ldr	r2, [pc, #436]	; (800d290 <I2C_DMAError+0x1f0>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d04d      	beq.n	800d17a <I2C_DMAError+0xda>
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a6b      	ldr	r2, [pc, #428]	; (800d294 <I2C_DMAError+0x1f4>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d047      	beq.n	800d17a <I2C_DMAError+0xda>
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a69      	ldr	r2, [pc, #420]	; (800d298 <I2C_DMAError+0x1f8>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d041      	beq.n	800d17a <I2C_DMAError+0xda>
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a67      	ldr	r2, [pc, #412]	; (800d29c <I2C_DMAError+0x1fc>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d03b      	beq.n	800d17a <I2C_DMAError+0xda>
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a65      	ldr	r2, [pc, #404]	; (800d2a0 <I2C_DMAError+0x200>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d035      	beq.n	800d17a <I2C_DMAError+0xda>
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a63      	ldr	r2, [pc, #396]	; (800d2a4 <I2C_DMAError+0x204>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d02f      	beq.n	800d17a <I2C_DMAError+0xda>
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a61      	ldr	r2, [pc, #388]	; (800d2a8 <I2C_DMAError+0x208>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d029      	beq.n	800d17a <I2C_DMAError+0xda>
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4a5f      	ldr	r2, [pc, #380]	; (800d2ac <I2C_DMAError+0x20c>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d023      	beq.n	800d17a <I2C_DMAError+0xda>
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a5d      	ldr	r2, [pc, #372]	; (800d2b0 <I2C_DMAError+0x210>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d01d      	beq.n	800d17a <I2C_DMAError+0xda>
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a5b      	ldr	r2, [pc, #364]	; (800d2b4 <I2C_DMAError+0x214>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d017      	beq.n	800d17a <I2C_DMAError+0xda>
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a59      	ldr	r2, [pc, #356]	; (800d2b8 <I2C_DMAError+0x218>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d011      	beq.n	800d17a <I2C_DMAError+0xda>
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a57      	ldr	r2, [pc, #348]	; (800d2bc <I2C_DMAError+0x21c>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d00b      	beq.n	800d17a <I2C_DMAError+0xda>
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a55      	ldr	r2, [pc, #340]	; (800d2c0 <I2C_DMAError+0x220>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d005      	beq.n	800d17a <I2C_DMAError+0xda>
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a53      	ldr	r2, [pc, #332]	; (800d2c4 <I2C_DMAError+0x224>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d109      	bne.n	800d18e <I2C_DMAError+0xee>
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	bf0c      	ite	eq
 800d186:	2301      	moveq	r3, #1
 800d188:	2300      	movne	r3, #0
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	e008      	b.n	800d1a0 <I2C_DMAError+0x100>
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	bf0c      	ite	eq
 800d19a:	2301      	moveq	r3, #1
 800d19c:	2300      	movne	r3, #0
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d001      	beq.n	800d1a8 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 8098 	beq.w	800d2e2 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a33      	ldr	r2, [pc, #204]	; (800d288 <I2C_DMAError+0x1e8>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d059      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a31      	ldr	r2, [pc, #196]	; (800d28c <I2C_DMAError+0x1ec>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d053      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a2f      	ldr	r2, [pc, #188]	; (800d290 <I2C_DMAError+0x1f0>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d04d      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a2d      	ldr	r2, [pc, #180]	; (800d294 <I2C_DMAError+0x1f4>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d047      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a2b      	ldr	r2, [pc, #172]	; (800d298 <I2C_DMAError+0x1f8>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d041      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a29      	ldr	r2, [pc, #164]	; (800d29c <I2C_DMAError+0x1fc>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d03b      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a27      	ldr	r2, [pc, #156]	; (800d2a0 <I2C_DMAError+0x200>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d035      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a25      	ldr	r2, [pc, #148]	; (800d2a4 <I2C_DMAError+0x204>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d02f      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a23      	ldr	r2, [pc, #140]	; (800d2a8 <I2C_DMAError+0x208>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d029      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a21      	ldr	r2, [pc, #132]	; (800d2ac <I2C_DMAError+0x20c>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d023      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a1f      	ldr	r2, [pc, #124]	; (800d2b0 <I2C_DMAError+0x210>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d01d      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a1d      	ldr	r2, [pc, #116]	; (800d2b4 <I2C_DMAError+0x214>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d017      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a1b      	ldr	r2, [pc, #108]	; (800d2b8 <I2C_DMAError+0x218>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d011      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a19      	ldr	r2, [pc, #100]	; (800d2bc <I2C_DMAError+0x21c>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d00b      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a17      	ldr	r2, [pc, #92]	; (800d2c0 <I2C_DMAError+0x220>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d005      	beq.n	800d272 <I2C_DMAError+0x1d2>
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a15      	ldr	r2, [pc, #84]	; (800d2c4 <I2C_DMAError+0x224>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d12a      	bne.n	800d2c8 <I2C_DMAError+0x228>
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	bf0c      	ite	eq
 800d27e:	2301      	moveq	r3, #1
 800d280:	2300      	movne	r3, #0
 800d282:	b2db      	uxtb	r3, r3
 800d284:	e029      	b.n	800d2da <I2C_DMAError+0x23a>
 800d286:	bf00      	nop
 800d288:	40020010 	.word	0x40020010
 800d28c:	40020028 	.word	0x40020028
 800d290:	40020040 	.word	0x40020040
 800d294:	40020058 	.word	0x40020058
 800d298:	40020070 	.word	0x40020070
 800d29c:	40020088 	.word	0x40020088
 800d2a0:	400200a0 	.word	0x400200a0
 800d2a4:	400200b8 	.word	0x400200b8
 800d2a8:	40020410 	.word	0x40020410
 800d2ac:	40020428 	.word	0x40020428
 800d2b0:	40020440 	.word	0x40020440
 800d2b4:	40020458 	.word	0x40020458
 800d2b8:	40020470 	.word	0x40020470
 800d2bc:	40020488 	.word	0x40020488
 800d2c0:	400204a0 	.word	0x400204a0
 800d2c4:	400204b8 	.word	0x400204b8
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	bf0c      	ite	eq
 800d2d4:	2301      	moveq	r3, #1
 800d2d6:	2300      	movne	r3, #0
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d001      	beq.n	800d2e2 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7fc fdf0 	bl	8009ec8 <HAL_DMA_GetError>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d00e      	beq.n	800d30c <I2C_DMAError+0x26c>
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00b      	beq.n	800d30c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	685a      	ldr	r2, [r3, #4]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d302:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d304:	2110      	movs	r1, #16
 800d306:	68b8      	ldr	r0, [r7, #8]
 800d308:	f7ff fcf8 	bl	800ccfc <I2C_ITError>
  }
}
 800d30c:	bf00      	nop
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d320:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32e:	2200      	movs	r2, #0
 800d330:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d336:	2b00      	cmp	r3, #0
 800d338:	d003      	beq.n	800d342 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d33e:	2200      	movs	r2, #0
 800d340:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f7ff fdca 	bl	800cedc <I2C_TreatErrorCallback>
}
 800d348:	bf00      	nop
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d350:	b480      	push	{r7}
 800d352:	b087      	sub	sp, #28
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	607b      	str	r3, [r7, #4]
 800d35a:	460b      	mov	r3, r1
 800d35c:	817b      	strh	r3, [r7, #10]
 800d35e:	4613      	mov	r3, r2
 800d360:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d362:	897b      	ldrh	r3, [r7, #10]
 800d364:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d368:	7a7b      	ldrb	r3, [r7, #9]
 800d36a:	041b      	lsls	r3, r3, #16
 800d36c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d370:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d376:	6a3b      	ldr	r3, [r7, #32]
 800d378:	4313      	orrs	r3, r2
 800d37a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d37e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	685a      	ldr	r2, [r3, #4]
 800d386:	6a3b      	ldr	r3, [r7, #32]
 800d388:	0d5b      	lsrs	r3, r3, #21
 800d38a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d38e:	4b08      	ldr	r3, [pc, #32]	; (800d3b0 <I2C_TransferConfig+0x60>)
 800d390:	430b      	orrs	r3, r1
 800d392:	43db      	mvns	r3, r3
 800d394:	ea02 0103 	and.w	r1, r2, r3
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	697a      	ldr	r2, [r7, #20]
 800d39e:	430a      	orrs	r2, r1
 800d3a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d3a2:	bf00      	nop
 800d3a4:	371c      	adds	r7, #28
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	03ff63ff 	.word	0x03ff63ff

0800d3b4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c8:	4a39      	ldr	r2, [pc, #228]	; (800d4b0 <I2C_Enable_IRQ+0xfc>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d032      	beq.n	800d434 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d3d2:	4a38      	ldr	r2, [pc, #224]	; (800d4b4 <I2C_Enable_IRQ+0x100>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d02d      	beq.n	800d434 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d3dc:	4a36      	ldr	r2, [pc, #216]	; (800d4b8 <I2C_Enable_IRQ+0x104>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d028      	beq.n	800d434 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d3e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	da03      	bge.n	800d3f2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d3f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d3f2:	887b      	ldrh	r3, [r7, #2]
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d003      	beq.n	800d404 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d402:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d404:	887b      	ldrh	r3, [r7, #2]
 800d406:	f003 0302 	and.w	r3, r3, #2
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d003      	beq.n	800d416 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d414:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d416:	887b      	ldrh	r3, [r7, #2]
 800d418:	2b10      	cmp	r3, #16
 800d41a:	d103      	bne.n	800d424 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d422:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d424:	887b      	ldrh	r3, [r7, #2]
 800d426:	2b20      	cmp	r3, #32
 800d428:	d133      	bne.n	800d492 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f043 0320 	orr.w	r3, r3, #32
 800d430:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d432:	e02e      	b.n	800d492 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d434:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	da03      	bge.n	800d444 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d442:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d444:	887b      	ldrh	r3, [r7, #2]
 800d446:	f003 0301 	and.w	r3, r3, #1
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d003      	beq.n	800d456 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d454:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d456:	887b      	ldrh	r3, [r7, #2]
 800d458:	f003 0302 	and.w	r3, r3, #2
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d003      	beq.n	800d468 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d466:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d468:	887b      	ldrh	r3, [r7, #2]
 800d46a:	2b10      	cmp	r3, #16
 800d46c:	d103      	bne.n	800d476 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d474:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d476:	887b      	ldrh	r3, [r7, #2]
 800d478:	2b20      	cmp	r3, #32
 800d47a:	d103      	bne.n	800d484 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d482:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d484:	887b      	ldrh	r3, [r7, #2]
 800d486:	2b40      	cmp	r3, #64	; 0x40
 800d488:	d103      	bne.n	800d492 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d490:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	6819      	ldr	r1, [r3, #0]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	430a      	orrs	r2, r1
 800d4a0:	601a      	str	r2, [r3, #0]
}
 800d4a2:	bf00      	nop
 800d4a4:	3714      	adds	r7, #20
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	0800bbbb 	.word	0x0800bbbb
 800d4b4:	0800c001 	.word	0x0800c001
 800d4b8:	0800bda1 	.word	0x0800bda1

0800d4bc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d4cc:	887b      	ldrh	r3, [r7, #2]
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00f      	beq.n	800d4f6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d4dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d4ea:	2b28      	cmp	r3, #40	; 0x28
 800d4ec:	d003      	beq.n	800d4f6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d4f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d4f6:	887b      	ldrh	r3, [r7, #2]
 800d4f8:	f003 0302 	and.w	r3, r3, #2
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00f      	beq.n	800d520 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d506:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d514:	2b28      	cmp	r3, #40	; 0x28
 800d516:	d003      	beq.n	800d520 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d51e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d520:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d524:	2b00      	cmp	r3, #0
 800d526:	da03      	bge.n	800d530 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d52e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d530:	887b      	ldrh	r3, [r7, #2]
 800d532:	2b10      	cmp	r3, #16
 800d534:	d103      	bne.n	800d53e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d53c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d53e:	887b      	ldrh	r3, [r7, #2]
 800d540:	2b20      	cmp	r3, #32
 800d542:	d103      	bne.n	800d54c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f043 0320 	orr.w	r3, r3, #32
 800d54a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d54c:	887b      	ldrh	r3, [r7, #2]
 800d54e:	2b40      	cmp	r3, #64	; 0x40
 800d550:	d103      	bne.n	800d55a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d558:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	6819      	ldr	r1, [r3, #0]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	43da      	mvns	r2, r3
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	400a      	ands	r2, r1
 800d56a:	601a      	str	r2, [r3, #0]
}
 800d56c:	bf00      	nop
 800d56e:	3714      	adds	r7, #20
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr

0800d578 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	2b20      	cmp	r3, #32
 800d58c:	d138      	bne.n	800d600 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d594:	2b01      	cmp	r3, #1
 800d596:	d101      	bne.n	800d59c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d598:	2302      	movs	r3, #2
 800d59a:	e032      	b.n	800d602 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2224      	movs	r2, #36	; 0x24
 800d5a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f022 0201 	bic.w	r2, r2, #1
 800d5ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d5ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6819      	ldr	r1, [r3, #0]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	430a      	orrs	r2, r1
 800d5da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f042 0201 	orr.w	r2, r2, #1
 800d5ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2220      	movs	r2, #32
 800d5f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	e000      	b.n	800d602 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d600:	2302      	movs	r3, #2
  }
}
 800d602:	4618      	mov	r0, r3
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d60e:	b480      	push	{r7}
 800d610:	b085      	sub	sp, #20
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
 800d616:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	2b20      	cmp	r3, #32
 800d622:	d139      	bne.n	800d698 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d101      	bne.n	800d632 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d62e:	2302      	movs	r3, #2
 800d630:	e033      	b.n	800d69a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2224      	movs	r2, #36	; 0x24
 800d63e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f022 0201 	bic.w	r2, r2, #1
 800d650:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d660:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	021b      	lsls	r3, r3, #8
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	4313      	orrs	r3, r2
 800d66a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f042 0201 	orr.w	r2, r2, #1
 800d682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2220      	movs	r2, #32
 800d688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d694:	2300      	movs	r3, #0
 800d696:	e000      	b.n	800d69a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d698:	2302      	movs	r3, #2
  }
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3714      	adds	r7, #20
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr
	...

0800d6a8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d6b0:	4b0d      	ldr	r3, [pc, #52]	; (800d6e8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d6b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d6b6:	4a0c      	ldr	r2, [pc, #48]	; (800d6e8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d6b8:	f043 0302 	orr.w	r3, r3, #2
 800d6bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d6c0:	4b09      	ldr	r3, [pc, #36]	; (800d6e8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d6c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d6c6:	f003 0302 	and.w	r3, r3, #2
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800d6ce:	4b07      	ldr	r3, [pc, #28]	; (800d6ec <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d6d0:	685a      	ldr	r2, [r3, #4]
 800d6d2:	4906      	ldr	r1, [pc, #24]	; (800d6ec <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	604b      	str	r3, [r1, #4]
}
 800d6da:	bf00      	nop
 800d6dc:	3714      	adds	r7, #20
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop
 800d6e8:	58024400 	.word	0x58024400
 800d6ec:	58000400 	.word	0x58000400

0800d6f0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800d6fc:	4b18      	ldr	r3, [pc, #96]	; (800d760 <HAL_PWR_EnterSTOPMode+0x70>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f023 0201 	bic.w	r2, r3, #1
 800d704:	4916      	ldr	r1, [pc, #88]	; (800d760 <HAL_PWR_EnterSTOPMode+0x70>)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	4313      	orrs	r3, r2
 800d70a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800d70c:	4b14      	ldr	r3, [pc, #80]	; (800d760 <HAL_PWR_EnterSTOPMode+0x70>)
 800d70e:	691b      	ldr	r3, [r3, #16]
 800d710:	4a13      	ldr	r2, [pc, #76]	; (800d760 <HAL_PWR_EnterSTOPMode+0x70>)
 800d712:	f023 0305 	bic.w	r3, r3, #5
 800d716:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800d718:	4b11      	ldr	r3, [pc, #68]	; (800d760 <HAL_PWR_EnterSTOPMode+0x70>)
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	4a10      	ldr	r2, [pc, #64]	; (800d760 <HAL_PWR_EnterSTOPMode+0x70>)
 800d71e:	f023 0302 	bic.w	r3, r3, #2
 800d722:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d724:	4b0f      	ldr	r3, [pc, #60]	; (800d764 <HAL_PWR_EnterSTOPMode+0x74>)
 800d726:	691b      	ldr	r3, [r3, #16]
 800d728:	4a0e      	ldr	r2, [pc, #56]	; (800d764 <HAL_PWR_EnterSTOPMode+0x74>)
 800d72a:	f043 0304 	orr.w	r3, r3, #4
 800d72e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800d730:	f3bf 8f4f 	dsb	sy
}
 800d734:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d736:	f3bf 8f6f 	isb	sy
}
 800d73a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800d73c:	78fb      	ldrb	r3, [r7, #3]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d101      	bne.n	800d746 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800d742:	bf30      	wfi
 800d744:	e000      	b.n	800d748 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800d746:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d748:	4b06      	ldr	r3, [pc, #24]	; (800d764 <HAL_PWR_EnterSTOPMode+0x74>)
 800d74a:	691b      	ldr	r3, [r3, #16]
 800d74c:	4a05      	ldr	r2, [pc, #20]	; (800d764 <HAL_PWR_EnterSTOPMode+0x74>)
 800d74e:	f023 0304 	bic.w	r3, r3, #4
 800d752:	6113      	str	r3, [r2, #16]
}
 800d754:	bf00      	nop
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr
 800d760:	58024800 	.word	0x58024800
 800d764:	e000ed00 	.word	0xe000ed00

0800d768 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d770:	4b19      	ldr	r3, [pc, #100]	; (800d7d8 <HAL_PWREx_ConfigSupply+0x70>)
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	f003 0304 	and.w	r3, r3, #4
 800d778:	2b04      	cmp	r3, #4
 800d77a:	d00a      	beq.n	800d792 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d77c:	4b16      	ldr	r3, [pc, #88]	; (800d7d8 <HAL_PWREx_ConfigSupply+0x70>)
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	f003 0307 	and.w	r3, r3, #7
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	429a      	cmp	r2, r3
 800d788:	d001      	beq.n	800d78e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d78a:	2301      	movs	r3, #1
 800d78c:	e01f      	b.n	800d7ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d78e:	2300      	movs	r3, #0
 800d790:	e01d      	b.n	800d7ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d792:	4b11      	ldr	r3, [pc, #68]	; (800d7d8 <HAL_PWREx_ConfigSupply+0x70>)
 800d794:	68db      	ldr	r3, [r3, #12]
 800d796:	f023 0207 	bic.w	r2, r3, #7
 800d79a:	490f      	ldr	r1, [pc, #60]	; (800d7d8 <HAL_PWREx_ConfigSupply+0x70>)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d7a2:	f7f7 ff8f 	bl	80056c4 <HAL_GetTick>
 800d7a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d7a8:	e009      	b.n	800d7be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d7aa:	f7f7 ff8b 	bl	80056c4 <HAL_GetTick>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	1ad3      	subs	r3, r2, r3
 800d7b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7b8:	d901      	bls.n	800d7be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	e007      	b.n	800d7ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d7be:	4b06      	ldr	r3, [pc, #24]	; (800d7d8 <HAL_PWREx_ConfigSupply+0x70>)
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d7c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d7ca:	d1ee      	bne.n	800d7aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	58024800 	.word	0x58024800

0800d7dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08c      	sub	sp, #48	; 0x30
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d102      	bne.n	800d7f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	f000 bc48 	b.w	800e080 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f003 0301 	and.w	r3, r3, #1
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f000 8088 	beq.w	800d90e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d7fe:	4b99      	ldr	r3, [pc, #612]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d800:	691b      	ldr	r3, [r3, #16]
 800d802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d806:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d808:	4b96      	ldr	r3, [pc, #600]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d80c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d810:	2b10      	cmp	r3, #16
 800d812:	d007      	beq.n	800d824 <HAL_RCC_OscConfig+0x48>
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	2b18      	cmp	r3, #24
 800d818:	d111      	bne.n	800d83e <HAL_RCC_OscConfig+0x62>
 800d81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81c:	f003 0303 	and.w	r3, r3, #3
 800d820:	2b02      	cmp	r3, #2
 800d822:	d10c      	bne.n	800d83e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d824:	4b8f      	ldr	r3, [pc, #572]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d06d      	beq.n	800d90c <HAL_RCC_OscConfig+0x130>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d169      	bne.n	800d90c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d838:	2301      	movs	r3, #1
 800d83a:	f000 bc21 	b.w	800e080 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d846:	d106      	bne.n	800d856 <HAL_RCC_OscConfig+0x7a>
 800d848:	4b86      	ldr	r3, [pc, #536]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a85      	ldr	r2, [pc, #532]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d84e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d852:	6013      	str	r3, [r2, #0]
 800d854:	e02e      	b.n	800d8b4 <HAL_RCC_OscConfig+0xd8>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10c      	bne.n	800d878 <HAL_RCC_OscConfig+0x9c>
 800d85e:	4b81      	ldr	r3, [pc, #516]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4a80      	ldr	r2, [pc, #512]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d868:	6013      	str	r3, [r2, #0]
 800d86a:	4b7e      	ldr	r3, [pc, #504]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4a7d      	ldr	r2, [pc, #500]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d874:	6013      	str	r3, [r2, #0]
 800d876:	e01d      	b.n	800d8b4 <HAL_RCC_OscConfig+0xd8>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d880:	d10c      	bne.n	800d89c <HAL_RCC_OscConfig+0xc0>
 800d882:	4b78      	ldr	r3, [pc, #480]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4a77      	ldr	r2, [pc, #476]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d88c:	6013      	str	r3, [r2, #0]
 800d88e:	4b75      	ldr	r3, [pc, #468]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a74      	ldr	r2, [pc, #464]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d898:	6013      	str	r3, [r2, #0]
 800d89a:	e00b      	b.n	800d8b4 <HAL_RCC_OscConfig+0xd8>
 800d89c:	4b71      	ldr	r3, [pc, #452]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a70      	ldr	r2, [pc, #448]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d8a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8a6:	6013      	str	r3, [r2, #0]
 800d8a8:	4b6e      	ldr	r3, [pc, #440]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a6d      	ldr	r2, [pc, #436]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d8ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d8b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d013      	beq.n	800d8e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8bc:	f7f7 ff02 	bl	80056c4 <HAL_GetTick>
 800d8c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d8c2:	e008      	b.n	800d8d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d8c4:	f7f7 fefe 	bl	80056c4 <HAL_GetTick>
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8cc:	1ad3      	subs	r3, r2, r3
 800d8ce:	2b64      	cmp	r3, #100	; 0x64
 800d8d0:	d901      	bls.n	800d8d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	e3d4      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d8d6:	4b63      	ldr	r3, [pc, #396]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d0f0      	beq.n	800d8c4 <HAL_RCC_OscConfig+0xe8>
 800d8e2:	e014      	b.n	800d90e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8e4:	f7f7 feee 	bl	80056c4 <HAL_GetTick>
 800d8e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d8ea:	e008      	b.n	800d8fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d8ec:	f7f7 feea 	bl	80056c4 <HAL_GetTick>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	2b64      	cmp	r3, #100	; 0x64
 800d8f8:	d901      	bls.n	800d8fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d8fa:	2303      	movs	r3, #3
 800d8fc:	e3c0      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d8fe:	4b59      	ldr	r3, [pc, #356]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d906:	2b00      	cmp	r3, #0
 800d908:	d1f0      	bne.n	800d8ec <HAL_RCC_OscConfig+0x110>
 800d90a:	e000      	b.n	800d90e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d90c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f003 0302 	and.w	r3, r3, #2
 800d916:	2b00      	cmp	r3, #0
 800d918:	f000 80ca 	beq.w	800dab0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d91c:	4b51      	ldr	r3, [pc, #324]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d91e:	691b      	ldr	r3, [r3, #16]
 800d920:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d924:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d926:	4b4f      	ldr	r3, [pc, #316]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d92a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d92c:	6a3b      	ldr	r3, [r7, #32]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d007      	beq.n	800d942 <HAL_RCC_OscConfig+0x166>
 800d932:	6a3b      	ldr	r3, [r7, #32]
 800d934:	2b18      	cmp	r3, #24
 800d936:	d156      	bne.n	800d9e6 <HAL_RCC_OscConfig+0x20a>
 800d938:	69fb      	ldr	r3, [r7, #28]
 800d93a:	f003 0303 	and.w	r3, r3, #3
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d151      	bne.n	800d9e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d942:	4b48      	ldr	r3, [pc, #288]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f003 0304 	and.w	r3, r3, #4
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d005      	beq.n	800d95a <HAL_RCC_OscConfig+0x17e>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d101      	bne.n	800d95a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d956:	2301      	movs	r3, #1
 800d958:	e392      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d95a:	4b42      	ldr	r3, [pc, #264]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f023 0219 	bic.w	r2, r3, #25
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	493f      	ldr	r1, [pc, #252]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d968:	4313      	orrs	r3, r2
 800d96a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d96c:	f7f7 feaa 	bl	80056c4 <HAL_GetTick>
 800d970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d972:	e008      	b.n	800d986 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d974:	f7f7 fea6 	bl	80056c4 <HAL_GetTick>
 800d978:	4602      	mov	r2, r0
 800d97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97c:	1ad3      	subs	r3, r2, r3
 800d97e:	2b02      	cmp	r3, #2
 800d980:	d901      	bls.n	800d986 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d982:	2303      	movs	r3, #3
 800d984:	e37c      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d986:	4b37      	ldr	r3, [pc, #220]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f003 0304 	and.w	r3, r3, #4
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d0f0      	beq.n	800d974 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d992:	f7f7 fea3 	bl	80056dc <HAL_GetREVID>
 800d996:	4603      	mov	r3, r0
 800d998:	f241 0203 	movw	r2, #4099	; 0x1003
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d817      	bhi.n	800d9d0 <HAL_RCC_OscConfig+0x1f4>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	691b      	ldr	r3, [r3, #16]
 800d9a4:	2b40      	cmp	r3, #64	; 0x40
 800d9a6:	d108      	bne.n	800d9ba <HAL_RCC_OscConfig+0x1de>
 800d9a8:	4b2e      	ldr	r3, [pc, #184]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d9b0:	4a2c      	ldr	r2, [pc, #176]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d9b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d9b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d9b8:	e07a      	b.n	800dab0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9ba:	4b2a      	ldr	r3, [pc, #168]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	031b      	lsls	r3, r3, #12
 800d9c8:	4926      	ldr	r1, [pc, #152]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d9ce:	e06f      	b.n	800dab0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9d0:	4b24      	ldr	r3, [pc, #144]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	061b      	lsls	r3, r3, #24
 800d9de:	4921      	ldr	r1, [pc, #132]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d9e4:	e064      	b.n	800dab0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d047      	beq.n	800da7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d9ee:	4b1d      	ldr	r3, [pc, #116]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f023 0219 	bic.w	r2, r3, #25
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	491a      	ldr	r1, [pc, #104]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da00:	f7f7 fe60 	bl	80056c4 <HAL_GetTick>
 800da04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da06:	e008      	b.n	800da1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da08:	f7f7 fe5c 	bl	80056c4 <HAL_GetTick>
 800da0c:	4602      	mov	r2, r0
 800da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da10:	1ad3      	subs	r3, r2, r3
 800da12:	2b02      	cmp	r3, #2
 800da14:	d901      	bls.n	800da1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800da16:	2303      	movs	r3, #3
 800da18:	e332      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da1a:	4b12      	ldr	r3, [pc, #72]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f003 0304 	and.w	r3, r3, #4
 800da22:	2b00      	cmp	r3, #0
 800da24:	d0f0      	beq.n	800da08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da26:	f7f7 fe59 	bl	80056dc <HAL_GetREVID>
 800da2a:	4603      	mov	r3, r0
 800da2c:	f241 0203 	movw	r2, #4099	; 0x1003
 800da30:	4293      	cmp	r3, r2
 800da32:	d819      	bhi.n	800da68 <HAL_RCC_OscConfig+0x28c>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	691b      	ldr	r3, [r3, #16]
 800da38:	2b40      	cmp	r3, #64	; 0x40
 800da3a:	d108      	bne.n	800da4e <HAL_RCC_OscConfig+0x272>
 800da3c:	4b09      	ldr	r3, [pc, #36]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800da44:	4a07      	ldr	r2, [pc, #28]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800da46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da4a:	6053      	str	r3, [r2, #4]
 800da4c:	e030      	b.n	800dab0 <HAL_RCC_OscConfig+0x2d4>
 800da4e:	4b05      	ldr	r3, [pc, #20]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	691b      	ldr	r3, [r3, #16]
 800da5a:	031b      	lsls	r3, r3, #12
 800da5c:	4901      	ldr	r1, [pc, #4]	; (800da64 <HAL_RCC_OscConfig+0x288>)
 800da5e:	4313      	orrs	r3, r2
 800da60:	604b      	str	r3, [r1, #4]
 800da62:	e025      	b.n	800dab0 <HAL_RCC_OscConfig+0x2d4>
 800da64:	58024400 	.word	0x58024400
 800da68:	4b9a      	ldr	r3, [pc, #616]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	061b      	lsls	r3, r3, #24
 800da76:	4997      	ldr	r1, [pc, #604]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800da78:	4313      	orrs	r3, r2
 800da7a:	604b      	str	r3, [r1, #4]
 800da7c:	e018      	b.n	800dab0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800da7e:	4b95      	ldr	r3, [pc, #596]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4a94      	ldr	r2, [pc, #592]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800da84:	f023 0301 	bic.w	r3, r3, #1
 800da88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da8a:	f7f7 fe1b 	bl	80056c4 <HAL_GetTick>
 800da8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800da90:	e008      	b.n	800daa4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da92:	f7f7 fe17 	bl	80056c4 <HAL_GetTick>
 800da96:	4602      	mov	r2, r0
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	1ad3      	subs	r3, r2, r3
 800da9c:	2b02      	cmp	r3, #2
 800da9e:	d901      	bls.n	800daa4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800daa0:	2303      	movs	r3, #3
 800daa2:	e2ed      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800daa4:	4b8b      	ldr	r3, [pc, #556]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f003 0304 	and.w	r3, r3, #4
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1f0      	bne.n	800da92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f003 0310 	and.w	r3, r3, #16
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f000 80a9 	beq.w	800dc10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dabe:	4b85      	ldr	r3, [pc, #532]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dac0:	691b      	ldr	r3, [r3, #16]
 800dac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dac6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dac8:	4b82      	ldr	r3, [pc, #520]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800daca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dacc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	2b08      	cmp	r3, #8
 800dad2:	d007      	beq.n	800dae4 <HAL_RCC_OscConfig+0x308>
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	2b18      	cmp	r3, #24
 800dad8:	d13a      	bne.n	800db50 <HAL_RCC_OscConfig+0x374>
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	f003 0303 	and.w	r3, r3, #3
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d135      	bne.n	800db50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dae4:	4b7b      	ldr	r3, [pc, #492]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daec:	2b00      	cmp	r3, #0
 800daee:	d005      	beq.n	800dafc <HAL_RCC_OscConfig+0x320>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	69db      	ldr	r3, [r3, #28]
 800daf4:	2b80      	cmp	r3, #128	; 0x80
 800daf6:	d001      	beq.n	800dafc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800daf8:	2301      	movs	r3, #1
 800dafa:	e2c1      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dafc:	f7f7 fdee 	bl	80056dc <HAL_GetREVID>
 800db00:	4603      	mov	r3, r0
 800db02:	f241 0203 	movw	r2, #4099	; 0x1003
 800db06:	4293      	cmp	r3, r2
 800db08:	d817      	bhi.n	800db3a <HAL_RCC_OscConfig+0x35e>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a1b      	ldr	r3, [r3, #32]
 800db0e:	2b20      	cmp	r3, #32
 800db10:	d108      	bne.n	800db24 <HAL_RCC_OscConfig+0x348>
 800db12:	4b70      	ldr	r3, [pc, #448]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800db1a:	4a6e      	ldr	r2, [pc, #440]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800db1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800db22:	e075      	b.n	800dc10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800db24:	4b6b      	ldr	r3, [pc, #428]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6a1b      	ldr	r3, [r3, #32]
 800db30:	069b      	lsls	r3, r3, #26
 800db32:	4968      	ldr	r1, [pc, #416]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800db34:	4313      	orrs	r3, r2
 800db36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800db38:	e06a      	b.n	800dc10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800db3a:	4b66      	ldr	r3, [pc, #408]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6a1b      	ldr	r3, [r3, #32]
 800db46:	061b      	lsls	r3, r3, #24
 800db48:	4962      	ldr	r1, [pc, #392]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800db4a:	4313      	orrs	r3, r2
 800db4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800db4e:	e05f      	b.n	800dc10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	69db      	ldr	r3, [r3, #28]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d042      	beq.n	800dbde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800db58:	4b5e      	ldr	r3, [pc, #376]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a5d      	ldr	r2, [pc, #372]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800db5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db64:	f7f7 fdae 	bl	80056c4 <HAL_GetTick>
 800db68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800db6a:	e008      	b.n	800db7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800db6c:	f7f7 fdaa 	bl	80056c4 <HAL_GetTick>
 800db70:	4602      	mov	r2, r0
 800db72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db74:	1ad3      	subs	r3, r2, r3
 800db76:	2b02      	cmp	r3, #2
 800db78:	d901      	bls.n	800db7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800db7a:	2303      	movs	r3, #3
 800db7c:	e280      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800db7e:	4b55      	ldr	r3, [pc, #340]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db86:	2b00      	cmp	r3, #0
 800db88:	d0f0      	beq.n	800db6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800db8a:	f7f7 fda7 	bl	80056dc <HAL_GetREVID>
 800db8e:	4603      	mov	r3, r0
 800db90:	f241 0203 	movw	r2, #4099	; 0x1003
 800db94:	4293      	cmp	r3, r2
 800db96:	d817      	bhi.n	800dbc8 <HAL_RCC_OscConfig+0x3ec>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a1b      	ldr	r3, [r3, #32]
 800db9c:	2b20      	cmp	r3, #32
 800db9e:	d108      	bne.n	800dbb2 <HAL_RCC_OscConfig+0x3d6>
 800dba0:	4b4c      	ldr	r3, [pc, #304]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800dba8:	4a4a      	ldr	r2, [pc, #296]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dbaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbae:	6053      	str	r3, [r2, #4]
 800dbb0:	e02e      	b.n	800dc10 <HAL_RCC_OscConfig+0x434>
 800dbb2:	4b48      	ldr	r3, [pc, #288]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6a1b      	ldr	r3, [r3, #32]
 800dbbe:	069b      	lsls	r3, r3, #26
 800dbc0:	4944      	ldr	r1, [pc, #272]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	604b      	str	r3, [r1, #4]
 800dbc6:	e023      	b.n	800dc10 <HAL_RCC_OscConfig+0x434>
 800dbc8:	4b42      	ldr	r3, [pc, #264]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6a1b      	ldr	r3, [r3, #32]
 800dbd4:	061b      	lsls	r3, r3, #24
 800dbd6:	493f      	ldr	r1, [pc, #252]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	60cb      	str	r3, [r1, #12]
 800dbdc:	e018      	b.n	800dc10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800dbde:	4b3d      	ldr	r3, [pc, #244]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4a3c      	ldr	r2, [pc, #240]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dbe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbea:	f7f7 fd6b 	bl	80056c4 <HAL_GetTick>
 800dbee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dbf0:	e008      	b.n	800dc04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dbf2:	f7f7 fd67 	bl	80056c4 <HAL_GetTick>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfa:	1ad3      	subs	r3, r2, r3
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	d901      	bls.n	800dc04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dc00:	2303      	movs	r3, #3
 800dc02:	e23d      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dc04:	4b33      	ldr	r3, [pc, #204]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d1f0      	bne.n	800dbf2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f003 0308 	and.w	r3, r3, #8
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d036      	beq.n	800dc8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	695b      	ldr	r3, [r3, #20]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d019      	beq.n	800dc58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dc24:	4b2b      	ldr	r3, [pc, #172]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dc26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc28:	4a2a      	ldr	r2, [pc, #168]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dc2a:	f043 0301 	orr.w	r3, r3, #1
 800dc2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc30:	f7f7 fd48 	bl	80056c4 <HAL_GetTick>
 800dc34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dc36:	e008      	b.n	800dc4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dc38:	f7f7 fd44 	bl	80056c4 <HAL_GetTick>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	d901      	bls.n	800dc4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800dc46:	2303      	movs	r3, #3
 800dc48:	e21a      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dc4a:	4b22      	ldr	r3, [pc, #136]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dc4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc4e:	f003 0302 	and.w	r3, r3, #2
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d0f0      	beq.n	800dc38 <HAL_RCC_OscConfig+0x45c>
 800dc56:	e018      	b.n	800dc8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dc58:	4b1e      	ldr	r3, [pc, #120]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dc5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc5c:	4a1d      	ldr	r2, [pc, #116]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dc5e:	f023 0301 	bic.w	r3, r3, #1
 800dc62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc64:	f7f7 fd2e 	bl	80056c4 <HAL_GetTick>
 800dc68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dc6a:	e008      	b.n	800dc7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dc6c:	f7f7 fd2a 	bl	80056c4 <HAL_GetTick>
 800dc70:	4602      	mov	r2, r0
 800dc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	d901      	bls.n	800dc7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800dc7a:	2303      	movs	r3, #3
 800dc7c:	e200      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dc7e:	4b15      	ldr	r3, [pc, #84]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dc80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc82:	f003 0302 	and.w	r3, r3, #2
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d1f0      	bne.n	800dc6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f003 0320 	and.w	r3, r3, #32
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d039      	beq.n	800dd0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d01c      	beq.n	800dcd8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800dc9e:	4b0d      	ldr	r3, [pc, #52]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4a0c      	ldr	r2, [pc, #48]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dca8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800dcaa:	f7f7 fd0b 	bl	80056c4 <HAL_GetTick>
 800dcae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800dcb0:	e008      	b.n	800dcc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dcb2:	f7f7 fd07 	bl	80056c4 <HAL_GetTick>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcba:	1ad3      	subs	r3, r2, r3
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d901      	bls.n	800dcc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800dcc0:	2303      	movs	r3, #3
 800dcc2:	e1dd      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800dcc4:	4b03      	ldr	r3, [pc, #12]	; (800dcd4 <HAL_RCC_OscConfig+0x4f8>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d0f0      	beq.n	800dcb2 <HAL_RCC_OscConfig+0x4d6>
 800dcd0:	e01b      	b.n	800dd0a <HAL_RCC_OscConfig+0x52e>
 800dcd2:	bf00      	nop
 800dcd4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800dcd8:	4b9b      	ldr	r3, [pc, #620]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a9a      	ldr	r2, [pc, #616]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dcde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dce2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800dce4:	f7f7 fcee 	bl	80056c4 <HAL_GetTick>
 800dce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dcea:	e008      	b.n	800dcfe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dcec:	f7f7 fcea 	bl	80056c4 <HAL_GetTick>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d901      	bls.n	800dcfe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800dcfa:	2303      	movs	r3, #3
 800dcfc:	e1c0      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dcfe:	4b92      	ldr	r3, [pc, #584]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d1f0      	bne.n	800dcec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f003 0304 	and.w	r3, r3, #4
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f000 8081 	beq.w	800de1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800dd18:	4b8c      	ldr	r3, [pc, #560]	; (800df4c <HAL_RCC_OscConfig+0x770>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a8b      	ldr	r2, [pc, #556]	; (800df4c <HAL_RCC_OscConfig+0x770>)
 800dd1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dd24:	f7f7 fcce 	bl	80056c4 <HAL_GetTick>
 800dd28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dd2a:	e008      	b.n	800dd3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dd2c:	f7f7 fcca 	bl	80056c4 <HAL_GetTick>
 800dd30:	4602      	mov	r2, r0
 800dd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd34:	1ad3      	subs	r3, r2, r3
 800dd36:	2b64      	cmp	r3, #100	; 0x64
 800dd38:	d901      	bls.n	800dd3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800dd3a:	2303      	movs	r3, #3
 800dd3c:	e1a0      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dd3e:	4b83      	ldr	r3, [pc, #524]	; (800df4c <HAL_RCC_OscConfig+0x770>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d0f0      	beq.n	800dd2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	689b      	ldr	r3, [r3, #8]
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d106      	bne.n	800dd60 <HAL_RCC_OscConfig+0x584>
 800dd52:	4b7d      	ldr	r3, [pc, #500]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dd54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd56:	4a7c      	ldr	r2, [pc, #496]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dd58:	f043 0301 	orr.w	r3, r3, #1
 800dd5c:	6713      	str	r3, [r2, #112]	; 0x70
 800dd5e:	e02d      	b.n	800ddbc <HAL_RCC_OscConfig+0x5e0>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d10c      	bne.n	800dd82 <HAL_RCC_OscConfig+0x5a6>
 800dd68:	4b77      	ldr	r3, [pc, #476]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dd6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd6c:	4a76      	ldr	r2, [pc, #472]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dd6e:	f023 0301 	bic.w	r3, r3, #1
 800dd72:	6713      	str	r3, [r2, #112]	; 0x70
 800dd74:	4b74      	ldr	r3, [pc, #464]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dd76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd78:	4a73      	ldr	r2, [pc, #460]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dd7a:	f023 0304 	bic.w	r3, r3, #4
 800dd7e:	6713      	str	r3, [r2, #112]	; 0x70
 800dd80:	e01c      	b.n	800ddbc <HAL_RCC_OscConfig+0x5e0>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	2b05      	cmp	r3, #5
 800dd88:	d10c      	bne.n	800dda4 <HAL_RCC_OscConfig+0x5c8>
 800dd8a:	4b6f      	ldr	r3, [pc, #444]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dd8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd8e:	4a6e      	ldr	r2, [pc, #440]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dd90:	f043 0304 	orr.w	r3, r3, #4
 800dd94:	6713      	str	r3, [r2, #112]	; 0x70
 800dd96:	4b6c      	ldr	r3, [pc, #432]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dd98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd9a:	4a6b      	ldr	r2, [pc, #428]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dd9c:	f043 0301 	orr.w	r3, r3, #1
 800dda0:	6713      	str	r3, [r2, #112]	; 0x70
 800dda2:	e00b      	b.n	800ddbc <HAL_RCC_OscConfig+0x5e0>
 800dda4:	4b68      	ldr	r3, [pc, #416]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dda6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda8:	4a67      	ldr	r2, [pc, #412]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800ddaa:	f023 0301 	bic.w	r3, r3, #1
 800ddae:	6713      	str	r3, [r2, #112]	; 0x70
 800ddb0:	4b65      	ldr	r3, [pc, #404]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800ddb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb4:	4a64      	ldr	r2, [pc, #400]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800ddb6:	f023 0304 	bic.w	r3, r3, #4
 800ddba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d015      	beq.n	800ddf0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddc4:	f7f7 fc7e 	bl	80056c4 <HAL_GetTick>
 800ddc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ddca:	e00a      	b.n	800dde2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ddcc:	f7f7 fc7a 	bl	80056c4 <HAL_GetTick>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd4:	1ad3      	subs	r3, r2, r3
 800ddd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d901      	bls.n	800dde2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ddde:	2303      	movs	r3, #3
 800dde0:	e14e      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dde2:	4b59      	ldr	r3, [pc, #356]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dde4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dde6:	f003 0302 	and.w	r3, r3, #2
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d0ee      	beq.n	800ddcc <HAL_RCC_OscConfig+0x5f0>
 800ddee:	e014      	b.n	800de1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddf0:	f7f7 fc68 	bl	80056c4 <HAL_GetTick>
 800ddf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ddf6:	e00a      	b.n	800de0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ddf8:	f7f7 fc64 	bl	80056c4 <HAL_GetTick>
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	f241 3288 	movw	r2, #5000	; 0x1388
 800de06:	4293      	cmp	r3, r2
 800de08:	d901      	bls.n	800de0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800de0a:	2303      	movs	r3, #3
 800de0c:	e138      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800de0e:	4b4e      	ldr	r3, [pc, #312]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800de10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de12:	f003 0302 	and.w	r3, r3, #2
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1ee      	bne.n	800ddf8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1e:	2b00      	cmp	r3, #0
 800de20:	f000 812d 	beq.w	800e07e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800de24:	4b48      	ldr	r3, [pc, #288]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800de26:	691b      	ldr	r3, [r3, #16]
 800de28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de2c:	2b18      	cmp	r3, #24
 800de2e:	f000 80bd 	beq.w	800dfac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de36:	2b02      	cmp	r3, #2
 800de38:	f040 809e 	bne.w	800df78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de3c:	4b42      	ldr	r3, [pc, #264]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a41      	ldr	r2, [pc, #260]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800de42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de48:	f7f7 fc3c 	bl	80056c4 <HAL_GetTick>
 800de4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800de4e:	e008      	b.n	800de62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de50:	f7f7 fc38 	bl	80056c4 <HAL_GetTick>
 800de54:	4602      	mov	r2, r0
 800de56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de58:	1ad3      	subs	r3, r2, r3
 800de5a:	2b02      	cmp	r3, #2
 800de5c:	d901      	bls.n	800de62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800de5e:	2303      	movs	r3, #3
 800de60:	e10e      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800de62:	4b39      	ldr	r3, [pc, #228]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d1f0      	bne.n	800de50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800de6e:	4b36      	ldr	r3, [pc, #216]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800de70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de72:	4b37      	ldr	r3, [pc, #220]	; (800df50 <HAL_RCC_OscConfig+0x774>)
 800de74:	4013      	ands	r3, r2
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800de7e:	0112      	lsls	r2, r2, #4
 800de80:	430a      	orrs	r2, r1
 800de82:	4931      	ldr	r1, [pc, #196]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800de84:	4313      	orrs	r3, r2
 800de86:	628b      	str	r3, [r1, #40]	; 0x28
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de8c:	3b01      	subs	r3, #1
 800de8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de96:	3b01      	subs	r3, #1
 800de98:	025b      	lsls	r3, r3, #9
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	431a      	orrs	r2, r3
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea2:	3b01      	subs	r3, #1
 800dea4:	041b      	lsls	r3, r3, #16
 800dea6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800deaa:	431a      	orrs	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deb0:	3b01      	subs	r3, #1
 800deb2:	061b      	lsls	r3, r3, #24
 800deb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800deb8:	4923      	ldr	r1, [pc, #140]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800deba:	4313      	orrs	r3, r2
 800debc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800debe:	4b22      	ldr	r3, [pc, #136]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec2:	4a21      	ldr	r2, [pc, #132]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dec4:	f023 0301 	bic.w	r3, r3, #1
 800dec8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800deca:	4b1f      	ldr	r3, [pc, #124]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800decc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dece:	4b21      	ldr	r3, [pc, #132]	; (800df54 <HAL_RCC_OscConfig+0x778>)
 800ded0:	4013      	ands	r3, r2
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ded6:	00d2      	lsls	r2, r2, #3
 800ded8:	491b      	ldr	r1, [pc, #108]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800deda:	4313      	orrs	r3, r2
 800dedc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800dede:	4b1a      	ldr	r3, [pc, #104]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800dee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee2:	f023 020c 	bic.w	r2, r3, #12
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deea:	4917      	ldr	r1, [pc, #92]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800deec:	4313      	orrs	r3, r2
 800deee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800def0:	4b15      	ldr	r3, [pc, #84]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800def2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def4:	f023 0202 	bic.w	r2, r3, #2
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800defc:	4912      	ldr	r1, [pc, #72]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800defe:	4313      	orrs	r3, r2
 800df00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800df02:	4b11      	ldr	r3, [pc, #68]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800df04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df06:	4a10      	ldr	r2, [pc, #64]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800df08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df0e:	4b0e      	ldr	r3, [pc, #56]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800df10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df12:	4a0d      	ldr	r2, [pc, #52]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800df14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800df1a:	4b0b      	ldr	r3, [pc, #44]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800df1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1e:	4a0a      	ldr	r2, [pc, #40]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800df20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800df24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800df26:	4b08      	ldr	r3, [pc, #32]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800df28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df2a:	4a07      	ldr	r2, [pc, #28]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800df2c:	f043 0301 	orr.w	r3, r3, #1
 800df30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800df32:	4b05      	ldr	r3, [pc, #20]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a04      	ldr	r2, [pc, #16]	; (800df48 <HAL_RCC_OscConfig+0x76c>)
 800df38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800df3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df3e:	f7f7 fbc1 	bl	80056c4 <HAL_GetTick>
 800df42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800df44:	e011      	b.n	800df6a <HAL_RCC_OscConfig+0x78e>
 800df46:	bf00      	nop
 800df48:	58024400 	.word	0x58024400
 800df4c:	58024800 	.word	0x58024800
 800df50:	fffffc0c 	.word	0xfffffc0c
 800df54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df58:	f7f7 fbb4 	bl	80056c4 <HAL_GetTick>
 800df5c:	4602      	mov	r2, r0
 800df5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	2b02      	cmp	r3, #2
 800df64:	d901      	bls.n	800df6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800df66:	2303      	movs	r3, #3
 800df68:	e08a      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800df6a:	4b47      	ldr	r3, [pc, #284]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df72:	2b00      	cmp	r3, #0
 800df74:	d0f0      	beq.n	800df58 <HAL_RCC_OscConfig+0x77c>
 800df76:	e082      	b.n	800e07e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df78:	4b43      	ldr	r3, [pc, #268]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a42      	ldr	r2, [pc, #264]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800df7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800df82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df84:	f7f7 fb9e 	bl	80056c4 <HAL_GetTick>
 800df88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800df8a:	e008      	b.n	800df9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df8c:	f7f7 fb9a 	bl	80056c4 <HAL_GetTick>
 800df90:	4602      	mov	r2, r0
 800df92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	2b02      	cmp	r3, #2
 800df98:	d901      	bls.n	800df9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800df9a:	2303      	movs	r3, #3
 800df9c:	e070      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800df9e:	4b3a      	ldr	r3, [pc, #232]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d1f0      	bne.n	800df8c <HAL_RCC_OscConfig+0x7b0>
 800dfaa:	e068      	b.n	800e07e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800dfac:	4b36      	ldr	r3, [pc, #216]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800dfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800dfb2:	4b35      	ldr	r3, [pc, #212]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800dfb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d031      	beq.n	800e024 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	f003 0203 	and.w	r2, r3, #3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d12a      	bne.n	800e024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	091b      	lsrs	r3, r3, #4
 800dfd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d122      	bne.n	800e024 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d11a      	bne.n	800e024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	0a5b      	lsrs	r3, r3, #9
 800dff2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dffa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d111      	bne.n	800e024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	0c1b      	lsrs	r3, r3, #16
 800e004:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e00e:	429a      	cmp	r2, r3
 800e010:	d108      	bne.n	800e024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	0e1b      	lsrs	r3, r3, #24
 800e016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e01e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e020:	429a      	cmp	r2, r3
 800e022:	d001      	beq.n	800e028 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	e02b      	b.n	800e080 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e028:	4b17      	ldr	r3, [pc, #92]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800e02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e02c:	08db      	lsrs	r3, r3, #3
 800e02e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e032:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e038:	693a      	ldr	r2, [r7, #16]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d01f      	beq.n	800e07e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e03e:	4b12      	ldr	r3, [pc, #72]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800e040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e042:	4a11      	ldr	r2, [pc, #68]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800e044:	f023 0301 	bic.w	r3, r3, #1
 800e048:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e04a:	f7f7 fb3b 	bl	80056c4 <HAL_GetTick>
 800e04e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e050:	bf00      	nop
 800e052:	f7f7 fb37 	bl	80056c4 <HAL_GetTick>
 800e056:	4602      	mov	r2, r0
 800e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d0f9      	beq.n	800e052 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e05e:	4b0a      	ldr	r3, [pc, #40]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800e060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e062:	4b0a      	ldr	r3, [pc, #40]	; (800e08c <HAL_RCC_OscConfig+0x8b0>)
 800e064:	4013      	ands	r3, r2
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e06a:	00d2      	lsls	r2, r2, #3
 800e06c:	4906      	ldr	r1, [pc, #24]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800e06e:	4313      	orrs	r3, r2
 800e070:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e072:	4b05      	ldr	r3, [pc, #20]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800e074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e076:	4a04      	ldr	r2, [pc, #16]	; (800e088 <HAL_RCC_OscConfig+0x8ac>)
 800e078:	f043 0301 	orr.w	r3, r3, #1
 800e07c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e07e:	2300      	movs	r3, #0
}
 800e080:	4618      	mov	r0, r3
 800e082:	3730      	adds	r7, #48	; 0x30
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	58024400 	.word	0x58024400
 800e08c:	ffff0007 	.word	0xffff0007

0800e090 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d101      	bne.n	800e0a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e19c      	b.n	800e3de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e0a4:	4b8a      	ldr	r3, [pc, #552]	; (800e2d0 <HAL_RCC_ClockConfig+0x240>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f003 030f 	and.w	r3, r3, #15
 800e0ac:	683a      	ldr	r2, [r7, #0]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d910      	bls.n	800e0d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e0b2:	4b87      	ldr	r3, [pc, #540]	; (800e2d0 <HAL_RCC_ClockConfig+0x240>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f023 020f 	bic.w	r2, r3, #15
 800e0ba:	4985      	ldr	r1, [pc, #532]	; (800e2d0 <HAL_RCC_ClockConfig+0x240>)
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e0c2:	4b83      	ldr	r3, [pc, #524]	; (800e2d0 <HAL_RCC_ClockConfig+0x240>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f003 030f 	and.w	r3, r3, #15
 800e0ca:	683a      	ldr	r2, [r7, #0]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d001      	beq.n	800e0d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	e184      	b.n	800e3de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f003 0304 	and.w	r3, r3, #4
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d010      	beq.n	800e102 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	691a      	ldr	r2, [r3, #16]
 800e0e4:	4b7b      	ldr	r3, [pc, #492]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d908      	bls.n	800e102 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e0f0:	4b78      	ldr	r3, [pc, #480]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e0f2:	699b      	ldr	r3, [r3, #24]
 800e0f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	691b      	ldr	r3, [r3, #16]
 800e0fc:	4975      	ldr	r1, [pc, #468]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e0fe:	4313      	orrs	r3, r2
 800e100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f003 0308 	and.w	r3, r3, #8
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d010      	beq.n	800e130 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	695a      	ldr	r2, [r3, #20]
 800e112:	4b70      	ldr	r3, [pc, #448]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e114:	69db      	ldr	r3, [r3, #28]
 800e116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d908      	bls.n	800e130 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e11e:	4b6d      	ldr	r3, [pc, #436]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e120:	69db      	ldr	r3, [r3, #28]
 800e122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	695b      	ldr	r3, [r3, #20]
 800e12a:	496a      	ldr	r1, [pc, #424]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e12c:	4313      	orrs	r3, r2
 800e12e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f003 0310 	and.w	r3, r3, #16
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d010      	beq.n	800e15e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	699a      	ldr	r2, [r3, #24]
 800e140:	4b64      	ldr	r3, [pc, #400]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e142:	69db      	ldr	r3, [r3, #28]
 800e144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e148:	429a      	cmp	r2, r3
 800e14a:	d908      	bls.n	800e15e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e14c:	4b61      	ldr	r3, [pc, #388]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e14e:	69db      	ldr	r3, [r3, #28]
 800e150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	699b      	ldr	r3, [r3, #24]
 800e158:	495e      	ldr	r1, [pc, #376]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e15a:	4313      	orrs	r3, r2
 800e15c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f003 0320 	and.w	r3, r3, #32
 800e166:	2b00      	cmp	r3, #0
 800e168:	d010      	beq.n	800e18c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	69da      	ldr	r2, [r3, #28]
 800e16e:	4b59      	ldr	r3, [pc, #356]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e170:	6a1b      	ldr	r3, [r3, #32]
 800e172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e176:	429a      	cmp	r2, r3
 800e178:	d908      	bls.n	800e18c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e17a:	4b56      	ldr	r3, [pc, #344]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e17c:	6a1b      	ldr	r3, [r3, #32]
 800e17e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	69db      	ldr	r3, [r3, #28]
 800e186:	4953      	ldr	r1, [pc, #332]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e188:	4313      	orrs	r3, r2
 800e18a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f003 0302 	and.w	r3, r3, #2
 800e194:	2b00      	cmp	r3, #0
 800e196:	d010      	beq.n	800e1ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	68da      	ldr	r2, [r3, #12]
 800e19c:	4b4d      	ldr	r3, [pc, #308]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e19e:	699b      	ldr	r3, [r3, #24]
 800e1a0:	f003 030f 	and.w	r3, r3, #15
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d908      	bls.n	800e1ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e1a8:	4b4a      	ldr	r3, [pc, #296]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	f023 020f 	bic.w	r2, r3, #15
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	4947      	ldr	r1, [pc, #284]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f003 0301 	and.w	r3, r3, #1
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d055      	beq.n	800e272 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e1c6:	4b43      	ldr	r3, [pc, #268]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e1c8:	699b      	ldr	r3, [r3, #24]
 800e1ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	689b      	ldr	r3, [r3, #8]
 800e1d2:	4940      	ldr	r1, [pc, #256]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	2b02      	cmp	r3, #2
 800e1de:	d107      	bne.n	800e1f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e1e0:	4b3c      	ldr	r3, [pc, #240]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d121      	bne.n	800e230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e0f6      	b.n	800e3de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	2b03      	cmp	r3, #3
 800e1f6:	d107      	bne.n	800e208 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e1f8:	4b36      	ldr	r3, [pc, #216]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e200:	2b00      	cmp	r3, #0
 800e202:	d115      	bne.n	800e230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e204:	2301      	movs	r3, #1
 800e206:	e0ea      	b.n	800e3de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d107      	bne.n	800e220 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e210:	4b30      	ldr	r3, [pc, #192]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d109      	bne.n	800e230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e21c:	2301      	movs	r3, #1
 800e21e:	e0de      	b.n	800e3de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e220:	4b2c      	ldr	r3, [pc, #176]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f003 0304 	and.w	r3, r3, #4
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d101      	bne.n	800e230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e22c:	2301      	movs	r3, #1
 800e22e:	e0d6      	b.n	800e3de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e230:	4b28      	ldr	r3, [pc, #160]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e232:	691b      	ldr	r3, [r3, #16]
 800e234:	f023 0207 	bic.w	r2, r3, #7
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	4925      	ldr	r1, [pc, #148]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e23e:	4313      	orrs	r3, r2
 800e240:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e242:	f7f7 fa3f 	bl	80056c4 <HAL_GetTick>
 800e246:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e248:	e00a      	b.n	800e260 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e24a:	f7f7 fa3b 	bl	80056c4 <HAL_GetTick>
 800e24e:	4602      	mov	r2, r0
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	1ad3      	subs	r3, r2, r3
 800e254:	f241 3288 	movw	r2, #5000	; 0x1388
 800e258:	4293      	cmp	r3, r2
 800e25a:	d901      	bls.n	800e260 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e25c:	2303      	movs	r3, #3
 800e25e:	e0be      	b.n	800e3de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e260:	4b1c      	ldr	r3, [pc, #112]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e262:	691b      	ldr	r3, [r3, #16]
 800e264:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	429a      	cmp	r2, r3
 800e270:	d1eb      	bne.n	800e24a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f003 0302 	and.w	r3, r3, #2
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d010      	beq.n	800e2a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	68da      	ldr	r2, [r3, #12]
 800e282:	4b14      	ldr	r3, [pc, #80]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e284:	699b      	ldr	r3, [r3, #24]
 800e286:	f003 030f 	and.w	r3, r3, #15
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d208      	bcs.n	800e2a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e28e:	4b11      	ldr	r3, [pc, #68]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e290:	699b      	ldr	r3, [r3, #24]
 800e292:	f023 020f 	bic.w	r2, r3, #15
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	490e      	ldr	r1, [pc, #56]	; (800e2d4 <HAL_RCC_ClockConfig+0x244>)
 800e29c:	4313      	orrs	r3, r2
 800e29e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e2a0:	4b0b      	ldr	r3, [pc, #44]	; (800e2d0 <HAL_RCC_ClockConfig+0x240>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f003 030f 	and.w	r3, r3, #15
 800e2a8:	683a      	ldr	r2, [r7, #0]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d214      	bcs.n	800e2d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e2ae:	4b08      	ldr	r3, [pc, #32]	; (800e2d0 <HAL_RCC_ClockConfig+0x240>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f023 020f 	bic.w	r2, r3, #15
 800e2b6:	4906      	ldr	r1, [pc, #24]	; (800e2d0 <HAL_RCC_ClockConfig+0x240>)
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e2be:	4b04      	ldr	r3, [pc, #16]	; (800e2d0 <HAL_RCC_ClockConfig+0x240>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f003 030f 	and.w	r3, r3, #15
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d005      	beq.n	800e2d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	e086      	b.n	800e3de <HAL_RCC_ClockConfig+0x34e>
 800e2d0:	52002000 	.word	0x52002000
 800e2d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f003 0304 	and.w	r3, r3, #4
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d010      	beq.n	800e306 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	691a      	ldr	r2, [r3, #16]
 800e2e8:	4b3f      	ldr	r3, [pc, #252]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e2ea:	699b      	ldr	r3, [r3, #24]
 800e2ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d208      	bcs.n	800e306 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e2f4:	4b3c      	ldr	r3, [pc, #240]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e2f6:	699b      	ldr	r3, [r3, #24]
 800e2f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	691b      	ldr	r3, [r3, #16]
 800e300:	4939      	ldr	r1, [pc, #228]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e302:	4313      	orrs	r3, r2
 800e304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f003 0308 	and.w	r3, r3, #8
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d010      	beq.n	800e334 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	695a      	ldr	r2, [r3, #20]
 800e316:	4b34      	ldr	r3, [pc, #208]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e318:	69db      	ldr	r3, [r3, #28]
 800e31a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e31e:	429a      	cmp	r2, r3
 800e320:	d208      	bcs.n	800e334 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e322:	4b31      	ldr	r3, [pc, #196]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e324:	69db      	ldr	r3, [r3, #28]
 800e326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	695b      	ldr	r3, [r3, #20]
 800e32e:	492e      	ldr	r1, [pc, #184]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e330:	4313      	orrs	r3, r2
 800e332:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f003 0310 	and.w	r3, r3, #16
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d010      	beq.n	800e362 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	699a      	ldr	r2, [r3, #24]
 800e344:	4b28      	ldr	r3, [pc, #160]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e346:	69db      	ldr	r3, [r3, #28]
 800e348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d208      	bcs.n	800e362 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e350:	4b25      	ldr	r3, [pc, #148]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e352:	69db      	ldr	r3, [r3, #28]
 800e354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	699b      	ldr	r3, [r3, #24]
 800e35c:	4922      	ldr	r1, [pc, #136]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e35e:	4313      	orrs	r3, r2
 800e360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f003 0320 	and.w	r3, r3, #32
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d010      	beq.n	800e390 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	69da      	ldr	r2, [r3, #28]
 800e372:	4b1d      	ldr	r3, [pc, #116]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e374:	6a1b      	ldr	r3, [r3, #32]
 800e376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d208      	bcs.n	800e390 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e37e:	4b1a      	ldr	r3, [pc, #104]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e380:	6a1b      	ldr	r3, [r3, #32]
 800e382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	69db      	ldr	r3, [r3, #28]
 800e38a:	4917      	ldr	r1, [pc, #92]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e38c:	4313      	orrs	r3, r2
 800e38e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e390:	f000 f834 	bl	800e3fc <HAL_RCC_GetSysClockFreq>
 800e394:	4602      	mov	r2, r0
 800e396:	4b14      	ldr	r3, [pc, #80]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e398:	699b      	ldr	r3, [r3, #24]
 800e39a:	0a1b      	lsrs	r3, r3, #8
 800e39c:	f003 030f 	and.w	r3, r3, #15
 800e3a0:	4912      	ldr	r1, [pc, #72]	; (800e3ec <HAL_RCC_ClockConfig+0x35c>)
 800e3a2:	5ccb      	ldrb	r3, [r1, r3]
 800e3a4:	f003 031f 	and.w	r3, r3, #31
 800e3a8:	fa22 f303 	lsr.w	r3, r2, r3
 800e3ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e3ae:	4b0e      	ldr	r3, [pc, #56]	; (800e3e8 <HAL_RCC_ClockConfig+0x358>)
 800e3b0:	699b      	ldr	r3, [r3, #24]
 800e3b2:	f003 030f 	and.w	r3, r3, #15
 800e3b6:	4a0d      	ldr	r2, [pc, #52]	; (800e3ec <HAL_RCC_ClockConfig+0x35c>)
 800e3b8:	5cd3      	ldrb	r3, [r2, r3]
 800e3ba:	f003 031f 	and.w	r3, r3, #31
 800e3be:	693a      	ldr	r2, [r7, #16]
 800e3c0:	fa22 f303 	lsr.w	r3, r2, r3
 800e3c4:	4a0a      	ldr	r2, [pc, #40]	; (800e3f0 <HAL_RCC_ClockConfig+0x360>)
 800e3c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e3c8:	4a0a      	ldr	r2, [pc, #40]	; (800e3f4 <HAL_RCC_ClockConfig+0x364>)
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e3ce:	4b0a      	ldr	r3, [pc, #40]	; (800e3f8 <HAL_RCC_ClockConfig+0x368>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7f5 ff9c 	bl	8004310 <HAL_InitTick>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3718      	adds	r7, #24
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	58024400 	.word	0x58024400
 800e3ec:	0801aac4 	.word	0x0801aac4
 800e3f0:	24000094 	.word	0x24000094
 800e3f4:	24000090 	.word	0x24000090
 800e3f8:	24000098 	.word	0x24000098

0800e3fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b089      	sub	sp, #36	; 0x24
 800e400:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e402:	4bb3      	ldr	r3, [pc, #716]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e404:	691b      	ldr	r3, [r3, #16]
 800e406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e40a:	2b18      	cmp	r3, #24
 800e40c:	f200 8155 	bhi.w	800e6ba <HAL_RCC_GetSysClockFreq+0x2be>
 800e410:	a201      	add	r2, pc, #4	; (adr r2, 800e418 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e416:	bf00      	nop
 800e418:	0800e47d 	.word	0x0800e47d
 800e41c:	0800e6bb 	.word	0x0800e6bb
 800e420:	0800e6bb 	.word	0x0800e6bb
 800e424:	0800e6bb 	.word	0x0800e6bb
 800e428:	0800e6bb 	.word	0x0800e6bb
 800e42c:	0800e6bb 	.word	0x0800e6bb
 800e430:	0800e6bb 	.word	0x0800e6bb
 800e434:	0800e6bb 	.word	0x0800e6bb
 800e438:	0800e4a3 	.word	0x0800e4a3
 800e43c:	0800e6bb 	.word	0x0800e6bb
 800e440:	0800e6bb 	.word	0x0800e6bb
 800e444:	0800e6bb 	.word	0x0800e6bb
 800e448:	0800e6bb 	.word	0x0800e6bb
 800e44c:	0800e6bb 	.word	0x0800e6bb
 800e450:	0800e6bb 	.word	0x0800e6bb
 800e454:	0800e6bb 	.word	0x0800e6bb
 800e458:	0800e4a9 	.word	0x0800e4a9
 800e45c:	0800e6bb 	.word	0x0800e6bb
 800e460:	0800e6bb 	.word	0x0800e6bb
 800e464:	0800e6bb 	.word	0x0800e6bb
 800e468:	0800e6bb 	.word	0x0800e6bb
 800e46c:	0800e6bb 	.word	0x0800e6bb
 800e470:	0800e6bb 	.word	0x0800e6bb
 800e474:	0800e6bb 	.word	0x0800e6bb
 800e478:	0800e4af 	.word	0x0800e4af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e47c:	4b94      	ldr	r3, [pc, #592]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f003 0320 	and.w	r3, r3, #32
 800e484:	2b00      	cmp	r3, #0
 800e486:	d009      	beq.n	800e49c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e488:	4b91      	ldr	r3, [pc, #580]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	08db      	lsrs	r3, r3, #3
 800e48e:	f003 0303 	and.w	r3, r3, #3
 800e492:	4a90      	ldr	r2, [pc, #576]	; (800e6d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e494:	fa22 f303 	lsr.w	r3, r2, r3
 800e498:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e49a:	e111      	b.n	800e6c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e49c:	4b8d      	ldr	r3, [pc, #564]	; (800e6d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e49e:	61bb      	str	r3, [r7, #24]
      break;
 800e4a0:	e10e      	b.n	800e6c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e4a2:	4b8d      	ldr	r3, [pc, #564]	; (800e6d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e4a4:	61bb      	str	r3, [r7, #24]
      break;
 800e4a6:	e10b      	b.n	800e6c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e4a8:	4b8c      	ldr	r3, [pc, #560]	; (800e6dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e4aa:	61bb      	str	r3, [r7, #24]
      break;
 800e4ac:	e108      	b.n	800e6c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e4ae:	4b88      	ldr	r3, [pc, #544]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b2:	f003 0303 	and.w	r3, r3, #3
 800e4b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e4b8:	4b85      	ldr	r3, [pc, #532]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4bc:	091b      	lsrs	r3, r3, #4
 800e4be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e4c4:	4b82      	ldr	r3, [pc, #520]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c8:	f003 0301 	and.w	r3, r3, #1
 800e4cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e4ce:	4b80      	ldr	r3, [pc, #512]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d2:	08db      	lsrs	r3, r3, #3
 800e4d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	fb02 f303 	mul.w	r3, r2, r3
 800e4de:	ee07 3a90 	vmov	s15, r3
 800e4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	f000 80e1 	beq.w	800e6b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	2b02      	cmp	r3, #2
 800e4f6:	f000 8083 	beq.w	800e600 <HAL_RCC_GetSysClockFreq+0x204>
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	2b02      	cmp	r3, #2
 800e4fe:	f200 80a1 	bhi.w	800e644 <HAL_RCC_GetSysClockFreq+0x248>
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d003      	beq.n	800e510 <HAL_RCC_GetSysClockFreq+0x114>
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d056      	beq.n	800e5bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800e50e:	e099      	b.n	800e644 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e510:	4b6f      	ldr	r3, [pc, #444]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f003 0320 	and.w	r3, r3, #32
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d02d      	beq.n	800e578 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e51c:	4b6c      	ldr	r3, [pc, #432]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	08db      	lsrs	r3, r3, #3
 800e522:	f003 0303 	and.w	r3, r3, #3
 800e526:	4a6b      	ldr	r2, [pc, #428]	; (800e6d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e528:	fa22 f303 	lsr.w	r3, r2, r3
 800e52c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	ee07 3a90 	vmov	s15, r3
 800e534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	ee07 3a90 	vmov	s15, r3
 800e53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e546:	4b62      	ldr	r3, [pc, #392]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e54e:	ee07 3a90 	vmov	s15, r3
 800e552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e556:	ed97 6a02 	vldr	s12, [r7, #8]
 800e55a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800e6e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e55e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e56a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e572:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e576:	e087      	b.n	800e688 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	ee07 3a90 	vmov	s15, r3
 800e57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e582:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e6e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e58a:	4b51      	ldr	r3, [pc, #324]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e592:	ee07 3a90 	vmov	s15, r3
 800e596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e59a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e59e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800e6e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e5a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e5ba:	e065      	b.n	800e688 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	ee07 3a90 	vmov	s15, r3
 800e5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e6e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e5ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5ce:	4b40      	ldr	r3, [pc, #256]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5d6:	ee07 3a90 	vmov	s15, r3
 800e5da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5de:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e6e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e5e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e5fe:	e043      	b.n	800e688 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	ee07 3a90 	vmov	s15, r3
 800e606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e60a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800e6ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800e60e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e612:	4b2f      	ldr	r3, [pc, #188]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e61a:	ee07 3a90 	vmov	s15, r3
 800e61e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e622:	ed97 6a02 	vldr	s12, [r7, #8]
 800e626:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e6e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e62a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e62e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e63a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e63e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e642:	e021      	b.n	800e688 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	ee07 3a90 	vmov	s15, r3
 800e64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e64e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e6e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e656:	4b1e      	ldr	r3, [pc, #120]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e65e:	ee07 3a90 	vmov	s15, r3
 800e662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e666:	ed97 6a02 	vldr	s12, [r7, #8]
 800e66a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800e6e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e66e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e67a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e67e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e686:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e688:	4b11      	ldr	r3, [pc, #68]	; (800e6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e68c:	0a5b      	lsrs	r3, r3, #9
 800e68e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e692:	3301      	adds	r3, #1
 800e694:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	ee07 3a90 	vmov	s15, r3
 800e69c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e6a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6ac:	ee17 3a90 	vmov	r3, s15
 800e6b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e6b2:	e005      	b.n	800e6c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	61bb      	str	r3, [r7, #24]
      break;
 800e6b8:	e002      	b.n	800e6c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e6ba:	4b07      	ldr	r3, [pc, #28]	; (800e6d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e6bc:	61bb      	str	r3, [r7, #24]
      break;
 800e6be:	bf00      	nop
  }

  return sysclockfreq;
 800e6c0:	69bb      	ldr	r3, [r7, #24]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3724      	adds	r7, #36	; 0x24
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr
 800e6ce:	bf00      	nop
 800e6d0:	58024400 	.word	0x58024400
 800e6d4:	03d09000 	.word	0x03d09000
 800e6d8:	003d0900 	.word	0x003d0900
 800e6dc:	017d7840 	.word	0x017d7840
 800e6e0:	46000000 	.word	0x46000000
 800e6e4:	4c742400 	.word	0x4c742400
 800e6e8:	4a742400 	.word	0x4a742400
 800e6ec:	4bbebc20 	.word	0x4bbebc20

0800e6f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e6f6:	f7ff fe81 	bl	800e3fc <HAL_RCC_GetSysClockFreq>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	4b10      	ldr	r3, [pc, #64]	; (800e740 <HAL_RCC_GetHCLKFreq+0x50>)
 800e6fe:	699b      	ldr	r3, [r3, #24]
 800e700:	0a1b      	lsrs	r3, r3, #8
 800e702:	f003 030f 	and.w	r3, r3, #15
 800e706:	490f      	ldr	r1, [pc, #60]	; (800e744 <HAL_RCC_GetHCLKFreq+0x54>)
 800e708:	5ccb      	ldrb	r3, [r1, r3]
 800e70a:	f003 031f 	and.w	r3, r3, #31
 800e70e:	fa22 f303 	lsr.w	r3, r2, r3
 800e712:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e714:	4b0a      	ldr	r3, [pc, #40]	; (800e740 <HAL_RCC_GetHCLKFreq+0x50>)
 800e716:	699b      	ldr	r3, [r3, #24]
 800e718:	f003 030f 	and.w	r3, r3, #15
 800e71c:	4a09      	ldr	r2, [pc, #36]	; (800e744 <HAL_RCC_GetHCLKFreq+0x54>)
 800e71e:	5cd3      	ldrb	r3, [r2, r3]
 800e720:	f003 031f 	and.w	r3, r3, #31
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	fa22 f303 	lsr.w	r3, r2, r3
 800e72a:	4a07      	ldr	r2, [pc, #28]	; (800e748 <HAL_RCC_GetHCLKFreq+0x58>)
 800e72c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e72e:	4a07      	ldr	r2, [pc, #28]	; (800e74c <HAL_RCC_GetHCLKFreq+0x5c>)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e734:	4b04      	ldr	r3, [pc, #16]	; (800e748 <HAL_RCC_GetHCLKFreq+0x58>)
 800e736:	681b      	ldr	r3, [r3, #0]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	58024400 	.word	0x58024400
 800e744:	0801aac4 	.word	0x0801aac4
 800e748:	24000094 	.word	0x24000094
 800e74c:	24000090 	.word	0x24000090

0800e750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e754:	f7ff ffcc 	bl	800e6f0 <HAL_RCC_GetHCLKFreq>
 800e758:	4602      	mov	r2, r0
 800e75a:	4b06      	ldr	r3, [pc, #24]	; (800e774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e75c:	69db      	ldr	r3, [r3, #28]
 800e75e:	091b      	lsrs	r3, r3, #4
 800e760:	f003 0307 	and.w	r3, r3, #7
 800e764:	4904      	ldr	r1, [pc, #16]	; (800e778 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e766:	5ccb      	ldrb	r3, [r1, r3]
 800e768:	f003 031f 	and.w	r3, r3, #31
 800e76c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e770:	4618      	mov	r0, r3
 800e772:	bd80      	pop	{r7, pc}
 800e774:	58024400 	.word	0x58024400
 800e778:	0801aac4 	.word	0x0801aac4

0800e77c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e780:	f7ff ffb6 	bl	800e6f0 <HAL_RCC_GetHCLKFreq>
 800e784:	4602      	mov	r2, r0
 800e786:	4b06      	ldr	r3, [pc, #24]	; (800e7a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e788:	69db      	ldr	r3, [r3, #28]
 800e78a:	0a1b      	lsrs	r3, r3, #8
 800e78c:	f003 0307 	and.w	r3, r3, #7
 800e790:	4904      	ldr	r1, [pc, #16]	; (800e7a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e792:	5ccb      	ldrb	r3, [r1, r3]
 800e794:	f003 031f 	and.w	r3, r3, #31
 800e798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	58024400 	.word	0x58024400
 800e7a4:	0801aac4 	.word	0x0801aac4

0800e7a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	223f      	movs	r2, #63	; 0x3f
 800e7b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e7b8:	4b1a      	ldr	r3, [pc, #104]	; (800e824 <HAL_RCC_GetClockConfig+0x7c>)
 800e7ba:	691b      	ldr	r3, [r3, #16]
 800e7bc:	f003 0207 	and.w	r2, r3, #7
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800e7c4:	4b17      	ldr	r3, [pc, #92]	; (800e824 <HAL_RCC_GetClockConfig+0x7c>)
 800e7c6:	699b      	ldr	r3, [r3, #24]
 800e7c8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800e7d0:	4b14      	ldr	r3, [pc, #80]	; (800e824 <HAL_RCC_GetClockConfig+0x7c>)
 800e7d2:	699b      	ldr	r3, [r3, #24]
 800e7d4:	f003 020f 	and.w	r2, r3, #15
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800e7dc:	4b11      	ldr	r3, [pc, #68]	; (800e824 <HAL_RCC_GetClockConfig+0x7c>)
 800e7de:	699b      	ldr	r3, [r3, #24]
 800e7e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800e7e8:	4b0e      	ldr	r3, [pc, #56]	; (800e824 <HAL_RCC_GetClockConfig+0x7c>)
 800e7ea:	69db      	ldr	r3, [r3, #28]
 800e7ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800e7f4:	4b0b      	ldr	r3, [pc, #44]	; (800e824 <HAL_RCC_GetClockConfig+0x7c>)
 800e7f6:	69db      	ldr	r3, [r3, #28]
 800e7f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e800:	4b08      	ldr	r3, [pc, #32]	; (800e824 <HAL_RCC_GetClockConfig+0x7c>)
 800e802:	6a1b      	ldr	r3, [r3, #32]
 800e804:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e80c:	4b06      	ldr	r3, [pc, #24]	; (800e828 <HAL_RCC_GetClockConfig+0x80>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f003 020f 	and.w	r2, r3, #15
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	601a      	str	r2, [r3, #0]
}
 800e818:	bf00      	nop
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr
 800e824:	58024400 	.word	0x58024400
 800e828:	52002000 	.word	0x52002000

0800e82c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e82c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e830:	b0ca      	sub	sp, #296	; 0x128
 800e832:	af00      	add	r7, sp, #0
 800e834:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e838:	2300      	movs	r3, #0
 800e83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e83e:	2300      	movs	r3, #0
 800e840:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800e850:	2500      	movs	r5, #0
 800e852:	ea54 0305 	orrs.w	r3, r4, r5
 800e856:	d049      	beq.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e85c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e85e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e862:	d02f      	beq.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e864:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e868:	d828      	bhi.n	800e8bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e86a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e86e:	d01a      	beq.n	800e8a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e874:	d822      	bhi.n	800e8bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e876:	2b00      	cmp	r3, #0
 800e878:	d003      	beq.n	800e882 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e87a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e87e:	d007      	beq.n	800e890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e880:	e01c      	b.n	800e8bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e882:	4bb8      	ldr	r3, [pc, #736]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e886:	4ab7      	ldr	r2, [pc, #732]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e88c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e88e:	e01a      	b.n	800e8c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e894:	3308      	adds	r3, #8
 800e896:	2102      	movs	r1, #2
 800e898:	4618      	mov	r0, r3
 800e89a:	f002 fb61 	bl	8010f60 <RCCEx_PLL2_Config>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e8a4:	e00f      	b.n	800e8c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8aa:	3328      	adds	r3, #40	; 0x28
 800e8ac:	2102      	movs	r1, #2
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f002 fc08 	bl	80110c4 <RCCEx_PLL3_Config>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e8ba:	e004      	b.n	800e8c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e8c2:	e000      	b.n	800e8c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e8c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d10a      	bne.n	800e8e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e8ce:	4ba5      	ldr	r3, [pc, #660]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e8d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8dc:	4aa1      	ldr	r2, [pc, #644]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e8de:	430b      	orrs	r3, r1
 800e8e0:	6513      	str	r3, [r2, #80]	; 0x50
 800e8e2:	e003      	b.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e8e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800e8f8:	f04f 0900 	mov.w	r9, #0
 800e8fc:	ea58 0309 	orrs.w	r3, r8, r9
 800e900:	d047      	beq.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e908:	2b04      	cmp	r3, #4
 800e90a:	d82a      	bhi.n	800e962 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e90c:	a201      	add	r2, pc, #4	; (adr r2, 800e914 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e912:	bf00      	nop
 800e914:	0800e929 	.word	0x0800e929
 800e918:	0800e937 	.word	0x0800e937
 800e91c:	0800e94d 	.word	0x0800e94d
 800e920:	0800e96b 	.word	0x0800e96b
 800e924:	0800e96b 	.word	0x0800e96b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e928:	4b8e      	ldr	r3, [pc, #568]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e92c:	4a8d      	ldr	r2, [pc, #564]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e92e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e934:	e01a      	b.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e93a:	3308      	adds	r3, #8
 800e93c:	2100      	movs	r1, #0
 800e93e:	4618      	mov	r0, r3
 800e940:	f002 fb0e 	bl	8010f60 <RCCEx_PLL2_Config>
 800e944:	4603      	mov	r3, r0
 800e946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e94a:	e00f      	b.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e950:	3328      	adds	r3, #40	; 0x28
 800e952:	2100      	movs	r1, #0
 800e954:	4618      	mov	r0, r3
 800e956:	f002 fbb5 	bl	80110c4 <RCCEx_PLL3_Config>
 800e95a:	4603      	mov	r3, r0
 800e95c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e960:	e004      	b.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e962:	2301      	movs	r3, #1
 800e964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e968:	e000      	b.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e96a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e96c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10a      	bne.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e974:	4b7b      	ldr	r3, [pc, #492]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e978:	f023 0107 	bic.w	r1, r3, #7
 800e97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e982:	4a78      	ldr	r2, [pc, #480]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e984:	430b      	orrs	r3, r1
 800e986:	6513      	str	r3, [r2, #80]	; 0x50
 800e988:	e003      	b.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e98a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e98e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800e99e:	f04f 0b00 	mov.w	fp, #0
 800e9a2:	ea5a 030b 	orrs.w	r3, sl, fp
 800e9a6:	d04c      	beq.n	800ea42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9b2:	d030      	beq.n	800ea16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e9b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9b8:	d829      	bhi.n	800ea0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e9ba:	2bc0      	cmp	r3, #192	; 0xc0
 800e9bc:	d02d      	beq.n	800ea1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e9be:	2bc0      	cmp	r3, #192	; 0xc0
 800e9c0:	d825      	bhi.n	800ea0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e9c2:	2b80      	cmp	r3, #128	; 0x80
 800e9c4:	d018      	beq.n	800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800e9c6:	2b80      	cmp	r3, #128	; 0x80
 800e9c8:	d821      	bhi.n	800ea0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d002      	beq.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e9ce:	2b40      	cmp	r3, #64	; 0x40
 800e9d0:	d007      	beq.n	800e9e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800e9d2:	e01c      	b.n	800ea0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e9d4:	4b63      	ldr	r3, [pc, #396]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d8:	4a62      	ldr	r2, [pc, #392]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e9de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e9e0:	e01c      	b.n	800ea1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9e6:	3308      	adds	r3, #8
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f002 fab8 	bl	8010f60 <RCCEx_PLL2_Config>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e9f6:	e011      	b.n	800ea1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9fc:	3328      	adds	r3, #40	; 0x28
 800e9fe:	2100      	movs	r1, #0
 800ea00:	4618      	mov	r0, r3
 800ea02:	f002 fb5f 	bl	80110c4 <RCCEx_PLL3_Config>
 800ea06:	4603      	mov	r3, r0
 800ea08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ea0c:	e006      	b.n	800ea1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea0e:	2301      	movs	r3, #1
 800ea10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ea14:	e002      	b.n	800ea1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ea16:	bf00      	nop
 800ea18:	e000      	b.n	800ea1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ea1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d10a      	bne.n	800ea3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ea24:	4b4f      	ldr	r3, [pc, #316]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea28:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ea2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea32:	4a4c      	ldr	r2, [pc, #304]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea34:	430b      	orrs	r3, r1
 800ea36:	6513      	str	r3, [r2, #80]	; 0x50
 800ea38:	e003      	b.n	800ea42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ea42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ea4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ea52:	2300      	movs	r3, #0
 800ea54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ea58:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	d053      	beq.n	800eb0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ea62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ea6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ea6e:	d035      	beq.n	800eadc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ea70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ea74:	d82e      	bhi.n	800ead4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ea76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ea7a:	d031      	beq.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ea7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ea80:	d828      	bhi.n	800ead4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ea82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea86:	d01a      	beq.n	800eabe <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ea88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea8c:	d822      	bhi.n	800ead4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d003      	beq.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ea92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ea96:	d007      	beq.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ea98:	e01c      	b.n	800ead4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea9a:	4b32      	ldr	r3, [pc, #200]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9e:	4a31      	ldr	r2, [pc, #196]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eaa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eaa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eaa6:	e01c      	b.n	800eae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eaa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaac:	3308      	adds	r3, #8
 800eaae:	2100      	movs	r1, #0
 800eab0:	4618      	mov	r0, r3
 800eab2:	f002 fa55 	bl	8010f60 <RCCEx_PLL2_Config>
 800eab6:	4603      	mov	r3, r0
 800eab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800eabc:	e011      	b.n	800eae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eac2:	3328      	adds	r3, #40	; 0x28
 800eac4:	2100      	movs	r1, #0
 800eac6:	4618      	mov	r0, r3
 800eac8:	f002 fafc 	bl	80110c4 <RCCEx_PLL3_Config>
 800eacc:	4603      	mov	r3, r0
 800eace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ead2:	e006      	b.n	800eae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ead4:	2301      	movs	r3, #1
 800ead6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eada:	e002      	b.n	800eae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800eadc:	bf00      	nop
 800eade:	e000      	b.n	800eae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800eae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d10b      	bne.n	800eb02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800eaea:	4b1e      	ldr	r3, [pc, #120]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eaec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eaee:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800eaf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800eafa:	4a1a      	ldr	r2, [pc, #104]	; (800eb64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eafc:	430b      	orrs	r3, r1
 800eafe:	6593      	str	r3, [r2, #88]	; 0x58
 800eb00:	e003      	b.n	800eb0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800eb0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb12:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800eb16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800eb20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800eb24:	460b      	mov	r3, r1
 800eb26:	4313      	orrs	r3, r2
 800eb28:	d056      	beq.n	800ebd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800eb2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eb36:	d038      	beq.n	800ebaa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800eb38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eb3c:	d831      	bhi.n	800eba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eb3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800eb42:	d034      	beq.n	800ebae <HAL_RCCEx_PeriphCLKConfig+0x382>
 800eb44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800eb48:	d82b      	bhi.n	800eba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eb4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb4e:	d01d      	beq.n	800eb8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800eb50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb54:	d825      	bhi.n	800eba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d006      	beq.n	800eb68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800eb5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eb5e:	d00a      	beq.n	800eb76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800eb60:	e01f      	b.n	800eba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eb62:	bf00      	nop
 800eb64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb68:	4ba2      	ldr	r3, [pc, #648]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6c:	4aa1      	ldr	r2, [pc, #644]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eb6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eb74:	e01c      	b.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb7a:	3308      	adds	r3, #8
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f002 f9ee 	bl	8010f60 <RCCEx_PLL2_Config>
 800eb84:	4603      	mov	r3, r0
 800eb86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800eb8a:	e011      	b.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb90:	3328      	adds	r3, #40	; 0x28
 800eb92:	2100      	movs	r1, #0
 800eb94:	4618      	mov	r0, r3
 800eb96:	f002 fa95 	bl	80110c4 <RCCEx_PLL3_Config>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eba0:	e006      	b.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800eba2:	2301      	movs	r3, #1
 800eba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eba8:	e002      	b.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ebaa:	bf00      	nop
 800ebac:	e000      	b.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ebae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d10b      	bne.n	800ebd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ebb8:	4b8e      	ldr	r3, [pc, #568]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ebba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebbc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ebc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ebc8:	4a8a      	ldr	r2, [pc, #552]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ebca:	430b      	orrs	r3, r1
 800ebcc:	6593      	str	r3, [r2, #88]	; 0x58
 800ebce:	e003      	b.n	800ebd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ebd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ebe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ebe8:	2300      	movs	r3, #0
 800ebea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ebee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	d03a      	beq.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ebf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebfe:	2b30      	cmp	r3, #48	; 0x30
 800ec00:	d01f      	beq.n	800ec42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ec02:	2b30      	cmp	r3, #48	; 0x30
 800ec04:	d819      	bhi.n	800ec3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ec06:	2b20      	cmp	r3, #32
 800ec08:	d00c      	beq.n	800ec24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ec0a:	2b20      	cmp	r3, #32
 800ec0c:	d815      	bhi.n	800ec3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d019      	beq.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ec12:	2b10      	cmp	r3, #16
 800ec14:	d111      	bne.n	800ec3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec16:	4b77      	ldr	r3, [pc, #476]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec1a:	4a76      	ldr	r2, [pc, #472]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ec22:	e011      	b.n	800ec48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ec24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec28:	3308      	adds	r3, #8
 800ec2a:	2102      	movs	r1, #2
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f002 f997 	bl	8010f60 <RCCEx_PLL2_Config>
 800ec32:	4603      	mov	r3, r0
 800ec34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ec38:	e006      	b.n	800ec48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec40:	e002      	b.n	800ec48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ec42:	bf00      	nop
 800ec44:	e000      	b.n	800ec48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ec46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d10a      	bne.n	800ec66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ec50:	4b68      	ldr	r3, [pc, #416]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec54:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ec58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec5e:	4a65      	ldr	r2, [pc, #404]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec60:	430b      	orrs	r3, r1
 800ec62:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ec64:	e003      	b.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ec6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec76:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ec7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ec84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ec88:	460b      	mov	r3, r1
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	d051      	beq.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ec8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec98:	d035      	beq.n	800ed06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ec9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec9e:	d82e      	bhi.n	800ecfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800eca0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800eca4:	d031      	beq.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800eca6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ecaa:	d828      	bhi.n	800ecfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ecac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ecb0:	d01a      	beq.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ecb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ecb6:	d822      	bhi.n	800ecfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d003      	beq.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ecbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecc0:	d007      	beq.n	800ecd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ecc2:	e01c      	b.n	800ecfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ecc4:	4b4b      	ldr	r3, [pc, #300]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ecc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc8:	4a4a      	ldr	r2, [pc, #296]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ecca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ecce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ecd0:	e01c      	b.n	800ed0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ecd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecd6:	3308      	adds	r3, #8
 800ecd8:	2100      	movs	r1, #0
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f002 f940 	bl	8010f60 <RCCEx_PLL2_Config>
 800ece0:	4603      	mov	r3, r0
 800ece2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ece6:	e011      	b.n	800ed0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ece8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecec:	3328      	adds	r3, #40	; 0x28
 800ecee:	2100      	movs	r1, #0
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f002 f9e7 	bl	80110c4 <RCCEx_PLL3_Config>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ecfc:	e006      	b.n	800ed0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ed04:	e002      	b.n	800ed0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ed06:	bf00      	nop
 800ed08:	e000      	b.n	800ed0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ed0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10a      	bne.n	800ed2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ed14:	4b37      	ldr	r3, [pc, #220]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed18:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ed1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed22:	4a34      	ldr	r2, [pc, #208]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed24:	430b      	orrs	r3, r1
 800ed26:	6513      	str	r3, [r2, #80]	; 0x50
 800ed28:	e003      	b.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ed32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ed3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ed42:	2300      	movs	r3, #0
 800ed44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ed48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	d056      	beq.n	800ee00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ed52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ed5c:	d033      	beq.n	800edc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ed5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ed62:	d82c      	bhi.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ed64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ed68:	d02f      	beq.n	800edca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ed6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ed6e:	d826      	bhi.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ed70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ed74:	d02b      	beq.n	800edce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ed76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ed7a:	d820      	bhi.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ed7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ed80:	d012      	beq.n	800eda8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ed82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ed86:	d81a      	bhi.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d022      	beq.n	800edd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ed8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed90:	d115      	bne.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ed92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed96:	3308      	adds	r3, #8
 800ed98:	2101      	movs	r1, #1
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f002 f8e0 	bl	8010f60 <RCCEx_PLL2_Config>
 800eda0:	4603      	mov	r3, r0
 800eda2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800eda6:	e015      	b.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eda8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edac:	3328      	adds	r3, #40	; 0x28
 800edae:	2101      	movs	r1, #1
 800edb0:	4618      	mov	r0, r3
 800edb2:	f002 f987 	bl	80110c4 <RCCEx_PLL3_Config>
 800edb6:	4603      	mov	r3, r0
 800edb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800edbc:	e00a      	b.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800edbe:	2301      	movs	r3, #1
 800edc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800edc4:	e006      	b.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800edc6:	bf00      	nop
 800edc8:	e004      	b.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800edca:	bf00      	nop
 800edcc:	e002      	b.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800edce:	bf00      	nop
 800edd0:	e000      	b.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800edd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10d      	bne.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800eddc:	4b05      	ldr	r3, [pc, #20]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800edde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ede0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ede4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ede8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edea:	4a02      	ldr	r2, [pc, #8]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800edec:	430b      	orrs	r3, r1
 800edee:	6513      	str	r3, [r2, #80]	; 0x50
 800edf0:	e006      	b.n	800ee00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800edf2:	bf00      	nop
 800edf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ee00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee08:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ee0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ee10:	2300      	movs	r3, #0
 800ee12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ee16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	d055      	beq.n	800eecc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ee20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ee28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ee2c:	d033      	beq.n	800ee96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ee2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ee32:	d82c      	bhi.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ee34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee38:	d02f      	beq.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ee3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee3e:	d826      	bhi.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ee40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ee44:	d02b      	beq.n	800ee9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ee46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ee4a:	d820      	bhi.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ee4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee50:	d012      	beq.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ee52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee56:	d81a      	bhi.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d022      	beq.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ee5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ee60:	d115      	bne.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee66:	3308      	adds	r3, #8
 800ee68:	2101      	movs	r1, #1
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f002 f878 	bl	8010f60 <RCCEx_PLL2_Config>
 800ee70:	4603      	mov	r3, r0
 800ee72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ee76:	e015      	b.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee7c:	3328      	adds	r3, #40	; 0x28
 800ee7e:	2101      	movs	r1, #1
 800ee80:	4618      	mov	r0, r3
 800ee82:	f002 f91f 	bl	80110c4 <RCCEx_PLL3_Config>
 800ee86:	4603      	mov	r3, r0
 800ee88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ee8c:	e00a      	b.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ee94:	e006      	b.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ee96:	bf00      	nop
 800ee98:	e004      	b.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ee9a:	bf00      	nop
 800ee9c:	e002      	b.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ee9e:	bf00      	nop
 800eea0:	e000      	b.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800eea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d10b      	bne.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800eeac:	4ba3      	ldr	r3, [pc, #652]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eeae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eeb0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800eeb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800eebc:	4a9f      	ldr	r2, [pc, #636]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eebe:	430b      	orrs	r3, r1
 800eec0:	6593      	str	r3, [r2, #88]	; 0x58
 800eec2:	e003      	b.n	800eecc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eec8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800eecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800eed8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eedc:	2300      	movs	r3, #0
 800eede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800eee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800eee6:	460b      	mov	r3, r1
 800eee8:	4313      	orrs	r3, r2
 800eeea:	d037      	beq.n	800ef5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800eeec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eef6:	d00e      	beq.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800eef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eefc:	d816      	bhi.n	800ef2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d018      	beq.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ef02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef06:	d111      	bne.n	800ef2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef08:	4b8c      	ldr	r3, [pc, #560]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef0c:	4a8b      	ldr	r2, [pc, #556]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ef14:	e00f      	b.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	2101      	movs	r1, #1
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f002 f81e 	bl	8010f60 <RCCEx_PLL2_Config>
 800ef24:	4603      	mov	r3, r0
 800ef26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ef2a:	e004      	b.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef32:	e000      	b.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ef34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d10a      	bne.n	800ef54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ef3e:	4b7f      	ldr	r3, [pc, #508]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ef46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef4c:	4a7b      	ldr	r2, [pc, #492]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef4e:	430b      	orrs	r3, r1
 800ef50:	6513      	str	r3, [r2, #80]	; 0x50
 800ef52:	e003      	b.n	800ef5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ef5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef64:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ef68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ef72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ef76:	460b      	mov	r3, r1
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	d039      	beq.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ef7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef82:	2b03      	cmp	r3, #3
 800ef84:	d81c      	bhi.n	800efc0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800ef86:	a201      	add	r2, pc, #4	; (adr r2, 800ef8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800ef88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8c:	0800efc9 	.word	0x0800efc9
 800ef90:	0800ef9d 	.word	0x0800ef9d
 800ef94:	0800efab 	.word	0x0800efab
 800ef98:	0800efc9 	.word	0x0800efc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef9c:	4b67      	ldr	r3, [pc, #412]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa0:	4a66      	ldr	r2, [pc, #408]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800efa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800efa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800efa8:	e00f      	b.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800efaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efae:	3308      	adds	r3, #8
 800efb0:	2102      	movs	r1, #2
 800efb2:	4618      	mov	r0, r3
 800efb4:	f001 ffd4 	bl	8010f60 <RCCEx_PLL2_Config>
 800efb8:	4603      	mov	r3, r0
 800efba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800efbe:	e004      	b.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800efc0:	2301      	movs	r3, #1
 800efc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800efc6:	e000      	b.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800efc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800efca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d10a      	bne.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800efd2:	4b5a      	ldr	r3, [pc, #360]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800efd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efd6:	f023 0103 	bic.w	r1, r3, #3
 800efda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efe0:	4a56      	ldr	r2, [pc, #344]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800efe2:	430b      	orrs	r3, r1
 800efe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800efe6:	e003      	b.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800eff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800effc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f000:	2300      	movs	r3, #0
 800f002:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f006:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f00a:	460b      	mov	r3, r1
 800f00c:	4313      	orrs	r3, r2
 800f00e:	f000 809f 	beq.w	800f150 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f012:	4b4b      	ldr	r3, [pc, #300]	; (800f140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	4a4a      	ldr	r2, [pc, #296]	; (800f140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f01c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f01e:	f7f6 fb51 	bl	80056c4 <HAL_GetTick>
 800f022:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f026:	e00b      	b.n	800f040 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f028:	f7f6 fb4c 	bl	80056c4 <HAL_GetTick>
 800f02c:	4602      	mov	r2, r0
 800f02e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f032:	1ad3      	subs	r3, r2, r3
 800f034:	2b64      	cmp	r3, #100	; 0x64
 800f036:	d903      	bls.n	800f040 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f038:	2303      	movs	r3, #3
 800f03a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f03e:	e005      	b.n	800f04c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f040:	4b3f      	ldr	r3, [pc, #252]	; (800f140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d0ed      	beq.n	800f028 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f04c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f050:	2b00      	cmp	r3, #0
 800f052:	d179      	bne.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f054:	4b39      	ldr	r3, [pc, #228]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f056:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f05c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f060:	4053      	eors	r3, r2
 800f062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f066:	2b00      	cmp	r3, #0
 800f068:	d015      	beq.n	800f096 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f06a:	4b34      	ldr	r3, [pc, #208]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f06e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f072:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f076:	4b31      	ldr	r3, [pc, #196]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f07a:	4a30      	ldr	r2, [pc, #192]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f07c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f080:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f082:	4b2e      	ldr	r3, [pc, #184]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f086:	4a2d      	ldr	r2, [pc, #180]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f08c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f08e:	4a2b      	ldr	r2, [pc, #172]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f090:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f094:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f09a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f09e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0a2:	d118      	bne.n	800f0d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0a4:	f7f6 fb0e 	bl	80056c4 <HAL_GetTick>
 800f0a8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f0ac:	e00d      	b.n	800f0ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f0ae:	f7f6 fb09 	bl	80056c4 <HAL_GetTick>
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f0b8:	1ad2      	subs	r2, r2, r3
 800f0ba:	f241 3388 	movw	r3, #5000	; 0x1388
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d903      	bls.n	800f0ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f0c2:	2303      	movs	r3, #3
 800f0c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f0c8:	e005      	b.n	800f0d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f0ca:	4b1c      	ldr	r3, [pc, #112]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0ce:	f003 0302 	and.w	r3, r3, #2
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d0eb      	beq.n	800f0ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d129      	bne.n	800f132 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f0e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f0ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f0ee:	d10e      	bne.n	800f10e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f0f0:	4b12      	ldr	r3, [pc, #72]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0f2:	691b      	ldr	r3, [r3, #16]
 800f0f4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f100:	091a      	lsrs	r2, r3, #4
 800f102:	4b10      	ldr	r3, [pc, #64]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f104:	4013      	ands	r3, r2
 800f106:	4a0d      	ldr	r2, [pc, #52]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f108:	430b      	orrs	r3, r1
 800f10a:	6113      	str	r3, [r2, #16]
 800f10c:	e005      	b.n	800f11a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f10e:	4b0b      	ldr	r3, [pc, #44]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f110:	691b      	ldr	r3, [r3, #16]
 800f112:	4a0a      	ldr	r2, [pc, #40]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f114:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f118:	6113      	str	r3, [r2, #16]
 800f11a:	4b08      	ldr	r3, [pc, #32]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f11c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f122:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f12a:	4a04      	ldr	r2, [pc, #16]	; (800f13c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f12c:	430b      	orrs	r3, r1
 800f12e:	6713      	str	r3, [r2, #112]	; 0x70
 800f130:	e00e      	b.n	800f150 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f136:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f13a:	e009      	b.n	800f150 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f13c:	58024400 	.word	0x58024400
 800f140:	58024800 	.word	0x58024800
 800f144:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f14c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f158:	f002 0301 	and.w	r3, r2, #1
 800f15c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f160:	2300      	movs	r3, #0
 800f162:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f166:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f16a:	460b      	mov	r3, r1
 800f16c:	4313      	orrs	r3, r2
 800f16e:	f000 8089 	beq.w	800f284 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f178:	2b28      	cmp	r3, #40	; 0x28
 800f17a:	d86b      	bhi.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f17c:	a201      	add	r2, pc, #4	; (adr r2, 800f184 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f182:	bf00      	nop
 800f184:	0800f25d 	.word	0x0800f25d
 800f188:	0800f255 	.word	0x0800f255
 800f18c:	0800f255 	.word	0x0800f255
 800f190:	0800f255 	.word	0x0800f255
 800f194:	0800f255 	.word	0x0800f255
 800f198:	0800f255 	.word	0x0800f255
 800f19c:	0800f255 	.word	0x0800f255
 800f1a0:	0800f255 	.word	0x0800f255
 800f1a4:	0800f229 	.word	0x0800f229
 800f1a8:	0800f255 	.word	0x0800f255
 800f1ac:	0800f255 	.word	0x0800f255
 800f1b0:	0800f255 	.word	0x0800f255
 800f1b4:	0800f255 	.word	0x0800f255
 800f1b8:	0800f255 	.word	0x0800f255
 800f1bc:	0800f255 	.word	0x0800f255
 800f1c0:	0800f255 	.word	0x0800f255
 800f1c4:	0800f23f 	.word	0x0800f23f
 800f1c8:	0800f255 	.word	0x0800f255
 800f1cc:	0800f255 	.word	0x0800f255
 800f1d0:	0800f255 	.word	0x0800f255
 800f1d4:	0800f255 	.word	0x0800f255
 800f1d8:	0800f255 	.word	0x0800f255
 800f1dc:	0800f255 	.word	0x0800f255
 800f1e0:	0800f255 	.word	0x0800f255
 800f1e4:	0800f25d 	.word	0x0800f25d
 800f1e8:	0800f255 	.word	0x0800f255
 800f1ec:	0800f255 	.word	0x0800f255
 800f1f0:	0800f255 	.word	0x0800f255
 800f1f4:	0800f255 	.word	0x0800f255
 800f1f8:	0800f255 	.word	0x0800f255
 800f1fc:	0800f255 	.word	0x0800f255
 800f200:	0800f255 	.word	0x0800f255
 800f204:	0800f25d 	.word	0x0800f25d
 800f208:	0800f255 	.word	0x0800f255
 800f20c:	0800f255 	.word	0x0800f255
 800f210:	0800f255 	.word	0x0800f255
 800f214:	0800f255 	.word	0x0800f255
 800f218:	0800f255 	.word	0x0800f255
 800f21c:	0800f255 	.word	0x0800f255
 800f220:	0800f255 	.word	0x0800f255
 800f224:	0800f25d 	.word	0x0800f25d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f22c:	3308      	adds	r3, #8
 800f22e:	2101      	movs	r1, #1
 800f230:	4618      	mov	r0, r3
 800f232:	f001 fe95 	bl	8010f60 <RCCEx_PLL2_Config>
 800f236:	4603      	mov	r3, r0
 800f238:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f23c:	e00f      	b.n	800f25e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f242:	3328      	adds	r3, #40	; 0x28
 800f244:	2101      	movs	r1, #1
 800f246:	4618      	mov	r0, r3
 800f248:	f001 ff3c 	bl	80110c4 <RCCEx_PLL3_Config>
 800f24c:	4603      	mov	r3, r0
 800f24e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f252:	e004      	b.n	800f25e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f254:	2301      	movs	r3, #1
 800f256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f25a:	e000      	b.n	800f25e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f25c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f25e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f262:	2b00      	cmp	r3, #0
 800f264:	d10a      	bne.n	800f27c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f266:	4bbf      	ldr	r3, [pc, #764]	; (800f564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f26a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f274:	4abb      	ldr	r2, [pc, #748]	; (800f564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f276:	430b      	orrs	r3, r1
 800f278:	6553      	str	r3, [r2, #84]	; 0x54
 800f27a:	e003      	b.n	800f284 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f27c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f280:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28c:	f002 0302 	and.w	r3, r2, #2
 800f290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f294:	2300      	movs	r3, #0
 800f296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f29a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f29e:	460b      	mov	r3, r1
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	d041      	beq.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2aa:	2b05      	cmp	r3, #5
 800f2ac:	d824      	bhi.n	800f2f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f2ae:	a201      	add	r2, pc, #4	; (adr r2, 800f2b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b4:	0800f301 	.word	0x0800f301
 800f2b8:	0800f2cd 	.word	0x0800f2cd
 800f2bc:	0800f2e3 	.word	0x0800f2e3
 800f2c0:	0800f301 	.word	0x0800f301
 800f2c4:	0800f301 	.word	0x0800f301
 800f2c8:	0800f301 	.word	0x0800f301
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2d0:	3308      	adds	r3, #8
 800f2d2:	2101      	movs	r1, #1
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f001 fe43 	bl	8010f60 <RCCEx_PLL2_Config>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f2e0:	e00f      	b.n	800f302 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2e6:	3328      	adds	r3, #40	; 0x28
 800f2e8:	2101      	movs	r1, #1
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f001 feea 	bl	80110c4 <RCCEx_PLL3_Config>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f2f6:	e004      	b.n	800f302 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f2fe:	e000      	b.n	800f302 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f300:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f306:	2b00      	cmp	r3, #0
 800f308:	d10a      	bne.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f30a:	4b96      	ldr	r3, [pc, #600]	; (800f564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f30e:	f023 0107 	bic.w	r1, r3, #7
 800f312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f318:	4a92      	ldr	r2, [pc, #584]	; (800f564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f31a:	430b      	orrs	r3, r1
 800f31c:	6553      	str	r3, [r2, #84]	; 0x54
 800f31e:	e003      	b.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f320:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f324:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f330:	f002 0304 	and.w	r3, r2, #4
 800f334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f338:	2300      	movs	r3, #0
 800f33a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f33e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f342:	460b      	mov	r3, r1
 800f344:	4313      	orrs	r3, r2
 800f346:	d044      	beq.n	800f3d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f34c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f350:	2b05      	cmp	r3, #5
 800f352:	d825      	bhi.n	800f3a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f354:	a201      	add	r2, pc, #4	; (adr r2, 800f35c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f35a:	bf00      	nop
 800f35c:	0800f3a9 	.word	0x0800f3a9
 800f360:	0800f375 	.word	0x0800f375
 800f364:	0800f38b 	.word	0x0800f38b
 800f368:	0800f3a9 	.word	0x0800f3a9
 800f36c:	0800f3a9 	.word	0x0800f3a9
 800f370:	0800f3a9 	.word	0x0800f3a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f378:	3308      	adds	r3, #8
 800f37a:	2101      	movs	r1, #1
 800f37c:	4618      	mov	r0, r3
 800f37e:	f001 fdef 	bl	8010f60 <RCCEx_PLL2_Config>
 800f382:	4603      	mov	r3, r0
 800f384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f388:	e00f      	b.n	800f3aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f38e:	3328      	adds	r3, #40	; 0x28
 800f390:	2101      	movs	r1, #1
 800f392:	4618      	mov	r0, r3
 800f394:	f001 fe96 	bl	80110c4 <RCCEx_PLL3_Config>
 800f398:	4603      	mov	r3, r0
 800f39a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f39e:	e004      	b.n	800f3aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f3a6:	e000      	b.n	800f3aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f3a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d10b      	bne.n	800f3ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f3b2:	4b6c      	ldr	r3, [pc, #432]	; (800f564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3b6:	f023 0107 	bic.w	r1, r3, #7
 800f3ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f3c2:	4a68      	ldr	r2, [pc, #416]	; (800f564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f3c4:	430b      	orrs	r3, r1
 800f3c6:	6593      	str	r3, [r2, #88]	; 0x58
 800f3c8:	e003      	b.n	800f3d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3da:	f002 0320 	and.w	r3, r2, #32
 800f3de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f3e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	d055      	beq.n	800f49e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f3fe:	d033      	beq.n	800f468 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f404:	d82c      	bhi.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f40a:	d02f      	beq.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f40c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f410:	d826      	bhi.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f412:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f416:	d02b      	beq.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f418:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f41c:	d820      	bhi.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f41e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f422:	d012      	beq.n	800f44a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f428:	d81a      	bhi.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d022      	beq.n	800f474 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f42e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f432:	d115      	bne.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f438:	3308      	adds	r3, #8
 800f43a:	2100      	movs	r1, #0
 800f43c:	4618      	mov	r0, r3
 800f43e:	f001 fd8f 	bl	8010f60 <RCCEx_PLL2_Config>
 800f442:	4603      	mov	r3, r0
 800f444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f448:	e015      	b.n	800f476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f44e:	3328      	adds	r3, #40	; 0x28
 800f450:	2102      	movs	r1, #2
 800f452:	4618      	mov	r0, r3
 800f454:	f001 fe36 	bl	80110c4 <RCCEx_PLL3_Config>
 800f458:	4603      	mov	r3, r0
 800f45a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f45e:	e00a      	b.n	800f476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f460:	2301      	movs	r3, #1
 800f462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f466:	e006      	b.n	800f476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f468:	bf00      	nop
 800f46a:	e004      	b.n	800f476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f46c:	bf00      	nop
 800f46e:	e002      	b.n	800f476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f470:	bf00      	nop
 800f472:	e000      	b.n	800f476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f474:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d10b      	bne.n	800f496 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f47e:	4b39      	ldr	r3, [pc, #228]	; (800f564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f482:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f48e:	4a35      	ldr	r2, [pc, #212]	; (800f564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f490:	430b      	orrs	r3, r1
 800f492:	6553      	str	r3, [r2, #84]	; 0x54
 800f494:	e003      	b.n	800f49e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f49a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800f4aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f4b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	d058      	beq.n	800f570 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f4c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f4ca:	d033      	beq.n	800f534 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f4cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f4d0:	d82c      	bhi.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f4d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4d6:	d02f      	beq.n	800f538 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f4d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4dc:	d826      	bhi.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f4de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f4e2:	d02b      	beq.n	800f53c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f4e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f4e8:	d820      	bhi.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f4ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4ee:	d012      	beq.n	800f516 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f4f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4f4:	d81a      	bhi.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d022      	beq.n	800f540 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f4fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4fe:	d115      	bne.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f504:	3308      	adds	r3, #8
 800f506:	2100      	movs	r1, #0
 800f508:	4618      	mov	r0, r3
 800f50a:	f001 fd29 	bl	8010f60 <RCCEx_PLL2_Config>
 800f50e:	4603      	mov	r3, r0
 800f510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f514:	e015      	b.n	800f542 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f51a:	3328      	adds	r3, #40	; 0x28
 800f51c:	2102      	movs	r1, #2
 800f51e:	4618      	mov	r0, r3
 800f520:	f001 fdd0 	bl	80110c4 <RCCEx_PLL3_Config>
 800f524:	4603      	mov	r3, r0
 800f526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f52a:	e00a      	b.n	800f542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f52c:	2301      	movs	r3, #1
 800f52e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f532:	e006      	b.n	800f542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f534:	bf00      	nop
 800f536:	e004      	b.n	800f542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f538:	bf00      	nop
 800f53a:	e002      	b.n	800f542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f53c:	bf00      	nop
 800f53e:	e000      	b.n	800f542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f540:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f546:	2b00      	cmp	r3, #0
 800f548:	d10e      	bne.n	800f568 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f54a:	4b06      	ldr	r3, [pc, #24]	; (800f564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f54e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800f552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f55a:	4a02      	ldr	r2, [pc, #8]	; (800f564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f55c:	430b      	orrs	r3, r1
 800f55e:	6593      	str	r3, [r2, #88]	; 0x58
 800f560:	e006      	b.n	800f570 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f562:	bf00      	nop
 800f564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f56c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f578:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800f57c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f580:	2300      	movs	r3, #0
 800f582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f586:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800f58a:	460b      	mov	r3, r1
 800f58c:	4313      	orrs	r3, r2
 800f58e:	d055      	beq.n	800f63c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f594:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f598:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f59c:	d033      	beq.n	800f606 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f59e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f5a2:	d82c      	bhi.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f5a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5a8:	d02f      	beq.n	800f60a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f5aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5ae:	d826      	bhi.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f5b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f5b4:	d02b      	beq.n	800f60e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f5b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f5ba:	d820      	bhi.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f5bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f5c0:	d012      	beq.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f5c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f5c6:	d81a      	bhi.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d022      	beq.n	800f612 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f5cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f5d0:	d115      	bne.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5d6:	3308      	adds	r3, #8
 800f5d8:	2100      	movs	r1, #0
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f001 fcc0 	bl	8010f60 <RCCEx_PLL2_Config>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f5e6:	e015      	b.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f5e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5ec:	3328      	adds	r3, #40	; 0x28
 800f5ee:	2102      	movs	r1, #2
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f001 fd67 	bl	80110c4 <RCCEx_PLL3_Config>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f5fc:	e00a      	b.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5fe:	2301      	movs	r3, #1
 800f600:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f604:	e006      	b.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f606:	bf00      	nop
 800f608:	e004      	b.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f60a:	bf00      	nop
 800f60c:	e002      	b.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f60e:	bf00      	nop
 800f610:	e000      	b.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f612:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f614:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d10b      	bne.n	800f634 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f61c:	4ba1      	ldr	r3, [pc, #644]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f620:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800f624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f628:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f62c:	4a9d      	ldr	r2, [pc, #628]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f62e:	430b      	orrs	r3, r1
 800f630:	6593      	str	r3, [r2, #88]	; 0x58
 800f632:	e003      	b.n	800f63c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f634:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f638:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f63c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f644:	f002 0308 	and.w	r3, r2, #8
 800f648:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f64c:	2300      	movs	r3, #0
 800f64e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f652:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800f656:	460b      	mov	r3, r1
 800f658:	4313      	orrs	r3, r2
 800f65a:	d01e      	beq.n	800f69a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f668:	d10c      	bne.n	800f684 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f66e:	3328      	adds	r3, #40	; 0x28
 800f670:	2102      	movs	r1, #2
 800f672:	4618      	mov	r0, r3
 800f674:	f001 fd26 	bl	80110c4 <RCCEx_PLL3_Config>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d002      	beq.n	800f684 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f67e:	2301      	movs	r3, #1
 800f680:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f684:	4b87      	ldr	r3, [pc, #540]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f688:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f694:	4a83      	ldr	r2, [pc, #524]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f696:	430b      	orrs	r3, r1
 800f698:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a2:	f002 0310 	and.w	r3, r2, #16
 800f6a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f6b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	d01e      	beq.n	800f6f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f6c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6c6:	d10c      	bne.n	800f6e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6cc:	3328      	adds	r3, #40	; 0x28
 800f6ce:	2102      	movs	r1, #2
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f001 fcf7 	bl	80110c4 <RCCEx_PLL3_Config>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d002      	beq.n	800f6e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f6dc:	2301      	movs	r3, #1
 800f6de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f6e2:	4b70      	ldr	r3, [pc, #448]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f6e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f6f2:	4a6c      	ldr	r2, [pc, #432]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f6f4:	430b      	orrs	r3, r1
 800f6f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f700:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800f704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f708:	2300      	movs	r3, #0
 800f70a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f70e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800f712:	460b      	mov	r3, r1
 800f714:	4313      	orrs	r3, r2
 800f716:	d03e      	beq.n	800f796 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f71c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f724:	d022      	beq.n	800f76c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f72a:	d81b      	bhi.n	800f764 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d003      	beq.n	800f738 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f734:	d00b      	beq.n	800f74e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f736:	e015      	b.n	800f764 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f73c:	3308      	adds	r3, #8
 800f73e:	2100      	movs	r1, #0
 800f740:	4618      	mov	r0, r3
 800f742:	f001 fc0d 	bl	8010f60 <RCCEx_PLL2_Config>
 800f746:	4603      	mov	r3, r0
 800f748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f74c:	e00f      	b.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f752:	3328      	adds	r3, #40	; 0x28
 800f754:	2102      	movs	r1, #2
 800f756:	4618      	mov	r0, r3
 800f758:	f001 fcb4 	bl	80110c4 <RCCEx_PLL3_Config>
 800f75c:	4603      	mov	r3, r0
 800f75e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f762:	e004      	b.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f764:	2301      	movs	r3, #1
 800f766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f76a:	e000      	b.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f76c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f76e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f772:	2b00      	cmp	r3, #0
 800f774:	d10b      	bne.n	800f78e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f776:	4b4b      	ldr	r3, [pc, #300]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f77a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800f77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f782:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f786:	4a47      	ldr	r2, [pc, #284]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f788:	430b      	orrs	r3, r1
 800f78a:	6593      	str	r3, [r2, #88]	; 0x58
 800f78c:	e003      	b.n	800f796 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f78e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f792:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800f7a2:	67bb      	str	r3, [r7, #120]	; 0x78
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f7a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	4313      	orrs	r3, r2
 800f7b0:	d03b      	beq.n	800f82a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f7be:	d01f      	beq.n	800f800 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f7c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f7c4:	d818      	bhi.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f7c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7ca:	d003      	beq.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f7cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f7d0:	d007      	beq.n	800f7e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f7d2:	e011      	b.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f7d4:	4b33      	ldr	r3, [pc, #204]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7d8:	4a32      	ldr	r2, [pc, #200]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f7da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f7e0:	e00f      	b.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7e6:	3328      	adds	r3, #40	; 0x28
 800f7e8:	2101      	movs	r1, #1
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f001 fc6a 	bl	80110c4 <RCCEx_PLL3_Config>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f7f6:	e004      	b.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f7fe:	e000      	b.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f800:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f806:	2b00      	cmp	r3, #0
 800f808:	d10b      	bne.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f80a:	4b26      	ldr	r3, [pc, #152]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f80e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800f812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f81a:	4a22      	ldr	r2, [pc, #136]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f81c:	430b      	orrs	r3, r1
 800f81e:	6553      	str	r3, [r2, #84]	; 0x54
 800f820:	e003      	b.n	800f82a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f826:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f832:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800f836:	673b      	str	r3, [r7, #112]	; 0x70
 800f838:	2300      	movs	r3, #0
 800f83a:	677b      	str	r3, [r7, #116]	; 0x74
 800f83c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800f840:	460b      	mov	r3, r1
 800f842:	4313      	orrs	r3, r2
 800f844:	d034      	beq.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d003      	beq.n	800f858 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f854:	d007      	beq.n	800f866 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f856:	e011      	b.n	800f87c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f858:	4b12      	ldr	r3, [pc, #72]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f85c:	4a11      	ldr	r2, [pc, #68]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f85e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f864:	e00e      	b.n	800f884 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f86a:	3308      	adds	r3, #8
 800f86c:	2102      	movs	r1, #2
 800f86e:	4618      	mov	r0, r3
 800f870:	f001 fb76 	bl	8010f60 <RCCEx_PLL2_Config>
 800f874:	4603      	mov	r3, r0
 800f876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f87a:	e003      	b.n	800f884 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f87c:	2301      	movs	r3, #1
 800f87e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f882:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d10d      	bne.n	800f8a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f88c:	4b05      	ldr	r3, [pc, #20]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f88e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f89a:	4a02      	ldr	r2, [pc, #8]	; (800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f89c:	430b      	orrs	r3, r1
 800f89e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f8a0:	e006      	b.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f8a2:	bf00      	nop
 800f8a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f8b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800f8bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800f8be:	2300      	movs	r3, #0
 800f8c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f8c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800f8c6:	460b      	mov	r3, r1
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	d00c      	beq.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8d0:	3328      	adds	r3, #40	; 0x28
 800f8d2:	2102      	movs	r1, #2
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f001 fbf5 	bl	80110c4 <RCCEx_PLL3_Config>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d002      	beq.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800f8f2:	663b      	str	r3, [r7, #96]	; 0x60
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	667b      	str	r3, [r7, #100]	; 0x64
 800f8f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	4313      	orrs	r3, r2
 800f900:	d038      	beq.n	800f974 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f90a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f90e:	d018      	beq.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f914:	d811      	bhi.n	800f93a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f91a:	d014      	beq.n	800f946 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f91c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f920:	d80b      	bhi.n	800f93a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f922:	2b00      	cmp	r3, #0
 800f924:	d011      	beq.n	800f94a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f92a:	d106      	bne.n	800f93a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f92c:	4bc3      	ldr	r3, [pc, #780]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f930:	4ac2      	ldr	r2, [pc, #776]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f938:	e008      	b.n	800f94c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f93a:	2301      	movs	r3, #1
 800f93c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f940:	e004      	b.n	800f94c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f942:	bf00      	nop
 800f944:	e002      	b.n	800f94c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f946:	bf00      	nop
 800f948:	e000      	b.n	800f94c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f94a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f94c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f950:	2b00      	cmp	r3, #0
 800f952:	d10b      	bne.n	800f96c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f954:	4bb9      	ldr	r3, [pc, #740]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f958:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f964:	4ab5      	ldr	r2, [pc, #724]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f966:	430b      	orrs	r3, r1
 800f968:	6553      	str	r3, [r2, #84]	; 0x54
 800f96a:	e003      	b.n	800f974 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f96c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f970:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800f980:	65bb      	str	r3, [r7, #88]	; 0x58
 800f982:	2300      	movs	r3, #0
 800f984:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f986:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800f98a:	460b      	mov	r3, r1
 800f98c:	4313      	orrs	r3, r2
 800f98e:	d009      	beq.n	800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f990:	4baa      	ldr	r3, [pc, #680]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f994:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f99c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f99e:	4aa7      	ldr	r2, [pc, #668]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f9a0:	430b      	orrs	r3, r1
 800f9a2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f9a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ac:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800f9b0:	653b      	str	r3, [r7, #80]	; 0x50
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	657b      	str	r3, [r7, #84]	; 0x54
 800f9b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800f9ba:	460b      	mov	r3, r1
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	d00a      	beq.n	800f9d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f9c0:	4b9e      	ldr	r3, [pc, #632]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f9c2:	691b      	ldr	r3, [r3, #16]
 800f9c4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800f9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f9d0:	4a9a      	ldr	r2, [pc, #616]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f9d2:	430b      	orrs	r3, r1
 800f9d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9de:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800f9e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	d009      	beq.n	800fa06 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f9f2:	4b92      	ldr	r3, [pc, #584]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f9f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9f6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800f9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa00:	4a8e      	ldr	r2, [pc, #568]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa02:	430b      	orrs	r3, r1
 800fa04:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fa06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800fa12:	643b      	str	r3, [r7, #64]	; 0x40
 800fa14:	2300      	movs	r3, #0
 800fa16:	647b      	str	r3, [r7, #68]	; 0x44
 800fa18:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	4313      	orrs	r3, r2
 800fa20:	d00e      	beq.n	800fa40 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fa22:	4b86      	ldr	r3, [pc, #536]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa24:	691b      	ldr	r3, [r3, #16]
 800fa26:	4a85      	ldr	r2, [pc, #532]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fa2c:	6113      	str	r3, [r2, #16]
 800fa2e:	4b83      	ldr	r3, [pc, #524]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa30:	6919      	ldr	r1, [r3, #16]
 800fa32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fa3a:	4a80      	ldr	r2, [pc, #512]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa3c:	430b      	orrs	r3, r1
 800fa3e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fa40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa48:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800fa4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa4e:	2300      	movs	r3, #0
 800fa50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa52:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fa56:	460b      	mov	r3, r1
 800fa58:	4313      	orrs	r3, r2
 800fa5a:	d009      	beq.n	800fa70 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fa5c:	4b77      	ldr	r3, [pc, #476]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa60:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800fa64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa6a:	4a74      	ldr	r2, [pc, #464]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa6c:	430b      	orrs	r3, r1
 800fa6e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fa70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa78:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800fa7c:	633b      	str	r3, [r7, #48]	; 0x30
 800fa7e:	2300      	movs	r3, #0
 800fa80:	637b      	str	r3, [r7, #52]	; 0x34
 800fa82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800fa86:	460b      	mov	r3, r1
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	d00a      	beq.n	800faa2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fa8c:	4b6b      	ldr	r3, [pc, #428]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa90:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800fa94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa9c:	4a67      	ldr	r2, [pc, #412]	; (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa9e:	430b      	orrs	r3, r1
 800faa0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800faa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faaa:	2100      	movs	r1, #0
 800faac:	62b9      	str	r1, [r7, #40]	; 0x28
 800faae:	f003 0301 	and.w	r3, r3, #1
 800fab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fab4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800fab8:	460b      	mov	r3, r1
 800faba:	4313      	orrs	r3, r2
 800fabc:	d011      	beq.n	800fae2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fac2:	3308      	adds	r3, #8
 800fac4:	2100      	movs	r1, #0
 800fac6:	4618      	mov	r0, r3
 800fac8:	f001 fa4a 	bl	8010f60 <RCCEx_PLL2_Config>
 800facc:	4603      	mov	r3, r0
 800face:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d003      	beq.n	800fae2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faea:	2100      	movs	r1, #0
 800faec:	6239      	str	r1, [r7, #32]
 800faee:	f003 0302 	and.w	r3, r3, #2
 800faf2:	627b      	str	r3, [r7, #36]	; 0x24
 800faf4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800faf8:	460b      	mov	r3, r1
 800fafa:	4313      	orrs	r3, r2
 800fafc:	d011      	beq.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb02:	3308      	adds	r3, #8
 800fb04:	2101      	movs	r1, #1
 800fb06:	4618      	mov	r0, r3
 800fb08:	f001 fa2a 	bl	8010f60 <RCCEx_PLL2_Config>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fb12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d003      	beq.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fb22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	61b9      	str	r1, [r7, #24]
 800fb2e:	f003 0304 	and.w	r3, r3, #4
 800fb32:	61fb      	str	r3, [r7, #28]
 800fb34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fb38:	460b      	mov	r3, r1
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	d011      	beq.n	800fb62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb42:	3308      	adds	r3, #8
 800fb44:	2102      	movs	r1, #2
 800fb46:	4618      	mov	r0, r3
 800fb48:	f001 fa0a 	bl	8010f60 <RCCEx_PLL2_Config>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fb52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d003      	beq.n	800fb62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fb62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	6139      	str	r1, [r7, #16]
 800fb6e:	f003 0308 	and.w	r3, r3, #8
 800fb72:	617b      	str	r3, [r7, #20]
 800fb74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	4313      	orrs	r3, r2
 800fb7c:	d011      	beq.n	800fba2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fb7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb82:	3328      	adds	r3, #40	; 0x28
 800fb84:	2100      	movs	r1, #0
 800fb86:	4618      	mov	r0, r3
 800fb88:	f001 fa9c 	bl	80110c4 <RCCEx_PLL3_Config>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800fb92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d003      	beq.n	800fba2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbaa:	2100      	movs	r1, #0
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	f003 0310 	and.w	r3, r3, #16
 800fbb2:	60fb      	str	r3, [r7, #12]
 800fbb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fbb8:	460b      	mov	r3, r1
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	d011      	beq.n	800fbe2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fbbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbc2:	3328      	adds	r3, #40	; 0x28
 800fbc4:	2101      	movs	r1, #1
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f001 fa7c 	bl	80110c4 <RCCEx_PLL3_Config>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fbd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d003      	beq.n	800fbe2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800fbe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbea:	2100      	movs	r1, #0
 800fbec:	6039      	str	r1, [r7, #0]
 800fbee:	f003 0320 	and.w	r3, r3, #32
 800fbf2:	607b      	str	r3, [r7, #4]
 800fbf4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	d011      	beq.n	800fc22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fbfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc02:	3328      	adds	r3, #40	; 0x28
 800fc04:	2102      	movs	r1, #2
 800fc06:	4618      	mov	r0, r3
 800fc08:	f001 fa5c 	bl	80110c4 <RCCEx_PLL3_Config>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fc12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d003      	beq.n	800fc22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800fc22:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d101      	bne.n	800fc2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	e000      	b.n	800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800fc2e:	2301      	movs	r3, #1
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800fc36:	46bd      	mov	sp, r7
 800fc38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fc3c:	58024400 	.word	0x58024400

0800fc40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b090      	sub	sp, #64	; 0x40
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800fc4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc4e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800fc52:	430b      	orrs	r3, r1
 800fc54:	f040 8094 	bne.w	800fd80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800fc58:	4b9e      	ldr	r3, [pc, #632]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fc5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc5c:	f003 0307 	and.w	r3, r3, #7
 800fc60:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800fc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc64:	2b04      	cmp	r3, #4
 800fc66:	f200 8087 	bhi.w	800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800fc6a:	a201      	add	r2, pc, #4	; (adr r2, 800fc70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800fc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc70:	0800fc85 	.word	0x0800fc85
 800fc74:	0800fcad 	.word	0x0800fcad
 800fc78:	0800fcd5 	.word	0x0800fcd5
 800fc7c:	0800fd71 	.word	0x0800fd71
 800fc80:	0800fcfd 	.word	0x0800fcfd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fc84:	4b93      	ldr	r3, [pc, #588]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fc90:	d108      	bne.n	800fca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fc92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc96:	4618      	mov	r0, r3
 800fc98:	f001 f810 	bl	8010cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fca0:	f000 bd45 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fca4:	2300      	movs	r3, #0
 800fca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fca8:	f000 bd41 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fcac:	4b89      	ldr	r3, [pc, #548]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fcb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fcb8:	d108      	bne.n	800fccc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcba:	f107 0318 	add.w	r3, r7, #24
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f000 fd54 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcc8:	f000 bd31 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fccc:	2300      	movs	r3, #0
 800fcce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcd0:	f000 bd2d 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fcd4:	4b7f      	ldr	r3, [pc, #508]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fcdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fce0:	d108      	bne.n	800fcf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fce2:	f107 030c 	add.w	r3, r7, #12
 800fce6:	4618      	mov	r0, r3
 800fce8:	f000 fe94 	bl	8010a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcf0:	f000 bd1d 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcf8:	f000 bd19 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fcfc:	4b75      	ldr	r3, [pc, #468]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fcfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fd04:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fd06:	4b73      	ldr	r3, [pc, #460]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f003 0304 	and.w	r3, r3, #4
 800fd0e:	2b04      	cmp	r3, #4
 800fd10:	d10c      	bne.n	800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800fd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d109      	bne.n	800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd18:	4b6e      	ldr	r3, [pc, #440]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	08db      	lsrs	r3, r3, #3
 800fd1e:	f003 0303 	and.w	r3, r3, #3
 800fd22:	4a6d      	ldr	r2, [pc, #436]	; (800fed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fd24:	fa22 f303 	lsr.w	r3, r2, r3
 800fd28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd2a:	e01f      	b.n	800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fd2c:	4b69      	ldr	r3, [pc, #420]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd38:	d106      	bne.n	800fd48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800fd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd40:	d102      	bne.n	800fd48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fd42:	4b66      	ldr	r3, [pc, #408]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800fd44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd46:	e011      	b.n	800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fd48:	4b62      	ldr	r3, [pc, #392]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd54:	d106      	bne.n	800fd64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800fd56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd5c:	d102      	bne.n	800fd64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fd5e:	4b60      	ldr	r3, [pc, #384]	; (800fee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fd60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd62:	e003      	b.n	800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fd64:	2300      	movs	r3, #0
 800fd66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800fd68:	f000 bce1 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fd6c:	f000 bcdf 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fd70:	4b5c      	ldr	r3, [pc, #368]	; (800fee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800fd72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd74:	f000 bcdb 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd7c:	f000 bcd7 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800fd80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd84:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800fd88:	430b      	orrs	r3, r1
 800fd8a:	f040 80ad 	bne.w	800fee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800fd8e:	4b51      	ldr	r3, [pc, #324]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd92:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800fd96:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800fd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd9e:	d056      	beq.n	800fe4e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800fda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fda6:	f200 8090 	bhi.w	800feca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdac:	2bc0      	cmp	r3, #192	; 0xc0
 800fdae:	f000 8088 	beq.w	800fec2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800fdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb4:	2bc0      	cmp	r3, #192	; 0xc0
 800fdb6:	f200 8088 	bhi.w	800feca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbc:	2b80      	cmp	r3, #128	; 0x80
 800fdbe:	d032      	beq.n	800fe26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800fdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc2:	2b80      	cmp	r3, #128	; 0x80
 800fdc4:	f200 8081 	bhi.w	800feca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d003      	beq.n	800fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800fdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd0:	2b40      	cmp	r3, #64	; 0x40
 800fdd2:	d014      	beq.n	800fdfe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800fdd4:	e079      	b.n	800feca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fdd6:	4b3f      	ldr	r3, [pc, #252]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fdde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fde2:	d108      	bne.n	800fdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fde4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fde8:	4618      	mov	r0, r3
 800fdea:	f000 ff67 	bl	8010cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdf2:	f000 bc9c 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdfa:	f000 bc98 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fdfe:	4b35      	ldr	r3, [pc, #212]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fe0a:	d108      	bne.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe0c:	f107 0318 	add.w	r3, r7, #24
 800fe10:	4618      	mov	r0, r3
 800fe12:	f000 fcab 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe1a:	f000 bc88 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe22:	f000 bc84 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fe26:	4b2b      	ldr	r3, [pc, #172]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fe2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fe32:	d108      	bne.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe34:	f107 030c 	add.w	r3, r7, #12
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f000 fdeb 	bl	8010a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe42:	f000 bc74 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe46:	2300      	movs	r3, #0
 800fe48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe4a:	f000 bc70 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fe4e:	4b21      	ldr	r3, [pc, #132]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fe56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fe58:	4b1e      	ldr	r3, [pc, #120]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	f003 0304 	and.w	r3, r3, #4
 800fe60:	2b04      	cmp	r3, #4
 800fe62:	d10c      	bne.n	800fe7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800fe64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d109      	bne.n	800fe7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe6a:	4b1a      	ldr	r3, [pc, #104]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	08db      	lsrs	r3, r3, #3
 800fe70:	f003 0303 	and.w	r3, r3, #3
 800fe74:	4a18      	ldr	r2, [pc, #96]	; (800fed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fe76:	fa22 f303 	lsr.w	r3, r2, r3
 800fe7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe7c:	e01f      	b.n	800febe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fe7e:	4b15      	ldr	r3, [pc, #84]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe8a:	d106      	bne.n	800fe9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800fe8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe92:	d102      	bne.n	800fe9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fe94:	4b11      	ldr	r3, [pc, #68]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800fe96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe98:	e011      	b.n	800febe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fe9a:	4b0e      	ldr	r3, [pc, #56]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fea2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fea6:	d106      	bne.n	800feb6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800fea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800feae:	d102      	bne.n	800feb6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800feb0:	4b0b      	ldr	r3, [pc, #44]	; (800fee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800feb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800feb4:	e003      	b.n	800febe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800feb6:	2300      	movs	r3, #0
 800feb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800feba:	f000 bc38 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800febe:	f000 bc36 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fec2:	4b08      	ldr	r3, [pc, #32]	; (800fee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800fec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fec6:	f000 bc32 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800feca:	2300      	movs	r3, #0
 800fecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fece:	f000 bc2e 	b.w	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fed2:	bf00      	nop
 800fed4:	58024400 	.word	0x58024400
 800fed8:	03d09000 	.word	0x03d09000
 800fedc:	003d0900 	.word	0x003d0900
 800fee0:	017d7840 	.word	0x017d7840
 800fee4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800fee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800feec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800fef0:	430b      	orrs	r3, r1
 800fef2:	f040 809c 	bne.w	801002e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800fef6:	4b9e      	ldr	r3, [pc, #632]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fefa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800fefe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ff00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ff06:	d054      	beq.n	800ffb2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ff08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ff0e:	f200 808b 	bhi.w	8010028 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ff12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ff18:	f000 8083 	beq.w	8010022 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ff1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ff22:	f200 8081 	bhi.w	8010028 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ff26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff2c:	d02f      	beq.n	800ff8e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ff2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff34:	d878      	bhi.n	8010028 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ff36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d004      	beq.n	800ff46 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ff3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff42:	d012      	beq.n	800ff6a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ff44:	e070      	b.n	8010028 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ff46:	4b8a      	ldr	r3, [pc, #552]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ff52:	d107      	bne.n	800ff64 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ff54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f000 feaf 	bl	8010cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ff5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff62:	e3e4      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff64:	2300      	movs	r3, #0
 800ff66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff68:	e3e1      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ff6a:	4b81      	ldr	r3, [pc, #516]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ff76:	d107      	bne.n	800ff88 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff78:	f107 0318 	add.w	r3, r7, #24
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f000 fbf5 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ff82:	69bb      	ldr	r3, [r7, #24]
 800ff84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff86:	e3d2      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff8c:	e3cf      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ff8e:	4b78      	ldr	r3, [pc, #480]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ff96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ff9a:	d107      	bne.n	800ffac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff9c:	f107 030c 	add.w	r3, r7, #12
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f000 fd37 	bl	8010a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffaa:	e3c0      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ffac:	2300      	movs	r3, #0
 800ffae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffb0:	e3bd      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ffb2:	4b6f      	ldr	r3, [pc, #444]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ffb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ffba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ffbc:	4b6c      	ldr	r3, [pc, #432]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f003 0304 	and.w	r3, r3, #4
 800ffc4:	2b04      	cmp	r3, #4
 800ffc6:	d10c      	bne.n	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ffc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d109      	bne.n	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ffce:	4b68      	ldr	r3, [pc, #416]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	08db      	lsrs	r3, r3, #3
 800ffd4:	f003 0303 	and.w	r3, r3, #3
 800ffd8:	4a66      	ldr	r2, [pc, #408]	; (8010174 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ffda:	fa22 f303 	lsr.w	r3, r2, r3
 800ffde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffe0:	e01e      	b.n	8010020 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ffe2:	4b63      	ldr	r3, [pc, #396]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffee:	d106      	bne.n	800fffe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800fff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fff6:	d102      	bne.n	800fffe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fff8:	4b5f      	ldr	r3, [pc, #380]	; (8010178 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800fffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fffc:	e010      	b.n	8010020 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fffe:	4b5c      	ldr	r3, [pc, #368]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801000a:	d106      	bne.n	801001a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 801000c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801000e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010012:	d102      	bne.n	801001a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010014:	4b59      	ldr	r3, [pc, #356]	; (801017c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010018:	e002      	b.n	8010020 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801001a:	2300      	movs	r3, #0
 801001c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801001e:	e386      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010020:	e385      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010022:	4b57      	ldr	r3, [pc, #348]	; (8010180 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010026:	e382      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010028:	2300      	movs	r3, #0
 801002a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801002c:	e37f      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801002e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010032:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8010036:	430b      	orrs	r3, r1
 8010038:	f040 80a7 	bne.w	801018a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801003c:	4b4c      	ldr	r3, [pc, #304]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801003e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010040:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8010044:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801004c:	d055      	beq.n	80100fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 801004e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010050:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010054:	f200 8096 	bhi.w	8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801005e:	f000 8084 	beq.w	801016a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8010062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010064:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010068:	f200 808c 	bhi.w	8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801006c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801006e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010072:	d030      	beq.n	80100d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801007a:	f200 8083 	bhi.w	8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801007e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010080:	2b00      	cmp	r3, #0
 8010082:	d004      	beq.n	801008e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010086:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801008a:	d012      	beq.n	80100b2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 801008c:	e07a      	b.n	8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801008e:	4b38      	ldr	r3, [pc, #224]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801009a:	d107      	bne.n	80100ac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801009c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80100a0:	4618      	mov	r0, r3
 80100a2:	f000 fe0b 	bl	8010cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80100a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100aa:	e340      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100ac:	2300      	movs	r3, #0
 80100ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100b0:	e33d      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80100b2:	4b2f      	ldr	r3, [pc, #188]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80100ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80100be:	d107      	bne.n	80100d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100c0:	f107 0318 	add.w	r3, r7, #24
 80100c4:	4618      	mov	r0, r3
 80100c6:	f000 fb51 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100ce:	e32e      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100d0:	2300      	movs	r3, #0
 80100d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100d4:	e32b      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80100d6:	4b26      	ldr	r3, [pc, #152]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80100de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100e2:	d107      	bne.n	80100f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100e4:	f107 030c 	add.w	r3, r7, #12
 80100e8:	4618      	mov	r0, r3
 80100ea:	f000 fc93 	bl	8010a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100f2:	e31c      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100f4:	2300      	movs	r3, #0
 80100f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100f8:	e319      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80100fa:	4b1d      	ldr	r3, [pc, #116]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010102:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010104:	4b1a      	ldr	r3, [pc, #104]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f003 0304 	and.w	r3, r3, #4
 801010c:	2b04      	cmp	r3, #4
 801010e:	d10c      	bne.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010112:	2b00      	cmp	r3, #0
 8010114:	d109      	bne.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010116:	4b16      	ldr	r3, [pc, #88]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	08db      	lsrs	r3, r3, #3
 801011c:	f003 0303 	and.w	r3, r3, #3
 8010120:	4a14      	ldr	r2, [pc, #80]	; (8010174 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010122:	fa22 f303 	lsr.w	r3, r2, r3
 8010126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010128:	e01e      	b.n	8010168 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801012a:	4b11      	ldr	r3, [pc, #68]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010136:	d106      	bne.n	8010146 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801013a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801013e:	d102      	bne.n	8010146 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010140:	4b0d      	ldr	r3, [pc, #52]	; (8010178 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010144:	e010      	b.n	8010168 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010146:	4b0a      	ldr	r3, [pc, #40]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801014e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010152:	d106      	bne.n	8010162 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801015a:	d102      	bne.n	8010162 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801015c:	4b07      	ldr	r3, [pc, #28]	; (801017c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801015e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010160:	e002      	b.n	8010168 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010162:	2300      	movs	r3, #0
 8010164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010166:	e2e2      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010168:	e2e1      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801016a:	4b05      	ldr	r3, [pc, #20]	; (8010180 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801016c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801016e:	e2de      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010170:	58024400 	.word	0x58024400
 8010174:	03d09000 	.word	0x03d09000
 8010178:	003d0900 	.word	0x003d0900
 801017c:	017d7840 	.word	0x017d7840
 8010180:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010184:	2300      	movs	r3, #0
 8010186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010188:	e2d1      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801018a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801018e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8010192:	430b      	orrs	r3, r1
 8010194:	f040 809c 	bne.w	80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010198:	4b93      	ldr	r3, [pc, #588]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801019a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801019c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80101a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80101a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80101a8:	d054      	beq.n	8010254 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80101aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80101b0:	f200 808b 	bhi.w	80102ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80101b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80101ba:	f000 8083 	beq.w	80102c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80101be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80101c4:	f200 8081 	bhi.w	80102ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80101c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80101ce:	d02f      	beq.n	8010230 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80101d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80101d6:	d878      	bhi.n	80102ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80101d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d004      	beq.n	80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80101de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101e4:	d012      	beq.n	801020c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80101e6:	e070      	b.n	80102ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80101e8:	4b7f      	ldr	r3, [pc, #508]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80101f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80101f4:	d107      	bne.n	8010206 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80101f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101fa:	4618      	mov	r0, r3
 80101fc:	f000 fd5e 	bl	8010cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010204:	e293      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010206:	2300      	movs	r3, #0
 8010208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801020a:	e290      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801020c:	4b76      	ldr	r3, [pc, #472]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010218:	d107      	bne.n	801022a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801021a:	f107 0318 	add.w	r3, r7, #24
 801021e:	4618      	mov	r0, r3
 8010220:	f000 faa4 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010224:	69bb      	ldr	r3, [r7, #24]
 8010226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010228:	e281      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801022a:	2300      	movs	r3, #0
 801022c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801022e:	e27e      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010230:	4b6d      	ldr	r3, [pc, #436]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801023c:	d107      	bne.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801023e:	f107 030c 	add.w	r3, r7, #12
 8010242:	4618      	mov	r0, r3
 8010244:	f000 fbe6 	bl	8010a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801024c:	e26f      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801024e:	2300      	movs	r3, #0
 8010250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010252:	e26c      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010254:	4b64      	ldr	r3, [pc, #400]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801025c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801025e:	4b62      	ldr	r3, [pc, #392]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f003 0304 	and.w	r3, r3, #4
 8010266:	2b04      	cmp	r3, #4
 8010268:	d10c      	bne.n	8010284 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 801026a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801026c:	2b00      	cmp	r3, #0
 801026e:	d109      	bne.n	8010284 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010270:	4b5d      	ldr	r3, [pc, #372]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	08db      	lsrs	r3, r3, #3
 8010276:	f003 0303 	and.w	r3, r3, #3
 801027a:	4a5c      	ldr	r2, [pc, #368]	; (80103ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801027c:	fa22 f303 	lsr.w	r3, r2, r3
 8010280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010282:	e01e      	b.n	80102c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010284:	4b58      	ldr	r3, [pc, #352]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801028c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010290:	d106      	bne.n	80102a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8010292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010298:	d102      	bne.n	80102a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801029a:	4b55      	ldr	r3, [pc, #340]	; (80103f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801029c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801029e:	e010      	b.n	80102c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80102a0:	4b51      	ldr	r3, [pc, #324]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80102ac:	d106      	bne.n	80102bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80102ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102b4:	d102      	bne.n	80102bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80102b6:	4b4f      	ldr	r3, [pc, #316]	; (80103f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80102b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102ba:	e002      	b.n	80102c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80102bc:	2300      	movs	r3, #0
 80102be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80102c0:	e235      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80102c2:	e234      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80102c4:	4b4c      	ldr	r3, [pc, #304]	; (80103f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80102c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102c8:	e231      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80102ca:	2300      	movs	r3, #0
 80102cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102ce:	e22e      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80102d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102d4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80102d8:	430b      	orrs	r3, r1
 80102da:	f040 808f 	bne.w	80103fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80102de:	4b42      	ldr	r3, [pc, #264]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102e2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80102e6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80102e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80102ee:	d06b      	beq.n	80103c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80102f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80102f6:	d874      	bhi.n	80103e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80102f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80102fe:	d056      	beq.n	80103ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8010300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010302:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010306:	d86c      	bhi.n	80103e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801030e:	d03b      	beq.n	8010388 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010316:	d864      	bhi.n	80103e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801031a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801031e:	d021      	beq.n	8010364 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010326:	d85c      	bhi.n	80103e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032a:	2b00      	cmp	r3, #0
 801032c:	d004      	beq.n	8010338 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801032e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010334:	d004      	beq.n	8010340 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010336:	e054      	b.n	80103e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010338:	f7fe fa0a 	bl	800e750 <HAL_RCC_GetPCLK1Freq>
 801033c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801033e:	e1f6      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010340:	4b29      	ldr	r3, [pc, #164]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801034c:	d107      	bne.n	801035e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801034e:	f107 0318 	add.w	r3, r7, #24
 8010352:	4618      	mov	r0, r3
 8010354:	f000 fa0a 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010358:	69fb      	ldr	r3, [r7, #28]
 801035a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801035c:	e1e7      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801035e:	2300      	movs	r3, #0
 8010360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010362:	e1e4      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010364:	4b20      	ldr	r3, [pc, #128]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801036c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010370:	d107      	bne.n	8010382 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010372:	f107 030c 	add.w	r3, r7, #12
 8010376:	4618      	mov	r0, r3
 8010378:	f000 fb4c 	bl	8010a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010380:	e1d5      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010382:	2300      	movs	r3, #0
 8010384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010386:	e1d2      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010388:	4b17      	ldr	r3, [pc, #92]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f003 0304 	and.w	r3, r3, #4
 8010390:	2b04      	cmp	r3, #4
 8010392:	d109      	bne.n	80103a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010394:	4b14      	ldr	r3, [pc, #80]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	08db      	lsrs	r3, r3, #3
 801039a:	f003 0303 	and.w	r3, r3, #3
 801039e:	4a13      	ldr	r2, [pc, #76]	; (80103ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80103a0:	fa22 f303 	lsr.w	r3, r2, r3
 80103a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103a6:	e1c2      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103a8:	2300      	movs	r3, #0
 80103aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103ac:	e1bf      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80103ae:	4b0e      	ldr	r3, [pc, #56]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103ba:	d102      	bne.n	80103c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80103bc:	4b0c      	ldr	r3, [pc, #48]	; (80103f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80103be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103c0:	e1b5      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103c2:	2300      	movs	r3, #0
 80103c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103c6:	e1b2      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80103c8:	4b07      	ldr	r3, [pc, #28]	; (80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80103d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80103d4:	d102      	bne.n	80103dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80103d6:	4b07      	ldr	r3, [pc, #28]	; (80103f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80103d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103da:	e1a8      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103dc:	2300      	movs	r3, #0
 80103de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103e0:	e1a5      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80103e2:	2300      	movs	r3, #0
 80103e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103e6:	e1a2      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80103e8:	58024400 	.word	0x58024400
 80103ec:	03d09000 	.word	0x03d09000
 80103f0:	003d0900 	.word	0x003d0900
 80103f4:	017d7840 	.word	0x017d7840
 80103f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80103fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010400:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010404:	430b      	orrs	r3, r1
 8010406:	d173      	bne.n	80104f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010408:	4b9c      	ldr	r3, [pc, #624]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801040a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801040c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010410:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010418:	d02f      	beq.n	801047a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801041a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010420:	d863      	bhi.n	80104ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8010422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010424:	2b00      	cmp	r3, #0
 8010426:	d004      	beq.n	8010432 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801042a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801042e:	d012      	beq.n	8010456 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010430:	e05b      	b.n	80104ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010432:	4b92      	ldr	r3, [pc, #584]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801043a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801043e:	d107      	bne.n	8010450 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010440:	f107 0318 	add.w	r3, r7, #24
 8010444:	4618      	mov	r0, r3
 8010446:	f000 f991 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801044e:	e16e      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010450:	2300      	movs	r3, #0
 8010452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010454:	e16b      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010456:	4b89      	ldr	r3, [pc, #548]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010462:	d107      	bne.n	8010474 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010464:	f107 030c 	add.w	r3, r7, #12
 8010468:	4618      	mov	r0, r3
 801046a:	f000 fad3 	bl	8010a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010472:	e15c      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010474:	2300      	movs	r3, #0
 8010476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010478:	e159      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801047a:	4b80      	ldr	r3, [pc, #512]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801047e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010482:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010484:	4b7d      	ldr	r3, [pc, #500]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f003 0304 	and.w	r3, r3, #4
 801048c:	2b04      	cmp	r3, #4
 801048e:	d10c      	bne.n	80104aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010492:	2b00      	cmp	r3, #0
 8010494:	d109      	bne.n	80104aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010496:	4b79      	ldr	r3, [pc, #484]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	08db      	lsrs	r3, r3, #3
 801049c:	f003 0303 	and.w	r3, r3, #3
 80104a0:	4a77      	ldr	r2, [pc, #476]	; (8010680 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80104a2:	fa22 f303 	lsr.w	r3, r2, r3
 80104a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104a8:	e01e      	b.n	80104e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80104aa:	4b74      	ldr	r3, [pc, #464]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104b6:	d106      	bne.n	80104c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80104b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80104be:	d102      	bne.n	80104c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80104c0:	4b70      	ldr	r3, [pc, #448]	; (8010684 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80104c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104c4:	e010      	b.n	80104e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80104c6:	4b6d      	ldr	r3, [pc, #436]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80104ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80104d2:	d106      	bne.n	80104e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80104d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104da:	d102      	bne.n	80104e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80104dc:	4b6a      	ldr	r3, [pc, #424]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80104de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104e0:	e002      	b.n	80104e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80104e2:	2300      	movs	r3, #0
 80104e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80104e6:	e122      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80104e8:	e121      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80104ea:	2300      	movs	r3, #0
 80104ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104ee:	e11e      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80104f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104f4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80104f8:	430b      	orrs	r3, r1
 80104fa:	d133      	bne.n	8010564 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80104fc:	4b5f      	ldr	r3, [pc, #380]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80104fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010504:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010508:	2b00      	cmp	r3, #0
 801050a:	d004      	beq.n	8010516 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801050c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801050e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010512:	d012      	beq.n	801053a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010514:	e023      	b.n	801055e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010516:	4b59      	ldr	r3, [pc, #356]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801051e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010522:	d107      	bne.n	8010534 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010528:	4618      	mov	r0, r3
 801052a:	f000 fbc7 	bl	8010cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801052e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010530:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010532:	e0fc      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010534:	2300      	movs	r3, #0
 8010536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010538:	e0f9      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801053a:	4b50      	ldr	r3, [pc, #320]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010546:	d107      	bne.n	8010558 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010548:	f107 0318 	add.w	r3, r7, #24
 801054c:	4618      	mov	r0, r3
 801054e:	f000 f90d 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010552:	6a3b      	ldr	r3, [r7, #32]
 8010554:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010556:	e0ea      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010558:	2300      	movs	r3, #0
 801055a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801055c:	e0e7      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801055e:	2300      	movs	r3, #0
 8010560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010562:	e0e4      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010568:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 801056c:	430b      	orrs	r3, r1
 801056e:	f040 808d 	bne.w	801068c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010572:	4b42      	ldr	r3, [pc, #264]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010576:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801057a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801057c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010582:	d06b      	beq.n	801065c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801058a:	d874      	bhi.n	8010676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801058c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010592:	d056      	beq.n	8010642 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801059a:	d86c      	bhi.n	8010676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801059c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80105a2:	d03b      	beq.n	801061c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80105a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80105aa:	d864      	bhi.n	8010676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80105ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105b2:	d021      	beq.n	80105f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80105b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105ba:	d85c      	bhi.n	8010676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80105bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d004      	beq.n	80105cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80105c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80105c8:	d004      	beq.n	80105d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80105ca:	e054      	b.n	8010676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80105cc:	f000 f8b8 	bl	8010740 <HAL_RCCEx_GetD3PCLK1Freq>
 80105d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80105d2:	e0ac      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80105d4:	4b29      	ldr	r3, [pc, #164]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80105e0:	d107      	bne.n	80105f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80105e2:	f107 0318 	add.w	r3, r7, #24
 80105e6:	4618      	mov	r0, r3
 80105e8:	f000 f8c0 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80105f0:	e09d      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80105f2:	2300      	movs	r3, #0
 80105f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105f6:	e09a      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80105f8:	4b20      	ldr	r3, [pc, #128]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010604:	d107      	bne.n	8010616 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010606:	f107 030c 	add.w	r3, r7, #12
 801060a:	4618      	mov	r0, r3
 801060c:	f000 fa02 	bl	8010a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010614:	e08b      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010616:	2300      	movs	r3, #0
 8010618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801061a:	e088      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801061c:	4b17      	ldr	r3, [pc, #92]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f003 0304 	and.w	r3, r3, #4
 8010624:	2b04      	cmp	r3, #4
 8010626:	d109      	bne.n	801063c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010628:	4b14      	ldr	r3, [pc, #80]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	08db      	lsrs	r3, r3, #3
 801062e:	f003 0303 	and.w	r3, r3, #3
 8010632:	4a13      	ldr	r2, [pc, #76]	; (8010680 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010634:	fa22 f303 	lsr.w	r3, r2, r3
 8010638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801063a:	e078      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801063c:	2300      	movs	r3, #0
 801063e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010640:	e075      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010642:	4b0e      	ldr	r3, [pc, #56]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801064a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801064e:	d102      	bne.n	8010656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010650:	4b0c      	ldr	r3, [pc, #48]	; (8010684 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010654:	e06b      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801065a:	e068      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801065c:	4b07      	ldr	r3, [pc, #28]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010668:	d102      	bne.n	8010670 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801066a:	4b07      	ldr	r3, [pc, #28]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801066c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801066e:	e05e      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010670:	2300      	movs	r3, #0
 8010672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010674:	e05b      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010676:	2300      	movs	r3, #0
 8010678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801067a:	e058      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801067c:	58024400 	.word	0x58024400
 8010680:	03d09000 	.word	0x03d09000
 8010684:	003d0900 	.word	0x003d0900
 8010688:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801068c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010690:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8010694:	430b      	orrs	r3, r1
 8010696:	d148      	bne.n	801072a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010698:	4b27      	ldr	r3, [pc, #156]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801069a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801069c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80106a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80106a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106a8:	d02a      	beq.n	8010700 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80106aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106b0:	d838      	bhi.n	8010724 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80106b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d004      	beq.n	80106c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80106b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106be:	d00d      	beq.n	80106dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80106c0:	e030      	b.n	8010724 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80106c2:	4b1d      	ldr	r3, [pc, #116]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106ce:	d102      	bne.n	80106d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80106d0:	4b1a      	ldr	r3, [pc, #104]	; (801073c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80106d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106d4:	e02b      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106d6:	2300      	movs	r3, #0
 80106d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106da:	e028      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80106dc:	4b16      	ldr	r3, [pc, #88]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80106e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80106e8:	d107      	bne.n	80106fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80106ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80106ee:	4618      	mov	r0, r3
 80106f0:	f000 fae4 	bl	8010cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80106f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106f8:	e019      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106fa:	2300      	movs	r3, #0
 80106fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106fe:	e016      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010700:	4b0d      	ldr	r3, [pc, #52]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801070c:	d107      	bne.n	801071e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801070e:	f107 0318 	add.w	r3, r7, #24
 8010712:	4618      	mov	r0, r3
 8010714:	f000 f82a 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801071c:	e007      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801071e:	2300      	movs	r3, #0
 8010720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010722:	e004      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010724:	2300      	movs	r3, #0
 8010726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010728:	e001      	b.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801072a:	2300      	movs	r3, #0
 801072c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801072e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010730:	4618      	mov	r0, r3
 8010732:	3740      	adds	r7, #64	; 0x40
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	58024400 	.word	0x58024400
 801073c:	017d7840 	.word	0x017d7840

08010740 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010744:	f7fd ffd4 	bl	800e6f0 <HAL_RCC_GetHCLKFreq>
 8010748:	4602      	mov	r2, r0
 801074a:	4b06      	ldr	r3, [pc, #24]	; (8010764 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801074c:	6a1b      	ldr	r3, [r3, #32]
 801074e:	091b      	lsrs	r3, r3, #4
 8010750:	f003 0307 	and.w	r3, r3, #7
 8010754:	4904      	ldr	r1, [pc, #16]	; (8010768 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010756:	5ccb      	ldrb	r3, [r1, r3]
 8010758:	f003 031f 	and.w	r3, r3, #31
 801075c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010760:	4618      	mov	r0, r3
 8010762:	bd80      	pop	{r7, pc}
 8010764:	58024400 	.word	0x58024400
 8010768:	0801aac4 	.word	0x0801aac4

0801076c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801076c:	b480      	push	{r7}
 801076e:	b089      	sub	sp, #36	; 0x24
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010774:	4ba1      	ldr	r3, [pc, #644]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010778:	f003 0303 	and.w	r3, r3, #3
 801077c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801077e:	4b9f      	ldr	r3, [pc, #636]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010782:	0b1b      	lsrs	r3, r3, #12
 8010784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010788:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801078a:	4b9c      	ldr	r3, [pc, #624]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801078c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801078e:	091b      	lsrs	r3, r3, #4
 8010790:	f003 0301 	and.w	r3, r3, #1
 8010794:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010796:	4b99      	ldr	r3, [pc, #612]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801079a:	08db      	lsrs	r3, r3, #3
 801079c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80107a0:	693a      	ldr	r2, [r7, #16]
 80107a2:	fb02 f303 	mul.w	r3, r2, r3
 80107a6:	ee07 3a90 	vmov	s15, r3
 80107aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	f000 8111 	beq.w	80109dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80107ba:	69bb      	ldr	r3, [r7, #24]
 80107bc:	2b02      	cmp	r3, #2
 80107be:	f000 8083 	beq.w	80108c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80107c2:	69bb      	ldr	r3, [r7, #24]
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	f200 80a1 	bhi.w	801090c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80107ca:	69bb      	ldr	r3, [r7, #24]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d003      	beq.n	80107d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80107d0:	69bb      	ldr	r3, [r7, #24]
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d056      	beq.n	8010884 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80107d6:	e099      	b.n	801090c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80107d8:	4b88      	ldr	r3, [pc, #544]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f003 0320 	and.w	r3, r3, #32
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d02d      	beq.n	8010840 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80107e4:	4b85      	ldr	r3, [pc, #532]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	08db      	lsrs	r3, r3, #3
 80107ea:	f003 0303 	and.w	r3, r3, #3
 80107ee:	4a84      	ldr	r2, [pc, #528]	; (8010a00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80107f0:	fa22 f303 	lsr.w	r3, r2, r3
 80107f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	ee07 3a90 	vmov	s15, r3
 80107fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	ee07 3a90 	vmov	s15, r3
 8010806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801080a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801080e:	4b7b      	ldr	r3, [pc, #492]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010816:	ee07 3a90 	vmov	s15, r3
 801081a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801081e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010822:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801082a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801082e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010836:	ee67 7a27 	vmul.f32	s15, s14, s15
 801083a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801083e:	e087      	b.n	8010950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	ee07 3a90 	vmov	s15, r3
 8010846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801084a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010a08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801084e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010852:	4b6a      	ldr	r3, [pc, #424]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801085a:	ee07 3a90 	vmov	s15, r3
 801085e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010862:	ed97 6a03 	vldr	s12, [r7, #12]
 8010866:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801086a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801086e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801087a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801087e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010882:	e065      	b.n	8010950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	ee07 3a90 	vmov	s15, r3
 801088a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801088e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010896:	4b59      	ldr	r3, [pc, #356]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801089a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801089e:	ee07 3a90 	vmov	s15, r3
 80108a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80108aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80108ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80108b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80108b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80108ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80108be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80108c6:	e043      	b.n	8010950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	ee07 3a90 	vmov	s15, r3
 80108ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80108d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80108da:	4b48      	ldr	r3, [pc, #288]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108e2:	ee07 3a90 	vmov	s15, r3
 80108e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80108ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80108f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80108f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80108fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80108fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801090a:	e021      	b.n	8010950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	ee07 3a90 	vmov	s15, r3
 8010912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010916:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801091a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801091e:	4b37      	ldr	r3, [pc, #220]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010926:	ee07 3a90 	vmov	s15, r3
 801092a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801092e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010932:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801093a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801093e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010946:	ee67 7a27 	vmul.f32	s15, s14, s15
 801094a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801094e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010950:	4b2a      	ldr	r3, [pc, #168]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010954:	0a5b      	lsrs	r3, r3, #9
 8010956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801095a:	ee07 3a90 	vmov	s15, r3
 801095e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010966:	ee37 7a87 	vadd.f32	s14, s15, s14
 801096a:	edd7 6a07 	vldr	s13, [r7, #28]
 801096e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010976:	ee17 2a90 	vmov	r2, s15
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801097e:	4b1f      	ldr	r3, [pc, #124]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010982:	0c1b      	lsrs	r3, r3, #16
 8010984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010988:	ee07 3a90 	vmov	s15, r3
 801098c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010990:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010994:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010998:	edd7 6a07 	vldr	s13, [r7, #28]
 801099c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80109a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80109a4:	ee17 2a90 	vmov	r2, s15
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80109ac:	4b13      	ldr	r3, [pc, #76]	; (80109fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80109ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109b0:	0e1b      	lsrs	r3, r3, #24
 80109b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109b6:	ee07 3a90 	vmov	s15, r3
 80109ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80109c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80109c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80109ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80109ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80109d2:	ee17 2a90 	vmov	r2, s15
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80109da:	e008      	b.n	80109ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2200      	movs	r2, #0
 80109e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2200      	movs	r2, #0
 80109ec:	609a      	str	r2, [r3, #8]
}
 80109ee:	bf00      	nop
 80109f0:	3724      	adds	r7, #36	; 0x24
 80109f2:	46bd      	mov	sp, r7
 80109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f8:	4770      	bx	lr
 80109fa:	bf00      	nop
 80109fc:	58024400 	.word	0x58024400
 8010a00:	03d09000 	.word	0x03d09000
 8010a04:	46000000 	.word	0x46000000
 8010a08:	4c742400 	.word	0x4c742400
 8010a0c:	4a742400 	.word	0x4a742400
 8010a10:	4bbebc20 	.word	0x4bbebc20

08010a14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010a14:	b480      	push	{r7}
 8010a16:	b089      	sub	sp, #36	; 0x24
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010a1c:	4ba1      	ldr	r3, [pc, #644]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a20:	f003 0303 	and.w	r3, r3, #3
 8010a24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010a26:	4b9f      	ldr	r3, [pc, #636]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a2a:	0d1b      	lsrs	r3, r3, #20
 8010a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010a32:	4b9c      	ldr	r3, [pc, #624]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a36:	0a1b      	lsrs	r3, r3, #8
 8010a38:	f003 0301 	and.w	r3, r3, #1
 8010a3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010a3e:	4b99      	ldr	r3, [pc, #612]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a42:	08db      	lsrs	r3, r3, #3
 8010a44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a48:	693a      	ldr	r2, [r7, #16]
 8010a4a:	fb02 f303 	mul.w	r3, r2, r3
 8010a4e:	ee07 3a90 	vmov	s15, r3
 8010a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 8111 	beq.w	8010c84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	2b02      	cmp	r3, #2
 8010a66:	f000 8083 	beq.w	8010b70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	2b02      	cmp	r3, #2
 8010a6e:	f200 80a1 	bhi.w	8010bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d003      	beq.n	8010a80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	2b01      	cmp	r3, #1
 8010a7c:	d056      	beq.n	8010b2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010a7e:	e099      	b.n	8010bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a80:	4b88      	ldr	r3, [pc, #544]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f003 0320 	and.w	r3, r3, #32
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d02d      	beq.n	8010ae8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010a8c:	4b85      	ldr	r3, [pc, #532]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	08db      	lsrs	r3, r3, #3
 8010a92:	f003 0303 	and.w	r3, r3, #3
 8010a96:	4a84      	ldr	r2, [pc, #528]	; (8010ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010a98:	fa22 f303 	lsr.w	r3, r2, r3
 8010a9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	ee07 3a90 	vmov	s15, r3
 8010aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	ee07 3a90 	vmov	s15, r3
 8010aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ab6:	4b7b      	ldr	r3, [pc, #492]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010abe:	ee07 3a90 	vmov	s15, r3
 8010ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010aca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010ae6:	e087      	b.n	8010bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	ee07 3a90 	vmov	s15, r3
 8010aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010af2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010afa:	4b6a      	ldr	r3, [pc, #424]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b02:	ee07 3a90 	vmov	s15, r3
 8010b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b2a:	e065      	b.n	8010bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	ee07 3a90 	vmov	s15, r3
 8010b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b3e:	4b59      	ldr	r3, [pc, #356]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b46:	ee07 3a90 	vmov	s15, r3
 8010b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b6e:	e043      	b.n	8010bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	ee07 3a90 	vmov	s15, r3
 8010b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b82:	4b48      	ldr	r3, [pc, #288]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b8a:	ee07 3a90 	vmov	s15, r3
 8010b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010bb2:	e021      	b.n	8010bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	ee07 3a90 	vmov	s15, r3
 8010bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bc6:	4b37      	ldr	r3, [pc, #220]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bce:	ee07 3a90 	vmov	s15, r3
 8010bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010bf6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010bf8:	4b2a      	ldr	r3, [pc, #168]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bfc:	0a5b      	lsrs	r3, r3, #9
 8010bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c02:	ee07 3a90 	vmov	s15, r3
 8010c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c1e:	ee17 2a90 	vmov	r2, s15
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010c26:	4b1f      	ldr	r3, [pc, #124]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c2a:	0c1b      	lsrs	r3, r3, #16
 8010c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c30:	ee07 3a90 	vmov	s15, r3
 8010c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c40:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c4c:	ee17 2a90 	vmov	r2, s15
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010c54:	4b13      	ldr	r3, [pc, #76]	; (8010ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c58:	0e1b      	lsrs	r3, r3, #24
 8010c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c5e:	ee07 3a90 	vmov	s15, r3
 8010c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c7a:	ee17 2a90 	vmov	r2, s15
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010c82:	e008      	b.n	8010c96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2200      	movs	r2, #0
 8010c88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	609a      	str	r2, [r3, #8]
}
 8010c96:	bf00      	nop
 8010c98:	3724      	adds	r7, #36	; 0x24
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca0:	4770      	bx	lr
 8010ca2:	bf00      	nop
 8010ca4:	58024400 	.word	0x58024400
 8010ca8:	03d09000 	.word	0x03d09000
 8010cac:	46000000 	.word	0x46000000
 8010cb0:	4c742400 	.word	0x4c742400
 8010cb4:	4a742400 	.word	0x4a742400
 8010cb8:	4bbebc20 	.word	0x4bbebc20

08010cbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b089      	sub	sp, #36	; 0x24
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010cc4:	4ba0      	ldr	r3, [pc, #640]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cc8:	f003 0303 	and.w	r3, r3, #3
 8010ccc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010cce:	4b9e      	ldr	r3, [pc, #632]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cd2:	091b      	lsrs	r3, r3, #4
 8010cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010cd8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010cda:	4b9b      	ldr	r3, [pc, #620]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cde:	f003 0301 	and.w	r3, r3, #1
 8010ce2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010ce4:	4b98      	ldr	r3, [pc, #608]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ce8:	08db      	lsrs	r3, r3, #3
 8010cea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010cee:	693a      	ldr	r2, [r7, #16]
 8010cf0:	fb02 f303 	mul.w	r3, r2, r3
 8010cf4:	ee07 3a90 	vmov	s15, r3
 8010cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cfc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	f000 8111 	beq.w	8010f2a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010d08:	69bb      	ldr	r3, [r7, #24]
 8010d0a:	2b02      	cmp	r3, #2
 8010d0c:	f000 8083 	beq.w	8010e16 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010d10:	69bb      	ldr	r3, [r7, #24]
 8010d12:	2b02      	cmp	r3, #2
 8010d14:	f200 80a1 	bhi.w	8010e5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010d18:	69bb      	ldr	r3, [r7, #24]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d003      	beq.n	8010d26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010d1e:	69bb      	ldr	r3, [r7, #24]
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d056      	beq.n	8010dd2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010d24:	e099      	b.n	8010e5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d26:	4b88      	ldr	r3, [pc, #544]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f003 0320 	and.w	r3, r3, #32
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d02d      	beq.n	8010d8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010d32:	4b85      	ldr	r3, [pc, #532]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	08db      	lsrs	r3, r3, #3
 8010d38:	f003 0303 	and.w	r3, r3, #3
 8010d3c:	4a83      	ldr	r2, [pc, #524]	; (8010f4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8010d42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	ee07 3a90 	vmov	s15, r3
 8010d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	ee07 3a90 	vmov	s15, r3
 8010d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d5c:	4b7a      	ldr	r3, [pc, #488]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d64:	ee07 3a90 	vmov	s15, r3
 8010d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010d70:	eddf 5a77 	vldr	s11, [pc, #476]	; 8010f50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010d74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010d8c:	e087      	b.n	8010e9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	ee07 3a90 	vmov	s15, r3
 8010d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d98:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8010f54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010da0:	4b69      	ldr	r3, [pc, #420]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010da8:	ee07 3a90 	vmov	s15, r3
 8010dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010db0:	ed97 6a03 	vldr	s12, [r7, #12]
 8010db4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8010f50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010db8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010dbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010dc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010dc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010dd0:	e065      	b.n	8010e9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	ee07 3a90 	vmov	s15, r3
 8010dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ddc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010f58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010de4:	4b58      	ldr	r3, [pc, #352]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dec:	ee07 3a90 	vmov	s15, r3
 8010df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010df4:	ed97 6a03 	vldr	s12, [r7, #12]
 8010df8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8010f50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e14:	e043      	b.n	8010e9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	ee07 3a90 	vmov	s15, r3
 8010e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8010f5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e28:	4b47      	ldr	r3, [pc, #284]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e30:	ee07 3a90 	vmov	s15, r3
 8010e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e38:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e3c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010f50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e58:	e021      	b.n	8010e9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	ee07 3a90 	vmov	s15, r3
 8010e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e64:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010f54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e6c:	4b36      	ldr	r3, [pc, #216]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e74:	ee07 3a90 	vmov	s15, r3
 8010e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e80:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010f50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e9c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010e9e:	4b2a      	ldr	r3, [pc, #168]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ea2:	0a5b      	lsrs	r3, r3, #9
 8010ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ea8:	ee07 3a90 	vmov	s15, r3
 8010eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ec4:	ee17 2a90 	vmov	r2, s15
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010ecc:	4b1e      	ldr	r3, [pc, #120]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ed0:	0c1b      	lsrs	r3, r3, #16
 8010ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ed6:	ee07 3a90 	vmov	s15, r3
 8010eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8010eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ef2:	ee17 2a90 	vmov	r2, s15
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010efa:	4b13      	ldr	r3, [pc, #76]	; (8010f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010efe:	0e1b      	lsrs	r3, r3, #24
 8010f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f04:	ee07 3a90 	vmov	s15, r3
 8010f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f20:	ee17 2a90 	vmov	r2, s15
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010f28:	e008      	b.n	8010f3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2200      	movs	r2, #0
 8010f34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	609a      	str	r2, [r3, #8]
}
 8010f3c:	bf00      	nop
 8010f3e:	3724      	adds	r7, #36	; 0x24
 8010f40:	46bd      	mov	sp, r7
 8010f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f46:	4770      	bx	lr
 8010f48:	58024400 	.word	0x58024400
 8010f4c:	03d09000 	.word	0x03d09000
 8010f50:	46000000 	.word	0x46000000
 8010f54:	4c742400 	.word	0x4c742400
 8010f58:	4a742400 	.word	0x4a742400
 8010f5c:	4bbebc20 	.word	0x4bbebc20

08010f60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b084      	sub	sp, #16
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010f6e:	4b53      	ldr	r3, [pc, #332]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8010f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f72:	f003 0303 	and.w	r3, r3, #3
 8010f76:	2b03      	cmp	r3, #3
 8010f78:	d101      	bne.n	8010f7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	e099      	b.n	80110b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010f7e:	4b4f      	ldr	r3, [pc, #316]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	4a4e      	ldr	r2, [pc, #312]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8010f84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010f8a:	f7f4 fb9b 	bl	80056c4 <HAL_GetTick>
 8010f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010f90:	e008      	b.n	8010fa4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010f92:	f7f4 fb97 	bl	80056c4 <HAL_GetTick>
 8010f96:	4602      	mov	r2, r0
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	1ad3      	subs	r3, r2, r3
 8010f9c:	2b02      	cmp	r3, #2
 8010f9e:	d901      	bls.n	8010fa4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010fa0:	2303      	movs	r3, #3
 8010fa2:	e086      	b.n	80110b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010fa4:	4b45      	ldr	r3, [pc, #276]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d1f0      	bne.n	8010f92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010fb0:	4b42      	ldr	r3, [pc, #264]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8010fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	031b      	lsls	r3, r3, #12
 8010fbe:	493f      	ldr	r1, [pc, #252]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8010fc0:	4313      	orrs	r3, r2
 8010fc2:	628b      	str	r3, [r1, #40]	; 0x28
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	685b      	ldr	r3, [r3, #4]
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	689b      	ldr	r3, [r3, #8]
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	025b      	lsls	r3, r3, #9
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	431a      	orrs	r2, r3
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	3b01      	subs	r3, #1
 8010fe0:	041b      	lsls	r3, r3, #16
 8010fe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010fe6:	431a      	orrs	r2, r3
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	691b      	ldr	r3, [r3, #16]
 8010fec:	3b01      	subs	r3, #1
 8010fee:	061b      	lsls	r3, r3, #24
 8010ff0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010ff4:	4931      	ldr	r1, [pc, #196]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8010ff6:	4313      	orrs	r3, r2
 8010ff8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8010ffa:	4b30      	ldr	r3, [pc, #192]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8010ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ffe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	695b      	ldr	r3, [r3, #20]
 8011006:	492d      	ldr	r1, [pc, #180]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8011008:	4313      	orrs	r3, r2
 801100a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801100c:	4b2b      	ldr	r3, [pc, #172]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 801100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011010:	f023 0220 	bic.w	r2, r3, #32
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	699b      	ldr	r3, [r3, #24]
 8011018:	4928      	ldr	r1, [pc, #160]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 801101a:	4313      	orrs	r3, r2
 801101c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801101e:	4b27      	ldr	r3, [pc, #156]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8011020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011022:	4a26      	ldr	r2, [pc, #152]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8011024:	f023 0310 	bic.w	r3, r3, #16
 8011028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801102a:	4b24      	ldr	r3, [pc, #144]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 801102c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801102e:	4b24      	ldr	r3, [pc, #144]	; (80110c0 <RCCEx_PLL2_Config+0x160>)
 8011030:	4013      	ands	r3, r2
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	69d2      	ldr	r2, [r2, #28]
 8011036:	00d2      	lsls	r2, r2, #3
 8011038:	4920      	ldr	r1, [pc, #128]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 801103a:	4313      	orrs	r3, r2
 801103c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801103e:	4b1f      	ldr	r3, [pc, #124]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8011040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011042:	4a1e      	ldr	r2, [pc, #120]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8011044:	f043 0310 	orr.w	r3, r3, #16
 8011048:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d106      	bne.n	801105e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011050:	4b1a      	ldr	r3, [pc, #104]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8011052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011054:	4a19      	ldr	r2, [pc, #100]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8011056:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801105a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801105c:	e00f      	b.n	801107e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	2b01      	cmp	r3, #1
 8011062:	d106      	bne.n	8011072 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011064:	4b15      	ldr	r3, [pc, #84]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8011066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011068:	4a14      	ldr	r2, [pc, #80]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 801106a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801106e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011070:	e005      	b.n	801107e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011072:	4b12      	ldr	r3, [pc, #72]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8011074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011076:	4a11      	ldr	r2, [pc, #68]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8011078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801107c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801107e:	4b0f      	ldr	r3, [pc, #60]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	4a0e      	ldr	r2, [pc, #56]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 8011084:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801108a:	f7f4 fb1b 	bl	80056c4 <HAL_GetTick>
 801108e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011090:	e008      	b.n	80110a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011092:	f7f4 fb17 	bl	80056c4 <HAL_GetTick>
 8011096:	4602      	mov	r2, r0
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	1ad3      	subs	r3, r2, r3
 801109c:	2b02      	cmp	r3, #2
 801109e:	d901      	bls.n	80110a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80110a0:	2303      	movs	r3, #3
 80110a2:	e006      	b.n	80110b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80110a4:	4b05      	ldr	r3, [pc, #20]	; (80110bc <RCCEx_PLL2_Config+0x15c>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d0f0      	beq.n	8011092 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80110b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3710      	adds	r7, #16
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}
 80110ba:	bf00      	nop
 80110bc:	58024400 	.word	0x58024400
 80110c0:	ffff0007 	.word	0xffff0007

080110c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80110ce:	2300      	movs	r3, #0
 80110d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80110d2:	4b53      	ldr	r3, [pc, #332]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80110d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110d6:	f003 0303 	and.w	r3, r3, #3
 80110da:	2b03      	cmp	r3, #3
 80110dc:	d101      	bne.n	80110e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80110de:	2301      	movs	r3, #1
 80110e0:	e099      	b.n	8011216 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80110e2:	4b4f      	ldr	r3, [pc, #316]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	4a4e      	ldr	r2, [pc, #312]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80110e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80110ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80110ee:	f7f4 fae9 	bl	80056c4 <HAL_GetTick>
 80110f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80110f4:	e008      	b.n	8011108 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80110f6:	f7f4 fae5 	bl	80056c4 <HAL_GetTick>
 80110fa:	4602      	mov	r2, r0
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	1ad3      	subs	r3, r2, r3
 8011100:	2b02      	cmp	r3, #2
 8011102:	d901      	bls.n	8011108 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011104:	2303      	movs	r3, #3
 8011106:	e086      	b.n	8011216 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011108:	4b45      	ldr	r3, [pc, #276]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011110:	2b00      	cmp	r3, #0
 8011112:	d1f0      	bne.n	80110f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011114:	4b42      	ldr	r3, [pc, #264]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 8011116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011118:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	051b      	lsls	r3, r3, #20
 8011122:	493f      	ldr	r1, [pc, #252]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 8011124:	4313      	orrs	r3, r2
 8011126:	628b      	str	r3, [r1, #40]	; 0x28
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	3b01      	subs	r3, #1
 801112e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	689b      	ldr	r3, [r3, #8]
 8011136:	3b01      	subs	r3, #1
 8011138:	025b      	lsls	r3, r3, #9
 801113a:	b29b      	uxth	r3, r3
 801113c:	431a      	orrs	r2, r3
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	3b01      	subs	r3, #1
 8011144:	041b      	lsls	r3, r3, #16
 8011146:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801114a:	431a      	orrs	r2, r3
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	691b      	ldr	r3, [r3, #16]
 8011150:	3b01      	subs	r3, #1
 8011152:	061b      	lsls	r3, r3, #24
 8011154:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011158:	4931      	ldr	r1, [pc, #196]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 801115a:	4313      	orrs	r3, r2
 801115c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801115e:	4b30      	ldr	r3, [pc, #192]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 8011160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011162:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	695b      	ldr	r3, [r3, #20]
 801116a:	492d      	ldr	r1, [pc, #180]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 801116c:	4313      	orrs	r3, r2
 801116e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011170:	4b2b      	ldr	r3, [pc, #172]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 8011172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011174:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	699b      	ldr	r3, [r3, #24]
 801117c:	4928      	ldr	r1, [pc, #160]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 801117e:	4313      	orrs	r3, r2
 8011180:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011182:	4b27      	ldr	r3, [pc, #156]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 8011184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011186:	4a26      	ldr	r2, [pc, #152]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 8011188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801118c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801118e:	4b24      	ldr	r3, [pc, #144]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 8011190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011192:	4b24      	ldr	r3, [pc, #144]	; (8011224 <RCCEx_PLL3_Config+0x160>)
 8011194:	4013      	ands	r3, r2
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	69d2      	ldr	r2, [r2, #28]
 801119a:	00d2      	lsls	r2, r2, #3
 801119c:	4920      	ldr	r1, [pc, #128]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 801119e:	4313      	orrs	r3, r2
 80111a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80111a2:	4b1f      	ldr	r3, [pc, #124]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80111a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a6:	4a1e      	ldr	r2, [pc, #120]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80111a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80111ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d106      	bne.n	80111c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80111b4:	4b1a      	ldr	r3, [pc, #104]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80111b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111b8:	4a19      	ldr	r2, [pc, #100]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80111ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80111be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80111c0:	e00f      	b.n	80111e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	d106      	bne.n	80111d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80111c8:	4b15      	ldr	r3, [pc, #84]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80111ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111cc:	4a14      	ldr	r2, [pc, #80]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80111ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80111d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80111d4:	e005      	b.n	80111e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80111d6:	4b12      	ldr	r3, [pc, #72]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80111d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111da:	4a11      	ldr	r2, [pc, #68]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80111dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80111e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80111e2:	4b0f      	ldr	r3, [pc, #60]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	4a0e      	ldr	r2, [pc, #56]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 80111e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80111ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80111ee:	f7f4 fa69 	bl	80056c4 <HAL_GetTick>
 80111f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80111f4:	e008      	b.n	8011208 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80111f6:	f7f4 fa65 	bl	80056c4 <HAL_GetTick>
 80111fa:	4602      	mov	r2, r0
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	1ad3      	subs	r3, r2, r3
 8011200:	2b02      	cmp	r3, #2
 8011202:	d901      	bls.n	8011208 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011204:	2303      	movs	r3, #3
 8011206:	e006      	b.n	8011216 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011208:	4b05      	ldr	r3, [pc, #20]	; (8011220 <RCCEx_PLL3_Config+0x15c>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011210:	2b00      	cmp	r3, #0
 8011212:	d0f0      	beq.n	80111f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011214:	7bfb      	ldrb	r3, [r7, #15]
}
 8011216:	4618      	mov	r0, r3
 8011218:	3710      	adds	r7, #16
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	58024400 	.word	0x58024400
 8011224:	ffff0007 	.word	0xffff0007

08011228 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011230:	2301      	movs	r3, #1
 8011232:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d071      	beq.n	801131e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011240:	b2db      	uxtb	r3, r3
 8011242:	2b00      	cmp	r3, #0
 8011244:	d106      	bne.n	8011254 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2200      	movs	r2, #0
 801124a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f7f2 fc90 	bl	8003b74 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2202      	movs	r2, #2
 8011258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	68db      	ldr	r3, [r3, #12]
 8011262:	f003 0310 	and.w	r3, r3, #16
 8011266:	2b10      	cmp	r3, #16
 8011268:	d050      	beq.n	801130c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	22ca      	movs	r2, #202	; 0xca
 8011270:	625a      	str	r2, [r3, #36]	; 0x24
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	2253      	movs	r2, #83	; 0x53
 8011278:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f000 fa4a 	bl	8011714 <RTC_EnterInitMode>
 8011280:	4603      	mov	r3, r0
 8011282:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011284:	7bfb      	ldrb	r3, [r7, #15]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d124      	bne.n	80112d4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	6899      	ldr	r1, [r3, #8]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	4b24      	ldr	r3, [pc, #144]	; (8011328 <HAL_RTC_Init+0x100>)
 8011296:	400b      	ands	r3, r1
 8011298:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	6899      	ldr	r1, [r3, #8]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	685a      	ldr	r2, [r3, #4]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	691b      	ldr	r3, [r3, #16]
 80112a8:	431a      	orrs	r2, r3
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	699b      	ldr	r3, [r3, #24]
 80112ae:	431a      	orrs	r2, r3
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	430a      	orrs	r2, r1
 80112b6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	689b      	ldr	r3, [r3, #8]
 80112bc:	0419      	lsls	r1, r3, #16
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	68da      	ldr	r2, [r3, #12]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	430a      	orrs	r2, r1
 80112c8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f000 fa56 	bl	801177c <RTC_ExitInitMode>
 80112d0:	4603      	mov	r3, r0
 80112d2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80112d4:	7bfb      	ldrb	r3, [r7, #15]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d113      	bne.n	8011302 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	f022 0203 	bic.w	r2, r2, #3
 80112e8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	69da      	ldr	r2, [r3, #28]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	695b      	ldr	r3, [r3, #20]
 80112f8:	431a      	orrs	r2, r3
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	430a      	orrs	r2, r1
 8011300:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	22ff      	movs	r2, #255	; 0xff
 8011308:	625a      	str	r2, [r3, #36]	; 0x24
 801130a:	e001      	b.n	8011310 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 801130c:	2300      	movs	r3, #0
 801130e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011310:	7bfb      	ldrb	r3, [r7, #15]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d103      	bne.n	801131e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2201      	movs	r2, #1
 801131a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 801131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011320:	4618      	mov	r0, r3
 8011322:	3710      	adds	r7, #16
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	ff8fffbf 	.word	0xff8fffbf

0801132c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801132c:	b590      	push	{r4, r7, lr}
 801132e:	b087      	sub	sp, #28
 8011330:	af00      	add	r7, sp, #0
 8011332:	60f8      	str	r0, [r7, #12]
 8011334:	60b9      	str	r1, [r7, #8]
 8011336:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801133e:	2b01      	cmp	r3, #1
 8011340:	d101      	bne.n	8011346 <HAL_RTC_SetTime+0x1a>
 8011342:	2302      	movs	r3, #2
 8011344:	e089      	b.n	801145a <HAL_RTC_SetTime+0x12e>
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	2201      	movs	r2, #1
 801134a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	2202      	movs	r2, #2
 8011352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	22ca      	movs	r2, #202	; 0xca
 801135c:	625a      	str	r2, [r3, #36]	; 0x24
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2253      	movs	r2, #83	; 0x53
 8011364:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011366:	68f8      	ldr	r0, [r7, #12]
 8011368:	f000 f9d4 	bl	8011714 <RTC_EnterInitMode>
 801136c:	4603      	mov	r3, r0
 801136e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011370:	7cfb      	ldrb	r3, [r7, #19]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d161      	bne.n	801143a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d126      	bne.n	80113ca <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	689b      	ldr	r3, [r3, #8]
 8011382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011386:	2b00      	cmp	r3, #0
 8011388:	d102      	bne.n	8011390 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	2200      	movs	r2, #0
 801138e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	781b      	ldrb	r3, [r3, #0]
 8011394:	4618      	mov	r0, r3
 8011396:	f000 fa2f 	bl	80117f8 <RTC_ByteToBcd2>
 801139a:	4603      	mov	r3, r0
 801139c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	785b      	ldrb	r3, [r3, #1]
 80113a2:	4618      	mov	r0, r3
 80113a4:	f000 fa28 	bl	80117f8 <RTC_ByteToBcd2>
 80113a8:	4603      	mov	r3, r0
 80113aa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80113ac:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	789b      	ldrb	r3, [r3, #2]
 80113b2:	4618      	mov	r0, r3
 80113b4:	f000 fa20 	bl	80117f8 <RTC_ByteToBcd2>
 80113b8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80113ba:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	78db      	ldrb	r3, [r3, #3]
 80113c2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80113c4:	4313      	orrs	r3, r2
 80113c6:	617b      	str	r3, [r7, #20]
 80113c8:	e018      	b.n	80113fc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	689b      	ldr	r3, [r3, #8]
 80113d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d102      	bne.n	80113de <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	2200      	movs	r2, #0
 80113dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	785b      	ldrb	r3, [r3, #1]
 80113e8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80113ea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80113ec:	68ba      	ldr	r2, [r7, #8]
 80113ee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80113f0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	78db      	ldrb	r3, [r3, #3]
 80113f6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80113f8:	4313      	orrs	r3, r2
 80113fa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	6979      	ldr	r1, [r7, #20]
 8011402:	4b18      	ldr	r3, [pc, #96]	; (8011464 <HAL_RTC_SetTime+0x138>)
 8011404:	400b      	ands	r3, r1
 8011406:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	689a      	ldr	r2, [r3, #8]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011416:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	6899      	ldr	r1, [r3, #8]
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	68da      	ldr	r2, [r3, #12]
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	691b      	ldr	r3, [r3, #16]
 8011426:	431a      	orrs	r2, r3
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	430a      	orrs	r2, r1
 801142e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f000 f9a3 	bl	801177c <RTC_ExitInitMode>
 8011436:	4603      	mov	r3, r0
 8011438:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	22ff      	movs	r2, #255	; 0xff
 8011440:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011442:	7cfb      	ldrb	r3, [r7, #19]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d103      	bne.n	8011450 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2201      	movs	r2, #1
 801144c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2200      	movs	r2, #0
 8011454:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011458:	7cfb      	ldrb	r3, [r7, #19]
}
 801145a:	4618      	mov	r0, r3
 801145c:	371c      	adds	r7, #28
 801145e:	46bd      	mov	sp, r7
 8011460:	bd90      	pop	{r4, r7, pc}
 8011462:	bf00      	nop
 8011464:	007f7f7f 	.word	0x007f7f7f

08011468 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b086      	sub	sp, #24
 801146c:	af00      	add	r7, sp, #0
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	60b9      	str	r1, [r7, #8]
 8011472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	691b      	ldr	r3, [r3, #16]
 8011484:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	4b22      	ldr	r3, [pc, #136]	; (801151c <HAL_RTC_GetTime+0xb4>)
 8011494:	4013      	ands	r3, r2
 8011496:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	0c1b      	lsrs	r3, r3, #16
 801149c:	b2db      	uxtb	r3, r3
 801149e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114a2:	b2da      	uxtb	r2, r3
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	0a1b      	lsrs	r3, r3, #8
 80114ac:	b2db      	uxtb	r3, r3
 80114ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114b2:	b2da      	uxtb	r2, r3
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114c0:	b2da      	uxtb	r2, r3
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	0d9b      	lsrs	r3, r3, #22
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	f003 0301 	and.w	r3, r3, #1
 80114d0:	b2da      	uxtb	r2, r3
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d11a      	bne.n	8011512 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	4618      	mov	r0, r3
 80114e2:	f000 f9a9 	bl	8011838 <RTC_Bcd2ToByte>
 80114e6:	4603      	mov	r3, r0
 80114e8:	461a      	mov	r2, r3
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	785b      	ldrb	r3, [r3, #1]
 80114f2:	4618      	mov	r0, r3
 80114f4:	f000 f9a0 	bl	8011838 <RTC_Bcd2ToByte>
 80114f8:	4603      	mov	r3, r0
 80114fa:	461a      	mov	r2, r3
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	789b      	ldrb	r3, [r3, #2]
 8011504:	4618      	mov	r0, r3
 8011506:	f000 f997 	bl	8011838 <RTC_Bcd2ToByte>
 801150a:	4603      	mov	r3, r0
 801150c:	461a      	mov	r2, r3
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011512:	2300      	movs	r3, #0
}
 8011514:	4618      	mov	r0, r3
 8011516:	3718      	adds	r7, #24
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}
 801151c:	007f7f7f 	.word	0x007f7f7f

08011520 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011520:	b590      	push	{r4, r7, lr}
 8011522:	b087      	sub	sp, #28
 8011524:	af00      	add	r7, sp, #0
 8011526:	60f8      	str	r0, [r7, #12]
 8011528:	60b9      	str	r1, [r7, #8]
 801152a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011532:	2b01      	cmp	r3, #1
 8011534:	d101      	bne.n	801153a <HAL_RTC_SetDate+0x1a>
 8011536:	2302      	movs	r3, #2
 8011538:	e073      	b.n	8011622 <HAL_RTC_SetDate+0x102>
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	2201      	movs	r2, #1
 801153e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2202      	movs	r2, #2
 8011546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d10e      	bne.n	801156e <HAL_RTC_SetDate+0x4e>
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	785b      	ldrb	r3, [r3, #1]
 8011554:	f003 0310 	and.w	r3, r3, #16
 8011558:	2b00      	cmp	r3, #0
 801155a:	d008      	beq.n	801156e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	785b      	ldrb	r3, [r3, #1]
 8011560:	f023 0310 	bic.w	r3, r3, #16
 8011564:	b2db      	uxtb	r3, r3
 8011566:	330a      	adds	r3, #10
 8011568:	b2da      	uxtb	r2, r3
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d11c      	bne.n	80115ae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	78db      	ldrb	r3, [r3, #3]
 8011578:	4618      	mov	r0, r3
 801157a:	f000 f93d 	bl	80117f8 <RTC_ByteToBcd2>
 801157e:	4603      	mov	r3, r0
 8011580:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	785b      	ldrb	r3, [r3, #1]
 8011586:	4618      	mov	r0, r3
 8011588:	f000 f936 	bl	80117f8 <RTC_ByteToBcd2>
 801158c:	4603      	mov	r3, r0
 801158e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011590:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	789b      	ldrb	r3, [r3, #2]
 8011596:	4618      	mov	r0, r3
 8011598:	f000 f92e 	bl	80117f8 <RTC_ByteToBcd2>
 801159c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801159e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80115a8:	4313      	orrs	r3, r2
 80115aa:	617b      	str	r3, [r7, #20]
 80115ac:	e00e      	b.n	80115cc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	78db      	ldrb	r3, [r3, #3]
 80115b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	785b      	ldrb	r3, [r3, #1]
 80115b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80115ba:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80115bc:	68ba      	ldr	r2, [r7, #8]
 80115be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80115c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	781b      	ldrb	r3, [r3, #0]
 80115c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80115c8:	4313      	orrs	r3, r2
 80115ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	22ca      	movs	r2, #202	; 0xca
 80115d2:	625a      	str	r2, [r3, #36]	; 0x24
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	2253      	movs	r2, #83	; 0x53
 80115da:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80115dc:	68f8      	ldr	r0, [r7, #12]
 80115de:	f000 f899 	bl	8011714 <RTC_EnterInitMode>
 80115e2:	4603      	mov	r3, r0
 80115e4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80115e6:	7cfb      	ldrb	r3, [r7, #19]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d10a      	bne.n	8011602 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	681a      	ldr	r2, [r3, #0]
 80115f0:	6979      	ldr	r1, [r7, #20]
 80115f2:	4b0e      	ldr	r3, [pc, #56]	; (801162c <HAL_RTC_SetDate+0x10c>)
 80115f4:	400b      	ands	r3, r1
 80115f6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80115f8:	68f8      	ldr	r0, [r7, #12]
 80115fa:	f000 f8bf 	bl	801177c <RTC_ExitInitMode>
 80115fe:	4603      	mov	r3, r0
 8011600:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	22ff      	movs	r2, #255	; 0xff
 8011608:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801160a:	7cfb      	ldrb	r3, [r7, #19]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d103      	bne.n	8011618 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2201      	movs	r2, #1
 8011614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2200      	movs	r2, #0
 801161c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011620:	7cfb      	ldrb	r3, [r7, #19]


}
 8011622:	4618      	mov	r0, r3
 8011624:	371c      	adds	r7, #28
 8011626:	46bd      	mov	sp, r7
 8011628:	bd90      	pop	{r4, r7, pc}
 801162a:	bf00      	nop
 801162c:	00ffff3f 	.word	0x00ffff3f

08011630 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b086      	sub	sp, #24
 8011634:	af00      	add	r7, sp, #0
 8011636:	60f8      	str	r0, [r7, #12]
 8011638:	60b9      	str	r1, [r7, #8]
 801163a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	685a      	ldr	r2, [r3, #4]
 8011642:	4b21      	ldr	r3, [pc, #132]	; (80116c8 <HAL_RTC_GetDate+0x98>)
 8011644:	4013      	ands	r3, r2
 8011646:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	0c1b      	lsrs	r3, r3, #16
 801164c:	b2da      	uxtb	r2, r3
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	0a1b      	lsrs	r3, r3, #8
 8011656:	b2db      	uxtb	r3, r3
 8011658:	f003 031f 	and.w	r3, r3, #31
 801165c:	b2da      	uxtb	r2, r3
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	b2db      	uxtb	r3, r3
 8011666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801166a:	b2da      	uxtb	r2, r3
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	0b5b      	lsrs	r3, r3, #13
 8011674:	b2db      	uxtb	r3, r3
 8011676:	f003 0307 	and.w	r3, r3, #7
 801167a:	b2da      	uxtb	r2, r3
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d11a      	bne.n	80116bc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	78db      	ldrb	r3, [r3, #3]
 801168a:	4618      	mov	r0, r3
 801168c:	f000 f8d4 	bl	8011838 <RTC_Bcd2ToByte>
 8011690:	4603      	mov	r3, r0
 8011692:	461a      	mov	r2, r3
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	785b      	ldrb	r3, [r3, #1]
 801169c:	4618      	mov	r0, r3
 801169e:	f000 f8cb 	bl	8011838 <RTC_Bcd2ToByte>
 80116a2:	4603      	mov	r3, r0
 80116a4:	461a      	mov	r2, r3
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	789b      	ldrb	r3, [r3, #2]
 80116ae:	4618      	mov	r0, r3
 80116b0:	f000 f8c2 	bl	8011838 <RTC_Bcd2ToByte>
 80116b4:	4603      	mov	r3, r0
 80116b6:	461a      	mov	r2, r3
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80116bc:	2300      	movs	r3, #0
}
 80116be:	4618      	mov	r0, r3
 80116c0:	3718      	adds	r7, #24
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}
 80116c6:	bf00      	nop
 80116c8:	00ffff3f 	.word	0x00ffff3f

080116cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b084      	sub	sp, #16
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	4a0d      	ldr	r2, [pc, #52]	; (8011710 <HAL_RTC_WaitForSynchro+0x44>)
 80116da:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80116dc:	f7f3 fff2 	bl	80056c4 <HAL_GetTick>
 80116e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80116e2:	e009      	b.n	80116f8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80116e4:	f7f3 ffee 	bl	80056c4 <HAL_GetTick>
 80116e8:	4602      	mov	r2, r0
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	1ad3      	subs	r3, r2, r3
 80116ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80116f2:	d901      	bls.n	80116f8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80116f4:	2303      	movs	r3, #3
 80116f6:	e007      	b.n	8011708 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	f003 0320 	and.w	r3, r3, #32
 8011702:	2b00      	cmp	r3, #0
 8011704:	d0ee      	beq.n	80116e4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8011706:	2300      	movs	r3, #0
}
 8011708:	4618      	mov	r0, r3
 801170a:	3710      	adds	r7, #16
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	0003ff5f 	.word	0x0003ff5f

08011714 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801171c:	2300      	movs	r3, #0
 801171e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801172a:	2b00      	cmp	r3, #0
 801172c:	d120      	bne.n	8011770 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011736:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011738:	f7f3 ffc4 	bl	80056c4 <HAL_GetTick>
 801173c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801173e:	e00d      	b.n	801175c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011740:	f7f3 ffc0 	bl	80056c4 <HAL_GetTick>
 8011744:	4602      	mov	r2, r0
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	1ad3      	subs	r3, r2, r3
 801174a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801174e:	d905      	bls.n	801175c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011750:	2303      	movs	r3, #3
 8011752:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2203      	movs	r2, #3
 8011758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	68db      	ldr	r3, [r3, #12]
 8011762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011766:	2b00      	cmp	r3, #0
 8011768:	d102      	bne.n	8011770 <RTC_EnterInitMode+0x5c>
 801176a:	7bfb      	ldrb	r3, [r7, #15]
 801176c:	2b03      	cmp	r3, #3
 801176e:	d1e7      	bne.n	8011740 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011770:	7bfb      	ldrb	r3, [r7, #15]
}
 8011772:	4618      	mov	r0, r3
 8011774:	3710      	adds	r7, #16
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
	...

0801177c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b084      	sub	sp, #16
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011784:	2300      	movs	r3, #0
 8011786:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011788:	4b1a      	ldr	r3, [pc, #104]	; (80117f4 <RTC_ExitInitMode+0x78>)
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	4a19      	ldr	r2, [pc, #100]	; (80117f4 <RTC_ExitInitMode+0x78>)
 801178e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011792:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011794:	4b17      	ldr	r3, [pc, #92]	; (80117f4 <RTC_ExitInitMode+0x78>)
 8011796:	689b      	ldr	r3, [r3, #8]
 8011798:	f003 0320 	and.w	r3, r3, #32
 801179c:	2b00      	cmp	r3, #0
 801179e:	d10c      	bne.n	80117ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f7ff ff93 	bl	80116cc <HAL_RTC_WaitForSynchro>
 80117a6:	4603      	mov	r3, r0
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d01e      	beq.n	80117ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2203      	movs	r2, #3
 80117b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80117b4:	2303      	movs	r3, #3
 80117b6:	73fb      	strb	r3, [r7, #15]
 80117b8:	e017      	b.n	80117ea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80117ba:	4b0e      	ldr	r3, [pc, #56]	; (80117f4 <RTC_ExitInitMode+0x78>)
 80117bc:	689b      	ldr	r3, [r3, #8]
 80117be:	4a0d      	ldr	r2, [pc, #52]	; (80117f4 <RTC_ExitInitMode+0x78>)
 80117c0:	f023 0320 	bic.w	r3, r3, #32
 80117c4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f7ff ff80 	bl	80116cc <HAL_RTC_WaitForSynchro>
 80117cc:	4603      	mov	r3, r0
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d005      	beq.n	80117de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2203      	movs	r2, #3
 80117d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80117da:	2303      	movs	r3, #3
 80117dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80117de:	4b05      	ldr	r3, [pc, #20]	; (80117f4 <RTC_ExitInitMode+0x78>)
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	4a04      	ldr	r2, [pc, #16]	; (80117f4 <RTC_ExitInitMode+0x78>)
 80117e4:	f043 0320 	orr.w	r3, r3, #32
 80117e8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80117ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3710      	adds	r7, #16
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	58004000 	.word	0x58004000

080117f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80117f8:	b480      	push	{r7}
 80117fa:	b085      	sub	sp, #20
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	4603      	mov	r3, r0
 8011800:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011802:	2300      	movs	r3, #0
 8011804:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8011806:	79fb      	ldrb	r3, [r7, #7]
 8011808:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 801180a:	e005      	b.n	8011818 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	3301      	adds	r3, #1
 8011810:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8011812:	7afb      	ldrb	r3, [r7, #11]
 8011814:	3b0a      	subs	r3, #10
 8011816:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011818:	7afb      	ldrb	r3, [r7, #11]
 801181a:	2b09      	cmp	r3, #9
 801181c:	d8f6      	bhi.n	801180c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	b2db      	uxtb	r3, r3
 8011822:	011b      	lsls	r3, r3, #4
 8011824:	b2da      	uxtb	r2, r3
 8011826:	7afb      	ldrb	r3, [r7, #11]
 8011828:	4313      	orrs	r3, r2
 801182a:	b2db      	uxtb	r3, r3
}
 801182c:	4618      	mov	r0, r3
 801182e:	3714      	adds	r7, #20
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011838:	b480      	push	{r7}
 801183a:	b085      	sub	sp, #20
 801183c:	af00      	add	r7, sp, #0
 801183e:	4603      	mov	r3, r0
 8011840:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011842:	79fb      	ldrb	r3, [r7, #7]
 8011844:	091b      	lsrs	r3, r3, #4
 8011846:	b2db      	uxtb	r3, r3
 8011848:	461a      	mov	r2, r3
 801184a:	0092      	lsls	r2, r2, #2
 801184c:	4413      	add	r3, r2
 801184e:	005b      	lsls	r3, r3, #1
 8011850:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011852:	79fb      	ldrb	r3, [r7, #7]
 8011854:	f003 030f 	and.w	r3, r3, #15
 8011858:	b2da      	uxtb	r2, r3
 801185a:	7bfb      	ldrb	r3, [r7, #15]
 801185c:	4413      	add	r3, r2
 801185e:	b2db      	uxtb	r3, r3
}
 8011860:	4618      	mov	r0, r3
 8011862:	3714      	adds	r7, #20
 8011864:	46bd      	mov	sp, r7
 8011866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186a:	4770      	bx	lr

0801186c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d101      	bne.n	801187e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801187a:	2301      	movs	r3, #1
 801187c:	e10f      	b.n	8011a9e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2200      	movs	r2, #0
 8011882:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	4a87      	ldr	r2, [pc, #540]	; (8011aa8 <HAL_SPI_Init+0x23c>)
 801188a:	4293      	cmp	r3, r2
 801188c:	d00f      	beq.n	80118ae <HAL_SPI_Init+0x42>
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	4a86      	ldr	r2, [pc, #536]	; (8011aac <HAL_SPI_Init+0x240>)
 8011894:	4293      	cmp	r3, r2
 8011896:	d00a      	beq.n	80118ae <HAL_SPI_Init+0x42>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4a84      	ldr	r2, [pc, #528]	; (8011ab0 <HAL_SPI_Init+0x244>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d005      	beq.n	80118ae <HAL_SPI_Init+0x42>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	2b0f      	cmp	r3, #15
 80118a8:	d901      	bls.n	80118ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80118aa:	2301      	movs	r3, #1
 80118ac:	e0f7      	b.n	8011a9e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f000 fd60 	bl	8012374 <SPI_GetPacketSize>
 80118b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4a7b      	ldr	r2, [pc, #492]	; (8011aa8 <HAL_SPI_Init+0x23c>)
 80118bc:	4293      	cmp	r3, r2
 80118be:	d00c      	beq.n	80118da <HAL_SPI_Init+0x6e>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	4a79      	ldr	r2, [pc, #484]	; (8011aac <HAL_SPI_Init+0x240>)
 80118c6:	4293      	cmp	r3, r2
 80118c8:	d007      	beq.n	80118da <HAL_SPI_Init+0x6e>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	4a78      	ldr	r2, [pc, #480]	; (8011ab0 <HAL_SPI_Init+0x244>)
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d002      	beq.n	80118da <HAL_SPI_Init+0x6e>
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	2b08      	cmp	r3, #8
 80118d8:	d811      	bhi.n	80118fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80118de:	4a72      	ldr	r2, [pc, #456]	; (8011aa8 <HAL_SPI_Init+0x23c>)
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d009      	beq.n	80118f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4a70      	ldr	r2, [pc, #448]	; (8011aac <HAL_SPI_Init+0x240>)
 80118ea:	4293      	cmp	r3, r2
 80118ec:	d004      	beq.n	80118f8 <HAL_SPI_Init+0x8c>
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	4a6f      	ldr	r2, [pc, #444]	; (8011ab0 <HAL_SPI_Init+0x244>)
 80118f4:	4293      	cmp	r3, r2
 80118f6:	d104      	bne.n	8011902 <HAL_SPI_Init+0x96>
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	2b10      	cmp	r3, #16
 80118fc:	d901      	bls.n	8011902 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80118fe:	2301      	movs	r3, #1
 8011900:	e0cd      	b.n	8011a9e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011908:	b2db      	uxtb	r3, r3
 801190a:	2b00      	cmp	r3, #0
 801190c:	d106      	bne.n	801191c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2200      	movs	r2, #0
 8011912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f7f2 fbb0 	bl	800407c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2202      	movs	r2, #2
 8011920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f022 0201 	bic.w	r2, r2, #1
 8011932:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	689b      	ldr	r3, [r3, #8]
 801193a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801193e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	699b      	ldr	r3, [r3, #24]
 8011944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011948:	d119      	bne.n	801197e <HAL_SPI_Init+0x112>
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011952:	d103      	bne.n	801195c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011958:	2b00      	cmp	r3, #0
 801195a:	d008      	beq.n	801196e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011960:	2b00      	cmp	r3, #0
 8011962:	d10c      	bne.n	801197e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801196c:	d107      	bne.n	801197e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	681a      	ldr	r2, [r3, #0]
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801197c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011986:	2b00      	cmp	r3, #0
 8011988:	d00f      	beq.n	80119aa <HAL_SPI_Init+0x13e>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	68db      	ldr	r3, [r3, #12]
 801198e:	2b06      	cmp	r3, #6
 8011990:	d90b      	bls.n	80119aa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	430a      	orrs	r2, r1
 80119a6:	601a      	str	r2, [r3, #0]
 80119a8:	e007      	b.n	80119ba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80119b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	69da      	ldr	r2, [r3, #28]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119c2:	431a      	orrs	r2, r3
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	431a      	orrs	r2, r3
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119cc:	ea42 0103 	orr.w	r1, r2, r3
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	68da      	ldr	r2, [r3, #12]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	430a      	orrs	r2, r1
 80119da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e4:	431a      	orrs	r2, r3
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119ea:	431a      	orrs	r2, r3
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	699b      	ldr	r3, [r3, #24]
 80119f0:	431a      	orrs	r2, r3
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	691b      	ldr	r3, [r3, #16]
 80119f6:	431a      	orrs	r2, r3
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	695b      	ldr	r3, [r3, #20]
 80119fc:	431a      	orrs	r2, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6a1b      	ldr	r3, [r3, #32]
 8011a02:	431a      	orrs	r2, r3
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	431a      	orrs	r2, r3
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a0e:	431a      	orrs	r2, r3
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	689b      	ldr	r3, [r3, #8]
 8011a14:	431a      	orrs	r2, r3
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a1a:	ea42 0103 	orr.w	r1, r2, r3
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	430a      	orrs	r2, r1
 8011a28:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d113      	bne.n	8011a5a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	689b      	ldr	r3, [r3, #8]
 8011a38:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011a44:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011a58:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f022 0201 	bic.w	r2, r2, #1
 8011a68:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d00a      	beq.n	8011a8c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	68db      	ldr	r3, [r3, #12]
 8011a7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	430a      	orrs	r2, r1
 8011a8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2201      	movs	r2, #1
 8011a98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011a9c:	2300      	movs	r3, #0
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3710      	adds	r7, #16
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	40013000 	.word	0x40013000
 8011aac:	40003800 	.word	0x40003800
 8011ab0:	40003c00 	.word	0x40003c00

08011ab4 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b084      	sub	sp, #16
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	60f8      	str	r0, [r7, #12]
 8011abc:	60b9      	str	r1, [r7, #8]
 8011abe:	4613      	mov	r3, r2
 8011ac0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011ac8:	b2db      	uxtb	r3, r3
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d005      	beq.n	8011ada <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8011ad6:	2302      	movs	r3, #2
 8011ad8:	e127      	b.n	8011d2a <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d002      	beq.n	8011ae6 <HAL_SPI_Receive_DMA+0x32>
 8011ae0:	88fb      	ldrh	r3, [r7, #6]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d105      	bne.n	8011af2 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011aee:	2301      	movs	r3, #1
 8011af0:	e11b      	b.n	8011d2a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011af8:	2b01      	cmp	r3, #1
 8011afa:	d101      	bne.n	8011b00 <HAL_SPI_Receive_DMA+0x4c>
 8011afc:	2302      	movs	r3, #2
 8011afe:	e114      	b.n	8011d2a <HAL_SPI_Receive_DMA+0x276>
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	2201      	movs	r2, #1
 8011b04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	2204      	movs	r2, #4
 8011b0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	2200      	movs	r2, #0
 8011b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	68ba      	ldr	r2, [r7, #8]
 8011b1c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	88fa      	ldrh	r2, [r7, #6]
 8011b22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	88fa      	ldrh	r2, [r7, #6]
 8011b2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2200      	movs	r2, #0
 8011b32:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	2200      	movs	r2, #0
 8011b38:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2200      	movs	r2, #0
 8011b46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	689b      	ldr	r3, [r3, #8]
 8011b4e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011b52:	d108      	bne.n	8011b66 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	681a      	ldr	r2, [r3, #0]
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011b62:	601a      	str	r2, [r3, #0]
 8011b64:	e009      	b.n	8011b7a <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	68db      	ldr	r3, [r3, #12]
 8011b6c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011b78:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	68db      	ldr	r3, [r3, #12]
 8011b7e:	2b0f      	cmp	r3, #15
 8011b80:	d905      	bls.n	8011b8e <HAL_SPI_Receive_DMA+0xda>
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b86:	699b      	ldr	r3, [r3, #24]
 8011b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b8c:	d10f      	bne.n	8011bae <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011b92:	2b07      	cmp	r3, #7
 8011b94:	d911      	bls.n	8011bba <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b9a:	699b      	ldr	r3, [r3, #24]
 8011b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ba0:	d00b      	beq.n	8011bba <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ba6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011bac:	d005      	beq.n	8011bba <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	e0b7      	b.n	8011d2a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	689a      	ldr	r2, [r3, #8]
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011bc8:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	2b07      	cmp	r3, #7
 8011bd0:	d820      	bhi.n	8011c14 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bd6:	699b      	ldr	r3, [r3, #24]
 8011bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011bdc:	d109      	bne.n	8011bf2 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	3301      	adds	r3, #1
 8011be8:	105b      	asrs	r3, r3, #1
 8011bea:	b29a      	uxth	r2, r3
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bf6:	699b      	ldr	r3, [r3, #24]
 8011bf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011bfc:	d11e      	bne.n	8011c3c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	3303      	adds	r3, #3
 8011c08:	109b      	asrs	r3, r3, #2
 8011c0a:	b29a      	uxth	r2, r3
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011c12:	e013      	b.n	8011c3c <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	2b0f      	cmp	r3, #15
 8011c1a:	d80f      	bhi.n	8011c3c <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c20:	699b      	ldr	r3, [r3, #24]
 8011c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c26:	d109      	bne.n	8011c3c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011c2e:	b29b      	uxth	r3, r3
 8011c30:	3301      	adds	r3, #1
 8011c32:	105b      	asrs	r3, r3, #1
 8011c34:	b29a      	uxth	r2, r3
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c40:	4a3c      	ldr	r2, [pc, #240]	; (8011d34 <HAL_SPI_Receive_DMA+0x280>)
 8011c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c48:	4a3b      	ldr	r2, [pc, #236]	; (8011d38 <HAL_SPI_Receive_DMA+0x284>)
 8011c4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c50:	4a3a      	ldr	r2, [pc, #232]	; (8011d3c <HAL_SPI_Receive_DMA+0x288>)
 8011c52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c58:	2200      	movs	r2, #0
 8011c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	3330      	adds	r3, #48	; 0x30
 8011c66:	4619      	mov	r1, r3
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c6c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011c74:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011c76:	f7f6 fa21 	bl	80080bc <HAL_DMA_Start_IT>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d011      	beq.n	8011ca4 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c86:	f043 0210 	orr.w	r2, r3, #16
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	2201      	movs	r2, #1
 8011c94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	e042      	b.n	8011d2a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ca8:	69db      	ldr	r3, [r3, #28]
 8011caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011cae:	d108      	bne.n	8011cc2 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	6859      	ldr	r1, [r3, #4]
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	4b21      	ldr	r3, [pc, #132]	; (8011d40 <HAL_SPI_Receive_DMA+0x28c>)
 8011cbc:	400b      	ands	r3, r1
 8011cbe:	6053      	str	r3, [r2, #4]
 8011cc0:	e009      	b.n	8011cd6 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	685a      	ldr	r2, [r3, #4]
 8011cc8:	4b1d      	ldr	r3, [pc, #116]	; (8011d40 <HAL_SPI_Receive_DMA+0x28c>)
 8011cca:	4013      	ands	r3, r2
 8011ccc:	88f9      	ldrh	r1, [r7, #6]
 8011cce:	68fa      	ldr	r2, [r7, #12]
 8011cd0:	6812      	ldr	r2, [r2, #0]
 8011cd2:	430b      	orrs	r3, r1
 8011cd4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	689a      	ldr	r2, [r3, #8]
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011ce4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	691a      	ldr	r2, [r3, #16]
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8011cf4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	681a      	ldr	r2, [r3, #0]
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	f042 0201 	orr.w	r2, r2, #1
 8011d04:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011d0e:	d107      	bne.n	8011d20 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	681a      	ldr	r2, [r3, #0]
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011d1e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2200      	movs	r2, #0
 8011d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011d28:	2300      	movs	r3, #0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3710      	adds	r7, #16
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}
 8011d32:	bf00      	nop
 8011d34:	0801219f 	.word	0x0801219f
 8011d38:	08012159 	.word	0x08012159
 8011d3c:	080121bb 	.word	0x080121bb
 8011d40:	ffff0000 	.word	0xffff0000

08011d44 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b08a      	sub	sp, #40	; 0x28
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	691b      	ldr	r3, [r3, #16]
 8011d52:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	695b      	ldr	r3, [r3, #20]
 8011d5a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8011d5c:	6a3a      	ldr	r2, [r7, #32]
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	4013      	ands	r3, r2
 8011d62:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	689b      	ldr	r3, [r3, #8]
 8011d6a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011d76:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	3330      	adds	r3, #48	; 0x30
 8011d7e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011d80:	69fb      	ldr	r3, [r7, #28]
 8011d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d010      	beq.n	8011dac <HAL_SPI_IRQHandler+0x68>
 8011d8a:	6a3b      	ldr	r3, [r7, #32]
 8011d8c:	f003 0308 	and.w	r3, r3, #8
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d00b      	beq.n	8011dac <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	699a      	ldr	r2, [r3, #24]
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011da2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f000 f9cd 	bl	8012144 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8011daa:	e192      	b.n	80120d2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011dac:	69bb      	ldr	r3, [r7, #24]
 8011dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d113      	bne.n	8011dde <HAL_SPI_IRQHandler+0x9a>
 8011db6:	69bb      	ldr	r3, [r7, #24]
 8011db8:	f003 0320 	and.w	r3, r3, #32
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d10e      	bne.n	8011dde <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011dc0:	69bb      	ldr	r3, [r7, #24]
 8011dc2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d009      	beq.n	8011dde <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	4798      	blx	r3
    handled = 1UL;
 8011dda:	2301      	movs	r3, #1
 8011ddc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011dde:	69bb      	ldr	r3, [r7, #24]
 8011de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d10f      	bne.n	8011e08 <HAL_SPI_IRQHandler+0xc4>
 8011de8:	69bb      	ldr	r3, [r7, #24]
 8011dea:	f003 0301 	and.w	r3, r3, #1
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d00a      	beq.n	8011e08 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d105      	bne.n	8011e08 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	4798      	blx	r3
    handled = 1UL;
 8011e04:	2301      	movs	r3, #1
 8011e06:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011e08:	69bb      	ldr	r3, [r7, #24]
 8011e0a:	f003 0320 	and.w	r3, r3, #32
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d10f      	bne.n	8011e32 <HAL_SPI_IRQHandler+0xee>
 8011e12:	69bb      	ldr	r3, [r7, #24]
 8011e14:	f003 0302 	and.w	r3, r3, #2
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00a      	beq.n	8011e32 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011e1c:	69bb      	ldr	r3, [r7, #24]
 8011e1e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d105      	bne.n	8011e32 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	4798      	blx	r3
    handled = 1UL;
 8011e2e:	2301      	movs	r3, #1
 8011e30:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8011e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	f040 8147 	bne.w	80120c8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	f003 0308 	and.w	r3, r3, #8
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	f000 808b 	beq.w	8011f5c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	699a      	ldr	r2, [r3, #24]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	f042 0208 	orr.w	r2, r2, #8
 8011e54:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	699a      	ldr	r2, [r3, #24]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	f042 0210 	orr.w	r2, r2, #16
 8011e64:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	699a      	ldr	r2, [r3, #24]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011e74:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	691a      	ldr	r2, [r3, #16]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f022 0208 	bic.w	r2, r2, #8
 8011e84:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	689b      	ldr	r3, [r3, #8]
 8011e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d13d      	bne.n	8011f10 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011e94:	e036      	b.n	8011f04 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	68db      	ldr	r3, [r3, #12]
 8011e9a:	2b0f      	cmp	r3, #15
 8011e9c:	d90b      	bls.n	8011eb6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681a      	ldr	r2, [r3, #0]
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ea6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011ea8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011eae:	1d1a      	adds	r2, r3, #4
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	665a      	str	r2, [r3, #100]	; 0x64
 8011eb4:	e01d      	b.n	8011ef2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	68db      	ldr	r3, [r3, #12]
 8011eba:	2b07      	cmp	r3, #7
 8011ebc:	d90b      	bls.n	8011ed6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ec2:	68fa      	ldr	r2, [r7, #12]
 8011ec4:	8812      	ldrh	r2, [r2, #0]
 8011ec6:	b292      	uxth	r2, r2
 8011ec8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ece:	1c9a      	adds	r2, r3, #2
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	665a      	str	r2, [r3, #100]	; 0x64
 8011ed4:	e00d      	b.n	8011ef2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ee2:	7812      	ldrb	r2, [r2, #0]
 8011ee4:	b2d2      	uxtb	r2, r2
 8011ee6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011eec:	1c5a      	adds	r2, r3, #1
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	3b01      	subs	r3, #1
 8011efc:	b29a      	uxth	r2, r3
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d1c2      	bne.n	8011e96 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f000 f98f 	bl	8012234 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2201      	movs	r2, #1
 8011f1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d003      	beq.n	8011f30 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f000 f901 	bl	8012130 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8011f2e:	e0d0      	b.n	80120d2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8011f30:	7cfb      	ldrb	r3, [r7, #19]
 8011f32:	2b05      	cmp	r3, #5
 8011f34:	d103      	bne.n	8011f3e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f000 f8e6 	bl	8012108 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011f3c:	e0c6      	b.n	80120cc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8011f3e:	7cfb      	ldrb	r3, [r7, #19]
 8011f40:	2b04      	cmp	r3, #4
 8011f42:	d103      	bne.n	8011f4c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f000 f8d5 	bl	80120f4 <HAL_SPI_RxCpltCallback>
    return;
 8011f4a:	e0bf      	b.n	80120cc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8011f4c:	7cfb      	ldrb	r3, [r7, #19]
 8011f4e:	2b03      	cmp	r3, #3
 8011f50:	f040 80bc 	bne.w	80120cc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f000 f8c3 	bl	80120e0 <HAL_SPI_TxCpltCallback>
    return;
 8011f5a:	e0b7      	b.n	80120cc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8011f5c:	69bb      	ldr	r3, [r7, #24]
 8011f5e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	f000 80b5 	beq.w	80120d2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011f68:	69bb      	ldr	r3, [r7, #24]
 8011f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d00f      	beq.n	8011f92 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f78:	f043 0204 	orr.w	r2, r3, #4
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	699a      	ldr	r2, [r3, #24]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f90:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011f92:	69bb      	ldr	r3, [r7, #24]
 8011f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d00f      	beq.n	8011fbc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011fa2:	f043 0201 	orr.w	r2, r3, #1
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	699a      	ldr	r2, [r3, #24]
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011fba:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8011fbc:	69bb      	ldr	r3, [r7, #24]
 8011fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d00f      	beq.n	8011fe6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011fcc:	f043 0208 	orr.w	r2, r3, #8
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	699a      	ldr	r2, [r3, #24]
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011fe4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8011fe6:	69bb      	ldr	r3, [r7, #24]
 8011fe8:	f003 0320 	and.w	r3, r3, #32
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d00f      	beq.n	8012010 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ff6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	699a      	ldr	r2, [r3, #24]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	f042 0220 	orr.w	r2, r2, #32
 801200e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012016:	2b00      	cmp	r3, #0
 8012018:	d05a      	beq.n	80120d0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	681a      	ldr	r2, [r3, #0]
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	f022 0201 	bic.w	r2, r2, #1
 8012028:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	6919      	ldr	r1, [r3, #16]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681a      	ldr	r2, [r3, #0]
 8012034:	4b28      	ldr	r3, [pc, #160]	; (80120d8 <HAL_SPI_IRQHandler+0x394>)
 8012036:	400b      	ands	r3, r1
 8012038:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012040:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012044:	d138      	bne.n	80120b8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	689a      	ldr	r2, [r3, #8]
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012054:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801205a:	2b00      	cmp	r3, #0
 801205c:	d013      	beq.n	8012086 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012062:	4a1e      	ldr	r2, [pc, #120]	; (80120dc <HAL_SPI_IRQHandler+0x398>)
 8012064:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801206a:	4618      	mov	r0, r3
 801206c:	f7f6 fdae 	bl	8008bcc <HAL_DMA_Abort_IT>
 8012070:	4603      	mov	r3, r0
 8012072:	2b00      	cmp	r3, #0
 8012074:	d007      	beq.n	8012086 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801207c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801208a:	2b00      	cmp	r3, #0
 801208c:	d020      	beq.n	80120d0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012092:	4a12      	ldr	r2, [pc, #72]	; (80120dc <HAL_SPI_IRQHandler+0x398>)
 8012094:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801209a:	4618      	mov	r0, r3
 801209c:	f7f6 fd96 	bl	8008bcc <HAL_DMA_Abort_IT>
 80120a0:	4603      	mov	r3, r0
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d014      	beq.n	80120d0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80120b6:	e00b      	b.n	80120d0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2201      	movs	r2, #1
 80120bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f000 f835 	bl	8012130 <HAL_SPI_ErrorCallback>
    return;
 80120c6:	e003      	b.n	80120d0 <HAL_SPI_IRQHandler+0x38c>
    return;
 80120c8:	bf00      	nop
 80120ca:	e002      	b.n	80120d2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80120cc:	bf00      	nop
 80120ce:	e000      	b.n	80120d2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80120d0:	bf00      	nop
  }
}
 80120d2:	3728      	adds	r7, #40	; 0x28
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	fffffc94 	.word	0xfffffc94
 80120dc:	08012201 	.word	0x08012201

080120e0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80120e0:	b480      	push	{r7}
 80120e2:	b083      	sub	sp, #12
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80120e8:	bf00      	nop
 80120ea:	370c      	adds	r7, #12
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr

080120f4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80120fc:	bf00      	nop
 80120fe:	370c      	adds	r7, #12
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	4770      	bx	lr

08012108 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012110:	bf00      	nop
 8012112:	370c      	adds	r7, #12
 8012114:	46bd      	mov	sp, r7
 8012116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211a:	4770      	bx	lr

0801211c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801211c:	b480      	push	{r7}
 801211e:	b083      	sub	sp, #12
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012124:	bf00      	nop
 8012126:	370c      	adds	r7, #12
 8012128:	46bd      	mov	sp, r7
 801212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212e:	4770      	bx	lr

08012130 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012130:	b480      	push	{r7}
 8012132:	b083      	sub	sp, #12
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012138:	bf00      	nop
 801213a:	370c      	adds	r7, #12
 801213c:	46bd      	mov	sp, r7
 801213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012142:	4770      	bx	lr

08012144 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012144:	b480      	push	{r7}
 8012146:	b083      	sub	sp, #12
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801214c:	bf00      	nop
 801214e:	370c      	adds	r7, #12
 8012150:	46bd      	mov	sp, r7
 8012152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012156:	4770      	bx	lr

08012158 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012164:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801216c:	b2db      	uxtb	r3, r3
 801216e:	2b07      	cmp	r3, #7
 8012170:	d011      	beq.n	8012196 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012176:	69db      	ldr	r3, [r3, #28]
 8012178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801217c:	d103      	bne.n	8012186 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 801217e:	68f8      	ldr	r0, [r7, #12]
 8012180:	f7ff ffb8 	bl	80120f4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012184:	e007      	b.n	8012196 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	691a      	ldr	r2, [r3, #16]
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	f042 0208 	orr.w	r2, r2, #8
 8012194:	611a      	str	r2, [r3, #16]
}
 8012196:	bf00      	nop
 8012198:	3710      	adds	r7, #16
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}

0801219e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801219e:	b580      	push	{r7, lr}
 80121a0:	b084      	sub	sp, #16
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121aa:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80121ac:	68f8      	ldr	r0, [r7, #12]
 80121ae:	f7ff ffb5 	bl	801211c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80121b2:	bf00      	nop
 80121b4:	3710      	adds	r7, #16
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}

080121ba <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80121ba:	b580      	push	{r7, lr}
 80121bc:	b084      	sub	sp, #16
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121c6:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f7f7 fe7d 	bl	8009ec8 <HAL_DMA_GetError>
 80121ce:	4603      	mov	r3, r0
 80121d0:	2b02      	cmp	r3, #2
 80121d2:	d011      	beq.n	80121f8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80121d4:	68f8      	ldr	r0, [r7, #12]
 80121d6:	f000 f82d 	bl	8012234 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121e0:	f043 0210 	orr.w	r2, r3, #16
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	2201      	movs	r2, #1
 80121ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80121f2:	68f8      	ldr	r0, [r7, #12]
 80121f4:	f7ff ff9c 	bl	8012130 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80121f8:	bf00      	nop
 80121fa:	3710      	adds	r7, #16
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}

08012200 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801220c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	2200      	movs	r2, #0
 8012212:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	2200      	movs	r2, #0
 801221a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	2201      	movs	r2, #1
 8012222:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012226:	68f8      	ldr	r0, [r7, #12]
 8012228:	f7ff ff82 	bl	8012130 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801222c:	bf00      	nop
 801222e:	3710      	adds	r7, #16
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}

08012234 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012234:	b480      	push	{r7}
 8012236:	b085      	sub	sp, #20
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	695b      	ldr	r3, [r3, #20]
 8012242:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	699a      	ldr	r2, [r3, #24]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	f042 0208 	orr.w	r2, r2, #8
 8012252:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	699a      	ldr	r2, [r3, #24]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	f042 0210 	orr.w	r2, r2, #16
 8012262:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	681a      	ldr	r2, [r3, #0]
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	f022 0201 	bic.w	r2, r2, #1
 8012272:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	6919      	ldr	r1, [r3, #16]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	4b3c      	ldr	r3, [pc, #240]	; (8012370 <SPI_CloseTransfer+0x13c>)
 8012280:	400b      	ands	r3, r1
 8012282:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	689a      	ldr	r2, [r3, #8]
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012292:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801229a:	b2db      	uxtb	r3, r3
 801229c:	2b04      	cmp	r3, #4
 801229e:	d014      	beq.n	80122ca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	f003 0320 	and.w	r3, r3, #32
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d00f      	beq.n	80122ca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	699a      	ldr	r2, [r3, #24]
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f042 0220 	orr.w	r2, r2, #32
 80122c8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80122d0:	b2db      	uxtb	r3, r3
 80122d2:	2b03      	cmp	r3, #3
 80122d4:	d014      	beq.n	8012300 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d00f      	beq.n	8012300 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122e6:	f043 0204 	orr.w	r2, r3, #4
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	699a      	ldr	r2, [r3, #24]
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80122fe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012306:	2b00      	cmp	r3, #0
 8012308:	d00f      	beq.n	801232a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012310:	f043 0201 	orr.w	r2, r3, #1
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	699a      	ldr	r2, [r3, #24]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012328:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012330:	2b00      	cmp	r3, #0
 8012332:	d00f      	beq.n	8012354 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801233a:	f043 0208 	orr.w	r2, r3, #8
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	699a      	ldr	r2, [r3, #24]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012352:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2200      	movs	r2, #0
 8012358:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2200      	movs	r2, #0
 8012360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8012364:	bf00      	nop
 8012366:	3714      	adds	r7, #20
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr
 8012370:	fffffc90 	.word	0xfffffc90

08012374 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012374:	b480      	push	{r7}
 8012376:	b085      	sub	sp, #20
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012380:	095b      	lsrs	r3, r3, #5
 8012382:	3301      	adds	r3, #1
 8012384:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	68db      	ldr	r3, [r3, #12]
 801238a:	3301      	adds	r3, #1
 801238c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	3307      	adds	r3, #7
 8012392:	08db      	lsrs	r3, r3, #3
 8012394:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	68fa      	ldr	r2, [r7, #12]
 801239a:	fb02 f303 	mul.w	r3, r2, r3
}
 801239e:	4618      	mov	r0, r3
 80123a0:	3714      	adds	r7, #20
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr

080123aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b082      	sub	sp, #8
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d101      	bne.n	80123bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80123b8:	2301      	movs	r3, #1
 80123ba:	e049      	b.n	8012450 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80123c2:	b2db      	uxtb	r3, r3
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d106      	bne.n	80123d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2200      	movs	r2, #0
 80123cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f7f2 fb5f 	bl	8004a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2202      	movs	r2, #2
 80123da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	3304      	adds	r3, #4
 80123e6:	4619      	mov	r1, r3
 80123e8:	4610      	mov	r0, r2
 80123ea:	f000 fe7d 	bl	80130e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2201      	movs	r2, #1
 80123f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2201      	movs	r2, #1
 80123fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2201      	movs	r2, #1
 8012402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2201      	movs	r2, #1
 801240a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2201      	movs	r2, #1
 8012412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2201      	movs	r2, #1
 801241a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2201      	movs	r2, #1
 8012422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2201      	movs	r2, #1
 801242a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2201      	movs	r2, #1
 8012432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2201      	movs	r2, #1
 801243a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2201      	movs	r2, #1
 8012442:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2201      	movs	r2, #1
 801244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801244e:	2300      	movs	r3, #0
}
 8012450:	4618      	mov	r0, r3
 8012452:	3708      	adds	r7, #8
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}

08012458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012458:	b480      	push	{r7}
 801245a:	b085      	sub	sp, #20
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012466:	b2db      	uxtb	r3, r3
 8012468:	2b01      	cmp	r3, #1
 801246a:	d001      	beq.n	8012470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801246c:	2301      	movs	r3, #1
 801246e:	e054      	b.n	801251a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2202      	movs	r2, #2
 8012474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	68da      	ldr	r2, [r3, #12]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	f042 0201 	orr.w	r2, r2, #1
 8012486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	4a26      	ldr	r2, [pc, #152]	; (8012528 <HAL_TIM_Base_Start_IT+0xd0>)
 801248e:	4293      	cmp	r3, r2
 8012490:	d022      	beq.n	80124d8 <HAL_TIM_Base_Start_IT+0x80>
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801249a:	d01d      	beq.n	80124d8 <HAL_TIM_Base_Start_IT+0x80>
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	4a22      	ldr	r2, [pc, #136]	; (801252c <HAL_TIM_Base_Start_IT+0xd4>)
 80124a2:	4293      	cmp	r3, r2
 80124a4:	d018      	beq.n	80124d8 <HAL_TIM_Base_Start_IT+0x80>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4a21      	ldr	r2, [pc, #132]	; (8012530 <HAL_TIM_Base_Start_IT+0xd8>)
 80124ac:	4293      	cmp	r3, r2
 80124ae:	d013      	beq.n	80124d8 <HAL_TIM_Base_Start_IT+0x80>
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	4a1f      	ldr	r2, [pc, #124]	; (8012534 <HAL_TIM_Base_Start_IT+0xdc>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d00e      	beq.n	80124d8 <HAL_TIM_Base_Start_IT+0x80>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	4a1e      	ldr	r2, [pc, #120]	; (8012538 <HAL_TIM_Base_Start_IT+0xe0>)
 80124c0:	4293      	cmp	r3, r2
 80124c2:	d009      	beq.n	80124d8 <HAL_TIM_Base_Start_IT+0x80>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	4a1c      	ldr	r2, [pc, #112]	; (801253c <HAL_TIM_Base_Start_IT+0xe4>)
 80124ca:	4293      	cmp	r3, r2
 80124cc:	d004      	beq.n	80124d8 <HAL_TIM_Base_Start_IT+0x80>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	4a1b      	ldr	r2, [pc, #108]	; (8012540 <HAL_TIM_Base_Start_IT+0xe8>)
 80124d4:	4293      	cmp	r3, r2
 80124d6:	d115      	bne.n	8012504 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	689a      	ldr	r2, [r3, #8]
 80124de:	4b19      	ldr	r3, [pc, #100]	; (8012544 <HAL_TIM_Base_Start_IT+0xec>)
 80124e0:	4013      	ands	r3, r2
 80124e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	2b06      	cmp	r3, #6
 80124e8:	d015      	beq.n	8012516 <HAL_TIM_Base_Start_IT+0xbe>
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80124f0:	d011      	beq.n	8012516 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	681a      	ldr	r2, [r3, #0]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	f042 0201 	orr.w	r2, r2, #1
 8012500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012502:	e008      	b.n	8012516 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f042 0201 	orr.w	r2, r2, #1
 8012512:	601a      	str	r2, [r3, #0]
 8012514:	e000      	b.n	8012518 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012516:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012518:	2300      	movs	r3, #0
}
 801251a:	4618      	mov	r0, r3
 801251c:	3714      	adds	r7, #20
 801251e:	46bd      	mov	sp, r7
 8012520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012524:	4770      	bx	lr
 8012526:	bf00      	nop
 8012528:	40010000 	.word	0x40010000
 801252c:	40000400 	.word	0x40000400
 8012530:	40000800 	.word	0x40000800
 8012534:	40000c00 	.word	0x40000c00
 8012538:	40010400 	.word	0x40010400
 801253c:	40001800 	.word	0x40001800
 8012540:	40014000 	.word	0x40014000
 8012544:	00010007 	.word	0x00010007

08012548 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012552:	2300      	movs	r3, #0
 8012554:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d109      	bne.n	8012570 <HAL_TIM_OC_Start_IT+0x28>
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012562:	b2db      	uxtb	r3, r3
 8012564:	2b01      	cmp	r3, #1
 8012566:	bf14      	ite	ne
 8012568:	2301      	movne	r3, #1
 801256a:	2300      	moveq	r3, #0
 801256c:	b2db      	uxtb	r3, r3
 801256e:	e03c      	b.n	80125ea <HAL_TIM_OC_Start_IT+0xa2>
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	2b04      	cmp	r3, #4
 8012574:	d109      	bne.n	801258a <HAL_TIM_OC_Start_IT+0x42>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801257c:	b2db      	uxtb	r3, r3
 801257e:	2b01      	cmp	r3, #1
 8012580:	bf14      	ite	ne
 8012582:	2301      	movne	r3, #1
 8012584:	2300      	moveq	r3, #0
 8012586:	b2db      	uxtb	r3, r3
 8012588:	e02f      	b.n	80125ea <HAL_TIM_OC_Start_IT+0xa2>
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	2b08      	cmp	r3, #8
 801258e:	d109      	bne.n	80125a4 <HAL_TIM_OC_Start_IT+0x5c>
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012596:	b2db      	uxtb	r3, r3
 8012598:	2b01      	cmp	r3, #1
 801259a:	bf14      	ite	ne
 801259c:	2301      	movne	r3, #1
 801259e:	2300      	moveq	r3, #0
 80125a0:	b2db      	uxtb	r3, r3
 80125a2:	e022      	b.n	80125ea <HAL_TIM_OC_Start_IT+0xa2>
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	2b0c      	cmp	r3, #12
 80125a8:	d109      	bne.n	80125be <HAL_TIM_OC_Start_IT+0x76>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	2b01      	cmp	r3, #1
 80125b4:	bf14      	ite	ne
 80125b6:	2301      	movne	r3, #1
 80125b8:	2300      	moveq	r3, #0
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	e015      	b.n	80125ea <HAL_TIM_OC_Start_IT+0xa2>
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	2b10      	cmp	r3, #16
 80125c2:	d109      	bne.n	80125d8 <HAL_TIM_OC_Start_IT+0x90>
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125ca:	b2db      	uxtb	r3, r3
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	bf14      	ite	ne
 80125d0:	2301      	movne	r3, #1
 80125d2:	2300      	moveq	r3, #0
 80125d4:	b2db      	uxtb	r3, r3
 80125d6:	e008      	b.n	80125ea <HAL_TIM_OC_Start_IT+0xa2>
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	2b01      	cmp	r3, #1
 80125e2:	bf14      	ite	ne
 80125e4:	2301      	movne	r3, #1
 80125e6:	2300      	moveq	r3, #0
 80125e8:	b2db      	uxtb	r3, r3
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d001      	beq.n	80125f2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80125ee:	2301      	movs	r3, #1
 80125f0:	e0ec      	b.n	80127cc <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d104      	bne.n	8012602 <HAL_TIM_OC_Start_IT+0xba>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2202      	movs	r2, #2
 80125fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012600:	e023      	b.n	801264a <HAL_TIM_OC_Start_IT+0x102>
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	2b04      	cmp	r3, #4
 8012606:	d104      	bne.n	8012612 <HAL_TIM_OC_Start_IT+0xca>
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2202      	movs	r2, #2
 801260c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012610:	e01b      	b.n	801264a <HAL_TIM_OC_Start_IT+0x102>
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	2b08      	cmp	r3, #8
 8012616:	d104      	bne.n	8012622 <HAL_TIM_OC_Start_IT+0xda>
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2202      	movs	r2, #2
 801261c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012620:	e013      	b.n	801264a <HAL_TIM_OC_Start_IT+0x102>
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	2b0c      	cmp	r3, #12
 8012626:	d104      	bne.n	8012632 <HAL_TIM_OC_Start_IT+0xea>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2202      	movs	r2, #2
 801262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012630:	e00b      	b.n	801264a <HAL_TIM_OC_Start_IT+0x102>
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	2b10      	cmp	r3, #16
 8012636:	d104      	bne.n	8012642 <HAL_TIM_OC_Start_IT+0xfa>
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2202      	movs	r2, #2
 801263c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012640:	e003      	b.n	801264a <HAL_TIM_OC_Start_IT+0x102>
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2202      	movs	r2, #2
 8012646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	2b0c      	cmp	r3, #12
 801264e:	d841      	bhi.n	80126d4 <HAL_TIM_OC_Start_IT+0x18c>
 8012650:	a201      	add	r2, pc, #4	; (adr r2, 8012658 <HAL_TIM_OC_Start_IT+0x110>)
 8012652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012656:	bf00      	nop
 8012658:	0801268d 	.word	0x0801268d
 801265c:	080126d5 	.word	0x080126d5
 8012660:	080126d5 	.word	0x080126d5
 8012664:	080126d5 	.word	0x080126d5
 8012668:	0801269f 	.word	0x0801269f
 801266c:	080126d5 	.word	0x080126d5
 8012670:	080126d5 	.word	0x080126d5
 8012674:	080126d5 	.word	0x080126d5
 8012678:	080126b1 	.word	0x080126b1
 801267c:	080126d5 	.word	0x080126d5
 8012680:	080126d5 	.word	0x080126d5
 8012684:	080126d5 	.word	0x080126d5
 8012688:	080126c3 	.word	0x080126c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	68da      	ldr	r2, [r3, #12]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	f042 0202 	orr.w	r2, r2, #2
 801269a:	60da      	str	r2, [r3, #12]
      break;
 801269c:	e01d      	b.n	80126da <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	68da      	ldr	r2, [r3, #12]
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	f042 0204 	orr.w	r2, r2, #4
 80126ac:	60da      	str	r2, [r3, #12]
      break;
 80126ae:	e014      	b.n	80126da <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	68da      	ldr	r2, [r3, #12]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	f042 0208 	orr.w	r2, r2, #8
 80126be:	60da      	str	r2, [r3, #12]
      break;
 80126c0:	e00b      	b.n	80126da <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	68da      	ldr	r2, [r3, #12]
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	f042 0210 	orr.w	r2, r2, #16
 80126d0:	60da      	str	r2, [r3, #12]
      break;
 80126d2:	e002      	b.n	80126da <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80126d4:	2301      	movs	r3, #1
 80126d6:	73fb      	strb	r3, [r7, #15]
      break;
 80126d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80126da:	7bfb      	ldrb	r3, [r7, #15]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d174      	bne.n	80127ca <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2201      	movs	r2, #1
 80126e6:	6839      	ldr	r1, [r7, #0]
 80126e8:	4618      	mov	r0, r3
 80126ea:	f001 f917 	bl	801391c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	4a38      	ldr	r2, [pc, #224]	; (80127d4 <HAL_TIM_OC_Start_IT+0x28c>)
 80126f4:	4293      	cmp	r3, r2
 80126f6:	d013      	beq.n	8012720 <HAL_TIM_OC_Start_IT+0x1d8>
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	4a36      	ldr	r2, [pc, #216]	; (80127d8 <HAL_TIM_OC_Start_IT+0x290>)
 80126fe:	4293      	cmp	r3, r2
 8012700:	d00e      	beq.n	8012720 <HAL_TIM_OC_Start_IT+0x1d8>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	4a35      	ldr	r2, [pc, #212]	; (80127dc <HAL_TIM_OC_Start_IT+0x294>)
 8012708:	4293      	cmp	r3, r2
 801270a:	d009      	beq.n	8012720 <HAL_TIM_OC_Start_IT+0x1d8>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4a33      	ldr	r2, [pc, #204]	; (80127e0 <HAL_TIM_OC_Start_IT+0x298>)
 8012712:	4293      	cmp	r3, r2
 8012714:	d004      	beq.n	8012720 <HAL_TIM_OC_Start_IT+0x1d8>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	4a32      	ldr	r2, [pc, #200]	; (80127e4 <HAL_TIM_OC_Start_IT+0x29c>)
 801271c:	4293      	cmp	r3, r2
 801271e:	d101      	bne.n	8012724 <HAL_TIM_OC_Start_IT+0x1dc>
 8012720:	2301      	movs	r3, #1
 8012722:	e000      	b.n	8012726 <HAL_TIM_OC_Start_IT+0x1de>
 8012724:	2300      	movs	r3, #0
 8012726:	2b00      	cmp	r3, #0
 8012728:	d007      	beq.n	801273a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012738:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	4a25      	ldr	r2, [pc, #148]	; (80127d4 <HAL_TIM_OC_Start_IT+0x28c>)
 8012740:	4293      	cmp	r3, r2
 8012742:	d022      	beq.n	801278a <HAL_TIM_OC_Start_IT+0x242>
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801274c:	d01d      	beq.n	801278a <HAL_TIM_OC_Start_IT+0x242>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	4a25      	ldr	r2, [pc, #148]	; (80127e8 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012754:	4293      	cmp	r3, r2
 8012756:	d018      	beq.n	801278a <HAL_TIM_OC_Start_IT+0x242>
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	4a23      	ldr	r2, [pc, #140]	; (80127ec <HAL_TIM_OC_Start_IT+0x2a4>)
 801275e:	4293      	cmp	r3, r2
 8012760:	d013      	beq.n	801278a <HAL_TIM_OC_Start_IT+0x242>
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	4a22      	ldr	r2, [pc, #136]	; (80127f0 <HAL_TIM_OC_Start_IT+0x2a8>)
 8012768:	4293      	cmp	r3, r2
 801276a:	d00e      	beq.n	801278a <HAL_TIM_OC_Start_IT+0x242>
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	4a19      	ldr	r2, [pc, #100]	; (80127d8 <HAL_TIM_OC_Start_IT+0x290>)
 8012772:	4293      	cmp	r3, r2
 8012774:	d009      	beq.n	801278a <HAL_TIM_OC_Start_IT+0x242>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	4a1e      	ldr	r2, [pc, #120]	; (80127f4 <HAL_TIM_OC_Start_IT+0x2ac>)
 801277c:	4293      	cmp	r3, r2
 801277e:	d004      	beq.n	801278a <HAL_TIM_OC_Start_IT+0x242>
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	4a15      	ldr	r2, [pc, #84]	; (80127dc <HAL_TIM_OC_Start_IT+0x294>)
 8012786:	4293      	cmp	r3, r2
 8012788:	d115      	bne.n	80127b6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	689a      	ldr	r2, [r3, #8]
 8012790:	4b19      	ldr	r3, [pc, #100]	; (80127f8 <HAL_TIM_OC_Start_IT+0x2b0>)
 8012792:	4013      	ands	r3, r2
 8012794:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	2b06      	cmp	r3, #6
 801279a:	d015      	beq.n	80127c8 <HAL_TIM_OC_Start_IT+0x280>
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127a2:	d011      	beq.n	80127c8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	681a      	ldr	r2, [r3, #0]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	f042 0201 	orr.w	r2, r2, #1
 80127b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127b4:	e008      	b.n	80127c8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	681a      	ldr	r2, [r3, #0]
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	f042 0201 	orr.w	r2, r2, #1
 80127c4:	601a      	str	r2, [r3, #0]
 80127c6:	e000      	b.n	80127ca <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127c8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80127ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3710      	adds	r7, #16
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	40010000 	.word	0x40010000
 80127d8:	40010400 	.word	0x40010400
 80127dc:	40014000 	.word	0x40014000
 80127e0:	40014400 	.word	0x40014400
 80127e4:	40014800 	.word	0x40014800
 80127e8:	40000400 	.word	0x40000400
 80127ec:	40000800 	.word	0x40000800
 80127f0:	40000c00 	.word	0x40000c00
 80127f4:	40001800 	.word	0x40001800
 80127f8:	00010007 	.word	0x00010007

080127fc <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b084      	sub	sp, #16
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012806:	2300      	movs	r3, #0
 8012808:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	2b0c      	cmp	r3, #12
 801280e:	d841      	bhi.n	8012894 <HAL_TIM_OC_Stop_IT+0x98>
 8012810:	a201      	add	r2, pc, #4	; (adr r2, 8012818 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012816:	bf00      	nop
 8012818:	0801284d 	.word	0x0801284d
 801281c:	08012895 	.word	0x08012895
 8012820:	08012895 	.word	0x08012895
 8012824:	08012895 	.word	0x08012895
 8012828:	0801285f 	.word	0x0801285f
 801282c:	08012895 	.word	0x08012895
 8012830:	08012895 	.word	0x08012895
 8012834:	08012895 	.word	0x08012895
 8012838:	08012871 	.word	0x08012871
 801283c:	08012895 	.word	0x08012895
 8012840:	08012895 	.word	0x08012895
 8012844:	08012895 	.word	0x08012895
 8012848:	08012883 	.word	0x08012883
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	68da      	ldr	r2, [r3, #12]
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	f022 0202 	bic.w	r2, r2, #2
 801285a:	60da      	str	r2, [r3, #12]
      break;
 801285c:	e01d      	b.n	801289a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	68da      	ldr	r2, [r3, #12]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	f022 0204 	bic.w	r2, r2, #4
 801286c:	60da      	str	r2, [r3, #12]
      break;
 801286e:	e014      	b.n	801289a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	68da      	ldr	r2, [r3, #12]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	f022 0208 	bic.w	r2, r2, #8
 801287e:	60da      	str	r2, [r3, #12]
      break;
 8012880:	e00b      	b.n	801289a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	68da      	ldr	r2, [r3, #12]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	f022 0210 	bic.w	r2, r2, #16
 8012890:	60da      	str	r2, [r3, #12]
      break;
 8012892:	e002      	b.n	801289a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012894:	2301      	movs	r3, #1
 8012896:	73fb      	strb	r3, [r7, #15]
      break;
 8012898:	bf00      	nop
  }

  if (status == HAL_OK)
 801289a:	7bfb      	ldrb	r3, [r7, #15]
 801289c:	2b00      	cmp	r3, #0
 801289e:	f040 8081 	bne.w	80129a4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	2200      	movs	r2, #0
 80128a8:	6839      	ldr	r1, [r7, #0]
 80128aa:	4618      	mov	r0, r3
 80128ac:	f001 f836 	bl	801391c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	4a3e      	ldr	r2, [pc, #248]	; (80129b0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80128b6:	4293      	cmp	r3, r2
 80128b8:	d013      	beq.n	80128e2 <HAL_TIM_OC_Stop_IT+0xe6>
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	4a3d      	ldr	r2, [pc, #244]	; (80129b4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 80128c0:	4293      	cmp	r3, r2
 80128c2:	d00e      	beq.n	80128e2 <HAL_TIM_OC_Stop_IT+0xe6>
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	4a3b      	ldr	r2, [pc, #236]	; (80129b8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 80128ca:	4293      	cmp	r3, r2
 80128cc:	d009      	beq.n	80128e2 <HAL_TIM_OC_Stop_IT+0xe6>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	4a3a      	ldr	r2, [pc, #232]	; (80129bc <HAL_TIM_OC_Stop_IT+0x1c0>)
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d004      	beq.n	80128e2 <HAL_TIM_OC_Stop_IT+0xe6>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	4a38      	ldr	r2, [pc, #224]	; (80129c0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 80128de:	4293      	cmp	r3, r2
 80128e0:	d101      	bne.n	80128e6 <HAL_TIM_OC_Stop_IT+0xea>
 80128e2:	2301      	movs	r3, #1
 80128e4:	e000      	b.n	80128e8 <HAL_TIM_OC_Stop_IT+0xec>
 80128e6:	2300      	movs	r3, #0
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d017      	beq.n	801291c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	6a1a      	ldr	r2, [r3, #32]
 80128f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80128f6:	4013      	ands	r3, r2
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d10f      	bne.n	801291c <HAL_TIM_OC_Stop_IT+0x120>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	6a1a      	ldr	r2, [r3, #32]
 8012902:	f240 4344 	movw	r3, #1092	; 0x444
 8012906:	4013      	ands	r3, r2
 8012908:	2b00      	cmp	r3, #0
 801290a:	d107      	bne.n	801291c <HAL_TIM_OC_Stop_IT+0x120>
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801291a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	6a1a      	ldr	r2, [r3, #32]
 8012922:	f241 1311 	movw	r3, #4369	; 0x1111
 8012926:	4013      	ands	r3, r2
 8012928:	2b00      	cmp	r3, #0
 801292a:	d10f      	bne.n	801294c <HAL_TIM_OC_Stop_IT+0x150>
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	6a1a      	ldr	r2, [r3, #32]
 8012932:	f240 4344 	movw	r3, #1092	; 0x444
 8012936:	4013      	ands	r3, r2
 8012938:	2b00      	cmp	r3, #0
 801293a:	d107      	bne.n	801294c <HAL_TIM_OC_Stop_IT+0x150>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	681a      	ldr	r2, [r3, #0]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	f022 0201 	bic.w	r2, r2, #1
 801294a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d104      	bne.n	801295c <HAL_TIM_OC_Stop_IT+0x160>
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2201      	movs	r2, #1
 8012956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801295a:	e023      	b.n	80129a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	2b04      	cmp	r3, #4
 8012960:	d104      	bne.n	801296c <HAL_TIM_OC_Stop_IT+0x170>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2201      	movs	r2, #1
 8012966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801296a:	e01b      	b.n	80129a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	2b08      	cmp	r3, #8
 8012970:	d104      	bne.n	801297c <HAL_TIM_OC_Stop_IT+0x180>
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2201      	movs	r2, #1
 8012976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801297a:	e013      	b.n	80129a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	2b0c      	cmp	r3, #12
 8012980:	d104      	bne.n	801298c <HAL_TIM_OC_Stop_IT+0x190>
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2201      	movs	r2, #1
 8012986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801298a:	e00b      	b.n	80129a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	2b10      	cmp	r3, #16
 8012990:	d104      	bne.n	801299c <HAL_TIM_OC_Stop_IT+0x1a0>
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2201      	movs	r2, #1
 8012996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801299a:	e003      	b.n	80129a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2201      	movs	r2, #1
 80129a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80129a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	3710      	adds	r7, #16
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
 80129ae:	bf00      	nop
 80129b0:	40010000 	.word	0x40010000
 80129b4:	40010400 	.word	0x40010400
 80129b8:	40014000 	.word	0x40014000
 80129bc:	40014400 	.word	0x40014400
 80129c0:	40014800 	.word	0x40014800

080129c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b082      	sub	sp, #8
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d101      	bne.n	80129d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80129d2:	2301      	movs	r3, #1
 80129d4:	e049      	b.n	8012a6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d106      	bne.n	80129f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2200      	movs	r2, #0
 80129e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f000 f841 	bl	8012a72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	2202      	movs	r2, #2
 80129f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681a      	ldr	r2, [r3, #0]
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	3304      	adds	r3, #4
 8012a00:	4619      	mov	r1, r3
 8012a02:	4610      	mov	r0, r2
 8012a04:	f000 fb70 	bl	80130e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2201      	movs	r2, #1
 8012a0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2201      	movs	r2, #1
 8012a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2201      	movs	r2, #1
 8012a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2201      	movs	r2, #1
 8012a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2201      	movs	r2, #1
 8012a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2201      	movs	r2, #1
 8012a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	2201      	movs	r2, #1
 8012a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2201      	movs	r2, #1
 8012a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2201      	movs	r2, #1
 8012a5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2201      	movs	r2, #1
 8012a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012a68:	2300      	movs	r3, #0
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3708      	adds	r7, #8
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}

08012a72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012a72:	b480      	push	{r7}
 8012a74:	b083      	sub	sp, #12
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012a7a:	bf00      	nop
 8012a7c:	370c      	adds	r7, #12
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a84:	4770      	bx	lr

08012a86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012a86:	b580      	push	{r7, lr}
 8012a88:	b084      	sub	sp, #16
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	691b      	ldr	r3, [r3, #16]
 8012a9c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	f003 0302 	and.w	r3, r3, #2
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d020      	beq.n	8012aea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	f003 0302 	and.w	r3, r3, #2
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d01b      	beq.n	8012aea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	f06f 0202 	mvn.w	r2, #2
 8012aba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2201      	movs	r2, #1
 8012ac0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	699b      	ldr	r3, [r3, #24]
 8012ac8:	f003 0303 	and.w	r3, r3, #3
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d003      	beq.n	8012ad8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f000 faeb 	bl	80130ac <HAL_TIM_IC_CaptureCallback>
 8012ad6:	e005      	b.n	8012ae4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f7ef feab 	bl	8002834 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f000 faee 	bl	80130c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	f003 0304 	and.w	r3, r3, #4
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d020      	beq.n	8012b36 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	f003 0304 	and.w	r3, r3, #4
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d01b      	beq.n	8012b36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	f06f 0204 	mvn.w	r2, #4
 8012b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2202      	movs	r2, #2
 8012b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	699b      	ldr	r3, [r3, #24]
 8012b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d003      	beq.n	8012b24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f000 fac5 	bl	80130ac <HAL_TIM_IC_CaptureCallback>
 8012b22:	e005      	b.n	8012b30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f7ef fe85 	bl	8002834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f000 fac8 	bl	80130c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2200      	movs	r2, #0
 8012b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	f003 0308 	and.w	r3, r3, #8
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d020      	beq.n	8012b82 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f003 0308 	and.w	r3, r3, #8
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d01b      	beq.n	8012b82 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	f06f 0208 	mvn.w	r2, #8
 8012b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2204      	movs	r2, #4
 8012b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	69db      	ldr	r3, [r3, #28]
 8012b60:	f003 0303 	and.w	r3, r3, #3
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d003      	beq.n	8012b70 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f000 fa9f 	bl	80130ac <HAL_TIM_IC_CaptureCallback>
 8012b6e:	e005      	b.n	8012b7c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f7ef fe5f 	bl	8002834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f000 faa2 	bl	80130c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	f003 0310 	and.w	r3, r3, #16
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d020      	beq.n	8012bce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	f003 0310 	and.w	r3, r3, #16
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d01b      	beq.n	8012bce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	f06f 0210 	mvn.w	r2, #16
 8012b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2208      	movs	r2, #8
 8012ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	69db      	ldr	r3, [r3, #28]
 8012bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d003      	beq.n	8012bbc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f000 fa79 	bl	80130ac <HAL_TIM_IC_CaptureCallback>
 8012bba:	e005      	b.n	8012bc8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012bbc:	6878      	ldr	r0, [r7, #4]
 8012bbe:	f7ef fe39 	bl	8002834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f000 fa7c 	bl	80130c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	f003 0301 	and.w	r3, r3, #1
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00c      	beq.n	8012bf2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	f003 0301 	and.w	r3, r3, #1
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d007      	beq.n	8012bf2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	f06f 0201 	mvn.w	r2, #1
 8012bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f7f0 fd43 	bl	8003678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d104      	bne.n	8012c06 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d00c      	beq.n	8012c20 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d007      	beq.n	8012c20 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8012c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f000 ffba 	bl	8013b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d00c      	beq.n	8012c44 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d007      	beq.n	8012c44 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f000 ffb2 	bl	8013ba8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d00c      	beq.n	8012c68 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d007      	beq.n	8012c68 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f000 fa36 	bl	80130d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	f003 0320 	and.w	r3, r3, #32
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d00c      	beq.n	8012c8c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	f003 0320 	and.w	r3, r3, #32
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d007      	beq.n	8012c8c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	f06f 0220 	mvn.w	r2, #32
 8012c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f000 ff7a 	bl	8013b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012c8c:	bf00      	nop
 8012c8e:	3710      	adds	r7, #16
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}

08012c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b086      	sub	sp, #24
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	60f8      	str	r0, [r7, #12]
 8012c9c:	60b9      	str	r1, [r7, #8]
 8012c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012caa:	2b01      	cmp	r3, #1
 8012cac:	d101      	bne.n	8012cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012cae:	2302      	movs	r3, #2
 8012cb0:	e0ff      	b.n	8012eb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	2201      	movs	r2, #1
 8012cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2b14      	cmp	r3, #20
 8012cbe:	f200 80f0 	bhi.w	8012ea2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012cc2:	a201      	add	r2, pc, #4	; (adr r2, 8012cc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cc8:	08012d1d 	.word	0x08012d1d
 8012ccc:	08012ea3 	.word	0x08012ea3
 8012cd0:	08012ea3 	.word	0x08012ea3
 8012cd4:	08012ea3 	.word	0x08012ea3
 8012cd8:	08012d5d 	.word	0x08012d5d
 8012cdc:	08012ea3 	.word	0x08012ea3
 8012ce0:	08012ea3 	.word	0x08012ea3
 8012ce4:	08012ea3 	.word	0x08012ea3
 8012ce8:	08012d9f 	.word	0x08012d9f
 8012cec:	08012ea3 	.word	0x08012ea3
 8012cf0:	08012ea3 	.word	0x08012ea3
 8012cf4:	08012ea3 	.word	0x08012ea3
 8012cf8:	08012ddf 	.word	0x08012ddf
 8012cfc:	08012ea3 	.word	0x08012ea3
 8012d00:	08012ea3 	.word	0x08012ea3
 8012d04:	08012ea3 	.word	0x08012ea3
 8012d08:	08012e21 	.word	0x08012e21
 8012d0c:	08012ea3 	.word	0x08012ea3
 8012d10:	08012ea3 	.word	0x08012ea3
 8012d14:	08012ea3 	.word	0x08012ea3
 8012d18:	08012e61 	.word	0x08012e61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	68b9      	ldr	r1, [r7, #8]
 8012d22:	4618      	mov	r0, r3
 8012d24:	f000 fa86 	bl	8013234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	699a      	ldr	r2, [r3, #24]
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	f042 0208 	orr.w	r2, r2, #8
 8012d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	699a      	ldr	r2, [r3, #24]
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	f022 0204 	bic.w	r2, r2, #4
 8012d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	6999      	ldr	r1, [r3, #24]
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	691a      	ldr	r2, [r3, #16]
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	430a      	orrs	r2, r1
 8012d58:	619a      	str	r2, [r3, #24]
      break;
 8012d5a:	e0a5      	b.n	8012ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	68b9      	ldr	r1, [r7, #8]
 8012d62:	4618      	mov	r0, r3
 8012d64:	f000 faf6 	bl	8013354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	699a      	ldr	r2, [r3, #24]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	699a      	ldr	r2, [r3, #24]
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	6999      	ldr	r1, [r3, #24]
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	691b      	ldr	r3, [r3, #16]
 8012d92:	021a      	lsls	r2, r3, #8
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	430a      	orrs	r2, r1
 8012d9a:	619a      	str	r2, [r3, #24]
      break;
 8012d9c:	e084      	b.n	8012ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	68b9      	ldr	r1, [r7, #8]
 8012da4:	4618      	mov	r0, r3
 8012da6:	f000 fb5f 	bl	8013468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	69da      	ldr	r2, [r3, #28]
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	f042 0208 	orr.w	r2, r2, #8
 8012db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	69da      	ldr	r2, [r3, #28]
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	f022 0204 	bic.w	r2, r2, #4
 8012dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	69d9      	ldr	r1, [r3, #28]
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	691a      	ldr	r2, [r3, #16]
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	430a      	orrs	r2, r1
 8012dda:	61da      	str	r2, [r3, #28]
      break;
 8012ddc:	e064      	b.n	8012ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	68b9      	ldr	r1, [r7, #8]
 8012de4:	4618      	mov	r0, r3
 8012de6:	f000 fbc7 	bl	8013578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	69da      	ldr	r2, [r3, #28]
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	69da      	ldr	r2, [r3, #28]
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	69d9      	ldr	r1, [r3, #28]
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	691b      	ldr	r3, [r3, #16]
 8012e14:	021a      	lsls	r2, r3, #8
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	430a      	orrs	r2, r1
 8012e1c:	61da      	str	r2, [r3, #28]
      break;
 8012e1e:	e043      	b.n	8012ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	68b9      	ldr	r1, [r7, #8]
 8012e26:	4618      	mov	r0, r3
 8012e28:	f000 fc10 	bl	801364c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	f042 0208 	orr.w	r2, r2, #8
 8012e3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	f022 0204 	bic.w	r2, r2, #4
 8012e4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	691a      	ldr	r2, [r3, #16]
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	430a      	orrs	r2, r1
 8012e5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012e5e:	e023      	b.n	8012ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	68b9      	ldr	r1, [r7, #8]
 8012e66:	4618      	mov	r0, r3
 8012e68:	f000 fc54 	bl	8013714 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012e7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	691b      	ldr	r3, [r3, #16]
 8012e96:	021a      	lsls	r2, r3, #8
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	430a      	orrs	r2, r1
 8012e9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012ea0:	e002      	b.n	8012ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8012ea6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3718      	adds	r7, #24
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop

08012ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b084      	sub	sp, #16
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012ed0:	2b01      	cmp	r3, #1
 8012ed2:	d101      	bne.n	8012ed8 <HAL_TIM_ConfigClockSource+0x1c>
 8012ed4:	2302      	movs	r3, #2
 8012ed6:	e0dc      	b.n	8013092 <HAL_TIM_ConfigClockSource+0x1d6>
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2201      	movs	r2, #1
 8012edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2202      	movs	r2, #2
 8012ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	689b      	ldr	r3, [r3, #8]
 8012eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012ef0:	68ba      	ldr	r2, [r7, #8]
 8012ef2:	4b6a      	ldr	r3, [pc, #424]	; (801309c <HAL_TIM_ConfigClockSource+0x1e0>)
 8012ef4:	4013      	ands	r3, r2
 8012ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012efe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	68ba      	ldr	r2, [r7, #8]
 8012f06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	4a64      	ldr	r2, [pc, #400]	; (80130a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	f000 80a9 	beq.w	8013066 <HAL_TIM_ConfigClockSource+0x1aa>
 8012f14:	4a62      	ldr	r2, [pc, #392]	; (80130a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012f16:	4293      	cmp	r3, r2
 8012f18:	f200 80ae 	bhi.w	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f1c:	4a61      	ldr	r2, [pc, #388]	; (80130a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012f1e:	4293      	cmp	r3, r2
 8012f20:	f000 80a1 	beq.w	8013066 <HAL_TIM_ConfigClockSource+0x1aa>
 8012f24:	4a5f      	ldr	r2, [pc, #380]	; (80130a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012f26:	4293      	cmp	r3, r2
 8012f28:	f200 80a6 	bhi.w	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f2c:	4a5e      	ldr	r2, [pc, #376]	; (80130a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	f000 8099 	beq.w	8013066 <HAL_TIM_ConfigClockSource+0x1aa>
 8012f34:	4a5c      	ldr	r2, [pc, #368]	; (80130a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012f36:	4293      	cmp	r3, r2
 8012f38:	f200 809e 	bhi.w	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012f40:	f000 8091 	beq.w	8013066 <HAL_TIM_ConfigClockSource+0x1aa>
 8012f44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012f48:	f200 8096 	bhi.w	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012f50:	f000 8089 	beq.w	8013066 <HAL_TIM_ConfigClockSource+0x1aa>
 8012f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012f58:	f200 808e 	bhi.w	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012f60:	d03e      	beq.n	8012fe0 <HAL_TIM_ConfigClockSource+0x124>
 8012f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012f66:	f200 8087 	bhi.w	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f6e:	f000 8086 	beq.w	801307e <HAL_TIM_ConfigClockSource+0x1c2>
 8012f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f76:	d87f      	bhi.n	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f78:	2b70      	cmp	r3, #112	; 0x70
 8012f7a:	d01a      	beq.n	8012fb2 <HAL_TIM_ConfigClockSource+0xf6>
 8012f7c:	2b70      	cmp	r3, #112	; 0x70
 8012f7e:	d87b      	bhi.n	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f80:	2b60      	cmp	r3, #96	; 0x60
 8012f82:	d050      	beq.n	8013026 <HAL_TIM_ConfigClockSource+0x16a>
 8012f84:	2b60      	cmp	r3, #96	; 0x60
 8012f86:	d877      	bhi.n	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f88:	2b50      	cmp	r3, #80	; 0x50
 8012f8a:	d03c      	beq.n	8013006 <HAL_TIM_ConfigClockSource+0x14a>
 8012f8c:	2b50      	cmp	r3, #80	; 0x50
 8012f8e:	d873      	bhi.n	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f90:	2b40      	cmp	r3, #64	; 0x40
 8012f92:	d058      	beq.n	8013046 <HAL_TIM_ConfigClockSource+0x18a>
 8012f94:	2b40      	cmp	r3, #64	; 0x40
 8012f96:	d86f      	bhi.n	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f98:	2b30      	cmp	r3, #48	; 0x30
 8012f9a:	d064      	beq.n	8013066 <HAL_TIM_ConfigClockSource+0x1aa>
 8012f9c:	2b30      	cmp	r3, #48	; 0x30
 8012f9e:	d86b      	bhi.n	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fa0:	2b20      	cmp	r3, #32
 8012fa2:	d060      	beq.n	8013066 <HAL_TIM_ConfigClockSource+0x1aa>
 8012fa4:	2b20      	cmp	r3, #32
 8012fa6:	d867      	bhi.n	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d05c      	beq.n	8013066 <HAL_TIM_ConfigClockSource+0x1aa>
 8012fac:	2b10      	cmp	r3, #16
 8012fae:	d05a      	beq.n	8013066 <HAL_TIM_ConfigClockSource+0x1aa>
 8012fb0:	e062      	b.n	8013078 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6818      	ldr	r0, [r3, #0]
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	6899      	ldr	r1, [r3, #8]
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	685a      	ldr	r2, [r3, #4]
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	68db      	ldr	r3, [r3, #12]
 8012fc2:	f000 fc8b 	bl	80138dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	689b      	ldr	r3, [r3, #8]
 8012fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	68ba      	ldr	r2, [r7, #8]
 8012fdc:	609a      	str	r2, [r3, #8]
      break;
 8012fde:	e04f      	b.n	8013080 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6818      	ldr	r0, [r3, #0]
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	6899      	ldr	r1, [r3, #8]
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	685a      	ldr	r2, [r3, #4]
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	68db      	ldr	r3, [r3, #12]
 8012ff0:	f000 fc74 	bl	80138dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	689a      	ldr	r2, [r3, #8]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013002:	609a      	str	r2, [r3, #8]
      break;
 8013004:	e03c      	b.n	8013080 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6818      	ldr	r0, [r3, #0]
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	6859      	ldr	r1, [r3, #4]
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	68db      	ldr	r3, [r3, #12]
 8013012:	461a      	mov	r2, r3
 8013014:	f000 fbe4 	bl	80137e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	2150      	movs	r1, #80	; 0x50
 801301e:	4618      	mov	r0, r3
 8013020:	f000 fc3e 	bl	80138a0 <TIM_ITRx_SetConfig>
      break;
 8013024:	e02c      	b.n	8013080 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6818      	ldr	r0, [r3, #0]
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	6859      	ldr	r1, [r3, #4]
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	68db      	ldr	r3, [r3, #12]
 8013032:	461a      	mov	r2, r3
 8013034:	f000 fc03 	bl	801383e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	2160      	movs	r1, #96	; 0x60
 801303e:	4618      	mov	r0, r3
 8013040:	f000 fc2e 	bl	80138a0 <TIM_ITRx_SetConfig>
      break;
 8013044:	e01c      	b.n	8013080 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	6818      	ldr	r0, [r3, #0]
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	6859      	ldr	r1, [r3, #4]
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	68db      	ldr	r3, [r3, #12]
 8013052:	461a      	mov	r2, r3
 8013054:	f000 fbc4 	bl	80137e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	2140      	movs	r1, #64	; 0x40
 801305e:	4618      	mov	r0, r3
 8013060:	f000 fc1e 	bl	80138a0 <TIM_ITRx_SetConfig>
      break;
 8013064:	e00c      	b.n	8013080 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	681a      	ldr	r2, [r3, #0]
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	4619      	mov	r1, r3
 8013070:	4610      	mov	r0, r2
 8013072:	f000 fc15 	bl	80138a0 <TIM_ITRx_SetConfig>
      break;
 8013076:	e003      	b.n	8013080 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013078:	2301      	movs	r3, #1
 801307a:	73fb      	strb	r3, [r7, #15]
      break;
 801307c:	e000      	b.n	8013080 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801307e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2201      	movs	r2, #1
 8013084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2200      	movs	r2, #0
 801308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013090:	7bfb      	ldrb	r3, [r7, #15]
}
 8013092:	4618      	mov	r0, r3
 8013094:	3710      	adds	r7, #16
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}
 801309a:	bf00      	nop
 801309c:	ffceff88 	.word	0xffceff88
 80130a0:	00100040 	.word	0x00100040
 80130a4:	00100030 	.word	0x00100030
 80130a8:	00100020 	.word	0x00100020

080130ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80130ac:	b480      	push	{r7}
 80130ae:	b083      	sub	sp, #12
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80130b4:	bf00      	nop
 80130b6:	370c      	adds	r7, #12
 80130b8:	46bd      	mov	sp, r7
 80130ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130be:	4770      	bx	lr

080130c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80130c0:	b480      	push	{r7}
 80130c2:	b083      	sub	sp, #12
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80130c8:	bf00      	nop
 80130ca:	370c      	adds	r7, #12
 80130cc:	46bd      	mov	sp, r7
 80130ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d2:	4770      	bx	lr

080130d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80130d4:	b480      	push	{r7}
 80130d6:	b083      	sub	sp, #12
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80130dc:	bf00      	nop
 80130de:	370c      	adds	r7, #12
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr

080130e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80130e8:	b480      	push	{r7}
 80130ea:	b085      	sub	sp, #20
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	4a46      	ldr	r2, [pc, #280]	; (8013214 <TIM_Base_SetConfig+0x12c>)
 80130fc:	4293      	cmp	r3, r2
 80130fe:	d013      	beq.n	8013128 <TIM_Base_SetConfig+0x40>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013106:	d00f      	beq.n	8013128 <TIM_Base_SetConfig+0x40>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	4a43      	ldr	r2, [pc, #268]	; (8013218 <TIM_Base_SetConfig+0x130>)
 801310c:	4293      	cmp	r3, r2
 801310e:	d00b      	beq.n	8013128 <TIM_Base_SetConfig+0x40>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	4a42      	ldr	r2, [pc, #264]	; (801321c <TIM_Base_SetConfig+0x134>)
 8013114:	4293      	cmp	r3, r2
 8013116:	d007      	beq.n	8013128 <TIM_Base_SetConfig+0x40>
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	4a41      	ldr	r2, [pc, #260]	; (8013220 <TIM_Base_SetConfig+0x138>)
 801311c:	4293      	cmp	r3, r2
 801311e:	d003      	beq.n	8013128 <TIM_Base_SetConfig+0x40>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	4a40      	ldr	r2, [pc, #256]	; (8013224 <TIM_Base_SetConfig+0x13c>)
 8013124:	4293      	cmp	r3, r2
 8013126:	d108      	bne.n	801313a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801312e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	685b      	ldr	r3, [r3, #4]
 8013134:	68fa      	ldr	r2, [r7, #12]
 8013136:	4313      	orrs	r3, r2
 8013138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	4a35      	ldr	r2, [pc, #212]	; (8013214 <TIM_Base_SetConfig+0x12c>)
 801313e:	4293      	cmp	r3, r2
 8013140:	d01f      	beq.n	8013182 <TIM_Base_SetConfig+0x9a>
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013148:	d01b      	beq.n	8013182 <TIM_Base_SetConfig+0x9a>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	4a32      	ldr	r2, [pc, #200]	; (8013218 <TIM_Base_SetConfig+0x130>)
 801314e:	4293      	cmp	r3, r2
 8013150:	d017      	beq.n	8013182 <TIM_Base_SetConfig+0x9a>
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	4a31      	ldr	r2, [pc, #196]	; (801321c <TIM_Base_SetConfig+0x134>)
 8013156:	4293      	cmp	r3, r2
 8013158:	d013      	beq.n	8013182 <TIM_Base_SetConfig+0x9a>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	4a30      	ldr	r2, [pc, #192]	; (8013220 <TIM_Base_SetConfig+0x138>)
 801315e:	4293      	cmp	r3, r2
 8013160:	d00f      	beq.n	8013182 <TIM_Base_SetConfig+0x9a>
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	4a2f      	ldr	r2, [pc, #188]	; (8013224 <TIM_Base_SetConfig+0x13c>)
 8013166:	4293      	cmp	r3, r2
 8013168:	d00b      	beq.n	8013182 <TIM_Base_SetConfig+0x9a>
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	4a2e      	ldr	r2, [pc, #184]	; (8013228 <TIM_Base_SetConfig+0x140>)
 801316e:	4293      	cmp	r3, r2
 8013170:	d007      	beq.n	8013182 <TIM_Base_SetConfig+0x9a>
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	4a2d      	ldr	r2, [pc, #180]	; (801322c <TIM_Base_SetConfig+0x144>)
 8013176:	4293      	cmp	r3, r2
 8013178:	d003      	beq.n	8013182 <TIM_Base_SetConfig+0x9a>
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	4a2c      	ldr	r2, [pc, #176]	; (8013230 <TIM_Base_SetConfig+0x148>)
 801317e:	4293      	cmp	r3, r2
 8013180:	d108      	bne.n	8013194 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	68db      	ldr	r3, [r3, #12]
 801318e:	68fa      	ldr	r2, [r7, #12]
 8013190:	4313      	orrs	r3, r2
 8013192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	695b      	ldr	r3, [r3, #20]
 801319e:	4313      	orrs	r3, r2
 80131a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	68fa      	ldr	r2, [r7, #12]
 80131a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	689a      	ldr	r2, [r3, #8]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	681a      	ldr	r2, [r3, #0]
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	4a16      	ldr	r2, [pc, #88]	; (8013214 <TIM_Base_SetConfig+0x12c>)
 80131bc:	4293      	cmp	r3, r2
 80131be:	d00f      	beq.n	80131e0 <TIM_Base_SetConfig+0xf8>
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	4a18      	ldr	r2, [pc, #96]	; (8013224 <TIM_Base_SetConfig+0x13c>)
 80131c4:	4293      	cmp	r3, r2
 80131c6:	d00b      	beq.n	80131e0 <TIM_Base_SetConfig+0xf8>
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	4a17      	ldr	r2, [pc, #92]	; (8013228 <TIM_Base_SetConfig+0x140>)
 80131cc:	4293      	cmp	r3, r2
 80131ce:	d007      	beq.n	80131e0 <TIM_Base_SetConfig+0xf8>
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	4a16      	ldr	r2, [pc, #88]	; (801322c <TIM_Base_SetConfig+0x144>)
 80131d4:	4293      	cmp	r3, r2
 80131d6:	d003      	beq.n	80131e0 <TIM_Base_SetConfig+0xf8>
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	4a15      	ldr	r2, [pc, #84]	; (8013230 <TIM_Base_SetConfig+0x148>)
 80131dc:	4293      	cmp	r3, r2
 80131de:	d103      	bne.n	80131e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	691a      	ldr	r2, [r3, #16]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2201      	movs	r2, #1
 80131ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	691b      	ldr	r3, [r3, #16]
 80131f2:	f003 0301 	and.w	r3, r3, #1
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	d105      	bne.n	8013206 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	691b      	ldr	r3, [r3, #16]
 80131fe:	f023 0201 	bic.w	r2, r3, #1
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	611a      	str	r2, [r3, #16]
  }
}
 8013206:	bf00      	nop
 8013208:	3714      	adds	r7, #20
 801320a:	46bd      	mov	sp, r7
 801320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013210:	4770      	bx	lr
 8013212:	bf00      	nop
 8013214:	40010000 	.word	0x40010000
 8013218:	40000400 	.word	0x40000400
 801321c:	40000800 	.word	0x40000800
 8013220:	40000c00 	.word	0x40000c00
 8013224:	40010400 	.word	0x40010400
 8013228:	40014000 	.word	0x40014000
 801322c:	40014400 	.word	0x40014400
 8013230:	40014800 	.word	0x40014800

08013234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013234:	b480      	push	{r7}
 8013236:	b087      	sub	sp, #28
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	6a1b      	ldr	r3, [r3, #32]
 8013242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6a1b      	ldr	r3, [r3, #32]
 8013248:	f023 0201 	bic.w	r2, r3, #1
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	685b      	ldr	r3, [r3, #4]
 8013254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	699b      	ldr	r3, [r3, #24]
 801325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801325c:	68fa      	ldr	r2, [r7, #12]
 801325e:	4b37      	ldr	r3, [pc, #220]	; (801333c <TIM_OC1_SetConfig+0x108>)
 8013260:	4013      	ands	r3, r2
 8013262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	f023 0303 	bic.w	r3, r3, #3
 801326a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	68fa      	ldr	r2, [r7, #12]
 8013272:	4313      	orrs	r3, r2
 8013274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	f023 0302 	bic.w	r3, r3, #2
 801327c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	689b      	ldr	r3, [r3, #8]
 8013282:	697a      	ldr	r2, [r7, #20]
 8013284:	4313      	orrs	r3, r2
 8013286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	4a2d      	ldr	r2, [pc, #180]	; (8013340 <TIM_OC1_SetConfig+0x10c>)
 801328c:	4293      	cmp	r3, r2
 801328e:	d00f      	beq.n	80132b0 <TIM_OC1_SetConfig+0x7c>
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	4a2c      	ldr	r2, [pc, #176]	; (8013344 <TIM_OC1_SetConfig+0x110>)
 8013294:	4293      	cmp	r3, r2
 8013296:	d00b      	beq.n	80132b0 <TIM_OC1_SetConfig+0x7c>
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	4a2b      	ldr	r2, [pc, #172]	; (8013348 <TIM_OC1_SetConfig+0x114>)
 801329c:	4293      	cmp	r3, r2
 801329e:	d007      	beq.n	80132b0 <TIM_OC1_SetConfig+0x7c>
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	4a2a      	ldr	r2, [pc, #168]	; (801334c <TIM_OC1_SetConfig+0x118>)
 80132a4:	4293      	cmp	r3, r2
 80132a6:	d003      	beq.n	80132b0 <TIM_OC1_SetConfig+0x7c>
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	4a29      	ldr	r2, [pc, #164]	; (8013350 <TIM_OC1_SetConfig+0x11c>)
 80132ac:	4293      	cmp	r3, r2
 80132ae:	d10c      	bne.n	80132ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	f023 0308 	bic.w	r3, r3, #8
 80132b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	697a      	ldr	r2, [r7, #20]
 80132be:	4313      	orrs	r3, r2
 80132c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	f023 0304 	bic.w	r3, r3, #4
 80132c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	4a1c      	ldr	r2, [pc, #112]	; (8013340 <TIM_OC1_SetConfig+0x10c>)
 80132ce:	4293      	cmp	r3, r2
 80132d0:	d00f      	beq.n	80132f2 <TIM_OC1_SetConfig+0xbe>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	4a1b      	ldr	r2, [pc, #108]	; (8013344 <TIM_OC1_SetConfig+0x110>)
 80132d6:	4293      	cmp	r3, r2
 80132d8:	d00b      	beq.n	80132f2 <TIM_OC1_SetConfig+0xbe>
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	4a1a      	ldr	r2, [pc, #104]	; (8013348 <TIM_OC1_SetConfig+0x114>)
 80132de:	4293      	cmp	r3, r2
 80132e0:	d007      	beq.n	80132f2 <TIM_OC1_SetConfig+0xbe>
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	4a19      	ldr	r2, [pc, #100]	; (801334c <TIM_OC1_SetConfig+0x118>)
 80132e6:	4293      	cmp	r3, r2
 80132e8:	d003      	beq.n	80132f2 <TIM_OC1_SetConfig+0xbe>
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	4a18      	ldr	r2, [pc, #96]	; (8013350 <TIM_OC1_SetConfig+0x11c>)
 80132ee:	4293      	cmp	r3, r2
 80132f0:	d111      	bne.n	8013316 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80132f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80132fa:	693b      	ldr	r3, [r7, #16]
 80132fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	695b      	ldr	r3, [r3, #20]
 8013306:	693a      	ldr	r2, [r7, #16]
 8013308:	4313      	orrs	r3, r2
 801330a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	699b      	ldr	r3, [r3, #24]
 8013310:	693a      	ldr	r2, [r7, #16]
 8013312:	4313      	orrs	r3, r2
 8013314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	693a      	ldr	r2, [r7, #16]
 801331a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	68fa      	ldr	r2, [r7, #12]
 8013320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	685a      	ldr	r2, [r3, #4]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	697a      	ldr	r2, [r7, #20]
 801332e:	621a      	str	r2, [r3, #32]
}
 8013330:	bf00      	nop
 8013332:	371c      	adds	r7, #28
 8013334:	46bd      	mov	sp, r7
 8013336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333a:	4770      	bx	lr
 801333c:	fffeff8f 	.word	0xfffeff8f
 8013340:	40010000 	.word	0x40010000
 8013344:	40010400 	.word	0x40010400
 8013348:	40014000 	.word	0x40014000
 801334c:	40014400 	.word	0x40014400
 8013350:	40014800 	.word	0x40014800

08013354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013354:	b480      	push	{r7}
 8013356:	b087      	sub	sp, #28
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
 801335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6a1b      	ldr	r3, [r3, #32]
 8013362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6a1b      	ldr	r3, [r3, #32]
 8013368:	f023 0210 	bic.w	r2, r3, #16
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	685b      	ldr	r3, [r3, #4]
 8013374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	699b      	ldr	r3, [r3, #24]
 801337a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801337c:	68fa      	ldr	r2, [r7, #12]
 801337e:	4b34      	ldr	r3, [pc, #208]	; (8013450 <TIM_OC2_SetConfig+0xfc>)
 8013380:	4013      	ands	r3, r2
 8013382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801338a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	021b      	lsls	r3, r3, #8
 8013392:	68fa      	ldr	r2, [r7, #12]
 8013394:	4313      	orrs	r3, r2
 8013396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013398:	697b      	ldr	r3, [r7, #20]
 801339a:	f023 0320 	bic.w	r3, r3, #32
 801339e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	689b      	ldr	r3, [r3, #8]
 80133a4:	011b      	lsls	r3, r3, #4
 80133a6:	697a      	ldr	r2, [r7, #20]
 80133a8:	4313      	orrs	r3, r2
 80133aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	4a29      	ldr	r2, [pc, #164]	; (8013454 <TIM_OC2_SetConfig+0x100>)
 80133b0:	4293      	cmp	r3, r2
 80133b2:	d003      	beq.n	80133bc <TIM_OC2_SetConfig+0x68>
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	4a28      	ldr	r2, [pc, #160]	; (8013458 <TIM_OC2_SetConfig+0x104>)
 80133b8:	4293      	cmp	r3, r2
 80133ba:	d10d      	bne.n	80133d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80133c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	68db      	ldr	r3, [r3, #12]
 80133c8:	011b      	lsls	r3, r3, #4
 80133ca:	697a      	ldr	r2, [r7, #20]
 80133cc:	4313      	orrs	r3, r2
 80133ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80133d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	4a1e      	ldr	r2, [pc, #120]	; (8013454 <TIM_OC2_SetConfig+0x100>)
 80133dc:	4293      	cmp	r3, r2
 80133de:	d00f      	beq.n	8013400 <TIM_OC2_SetConfig+0xac>
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	4a1d      	ldr	r2, [pc, #116]	; (8013458 <TIM_OC2_SetConfig+0x104>)
 80133e4:	4293      	cmp	r3, r2
 80133e6:	d00b      	beq.n	8013400 <TIM_OC2_SetConfig+0xac>
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	4a1c      	ldr	r2, [pc, #112]	; (801345c <TIM_OC2_SetConfig+0x108>)
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d007      	beq.n	8013400 <TIM_OC2_SetConfig+0xac>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	4a1b      	ldr	r2, [pc, #108]	; (8013460 <TIM_OC2_SetConfig+0x10c>)
 80133f4:	4293      	cmp	r3, r2
 80133f6:	d003      	beq.n	8013400 <TIM_OC2_SetConfig+0xac>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	4a1a      	ldr	r2, [pc, #104]	; (8013464 <TIM_OC2_SetConfig+0x110>)
 80133fc:	4293      	cmp	r3, r2
 80133fe:	d113      	bne.n	8013428 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013408:	693b      	ldr	r3, [r7, #16]
 801340a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801340e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	695b      	ldr	r3, [r3, #20]
 8013414:	009b      	lsls	r3, r3, #2
 8013416:	693a      	ldr	r2, [r7, #16]
 8013418:	4313      	orrs	r3, r2
 801341a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	699b      	ldr	r3, [r3, #24]
 8013420:	009b      	lsls	r3, r3, #2
 8013422:	693a      	ldr	r2, [r7, #16]
 8013424:	4313      	orrs	r3, r2
 8013426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	693a      	ldr	r2, [r7, #16]
 801342c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	68fa      	ldr	r2, [r7, #12]
 8013432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	685a      	ldr	r2, [r3, #4]
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	697a      	ldr	r2, [r7, #20]
 8013440:	621a      	str	r2, [r3, #32]
}
 8013442:	bf00      	nop
 8013444:	371c      	adds	r7, #28
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop
 8013450:	feff8fff 	.word	0xfeff8fff
 8013454:	40010000 	.word	0x40010000
 8013458:	40010400 	.word	0x40010400
 801345c:	40014000 	.word	0x40014000
 8013460:	40014400 	.word	0x40014400
 8013464:	40014800 	.word	0x40014800

08013468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013468:	b480      	push	{r7}
 801346a:	b087      	sub	sp, #28
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6a1b      	ldr	r3, [r3, #32]
 8013476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6a1b      	ldr	r3, [r3, #32]
 801347c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	69db      	ldr	r3, [r3, #28]
 801348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013490:	68fa      	ldr	r2, [r7, #12]
 8013492:	4b33      	ldr	r3, [pc, #204]	; (8013560 <TIM_OC3_SetConfig+0xf8>)
 8013494:	4013      	ands	r3, r2
 8013496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	f023 0303 	bic.w	r3, r3, #3
 801349e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	68fa      	ldr	r2, [r7, #12]
 80134a6:	4313      	orrs	r3, r2
 80134a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80134b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	689b      	ldr	r3, [r3, #8]
 80134b6:	021b      	lsls	r3, r3, #8
 80134b8:	697a      	ldr	r2, [r7, #20]
 80134ba:	4313      	orrs	r3, r2
 80134bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	4a28      	ldr	r2, [pc, #160]	; (8013564 <TIM_OC3_SetConfig+0xfc>)
 80134c2:	4293      	cmp	r3, r2
 80134c4:	d003      	beq.n	80134ce <TIM_OC3_SetConfig+0x66>
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	4a27      	ldr	r2, [pc, #156]	; (8013568 <TIM_OC3_SetConfig+0x100>)
 80134ca:	4293      	cmp	r3, r2
 80134cc:	d10d      	bne.n	80134ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80134d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	68db      	ldr	r3, [r3, #12]
 80134da:	021b      	lsls	r3, r3, #8
 80134dc:	697a      	ldr	r2, [r7, #20]
 80134de:	4313      	orrs	r3, r2
 80134e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80134e2:	697b      	ldr	r3, [r7, #20]
 80134e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80134e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	4a1d      	ldr	r2, [pc, #116]	; (8013564 <TIM_OC3_SetConfig+0xfc>)
 80134ee:	4293      	cmp	r3, r2
 80134f0:	d00f      	beq.n	8013512 <TIM_OC3_SetConfig+0xaa>
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	4a1c      	ldr	r2, [pc, #112]	; (8013568 <TIM_OC3_SetConfig+0x100>)
 80134f6:	4293      	cmp	r3, r2
 80134f8:	d00b      	beq.n	8013512 <TIM_OC3_SetConfig+0xaa>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	4a1b      	ldr	r2, [pc, #108]	; (801356c <TIM_OC3_SetConfig+0x104>)
 80134fe:	4293      	cmp	r3, r2
 8013500:	d007      	beq.n	8013512 <TIM_OC3_SetConfig+0xaa>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	4a1a      	ldr	r2, [pc, #104]	; (8013570 <TIM_OC3_SetConfig+0x108>)
 8013506:	4293      	cmp	r3, r2
 8013508:	d003      	beq.n	8013512 <TIM_OC3_SetConfig+0xaa>
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	4a19      	ldr	r2, [pc, #100]	; (8013574 <TIM_OC3_SetConfig+0x10c>)
 801350e:	4293      	cmp	r3, r2
 8013510:	d113      	bne.n	801353a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	695b      	ldr	r3, [r3, #20]
 8013526:	011b      	lsls	r3, r3, #4
 8013528:	693a      	ldr	r2, [r7, #16]
 801352a:	4313      	orrs	r3, r2
 801352c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	699b      	ldr	r3, [r3, #24]
 8013532:	011b      	lsls	r3, r3, #4
 8013534:	693a      	ldr	r2, [r7, #16]
 8013536:	4313      	orrs	r3, r2
 8013538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	693a      	ldr	r2, [r7, #16]
 801353e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	68fa      	ldr	r2, [r7, #12]
 8013544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	685a      	ldr	r2, [r3, #4]
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	697a      	ldr	r2, [r7, #20]
 8013552:	621a      	str	r2, [r3, #32]
}
 8013554:	bf00      	nop
 8013556:	371c      	adds	r7, #28
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr
 8013560:	fffeff8f 	.word	0xfffeff8f
 8013564:	40010000 	.word	0x40010000
 8013568:	40010400 	.word	0x40010400
 801356c:	40014000 	.word	0x40014000
 8013570:	40014400 	.word	0x40014400
 8013574:	40014800 	.word	0x40014800

08013578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013578:	b480      	push	{r7}
 801357a:	b087      	sub	sp, #28
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6a1b      	ldr	r3, [r3, #32]
 8013586:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	6a1b      	ldr	r3, [r3, #32]
 801358c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	69db      	ldr	r3, [r3, #28]
 801359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80135a0:	68fa      	ldr	r2, [r7, #12]
 80135a2:	4b24      	ldr	r3, [pc, #144]	; (8013634 <TIM_OC4_SetConfig+0xbc>)
 80135a4:	4013      	ands	r3, r2
 80135a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80135ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	021b      	lsls	r3, r3, #8
 80135b6:	68fa      	ldr	r2, [r7, #12]
 80135b8:	4313      	orrs	r3, r2
 80135ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80135bc:	693b      	ldr	r3, [r7, #16]
 80135be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80135c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	689b      	ldr	r3, [r3, #8]
 80135c8:	031b      	lsls	r3, r3, #12
 80135ca:	693a      	ldr	r2, [r7, #16]
 80135cc:	4313      	orrs	r3, r2
 80135ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	4a19      	ldr	r2, [pc, #100]	; (8013638 <TIM_OC4_SetConfig+0xc0>)
 80135d4:	4293      	cmp	r3, r2
 80135d6:	d00f      	beq.n	80135f8 <TIM_OC4_SetConfig+0x80>
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	4a18      	ldr	r2, [pc, #96]	; (801363c <TIM_OC4_SetConfig+0xc4>)
 80135dc:	4293      	cmp	r3, r2
 80135de:	d00b      	beq.n	80135f8 <TIM_OC4_SetConfig+0x80>
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	4a17      	ldr	r2, [pc, #92]	; (8013640 <TIM_OC4_SetConfig+0xc8>)
 80135e4:	4293      	cmp	r3, r2
 80135e6:	d007      	beq.n	80135f8 <TIM_OC4_SetConfig+0x80>
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	4a16      	ldr	r2, [pc, #88]	; (8013644 <TIM_OC4_SetConfig+0xcc>)
 80135ec:	4293      	cmp	r3, r2
 80135ee:	d003      	beq.n	80135f8 <TIM_OC4_SetConfig+0x80>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	4a15      	ldr	r2, [pc, #84]	; (8013648 <TIM_OC4_SetConfig+0xd0>)
 80135f4:	4293      	cmp	r3, r2
 80135f6:	d109      	bne.n	801360c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80135fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	695b      	ldr	r3, [r3, #20]
 8013604:	019b      	lsls	r3, r3, #6
 8013606:	697a      	ldr	r2, [r7, #20]
 8013608:	4313      	orrs	r3, r2
 801360a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	697a      	ldr	r2, [r7, #20]
 8013610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	68fa      	ldr	r2, [r7, #12]
 8013616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	685a      	ldr	r2, [r3, #4]
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	693a      	ldr	r2, [r7, #16]
 8013624:	621a      	str	r2, [r3, #32]
}
 8013626:	bf00      	nop
 8013628:	371c      	adds	r7, #28
 801362a:	46bd      	mov	sp, r7
 801362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013630:	4770      	bx	lr
 8013632:	bf00      	nop
 8013634:	feff8fff 	.word	0xfeff8fff
 8013638:	40010000 	.word	0x40010000
 801363c:	40010400 	.word	0x40010400
 8013640:	40014000 	.word	0x40014000
 8013644:	40014400 	.word	0x40014400
 8013648:	40014800 	.word	0x40014800

0801364c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801364c:	b480      	push	{r7}
 801364e:	b087      	sub	sp, #28
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6a1b      	ldr	r3, [r3, #32]
 801365a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	6a1b      	ldr	r3, [r3, #32]
 8013660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	685b      	ldr	r3, [r3, #4]
 801366c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013674:	68fa      	ldr	r2, [r7, #12]
 8013676:	4b21      	ldr	r3, [pc, #132]	; (80136fc <TIM_OC5_SetConfig+0xb0>)
 8013678:	4013      	ands	r3, r2
 801367a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801367c:	683b      	ldr	r3, [r7, #0]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	68fa      	ldr	r2, [r7, #12]
 8013682:	4313      	orrs	r3, r2
 8013684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013686:	693b      	ldr	r3, [r7, #16]
 8013688:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801368c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	689b      	ldr	r3, [r3, #8]
 8013692:	041b      	lsls	r3, r3, #16
 8013694:	693a      	ldr	r2, [r7, #16]
 8013696:	4313      	orrs	r3, r2
 8013698:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	4a18      	ldr	r2, [pc, #96]	; (8013700 <TIM_OC5_SetConfig+0xb4>)
 801369e:	4293      	cmp	r3, r2
 80136a0:	d00f      	beq.n	80136c2 <TIM_OC5_SetConfig+0x76>
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	4a17      	ldr	r2, [pc, #92]	; (8013704 <TIM_OC5_SetConfig+0xb8>)
 80136a6:	4293      	cmp	r3, r2
 80136a8:	d00b      	beq.n	80136c2 <TIM_OC5_SetConfig+0x76>
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	4a16      	ldr	r2, [pc, #88]	; (8013708 <TIM_OC5_SetConfig+0xbc>)
 80136ae:	4293      	cmp	r3, r2
 80136b0:	d007      	beq.n	80136c2 <TIM_OC5_SetConfig+0x76>
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	4a15      	ldr	r2, [pc, #84]	; (801370c <TIM_OC5_SetConfig+0xc0>)
 80136b6:	4293      	cmp	r3, r2
 80136b8:	d003      	beq.n	80136c2 <TIM_OC5_SetConfig+0x76>
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	4a14      	ldr	r2, [pc, #80]	; (8013710 <TIM_OC5_SetConfig+0xc4>)
 80136be:	4293      	cmp	r3, r2
 80136c0:	d109      	bne.n	80136d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80136c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	695b      	ldr	r3, [r3, #20]
 80136ce:	021b      	lsls	r3, r3, #8
 80136d0:	697a      	ldr	r2, [r7, #20]
 80136d2:	4313      	orrs	r3, r2
 80136d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	697a      	ldr	r2, [r7, #20]
 80136da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	68fa      	ldr	r2, [r7, #12]
 80136e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	685a      	ldr	r2, [r3, #4]
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	693a      	ldr	r2, [r7, #16]
 80136ee:	621a      	str	r2, [r3, #32]
}
 80136f0:	bf00      	nop
 80136f2:	371c      	adds	r7, #28
 80136f4:	46bd      	mov	sp, r7
 80136f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fa:	4770      	bx	lr
 80136fc:	fffeff8f 	.word	0xfffeff8f
 8013700:	40010000 	.word	0x40010000
 8013704:	40010400 	.word	0x40010400
 8013708:	40014000 	.word	0x40014000
 801370c:	40014400 	.word	0x40014400
 8013710:	40014800 	.word	0x40014800

08013714 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013714:	b480      	push	{r7}
 8013716:	b087      	sub	sp, #28
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	6a1b      	ldr	r3, [r3, #32]
 8013722:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6a1b      	ldr	r3, [r3, #32]
 8013728:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	685b      	ldr	r3, [r3, #4]
 8013734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801373c:	68fa      	ldr	r2, [r7, #12]
 801373e:	4b22      	ldr	r3, [pc, #136]	; (80137c8 <TIM_OC6_SetConfig+0xb4>)
 8013740:	4013      	ands	r3, r2
 8013742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	021b      	lsls	r3, r3, #8
 801374a:	68fa      	ldr	r2, [r7, #12]
 801374c:	4313      	orrs	r3, r2
 801374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	689b      	ldr	r3, [r3, #8]
 801375c:	051b      	lsls	r3, r3, #20
 801375e:	693a      	ldr	r2, [r7, #16]
 8013760:	4313      	orrs	r3, r2
 8013762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	4a19      	ldr	r2, [pc, #100]	; (80137cc <TIM_OC6_SetConfig+0xb8>)
 8013768:	4293      	cmp	r3, r2
 801376a:	d00f      	beq.n	801378c <TIM_OC6_SetConfig+0x78>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	4a18      	ldr	r2, [pc, #96]	; (80137d0 <TIM_OC6_SetConfig+0xbc>)
 8013770:	4293      	cmp	r3, r2
 8013772:	d00b      	beq.n	801378c <TIM_OC6_SetConfig+0x78>
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	4a17      	ldr	r2, [pc, #92]	; (80137d4 <TIM_OC6_SetConfig+0xc0>)
 8013778:	4293      	cmp	r3, r2
 801377a:	d007      	beq.n	801378c <TIM_OC6_SetConfig+0x78>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	4a16      	ldr	r2, [pc, #88]	; (80137d8 <TIM_OC6_SetConfig+0xc4>)
 8013780:	4293      	cmp	r3, r2
 8013782:	d003      	beq.n	801378c <TIM_OC6_SetConfig+0x78>
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	4a15      	ldr	r2, [pc, #84]	; (80137dc <TIM_OC6_SetConfig+0xc8>)
 8013788:	4293      	cmp	r3, r2
 801378a:	d109      	bne.n	80137a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013792:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	695b      	ldr	r3, [r3, #20]
 8013798:	029b      	lsls	r3, r3, #10
 801379a:	697a      	ldr	r2, [r7, #20]
 801379c:	4313      	orrs	r3, r2
 801379e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	697a      	ldr	r2, [r7, #20]
 80137a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	68fa      	ldr	r2, [r7, #12]
 80137aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	685a      	ldr	r2, [r3, #4]
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	693a      	ldr	r2, [r7, #16]
 80137b8:	621a      	str	r2, [r3, #32]
}
 80137ba:	bf00      	nop
 80137bc:	371c      	adds	r7, #28
 80137be:	46bd      	mov	sp, r7
 80137c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c4:	4770      	bx	lr
 80137c6:	bf00      	nop
 80137c8:	feff8fff 	.word	0xfeff8fff
 80137cc:	40010000 	.word	0x40010000
 80137d0:	40010400 	.word	0x40010400
 80137d4:	40014000 	.word	0x40014000
 80137d8:	40014400 	.word	0x40014400
 80137dc:	40014800 	.word	0x40014800

080137e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80137e0:	b480      	push	{r7}
 80137e2:	b087      	sub	sp, #28
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	60f8      	str	r0, [r7, #12]
 80137e8:	60b9      	str	r1, [r7, #8]
 80137ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	6a1b      	ldr	r3, [r3, #32]
 80137f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	6a1b      	ldr	r3, [r3, #32]
 80137f6:	f023 0201 	bic.w	r2, r3, #1
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	699b      	ldr	r3, [r3, #24]
 8013802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801380a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	011b      	lsls	r3, r3, #4
 8013810:	693a      	ldr	r2, [r7, #16]
 8013812:	4313      	orrs	r3, r2
 8013814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	f023 030a 	bic.w	r3, r3, #10
 801381c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801381e:	697a      	ldr	r2, [r7, #20]
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	4313      	orrs	r3, r2
 8013824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	693a      	ldr	r2, [r7, #16]
 801382a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	697a      	ldr	r2, [r7, #20]
 8013830:	621a      	str	r2, [r3, #32]
}
 8013832:	bf00      	nop
 8013834:	371c      	adds	r7, #28
 8013836:	46bd      	mov	sp, r7
 8013838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383c:	4770      	bx	lr

0801383e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801383e:	b480      	push	{r7}
 8013840:	b087      	sub	sp, #28
 8013842:	af00      	add	r7, sp, #0
 8013844:	60f8      	str	r0, [r7, #12]
 8013846:	60b9      	str	r1, [r7, #8]
 8013848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	6a1b      	ldr	r3, [r3, #32]
 801384e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	6a1b      	ldr	r3, [r3, #32]
 8013854:	f023 0210 	bic.w	r2, r3, #16
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	699b      	ldr	r3, [r3, #24]
 8013860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	031b      	lsls	r3, r3, #12
 801386e:	693a      	ldr	r2, [r7, #16]
 8013870:	4313      	orrs	r3, r2
 8013872:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013874:	697b      	ldr	r3, [r7, #20]
 8013876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801387a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	011b      	lsls	r3, r3, #4
 8013880:	697a      	ldr	r2, [r7, #20]
 8013882:	4313      	orrs	r3, r2
 8013884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	693a      	ldr	r2, [r7, #16]
 801388a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	697a      	ldr	r2, [r7, #20]
 8013890:	621a      	str	r2, [r3, #32]
}
 8013892:	bf00      	nop
 8013894:	371c      	adds	r7, #28
 8013896:	46bd      	mov	sp, r7
 8013898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389c:	4770      	bx	lr
	...

080138a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80138a0:	b480      	push	{r7}
 80138a2:	b085      	sub	sp, #20
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	689b      	ldr	r3, [r3, #8]
 80138ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80138b0:	68fa      	ldr	r2, [r7, #12]
 80138b2:	4b09      	ldr	r3, [pc, #36]	; (80138d8 <TIM_ITRx_SetConfig+0x38>)
 80138b4:	4013      	ands	r3, r2
 80138b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80138b8:	683a      	ldr	r2, [r7, #0]
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	4313      	orrs	r3, r2
 80138be:	f043 0307 	orr.w	r3, r3, #7
 80138c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	68fa      	ldr	r2, [r7, #12]
 80138c8:	609a      	str	r2, [r3, #8]
}
 80138ca:	bf00      	nop
 80138cc:	3714      	adds	r7, #20
 80138ce:	46bd      	mov	sp, r7
 80138d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d4:	4770      	bx	lr
 80138d6:	bf00      	nop
 80138d8:	ffcfff8f 	.word	0xffcfff8f

080138dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80138dc:	b480      	push	{r7}
 80138de:	b087      	sub	sp, #28
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	60b9      	str	r1, [r7, #8]
 80138e6:	607a      	str	r2, [r7, #4]
 80138e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	689b      	ldr	r3, [r3, #8]
 80138ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80138f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	021a      	lsls	r2, r3, #8
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	431a      	orrs	r2, r3
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	4313      	orrs	r3, r2
 8013904:	697a      	ldr	r2, [r7, #20]
 8013906:	4313      	orrs	r3, r2
 8013908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	697a      	ldr	r2, [r7, #20]
 801390e:	609a      	str	r2, [r3, #8]
}
 8013910:	bf00      	nop
 8013912:	371c      	adds	r7, #28
 8013914:	46bd      	mov	sp, r7
 8013916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391a:	4770      	bx	lr

0801391c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801391c:	b480      	push	{r7}
 801391e:	b087      	sub	sp, #28
 8013920:	af00      	add	r7, sp, #0
 8013922:	60f8      	str	r0, [r7, #12]
 8013924:	60b9      	str	r1, [r7, #8]
 8013926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	f003 031f 	and.w	r3, r3, #31
 801392e:	2201      	movs	r2, #1
 8013930:	fa02 f303 	lsl.w	r3, r2, r3
 8013934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	6a1a      	ldr	r2, [r3, #32]
 801393a:	697b      	ldr	r3, [r7, #20]
 801393c:	43db      	mvns	r3, r3
 801393e:	401a      	ands	r2, r3
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	6a1a      	ldr	r2, [r3, #32]
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	f003 031f 	and.w	r3, r3, #31
 801394e:	6879      	ldr	r1, [r7, #4]
 8013950:	fa01 f303 	lsl.w	r3, r1, r3
 8013954:	431a      	orrs	r2, r3
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	621a      	str	r2, [r3, #32]
}
 801395a:	bf00      	nop
 801395c:	371c      	adds	r7, #28
 801395e:	46bd      	mov	sp, r7
 8013960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013964:	4770      	bx	lr
	...

08013968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013968:	b480      	push	{r7}
 801396a:	b085      	sub	sp, #20
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
 8013970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013978:	2b01      	cmp	r3, #1
 801397a:	d101      	bne.n	8013980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801397c:	2302      	movs	r3, #2
 801397e:	e06d      	b.n	8013a5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2201      	movs	r2, #1
 8013984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2202      	movs	r2, #2
 801398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	685b      	ldr	r3, [r3, #4]
 8013996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	689b      	ldr	r3, [r3, #8]
 801399e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	4a30      	ldr	r2, [pc, #192]	; (8013a68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80139a6:	4293      	cmp	r3, r2
 80139a8:	d004      	beq.n	80139b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	4a2f      	ldr	r2, [pc, #188]	; (8013a6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80139b0:	4293      	cmp	r3, r2
 80139b2:	d108      	bne.n	80139c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80139ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	68fa      	ldr	r2, [r7, #12]
 80139c2:	4313      	orrs	r3, r2
 80139c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80139cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	68fa      	ldr	r2, [r7, #12]
 80139d4:	4313      	orrs	r3, r2
 80139d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	68fa      	ldr	r2, [r7, #12]
 80139de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	4a20      	ldr	r2, [pc, #128]	; (8013a68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d022      	beq.n	8013a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80139f2:	d01d      	beq.n	8013a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	4a1d      	ldr	r2, [pc, #116]	; (8013a70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80139fa:	4293      	cmp	r3, r2
 80139fc:	d018      	beq.n	8013a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	4a1c      	ldr	r2, [pc, #112]	; (8013a74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013a04:	4293      	cmp	r3, r2
 8013a06:	d013      	beq.n	8013a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	4a1a      	ldr	r2, [pc, #104]	; (8013a78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	d00e      	beq.n	8013a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	4a15      	ldr	r2, [pc, #84]	; (8013a6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013a18:	4293      	cmp	r3, r2
 8013a1a:	d009      	beq.n	8013a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	4a16      	ldr	r2, [pc, #88]	; (8013a7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013a22:	4293      	cmp	r3, r2
 8013a24:	d004      	beq.n	8013a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	4a15      	ldr	r2, [pc, #84]	; (8013a80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	d10c      	bne.n	8013a4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013a36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	689b      	ldr	r3, [r3, #8]
 8013a3c:	68ba      	ldr	r2, [r7, #8]
 8013a3e:	4313      	orrs	r3, r2
 8013a40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	68ba      	ldr	r2, [r7, #8]
 8013a48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2201      	movs	r2, #1
 8013a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2200      	movs	r2, #0
 8013a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013a5a:	2300      	movs	r3, #0
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	3714      	adds	r7, #20
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr
 8013a68:	40010000 	.word	0x40010000
 8013a6c:	40010400 	.word	0x40010400
 8013a70:	40000400 	.word	0x40000400
 8013a74:	40000800 	.word	0x40000800
 8013a78:	40000c00 	.word	0x40000c00
 8013a7c:	40001800 	.word	0x40001800
 8013a80:	40014000 	.word	0x40014000

08013a84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013a84:	b480      	push	{r7}
 8013a86:	b085      	sub	sp, #20
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
 8013a8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d101      	bne.n	8013aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013a9c:	2302      	movs	r3, #2
 8013a9e:	e065      	b.n	8013b6c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	68db      	ldr	r3, [r3, #12]
 8013ab2:	4313      	orrs	r3, r2
 8013ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	689b      	ldr	r3, [r3, #8]
 8013ac0:	4313      	orrs	r3, r2
 8013ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013aca:	683b      	ldr	r3, [r7, #0]
 8013acc:	685b      	ldr	r3, [r3, #4]
 8013ace:	4313      	orrs	r3, r2
 8013ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	4313      	orrs	r3, r2
 8013ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013ae6:	683b      	ldr	r3, [r7, #0]
 8013ae8:	691b      	ldr	r3, [r3, #16]
 8013aea:	4313      	orrs	r3, r2
 8013aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	695b      	ldr	r3, [r3, #20]
 8013af8:	4313      	orrs	r3, r2
 8013afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b06:	4313      	orrs	r3, r2
 8013b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013b10:	683b      	ldr	r3, [r7, #0]
 8013b12:	699b      	ldr	r3, [r3, #24]
 8013b14:	041b      	lsls	r3, r3, #16
 8013b16:	4313      	orrs	r3, r2
 8013b18:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	4a16      	ldr	r2, [pc, #88]	; (8013b78 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013b20:	4293      	cmp	r3, r2
 8013b22:	d004      	beq.n	8013b2e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	4a14      	ldr	r2, [pc, #80]	; (8013b7c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d115      	bne.n	8013b5a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b38:	051b      	lsls	r3, r3, #20
 8013b3a:	4313      	orrs	r3, r2
 8013b3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	69db      	ldr	r3, [r3, #28]
 8013b48:	4313      	orrs	r3, r2
 8013b4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	6a1b      	ldr	r3, [r3, #32]
 8013b56:	4313      	orrs	r3, r2
 8013b58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	68fa      	ldr	r2, [r7, #12]
 8013b60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2200      	movs	r2, #0
 8013b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013b6a:	2300      	movs	r3, #0
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3714      	adds	r7, #20
 8013b70:	46bd      	mov	sp, r7
 8013b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b76:	4770      	bx	lr
 8013b78:	40010000 	.word	0x40010000
 8013b7c:	40010400 	.word	0x40010400

08013b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013b80:	b480      	push	{r7}
 8013b82:	b083      	sub	sp, #12
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013b88:	bf00      	nop
 8013b8a:	370c      	adds	r7, #12
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b92:	4770      	bx	lr

08013b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013b94:	b480      	push	{r7}
 8013b96:	b083      	sub	sp, #12
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013b9c:	bf00      	nop
 8013b9e:	370c      	adds	r7, #12
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba6:	4770      	bx	lr

08013ba8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013ba8:	b480      	push	{r7}
 8013baa:	b083      	sub	sp, #12
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013bb0:	bf00      	nop
 8013bb2:	370c      	adds	r7, #12
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr

08013bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d101      	bne.n	8013bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013bca:	2301      	movs	r3, #1
 8013bcc:	e042      	b.n	8013c54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d106      	bne.n	8013be6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2200      	movs	r2, #0
 8013bdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f7f1 f921 	bl	8004e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2224      	movs	r2, #36	; 0x24
 8013bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	681a      	ldr	r2, [r3, #0]
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	f022 0201 	bic.w	r2, r2, #1
 8013bfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d002      	beq.n	8013c0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f001 fbc2 	bl	8015390 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f000 fe57 	bl	80148c0 <UART_SetConfig>
 8013c12:	4603      	mov	r3, r0
 8013c14:	2b01      	cmp	r3, #1
 8013c16:	d101      	bne.n	8013c1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013c18:	2301      	movs	r3, #1
 8013c1a:	e01b      	b.n	8013c54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	685a      	ldr	r2, [r3, #4]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	689a      	ldr	r2, [r3, #8]
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	681a      	ldr	r2, [r3, #0]
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	f042 0201 	orr.w	r2, r2, #1
 8013c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013c4c:	6878      	ldr	r0, [r7, #4]
 8013c4e:	f001 fc41 	bl	80154d4 <UART_CheckIdleState>
 8013c52:	4603      	mov	r3, r0
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3708      	adds	r7, #8
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b08a      	sub	sp, #40	; 0x28
 8013c60:	af02      	add	r7, sp, #8
 8013c62:	60f8      	str	r0, [r7, #12]
 8013c64:	60b9      	str	r1, [r7, #8]
 8013c66:	603b      	str	r3, [r7, #0]
 8013c68:	4613      	mov	r3, r2
 8013c6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c72:	2b20      	cmp	r3, #32
 8013c74:	d17b      	bne.n	8013d6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013c76:	68bb      	ldr	r3, [r7, #8]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d002      	beq.n	8013c82 <HAL_UART_Transmit+0x26>
 8013c7c:	88fb      	ldrh	r3, [r7, #6]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d101      	bne.n	8013c86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013c82:	2301      	movs	r3, #1
 8013c84:	e074      	b.n	8013d70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	2200      	movs	r2, #0
 8013c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2221      	movs	r2, #33	; 0x21
 8013c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013c96:	f7f1 fd15 	bl	80056c4 <HAL_GetTick>
 8013c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	88fa      	ldrh	r2, [r7, #6]
 8013ca0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	88fa      	ldrh	r2, [r7, #6]
 8013ca8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	689b      	ldr	r3, [r3, #8]
 8013cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013cb4:	d108      	bne.n	8013cc8 <HAL_UART_Transmit+0x6c>
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	691b      	ldr	r3, [r3, #16]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d104      	bne.n	8013cc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	61bb      	str	r3, [r7, #24]
 8013cc6:	e003      	b.n	8013cd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013cc8:	68bb      	ldr	r3, [r7, #8]
 8013cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013cd0:	e030      	b.n	8013d34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	9300      	str	r3, [sp, #0]
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	2180      	movs	r1, #128	; 0x80
 8013cdc:	68f8      	ldr	r0, [r7, #12]
 8013cde:	f001 fca3 	bl	8015628 <UART_WaitOnFlagUntilTimeout>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d005      	beq.n	8013cf4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	2220      	movs	r2, #32
 8013cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8013cf0:	2303      	movs	r3, #3
 8013cf2:	e03d      	b.n	8013d70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013cf4:	69fb      	ldr	r3, [r7, #28]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d10b      	bne.n	8013d12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013cfa:	69bb      	ldr	r3, [r7, #24]
 8013cfc:	881b      	ldrh	r3, [r3, #0]
 8013cfe:	461a      	mov	r2, r3
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013d08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013d0a:	69bb      	ldr	r3, [r7, #24]
 8013d0c:	3302      	adds	r3, #2
 8013d0e:	61bb      	str	r3, [r7, #24]
 8013d10:	e007      	b.n	8013d22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	781a      	ldrb	r2, [r3, #0]
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	3301      	adds	r3, #1
 8013d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	3b01      	subs	r3, #1
 8013d2c:	b29a      	uxth	r2, r3
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d1c8      	bne.n	8013cd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	9300      	str	r3, [sp, #0]
 8013d44:	697b      	ldr	r3, [r7, #20]
 8013d46:	2200      	movs	r2, #0
 8013d48:	2140      	movs	r1, #64	; 0x40
 8013d4a:	68f8      	ldr	r0, [r7, #12]
 8013d4c:	f001 fc6c 	bl	8015628 <UART_WaitOnFlagUntilTimeout>
 8013d50:	4603      	mov	r3, r0
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d005      	beq.n	8013d62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	2220      	movs	r2, #32
 8013d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8013d5e:	2303      	movs	r3, #3
 8013d60:	e006      	b.n	8013d70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2220      	movs	r2, #32
 8013d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	e000      	b.n	8013d70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8013d6e:	2302      	movs	r3, #2
  }
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3720      	adds	r7, #32
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b08a      	sub	sp, #40	; 0x28
 8013d7c:	af02      	add	r7, sp, #8
 8013d7e:	60f8      	str	r0, [r7, #12]
 8013d80:	60b9      	str	r1, [r7, #8]
 8013d82:	603b      	str	r3, [r7, #0]
 8013d84:	4613      	mov	r3, r2
 8013d86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d8e:	2b20      	cmp	r3, #32
 8013d90:	f040 80b5 	bne.w	8013efe <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d002      	beq.n	8013da0 <HAL_UART_Receive+0x28>
 8013d9a:	88fb      	ldrh	r3, [r7, #6]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d101      	bne.n	8013da4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8013da0:	2301      	movs	r3, #1
 8013da2:	e0ad      	b.n	8013f00 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	2200      	movs	r2, #0
 8013da8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	2222      	movs	r2, #34	; 0x22
 8013db0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	2200      	movs	r2, #0
 8013db8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013dba:	f7f1 fc83 	bl	80056c4 <HAL_GetTick>
 8013dbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	88fa      	ldrh	r2, [r7, #6]
 8013dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	88fa      	ldrh	r2, [r7, #6]
 8013dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	689b      	ldr	r3, [r3, #8]
 8013dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013dd8:	d10e      	bne.n	8013df8 <HAL_UART_Receive+0x80>
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	691b      	ldr	r3, [r3, #16]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d105      	bne.n	8013dee <HAL_UART_Receive+0x76>
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013de8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013dec:	e02d      	b.n	8013e4a <HAL_UART_Receive+0xd2>
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	22ff      	movs	r2, #255	; 0xff
 8013df2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013df6:	e028      	b.n	8013e4a <HAL_UART_Receive+0xd2>
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	689b      	ldr	r3, [r3, #8]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d10d      	bne.n	8013e1c <HAL_UART_Receive+0xa4>
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	691b      	ldr	r3, [r3, #16]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d104      	bne.n	8013e12 <HAL_UART_Receive+0x9a>
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	22ff      	movs	r2, #255	; 0xff
 8013e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013e10:	e01b      	b.n	8013e4a <HAL_UART_Receive+0xd2>
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	227f      	movs	r2, #127	; 0x7f
 8013e16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013e1a:	e016      	b.n	8013e4a <HAL_UART_Receive+0xd2>
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	689b      	ldr	r3, [r3, #8]
 8013e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013e24:	d10d      	bne.n	8013e42 <HAL_UART_Receive+0xca>
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	691b      	ldr	r3, [r3, #16]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d104      	bne.n	8013e38 <HAL_UART_Receive+0xc0>
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	227f      	movs	r2, #127	; 0x7f
 8013e32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013e36:	e008      	b.n	8013e4a <HAL_UART_Receive+0xd2>
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	223f      	movs	r2, #63	; 0x3f
 8013e3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013e40:	e003      	b.n	8013e4a <HAL_UART_Receive+0xd2>
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	2200      	movs	r2, #0
 8013e46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e50:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	689b      	ldr	r3, [r3, #8]
 8013e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e5a:	d108      	bne.n	8013e6e <HAL_UART_Receive+0xf6>
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	691b      	ldr	r3, [r3, #16]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d104      	bne.n	8013e6e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8013e64:	2300      	movs	r3, #0
 8013e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	61bb      	str	r3, [r7, #24]
 8013e6c:	e003      	b.n	8013e76 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013e72:	2300      	movs	r3, #0
 8013e74:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8013e76:	e036      	b.n	8013ee6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	9300      	str	r3, [sp, #0]
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	2200      	movs	r2, #0
 8013e80:	2120      	movs	r1, #32
 8013e82:	68f8      	ldr	r0, [r7, #12]
 8013e84:	f001 fbd0 	bl	8015628 <UART_WaitOnFlagUntilTimeout>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d005      	beq.n	8013e9a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	2220      	movs	r2, #32
 8013e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8013e96:	2303      	movs	r3, #3
 8013e98:	e032      	b.n	8013f00 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8013e9a:	69fb      	ldr	r3, [r7, #28]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d10c      	bne.n	8013eba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ea6:	b29a      	uxth	r2, r3
 8013ea8:	8a7b      	ldrh	r3, [r7, #18]
 8013eaa:	4013      	ands	r3, r2
 8013eac:	b29a      	uxth	r2, r3
 8013eae:	69bb      	ldr	r3, [r7, #24]
 8013eb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	3302      	adds	r3, #2
 8013eb6:	61bb      	str	r3, [r7, #24]
 8013eb8:	e00c      	b.n	8013ed4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ec0:	b2da      	uxtb	r2, r3
 8013ec2:	8a7b      	ldrh	r3, [r7, #18]
 8013ec4:	b2db      	uxtb	r3, r3
 8013ec6:	4013      	ands	r3, r2
 8013ec8:	b2da      	uxtb	r2, r3
 8013eca:	69fb      	ldr	r3, [r7, #28]
 8013ecc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8013ece:	69fb      	ldr	r3, [r7, #28]
 8013ed0:	3301      	adds	r3, #1
 8013ed2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013eda:	b29b      	uxth	r3, r3
 8013edc:	3b01      	subs	r3, #1
 8013ede:	b29a      	uxth	r2, r3
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d1c2      	bne.n	8013e78 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	2220      	movs	r2, #32
 8013ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8013efa:	2300      	movs	r3, #0
 8013efc:	e000      	b.n	8013f00 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8013efe:	2302      	movs	r3, #2
  }
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	3720      	adds	r7, #32
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b08a      	sub	sp, #40	; 0x28
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	4613      	mov	r3, r2
 8013f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013f1c:	2b20      	cmp	r3, #32
 8013f1e:	d137      	bne.n	8013f90 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d002      	beq.n	8013f2c <HAL_UART_Receive_IT+0x24>
 8013f26:	88fb      	ldrh	r3, [r7, #6]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d101      	bne.n	8013f30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	e030      	b.n	8013f92 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	2200      	movs	r2, #0
 8013f34:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	4a18      	ldr	r2, [pc, #96]	; (8013f9c <HAL_UART_Receive_IT+0x94>)
 8013f3c:	4293      	cmp	r3, r2
 8013f3e:	d01f      	beq.n	8013f80 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d018      	beq.n	8013f80 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	e853 3f00 	ldrex	r3, [r3]
 8013f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013f62:	627b      	str	r3, [r7, #36]	; 0x24
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	461a      	mov	r2, r3
 8013f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6c:	623b      	str	r3, [r7, #32]
 8013f6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f70:	69f9      	ldr	r1, [r7, #28]
 8013f72:	6a3a      	ldr	r2, [r7, #32]
 8013f74:	e841 2300 	strex	r3, r2, [r1]
 8013f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8013f7a:	69bb      	ldr	r3, [r7, #24]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d1e6      	bne.n	8013f4e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013f80:	88fb      	ldrh	r3, [r7, #6]
 8013f82:	461a      	mov	r2, r3
 8013f84:	68b9      	ldr	r1, [r7, #8]
 8013f86:	68f8      	ldr	r0, [r7, #12]
 8013f88:	f001 fbbc 	bl	8015704 <UART_Start_Receive_IT>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	e000      	b.n	8013f92 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013f90:	2302      	movs	r3, #2
  }
}
 8013f92:	4618      	mov	r0, r3
 8013f94:	3728      	adds	r7, #40	; 0x28
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
 8013f9a:	bf00      	nop
 8013f9c:	58000c00 	.word	0x58000c00

08013fa0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b09a      	sub	sp, #104	; 0x68
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fb0:	e853 3f00 	ldrex	r3, [r3]
 8013fb4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013fbc:	667b      	str	r3, [r7, #100]	; 0x64
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	461a      	mov	r2, r3
 8013fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8013fc8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013fcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013fce:	e841 2300 	strex	r3, r2, [r1]
 8013fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d1e6      	bne.n	8013fa8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	3308      	adds	r3, #8
 8013fe0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fe4:	e853 3f00 	ldrex	r3, [r3]
 8013fe8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fec:	4b46      	ldr	r3, [pc, #280]	; (8014108 <HAL_UART_AbortReceive+0x168>)
 8013fee:	4013      	ands	r3, r2
 8013ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	3308      	adds	r3, #8
 8013ff8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013ffa:	643a      	str	r2, [r7, #64]	; 0x40
 8013ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ffe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014002:	e841 2300 	strex	r3, r2, [r1]
 8014006:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801400a:	2b00      	cmp	r3, #0
 801400c:	d1e5      	bne.n	8013fda <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014012:	2b01      	cmp	r3, #1
 8014014:	d118      	bne.n	8014048 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801401c:	6a3b      	ldr	r3, [r7, #32]
 801401e:	e853 3f00 	ldrex	r3, [r3]
 8014022:	61fb      	str	r3, [r7, #28]
   return(result);
 8014024:	69fb      	ldr	r3, [r7, #28]
 8014026:	f023 0310 	bic.w	r3, r3, #16
 801402a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	461a      	mov	r2, r3
 8014032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014036:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801403a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801403c:	e841 2300 	strex	r3, r2, [r1]
 8014040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014044:	2b00      	cmp	r3, #0
 8014046:	d1e6      	bne.n	8014016 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	689b      	ldr	r3, [r3, #8]
 801404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014052:	2b40      	cmp	r3, #64	; 0x40
 8014054:	d13b      	bne.n	80140ce <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	3308      	adds	r3, #8
 801405c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	e853 3f00 	ldrex	r3, [r3]
 8014064:	60bb      	str	r3, [r7, #8]
   return(result);
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801406c:	65bb      	str	r3, [r7, #88]	; 0x58
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	3308      	adds	r3, #8
 8014074:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014076:	61ba      	str	r2, [r7, #24]
 8014078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801407a:	6979      	ldr	r1, [r7, #20]
 801407c:	69ba      	ldr	r2, [r7, #24]
 801407e:	e841 2300 	strex	r3, r2, [r1]
 8014082:	613b      	str	r3, [r7, #16]
   return(result);
 8014084:	693b      	ldr	r3, [r7, #16]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d1e5      	bne.n	8014056 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014090:	2b00      	cmp	r3, #0
 8014092:	d01c      	beq.n	80140ce <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801409a:	2200      	movs	r2, #0
 801409c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140a4:	4618      	mov	r0, r3
 80140a6:	f7f4 fa73 	bl	8008590 <HAL_DMA_Abort>
 80140aa:	4603      	mov	r3, r0
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d00e      	beq.n	80140ce <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140b6:	4618      	mov	r0, r3
 80140b8:	f7f5 ff06 	bl	8009ec8 <HAL_DMA_GetError>
 80140bc:	4603      	mov	r3, r0
 80140be:	2b20      	cmp	r3, #32
 80140c0:	d105      	bne.n	80140ce <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	2210      	movs	r2, #16
 80140c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80140ca:	2303      	movs	r3, #3
 80140cc:	e017      	b.n	80140fe <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2200      	movs	r2, #0
 80140d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	220f      	movs	r2, #15
 80140dc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	699a      	ldr	r2, [r3, #24]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	f042 0208 	orr.w	r2, r2, #8
 80140ec:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2220      	movs	r2, #32
 80140f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2200      	movs	r2, #0
 80140fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80140fc:	2300      	movs	r3, #0
}
 80140fe:	4618      	mov	r0, r3
 8014100:	3768      	adds	r7, #104	; 0x68
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}
 8014106:	bf00      	nop
 8014108:	effffffe 	.word	0xeffffffe

0801410c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b0ba      	sub	sp, #232	; 0xe8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	69db      	ldr	r3, [r3, #28]
 801411a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	689b      	ldr	r3, [r3, #8]
 801412e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8014132:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8014136:	f640 030f 	movw	r3, #2063	; 0x80f
 801413a:	4013      	ands	r3, r2
 801413c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014144:	2b00      	cmp	r3, #0
 8014146:	d11b      	bne.n	8014180 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801414c:	f003 0320 	and.w	r3, r3, #32
 8014150:	2b00      	cmp	r3, #0
 8014152:	d015      	beq.n	8014180 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014158:	f003 0320 	and.w	r3, r3, #32
 801415c:	2b00      	cmp	r3, #0
 801415e:	d105      	bne.n	801416c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014168:	2b00      	cmp	r3, #0
 801416a:	d009      	beq.n	8014180 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014170:	2b00      	cmp	r3, #0
 8014172:	f000 8377 	beq.w	8014864 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	4798      	blx	r3
      }
      return;
 801417e:	e371      	b.n	8014864 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014184:	2b00      	cmp	r3, #0
 8014186:	f000 8123 	beq.w	80143d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801418a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801418e:	4b8d      	ldr	r3, [pc, #564]	; (80143c4 <HAL_UART_IRQHandler+0x2b8>)
 8014190:	4013      	ands	r3, r2
 8014192:	2b00      	cmp	r3, #0
 8014194:	d106      	bne.n	80141a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8014196:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801419a:	4b8b      	ldr	r3, [pc, #556]	; (80143c8 <HAL_UART_IRQHandler+0x2bc>)
 801419c:	4013      	ands	r3, r2
 801419e:	2b00      	cmp	r3, #0
 80141a0:	f000 8116 	beq.w	80143d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80141a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141a8:	f003 0301 	and.w	r3, r3, #1
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d011      	beq.n	80141d4 <HAL_UART_IRQHandler+0xc8>
 80141b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80141b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d00b      	beq.n	80141d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	2201      	movs	r2, #1
 80141c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80141ca:	f043 0201 	orr.w	r2, r3, #1
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80141d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141d8:	f003 0302 	and.w	r3, r3, #2
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d011      	beq.n	8014204 <HAL_UART_IRQHandler+0xf8>
 80141e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80141e4:	f003 0301 	and.w	r3, r3, #1
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d00b      	beq.n	8014204 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	2202      	movs	r2, #2
 80141f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80141fa:	f043 0204 	orr.w	r2, r3, #4
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014208:	f003 0304 	and.w	r3, r3, #4
 801420c:	2b00      	cmp	r3, #0
 801420e:	d011      	beq.n	8014234 <HAL_UART_IRQHandler+0x128>
 8014210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014214:	f003 0301 	and.w	r3, r3, #1
 8014218:	2b00      	cmp	r3, #0
 801421a:	d00b      	beq.n	8014234 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2204      	movs	r2, #4
 8014222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801422a:	f043 0202 	orr.w	r2, r3, #2
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014238:	f003 0308 	and.w	r3, r3, #8
 801423c:	2b00      	cmp	r3, #0
 801423e:	d017      	beq.n	8014270 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014244:	f003 0320 	and.w	r3, r3, #32
 8014248:	2b00      	cmp	r3, #0
 801424a:	d105      	bne.n	8014258 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801424c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014250:	4b5c      	ldr	r3, [pc, #368]	; (80143c4 <HAL_UART_IRQHandler+0x2b8>)
 8014252:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014254:	2b00      	cmp	r3, #0
 8014256:	d00b      	beq.n	8014270 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	2208      	movs	r2, #8
 801425e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014266:	f043 0208 	orr.w	r2, r3, #8
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014278:	2b00      	cmp	r3, #0
 801427a:	d012      	beq.n	80142a2 <HAL_UART_IRQHandler+0x196>
 801427c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014280:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014284:	2b00      	cmp	r3, #0
 8014286:	d00c      	beq.n	80142a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014290:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014298:	f043 0220 	orr.w	r2, r3, #32
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	f000 82dd 	beq.w	8014868 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80142ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80142b2:	f003 0320 	and.w	r3, r3, #32
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d013      	beq.n	80142e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80142ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80142be:	f003 0320 	and.w	r3, r3, #32
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d105      	bne.n	80142d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80142c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80142ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d007      	beq.n	80142e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d003      	beq.n	80142e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	689b      	ldr	r3, [r3, #8]
 80142f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80142f6:	2b40      	cmp	r3, #64	; 0x40
 80142f8:	d005      	beq.n	8014306 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80142fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80142fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014302:	2b00      	cmp	r3, #0
 8014304:	d054      	beq.n	80143b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014306:	6878      	ldr	r0, [r7, #4]
 8014308:	f001 fb1e 	bl	8015948 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	689b      	ldr	r3, [r3, #8]
 8014312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014316:	2b40      	cmp	r3, #64	; 0x40
 8014318:	d146      	bne.n	80143a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	3308      	adds	r3, #8
 8014320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014328:	e853 3f00 	ldrex	r3, [r3]
 801432c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	3308      	adds	r3, #8
 8014342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014346:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801434a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801434e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014356:	e841 2300 	strex	r3, r2, [r1]
 801435a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801435e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014362:	2b00      	cmp	r3, #0
 8014364:	d1d9      	bne.n	801431a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801436c:	2b00      	cmp	r3, #0
 801436e:	d017      	beq.n	80143a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014376:	4a15      	ldr	r2, [pc, #84]	; (80143cc <HAL_UART_IRQHandler+0x2c0>)
 8014378:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014380:	4618      	mov	r0, r3
 8014382:	f7f4 fc23 	bl	8008bcc <HAL_DMA_Abort_IT>
 8014386:	4603      	mov	r3, r0
 8014388:	2b00      	cmp	r3, #0
 801438a:	d019      	beq.n	80143c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014394:	687a      	ldr	r2, [r7, #4]
 8014396:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801439a:	4610      	mov	r0, r2
 801439c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801439e:	e00f      	b.n	80143c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f000 fa77 	bl	8014894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143a6:	e00b      	b.n	80143c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f000 fa73 	bl	8014894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143ae:	e007      	b.n	80143c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f000 fa6f 	bl	8014894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2200      	movs	r2, #0
 80143ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80143be:	e253      	b.n	8014868 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143c0:	bf00      	nop
    return;
 80143c2:	e251      	b.n	8014868 <HAL_UART_IRQHandler+0x75c>
 80143c4:	10000001 	.word	0x10000001
 80143c8:	04000120 	.word	0x04000120
 80143cc:	08015a15 	.word	0x08015a15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143d4:	2b01      	cmp	r3, #1
 80143d6:	f040 81e7 	bne.w	80147a8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80143da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80143de:	f003 0310 	and.w	r3, r3, #16
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	f000 81e0 	beq.w	80147a8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80143e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80143ec:	f003 0310 	and.w	r3, r3, #16
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	f000 81d9 	beq.w	80147a8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	2210      	movs	r2, #16
 80143fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	689b      	ldr	r3, [r3, #8]
 8014404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014408:	2b40      	cmp	r3, #64	; 0x40
 801440a:	f040 8151 	bne.w	80146b0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	4a96      	ldr	r2, [pc, #600]	; (8014670 <HAL_UART_IRQHandler+0x564>)
 8014418:	4293      	cmp	r3, r2
 801441a:	d068      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	4a93      	ldr	r2, [pc, #588]	; (8014674 <HAL_UART_IRQHandler+0x568>)
 8014426:	4293      	cmp	r3, r2
 8014428:	d061      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	4a91      	ldr	r2, [pc, #580]	; (8014678 <HAL_UART_IRQHandler+0x56c>)
 8014434:	4293      	cmp	r3, r2
 8014436:	d05a      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	4a8e      	ldr	r2, [pc, #568]	; (801467c <HAL_UART_IRQHandler+0x570>)
 8014442:	4293      	cmp	r3, r2
 8014444:	d053      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	4a8c      	ldr	r2, [pc, #560]	; (8014680 <HAL_UART_IRQHandler+0x574>)
 8014450:	4293      	cmp	r3, r2
 8014452:	d04c      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	4a89      	ldr	r2, [pc, #548]	; (8014684 <HAL_UART_IRQHandler+0x578>)
 801445e:	4293      	cmp	r3, r2
 8014460:	d045      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	4a87      	ldr	r2, [pc, #540]	; (8014688 <HAL_UART_IRQHandler+0x57c>)
 801446c:	4293      	cmp	r3, r2
 801446e:	d03e      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	4a84      	ldr	r2, [pc, #528]	; (801468c <HAL_UART_IRQHandler+0x580>)
 801447a:	4293      	cmp	r3, r2
 801447c:	d037      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	4a82      	ldr	r2, [pc, #520]	; (8014690 <HAL_UART_IRQHandler+0x584>)
 8014488:	4293      	cmp	r3, r2
 801448a:	d030      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	4a7f      	ldr	r2, [pc, #508]	; (8014694 <HAL_UART_IRQHandler+0x588>)
 8014496:	4293      	cmp	r3, r2
 8014498:	d029      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	4a7d      	ldr	r2, [pc, #500]	; (8014698 <HAL_UART_IRQHandler+0x58c>)
 80144a4:	4293      	cmp	r3, r2
 80144a6:	d022      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	4a7a      	ldr	r2, [pc, #488]	; (801469c <HAL_UART_IRQHandler+0x590>)
 80144b2:	4293      	cmp	r3, r2
 80144b4:	d01b      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	4a78      	ldr	r2, [pc, #480]	; (80146a0 <HAL_UART_IRQHandler+0x594>)
 80144c0:	4293      	cmp	r3, r2
 80144c2:	d014      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	4a75      	ldr	r2, [pc, #468]	; (80146a4 <HAL_UART_IRQHandler+0x598>)
 80144ce:	4293      	cmp	r3, r2
 80144d0:	d00d      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	4a73      	ldr	r2, [pc, #460]	; (80146a8 <HAL_UART_IRQHandler+0x59c>)
 80144dc:	4293      	cmp	r3, r2
 80144de:	d006      	beq.n	80144ee <HAL_UART_IRQHandler+0x3e2>
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	4a70      	ldr	r2, [pc, #448]	; (80146ac <HAL_UART_IRQHandler+0x5a0>)
 80144ea:	4293      	cmp	r3, r2
 80144ec:	d106      	bne.n	80144fc <HAL_UART_IRQHandler+0x3f0>
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	685b      	ldr	r3, [r3, #4]
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	e005      	b.n	8014508 <HAL_UART_IRQHandler+0x3fc>
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	685b      	ldr	r3, [r3, #4]
 8014506:	b29b      	uxth	r3, r3
 8014508:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801450c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014510:	2b00      	cmp	r3, #0
 8014512:	f000 81ab 	beq.w	801486c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801451c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014520:	429a      	cmp	r2, r3
 8014522:	f080 81a3 	bcs.w	801486c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801452c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014536:	69db      	ldr	r3, [r3, #28]
 8014538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801453c:	f000 8087 	beq.w	801464e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801454c:	e853 3f00 	ldrex	r3, [r3]
 8014550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801455c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	461a      	mov	r2, r3
 8014566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801456a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801456e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014572:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801457a:	e841 2300 	strex	r3, r2, [r1]
 801457e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014586:	2b00      	cmp	r3, #0
 8014588:	d1da      	bne.n	8014540 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	3308      	adds	r3, #8
 8014590:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014594:	e853 3f00 	ldrex	r3, [r3]
 8014598:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801459a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801459c:	f023 0301 	bic.w	r3, r3, #1
 80145a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	3308      	adds	r3, #8
 80145aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80145ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80145b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80145b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80145ba:	e841 2300 	strex	r3, r2, [r1]
 80145be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80145c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d1e1      	bne.n	801458a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	3308      	adds	r3, #8
 80145cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80145d0:	e853 3f00 	ldrex	r3, [r3]
 80145d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80145d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80145d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80145dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	3308      	adds	r3, #8
 80145e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80145ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80145ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80145f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80145f2:	e841 2300 	strex	r3, r2, [r1]
 80145f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80145f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d1e3      	bne.n	80145c6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2220      	movs	r2, #32
 8014602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2200      	movs	r2, #0
 801460a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014614:	e853 3f00 	ldrex	r3, [r3]
 8014618:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801461a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801461c:	f023 0310 	bic.w	r3, r3, #16
 8014620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	461a      	mov	r2, r3
 801462a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801462e:	65bb      	str	r3, [r7, #88]	; 0x58
 8014630:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014632:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014636:	e841 2300 	strex	r3, r2, [r1]
 801463a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801463c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801463e:	2b00      	cmp	r3, #0
 8014640:	d1e4      	bne.n	801460c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014648:	4618      	mov	r0, r3
 801464a:	f7f3 ffa1 	bl	8008590 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	2202      	movs	r2, #2
 8014652:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014660:	b29b      	uxth	r3, r3
 8014662:	1ad3      	subs	r3, r2, r3
 8014664:	b29b      	uxth	r3, r3
 8014666:	4619      	mov	r1, r3
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f000 f91d 	bl	80148a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801466e:	e0fd      	b.n	801486c <HAL_UART_IRQHandler+0x760>
 8014670:	40020010 	.word	0x40020010
 8014674:	40020028 	.word	0x40020028
 8014678:	40020040 	.word	0x40020040
 801467c:	40020058 	.word	0x40020058
 8014680:	40020070 	.word	0x40020070
 8014684:	40020088 	.word	0x40020088
 8014688:	400200a0 	.word	0x400200a0
 801468c:	400200b8 	.word	0x400200b8
 8014690:	40020410 	.word	0x40020410
 8014694:	40020428 	.word	0x40020428
 8014698:	40020440 	.word	0x40020440
 801469c:	40020458 	.word	0x40020458
 80146a0:	40020470 	.word	0x40020470
 80146a4:	40020488 	.word	0x40020488
 80146a8:	400204a0 	.word	0x400204a0
 80146ac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146bc:	b29b      	uxth	r3, r3
 80146be:	1ad3      	subs	r3, r2, r3
 80146c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146ca:	b29b      	uxth	r3, r3
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	f000 80cf 	beq.w	8014870 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80146d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	f000 80ca 	beq.w	8014870 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e4:	e853 3f00 	ldrex	r3, [r3]
 80146e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80146ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80146f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	461a      	mov	r2, r3
 80146fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80146fe:	647b      	str	r3, [r7, #68]	; 0x44
 8014700:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014702:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014706:	e841 2300 	strex	r3, r2, [r1]
 801470a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801470c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801470e:	2b00      	cmp	r3, #0
 8014710:	d1e4      	bne.n	80146dc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	3308      	adds	r3, #8
 8014718:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471c:	e853 3f00 	ldrex	r3, [r3]
 8014720:	623b      	str	r3, [r7, #32]
   return(result);
 8014722:	6a3a      	ldr	r2, [r7, #32]
 8014724:	4b55      	ldr	r3, [pc, #340]	; (801487c <HAL_UART_IRQHandler+0x770>)
 8014726:	4013      	ands	r3, r2
 8014728:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	3308      	adds	r3, #8
 8014732:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014736:	633a      	str	r2, [r7, #48]	; 0x30
 8014738:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801473a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801473c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801473e:	e841 2300 	strex	r3, r2, [r1]
 8014742:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014746:	2b00      	cmp	r3, #0
 8014748:	d1e3      	bne.n	8014712 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2220      	movs	r2, #32
 801474e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2200      	movs	r2, #0
 8014756:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2200      	movs	r2, #0
 801475c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014764:	693b      	ldr	r3, [r7, #16]
 8014766:	e853 3f00 	ldrex	r3, [r3]
 801476a:	60fb      	str	r3, [r7, #12]
   return(result);
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	f023 0310 	bic.w	r3, r3, #16
 8014772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	461a      	mov	r2, r3
 801477c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014780:	61fb      	str	r3, [r7, #28]
 8014782:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014784:	69b9      	ldr	r1, [r7, #24]
 8014786:	69fa      	ldr	r2, [r7, #28]
 8014788:	e841 2300 	strex	r3, r2, [r1]
 801478c:	617b      	str	r3, [r7, #20]
   return(result);
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d1e4      	bne.n	801475e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2202      	movs	r2, #2
 8014798:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801479a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801479e:	4619      	mov	r1, r3
 80147a0:	6878      	ldr	r0, [r7, #4]
 80147a2:	f000 f881 	bl	80148a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80147a6:	e063      	b.n	8014870 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80147a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80147ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d00e      	beq.n	80147d2 <HAL_UART_IRQHandler+0x6c6>
 80147b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80147b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d008      	beq.n	80147d2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80147c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f001 fe80 	bl	80164d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80147d0:	e051      	b.n	8014876 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80147d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80147d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d014      	beq.n	8014808 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80147de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80147e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d105      	bne.n	80147f6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80147ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80147ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d008      	beq.n	8014808 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d03a      	beq.n	8014874 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	4798      	blx	r3
    }
    return;
 8014806:	e035      	b.n	8014874 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014810:	2b00      	cmp	r3, #0
 8014812:	d009      	beq.n	8014828 <HAL_UART_IRQHandler+0x71c>
 8014814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801481c:	2b00      	cmp	r3, #0
 801481e:	d003      	beq.n	8014828 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f001 f90d 	bl	8015a40 <UART_EndTransmit_IT>
    return;
 8014826:	e026      	b.n	8014876 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801482c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014830:	2b00      	cmp	r3, #0
 8014832:	d009      	beq.n	8014848 <HAL_UART_IRQHandler+0x73c>
 8014834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014838:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801483c:	2b00      	cmp	r3, #0
 801483e:	d003      	beq.n	8014848 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f001 fe59 	bl	80164f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014846:	e016      	b.n	8014876 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801484c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014850:	2b00      	cmp	r3, #0
 8014852:	d010      	beq.n	8014876 <HAL_UART_IRQHandler+0x76a>
 8014854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014858:	2b00      	cmp	r3, #0
 801485a:	da0c      	bge.n	8014876 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f001 fe41 	bl	80164e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014862:	e008      	b.n	8014876 <HAL_UART_IRQHandler+0x76a>
      return;
 8014864:	bf00      	nop
 8014866:	e006      	b.n	8014876 <HAL_UART_IRQHandler+0x76a>
    return;
 8014868:	bf00      	nop
 801486a:	e004      	b.n	8014876 <HAL_UART_IRQHandler+0x76a>
      return;
 801486c:	bf00      	nop
 801486e:	e002      	b.n	8014876 <HAL_UART_IRQHandler+0x76a>
      return;
 8014870:	bf00      	nop
 8014872:	e000      	b.n	8014876 <HAL_UART_IRQHandler+0x76a>
    return;
 8014874:	bf00      	nop
  }
}
 8014876:	37e8      	adds	r7, #232	; 0xe8
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}
 801487c:	effffffe 	.word	0xeffffffe

08014880 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014880:	b480      	push	{r7}
 8014882:	b083      	sub	sp, #12
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014888:	bf00      	nop
 801488a:	370c      	adds	r7, #12
 801488c:	46bd      	mov	sp, r7
 801488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014892:	4770      	bx	lr

08014894 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014894:	b480      	push	{r7}
 8014896:	b083      	sub	sp, #12
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801489c:	bf00      	nop
 801489e:	370c      	adds	r7, #12
 80148a0:	46bd      	mov	sp, r7
 80148a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a6:	4770      	bx	lr

080148a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80148a8:	b480      	push	{r7}
 80148aa:	b083      	sub	sp, #12
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
 80148b0:	460b      	mov	r3, r1
 80148b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80148b4:	bf00      	nop
 80148b6:	370c      	adds	r7, #12
 80148b8:	46bd      	mov	sp, r7
 80148ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148be:	4770      	bx	lr

080148c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80148c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80148c4:	b092      	sub	sp, #72	; 0x48
 80148c6:	af00      	add	r7, sp, #0
 80148c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80148ca:	2300      	movs	r3, #0
 80148cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80148d0:	697b      	ldr	r3, [r7, #20]
 80148d2:	689a      	ldr	r2, [r3, #8]
 80148d4:	697b      	ldr	r3, [r7, #20]
 80148d6:	691b      	ldr	r3, [r3, #16]
 80148d8:	431a      	orrs	r2, r3
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	695b      	ldr	r3, [r3, #20]
 80148de:	431a      	orrs	r2, r3
 80148e0:	697b      	ldr	r3, [r7, #20]
 80148e2:	69db      	ldr	r3, [r3, #28]
 80148e4:	4313      	orrs	r3, r2
 80148e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80148e8:	697b      	ldr	r3, [r7, #20]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	681a      	ldr	r2, [r3, #0]
 80148ee:	4bbe      	ldr	r3, [pc, #760]	; (8014be8 <UART_SetConfig+0x328>)
 80148f0:	4013      	ands	r3, r2
 80148f2:	697a      	ldr	r2, [r7, #20]
 80148f4:	6812      	ldr	r2, [r2, #0]
 80148f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80148f8:	430b      	orrs	r3, r1
 80148fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80148fc:	697b      	ldr	r3, [r7, #20]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014906:	697b      	ldr	r3, [r7, #20]
 8014908:	68da      	ldr	r2, [r3, #12]
 801490a:	697b      	ldr	r3, [r7, #20]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	430a      	orrs	r2, r1
 8014910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014912:	697b      	ldr	r3, [r7, #20]
 8014914:	699b      	ldr	r3, [r3, #24]
 8014916:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	4ab3      	ldr	r2, [pc, #716]	; (8014bec <UART_SetConfig+0x32c>)
 801491e:	4293      	cmp	r3, r2
 8014920:	d004      	beq.n	801492c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014922:	697b      	ldr	r3, [r7, #20]
 8014924:	6a1b      	ldr	r3, [r3, #32]
 8014926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014928:	4313      	orrs	r3, r2
 801492a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801492c:	697b      	ldr	r3, [r7, #20]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	689a      	ldr	r2, [r3, #8]
 8014932:	4baf      	ldr	r3, [pc, #700]	; (8014bf0 <UART_SetConfig+0x330>)
 8014934:	4013      	ands	r3, r2
 8014936:	697a      	ldr	r2, [r7, #20]
 8014938:	6812      	ldr	r2, [r2, #0]
 801493a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801493c:	430b      	orrs	r3, r1
 801493e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014946:	f023 010f 	bic.w	r1, r3, #15
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801494e:	697b      	ldr	r3, [r7, #20]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	430a      	orrs	r2, r1
 8014954:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	4aa6      	ldr	r2, [pc, #664]	; (8014bf4 <UART_SetConfig+0x334>)
 801495c:	4293      	cmp	r3, r2
 801495e:	d177      	bne.n	8014a50 <UART_SetConfig+0x190>
 8014960:	4ba5      	ldr	r3, [pc, #660]	; (8014bf8 <UART_SetConfig+0x338>)
 8014962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014968:	2b28      	cmp	r3, #40	; 0x28
 801496a:	d86d      	bhi.n	8014a48 <UART_SetConfig+0x188>
 801496c:	a201      	add	r2, pc, #4	; (adr r2, 8014974 <UART_SetConfig+0xb4>)
 801496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014972:	bf00      	nop
 8014974:	08014a19 	.word	0x08014a19
 8014978:	08014a49 	.word	0x08014a49
 801497c:	08014a49 	.word	0x08014a49
 8014980:	08014a49 	.word	0x08014a49
 8014984:	08014a49 	.word	0x08014a49
 8014988:	08014a49 	.word	0x08014a49
 801498c:	08014a49 	.word	0x08014a49
 8014990:	08014a49 	.word	0x08014a49
 8014994:	08014a21 	.word	0x08014a21
 8014998:	08014a49 	.word	0x08014a49
 801499c:	08014a49 	.word	0x08014a49
 80149a0:	08014a49 	.word	0x08014a49
 80149a4:	08014a49 	.word	0x08014a49
 80149a8:	08014a49 	.word	0x08014a49
 80149ac:	08014a49 	.word	0x08014a49
 80149b0:	08014a49 	.word	0x08014a49
 80149b4:	08014a29 	.word	0x08014a29
 80149b8:	08014a49 	.word	0x08014a49
 80149bc:	08014a49 	.word	0x08014a49
 80149c0:	08014a49 	.word	0x08014a49
 80149c4:	08014a49 	.word	0x08014a49
 80149c8:	08014a49 	.word	0x08014a49
 80149cc:	08014a49 	.word	0x08014a49
 80149d0:	08014a49 	.word	0x08014a49
 80149d4:	08014a31 	.word	0x08014a31
 80149d8:	08014a49 	.word	0x08014a49
 80149dc:	08014a49 	.word	0x08014a49
 80149e0:	08014a49 	.word	0x08014a49
 80149e4:	08014a49 	.word	0x08014a49
 80149e8:	08014a49 	.word	0x08014a49
 80149ec:	08014a49 	.word	0x08014a49
 80149f0:	08014a49 	.word	0x08014a49
 80149f4:	08014a39 	.word	0x08014a39
 80149f8:	08014a49 	.word	0x08014a49
 80149fc:	08014a49 	.word	0x08014a49
 8014a00:	08014a49 	.word	0x08014a49
 8014a04:	08014a49 	.word	0x08014a49
 8014a08:	08014a49 	.word	0x08014a49
 8014a0c:	08014a49 	.word	0x08014a49
 8014a10:	08014a49 	.word	0x08014a49
 8014a14:	08014a41 	.word	0x08014a41
 8014a18:	2301      	movs	r3, #1
 8014a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a1e:	e222      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014a20:	2304      	movs	r3, #4
 8014a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a26:	e21e      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014a28:	2308      	movs	r3, #8
 8014a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a2e:	e21a      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014a30:	2310      	movs	r3, #16
 8014a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a36:	e216      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014a38:	2320      	movs	r3, #32
 8014a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a3e:	e212      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014a40:	2340      	movs	r3, #64	; 0x40
 8014a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a46:	e20e      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014a48:	2380      	movs	r3, #128	; 0x80
 8014a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a4e:	e20a      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	4a69      	ldr	r2, [pc, #420]	; (8014bfc <UART_SetConfig+0x33c>)
 8014a56:	4293      	cmp	r3, r2
 8014a58:	d130      	bne.n	8014abc <UART_SetConfig+0x1fc>
 8014a5a:	4b67      	ldr	r3, [pc, #412]	; (8014bf8 <UART_SetConfig+0x338>)
 8014a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a5e:	f003 0307 	and.w	r3, r3, #7
 8014a62:	2b05      	cmp	r3, #5
 8014a64:	d826      	bhi.n	8014ab4 <UART_SetConfig+0x1f4>
 8014a66:	a201      	add	r2, pc, #4	; (adr r2, 8014a6c <UART_SetConfig+0x1ac>)
 8014a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a6c:	08014a85 	.word	0x08014a85
 8014a70:	08014a8d 	.word	0x08014a8d
 8014a74:	08014a95 	.word	0x08014a95
 8014a78:	08014a9d 	.word	0x08014a9d
 8014a7c:	08014aa5 	.word	0x08014aa5
 8014a80:	08014aad 	.word	0x08014aad
 8014a84:	2300      	movs	r3, #0
 8014a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a8a:	e1ec      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014a8c:	2304      	movs	r3, #4
 8014a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a92:	e1e8      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014a94:	2308      	movs	r3, #8
 8014a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a9a:	e1e4      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014a9c:	2310      	movs	r3, #16
 8014a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014aa2:	e1e0      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014aa4:	2320      	movs	r3, #32
 8014aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014aaa:	e1dc      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014aac:	2340      	movs	r3, #64	; 0x40
 8014aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ab2:	e1d8      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014ab4:	2380      	movs	r3, #128	; 0x80
 8014ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014aba:	e1d4      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	4a4f      	ldr	r2, [pc, #316]	; (8014c00 <UART_SetConfig+0x340>)
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	d130      	bne.n	8014b28 <UART_SetConfig+0x268>
 8014ac6:	4b4c      	ldr	r3, [pc, #304]	; (8014bf8 <UART_SetConfig+0x338>)
 8014ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014aca:	f003 0307 	and.w	r3, r3, #7
 8014ace:	2b05      	cmp	r3, #5
 8014ad0:	d826      	bhi.n	8014b20 <UART_SetConfig+0x260>
 8014ad2:	a201      	add	r2, pc, #4	; (adr r2, 8014ad8 <UART_SetConfig+0x218>)
 8014ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ad8:	08014af1 	.word	0x08014af1
 8014adc:	08014af9 	.word	0x08014af9
 8014ae0:	08014b01 	.word	0x08014b01
 8014ae4:	08014b09 	.word	0x08014b09
 8014ae8:	08014b11 	.word	0x08014b11
 8014aec:	08014b19 	.word	0x08014b19
 8014af0:	2300      	movs	r3, #0
 8014af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014af6:	e1b6      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014af8:	2304      	movs	r3, #4
 8014afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014afe:	e1b2      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b00:	2308      	movs	r3, #8
 8014b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b06:	e1ae      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b08:	2310      	movs	r3, #16
 8014b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b0e:	e1aa      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b10:	2320      	movs	r3, #32
 8014b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b16:	e1a6      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b18:	2340      	movs	r3, #64	; 0x40
 8014b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b1e:	e1a2      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b20:	2380      	movs	r3, #128	; 0x80
 8014b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b26:	e19e      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	4a35      	ldr	r2, [pc, #212]	; (8014c04 <UART_SetConfig+0x344>)
 8014b2e:	4293      	cmp	r3, r2
 8014b30:	d130      	bne.n	8014b94 <UART_SetConfig+0x2d4>
 8014b32:	4b31      	ldr	r3, [pc, #196]	; (8014bf8 <UART_SetConfig+0x338>)
 8014b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b36:	f003 0307 	and.w	r3, r3, #7
 8014b3a:	2b05      	cmp	r3, #5
 8014b3c:	d826      	bhi.n	8014b8c <UART_SetConfig+0x2cc>
 8014b3e:	a201      	add	r2, pc, #4	; (adr r2, 8014b44 <UART_SetConfig+0x284>)
 8014b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b44:	08014b5d 	.word	0x08014b5d
 8014b48:	08014b65 	.word	0x08014b65
 8014b4c:	08014b6d 	.word	0x08014b6d
 8014b50:	08014b75 	.word	0x08014b75
 8014b54:	08014b7d 	.word	0x08014b7d
 8014b58:	08014b85 	.word	0x08014b85
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b62:	e180      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b64:	2304      	movs	r3, #4
 8014b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b6a:	e17c      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b6c:	2308      	movs	r3, #8
 8014b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b72:	e178      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b74:	2310      	movs	r3, #16
 8014b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b7a:	e174      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b7c:	2320      	movs	r3, #32
 8014b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b82:	e170      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b84:	2340      	movs	r3, #64	; 0x40
 8014b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b8a:	e16c      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b8c:	2380      	movs	r3, #128	; 0x80
 8014b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b92:	e168      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	4a1b      	ldr	r2, [pc, #108]	; (8014c08 <UART_SetConfig+0x348>)
 8014b9a:	4293      	cmp	r3, r2
 8014b9c:	d142      	bne.n	8014c24 <UART_SetConfig+0x364>
 8014b9e:	4b16      	ldr	r3, [pc, #88]	; (8014bf8 <UART_SetConfig+0x338>)
 8014ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ba2:	f003 0307 	and.w	r3, r3, #7
 8014ba6:	2b05      	cmp	r3, #5
 8014ba8:	d838      	bhi.n	8014c1c <UART_SetConfig+0x35c>
 8014baa:	a201      	add	r2, pc, #4	; (adr r2, 8014bb0 <UART_SetConfig+0x2f0>)
 8014bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bb0:	08014bc9 	.word	0x08014bc9
 8014bb4:	08014bd1 	.word	0x08014bd1
 8014bb8:	08014bd9 	.word	0x08014bd9
 8014bbc:	08014be1 	.word	0x08014be1
 8014bc0:	08014c0d 	.word	0x08014c0d
 8014bc4:	08014c15 	.word	0x08014c15
 8014bc8:	2300      	movs	r3, #0
 8014bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bce:	e14a      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014bd0:	2304      	movs	r3, #4
 8014bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bd6:	e146      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014bd8:	2308      	movs	r3, #8
 8014bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bde:	e142      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014be0:	2310      	movs	r3, #16
 8014be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014be6:	e13e      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014be8:	cfff69f3 	.word	0xcfff69f3
 8014bec:	58000c00 	.word	0x58000c00
 8014bf0:	11fff4ff 	.word	0x11fff4ff
 8014bf4:	40011000 	.word	0x40011000
 8014bf8:	58024400 	.word	0x58024400
 8014bfc:	40004400 	.word	0x40004400
 8014c00:	40004800 	.word	0x40004800
 8014c04:	40004c00 	.word	0x40004c00
 8014c08:	40005000 	.word	0x40005000
 8014c0c:	2320      	movs	r3, #32
 8014c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c12:	e128      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014c14:	2340      	movs	r3, #64	; 0x40
 8014c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c1a:	e124      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014c1c:	2380      	movs	r3, #128	; 0x80
 8014c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c22:	e120      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	4acb      	ldr	r2, [pc, #812]	; (8014f58 <UART_SetConfig+0x698>)
 8014c2a:	4293      	cmp	r3, r2
 8014c2c:	d176      	bne.n	8014d1c <UART_SetConfig+0x45c>
 8014c2e:	4bcb      	ldr	r3, [pc, #812]	; (8014f5c <UART_SetConfig+0x69c>)
 8014c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014c36:	2b28      	cmp	r3, #40	; 0x28
 8014c38:	d86c      	bhi.n	8014d14 <UART_SetConfig+0x454>
 8014c3a:	a201      	add	r2, pc, #4	; (adr r2, 8014c40 <UART_SetConfig+0x380>)
 8014c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c40:	08014ce5 	.word	0x08014ce5
 8014c44:	08014d15 	.word	0x08014d15
 8014c48:	08014d15 	.word	0x08014d15
 8014c4c:	08014d15 	.word	0x08014d15
 8014c50:	08014d15 	.word	0x08014d15
 8014c54:	08014d15 	.word	0x08014d15
 8014c58:	08014d15 	.word	0x08014d15
 8014c5c:	08014d15 	.word	0x08014d15
 8014c60:	08014ced 	.word	0x08014ced
 8014c64:	08014d15 	.word	0x08014d15
 8014c68:	08014d15 	.word	0x08014d15
 8014c6c:	08014d15 	.word	0x08014d15
 8014c70:	08014d15 	.word	0x08014d15
 8014c74:	08014d15 	.word	0x08014d15
 8014c78:	08014d15 	.word	0x08014d15
 8014c7c:	08014d15 	.word	0x08014d15
 8014c80:	08014cf5 	.word	0x08014cf5
 8014c84:	08014d15 	.word	0x08014d15
 8014c88:	08014d15 	.word	0x08014d15
 8014c8c:	08014d15 	.word	0x08014d15
 8014c90:	08014d15 	.word	0x08014d15
 8014c94:	08014d15 	.word	0x08014d15
 8014c98:	08014d15 	.word	0x08014d15
 8014c9c:	08014d15 	.word	0x08014d15
 8014ca0:	08014cfd 	.word	0x08014cfd
 8014ca4:	08014d15 	.word	0x08014d15
 8014ca8:	08014d15 	.word	0x08014d15
 8014cac:	08014d15 	.word	0x08014d15
 8014cb0:	08014d15 	.word	0x08014d15
 8014cb4:	08014d15 	.word	0x08014d15
 8014cb8:	08014d15 	.word	0x08014d15
 8014cbc:	08014d15 	.word	0x08014d15
 8014cc0:	08014d05 	.word	0x08014d05
 8014cc4:	08014d15 	.word	0x08014d15
 8014cc8:	08014d15 	.word	0x08014d15
 8014ccc:	08014d15 	.word	0x08014d15
 8014cd0:	08014d15 	.word	0x08014d15
 8014cd4:	08014d15 	.word	0x08014d15
 8014cd8:	08014d15 	.word	0x08014d15
 8014cdc:	08014d15 	.word	0x08014d15
 8014ce0:	08014d0d 	.word	0x08014d0d
 8014ce4:	2301      	movs	r3, #1
 8014ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cea:	e0bc      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014cec:	2304      	movs	r3, #4
 8014cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cf2:	e0b8      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014cf4:	2308      	movs	r3, #8
 8014cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cfa:	e0b4      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014cfc:	2310      	movs	r3, #16
 8014cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d02:	e0b0      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014d04:	2320      	movs	r3, #32
 8014d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d0a:	e0ac      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014d0c:	2340      	movs	r3, #64	; 0x40
 8014d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d12:	e0a8      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014d14:	2380      	movs	r3, #128	; 0x80
 8014d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d1a:	e0a4      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014d1c:	697b      	ldr	r3, [r7, #20]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	4a8f      	ldr	r2, [pc, #572]	; (8014f60 <UART_SetConfig+0x6a0>)
 8014d22:	4293      	cmp	r3, r2
 8014d24:	d130      	bne.n	8014d88 <UART_SetConfig+0x4c8>
 8014d26:	4b8d      	ldr	r3, [pc, #564]	; (8014f5c <UART_SetConfig+0x69c>)
 8014d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d2a:	f003 0307 	and.w	r3, r3, #7
 8014d2e:	2b05      	cmp	r3, #5
 8014d30:	d826      	bhi.n	8014d80 <UART_SetConfig+0x4c0>
 8014d32:	a201      	add	r2, pc, #4	; (adr r2, 8014d38 <UART_SetConfig+0x478>)
 8014d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d38:	08014d51 	.word	0x08014d51
 8014d3c:	08014d59 	.word	0x08014d59
 8014d40:	08014d61 	.word	0x08014d61
 8014d44:	08014d69 	.word	0x08014d69
 8014d48:	08014d71 	.word	0x08014d71
 8014d4c:	08014d79 	.word	0x08014d79
 8014d50:	2300      	movs	r3, #0
 8014d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d56:	e086      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014d58:	2304      	movs	r3, #4
 8014d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d5e:	e082      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014d60:	2308      	movs	r3, #8
 8014d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d66:	e07e      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014d68:	2310      	movs	r3, #16
 8014d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d6e:	e07a      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014d70:	2320      	movs	r3, #32
 8014d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d76:	e076      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014d78:	2340      	movs	r3, #64	; 0x40
 8014d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d7e:	e072      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014d80:	2380      	movs	r3, #128	; 0x80
 8014d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d86:	e06e      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	4a75      	ldr	r2, [pc, #468]	; (8014f64 <UART_SetConfig+0x6a4>)
 8014d8e:	4293      	cmp	r3, r2
 8014d90:	d130      	bne.n	8014df4 <UART_SetConfig+0x534>
 8014d92:	4b72      	ldr	r3, [pc, #456]	; (8014f5c <UART_SetConfig+0x69c>)
 8014d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d96:	f003 0307 	and.w	r3, r3, #7
 8014d9a:	2b05      	cmp	r3, #5
 8014d9c:	d826      	bhi.n	8014dec <UART_SetConfig+0x52c>
 8014d9e:	a201      	add	r2, pc, #4	; (adr r2, 8014da4 <UART_SetConfig+0x4e4>)
 8014da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014da4:	08014dbd 	.word	0x08014dbd
 8014da8:	08014dc5 	.word	0x08014dc5
 8014dac:	08014dcd 	.word	0x08014dcd
 8014db0:	08014dd5 	.word	0x08014dd5
 8014db4:	08014ddd 	.word	0x08014ddd
 8014db8:	08014de5 	.word	0x08014de5
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dc2:	e050      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014dc4:	2304      	movs	r3, #4
 8014dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dca:	e04c      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014dcc:	2308      	movs	r3, #8
 8014dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dd2:	e048      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014dd4:	2310      	movs	r3, #16
 8014dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dda:	e044      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014ddc:	2320      	movs	r3, #32
 8014dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014de2:	e040      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014de4:	2340      	movs	r3, #64	; 0x40
 8014de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dea:	e03c      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014dec:	2380      	movs	r3, #128	; 0x80
 8014dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014df2:	e038      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014df4:	697b      	ldr	r3, [r7, #20]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	4a5b      	ldr	r2, [pc, #364]	; (8014f68 <UART_SetConfig+0x6a8>)
 8014dfa:	4293      	cmp	r3, r2
 8014dfc:	d130      	bne.n	8014e60 <UART_SetConfig+0x5a0>
 8014dfe:	4b57      	ldr	r3, [pc, #348]	; (8014f5c <UART_SetConfig+0x69c>)
 8014e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e02:	f003 0307 	and.w	r3, r3, #7
 8014e06:	2b05      	cmp	r3, #5
 8014e08:	d826      	bhi.n	8014e58 <UART_SetConfig+0x598>
 8014e0a:	a201      	add	r2, pc, #4	; (adr r2, 8014e10 <UART_SetConfig+0x550>)
 8014e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e10:	08014e29 	.word	0x08014e29
 8014e14:	08014e31 	.word	0x08014e31
 8014e18:	08014e39 	.word	0x08014e39
 8014e1c:	08014e41 	.word	0x08014e41
 8014e20:	08014e49 	.word	0x08014e49
 8014e24:	08014e51 	.word	0x08014e51
 8014e28:	2302      	movs	r3, #2
 8014e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e2e:	e01a      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014e30:	2304      	movs	r3, #4
 8014e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e36:	e016      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014e38:	2308      	movs	r3, #8
 8014e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e3e:	e012      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014e40:	2310      	movs	r3, #16
 8014e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e46:	e00e      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014e48:	2320      	movs	r3, #32
 8014e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e4e:	e00a      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014e50:	2340      	movs	r3, #64	; 0x40
 8014e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e56:	e006      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014e58:	2380      	movs	r3, #128	; 0x80
 8014e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e5e:	e002      	b.n	8014e66 <UART_SetConfig+0x5a6>
 8014e60:	2380      	movs	r3, #128	; 0x80
 8014e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014e66:	697b      	ldr	r3, [r7, #20]
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	4a3f      	ldr	r2, [pc, #252]	; (8014f68 <UART_SetConfig+0x6a8>)
 8014e6c:	4293      	cmp	r3, r2
 8014e6e:	f040 80f8 	bne.w	8015062 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014e72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014e76:	2b20      	cmp	r3, #32
 8014e78:	dc46      	bgt.n	8014f08 <UART_SetConfig+0x648>
 8014e7a:	2b02      	cmp	r3, #2
 8014e7c:	f2c0 8082 	blt.w	8014f84 <UART_SetConfig+0x6c4>
 8014e80:	3b02      	subs	r3, #2
 8014e82:	2b1e      	cmp	r3, #30
 8014e84:	d87e      	bhi.n	8014f84 <UART_SetConfig+0x6c4>
 8014e86:	a201      	add	r2, pc, #4	; (adr r2, 8014e8c <UART_SetConfig+0x5cc>)
 8014e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e8c:	08014f0f 	.word	0x08014f0f
 8014e90:	08014f85 	.word	0x08014f85
 8014e94:	08014f17 	.word	0x08014f17
 8014e98:	08014f85 	.word	0x08014f85
 8014e9c:	08014f85 	.word	0x08014f85
 8014ea0:	08014f85 	.word	0x08014f85
 8014ea4:	08014f27 	.word	0x08014f27
 8014ea8:	08014f85 	.word	0x08014f85
 8014eac:	08014f85 	.word	0x08014f85
 8014eb0:	08014f85 	.word	0x08014f85
 8014eb4:	08014f85 	.word	0x08014f85
 8014eb8:	08014f85 	.word	0x08014f85
 8014ebc:	08014f85 	.word	0x08014f85
 8014ec0:	08014f85 	.word	0x08014f85
 8014ec4:	08014f37 	.word	0x08014f37
 8014ec8:	08014f85 	.word	0x08014f85
 8014ecc:	08014f85 	.word	0x08014f85
 8014ed0:	08014f85 	.word	0x08014f85
 8014ed4:	08014f85 	.word	0x08014f85
 8014ed8:	08014f85 	.word	0x08014f85
 8014edc:	08014f85 	.word	0x08014f85
 8014ee0:	08014f85 	.word	0x08014f85
 8014ee4:	08014f85 	.word	0x08014f85
 8014ee8:	08014f85 	.word	0x08014f85
 8014eec:	08014f85 	.word	0x08014f85
 8014ef0:	08014f85 	.word	0x08014f85
 8014ef4:	08014f85 	.word	0x08014f85
 8014ef8:	08014f85 	.word	0x08014f85
 8014efc:	08014f85 	.word	0x08014f85
 8014f00:	08014f85 	.word	0x08014f85
 8014f04:	08014f77 	.word	0x08014f77
 8014f08:	2b40      	cmp	r3, #64	; 0x40
 8014f0a:	d037      	beq.n	8014f7c <UART_SetConfig+0x6bc>
 8014f0c:	e03a      	b.n	8014f84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8014f0e:	f7fb fc17 	bl	8010740 <HAL_RCCEx_GetD3PCLK1Freq>
 8014f12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014f14:	e03c      	b.n	8014f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7fb fc26 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014f24:	e034      	b.n	8014f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014f26:	f107 0318 	add.w	r3, r7, #24
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7fb fd72 	bl	8010a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014f30:	69fb      	ldr	r3, [r7, #28]
 8014f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014f34:	e02c      	b.n	8014f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014f36:	4b09      	ldr	r3, [pc, #36]	; (8014f5c <UART_SetConfig+0x69c>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	f003 0320 	and.w	r3, r3, #32
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d016      	beq.n	8014f70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014f42:	4b06      	ldr	r3, [pc, #24]	; (8014f5c <UART_SetConfig+0x69c>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	08db      	lsrs	r3, r3, #3
 8014f48:	f003 0303 	and.w	r3, r3, #3
 8014f4c:	4a07      	ldr	r2, [pc, #28]	; (8014f6c <UART_SetConfig+0x6ac>)
 8014f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8014f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014f54:	e01c      	b.n	8014f90 <UART_SetConfig+0x6d0>
 8014f56:	bf00      	nop
 8014f58:	40011400 	.word	0x40011400
 8014f5c:	58024400 	.word	0x58024400
 8014f60:	40007800 	.word	0x40007800
 8014f64:	40007c00 	.word	0x40007c00
 8014f68:	58000c00 	.word	0x58000c00
 8014f6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8014f70:	4b9d      	ldr	r3, [pc, #628]	; (80151e8 <UART_SetConfig+0x928>)
 8014f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014f74:	e00c      	b.n	8014f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014f76:	4b9d      	ldr	r3, [pc, #628]	; (80151ec <UART_SetConfig+0x92c>)
 8014f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014f7a:	e009      	b.n	8014f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014f7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014f80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014f82:	e005      	b.n	8014f90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8014f84:	2300      	movs	r3, #0
 8014f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014f88:	2301      	movs	r3, #1
 8014f8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014f8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	f000 81de 	beq.w	8015354 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f9c:	4a94      	ldr	r2, [pc, #592]	; (80151f0 <UART_SetConfig+0x930>)
 8014f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014fa2:	461a      	mov	r2, r3
 8014fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8014faa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	685a      	ldr	r2, [r3, #4]
 8014fb0:	4613      	mov	r3, r2
 8014fb2:	005b      	lsls	r3, r3, #1
 8014fb4:	4413      	add	r3, r2
 8014fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d305      	bcc.n	8014fc8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	685b      	ldr	r3, [r3, #4]
 8014fc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d903      	bls.n	8014fd0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8014fc8:	2301      	movs	r3, #1
 8014fca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014fce:	e1c1      	b.n	8015354 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	60bb      	str	r3, [r7, #8]
 8014fd6:	60fa      	str	r2, [r7, #12]
 8014fd8:	697b      	ldr	r3, [r7, #20]
 8014fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fdc:	4a84      	ldr	r2, [pc, #528]	; (80151f0 <UART_SetConfig+0x930>)
 8014fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014fe2:	b29b      	uxth	r3, r3
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	603b      	str	r3, [r7, #0]
 8014fe8:	607a      	str	r2, [r7, #4]
 8014fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014fee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014ff2:	f7eb f975 	bl	80002e0 <__aeabi_uldivmod>
 8014ff6:	4602      	mov	r2, r0
 8014ff8:	460b      	mov	r3, r1
 8014ffa:	4610      	mov	r0, r2
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	f04f 0200 	mov.w	r2, #0
 8015002:	f04f 0300 	mov.w	r3, #0
 8015006:	020b      	lsls	r3, r1, #8
 8015008:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801500c:	0202      	lsls	r2, r0, #8
 801500e:	6979      	ldr	r1, [r7, #20]
 8015010:	6849      	ldr	r1, [r1, #4]
 8015012:	0849      	lsrs	r1, r1, #1
 8015014:	2000      	movs	r0, #0
 8015016:	460c      	mov	r4, r1
 8015018:	4605      	mov	r5, r0
 801501a:	eb12 0804 	adds.w	r8, r2, r4
 801501e:	eb43 0905 	adc.w	r9, r3, r5
 8015022:	697b      	ldr	r3, [r7, #20]
 8015024:	685b      	ldr	r3, [r3, #4]
 8015026:	2200      	movs	r2, #0
 8015028:	469a      	mov	sl, r3
 801502a:	4693      	mov	fp, r2
 801502c:	4652      	mov	r2, sl
 801502e:	465b      	mov	r3, fp
 8015030:	4640      	mov	r0, r8
 8015032:	4649      	mov	r1, r9
 8015034:	f7eb f954 	bl	80002e0 <__aeabi_uldivmod>
 8015038:	4602      	mov	r2, r0
 801503a:	460b      	mov	r3, r1
 801503c:	4613      	mov	r3, r2
 801503e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015046:	d308      	bcc.n	801505a <UART_SetConfig+0x79a>
 8015048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801504a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801504e:	d204      	bcs.n	801505a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015056:	60da      	str	r2, [r3, #12]
 8015058:	e17c      	b.n	8015354 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801505a:	2301      	movs	r3, #1
 801505c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015060:	e178      	b.n	8015354 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	69db      	ldr	r3, [r3, #28]
 8015066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801506a:	f040 80c5 	bne.w	80151f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801506e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015072:	2b20      	cmp	r3, #32
 8015074:	dc48      	bgt.n	8015108 <UART_SetConfig+0x848>
 8015076:	2b00      	cmp	r3, #0
 8015078:	db7b      	blt.n	8015172 <UART_SetConfig+0x8b2>
 801507a:	2b20      	cmp	r3, #32
 801507c:	d879      	bhi.n	8015172 <UART_SetConfig+0x8b2>
 801507e:	a201      	add	r2, pc, #4	; (adr r2, 8015084 <UART_SetConfig+0x7c4>)
 8015080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015084:	0801510f 	.word	0x0801510f
 8015088:	08015117 	.word	0x08015117
 801508c:	08015173 	.word	0x08015173
 8015090:	08015173 	.word	0x08015173
 8015094:	0801511f 	.word	0x0801511f
 8015098:	08015173 	.word	0x08015173
 801509c:	08015173 	.word	0x08015173
 80150a0:	08015173 	.word	0x08015173
 80150a4:	0801512f 	.word	0x0801512f
 80150a8:	08015173 	.word	0x08015173
 80150ac:	08015173 	.word	0x08015173
 80150b0:	08015173 	.word	0x08015173
 80150b4:	08015173 	.word	0x08015173
 80150b8:	08015173 	.word	0x08015173
 80150bc:	08015173 	.word	0x08015173
 80150c0:	08015173 	.word	0x08015173
 80150c4:	0801513f 	.word	0x0801513f
 80150c8:	08015173 	.word	0x08015173
 80150cc:	08015173 	.word	0x08015173
 80150d0:	08015173 	.word	0x08015173
 80150d4:	08015173 	.word	0x08015173
 80150d8:	08015173 	.word	0x08015173
 80150dc:	08015173 	.word	0x08015173
 80150e0:	08015173 	.word	0x08015173
 80150e4:	08015173 	.word	0x08015173
 80150e8:	08015173 	.word	0x08015173
 80150ec:	08015173 	.word	0x08015173
 80150f0:	08015173 	.word	0x08015173
 80150f4:	08015173 	.word	0x08015173
 80150f8:	08015173 	.word	0x08015173
 80150fc:	08015173 	.word	0x08015173
 8015100:	08015173 	.word	0x08015173
 8015104:	08015165 	.word	0x08015165
 8015108:	2b40      	cmp	r3, #64	; 0x40
 801510a:	d02e      	beq.n	801516a <UART_SetConfig+0x8aa>
 801510c:	e031      	b.n	8015172 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801510e:	f7f9 fb1f 	bl	800e750 <HAL_RCC_GetPCLK1Freq>
 8015112:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015114:	e033      	b.n	801517e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015116:	f7f9 fb31 	bl	800e77c <HAL_RCC_GetPCLK2Freq>
 801511a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801511c:	e02f      	b.n	801517e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801511e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015122:	4618      	mov	r0, r3
 8015124:	f7fb fb22 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801512a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801512c:	e027      	b.n	801517e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801512e:	f107 0318 	add.w	r3, r7, #24
 8015132:	4618      	mov	r0, r3
 8015134:	f7fb fc6e 	bl	8010a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015138:	69fb      	ldr	r3, [r7, #28]
 801513a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801513c:	e01f      	b.n	801517e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801513e:	4b2d      	ldr	r3, [pc, #180]	; (80151f4 <UART_SetConfig+0x934>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	f003 0320 	and.w	r3, r3, #32
 8015146:	2b00      	cmp	r3, #0
 8015148:	d009      	beq.n	801515e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801514a:	4b2a      	ldr	r3, [pc, #168]	; (80151f4 <UART_SetConfig+0x934>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	08db      	lsrs	r3, r3, #3
 8015150:	f003 0303 	and.w	r3, r3, #3
 8015154:	4a24      	ldr	r2, [pc, #144]	; (80151e8 <UART_SetConfig+0x928>)
 8015156:	fa22 f303 	lsr.w	r3, r2, r3
 801515a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801515c:	e00f      	b.n	801517e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801515e:	4b22      	ldr	r3, [pc, #136]	; (80151e8 <UART_SetConfig+0x928>)
 8015160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015162:	e00c      	b.n	801517e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015164:	4b21      	ldr	r3, [pc, #132]	; (80151ec <UART_SetConfig+0x92c>)
 8015166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015168:	e009      	b.n	801517e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801516a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801516e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015170:	e005      	b.n	801517e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8015172:	2300      	movs	r3, #0
 8015174:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015176:	2301      	movs	r3, #1
 8015178:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801517c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801517e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015180:	2b00      	cmp	r3, #0
 8015182:	f000 80e7 	beq.w	8015354 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801518a:	4a19      	ldr	r2, [pc, #100]	; (80151f0 <UART_SetConfig+0x930>)
 801518c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015190:	461a      	mov	r2, r3
 8015192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015194:	fbb3 f3f2 	udiv	r3, r3, r2
 8015198:	005a      	lsls	r2, r3, #1
 801519a:	697b      	ldr	r3, [r7, #20]
 801519c:	685b      	ldr	r3, [r3, #4]
 801519e:	085b      	lsrs	r3, r3, #1
 80151a0:	441a      	add	r2, r3
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80151aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80151ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151ae:	2b0f      	cmp	r3, #15
 80151b0:	d916      	bls.n	80151e0 <UART_SetConfig+0x920>
 80151b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80151b8:	d212      	bcs.n	80151e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80151ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151bc:	b29b      	uxth	r3, r3
 80151be:	f023 030f 	bic.w	r3, r3, #15
 80151c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80151c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c6:	085b      	lsrs	r3, r3, #1
 80151c8:	b29b      	uxth	r3, r3
 80151ca:	f003 0307 	and.w	r3, r3, #7
 80151ce:	b29a      	uxth	r2, r3
 80151d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80151d2:	4313      	orrs	r3, r2
 80151d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80151dc:	60da      	str	r2, [r3, #12]
 80151de:	e0b9      	b.n	8015354 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80151e0:	2301      	movs	r3, #1
 80151e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80151e6:	e0b5      	b.n	8015354 <UART_SetConfig+0xa94>
 80151e8:	03d09000 	.word	0x03d09000
 80151ec:	003d0900 	.word	0x003d0900
 80151f0:	0801aadc 	.word	0x0801aadc
 80151f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80151f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80151fc:	2b20      	cmp	r3, #32
 80151fe:	dc49      	bgt.n	8015294 <UART_SetConfig+0x9d4>
 8015200:	2b00      	cmp	r3, #0
 8015202:	db7c      	blt.n	80152fe <UART_SetConfig+0xa3e>
 8015204:	2b20      	cmp	r3, #32
 8015206:	d87a      	bhi.n	80152fe <UART_SetConfig+0xa3e>
 8015208:	a201      	add	r2, pc, #4	; (adr r2, 8015210 <UART_SetConfig+0x950>)
 801520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801520e:	bf00      	nop
 8015210:	0801529b 	.word	0x0801529b
 8015214:	080152a3 	.word	0x080152a3
 8015218:	080152ff 	.word	0x080152ff
 801521c:	080152ff 	.word	0x080152ff
 8015220:	080152ab 	.word	0x080152ab
 8015224:	080152ff 	.word	0x080152ff
 8015228:	080152ff 	.word	0x080152ff
 801522c:	080152ff 	.word	0x080152ff
 8015230:	080152bb 	.word	0x080152bb
 8015234:	080152ff 	.word	0x080152ff
 8015238:	080152ff 	.word	0x080152ff
 801523c:	080152ff 	.word	0x080152ff
 8015240:	080152ff 	.word	0x080152ff
 8015244:	080152ff 	.word	0x080152ff
 8015248:	080152ff 	.word	0x080152ff
 801524c:	080152ff 	.word	0x080152ff
 8015250:	080152cb 	.word	0x080152cb
 8015254:	080152ff 	.word	0x080152ff
 8015258:	080152ff 	.word	0x080152ff
 801525c:	080152ff 	.word	0x080152ff
 8015260:	080152ff 	.word	0x080152ff
 8015264:	080152ff 	.word	0x080152ff
 8015268:	080152ff 	.word	0x080152ff
 801526c:	080152ff 	.word	0x080152ff
 8015270:	080152ff 	.word	0x080152ff
 8015274:	080152ff 	.word	0x080152ff
 8015278:	080152ff 	.word	0x080152ff
 801527c:	080152ff 	.word	0x080152ff
 8015280:	080152ff 	.word	0x080152ff
 8015284:	080152ff 	.word	0x080152ff
 8015288:	080152ff 	.word	0x080152ff
 801528c:	080152ff 	.word	0x080152ff
 8015290:	080152f1 	.word	0x080152f1
 8015294:	2b40      	cmp	r3, #64	; 0x40
 8015296:	d02e      	beq.n	80152f6 <UART_SetConfig+0xa36>
 8015298:	e031      	b.n	80152fe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801529a:	f7f9 fa59 	bl	800e750 <HAL_RCC_GetPCLK1Freq>
 801529e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80152a0:	e033      	b.n	801530a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80152a2:	f7f9 fa6b 	bl	800e77c <HAL_RCC_GetPCLK2Freq>
 80152a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80152a8:	e02f      	b.n	801530a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80152aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80152ae:	4618      	mov	r0, r3
 80152b0:	f7fb fa5c 	bl	801076c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80152b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80152b8:	e027      	b.n	801530a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80152ba:	f107 0318 	add.w	r3, r7, #24
 80152be:	4618      	mov	r0, r3
 80152c0:	f7fb fba8 	bl	8010a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80152c4:	69fb      	ldr	r3, [r7, #28]
 80152c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80152c8:	e01f      	b.n	801530a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80152ca:	4b2d      	ldr	r3, [pc, #180]	; (8015380 <UART_SetConfig+0xac0>)
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	f003 0320 	and.w	r3, r3, #32
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d009      	beq.n	80152ea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80152d6:	4b2a      	ldr	r3, [pc, #168]	; (8015380 <UART_SetConfig+0xac0>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	08db      	lsrs	r3, r3, #3
 80152dc:	f003 0303 	and.w	r3, r3, #3
 80152e0:	4a28      	ldr	r2, [pc, #160]	; (8015384 <UART_SetConfig+0xac4>)
 80152e2:	fa22 f303 	lsr.w	r3, r2, r3
 80152e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80152e8:	e00f      	b.n	801530a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80152ea:	4b26      	ldr	r3, [pc, #152]	; (8015384 <UART_SetConfig+0xac4>)
 80152ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80152ee:	e00c      	b.n	801530a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80152f0:	4b25      	ldr	r3, [pc, #148]	; (8015388 <UART_SetConfig+0xac8>)
 80152f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80152f4:	e009      	b.n	801530a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80152f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80152fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80152fc:	e005      	b.n	801530a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80152fe:	2300      	movs	r3, #0
 8015300:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015302:	2301      	movs	r3, #1
 8015304:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015308:	bf00      	nop
    }

    if (pclk != 0U)
 801530a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801530c:	2b00      	cmp	r3, #0
 801530e:	d021      	beq.n	8015354 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015314:	4a1d      	ldr	r2, [pc, #116]	; (801538c <UART_SetConfig+0xacc>)
 8015316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801531a:	461a      	mov	r2, r3
 801531c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801531e:	fbb3 f2f2 	udiv	r2, r3, r2
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	685b      	ldr	r3, [r3, #4]
 8015326:	085b      	lsrs	r3, r3, #1
 8015328:	441a      	add	r2, r3
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	685b      	ldr	r3, [r3, #4]
 801532e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015332:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015336:	2b0f      	cmp	r3, #15
 8015338:	d909      	bls.n	801534e <UART_SetConfig+0xa8e>
 801533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801533c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015340:	d205      	bcs.n	801534e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015344:	b29a      	uxth	r2, r3
 8015346:	697b      	ldr	r3, [r7, #20]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	60da      	str	r2, [r3, #12]
 801534c:	e002      	b.n	8015354 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801534e:	2301      	movs	r3, #1
 8015350:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015354:	697b      	ldr	r3, [r7, #20]
 8015356:	2201      	movs	r2, #1
 8015358:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801535c:	697b      	ldr	r3, [r7, #20]
 801535e:	2201      	movs	r2, #1
 8015360:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015364:	697b      	ldr	r3, [r7, #20]
 8015366:	2200      	movs	r2, #0
 8015368:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801536a:	697b      	ldr	r3, [r7, #20]
 801536c:	2200      	movs	r2, #0
 801536e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015370:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015374:	4618      	mov	r0, r3
 8015376:	3748      	adds	r7, #72	; 0x48
 8015378:	46bd      	mov	sp, r7
 801537a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801537e:	bf00      	nop
 8015380:	58024400 	.word	0x58024400
 8015384:	03d09000 	.word	0x03d09000
 8015388:	003d0900 	.word	0x003d0900
 801538c:	0801aadc 	.word	0x0801aadc

08015390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015390:	b480      	push	{r7}
 8015392:	b083      	sub	sp, #12
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801539c:	f003 0308 	and.w	r3, r3, #8
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d00a      	beq.n	80153ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	685b      	ldr	r3, [r3, #4]
 80153aa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	430a      	orrs	r2, r1
 80153b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153be:	f003 0301 	and.w	r3, r3, #1
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d00a      	beq.n	80153dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	685b      	ldr	r3, [r3, #4]
 80153cc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	430a      	orrs	r2, r1
 80153da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153e0:	f003 0302 	and.w	r3, r3, #2
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d00a      	beq.n	80153fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	685b      	ldr	r3, [r3, #4]
 80153ee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	430a      	orrs	r2, r1
 80153fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015402:	f003 0304 	and.w	r3, r3, #4
 8015406:	2b00      	cmp	r3, #0
 8015408:	d00a      	beq.n	8015420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	685b      	ldr	r3, [r3, #4]
 8015410:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	430a      	orrs	r2, r1
 801541e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015424:	f003 0310 	and.w	r3, r3, #16
 8015428:	2b00      	cmp	r3, #0
 801542a:	d00a      	beq.n	8015442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	689b      	ldr	r3, [r3, #8]
 8015432:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	430a      	orrs	r2, r1
 8015440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015446:	f003 0320 	and.w	r3, r3, #32
 801544a:	2b00      	cmp	r3, #0
 801544c:	d00a      	beq.n	8015464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	689b      	ldr	r3, [r3, #8]
 8015454:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	430a      	orrs	r2, r1
 8015462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801546c:	2b00      	cmp	r3, #0
 801546e:	d01a      	beq.n	80154a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	430a      	orrs	r2, r1
 8015484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801548a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801548e:	d10a      	bne.n	80154a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	430a      	orrs	r2, r1
 80154a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d00a      	beq.n	80154c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	430a      	orrs	r2, r1
 80154c6:	605a      	str	r2, [r3, #4]
  }
}
 80154c8:	bf00      	nop
 80154ca:	370c      	adds	r7, #12
 80154cc:	46bd      	mov	sp, r7
 80154ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d2:	4770      	bx	lr

080154d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b098      	sub	sp, #96	; 0x60
 80154d8:	af02      	add	r7, sp, #8
 80154da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2200      	movs	r2, #0
 80154e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80154e4:	f7f0 f8ee 	bl	80056c4 <HAL_GetTick>
 80154e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	f003 0308 	and.w	r3, r3, #8
 80154f4:	2b08      	cmp	r3, #8
 80154f6:	d12f      	bne.n	8015558 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80154f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80154fc:	9300      	str	r3, [sp, #0]
 80154fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015500:	2200      	movs	r2, #0
 8015502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f000 f88e 	bl	8015628 <UART_WaitOnFlagUntilTimeout>
 801550c:	4603      	mov	r3, r0
 801550e:	2b00      	cmp	r3, #0
 8015510:	d022      	beq.n	8015558 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801551a:	e853 3f00 	ldrex	r3, [r3]
 801551e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015526:	653b      	str	r3, [r7, #80]	; 0x50
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	461a      	mov	r2, r3
 801552e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015530:	647b      	str	r3, [r7, #68]	; 0x44
 8015532:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015534:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015538:	e841 2300 	strex	r3, r2, [r1]
 801553c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801553e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015540:	2b00      	cmp	r3, #0
 8015542:	d1e6      	bne.n	8015512 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	2220      	movs	r2, #32
 8015548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	2200      	movs	r2, #0
 8015550:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015554:	2303      	movs	r3, #3
 8015556:	e063      	b.n	8015620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	f003 0304 	and.w	r3, r3, #4
 8015562:	2b04      	cmp	r3, #4
 8015564:	d149      	bne.n	80155fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015566:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801556a:	9300      	str	r3, [sp, #0]
 801556c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801556e:	2200      	movs	r2, #0
 8015570:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f000 f857 	bl	8015628 <UART_WaitOnFlagUntilTimeout>
 801557a:	4603      	mov	r3, r0
 801557c:	2b00      	cmp	r3, #0
 801557e:	d03c      	beq.n	80155fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015588:	e853 3f00 	ldrex	r3, [r3]
 801558c:	623b      	str	r3, [r7, #32]
   return(result);
 801558e:	6a3b      	ldr	r3, [r7, #32]
 8015590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015594:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	461a      	mov	r2, r3
 801559c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801559e:	633b      	str	r3, [r7, #48]	; 0x30
 80155a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80155a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155a6:	e841 2300 	strex	r3, r2, [r1]
 80155aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80155ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d1e6      	bne.n	8015580 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	3308      	adds	r3, #8
 80155b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	e853 3f00 	ldrex	r3, [r3]
 80155c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	f023 0301 	bic.w	r3, r3, #1
 80155c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	3308      	adds	r3, #8
 80155d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80155d2:	61fa      	str	r2, [r7, #28]
 80155d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155d6:	69b9      	ldr	r1, [r7, #24]
 80155d8:	69fa      	ldr	r2, [r7, #28]
 80155da:	e841 2300 	strex	r3, r2, [r1]
 80155de:	617b      	str	r3, [r7, #20]
   return(result);
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d1e5      	bne.n	80155b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	2220      	movs	r2, #32
 80155ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	2200      	movs	r2, #0
 80155f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80155f6:	2303      	movs	r3, #3
 80155f8:	e012      	b.n	8015620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	2220      	movs	r2, #32
 80155fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	2220      	movs	r2, #32
 8015606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	2200      	movs	r2, #0
 801560e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	2200      	movs	r2, #0
 8015614:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	2200      	movs	r2, #0
 801561a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801561e:	2300      	movs	r3, #0
}
 8015620:	4618      	mov	r0, r3
 8015622:	3758      	adds	r7, #88	; 0x58
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}

08015628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b084      	sub	sp, #16
 801562c:	af00      	add	r7, sp, #0
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	603b      	str	r3, [r7, #0]
 8015634:	4613      	mov	r3, r2
 8015636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015638:	e04f      	b.n	80156da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801563a:	69bb      	ldr	r3, [r7, #24]
 801563c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015640:	d04b      	beq.n	80156da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015642:	f7f0 f83f 	bl	80056c4 <HAL_GetTick>
 8015646:	4602      	mov	r2, r0
 8015648:	683b      	ldr	r3, [r7, #0]
 801564a:	1ad3      	subs	r3, r2, r3
 801564c:	69ba      	ldr	r2, [r7, #24]
 801564e:	429a      	cmp	r2, r3
 8015650:	d302      	bcc.n	8015658 <UART_WaitOnFlagUntilTimeout+0x30>
 8015652:	69bb      	ldr	r3, [r7, #24]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d101      	bne.n	801565c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015658:	2303      	movs	r3, #3
 801565a:	e04e      	b.n	80156fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	f003 0304 	and.w	r3, r3, #4
 8015666:	2b00      	cmp	r3, #0
 8015668:	d037      	beq.n	80156da <UART_WaitOnFlagUntilTimeout+0xb2>
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	2b80      	cmp	r3, #128	; 0x80
 801566e:	d034      	beq.n	80156da <UART_WaitOnFlagUntilTimeout+0xb2>
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	2b40      	cmp	r3, #64	; 0x40
 8015674:	d031      	beq.n	80156da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	69db      	ldr	r3, [r3, #28]
 801567c:	f003 0308 	and.w	r3, r3, #8
 8015680:	2b08      	cmp	r3, #8
 8015682:	d110      	bne.n	80156a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	2208      	movs	r2, #8
 801568a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801568c:	68f8      	ldr	r0, [r7, #12]
 801568e:	f000 f95b 	bl	8015948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	2208      	movs	r2, #8
 8015696:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	2200      	movs	r2, #0
 801569e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80156a2:	2301      	movs	r3, #1
 80156a4:	e029      	b.n	80156fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	69db      	ldr	r3, [r3, #28]
 80156ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80156b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80156b4:	d111      	bne.n	80156da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80156be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80156c0:	68f8      	ldr	r0, [r7, #12]
 80156c2:	f000 f941 	bl	8015948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	2220      	movs	r2, #32
 80156ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	2200      	movs	r2, #0
 80156d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80156d6:	2303      	movs	r3, #3
 80156d8:	e00f      	b.n	80156fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	69da      	ldr	r2, [r3, #28]
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	4013      	ands	r3, r2
 80156e4:	68ba      	ldr	r2, [r7, #8]
 80156e6:	429a      	cmp	r2, r3
 80156e8:	bf0c      	ite	eq
 80156ea:	2301      	moveq	r3, #1
 80156ec:	2300      	movne	r3, #0
 80156ee:	b2db      	uxtb	r3, r3
 80156f0:	461a      	mov	r2, r3
 80156f2:	79fb      	ldrb	r3, [r7, #7]
 80156f4:	429a      	cmp	r2, r3
 80156f6:	d0a0      	beq.n	801563a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80156f8:	2300      	movs	r3, #0
}
 80156fa:	4618      	mov	r0, r3
 80156fc:	3710      	adds	r7, #16
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}
	...

08015704 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015704:	b480      	push	{r7}
 8015706:	b0a3      	sub	sp, #140	; 0x8c
 8015708:	af00      	add	r7, sp, #0
 801570a:	60f8      	str	r0, [r7, #12]
 801570c:	60b9      	str	r1, [r7, #8]
 801570e:	4613      	mov	r3, r2
 8015710:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	68ba      	ldr	r2, [r7, #8]
 8015716:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	88fa      	ldrh	r2, [r7, #6]
 801571c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	88fa      	ldrh	r2, [r7, #6]
 8015724:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	2200      	movs	r2, #0
 801572c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	689b      	ldr	r3, [r3, #8]
 8015732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015736:	d10e      	bne.n	8015756 <UART_Start_Receive_IT+0x52>
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	691b      	ldr	r3, [r3, #16]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d105      	bne.n	801574c <UART_Start_Receive_IT+0x48>
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015746:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801574a:	e02d      	b.n	80157a8 <UART_Start_Receive_IT+0xa4>
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	22ff      	movs	r2, #255	; 0xff
 8015750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015754:	e028      	b.n	80157a8 <UART_Start_Receive_IT+0xa4>
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	689b      	ldr	r3, [r3, #8]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d10d      	bne.n	801577a <UART_Start_Receive_IT+0x76>
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	691b      	ldr	r3, [r3, #16]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d104      	bne.n	8015770 <UART_Start_Receive_IT+0x6c>
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	22ff      	movs	r2, #255	; 0xff
 801576a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801576e:	e01b      	b.n	80157a8 <UART_Start_Receive_IT+0xa4>
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	227f      	movs	r2, #127	; 0x7f
 8015774:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015778:	e016      	b.n	80157a8 <UART_Start_Receive_IT+0xa4>
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	689b      	ldr	r3, [r3, #8]
 801577e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015782:	d10d      	bne.n	80157a0 <UART_Start_Receive_IT+0x9c>
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	691b      	ldr	r3, [r3, #16]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d104      	bne.n	8015796 <UART_Start_Receive_IT+0x92>
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	227f      	movs	r2, #127	; 0x7f
 8015790:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015794:	e008      	b.n	80157a8 <UART_Start_Receive_IT+0xa4>
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	223f      	movs	r2, #63	; 0x3f
 801579a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801579e:	e003      	b.n	80157a8 <UART_Start_Receive_IT+0xa4>
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	2200      	movs	r2, #0
 80157a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	2200      	movs	r2, #0
 80157ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	2222      	movs	r2, #34	; 0x22
 80157b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	3308      	adds	r3, #8
 80157be:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80157c2:	e853 3f00 	ldrex	r3, [r3]
 80157c6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80157c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80157ca:	f043 0301 	orr.w	r3, r3, #1
 80157ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	3308      	adds	r3, #8
 80157d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80157dc:	673a      	str	r2, [r7, #112]	; 0x70
 80157de:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157e0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80157e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80157e4:	e841 2300 	strex	r3, r2, [r1]
 80157e8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80157ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d1e3      	bne.n	80157b8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80157f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80157f8:	d14f      	bne.n	801589a <UART_Start_Receive_IT+0x196>
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015800:	88fa      	ldrh	r2, [r7, #6]
 8015802:	429a      	cmp	r2, r3
 8015804:	d349      	bcc.n	801589a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	689b      	ldr	r3, [r3, #8]
 801580a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801580e:	d107      	bne.n	8015820 <UART_Start_Receive_IT+0x11c>
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	691b      	ldr	r3, [r3, #16]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d103      	bne.n	8015820 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	4a47      	ldr	r2, [pc, #284]	; (8015938 <UART_Start_Receive_IT+0x234>)
 801581c:	675a      	str	r2, [r3, #116]	; 0x74
 801581e:	e002      	b.n	8015826 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	4a46      	ldr	r2, [pc, #280]	; (801593c <UART_Start_Receive_IT+0x238>)
 8015824:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	691b      	ldr	r3, [r3, #16]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d01a      	beq.n	8015864 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015836:	e853 3f00 	ldrex	r3, [r3]
 801583a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801583c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801583e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	461a      	mov	r2, r3
 801584c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015850:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015852:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015854:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015856:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015858:	e841 2300 	strex	r3, r2, [r1]
 801585c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801585e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015860:	2b00      	cmp	r3, #0
 8015862:	d1e4      	bne.n	801582e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	3308      	adds	r3, #8
 801586a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801586c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801586e:	e853 3f00 	ldrex	r3, [r3]
 8015872:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801587a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	3308      	adds	r3, #8
 8015882:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015884:	64ba      	str	r2, [r7, #72]	; 0x48
 8015886:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015888:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801588a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801588c:	e841 2300 	strex	r3, r2, [r1]
 8015890:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015894:	2b00      	cmp	r3, #0
 8015896:	d1e5      	bne.n	8015864 <UART_Start_Receive_IT+0x160>
 8015898:	e046      	b.n	8015928 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	689b      	ldr	r3, [r3, #8]
 801589e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80158a2:	d107      	bne.n	80158b4 <UART_Start_Receive_IT+0x1b0>
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	691b      	ldr	r3, [r3, #16]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d103      	bne.n	80158b4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	4a24      	ldr	r2, [pc, #144]	; (8015940 <UART_Start_Receive_IT+0x23c>)
 80158b0:	675a      	str	r2, [r3, #116]	; 0x74
 80158b2:	e002      	b.n	80158ba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	4a23      	ldr	r2, [pc, #140]	; (8015944 <UART_Start_Receive_IT+0x240>)
 80158b8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	691b      	ldr	r3, [r3, #16]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d019      	beq.n	80158f6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ca:	e853 3f00 	ldrex	r3, [r3]
 80158ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80158d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80158d6:	677b      	str	r3, [r7, #116]	; 0x74
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	461a      	mov	r2, r3
 80158de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80158e0:	637b      	str	r3, [r7, #52]	; 0x34
 80158e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80158e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80158e8:	e841 2300 	strex	r3, r2, [r1]
 80158ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80158ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d1e6      	bne.n	80158c2 <UART_Start_Receive_IT+0x1be>
 80158f4:	e018      	b.n	8015928 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158fc:	697b      	ldr	r3, [r7, #20]
 80158fe:	e853 3f00 	ldrex	r3, [r3]
 8015902:	613b      	str	r3, [r7, #16]
   return(result);
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	f043 0320 	orr.w	r3, r3, #32
 801590a:	67bb      	str	r3, [r7, #120]	; 0x78
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	461a      	mov	r2, r3
 8015912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015914:	623b      	str	r3, [r7, #32]
 8015916:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015918:	69f9      	ldr	r1, [r7, #28]
 801591a:	6a3a      	ldr	r2, [r7, #32]
 801591c:	e841 2300 	strex	r3, r2, [r1]
 8015920:	61bb      	str	r3, [r7, #24]
   return(result);
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d1e6      	bne.n	80158f6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015928:	2300      	movs	r3, #0
}
 801592a:	4618      	mov	r0, r3
 801592c:	378c      	adds	r7, #140	; 0x8c
 801592e:	46bd      	mov	sp, r7
 8015930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015934:	4770      	bx	lr
 8015936:	bf00      	nop
 8015938:	08016169 	.word	0x08016169
 801593c:	08015e09 	.word	0x08015e09
 8015940:	08015c51 	.word	0x08015c51
 8015944:	08015a99 	.word	0x08015a99

08015948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015948:	b480      	push	{r7}
 801594a:	b095      	sub	sp, #84	; 0x54
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015958:	e853 3f00 	ldrex	r3, [r3]
 801595c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	461a      	mov	r2, r3
 801596c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801596e:	643b      	str	r3, [r7, #64]	; 0x40
 8015970:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015972:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015976:	e841 2300 	strex	r3, r2, [r1]
 801597a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801597e:	2b00      	cmp	r3, #0
 8015980:	d1e6      	bne.n	8015950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	3308      	adds	r3, #8
 8015988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801598a:	6a3b      	ldr	r3, [r7, #32]
 801598c:	e853 3f00 	ldrex	r3, [r3]
 8015990:	61fb      	str	r3, [r7, #28]
   return(result);
 8015992:	69fa      	ldr	r2, [r7, #28]
 8015994:	4b1e      	ldr	r3, [pc, #120]	; (8015a10 <UART_EndRxTransfer+0xc8>)
 8015996:	4013      	ands	r3, r2
 8015998:	64bb      	str	r3, [r7, #72]	; 0x48
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	3308      	adds	r3, #8
 80159a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80159a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80159a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80159a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159aa:	e841 2300 	strex	r3, r2, [r1]
 80159ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80159b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d1e5      	bne.n	8015982 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159ba:	2b01      	cmp	r3, #1
 80159bc:	d118      	bne.n	80159f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	e853 3f00 	ldrex	r3, [r3]
 80159ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	f023 0310 	bic.w	r3, r3, #16
 80159d2:	647b      	str	r3, [r7, #68]	; 0x44
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	461a      	mov	r2, r3
 80159da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80159dc:	61bb      	str	r3, [r7, #24]
 80159de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159e0:	6979      	ldr	r1, [r7, #20]
 80159e2:	69ba      	ldr	r2, [r7, #24]
 80159e4:	e841 2300 	strex	r3, r2, [r1]
 80159e8:	613b      	str	r3, [r7, #16]
   return(result);
 80159ea:	693b      	ldr	r3, [r7, #16]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d1e6      	bne.n	80159be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2220      	movs	r2, #32
 80159f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2200      	movs	r2, #0
 80159fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	2200      	movs	r2, #0
 8015a02:	675a      	str	r2, [r3, #116]	; 0x74
}
 8015a04:	bf00      	nop
 8015a06:	3754      	adds	r7, #84	; 0x54
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0e:	4770      	bx	lr
 8015a10:	effffffe 	.word	0xeffffffe

08015a14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b084      	sub	sp, #16
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	2200      	movs	r2, #0
 8015a26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015a32:	68f8      	ldr	r0, [r7, #12]
 8015a34:	f7fe ff2e 	bl	8014894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015a38:	bf00      	nop
 8015a3a:	3710      	adds	r7, #16
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}

08015a40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b088      	sub	sp, #32
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	e853 3f00 	ldrex	r3, [r3]
 8015a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015a5c:	61fb      	str	r3, [r7, #28]
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	461a      	mov	r2, r3
 8015a64:	69fb      	ldr	r3, [r7, #28]
 8015a66:	61bb      	str	r3, [r7, #24]
 8015a68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a6a:	6979      	ldr	r1, [r7, #20]
 8015a6c:	69ba      	ldr	r2, [r7, #24]
 8015a6e:	e841 2300 	strex	r3, r2, [r1]
 8015a72:	613b      	str	r3, [r7, #16]
   return(result);
 8015a74:	693b      	ldr	r3, [r7, #16]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d1e6      	bne.n	8015a48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	2220      	movs	r2, #32
 8015a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	2200      	movs	r2, #0
 8015a86:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f7fe fef9 	bl	8014880 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015a8e:	bf00      	nop
 8015a90:	3720      	adds	r7, #32
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
	...

08015a98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b09c      	sub	sp, #112	; 0x70
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015aa6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015ab0:	2b22      	cmp	r3, #34	; 0x22
 8015ab2:	f040 80be 	bne.w	8015c32 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015abc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015ac0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8015ac4:	b2d9      	uxtb	r1, r3
 8015ac6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015aca:	b2da      	uxtb	r2, r3
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ad0:	400a      	ands	r2, r1
 8015ad2:	b2d2      	uxtb	r2, r2
 8015ad4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ada:	1c5a      	adds	r2, r3, #1
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015ae6:	b29b      	uxth	r3, r3
 8015ae8:	3b01      	subs	r3, #1
 8015aea:	b29a      	uxth	r2, r3
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015af8:	b29b      	uxth	r3, r3
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	f040 80a1 	bne.w	8015c42 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b08:	e853 3f00 	ldrex	r3, [r3]
 8015b0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015b14:	66bb      	str	r3, [r7, #104]	; 0x68
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	461a      	mov	r2, r3
 8015b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015b20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015b24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015b26:	e841 2300 	strex	r3, r2, [r1]
 8015b2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d1e6      	bne.n	8015b00 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	3308      	adds	r3, #8
 8015b38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b3c:	e853 3f00 	ldrex	r3, [r3]
 8015b40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b44:	f023 0301 	bic.w	r3, r3, #1
 8015b48:	667b      	str	r3, [r7, #100]	; 0x64
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	3308      	adds	r3, #8
 8015b50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015b52:	647a      	str	r2, [r7, #68]	; 0x44
 8015b54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b5a:	e841 2300 	strex	r3, r2, [r1]
 8015b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d1e5      	bne.n	8015b32 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	2220      	movs	r2, #32
 8015b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	2200      	movs	r2, #0
 8015b72:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	2200      	movs	r2, #0
 8015b78:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	4a33      	ldr	r2, [pc, #204]	; (8015c4c <UART_RxISR_8BIT+0x1b4>)
 8015b80:	4293      	cmp	r3, r2
 8015b82:	d01f      	beq.n	8015bc4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d018      	beq.n	8015bc4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b9a:	e853 3f00 	ldrex	r3, [r3]
 8015b9e:	623b      	str	r3, [r7, #32]
   return(result);
 8015ba0:	6a3b      	ldr	r3, [r7, #32]
 8015ba2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	461a      	mov	r2, r3
 8015bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8015bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015bb8:	e841 2300 	strex	r3, r2, [r1]
 8015bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d1e6      	bne.n	8015b92 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bc8:	2b01      	cmp	r3, #1
 8015bca:	d12e      	bne.n	8015c2a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bd8:	693b      	ldr	r3, [r7, #16]
 8015bda:	e853 3f00 	ldrex	r3, [r3]
 8015bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	f023 0310 	bic.w	r3, r3, #16
 8015be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	461a      	mov	r2, r3
 8015bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015bf0:	61fb      	str	r3, [r7, #28]
 8015bf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bf4:	69b9      	ldr	r1, [r7, #24]
 8015bf6:	69fa      	ldr	r2, [r7, #28]
 8015bf8:	e841 2300 	strex	r3, r2, [r1]
 8015bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8015bfe:	697b      	ldr	r3, [r7, #20]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d1e6      	bne.n	8015bd2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	69db      	ldr	r3, [r3, #28]
 8015c0a:	f003 0310 	and.w	r3, r3, #16
 8015c0e:	2b10      	cmp	r3, #16
 8015c10:	d103      	bne.n	8015c1a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	2210      	movs	r2, #16
 8015c18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015c20:	4619      	mov	r1, r3
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f7fe fe40 	bl	80148a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015c28:	e00b      	b.n	8015c42 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f7ec fe58 	bl	80028e0 <HAL_UART_RxCpltCallback>
}
 8015c30:	e007      	b.n	8015c42 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	699a      	ldr	r2, [r3, #24]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	f042 0208 	orr.w	r2, r2, #8
 8015c40:	619a      	str	r2, [r3, #24]
}
 8015c42:	bf00      	nop
 8015c44:	3770      	adds	r7, #112	; 0x70
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}
 8015c4a:	bf00      	nop
 8015c4c:	58000c00 	.word	0x58000c00

08015c50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b09c      	sub	sp, #112	; 0x70
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015c5e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c68:	2b22      	cmp	r3, #34	; 0x22
 8015c6a:	f040 80be 	bne.w	8015dea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c7c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8015c7e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8015c82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015c86:	4013      	ands	r3, r2
 8015c88:	b29a      	uxth	r2, r3
 8015c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015c8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c92:	1c9a      	adds	r2, r3, #2
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015c9e:	b29b      	uxth	r3, r3
 8015ca0:	3b01      	subs	r3, #1
 8015ca2:	b29a      	uxth	r2, r3
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015cb0:	b29b      	uxth	r3, r3
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	f040 80a1 	bne.w	8015dfa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015cc0:	e853 3f00 	ldrex	r3, [r3]
 8015cc4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015ccc:	667b      	str	r3, [r7, #100]	; 0x64
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	461a      	mov	r2, r3
 8015cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015cd6:	657b      	str	r3, [r7, #84]	; 0x54
 8015cd8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015cdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015cde:	e841 2300 	strex	r3, r2, [r1]
 8015ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d1e6      	bne.n	8015cb8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	3308      	adds	r3, #8
 8015cf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cf4:	e853 3f00 	ldrex	r3, [r3]
 8015cf8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfc:	f023 0301 	bic.w	r3, r3, #1
 8015d00:	663b      	str	r3, [r7, #96]	; 0x60
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	3308      	adds	r3, #8
 8015d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015d0a:	643a      	str	r2, [r7, #64]	; 0x40
 8015d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015d10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015d12:	e841 2300 	strex	r3, r2, [r1]
 8015d16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d1e5      	bne.n	8015cea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2220      	movs	r2, #32
 8015d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2200      	movs	r2, #0
 8015d2a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	4a33      	ldr	r2, [pc, #204]	; (8015e04 <UART_RxISR_16BIT+0x1b4>)
 8015d38:	4293      	cmp	r3, r2
 8015d3a:	d01f      	beq.n	8015d7c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d018      	beq.n	8015d7c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d50:	6a3b      	ldr	r3, [r7, #32]
 8015d52:	e853 3f00 	ldrex	r3, [r3]
 8015d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8015d58:	69fb      	ldr	r3, [r7, #28]
 8015d5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	461a      	mov	r2, r3
 8015d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d6a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d70:	e841 2300 	strex	r3, r2, [r1]
 8015d74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d1e6      	bne.n	8015d4a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d80:	2b01      	cmp	r3, #1
 8015d82:	d12e      	bne.n	8015de2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2200      	movs	r2, #0
 8015d88:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	e853 3f00 	ldrex	r3, [r3]
 8015d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	f023 0310 	bic.w	r3, r3, #16
 8015d9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	461a      	mov	r2, r3
 8015da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015da8:	61bb      	str	r3, [r7, #24]
 8015daa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dac:	6979      	ldr	r1, [r7, #20]
 8015dae:	69ba      	ldr	r2, [r7, #24]
 8015db0:	e841 2300 	strex	r3, r2, [r1]
 8015db4:	613b      	str	r3, [r7, #16]
   return(result);
 8015db6:	693b      	ldr	r3, [r7, #16]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d1e6      	bne.n	8015d8a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	69db      	ldr	r3, [r3, #28]
 8015dc2:	f003 0310 	and.w	r3, r3, #16
 8015dc6:	2b10      	cmp	r3, #16
 8015dc8:	d103      	bne.n	8015dd2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	2210      	movs	r2, #16
 8015dd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015dd8:	4619      	mov	r1, r3
 8015dda:	6878      	ldr	r0, [r7, #4]
 8015ddc:	f7fe fd64 	bl	80148a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015de0:	e00b      	b.n	8015dfa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	f7ec fd7c 	bl	80028e0 <HAL_UART_RxCpltCallback>
}
 8015de8:	e007      	b.n	8015dfa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	699a      	ldr	r2, [r3, #24]
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	f042 0208 	orr.w	r2, r2, #8
 8015df8:	619a      	str	r2, [r3, #24]
}
 8015dfa:	bf00      	nop
 8015dfc:	3770      	adds	r7, #112	; 0x70
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bd80      	pop	{r7, pc}
 8015e02:	bf00      	nop
 8015e04:	58000c00 	.word	0x58000c00

08015e08 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b0ac      	sub	sp, #176	; 0xb0
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015e16:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	69db      	ldr	r3, [r3, #28]
 8015e20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	689b      	ldr	r3, [r3, #8]
 8015e34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015e3e:	2b22      	cmp	r3, #34	; 0x22
 8015e40:	f040 8180 	bne.w	8016144 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015e4a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015e4e:	e123      	b.n	8016098 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e56:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015e5a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8015e5e:	b2d9      	uxtb	r1, r3
 8015e60:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8015e64:	b2da      	uxtb	r2, r3
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e6a:	400a      	ands	r2, r1
 8015e6c:	b2d2      	uxtb	r2, r2
 8015e6e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e74:	1c5a      	adds	r2, r3, #1
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015e80:	b29b      	uxth	r3, r3
 8015e82:	3b01      	subs	r3, #1
 8015e84:	b29a      	uxth	r2, r3
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	69db      	ldr	r3, [r3, #28]
 8015e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015e9a:	f003 0307 	and.w	r3, r3, #7
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d053      	beq.n	8015f4a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015ea6:	f003 0301 	and.w	r3, r3, #1
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d011      	beq.n	8015ed2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8015eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d00b      	beq.n	8015ed2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	2201      	movs	r2, #1
 8015ec0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ec8:	f043 0201 	orr.w	r2, r3, #1
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015ed6:	f003 0302 	and.w	r3, r3, #2
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d011      	beq.n	8015f02 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8015ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015ee2:	f003 0301 	and.w	r3, r3, #1
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d00b      	beq.n	8015f02 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	2202      	movs	r2, #2
 8015ef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ef8:	f043 0204 	orr.w	r2, r3, #4
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015f06:	f003 0304 	and.w	r3, r3, #4
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d011      	beq.n	8015f32 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8015f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015f12:	f003 0301 	and.w	r3, r3, #1
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d00b      	beq.n	8015f32 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	2204      	movs	r2, #4
 8015f20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015f28:	f043 0202 	orr.w	r2, r3, #2
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d006      	beq.n	8015f4a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015f3c:	6878      	ldr	r0, [r7, #4]
 8015f3e:	f7fe fca9 	bl	8014894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	2200      	movs	r2, #0
 8015f46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015f50:	b29b      	uxth	r3, r3
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	f040 80a0 	bne.w	8016098 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015f60:	e853 3f00 	ldrex	r3, [r3]
 8015f64:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8015f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	461a      	mov	r2, r3
 8015f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015f7c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f7e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8015f80:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015f82:	e841 2300 	strex	r3, r2, [r1]
 8015f86:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8015f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d1e4      	bne.n	8015f58 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	3308      	adds	r3, #8
 8015f94:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f98:	e853 3f00 	ldrex	r3, [r3]
 8015f9c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8015f9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015fa0:	4b6e      	ldr	r3, [pc, #440]	; (801615c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8015fa2:	4013      	ands	r3, r2
 8015fa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	3308      	adds	r3, #8
 8015fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015fb2:	66ba      	str	r2, [r7, #104]	; 0x68
 8015fb4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fb6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015fb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015fba:	e841 2300 	strex	r3, r2, [r1]
 8015fbe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d1e3      	bne.n	8015f8e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	2220      	movs	r2, #32
 8015fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	4a60      	ldr	r2, [pc, #384]	; (8016160 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8015fe0:	4293      	cmp	r3, r2
 8015fe2:	d021      	beq.n	8016028 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	685b      	ldr	r3, [r3, #4]
 8015fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d01a      	beq.n	8016028 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ffa:	e853 3f00 	ldrex	r3, [r3]
 8015ffe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016002:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	461a      	mov	r2, r3
 8016010:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016014:	657b      	str	r3, [r7, #84]	; 0x54
 8016016:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016018:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801601a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801601c:	e841 2300 	strex	r3, r2, [r1]
 8016020:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016024:	2b00      	cmp	r3, #0
 8016026:	d1e4      	bne.n	8015ff2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801602c:	2b01      	cmp	r3, #1
 801602e:	d130      	bne.n	8016092 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	2200      	movs	r2, #0
 8016034:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801603e:	e853 3f00 	ldrex	r3, [r3]
 8016042:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016046:	f023 0310 	bic.w	r3, r3, #16
 801604a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	461a      	mov	r2, r3
 8016054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016058:	643b      	str	r3, [r7, #64]	; 0x40
 801605a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801605c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801605e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016060:	e841 2300 	strex	r3, r2, [r1]
 8016064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016068:	2b00      	cmp	r3, #0
 801606a:	d1e4      	bne.n	8016036 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	69db      	ldr	r3, [r3, #28]
 8016072:	f003 0310 	and.w	r3, r3, #16
 8016076:	2b10      	cmp	r3, #16
 8016078:	d103      	bne.n	8016082 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	2210      	movs	r2, #16
 8016080:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016088:	4619      	mov	r1, r3
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f7fe fc0c 	bl	80148a8 <HAL_UARTEx_RxEventCallback>
 8016090:	e002      	b.n	8016098 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f7ec fc24 	bl	80028e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016098:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801609c:	2b00      	cmp	r3, #0
 801609e:	d006      	beq.n	80160ae <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80160a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160a4:	f003 0320 	and.w	r3, r3, #32
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	f47f aed1 	bne.w	8015e50 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80160b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80160b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d049      	beq.n	8016154 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80160c6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d242      	bcs.n	8016154 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	3308      	adds	r3, #8
 80160d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160d6:	6a3b      	ldr	r3, [r7, #32]
 80160d8:	e853 3f00 	ldrex	r3, [r3]
 80160dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80160de:	69fb      	ldr	r3, [r7, #28]
 80160e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80160e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	3308      	adds	r3, #8
 80160ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80160f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80160f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80160f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160fa:	e841 2300 	strex	r3, r2, [r1]
 80160fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016102:	2b00      	cmp	r3, #0
 8016104:	d1e3      	bne.n	80160ce <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	4a16      	ldr	r2, [pc, #88]	; (8016164 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801610a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	e853 3f00 	ldrex	r3, [r3]
 8016118:	60bb      	str	r3, [r7, #8]
   return(result);
 801611a:	68bb      	ldr	r3, [r7, #8]
 801611c:	f043 0320 	orr.w	r3, r3, #32
 8016120:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	461a      	mov	r2, r3
 801612a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801612e:	61bb      	str	r3, [r7, #24]
 8016130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016132:	6979      	ldr	r1, [r7, #20]
 8016134:	69ba      	ldr	r2, [r7, #24]
 8016136:	e841 2300 	strex	r3, r2, [r1]
 801613a:	613b      	str	r3, [r7, #16]
   return(result);
 801613c:	693b      	ldr	r3, [r7, #16]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d1e4      	bne.n	801610c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016142:	e007      	b.n	8016154 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	699a      	ldr	r2, [r3, #24]
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	f042 0208 	orr.w	r2, r2, #8
 8016152:	619a      	str	r2, [r3, #24]
}
 8016154:	bf00      	nop
 8016156:	37b0      	adds	r7, #176	; 0xb0
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}
 801615c:	effffffe 	.word	0xeffffffe
 8016160:	58000c00 	.word	0x58000c00
 8016164:	08015a99 	.word	0x08015a99

08016168 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b0ae      	sub	sp, #184	; 0xb8
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016176:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	69db      	ldr	r3, [r3, #28]
 8016180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	689b      	ldr	r3, [r3, #8]
 8016194:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801619e:	2b22      	cmp	r3, #34	; 0x22
 80161a0:	f040 8184 	bne.w	80164ac <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80161aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80161ae:	e127      	b.n	8016400 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161b6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80161c2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80161c6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80161ca:	4013      	ands	r3, r2
 80161cc:	b29a      	uxth	r2, r3
 80161ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80161d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161d8:	1c9a      	adds	r2, r3, #2
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80161e4:	b29b      	uxth	r3, r3
 80161e6:	3b01      	subs	r3, #1
 80161e8:	b29a      	uxth	r2, r3
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	69db      	ldr	r3, [r3, #28]
 80161f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80161fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80161fe:	f003 0307 	and.w	r3, r3, #7
 8016202:	2b00      	cmp	r3, #0
 8016204:	d053      	beq.n	80162ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801620a:	f003 0301 	and.w	r3, r3, #1
 801620e:	2b00      	cmp	r3, #0
 8016210:	d011      	beq.n	8016236 <UART_RxISR_16BIT_FIFOEN+0xce>
 8016212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801621a:	2b00      	cmp	r3, #0
 801621c:	d00b      	beq.n	8016236 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	2201      	movs	r2, #1
 8016224:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801622c:	f043 0201 	orr.w	r2, r3, #1
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016236:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801623a:	f003 0302 	and.w	r3, r3, #2
 801623e:	2b00      	cmp	r3, #0
 8016240:	d011      	beq.n	8016266 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8016242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016246:	f003 0301 	and.w	r3, r3, #1
 801624a:	2b00      	cmp	r3, #0
 801624c:	d00b      	beq.n	8016266 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	2202      	movs	r2, #2
 8016254:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801625c:	f043 0204 	orr.w	r2, r3, #4
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801626a:	f003 0304 	and.w	r3, r3, #4
 801626e:	2b00      	cmp	r3, #0
 8016270:	d011      	beq.n	8016296 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8016272:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016276:	f003 0301 	and.w	r3, r3, #1
 801627a:	2b00      	cmp	r3, #0
 801627c:	d00b      	beq.n	8016296 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	2204      	movs	r2, #4
 8016284:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801628c:	f043 0202 	orr.w	r2, r3, #2
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801629c:	2b00      	cmp	r3, #0
 801629e:	d006      	beq.n	80162ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f7fe faf7 	bl	8014894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2200      	movs	r2, #0
 80162aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162b4:	b29b      	uxth	r3, r3
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	f040 80a2 	bne.w	8016400 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80162c4:	e853 3f00 	ldrex	r3, [r3]
 80162c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80162ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80162cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80162d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	461a      	mov	r2, r3
 80162da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80162de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80162e2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80162e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80162ea:	e841 2300 	strex	r3, r2, [r1]
 80162ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80162f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d1e2      	bne.n	80162bc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	3308      	adds	r3, #8
 80162fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016300:	e853 3f00 	ldrex	r3, [r3]
 8016304:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016306:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016308:	4b6e      	ldr	r3, [pc, #440]	; (80164c4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801630a:	4013      	ands	r3, r2
 801630c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	3308      	adds	r3, #8
 8016316:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801631a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801631c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801631e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016320:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016322:	e841 2300 	strex	r3, r2, [r1]
 8016326:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801632a:	2b00      	cmp	r3, #0
 801632c:	d1e3      	bne.n	80162f6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	2220      	movs	r2, #32
 8016332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	2200      	movs	r2, #0
 801633a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	2200      	movs	r2, #0
 8016340:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	4a60      	ldr	r2, [pc, #384]	; (80164c8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016348:	4293      	cmp	r3, r2
 801634a:	d021      	beq.n	8016390 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	685b      	ldr	r3, [r3, #4]
 8016352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016356:	2b00      	cmp	r3, #0
 8016358:	d01a      	beq.n	8016390 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016362:	e853 3f00 	ldrex	r3, [r3]
 8016366:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801636a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801636e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	461a      	mov	r2, r3
 8016378:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801637c:	65bb      	str	r3, [r7, #88]	; 0x58
 801637e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016380:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016382:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016384:	e841 2300 	strex	r3, r2, [r1]
 8016388:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801638a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801638c:	2b00      	cmp	r3, #0
 801638e:	d1e4      	bne.n	801635a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016394:	2b01      	cmp	r3, #1
 8016396:	d130      	bne.n	80163fa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2200      	movs	r2, #0
 801639c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163a6:	e853 3f00 	ldrex	r3, [r3]
 80163aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80163ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ae:	f023 0310 	bic.w	r3, r3, #16
 80163b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	461a      	mov	r2, r3
 80163bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80163c0:	647b      	str	r3, [r7, #68]	; 0x44
 80163c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80163c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80163c8:	e841 2300 	strex	r3, r2, [r1]
 80163cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80163ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d1e4      	bne.n	801639e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	69db      	ldr	r3, [r3, #28]
 80163da:	f003 0310 	and.w	r3, r3, #16
 80163de:	2b10      	cmp	r3, #16
 80163e0:	d103      	bne.n	80163ea <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	2210      	movs	r2, #16
 80163e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80163f0:	4619      	mov	r1, r3
 80163f2:	6878      	ldr	r0, [r7, #4]
 80163f4:	f7fe fa58 	bl	80148a8 <HAL_UARTEx_RxEventCallback>
 80163f8:	e002      	b.n	8016400 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f7ec fa70 	bl	80028e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016400:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016404:	2b00      	cmp	r3, #0
 8016406:	d006      	beq.n	8016416 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016408:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801640c:	f003 0320 	and.w	r3, r3, #32
 8016410:	2b00      	cmp	r3, #0
 8016412:	f47f aecd 	bne.w	80161b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801641c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016420:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016424:	2b00      	cmp	r3, #0
 8016426:	d049      	beq.n	80164bc <UART_RxISR_16BIT_FIFOEN+0x354>
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801642e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8016432:	429a      	cmp	r2, r3
 8016434:	d242      	bcs.n	80164bc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	3308      	adds	r3, #8
 801643c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016440:	e853 3f00 	ldrex	r3, [r3]
 8016444:	623b      	str	r3, [r7, #32]
   return(result);
 8016446:	6a3b      	ldr	r3, [r7, #32]
 8016448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801644c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	3308      	adds	r3, #8
 8016456:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801645a:	633a      	str	r2, [r7, #48]	; 0x30
 801645c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801645e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016462:	e841 2300 	strex	r3, r2, [r1]
 8016466:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646a:	2b00      	cmp	r3, #0
 801646c:	d1e3      	bne.n	8016436 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	4a16      	ldr	r2, [pc, #88]	; (80164cc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8016472:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801647a:	693b      	ldr	r3, [r7, #16]
 801647c:	e853 3f00 	ldrex	r3, [r3]
 8016480:	60fb      	str	r3, [r7, #12]
   return(result);
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	f043 0320 	orr.w	r3, r3, #32
 8016488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	461a      	mov	r2, r3
 8016492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016496:	61fb      	str	r3, [r7, #28]
 8016498:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801649a:	69b9      	ldr	r1, [r7, #24]
 801649c:	69fa      	ldr	r2, [r7, #28]
 801649e:	e841 2300 	strex	r3, r2, [r1]
 80164a2:	617b      	str	r3, [r7, #20]
   return(result);
 80164a4:	697b      	ldr	r3, [r7, #20]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d1e4      	bne.n	8016474 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80164aa:	e007      	b.n	80164bc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	699a      	ldr	r2, [r3, #24]
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	f042 0208 	orr.w	r2, r2, #8
 80164ba:	619a      	str	r2, [r3, #24]
}
 80164bc:	bf00      	nop
 80164be:	37b8      	adds	r7, #184	; 0xb8
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}
 80164c4:	effffffe 	.word	0xeffffffe
 80164c8:	58000c00 	.word	0x58000c00
 80164cc:	08015c51 	.word	0x08015c51

080164d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80164d0:	b480      	push	{r7}
 80164d2:	b083      	sub	sp, #12
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80164d8:	bf00      	nop
 80164da:	370c      	adds	r7, #12
 80164dc:	46bd      	mov	sp, r7
 80164de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e2:	4770      	bx	lr

080164e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80164e4:	b480      	push	{r7}
 80164e6:	b083      	sub	sp, #12
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80164ec:	bf00      	nop
 80164ee:	370c      	adds	r7, #12
 80164f0:	46bd      	mov	sp, r7
 80164f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f6:	4770      	bx	lr

080164f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80164f8:	b480      	push	{r7}
 80164fa:	b083      	sub	sp, #12
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016500:	bf00      	nop
 8016502:	370c      	adds	r7, #12
 8016504:	46bd      	mov	sp, r7
 8016506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650a:	4770      	bx	lr

0801650c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 801650c:	b480      	push	{r7}
 801650e:	b089      	sub	sp, #36	; 0x24
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801651a:	2b01      	cmp	r3, #1
 801651c:	d101      	bne.n	8016522 <HAL_UARTEx_EnableStopMode+0x16>
 801651e:	2302      	movs	r3, #2
 8016520:	e021      	b.n	8016566 <HAL_UARTEx_EnableStopMode+0x5a>
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	2201      	movs	r2, #1
 8016526:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	e853 3f00 	ldrex	r3, [r3]
 8016536:	60bb      	str	r3, [r7, #8]
   return(result);
 8016538:	68bb      	ldr	r3, [r7, #8]
 801653a:	f043 0302 	orr.w	r3, r3, #2
 801653e:	61fb      	str	r3, [r7, #28]
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	461a      	mov	r2, r3
 8016546:	69fb      	ldr	r3, [r7, #28]
 8016548:	61bb      	str	r3, [r7, #24]
 801654a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801654c:	6979      	ldr	r1, [r7, #20]
 801654e:	69ba      	ldr	r2, [r7, #24]
 8016550:	e841 2300 	strex	r3, r2, [r1]
 8016554:	613b      	str	r3, [r7, #16]
   return(result);
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d1e6      	bne.n	801652a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2200      	movs	r2, #0
 8016560:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016564:	2300      	movs	r3, #0
}
 8016566:	4618      	mov	r0, r3
 8016568:	3724      	adds	r7, #36	; 0x24
 801656a:	46bd      	mov	sp, r7
 801656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016570:	4770      	bx	lr

08016572 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8016572:	b580      	push	{r7, lr}
 8016574:	b084      	sub	sp, #16
 8016576:	af00      	add	r7, sp, #0
 8016578:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016580:	2b01      	cmp	r3, #1
 8016582:	d101      	bne.n	8016588 <HAL_UARTEx_EnableFifoMode+0x16>
 8016584:	2302      	movs	r3, #2
 8016586:	e02b      	b.n	80165e0 <HAL_UARTEx_EnableFifoMode+0x6e>
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	2201      	movs	r2, #1
 801658c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2224      	movs	r2, #36	; 0x24
 8016594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	681a      	ldr	r2, [r3, #0]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	f022 0201 	bic.w	r2, r2, #1
 80165ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80165b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80165be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	68fa      	ldr	r2, [r7, #12]
 80165c6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f000 f8c3 	bl	8016754 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	2220      	movs	r2, #32
 80165d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	2200      	movs	r2, #0
 80165da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80165de:	2300      	movs	r3, #0
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	3710      	adds	r7, #16
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80165e8:	b480      	push	{r7}
 80165ea:	b085      	sub	sp, #20
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80165f6:	2b01      	cmp	r3, #1
 80165f8:	d101      	bne.n	80165fe <HAL_UARTEx_DisableFifoMode+0x16>
 80165fa:	2302      	movs	r3, #2
 80165fc:	e027      	b.n	801664e <HAL_UARTEx_DisableFifoMode+0x66>
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	2201      	movs	r2, #1
 8016602:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	2224      	movs	r2, #36	; 0x24
 801660a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	681a      	ldr	r2, [r3, #0]
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f022 0201 	bic.w	r2, r2, #1
 8016624:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801662c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	2200      	movs	r2, #0
 8016632:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	68fa      	ldr	r2, [r7, #12]
 801663a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2220      	movs	r2, #32
 8016640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2200      	movs	r2, #0
 8016648:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801664c:	2300      	movs	r3, #0
}
 801664e:	4618      	mov	r0, r3
 8016650:	3714      	adds	r7, #20
 8016652:	46bd      	mov	sp, r7
 8016654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016658:	4770      	bx	lr

0801665a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801665a:	b580      	push	{r7, lr}
 801665c:	b084      	sub	sp, #16
 801665e:	af00      	add	r7, sp, #0
 8016660:	6078      	str	r0, [r7, #4]
 8016662:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801666a:	2b01      	cmp	r3, #1
 801666c:	d101      	bne.n	8016672 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801666e:	2302      	movs	r3, #2
 8016670:	e02d      	b.n	80166ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	2201      	movs	r2, #1
 8016676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	2224      	movs	r2, #36	; 0x24
 801667e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	681a      	ldr	r2, [r3, #0]
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	f022 0201 	bic.w	r2, r2, #1
 8016698:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	689b      	ldr	r3, [r3, #8]
 80166a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	683a      	ldr	r2, [r7, #0]
 80166aa:	430a      	orrs	r2, r1
 80166ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80166ae:	6878      	ldr	r0, [r7, #4]
 80166b0:	f000 f850 	bl	8016754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	68fa      	ldr	r2, [r7, #12]
 80166ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2220      	movs	r2, #32
 80166c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2200      	movs	r2, #0
 80166c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80166cc:	2300      	movs	r3, #0
}
 80166ce:	4618      	mov	r0, r3
 80166d0:	3710      	adds	r7, #16
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}

080166d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80166d6:	b580      	push	{r7, lr}
 80166d8:	b084      	sub	sp, #16
 80166da:	af00      	add	r7, sp, #0
 80166dc:	6078      	str	r0, [r7, #4]
 80166de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80166e6:	2b01      	cmp	r3, #1
 80166e8:	d101      	bne.n	80166ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80166ea:	2302      	movs	r3, #2
 80166ec:	e02d      	b.n	801674a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2201      	movs	r2, #1
 80166f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	2224      	movs	r2, #36	; 0x24
 80166fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	681a      	ldr	r2, [r3, #0]
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	f022 0201 	bic.w	r2, r2, #1
 8016714:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	689b      	ldr	r3, [r3, #8]
 801671c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	683a      	ldr	r2, [r7, #0]
 8016726:	430a      	orrs	r2, r1
 8016728:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	f000 f812 	bl	8016754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	68fa      	ldr	r2, [r7, #12]
 8016736:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2220      	movs	r2, #32
 801673c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	2200      	movs	r2, #0
 8016744:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016748:	2300      	movs	r3, #0
}
 801674a:	4618      	mov	r0, r3
 801674c:	3710      	adds	r7, #16
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}
	...

08016754 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016754:	b480      	push	{r7}
 8016756:	b085      	sub	sp, #20
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016760:	2b00      	cmp	r3, #0
 8016762:	d108      	bne.n	8016776 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2201      	movs	r2, #1
 8016768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2201      	movs	r2, #1
 8016770:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016774:	e031      	b.n	80167da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016776:	2310      	movs	r3, #16
 8016778:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801677a:	2310      	movs	r3, #16
 801677c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	689b      	ldr	r3, [r3, #8]
 8016784:	0e5b      	lsrs	r3, r3, #25
 8016786:	b2db      	uxtb	r3, r3
 8016788:	f003 0307 	and.w	r3, r3, #7
 801678c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	689b      	ldr	r3, [r3, #8]
 8016794:	0f5b      	lsrs	r3, r3, #29
 8016796:	b2db      	uxtb	r3, r3
 8016798:	f003 0307 	and.w	r3, r3, #7
 801679c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801679e:	7bbb      	ldrb	r3, [r7, #14]
 80167a0:	7b3a      	ldrb	r2, [r7, #12]
 80167a2:	4911      	ldr	r1, [pc, #68]	; (80167e8 <UARTEx_SetNbDataToProcess+0x94>)
 80167a4:	5c8a      	ldrb	r2, [r1, r2]
 80167a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80167aa:	7b3a      	ldrb	r2, [r7, #12]
 80167ac:	490f      	ldr	r1, [pc, #60]	; (80167ec <UARTEx_SetNbDataToProcess+0x98>)
 80167ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80167b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80167b4:	b29a      	uxth	r2, r3
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80167bc:	7bfb      	ldrb	r3, [r7, #15]
 80167be:	7b7a      	ldrb	r2, [r7, #13]
 80167c0:	4909      	ldr	r1, [pc, #36]	; (80167e8 <UARTEx_SetNbDataToProcess+0x94>)
 80167c2:	5c8a      	ldrb	r2, [r1, r2]
 80167c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80167c8:	7b7a      	ldrb	r2, [r7, #13]
 80167ca:	4908      	ldr	r1, [pc, #32]	; (80167ec <UARTEx_SetNbDataToProcess+0x98>)
 80167cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80167ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80167d2:	b29a      	uxth	r2, r3
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80167da:	bf00      	nop
 80167dc:	3714      	adds	r7, #20
 80167de:	46bd      	mov	sp, r7
 80167e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e4:	4770      	bx	lr
 80167e6:	bf00      	nop
 80167e8:	0801aaf4 	.word	0x0801aaf4
 80167ec:	0801aafc 	.word	0x0801aafc

080167f0 <__NVIC_SetPriority>:
{
 80167f0:	b480      	push	{r7}
 80167f2:	b083      	sub	sp, #12
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	4603      	mov	r3, r0
 80167f8:	6039      	str	r1, [r7, #0]
 80167fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80167fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016800:	2b00      	cmp	r3, #0
 8016802:	db0a      	blt.n	801681a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016804:	683b      	ldr	r3, [r7, #0]
 8016806:	b2da      	uxtb	r2, r3
 8016808:	490c      	ldr	r1, [pc, #48]	; (801683c <__NVIC_SetPriority+0x4c>)
 801680a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801680e:	0112      	lsls	r2, r2, #4
 8016810:	b2d2      	uxtb	r2, r2
 8016812:	440b      	add	r3, r1
 8016814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016818:	e00a      	b.n	8016830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	b2da      	uxtb	r2, r3
 801681e:	4908      	ldr	r1, [pc, #32]	; (8016840 <__NVIC_SetPriority+0x50>)
 8016820:	88fb      	ldrh	r3, [r7, #6]
 8016822:	f003 030f 	and.w	r3, r3, #15
 8016826:	3b04      	subs	r3, #4
 8016828:	0112      	lsls	r2, r2, #4
 801682a:	b2d2      	uxtb	r2, r2
 801682c:	440b      	add	r3, r1
 801682e:	761a      	strb	r2, [r3, #24]
}
 8016830:	bf00      	nop
 8016832:	370c      	adds	r7, #12
 8016834:	46bd      	mov	sp, r7
 8016836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683a:	4770      	bx	lr
 801683c:	e000e100 	.word	0xe000e100
 8016840:	e000ed00 	.word	0xe000ed00

08016844 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016844:	b580      	push	{r7, lr}
 8016846:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016848:	4b05      	ldr	r3, [pc, #20]	; (8016860 <SysTick_Handler+0x1c>)
 801684a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801684c:	f002 f958 	bl	8018b00 <xTaskGetSchedulerState>
 8016850:	4603      	mov	r3, r0
 8016852:	2b01      	cmp	r3, #1
 8016854:	d001      	beq.n	801685a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016856:	f002 ff77 	bl	8019748 <xPortSysTickHandler>
  }
}
 801685a:	bf00      	nop
 801685c:	bd80      	pop	{r7, pc}
 801685e:	bf00      	nop
 8016860:	e000e010 	.word	0xe000e010

08016864 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016864:	b580      	push	{r7, lr}
 8016866:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016868:	2100      	movs	r1, #0
 801686a:	f06f 0004 	mvn.w	r0, #4
 801686e:	f7ff ffbf 	bl	80167f0 <__NVIC_SetPriority>
#endif
}
 8016872:	bf00      	nop
 8016874:	bd80      	pop	{r7, pc}
	...

08016878 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016878:	b480      	push	{r7}
 801687a:	b083      	sub	sp, #12
 801687c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801687e:	f3ef 8305 	mrs	r3, IPSR
 8016882:	603b      	str	r3, [r7, #0]
  return(result);
 8016884:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016886:	2b00      	cmp	r3, #0
 8016888:	d003      	beq.n	8016892 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801688a:	f06f 0305 	mvn.w	r3, #5
 801688e:	607b      	str	r3, [r7, #4]
 8016890:	e00c      	b.n	80168ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016892:	4b0a      	ldr	r3, [pc, #40]	; (80168bc <osKernelInitialize+0x44>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d105      	bne.n	80168a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801689a:	4b08      	ldr	r3, [pc, #32]	; (80168bc <osKernelInitialize+0x44>)
 801689c:	2201      	movs	r2, #1
 801689e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80168a0:	2300      	movs	r3, #0
 80168a2:	607b      	str	r3, [r7, #4]
 80168a4:	e002      	b.n	80168ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80168a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80168aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80168ac:	687b      	ldr	r3, [r7, #4]
}
 80168ae:	4618      	mov	r0, r3
 80168b0:	370c      	adds	r7, #12
 80168b2:	46bd      	mov	sp, r7
 80168b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b8:	4770      	bx	lr
 80168ba:	bf00      	nop
 80168bc:	24001fbc 	.word	0x24001fbc

080168c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80168c6:	f3ef 8305 	mrs	r3, IPSR
 80168ca:	603b      	str	r3, [r7, #0]
  return(result);
 80168cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d003      	beq.n	80168da <osKernelStart+0x1a>
    stat = osErrorISR;
 80168d2:	f06f 0305 	mvn.w	r3, #5
 80168d6:	607b      	str	r3, [r7, #4]
 80168d8:	e010      	b.n	80168fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80168da:	4b0b      	ldr	r3, [pc, #44]	; (8016908 <osKernelStart+0x48>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	2b01      	cmp	r3, #1
 80168e0:	d109      	bne.n	80168f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80168e2:	f7ff ffbf 	bl	8016864 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80168e6:	4b08      	ldr	r3, [pc, #32]	; (8016908 <osKernelStart+0x48>)
 80168e8:	2202      	movs	r2, #2
 80168ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80168ec:	f001 fc0c 	bl	8018108 <vTaskStartScheduler>
      stat = osOK;
 80168f0:	2300      	movs	r3, #0
 80168f2:	607b      	str	r3, [r7, #4]
 80168f4:	e002      	b.n	80168fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80168f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80168fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80168fc:	687b      	ldr	r3, [r7, #4]
}
 80168fe:	4618      	mov	r0, r3
 8016900:	3708      	adds	r7, #8
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}
 8016906:	bf00      	nop
 8016908:	24001fbc 	.word	0x24001fbc

0801690c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801690c:	b580      	push	{r7, lr}
 801690e:	b08e      	sub	sp, #56	; 0x38
 8016910:	af04      	add	r7, sp, #16
 8016912:	60f8      	str	r0, [r7, #12]
 8016914:	60b9      	str	r1, [r7, #8]
 8016916:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016918:	2300      	movs	r3, #0
 801691a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801691c:	f3ef 8305 	mrs	r3, IPSR
 8016920:	617b      	str	r3, [r7, #20]
  return(result);
 8016922:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016924:	2b00      	cmp	r3, #0
 8016926:	d17e      	bne.n	8016a26 <osThreadNew+0x11a>
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d07b      	beq.n	8016a26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801692e:	2380      	movs	r3, #128	; 0x80
 8016930:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016932:	2318      	movs	r3, #24
 8016934:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016936:	2300      	movs	r3, #0
 8016938:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801693a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801693e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d045      	beq.n	80169d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d002      	beq.n	8016954 <osThreadNew+0x48>
        name = attr->name;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	699b      	ldr	r3, [r3, #24]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d002      	beq.n	8016962 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	699b      	ldr	r3, [r3, #24]
 8016960:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016962:	69fb      	ldr	r3, [r7, #28]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d008      	beq.n	801697a <osThreadNew+0x6e>
 8016968:	69fb      	ldr	r3, [r7, #28]
 801696a:	2b38      	cmp	r3, #56	; 0x38
 801696c:	d805      	bhi.n	801697a <osThreadNew+0x6e>
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	685b      	ldr	r3, [r3, #4]
 8016972:	f003 0301 	and.w	r3, r3, #1
 8016976:	2b00      	cmp	r3, #0
 8016978:	d001      	beq.n	801697e <osThreadNew+0x72>
        return (NULL);
 801697a:	2300      	movs	r3, #0
 801697c:	e054      	b.n	8016a28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	695b      	ldr	r3, [r3, #20]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d003      	beq.n	801698e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	695b      	ldr	r3, [r3, #20]
 801698a:	089b      	lsrs	r3, r3, #2
 801698c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	689b      	ldr	r3, [r3, #8]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d00e      	beq.n	80169b4 <osThreadNew+0xa8>
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	68db      	ldr	r3, [r3, #12]
 801699a:	2b5b      	cmp	r3, #91	; 0x5b
 801699c:	d90a      	bls.n	80169b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d006      	beq.n	80169b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	695b      	ldr	r3, [r3, #20]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d002      	beq.n	80169b4 <osThreadNew+0xa8>
        mem = 1;
 80169ae:	2301      	movs	r3, #1
 80169b0:	61bb      	str	r3, [r7, #24]
 80169b2:	e010      	b.n	80169d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	689b      	ldr	r3, [r3, #8]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d10c      	bne.n	80169d6 <osThreadNew+0xca>
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	68db      	ldr	r3, [r3, #12]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d108      	bne.n	80169d6 <osThreadNew+0xca>
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	691b      	ldr	r3, [r3, #16]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d104      	bne.n	80169d6 <osThreadNew+0xca>
          mem = 0;
 80169cc:	2300      	movs	r3, #0
 80169ce:	61bb      	str	r3, [r7, #24]
 80169d0:	e001      	b.n	80169d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80169d2:	2300      	movs	r3, #0
 80169d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80169d6:	69bb      	ldr	r3, [r7, #24]
 80169d8:	2b01      	cmp	r3, #1
 80169da:	d110      	bne.n	80169fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80169e0:	687a      	ldr	r2, [r7, #4]
 80169e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80169e4:	9202      	str	r2, [sp, #8]
 80169e6:	9301      	str	r3, [sp, #4]
 80169e8:	69fb      	ldr	r3, [r7, #28]
 80169ea:	9300      	str	r3, [sp, #0]
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	6a3a      	ldr	r2, [r7, #32]
 80169f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169f2:	68f8      	ldr	r0, [r7, #12]
 80169f4:	f001 f9b2 	bl	8017d5c <xTaskCreateStatic>
 80169f8:	4603      	mov	r3, r0
 80169fa:	613b      	str	r3, [r7, #16]
 80169fc:	e013      	b.n	8016a26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80169fe:	69bb      	ldr	r3, [r7, #24]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d110      	bne.n	8016a26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016a04:	6a3b      	ldr	r3, [r7, #32]
 8016a06:	b29a      	uxth	r2, r3
 8016a08:	f107 0310 	add.w	r3, r7, #16
 8016a0c:	9301      	str	r3, [sp, #4]
 8016a0e:	69fb      	ldr	r3, [r7, #28]
 8016a10:	9300      	str	r3, [sp, #0]
 8016a12:	68bb      	ldr	r3, [r7, #8]
 8016a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a16:	68f8      	ldr	r0, [r7, #12]
 8016a18:	f001 f9fd 	bl	8017e16 <xTaskCreate>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	2b01      	cmp	r3, #1
 8016a20:	d001      	beq.n	8016a26 <osThreadNew+0x11a>
            hTask = NULL;
 8016a22:	2300      	movs	r3, #0
 8016a24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016a26:	693b      	ldr	r3, [r7, #16]
}
 8016a28:	4618      	mov	r0, r3
 8016a2a:	3728      	adds	r7, #40	; 0x28
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}

08016a30 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016a30:	b480      	push	{r7}
 8016a32:	b083      	sub	sp, #12
 8016a34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016a36:	f3ef 8305 	mrs	r3, IPSR
 8016a3a:	603b      	str	r3, [r7, #0]
  return(result);
 8016a3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d003      	beq.n	8016a4a <osThreadYield+0x1a>
    stat = osErrorISR;
 8016a42:	f06f 0305 	mvn.w	r3, #5
 8016a46:	607b      	str	r3, [r7, #4]
 8016a48:	e009      	b.n	8016a5e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8016a4e:	4b07      	ldr	r3, [pc, #28]	; (8016a6c <osThreadYield+0x3c>)
 8016a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a54:	601a      	str	r2, [r3, #0]
 8016a56:	f3bf 8f4f 	dsb	sy
 8016a5a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8016a5e:	687b      	ldr	r3, [r7, #4]
}
 8016a60:	4618      	mov	r0, r3
 8016a62:	370c      	adds	r7, #12
 8016a64:	46bd      	mov	sp, r7
 8016a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6a:	4770      	bx	lr
 8016a6c:	e000ed04 	.word	0xe000ed04

08016a70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b084      	sub	sp, #16
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016a78:	f3ef 8305 	mrs	r3, IPSR
 8016a7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8016a7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d003      	beq.n	8016a8c <osDelay+0x1c>
    stat = osErrorISR;
 8016a84:	f06f 0305 	mvn.w	r3, #5
 8016a88:	60fb      	str	r3, [r7, #12]
 8016a8a:	e007      	b.n	8016a9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d002      	beq.n	8016a9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8016a96:	6878      	ldr	r0, [r7, #4]
 8016a98:	f001 fb02 	bl	80180a0 <vTaskDelay>
    }
  }

  return (stat);
 8016a9c:	68fb      	ldr	r3, [r7, #12]
}
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	3710      	adds	r7, #16
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd80      	pop	{r7, pc}

08016aa6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016aa6:	b580      	push	{r7, lr}
 8016aa8:	b086      	sub	sp, #24
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016ab2:	f3ef 8305 	mrs	r3, IPSR
 8016ab6:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ab8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d12d      	bne.n	8016b1a <osEventFlagsNew+0x74>
    mem = -1;
 8016abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ac2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d015      	beq.n	8016af6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	689b      	ldr	r3, [r3, #8]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d006      	beq.n	8016ae0 <osEventFlagsNew+0x3a>
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	68db      	ldr	r3, [r3, #12]
 8016ad6:	2b1f      	cmp	r3, #31
 8016ad8:	d902      	bls.n	8016ae0 <osEventFlagsNew+0x3a>
        mem = 1;
 8016ada:	2301      	movs	r3, #1
 8016adc:	613b      	str	r3, [r7, #16]
 8016ade:	e00c      	b.n	8016afa <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	689b      	ldr	r3, [r3, #8]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d108      	bne.n	8016afa <osEventFlagsNew+0x54>
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	68db      	ldr	r3, [r3, #12]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d104      	bne.n	8016afa <osEventFlagsNew+0x54>
          mem = 0;
 8016af0:	2300      	movs	r3, #0
 8016af2:	613b      	str	r3, [r7, #16]
 8016af4:	e001      	b.n	8016afa <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8016af6:	2300      	movs	r3, #0
 8016af8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	2b01      	cmp	r3, #1
 8016afe:	d106      	bne.n	8016b0e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	689b      	ldr	r3, [r3, #8]
 8016b04:	4618      	mov	r0, r3
 8016b06:	f000 f91d 	bl	8016d44 <xEventGroupCreateStatic>
 8016b0a:	6178      	str	r0, [r7, #20]
 8016b0c:	e005      	b.n	8016b1a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d102      	bne.n	8016b1a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016b14:	f000 f94d 	bl	8016db2 <xEventGroupCreate>
 8016b18:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8016b1a:	697b      	ldr	r3, [r7, #20]
}
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	3718      	adds	r7, #24
 8016b20:	46bd      	mov	sp, r7
 8016b22:	bd80      	pop	{r7, pc}

08016b24 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016b24:	b580      	push	{r7, lr}
 8016b26:	b086      	sub	sp, #24
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	6078      	str	r0, [r7, #4]
 8016b2c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d004      	beq.n	8016b42 <osEventFlagsSet+0x1e>
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d003      	beq.n	8016b4a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016b42:	f06f 0303 	mvn.w	r3, #3
 8016b46:	617b      	str	r3, [r7, #20]
 8016b48:	e028      	b.n	8016b9c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b4a:	f3ef 8305 	mrs	r3, IPSR
 8016b4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016b50:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d01d      	beq.n	8016b92 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8016b56:	2300      	movs	r3, #0
 8016b58:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8016b5a:	f107 0308 	add.w	r3, r7, #8
 8016b5e:	461a      	mov	r2, r3
 8016b60:	6839      	ldr	r1, [r7, #0]
 8016b62:	6938      	ldr	r0, [r7, #16]
 8016b64:	f000 fb46 	bl	80171f4 <xEventGroupSetBitsFromISR>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d103      	bne.n	8016b76 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8016b6e:	f06f 0302 	mvn.w	r3, #2
 8016b72:	617b      	str	r3, [r7, #20]
 8016b74:	e012      	b.n	8016b9c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8016b7a:	68bb      	ldr	r3, [r7, #8]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d00d      	beq.n	8016b9c <osEventFlagsSet+0x78>
 8016b80:	4b09      	ldr	r3, [pc, #36]	; (8016ba8 <osEventFlagsSet+0x84>)
 8016b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b86:	601a      	str	r2, [r3, #0]
 8016b88:	f3bf 8f4f 	dsb	sy
 8016b8c:	f3bf 8f6f 	isb	sy
 8016b90:	e004      	b.n	8016b9c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016b92:	6839      	ldr	r1, [r7, #0]
 8016b94:	6938      	ldr	r0, [r7, #16]
 8016b96:	f000 fa65 	bl	8017064 <xEventGroupSetBits>
 8016b9a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016b9c:	697b      	ldr	r3, [r7, #20]
}
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	3718      	adds	r7, #24
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}
 8016ba6:	bf00      	nop
 8016ba8:	e000ed04 	.word	0xe000ed04

08016bac <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b086      	sub	sp, #24
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
 8016bb4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016bba:	693b      	ldr	r3, [r7, #16]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d004      	beq.n	8016bca <osEventFlagsClear+0x1e>
 8016bc0:	683b      	ldr	r3, [r7, #0]
 8016bc2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d003      	beq.n	8016bd2 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016bca:	f06f 0303 	mvn.w	r3, #3
 8016bce:	617b      	str	r3, [r7, #20]
 8016bd0:	e019      	b.n	8016c06 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016bd2:	f3ef 8305 	mrs	r3, IPSR
 8016bd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8016bd8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d00e      	beq.n	8016bfc <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8016bde:	6938      	ldr	r0, [r7, #16]
 8016be0:	f000 fa1c 	bl	801701c <xEventGroupGetBitsFromISR>
 8016be4:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8016be6:	6839      	ldr	r1, [r7, #0]
 8016be8:	6938      	ldr	r0, [r7, #16]
 8016bea:	f000 fa03 	bl	8016ff4 <xEventGroupClearBitsFromISR>
 8016bee:	4603      	mov	r3, r0
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d108      	bne.n	8016c06 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016bf4:	f06f 0302 	mvn.w	r3, #2
 8016bf8:	617b      	str	r3, [r7, #20]
 8016bfa:	e004      	b.n	8016c06 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016bfc:	6839      	ldr	r1, [r7, #0]
 8016bfe:	6938      	ldr	r0, [r7, #16]
 8016c00:	f000 f9c0 	bl	8016f84 <xEventGroupClearBits>
 8016c04:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016c06:	697b      	ldr	r3, [r7, #20]
}
 8016c08:	4618      	mov	r0, r3
 8016c0a:	3718      	adds	r7, #24
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}

08016c10 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b08c      	sub	sp, #48	; 0x30
 8016c14:	af02      	add	r7, sp, #8
 8016c16:	60f8      	str	r0, [r7, #12]
 8016c18:	60b9      	str	r1, [r7, #8]
 8016c1a:	607a      	str	r2, [r7, #4]
 8016c1c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016c22:	69bb      	ldr	r3, [r7, #24]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d004      	beq.n	8016c32 <osEventFlagsWait+0x22>
 8016c28:	68bb      	ldr	r3, [r7, #8]
 8016c2a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d003      	beq.n	8016c3a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8016c32:	f06f 0303 	mvn.w	r3, #3
 8016c36:	61fb      	str	r3, [r7, #28]
 8016c38:	e04b      	b.n	8016cd2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c3a:	f3ef 8305 	mrs	r3, IPSR
 8016c3e:	617b      	str	r3, [r7, #20]
  return(result);
 8016c40:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d003      	beq.n	8016c4e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8016c46:	f06f 0305 	mvn.w	r3, #5
 8016c4a:	61fb      	str	r3, [r7, #28]
 8016c4c:	e041      	b.n	8016cd2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	f003 0301 	and.w	r3, r3, #1
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d002      	beq.n	8016c5e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8016c58:	2301      	movs	r3, #1
 8016c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8016c5c:	e001      	b.n	8016c62 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8016c5e:	2300      	movs	r3, #0
 8016c60:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	f003 0302 	and.w	r3, r3, #2
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d002      	beq.n	8016c72 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	623b      	str	r3, [r7, #32]
 8016c70:	e001      	b.n	8016c76 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8016c72:	2301      	movs	r3, #1
 8016c74:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8016c76:	683b      	ldr	r3, [r7, #0]
 8016c78:	9300      	str	r3, [sp, #0]
 8016c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c7c:	6a3a      	ldr	r2, [r7, #32]
 8016c7e:	68b9      	ldr	r1, [r7, #8]
 8016c80:	69b8      	ldr	r0, [r7, #24]
 8016c82:	f000 f8b1 	bl	8016de8 <xEventGroupWaitBits>
 8016c86:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	f003 0301 	and.w	r3, r3, #1
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d010      	beq.n	8016cb4 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8016c92:	68ba      	ldr	r2, [r7, #8]
 8016c94:	69fb      	ldr	r3, [r7, #28]
 8016c96:	4013      	ands	r3, r2
 8016c98:	68ba      	ldr	r2, [r7, #8]
 8016c9a:	429a      	cmp	r2, r3
 8016c9c:	d019      	beq.n	8016cd2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016c9e:	683b      	ldr	r3, [r7, #0]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d003      	beq.n	8016cac <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8016ca4:	f06f 0301 	mvn.w	r3, #1
 8016ca8:	61fb      	str	r3, [r7, #28]
 8016caa:	e012      	b.n	8016cd2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016cac:	f06f 0302 	mvn.w	r3, #2
 8016cb0:	61fb      	str	r3, [r7, #28]
 8016cb2:	e00e      	b.n	8016cd2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8016cb4:	68ba      	ldr	r2, [r7, #8]
 8016cb6:	69fb      	ldr	r3, [r7, #28]
 8016cb8:	4013      	ands	r3, r2
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d109      	bne.n	8016cd2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016cbe:	683b      	ldr	r3, [r7, #0]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d003      	beq.n	8016ccc <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8016cc4:	f06f 0301 	mvn.w	r3, #1
 8016cc8:	61fb      	str	r3, [r7, #28]
 8016cca:	e002      	b.n	8016cd2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016ccc:	f06f 0302 	mvn.w	r3, #2
 8016cd0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8016cd2:	69fb      	ldr	r3, [r7, #28]
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3728      	adds	r7, #40	; 0x28
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}

08016cdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016cdc:	b480      	push	{r7}
 8016cde:	b085      	sub	sp, #20
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	60f8      	str	r0, [r7, #12]
 8016ce4:	60b9      	str	r1, [r7, #8]
 8016ce6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	4a07      	ldr	r2, [pc, #28]	; (8016d08 <vApplicationGetIdleTaskMemory+0x2c>)
 8016cec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016cee:	68bb      	ldr	r3, [r7, #8]
 8016cf0:	4a06      	ldr	r2, [pc, #24]	; (8016d0c <vApplicationGetIdleTaskMemory+0x30>)
 8016cf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	2280      	movs	r2, #128	; 0x80
 8016cf8:	601a      	str	r2, [r3, #0]
}
 8016cfa:	bf00      	nop
 8016cfc:	3714      	adds	r7, #20
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d04:	4770      	bx	lr
 8016d06:	bf00      	nop
 8016d08:	24001fc0 	.word	0x24001fc0
 8016d0c:	2400201c 	.word	0x2400201c

08016d10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016d10:	b480      	push	{r7}
 8016d12:	b085      	sub	sp, #20
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	60f8      	str	r0, [r7, #12]
 8016d18:	60b9      	str	r1, [r7, #8]
 8016d1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	4a07      	ldr	r2, [pc, #28]	; (8016d3c <vApplicationGetTimerTaskMemory+0x2c>)
 8016d20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	4a06      	ldr	r2, [pc, #24]	; (8016d40 <vApplicationGetTimerTaskMemory+0x30>)
 8016d26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016d2e:	601a      	str	r2, [r3, #0]
}
 8016d30:	bf00      	nop
 8016d32:	3714      	adds	r7, #20
 8016d34:	46bd      	mov	sp, r7
 8016d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3a:	4770      	bx	lr
 8016d3c:	2400221c 	.word	0x2400221c
 8016d40:	24002278 	.word	0x24002278

08016d44 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b086      	sub	sp, #24
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d10a      	bne.n	8016d68 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d56:	f383 8811 	msr	BASEPRI, r3
 8016d5a:	f3bf 8f6f 	isb	sy
 8016d5e:	f3bf 8f4f 	dsb	sy
 8016d62:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016d64:	bf00      	nop
 8016d66:	e7fe      	b.n	8016d66 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8016d68:	2320      	movs	r3, #32
 8016d6a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8016d6c:	68bb      	ldr	r3, [r7, #8]
 8016d6e:	2b20      	cmp	r3, #32
 8016d70:	d00a      	beq.n	8016d88 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8016d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d76:	f383 8811 	msr	BASEPRI, r3
 8016d7a:	f3bf 8f6f 	isb	sy
 8016d7e:	f3bf 8f4f 	dsb	sy
 8016d82:	60fb      	str	r3, [r7, #12]
}
 8016d84:	bf00      	nop
 8016d86:	e7fe      	b.n	8016d86 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8016d8c:	697b      	ldr	r3, [r7, #20]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d00a      	beq.n	8016da8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	2200      	movs	r2, #0
 8016d96:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016d98:	697b      	ldr	r3, [r7, #20]
 8016d9a:	3304      	adds	r3, #4
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	f000 fa3d 	bl	801721c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8016da2:	697b      	ldr	r3, [r7, #20]
 8016da4:	2201      	movs	r2, #1
 8016da6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8016da8:	697b      	ldr	r3, [r7, #20]
	}
 8016daa:	4618      	mov	r0, r3
 8016dac:	3718      	adds	r7, #24
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}

08016db2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8016db2:	b580      	push	{r7, lr}
 8016db4:	b082      	sub	sp, #8
 8016db6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8016db8:	2020      	movs	r0, #32
 8016dba:	f002 fd55 	bl	8019868 <pvPortMalloc>
 8016dbe:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d00a      	beq.n	8016ddc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	2200      	movs	r2, #0
 8016dca:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	3304      	adds	r3, #4
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f000 fa23 	bl	801721c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	2200      	movs	r2, #0
 8016dda:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8016ddc:	687b      	ldr	r3, [r7, #4]
	}
 8016dde:	4618      	mov	r0, r3
 8016de0:	3708      	adds	r7, #8
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd80      	pop	{r7, pc}
	...

08016de8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b090      	sub	sp, #64	; 0x40
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	60f8      	str	r0, [r7, #12]
 8016df0:	60b9      	str	r1, [r7, #8]
 8016df2:	607a      	str	r2, [r7, #4]
 8016df4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8016dfe:	2300      	movs	r3, #0
 8016e00:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d10a      	bne.n	8016e1e <xEventGroupWaitBits+0x36>
	__asm volatile
 8016e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e0c:	f383 8811 	msr	BASEPRI, r3
 8016e10:	f3bf 8f6f 	isb	sy
 8016e14:	f3bf 8f4f 	dsb	sy
 8016e18:	623b      	str	r3, [r7, #32]
}
 8016e1a:	bf00      	nop
 8016e1c:	e7fe      	b.n	8016e1c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016e1e:	68bb      	ldr	r3, [r7, #8]
 8016e20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d00a      	beq.n	8016e3e <xEventGroupWaitBits+0x56>
	__asm volatile
 8016e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e2c:	f383 8811 	msr	BASEPRI, r3
 8016e30:	f3bf 8f6f 	isb	sy
 8016e34:	f3bf 8f4f 	dsb	sy
 8016e38:	61fb      	str	r3, [r7, #28]
}
 8016e3a:	bf00      	nop
 8016e3c:	e7fe      	b.n	8016e3c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8016e3e:	68bb      	ldr	r3, [r7, #8]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d10a      	bne.n	8016e5a <xEventGroupWaitBits+0x72>
	__asm volatile
 8016e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e48:	f383 8811 	msr	BASEPRI, r3
 8016e4c:	f3bf 8f6f 	isb	sy
 8016e50:	f3bf 8f4f 	dsb	sy
 8016e54:	61bb      	str	r3, [r7, #24]
}
 8016e56:	bf00      	nop
 8016e58:	e7fe      	b.n	8016e58 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016e5a:	f001 fe51 	bl	8018b00 <xTaskGetSchedulerState>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d102      	bne.n	8016e6a <xEventGroupWaitBits+0x82>
 8016e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d101      	bne.n	8016e6e <xEventGroupWaitBits+0x86>
 8016e6a:	2301      	movs	r3, #1
 8016e6c:	e000      	b.n	8016e70 <xEventGroupWaitBits+0x88>
 8016e6e:	2300      	movs	r3, #0
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d10a      	bne.n	8016e8a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8016e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e78:	f383 8811 	msr	BASEPRI, r3
 8016e7c:	f3bf 8f6f 	isb	sy
 8016e80:	f3bf 8f4f 	dsb	sy
 8016e84:	617b      	str	r3, [r7, #20]
}
 8016e86:	bf00      	nop
 8016e88:	e7fe      	b.n	8016e88 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8016e8a:	f001 f9a3 	bl	80181d4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8016e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8016e94:	683a      	ldr	r2, [r7, #0]
 8016e96:	68b9      	ldr	r1, [r7, #8]
 8016e98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e9a:	f000 f988 	bl	80171ae <prvTestWaitCondition>
 8016e9e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8016ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d00e      	beq.n	8016ec4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8016ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d028      	beq.n	8016f06 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016eb6:	681a      	ldr	r2, [r3, #0]
 8016eb8:	68bb      	ldr	r3, [r7, #8]
 8016eba:	43db      	mvns	r3, r3
 8016ebc:	401a      	ands	r2, r3
 8016ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ec0:	601a      	str	r2, [r3, #0]
 8016ec2:	e020      	b.n	8016f06 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8016ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d104      	bne.n	8016ed4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8016eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8016ece:	2301      	movs	r3, #1
 8016ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8016ed2:	e018      	b.n	8016f06 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d003      	beq.n	8016ee2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8016eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016edc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016ee0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8016ee2:	683b      	ldr	r3, [r7, #0]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d003      	beq.n	8016ef0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8016ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016eee:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8016ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ef2:	1d18      	adds	r0, r3, #4
 8016ef4:	68ba      	ldr	r2, [r7, #8]
 8016ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef8:	4313      	orrs	r3, r2
 8016efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016efc:	4619      	mov	r1, r3
 8016efe:	f001 fb77 	bl	80185f0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8016f02:	2300      	movs	r3, #0
 8016f04:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8016f06:	f001 f973 	bl	80181f0 <xTaskResumeAll>
 8016f0a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8016f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d031      	beq.n	8016f76 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8016f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d107      	bne.n	8016f28 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8016f18:	4b19      	ldr	r3, [pc, #100]	; (8016f80 <xEventGroupWaitBits+0x198>)
 8016f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f1e:	601a      	str	r2, [r3, #0]
 8016f20:	f3bf 8f4f 	dsb	sy
 8016f24:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8016f28:	f001 fe76 	bl	8018c18 <uxTaskResetEventItemValue>
 8016f2c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8016f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d11a      	bne.n	8016f6e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8016f38:	f002 fb74 	bl	8019624 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8016f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8016f42:	683a      	ldr	r2, [r7, #0]
 8016f44:	68b9      	ldr	r1, [r7, #8]
 8016f46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016f48:	f000 f931 	bl	80171ae <prvTestWaitCondition>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d009      	beq.n	8016f66 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d006      	beq.n	8016f66 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f5a:	681a      	ldr	r2, [r3, #0]
 8016f5c:	68bb      	ldr	r3, [r7, #8]
 8016f5e:	43db      	mvns	r3, r3
 8016f60:	401a      	ands	r2, r3
 8016f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f64:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8016f66:	2301      	movs	r3, #1
 8016f68:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8016f6a:	f002 fb8b 	bl	8019684 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8016f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016f74:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8016f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3740      	adds	r7, #64	; 0x40
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	e000ed04 	.word	0xe000ed04

08016f84 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b086      	sub	sp, #24
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
 8016f8c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d10a      	bne.n	8016fae <xEventGroupClearBits+0x2a>
	__asm volatile
 8016f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f9c:	f383 8811 	msr	BASEPRI, r3
 8016fa0:	f3bf 8f6f 	isb	sy
 8016fa4:	f3bf 8f4f 	dsb	sy
 8016fa8:	60fb      	str	r3, [r7, #12]
}
 8016faa:	bf00      	nop
 8016fac:	e7fe      	b.n	8016fac <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016fae:	683b      	ldr	r3, [r7, #0]
 8016fb0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d00a      	beq.n	8016fce <xEventGroupClearBits+0x4a>
	__asm volatile
 8016fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fbc:	f383 8811 	msr	BASEPRI, r3
 8016fc0:	f3bf 8f6f 	isb	sy
 8016fc4:	f3bf 8f4f 	dsb	sy
 8016fc8:	60bb      	str	r3, [r7, #8]
}
 8016fca:	bf00      	nop
 8016fcc:	e7fe      	b.n	8016fcc <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8016fce:	f002 fb29 	bl	8019624 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8016fd2:	697b      	ldr	r3, [r7, #20]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8016fd8:	697b      	ldr	r3, [r7, #20]
 8016fda:	681a      	ldr	r2, [r3, #0]
 8016fdc:	683b      	ldr	r3, [r7, #0]
 8016fde:	43db      	mvns	r3, r3
 8016fe0:	401a      	ands	r2, r3
 8016fe2:	697b      	ldr	r3, [r7, #20]
 8016fe4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8016fe6:	f002 fb4d 	bl	8019684 <vPortExitCritical>

	return uxReturn;
 8016fea:	693b      	ldr	r3, [r7, #16]
}
 8016fec:	4618      	mov	r0, r3
 8016fee:	3718      	adds	r7, #24
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}

08016ff4 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b084      	sub	sp, #16
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
 8016ffc:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8016ffe:	2300      	movs	r3, #0
 8017000:	683a      	ldr	r2, [r7, #0]
 8017002:	6879      	ldr	r1, [r7, #4]
 8017004:	4804      	ldr	r0, [pc, #16]	; (8017018 <xEventGroupClearBitsFromISR+0x24>)
 8017006:	f002 f9c1 	bl	801938c <xTimerPendFunctionCallFromISR>
 801700a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 801700c:	68fb      	ldr	r3, [r7, #12]
	}
 801700e:	4618      	mov	r0, r3
 8017010:	3710      	adds	r7, #16
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
 8017016:	bf00      	nop
 8017018:	08017195 	.word	0x08017195

0801701c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 801701c:	b480      	push	{r7}
 801701e:	b089      	sub	sp, #36	; 0x24
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017028:	f3ef 8211 	mrs	r2, BASEPRI
 801702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017030:	f383 8811 	msr	BASEPRI, r3
 8017034:	f3bf 8f6f 	isb	sy
 8017038:	f3bf 8f4f 	dsb	sy
 801703c:	60fa      	str	r2, [r7, #12]
 801703e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017040:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017042:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8017044:	69fb      	ldr	r3, [r7, #28]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	617b      	str	r3, [r7, #20]
 801704a:	69bb      	ldr	r3, [r7, #24]
 801704c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801704e:	693b      	ldr	r3, [r7, #16]
 8017050:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017054:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8017056:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8017058:	4618      	mov	r0, r3
 801705a:	3724      	adds	r7, #36	; 0x24
 801705c:	46bd      	mov	sp, r7
 801705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017062:	4770      	bx	lr

08017064 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b08e      	sub	sp, #56	; 0x38
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801706e:	2300      	movs	r3, #0
 8017070:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8017076:	2300      	movs	r3, #0
 8017078:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d10a      	bne.n	8017096 <xEventGroupSetBits+0x32>
	__asm volatile
 8017080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017084:	f383 8811 	msr	BASEPRI, r3
 8017088:	f3bf 8f6f 	isb	sy
 801708c:	f3bf 8f4f 	dsb	sy
 8017090:	613b      	str	r3, [r7, #16]
}
 8017092:	bf00      	nop
 8017094:	e7fe      	b.n	8017094 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017096:	683b      	ldr	r3, [r7, #0]
 8017098:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801709c:	2b00      	cmp	r3, #0
 801709e:	d00a      	beq.n	80170b6 <xEventGroupSetBits+0x52>
	__asm volatile
 80170a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170a4:	f383 8811 	msr	BASEPRI, r3
 80170a8:	f3bf 8f6f 	isb	sy
 80170ac:	f3bf 8f4f 	dsb	sy
 80170b0:	60fb      	str	r3, [r7, #12]
}
 80170b2:	bf00      	nop
 80170b4:	e7fe      	b.n	80170b4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80170b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170b8:	3304      	adds	r3, #4
 80170ba:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80170bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170be:	3308      	adds	r3, #8
 80170c0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80170c2:	f001 f887 	bl	80181d4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80170c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c8:	68db      	ldr	r3, [r3, #12]
 80170ca:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80170cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ce:	681a      	ldr	r2, [r3, #0]
 80170d0:	683b      	ldr	r3, [r7, #0]
 80170d2:	431a      	orrs	r2, r3
 80170d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80170d8:	e03c      	b.n	8017154 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80170da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170dc:	685b      	ldr	r3, [r3, #4]
 80170de:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80170e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80170e6:	2300      	movs	r3, #0
 80170e8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80170ea:	69bb      	ldr	r3, [r7, #24]
 80170ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80170f0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80170f2:	69bb      	ldr	r3, [r7, #24]
 80170f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80170f8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017100:	2b00      	cmp	r3, #0
 8017102:	d108      	bne.n	8017116 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8017104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017106:	681a      	ldr	r2, [r3, #0]
 8017108:	69bb      	ldr	r3, [r7, #24]
 801710a:	4013      	ands	r3, r2
 801710c:	2b00      	cmp	r3, #0
 801710e:	d00b      	beq.n	8017128 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8017110:	2301      	movs	r3, #1
 8017112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017114:	e008      	b.n	8017128 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8017116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017118:	681a      	ldr	r2, [r3, #0]
 801711a:	69bb      	ldr	r3, [r7, #24]
 801711c:	4013      	ands	r3, r2
 801711e:	69ba      	ldr	r2, [r7, #24]
 8017120:	429a      	cmp	r2, r3
 8017122:	d101      	bne.n	8017128 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8017124:	2301      	movs	r3, #1
 8017126:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8017128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801712a:	2b00      	cmp	r3, #0
 801712c:	d010      	beq.n	8017150 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801712e:	697b      	ldr	r3, [r7, #20]
 8017130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017134:	2b00      	cmp	r3, #0
 8017136:	d003      	beq.n	8017140 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8017138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801713a:	69bb      	ldr	r3, [r7, #24]
 801713c:	4313      	orrs	r3, r2
 801713e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8017140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017148:	4619      	mov	r1, r3
 801714a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801714c:	f001 fb1c 	bl	8018788 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8017150:	69fb      	ldr	r3, [r7, #28]
 8017152:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8017154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017156:	6a3b      	ldr	r3, [r7, #32]
 8017158:	429a      	cmp	r2, r3
 801715a:	d1be      	bne.n	80170da <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801715e:	681a      	ldr	r2, [r3, #0]
 8017160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017162:	43db      	mvns	r3, r3
 8017164:	401a      	ands	r2, r3
 8017166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017168:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801716a:	f001 f841 	bl	80181f0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017170:	681b      	ldr	r3, [r3, #0]
}
 8017172:	4618      	mov	r0, r3
 8017174:	3738      	adds	r7, #56	; 0x38
 8017176:	46bd      	mov	sp, r7
 8017178:	bd80      	pop	{r7, pc}

0801717a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801717a:	b580      	push	{r7, lr}
 801717c:	b082      	sub	sp, #8
 801717e:	af00      	add	r7, sp, #0
 8017180:	6078      	str	r0, [r7, #4]
 8017182:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017184:	6839      	ldr	r1, [r7, #0]
 8017186:	6878      	ldr	r0, [r7, #4]
 8017188:	f7ff ff6c 	bl	8017064 <xEventGroupSetBits>
}
 801718c:	bf00      	nop
 801718e:	3708      	adds	r7, #8
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}

08017194 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8017194:	b580      	push	{r7, lr}
 8017196:	b082      	sub	sp, #8
 8017198:	af00      	add	r7, sp, #0
 801719a:	6078      	str	r0, [r7, #4]
 801719c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801719e:	6839      	ldr	r1, [r7, #0]
 80171a0:	6878      	ldr	r0, [r7, #4]
 80171a2:	f7ff feef 	bl	8016f84 <xEventGroupClearBits>
}
 80171a6:	bf00      	nop
 80171a8:	3708      	adds	r7, #8
 80171aa:	46bd      	mov	sp, r7
 80171ac:	bd80      	pop	{r7, pc}

080171ae <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80171ae:	b480      	push	{r7}
 80171b0:	b087      	sub	sp, #28
 80171b2:	af00      	add	r7, sp, #0
 80171b4:	60f8      	str	r0, [r7, #12]
 80171b6:	60b9      	str	r1, [r7, #8]
 80171b8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80171ba:	2300      	movs	r3, #0
 80171bc:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d107      	bne.n	80171d4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80171c4:	68fa      	ldr	r2, [r7, #12]
 80171c6:	68bb      	ldr	r3, [r7, #8]
 80171c8:	4013      	ands	r3, r2
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d00a      	beq.n	80171e4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80171ce:	2301      	movs	r3, #1
 80171d0:	617b      	str	r3, [r7, #20]
 80171d2:	e007      	b.n	80171e4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80171d4:	68fa      	ldr	r2, [r7, #12]
 80171d6:	68bb      	ldr	r3, [r7, #8]
 80171d8:	4013      	ands	r3, r2
 80171da:	68ba      	ldr	r2, [r7, #8]
 80171dc:	429a      	cmp	r2, r3
 80171de:	d101      	bne.n	80171e4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80171e0:	2301      	movs	r3, #1
 80171e2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80171e4:	697b      	ldr	r3, [r7, #20]
}
 80171e6:	4618      	mov	r0, r3
 80171e8:	371c      	adds	r7, #28
 80171ea:	46bd      	mov	sp, r7
 80171ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f0:	4770      	bx	lr
	...

080171f4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b086      	sub	sp, #24
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	60f8      	str	r0, [r7, #12]
 80171fc:	60b9      	str	r1, [r7, #8]
 80171fe:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	68ba      	ldr	r2, [r7, #8]
 8017204:	68f9      	ldr	r1, [r7, #12]
 8017206:	4804      	ldr	r0, [pc, #16]	; (8017218 <xEventGroupSetBitsFromISR+0x24>)
 8017208:	f002 f8c0 	bl	801938c <xTimerPendFunctionCallFromISR>
 801720c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801720e:	697b      	ldr	r3, [r7, #20]
	}
 8017210:	4618      	mov	r0, r3
 8017212:	3718      	adds	r7, #24
 8017214:	46bd      	mov	sp, r7
 8017216:	bd80      	pop	{r7, pc}
 8017218:	0801717b 	.word	0x0801717b

0801721c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801721c:	b480      	push	{r7}
 801721e:	b083      	sub	sp, #12
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	f103 0208 	add.w	r2, r3, #8
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017234:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	f103 0208 	add.w	r2, r3, #8
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	f103 0208 	add.w	r2, r3, #8
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	2200      	movs	r2, #0
 801724e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017250:	bf00      	nop
 8017252:	370c      	adds	r7, #12
 8017254:	46bd      	mov	sp, r7
 8017256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725a:	4770      	bx	lr

0801725c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801725c:	b480      	push	{r7}
 801725e:	b083      	sub	sp, #12
 8017260:	af00      	add	r7, sp, #0
 8017262:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2200      	movs	r2, #0
 8017268:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801726a:	bf00      	nop
 801726c:	370c      	adds	r7, #12
 801726e:	46bd      	mov	sp, r7
 8017270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017274:	4770      	bx	lr

08017276 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017276:	b480      	push	{r7}
 8017278:	b085      	sub	sp, #20
 801727a:	af00      	add	r7, sp, #0
 801727c:	6078      	str	r0, [r7, #4]
 801727e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	685b      	ldr	r3, [r3, #4]
 8017284:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017286:	683b      	ldr	r3, [r7, #0]
 8017288:	68fa      	ldr	r2, [r7, #12]
 801728a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	689a      	ldr	r2, [r3, #8]
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	689b      	ldr	r3, [r3, #8]
 8017298:	683a      	ldr	r2, [r7, #0]
 801729a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	683a      	ldr	r2, [r7, #0]
 80172a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	687a      	ldr	r2, [r7, #4]
 80172a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	1c5a      	adds	r2, r3, #1
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	601a      	str	r2, [r3, #0]
}
 80172b2:	bf00      	nop
 80172b4:	3714      	adds	r7, #20
 80172b6:	46bd      	mov	sp, r7
 80172b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172bc:	4770      	bx	lr

080172be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80172be:	b480      	push	{r7}
 80172c0:	b085      	sub	sp, #20
 80172c2:	af00      	add	r7, sp, #0
 80172c4:	6078      	str	r0, [r7, #4]
 80172c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80172c8:	683b      	ldr	r3, [r7, #0]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80172ce:	68bb      	ldr	r3, [r7, #8]
 80172d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80172d4:	d103      	bne.n	80172de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	691b      	ldr	r3, [r3, #16]
 80172da:	60fb      	str	r3, [r7, #12]
 80172dc:	e00c      	b.n	80172f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	3308      	adds	r3, #8
 80172e2:	60fb      	str	r3, [r7, #12]
 80172e4:	e002      	b.n	80172ec <vListInsert+0x2e>
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	685b      	ldr	r3, [r3, #4]
 80172ea:	60fb      	str	r3, [r7, #12]
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	685b      	ldr	r3, [r3, #4]
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	68ba      	ldr	r2, [r7, #8]
 80172f4:	429a      	cmp	r2, r3
 80172f6:	d2f6      	bcs.n	80172e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	685a      	ldr	r2, [r3, #4]
 80172fc:	683b      	ldr	r3, [r7, #0]
 80172fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017300:	683b      	ldr	r3, [r7, #0]
 8017302:	685b      	ldr	r3, [r3, #4]
 8017304:	683a      	ldr	r2, [r7, #0]
 8017306:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	68fa      	ldr	r2, [r7, #12]
 801730c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	683a      	ldr	r2, [r7, #0]
 8017312:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	687a      	ldr	r2, [r7, #4]
 8017318:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	1c5a      	adds	r2, r3, #1
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	601a      	str	r2, [r3, #0]
}
 8017324:	bf00      	nop
 8017326:	3714      	adds	r7, #20
 8017328:	46bd      	mov	sp, r7
 801732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732e:	4770      	bx	lr

08017330 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017330:	b480      	push	{r7}
 8017332:	b085      	sub	sp, #20
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	691b      	ldr	r3, [r3, #16]
 801733c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	687a      	ldr	r2, [r7, #4]
 8017344:	6892      	ldr	r2, [r2, #8]
 8017346:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	689b      	ldr	r3, [r3, #8]
 801734c:	687a      	ldr	r2, [r7, #4]
 801734e:	6852      	ldr	r2, [r2, #4]
 8017350:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	685b      	ldr	r3, [r3, #4]
 8017356:	687a      	ldr	r2, [r7, #4]
 8017358:	429a      	cmp	r2, r3
 801735a:	d103      	bne.n	8017364 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	689a      	ldr	r2, [r3, #8]
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	2200      	movs	r2, #0
 8017368:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	1e5a      	subs	r2, r3, #1
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	681b      	ldr	r3, [r3, #0]
}
 8017378:	4618      	mov	r0, r3
 801737a:	3714      	adds	r7, #20
 801737c:	46bd      	mov	sp, r7
 801737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017382:	4770      	bx	lr

08017384 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b084      	sub	sp, #16
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
 801738c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d10a      	bne.n	80173ae <xQueueGenericReset+0x2a>
	__asm volatile
 8017398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801739c:	f383 8811 	msr	BASEPRI, r3
 80173a0:	f3bf 8f6f 	isb	sy
 80173a4:	f3bf 8f4f 	dsb	sy
 80173a8:	60bb      	str	r3, [r7, #8]
}
 80173aa:	bf00      	nop
 80173ac:	e7fe      	b.n	80173ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80173ae:	f002 f939 	bl	8019624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	681a      	ldr	r2, [r3, #0]
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173ba:	68f9      	ldr	r1, [r7, #12]
 80173bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80173be:	fb01 f303 	mul.w	r3, r1, r3
 80173c2:	441a      	add	r2, r3
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	2200      	movs	r2, #0
 80173cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	681a      	ldr	r2, [r3, #0]
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	681a      	ldr	r2, [r3, #0]
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173de:	3b01      	subs	r3, #1
 80173e0:	68f9      	ldr	r1, [r7, #12]
 80173e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80173e4:	fb01 f303 	mul.w	r3, r1, r3
 80173e8:	441a      	add	r2, r3
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	22ff      	movs	r2, #255	; 0xff
 80173f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	22ff      	movs	r2, #255	; 0xff
 80173fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80173fe:	683b      	ldr	r3, [r7, #0]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d114      	bne.n	801742e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	691b      	ldr	r3, [r3, #16]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d01a      	beq.n	8017442 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	3310      	adds	r3, #16
 8017410:	4618      	mov	r0, r3
 8017412:	f001 f955 	bl	80186c0 <xTaskRemoveFromEventList>
 8017416:	4603      	mov	r3, r0
 8017418:	2b00      	cmp	r3, #0
 801741a:	d012      	beq.n	8017442 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801741c:	4b0c      	ldr	r3, [pc, #48]	; (8017450 <xQueueGenericReset+0xcc>)
 801741e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017422:	601a      	str	r2, [r3, #0]
 8017424:	f3bf 8f4f 	dsb	sy
 8017428:	f3bf 8f6f 	isb	sy
 801742c:	e009      	b.n	8017442 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	3310      	adds	r3, #16
 8017432:	4618      	mov	r0, r3
 8017434:	f7ff fef2 	bl	801721c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	3324      	adds	r3, #36	; 0x24
 801743c:	4618      	mov	r0, r3
 801743e:	f7ff feed 	bl	801721c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017442:	f002 f91f 	bl	8019684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017446:	2301      	movs	r3, #1
}
 8017448:	4618      	mov	r0, r3
 801744a:	3710      	adds	r7, #16
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}
 8017450:	e000ed04 	.word	0xe000ed04

08017454 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017454:	b580      	push	{r7, lr}
 8017456:	b08e      	sub	sp, #56	; 0x38
 8017458:	af02      	add	r7, sp, #8
 801745a:	60f8      	str	r0, [r7, #12]
 801745c:	60b9      	str	r1, [r7, #8]
 801745e:	607a      	str	r2, [r7, #4]
 8017460:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	2b00      	cmp	r3, #0
 8017466:	d10a      	bne.n	801747e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801746c:	f383 8811 	msr	BASEPRI, r3
 8017470:	f3bf 8f6f 	isb	sy
 8017474:	f3bf 8f4f 	dsb	sy
 8017478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801747a:	bf00      	nop
 801747c:	e7fe      	b.n	801747c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801747e:	683b      	ldr	r3, [r7, #0]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d10a      	bne.n	801749a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017488:	f383 8811 	msr	BASEPRI, r3
 801748c:	f3bf 8f6f 	isb	sy
 8017490:	f3bf 8f4f 	dsb	sy
 8017494:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017496:	bf00      	nop
 8017498:	e7fe      	b.n	8017498 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d002      	beq.n	80174a6 <xQueueGenericCreateStatic+0x52>
 80174a0:	68bb      	ldr	r3, [r7, #8]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d001      	beq.n	80174aa <xQueueGenericCreateStatic+0x56>
 80174a6:	2301      	movs	r3, #1
 80174a8:	e000      	b.n	80174ac <xQueueGenericCreateStatic+0x58>
 80174aa:	2300      	movs	r3, #0
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d10a      	bne.n	80174c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80174b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174b4:	f383 8811 	msr	BASEPRI, r3
 80174b8:	f3bf 8f6f 	isb	sy
 80174bc:	f3bf 8f4f 	dsb	sy
 80174c0:	623b      	str	r3, [r7, #32]
}
 80174c2:	bf00      	nop
 80174c4:	e7fe      	b.n	80174c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d102      	bne.n	80174d2 <xQueueGenericCreateStatic+0x7e>
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d101      	bne.n	80174d6 <xQueueGenericCreateStatic+0x82>
 80174d2:	2301      	movs	r3, #1
 80174d4:	e000      	b.n	80174d8 <xQueueGenericCreateStatic+0x84>
 80174d6:	2300      	movs	r3, #0
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d10a      	bne.n	80174f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80174dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174e0:	f383 8811 	msr	BASEPRI, r3
 80174e4:	f3bf 8f6f 	isb	sy
 80174e8:	f3bf 8f4f 	dsb	sy
 80174ec:	61fb      	str	r3, [r7, #28]
}
 80174ee:	bf00      	nop
 80174f0:	e7fe      	b.n	80174f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80174f2:	2350      	movs	r3, #80	; 0x50
 80174f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80174f6:	697b      	ldr	r3, [r7, #20]
 80174f8:	2b50      	cmp	r3, #80	; 0x50
 80174fa:	d00a      	beq.n	8017512 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80174fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017500:	f383 8811 	msr	BASEPRI, r3
 8017504:	f3bf 8f6f 	isb	sy
 8017508:	f3bf 8f4f 	dsb	sy
 801750c:	61bb      	str	r3, [r7, #24]
}
 801750e:	bf00      	nop
 8017510:	e7fe      	b.n	8017510 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017512:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017514:	683b      	ldr	r3, [r7, #0]
 8017516:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751a:	2b00      	cmp	r3, #0
 801751c:	d00d      	beq.n	801753a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017520:	2201      	movs	r2, #1
 8017522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017526:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752c:	9300      	str	r3, [sp, #0]
 801752e:	4613      	mov	r3, r2
 8017530:	687a      	ldr	r2, [r7, #4]
 8017532:	68b9      	ldr	r1, [r7, #8]
 8017534:	68f8      	ldr	r0, [r7, #12]
 8017536:	f000 f805 	bl	8017544 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801753c:	4618      	mov	r0, r3
 801753e:	3730      	adds	r7, #48	; 0x30
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}

08017544 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b084      	sub	sp, #16
 8017548:	af00      	add	r7, sp, #0
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	60b9      	str	r1, [r7, #8]
 801754e:	607a      	str	r2, [r7, #4]
 8017550:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017552:	68bb      	ldr	r3, [r7, #8]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d103      	bne.n	8017560 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017558:	69bb      	ldr	r3, [r7, #24]
 801755a:	69ba      	ldr	r2, [r7, #24]
 801755c:	601a      	str	r2, [r3, #0]
 801755e:	e002      	b.n	8017566 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017560:	69bb      	ldr	r3, [r7, #24]
 8017562:	687a      	ldr	r2, [r7, #4]
 8017564:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017566:	69bb      	ldr	r3, [r7, #24]
 8017568:	68fa      	ldr	r2, [r7, #12]
 801756a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801756c:	69bb      	ldr	r3, [r7, #24]
 801756e:	68ba      	ldr	r2, [r7, #8]
 8017570:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017572:	2101      	movs	r1, #1
 8017574:	69b8      	ldr	r0, [r7, #24]
 8017576:	f7ff ff05 	bl	8017384 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801757a:	69bb      	ldr	r3, [r7, #24]
 801757c:	78fa      	ldrb	r2, [r7, #3]
 801757e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017582:	bf00      	nop
 8017584:	3710      	adds	r7, #16
 8017586:	46bd      	mov	sp, r7
 8017588:	bd80      	pop	{r7, pc}
	...

0801758c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b08e      	sub	sp, #56	; 0x38
 8017590:	af00      	add	r7, sp, #0
 8017592:	60f8      	str	r0, [r7, #12]
 8017594:	60b9      	str	r1, [r7, #8]
 8017596:	607a      	str	r2, [r7, #4]
 8017598:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801759a:	2300      	movs	r3, #0
 801759c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80175a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d10a      	bne.n	80175be <xQueueGenericSend+0x32>
	__asm volatile
 80175a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ac:	f383 8811 	msr	BASEPRI, r3
 80175b0:	f3bf 8f6f 	isb	sy
 80175b4:	f3bf 8f4f 	dsb	sy
 80175b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80175ba:	bf00      	nop
 80175bc:	e7fe      	b.n	80175bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80175be:	68bb      	ldr	r3, [r7, #8]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d103      	bne.n	80175cc <xQueueGenericSend+0x40>
 80175c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d101      	bne.n	80175d0 <xQueueGenericSend+0x44>
 80175cc:	2301      	movs	r3, #1
 80175ce:	e000      	b.n	80175d2 <xQueueGenericSend+0x46>
 80175d0:	2300      	movs	r3, #0
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d10a      	bne.n	80175ec <xQueueGenericSend+0x60>
	__asm volatile
 80175d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175da:	f383 8811 	msr	BASEPRI, r3
 80175de:	f3bf 8f6f 	isb	sy
 80175e2:	f3bf 8f4f 	dsb	sy
 80175e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80175e8:	bf00      	nop
 80175ea:	e7fe      	b.n	80175ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80175ec:	683b      	ldr	r3, [r7, #0]
 80175ee:	2b02      	cmp	r3, #2
 80175f0:	d103      	bne.n	80175fa <xQueueGenericSend+0x6e>
 80175f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175f6:	2b01      	cmp	r3, #1
 80175f8:	d101      	bne.n	80175fe <xQueueGenericSend+0x72>
 80175fa:	2301      	movs	r3, #1
 80175fc:	e000      	b.n	8017600 <xQueueGenericSend+0x74>
 80175fe:	2300      	movs	r3, #0
 8017600:	2b00      	cmp	r3, #0
 8017602:	d10a      	bne.n	801761a <xQueueGenericSend+0x8e>
	__asm volatile
 8017604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017608:	f383 8811 	msr	BASEPRI, r3
 801760c:	f3bf 8f6f 	isb	sy
 8017610:	f3bf 8f4f 	dsb	sy
 8017614:	623b      	str	r3, [r7, #32]
}
 8017616:	bf00      	nop
 8017618:	e7fe      	b.n	8017618 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801761a:	f001 fa71 	bl	8018b00 <xTaskGetSchedulerState>
 801761e:	4603      	mov	r3, r0
 8017620:	2b00      	cmp	r3, #0
 8017622:	d102      	bne.n	801762a <xQueueGenericSend+0x9e>
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d101      	bne.n	801762e <xQueueGenericSend+0xa2>
 801762a:	2301      	movs	r3, #1
 801762c:	e000      	b.n	8017630 <xQueueGenericSend+0xa4>
 801762e:	2300      	movs	r3, #0
 8017630:	2b00      	cmp	r3, #0
 8017632:	d10a      	bne.n	801764a <xQueueGenericSend+0xbe>
	__asm volatile
 8017634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017638:	f383 8811 	msr	BASEPRI, r3
 801763c:	f3bf 8f6f 	isb	sy
 8017640:	f3bf 8f4f 	dsb	sy
 8017644:	61fb      	str	r3, [r7, #28]
}
 8017646:	bf00      	nop
 8017648:	e7fe      	b.n	8017648 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801764a:	f001 ffeb 	bl	8019624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017656:	429a      	cmp	r2, r3
 8017658:	d302      	bcc.n	8017660 <xQueueGenericSend+0xd4>
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	2b02      	cmp	r3, #2
 801765e:	d129      	bne.n	80176b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017660:	683a      	ldr	r2, [r7, #0]
 8017662:	68b9      	ldr	r1, [r7, #8]
 8017664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017666:	f000 fa0b 	bl	8017a80 <prvCopyDataToQueue>
 801766a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017670:	2b00      	cmp	r3, #0
 8017672:	d010      	beq.n	8017696 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017676:	3324      	adds	r3, #36	; 0x24
 8017678:	4618      	mov	r0, r3
 801767a:	f001 f821 	bl	80186c0 <xTaskRemoveFromEventList>
 801767e:	4603      	mov	r3, r0
 8017680:	2b00      	cmp	r3, #0
 8017682:	d013      	beq.n	80176ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017684:	4b3f      	ldr	r3, [pc, #252]	; (8017784 <xQueueGenericSend+0x1f8>)
 8017686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801768a:	601a      	str	r2, [r3, #0]
 801768c:	f3bf 8f4f 	dsb	sy
 8017690:	f3bf 8f6f 	isb	sy
 8017694:	e00a      	b.n	80176ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017698:	2b00      	cmp	r3, #0
 801769a:	d007      	beq.n	80176ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801769c:	4b39      	ldr	r3, [pc, #228]	; (8017784 <xQueueGenericSend+0x1f8>)
 801769e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176a2:	601a      	str	r2, [r3, #0]
 80176a4:	f3bf 8f4f 	dsb	sy
 80176a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80176ac:	f001 ffea 	bl	8019684 <vPortExitCritical>
				return pdPASS;
 80176b0:	2301      	movs	r3, #1
 80176b2:	e063      	b.n	801777c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d103      	bne.n	80176c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80176ba:	f001 ffe3 	bl	8019684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80176be:	2300      	movs	r3, #0
 80176c0:	e05c      	b.n	801777c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80176c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d106      	bne.n	80176d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80176c8:	f107 0314 	add.w	r3, r7, #20
 80176cc:	4618      	mov	r0, r3
 80176ce:	f001 f8bd 	bl	801884c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80176d2:	2301      	movs	r3, #1
 80176d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80176d6:	f001 ffd5 	bl	8019684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80176da:	f000 fd7b 	bl	80181d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80176de:	f001 ffa1 	bl	8019624 <vPortEnterCritical>
 80176e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80176e8:	b25b      	sxtb	r3, r3
 80176ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80176ee:	d103      	bne.n	80176f8 <xQueueGenericSend+0x16c>
 80176f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f2:	2200      	movs	r2, #0
 80176f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80176f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80176fe:	b25b      	sxtb	r3, r3
 8017700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017704:	d103      	bne.n	801770e <xQueueGenericSend+0x182>
 8017706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017708:	2200      	movs	r2, #0
 801770a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801770e:	f001 ffb9 	bl	8019684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017712:	1d3a      	adds	r2, r7, #4
 8017714:	f107 0314 	add.w	r3, r7, #20
 8017718:	4611      	mov	r1, r2
 801771a:	4618      	mov	r0, r3
 801771c:	f001 f8ac 	bl	8018878 <xTaskCheckForTimeOut>
 8017720:	4603      	mov	r3, r0
 8017722:	2b00      	cmp	r3, #0
 8017724:	d124      	bne.n	8017770 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017728:	f000 faa2 	bl	8017c70 <prvIsQueueFull>
 801772c:	4603      	mov	r3, r0
 801772e:	2b00      	cmp	r3, #0
 8017730:	d018      	beq.n	8017764 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017734:	3310      	adds	r3, #16
 8017736:	687a      	ldr	r2, [r7, #4]
 8017738:	4611      	mov	r1, r2
 801773a:	4618      	mov	r0, r3
 801773c:	f000 ff34 	bl	80185a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017742:	f000 fa2d 	bl	8017ba0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017746:	f000 fd53 	bl	80181f0 <xTaskResumeAll>
 801774a:	4603      	mov	r3, r0
 801774c:	2b00      	cmp	r3, #0
 801774e:	f47f af7c 	bne.w	801764a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017752:	4b0c      	ldr	r3, [pc, #48]	; (8017784 <xQueueGenericSend+0x1f8>)
 8017754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017758:	601a      	str	r2, [r3, #0]
 801775a:	f3bf 8f4f 	dsb	sy
 801775e:	f3bf 8f6f 	isb	sy
 8017762:	e772      	b.n	801764a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017766:	f000 fa1b 	bl	8017ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801776a:	f000 fd41 	bl	80181f0 <xTaskResumeAll>
 801776e:	e76c      	b.n	801764a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017772:	f000 fa15 	bl	8017ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017776:	f000 fd3b 	bl	80181f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801777a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801777c:	4618      	mov	r0, r3
 801777e:	3738      	adds	r7, #56	; 0x38
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}
 8017784:	e000ed04 	.word	0xe000ed04

08017788 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017788:	b580      	push	{r7, lr}
 801778a:	b090      	sub	sp, #64	; 0x40
 801778c:	af00      	add	r7, sp, #0
 801778e:	60f8      	str	r0, [r7, #12]
 8017790:	60b9      	str	r1, [r7, #8]
 8017792:	607a      	str	r2, [r7, #4]
 8017794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801779a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801779c:	2b00      	cmp	r3, #0
 801779e:	d10a      	bne.n	80177b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80177a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177a4:	f383 8811 	msr	BASEPRI, r3
 80177a8:	f3bf 8f6f 	isb	sy
 80177ac:	f3bf 8f4f 	dsb	sy
 80177b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80177b2:	bf00      	nop
 80177b4:	e7fe      	b.n	80177b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80177b6:	68bb      	ldr	r3, [r7, #8]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d103      	bne.n	80177c4 <xQueueGenericSendFromISR+0x3c>
 80177bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d101      	bne.n	80177c8 <xQueueGenericSendFromISR+0x40>
 80177c4:	2301      	movs	r3, #1
 80177c6:	e000      	b.n	80177ca <xQueueGenericSendFromISR+0x42>
 80177c8:	2300      	movs	r3, #0
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d10a      	bne.n	80177e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80177ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177d2:	f383 8811 	msr	BASEPRI, r3
 80177d6:	f3bf 8f6f 	isb	sy
 80177da:	f3bf 8f4f 	dsb	sy
 80177de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80177e0:	bf00      	nop
 80177e2:	e7fe      	b.n	80177e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	2b02      	cmp	r3, #2
 80177e8:	d103      	bne.n	80177f2 <xQueueGenericSendFromISR+0x6a>
 80177ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177ee:	2b01      	cmp	r3, #1
 80177f0:	d101      	bne.n	80177f6 <xQueueGenericSendFromISR+0x6e>
 80177f2:	2301      	movs	r3, #1
 80177f4:	e000      	b.n	80177f8 <xQueueGenericSendFromISR+0x70>
 80177f6:	2300      	movs	r3, #0
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d10a      	bne.n	8017812 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80177fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017800:	f383 8811 	msr	BASEPRI, r3
 8017804:	f3bf 8f6f 	isb	sy
 8017808:	f3bf 8f4f 	dsb	sy
 801780c:	623b      	str	r3, [r7, #32]
}
 801780e:	bf00      	nop
 8017810:	e7fe      	b.n	8017810 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017812:	f001 ffe9 	bl	80197e8 <vPortValidateInterruptPriority>
	__asm volatile
 8017816:	f3ef 8211 	mrs	r2, BASEPRI
 801781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801781e:	f383 8811 	msr	BASEPRI, r3
 8017822:	f3bf 8f6f 	isb	sy
 8017826:	f3bf 8f4f 	dsb	sy
 801782a:	61fa      	str	r2, [r7, #28]
 801782c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801782e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017830:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801783a:	429a      	cmp	r2, r3
 801783c:	d302      	bcc.n	8017844 <xQueueGenericSendFromISR+0xbc>
 801783e:	683b      	ldr	r3, [r7, #0]
 8017840:	2b02      	cmp	r3, #2
 8017842:	d12f      	bne.n	80178a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801784a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017852:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017854:	683a      	ldr	r2, [r7, #0]
 8017856:	68b9      	ldr	r1, [r7, #8]
 8017858:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801785a:	f000 f911 	bl	8017a80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801785e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017866:	d112      	bne.n	801788e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801786c:	2b00      	cmp	r3, #0
 801786e:	d016      	beq.n	801789e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017872:	3324      	adds	r3, #36	; 0x24
 8017874:	4618      	mov	r0, r3
 8017876:	f000 ff23 	bl	80186c0 <xTaskRemoveFromEventList>
 801787a:	4603      	mov	r3, r0
 801787c:	2b00      	cmp	r3, #0
 801787e:	d00e      	beq.n	801789e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d00b      	beq.n	801789e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	2201      	movs	r2, #1
 801788a:	601a      	str	r2, [r3, #0]
 801788c:	e007      	b.n	801789e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801788e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017892:	3301      	adds	r3, #1
 8017894:	b2db      	uxtb	r3, r3
 8017896:	b25a      	sxtb	r2, r3
 8017898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801789a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801789e:	2301      	movs	r3, #1
 80178a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80178a2:	e001      	b.n	80178a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80178a4:	2300      	movs	r3, #0
 80178a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80178a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178aa:	617b      	str	r3, [r7, #20]
	__asm volatile
 80178ac:	697b      	ldr	r3, [r7, #20]
 80178ae:	f383 8811 	msr	BASEPRI, r3
}
 80178b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80178b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80178b6:	4618      	mov	r0, r3
 80178b8:	3740      	adds	r7, #64	; 0x40
 80178ba:	46bd      	mov	sp, r7
 80178bc:	bd80      	pop	{r7, pc}
	...

080178c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b08c      	sub	sp, #48	; 0x30
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	60f8      	str	r0, [r7, #12]
 80178c8:	60b9      	str	r1, [r7, #8]
 80178ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80178cc:	2300      	movs	r3, #0
 80178ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80178d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d10a      	bne.n	80178f0 <xQueueReceive+0x30>
	__asm volatile
 80178da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178de:	f383 8811 	msr	BASEPRI, r3
 80178e2:	f3bf 8f6f 	isb	sy
 80178e6:	f3bf 8f4f 	dsb	sy
 80178ea:	623b      	str	r3, [r7, #32]
}
 80178ec:	bf00      	nop
 80178ee:	e7fe      	b.n	80178ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80178f0:	68bb      	ldr	r3, [r7, #8]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d103      	bne.n	80178fe <xQueueReceive+0x3e>
 80178f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d101      	bne.n	8017902 <xQueueReceive+0x42>
 80178fe:	2301      	movs	r3, #1
 8017900:	e000      	b.n	8017904 <xQueueReceive+0x44>
 8017902:	2300      	movs	r3, #0
 8017904:	2b00      	cmp	r3, #0
 8017906:	d10a      	bne.n	801791e <xQueueReceive+0x5e>
	__asm volatile
 8017908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801790c:	f383 8811 	msr	BASEPRI, r3
 8017910:	f3bf 8f6f 	isb	sy
 8017914:	f3bf 8f4f 	dsb	sy
 8017918:	61fb      	str	r3, [r7, #28]
}
 801791a:	bf00      	nop
 801791c:	e7fe      	b.n	801791c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801791e:	f001 f8ef 	bl	8018b00 <xTaskGetSchedulerState>
 8017922:	4603      	mov	r3, r0
 8017924:	2b00      	cmp	r3, #0
 8017926:	d102      	bne.n	801792e <xQueueReceive+0x6e>
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d101      	bne.n	8017932 <xQueueReceive+0x72>
 801792e:	2301      	movs	r3, #1
 8017930:	e000      	b.n	8017934 <xQueueReceive+0x74>
 8017932:	2300      	movs	r3, #0
 8017934:	2b00      	cmp	r3, #0
 8017936:	d10a      	bne.n	801794e <xQueueReceive+0x8e>
	__asm volatile
 8017938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801793c:	f383 8811 	msr	BASEPRI, r3
 8017940:	f3bf 8f6f 	isb	sy
 8017944:	f3bf 8f4f 	dsb	sy
 8017948:	61bb      	str	r3, [r7, #24]
}
 801794a:	bf00      	nop
 801794c:	e7fe      	b.n	801794c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801794e:	f001 fe69 	bl	8019624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017956:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801795a:	2b00      	cmp	r3, #0
 801795c:	d01f      	beq.n	801799e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801795e:	68b9      	ldr	r1, [r7, #8]
 8017960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017962:	f000 f8f7 	bl	8017b54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017968:	1e5a      	subs	r2, r3, #1
 801796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801796c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017970:	691b      	ldr	r3, [r3, #16]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d00f      	beq.n	8017996 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017978:	3310      	adds	r3, #16
 801797a:	4618      	mov	r0, r3
 801797c:	f000 fea0 	bl	80186c0 <xTaskRemoveFromEventList>
 8017980:	4603      	mov	r3, r0
 8017982:	2b00      	cmp	r3, #0
 8017984:	d007      	beq.n	8017996 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017986:	4b3d      	ldr	r3, [pc, #244]	; (8017a7c <xQueueReceive+0x1bc>)
 8017988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801798c:	601a      	str	r2, [r3, #0]
 801798e:	f3bf 8f4f 	dsb	sy
 8017992:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017996:	f001 fe75 	bl	8019684 <vPortExitCritical>
				return pdPASS;
 801799a:	2301      	movs	r3, #1
 801799c:	e069      	b.n	8017a72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d103      	bne.n	80179ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80179a4:	f001 fe6e 	bl	8019684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80179a8:	2300      	movs	r3, #0
 80179aa:	e062      	b.n	8017a72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80179ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d106      	bne.n	80179c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80179b2:	f107 0310 	add.w	r3, r7, #16
 80179b6:	4618      	mov	r0, r3
 80179b8:	f000 ff48 	bl	801884c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80179bc:	2301      	movs	r3, #1
 80179be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80179c0:	f001 fe60 	bl	8019684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80179c4:	f000 fc06 	bl	80181d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80179c8:	f001 fe2c 	bl	8019624 <vPortEnterCritical>
 80179cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80179d2:	b25b      	sxtb	r3, r3
 80179d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80179d8:	d103      	bne.n	80179e2 <xQueueReceive+0x122>
 80179da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179dc:	2200      	movs	r2, #0
 80179de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80179e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80179e8:	b25b      	sxtb	r3, r3
 80179ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80179ee:	d103      	bne.n	80179f8 <xQueueReceive+0x138>
 80179f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179f2:	2200      	movs	r2, #0
 80179f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80179f8:	f001 fe44 	bl	8019684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80179fc:	1d3a      	adds	r2, r7, #4
 80179fe:	f107 0310 	add.w	r3, r7, #16
 8017a02:	4611      	mov	r1, r2
 8017a04:	4618      	mov	r0, r3
 8017a06:	f000 ff37 	bl	8018878 <xTaskCheckForTimeOut>
 8017a0a:	4603      	mov	r3, r0
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d123      	bne.n	8017a58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a12:	f000 f917 	bl	8017c44 <prvIsQueueEmpty>
 8017a16:	4603      	mov	r3, r0
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d017      	beq.n	8017a4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a1e:	3324      	adds	r3, #36	; 0x24
 8017a20:	687a      	ldr	r2, [r7, #4]
 8017a22:	4611      	mov	r1, r2
 8017a24:	4618      	mov	r0, r3
 8017a26:	f000 fdbf 	bl	80185a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a2c:	f000 f8b8 	bl	8017ba0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017a30:	f000 fbde 	bl	80181f0 <xTaskResumeAll>
 8017a34:	4603      	mov	r3, r0
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d189      	bne.n	801794e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017a3a:	4b10      	ldr	r3, [pc, #64]	; (8017a7c <xQueueReceive+0x1bc>)
 8017a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a40:	601a      	str	r2, [r3, #0]
 8017a42:	f3bf 8f4f 	dsb	sy
 8017a46:	f3bf 8f6f 	isb	sy
 8017a4a:	e780      	b.n	801794e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a4e:	f000 f8a7 	bl	8017ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017a52:	f000 fbcd 	bl	80181f0 <xTaskResumeAll>
 8017a56:	e77a      	b.n	801794e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a5a:	f000 f8a1 	bl	8017ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017a5e:	f000 fbc7 	bl	80181f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a64:	f000 f8ee 	bl	8017c44 <prvIsQueueEmpty>
 8017a68:	4603      	mov	r3, r0
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	f43f af6f 	beq.w	801794e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017a70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017a72:	4618      	mov	r0, r3
 8017a74:	3730      	adds	r7, #48	; 0x30
 8017a76:	46bd      	mov	sp, r7
 8017a78:	bd80      	pop	{r7, pc}
 8017a7a:	bf00      	nop
 8017a7c:	e000ed04 	.word	0xe000ed04

08017a80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b086      	sub	sp, #24
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	60f8      	str	r0, [r7, #12]
 8017a88:	60b9      	str	r1, [r7, #8]
 8017a8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d10d      	bne.n	8017aba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d14d      	bne.n	8017b42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	689b      	ldr	r3, [r3, #8]
 8017aaa:	4618      	mov	r0, r3
 8017aac:	f001 f846 	bl	8018b3c <xTaskPriorityDisinherit>
 8017ab0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	609a      	str	r2, [r3, #8]
 8017ab8:	e043      	b.n	8017b42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d119      	bne.n	8017af4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	6858      	ldr	r0, [r3, #4]
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ac8:	461a      	mov	r2, r3
 8017aca:	68b9      	ldr	r1, [r7, #8]
 8017acc:	f002 f8e0 	bl	8019c90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	685a      	ldr	r2, [r3, #4]
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ad8:	441a      	add	r2, r3
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	685a      	ldr	r2, [r3, #4]
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	689b      	ldr	r3, [r3, #8]
 8017ae6:	429a      	cmp	r2, r3
 8017ae8:	d32b      	bcc.n	8017b42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	681a      	ldr	r2, [r3, #0]
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	605a      	str	r2, [r3, #4]
 8017af2:	e026      	b.n	8017b42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	68d8      	ldr	r0, [r3, #12]
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017afc:	461a      	mov	r2, r3
 8017afe:	68b9      	ldr	r1, [r7, #8]
 8017b00:	f002 f8c6 	bl	8019c90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	68da      	ldr	r2, [r3, #12]
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b0c:	425b      	negs	r3, r3
 8017b0e:	441a      	add	r2, r3
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	68da      	ldr	r2, [r3, #12]
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	429a      	cmp	r2, r3
 8017b1e:	d207      	bcs.n	8017b30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	689a      	ldr	r2, [r3, #8]
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b28:	425b      	negs	r3, r3
 8017b2a:	441a      	add	r2, r3
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	2b02      	cmp	r3, #2
 8017b34:	d105      	bne.n	8017b42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017b36:	693b      	ldr	r3, [r7, #16]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d002      	beq.n	8017b42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017b3c:	693b      	ldr	r3, [r7, #16]
 8017b3e:	3b01      	subs	r3, #1
 8017b40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017b42:	693b      	ldr	r3, [r7, #16]
 8017b44:	1c5a      	adds	r2, r3, #1
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017b4a:	697b      	ldr	r3, [r7, #20]
}
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	3718      	adds	r7, #24
 8017b50:	46bd      	mov	sp, r7
 8017b52:	bd80      	pop	{r7, pc}

08017b54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b082      	sub	sp, #8
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	6078      	str	r0, [r7, #4]
 8017b5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d018      	beq.n	8017b98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	68da      	ldr	r2, [r3, #12]
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b6e:	441a      	add	r2, r3
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	68da      	ldr	r2, [r3, #12]
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	689b      	ldr	r3, [r3, #8]
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	d303      	bcc.n	8017b88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	681a      	ldr	r2, [r3, #0]
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	68d9      	ldr	r1, [r3, #12]
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b90:	461a      	mov	r2, r3
 8017b92:	6838      	ldr	r0, [r7, #0]
 8017b94:	f002 f87c 	bl	8019c90 <memcpy>
	}
}
 8017b98:	bf00      	nop
 8017b9a:	3708      	adds	r7, #8
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd80      	pop	{r7, pc}

08017ba0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b084      	sub	sp, #16
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017ba8:	f001 fd3c 	bl	8019624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017bb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017bb4:	e011      	b.n	8017bda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d012      	beq.n	8017be4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	3324      	adds	r3, #36	; 0x24
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	f000 fd7c 	bl	80186c0 <xTaskRemoveFromEventList>
 8017bc8:	4603      	mov	r3, r0
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d001      	beq.n	8017bd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017bce:	f000 feb5 	bl	801893c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017bd2:	7bfb      	ldrb	r3, [r7, #15]
 8017bd4:	3b01      	subs	r3, #1
 8017bd6:	b2db      	uxtb	r3, r3
 8017bd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	dce9      	bgt.n	8017bb6 <prvUnlockQueue+0x16>
 8017be2:	e000      	b.n	8017be6 <prvUnlockQueue+0x46>
					break;
 8017be4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	22ff      	movs	r2, #255	; 0xff
 8017bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017bee:	f001 fd49 	bl	8019684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017bf2:	f001 fd17 	bl	8019624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017bfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017bfe:	e011      	b.n	8017c24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	691b      	ldr	r3, [r3, #16]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d012      	beq.n	8017c2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	3310      	adds	r3, #16
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	f000 fd57 	bl	80186c0 <xTaskRemoveFromEventList>
 8017c12:	4603      	mov	r3, r0
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d001      	beq.n	8017c1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017c18:	f000 fe90 	bl	801893c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017c1c:	7bbb      	ldrb	r3, [r7, #14]
 8017c1e:	3b01      	subs	r3, #1
 8017c20:	b2db      	uxtb	r3, r3
 8017c22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	dce9      	bgt.n	8017c00 <prvUnlockQueue+0x60>
 8017c2c:	e000      	b.n	8017c30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017c2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	22ff      	movs	r2, #255	; 0xff
 8017c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017c38:	f001 fd24 	bl	8019684 <vPortExitCritical>
}
 8017c3c:	bf00      	nop
 8017c3e:	3710      	adds	r7, #16
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}

08017c44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b084      	sub	sp, #16
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017c4c:	f001 fcea 	bl	8019624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d102      	bne.n	8017c5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017c58:	2301      	movs	r3, #1
 8017c5a:	60fb      	str	r3, [r7, #12]
 8017c5c:	e001      	b.n	8017c62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017c5e:	2300      	movs	r3, #0
 8017c60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017c62:	f001 fd0f 	bl	8019684 <vPortExitCritical>

	return xReturn;
 8017c66:	68fb      	ldr	r3, [r7, #12]
}
 8017c68:	4618      	mov	r0, r3
 8017c6a:	3710      	adds	r7, #16
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bd80      	pop	{r7, pc}

08017c70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b084      	sub	sp, #16
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017c78:	f001 fcd4 	bl	8019624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c84:	429a      	cmp	r2, r3
 8017c86:	d102      	bne.n	8017c8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017c88:	2301      	movs	r3, #1
 8017c8a:	60fb      	str	r3, [r7, #12]
 8017c8c:	e001      	b.n	8017c92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017c92:	f001 fcf7 	bl	8019684 <vPortExitCritical>

	return xReturn;
 8017c96:	68fb      	ldr	r3, [r7, #12]
}
 8017c98:	4618      	mov	r0, r3
 8017c9a:	3710      	adds	r7, #16
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	bd80      	pop	{r7, pc}

08017ca0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017ca0:	b480      	push	{r7}
 8017ca2:	b085      	sub	sp, #20
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	6078      	str	r0, [r7, #4]
 8017ca8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017caa:	2300      	movs	r3, #0
 8017cac:	60fb      	str	r3, [r7, #12]
 8017cae:	e014      	b.n	8017cda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017cb0:	4a0f      	ldr	r2, [pc, #60]	; (8017cf0 <vQueueAddToRegistry+0x50>)
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d10b      	bne.n	8017cd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017cbc:	490c      	ldr	r1, [pc, #48]	; (8017cf0 <vQueueAddToRegistry+0x50>)
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	683a      	ldr	r2, [r7, #0]
 8017cc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017cc6:	4a0a      	ldr	r2, [pc, #40]	; (8017cf0 <vQueueAddToRegistry+0x50>)
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	00db      	lsls	r3, r3, #3
 8017ccc:	4413      	add	r3, r2
 8017cce:	687a      	ldr	r2, [r7, #4]
 8017cd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017cd2:	e006      	b.n	8017ce2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	3301      	adds	r3, #1
 8017cd8:	60fb      	str	r3, [r7, #12]
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	2b07      	cmp	r3, #7
 8017cde:	d9e7      	bls.n	8017cb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017ce0:	bf00      	nop
 8017ce2:	bf00      	nop
 8017ce4:	3714      	adds	r7, #20
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cec:	4770      	bx	lr
 8017cee:	bf00      	nop
 8017cf0:	24002678 	.word	0x24002678

08017cf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b086      	sub	sp, #24
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	60f8      	str	r0, [r7, #12]
 8017cfc:	60b9      	str	r1, [r7, #8]
 8017cfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017d04:	f001 fc8e 	bl	8019624 <vPortEnterCritical>
 8017d08:	697b      	ldr	r3, [r7, #20]
 8017d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017d0e:	b25b      	sxtb	r3, r3
 8017d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d14:	d103      	bne.n	8017d1e <vQueueWaitForMessageRestricted+0x2a>
 8017d16:	697b      	ldr	r3, [r7, #20]
 8017d18:	2200      	movs	r2, #0
 8017d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017d1e:	697b      	ldr	r3, [r7, #20]
 8017d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017d24:	b25b      	sxtb	r3, r3
 8017d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d2a:	d103      	bne.n	8017d34 <vQueueWaitForMessageRestricted+0x40>
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	2200      	movs	r2, #0
 8017d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017d34:	f001 fca6 	bl	8019684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017d38:	697b      	ldr	r3, [r7, #20]
 8017d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d106      	bne.n	8017d4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017d40:	697b      	ldr	r3, [r7, #20]
 8017d42:	3324      	adds	r3, #36	; 0x24
 8017d44:	687a      	ldr	r2, [r7, #4]
 8017d46:	68b9      	ldr	r1, [r7, #8]
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f000 fc8d 	bl	8018668 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017d4e:	6978      	ldr	r0, [r7, #20]
 8017d50:	f7ff ff26 	bl	8017ba0 <prvUnlockQueue>
	}
 8017d54:	bf00      	nop
 8017d56:	3718      	adds	r7, #24
 8017d58:	46bd      	mov	sp, r7
 8017d5a:	bd80      	pop	{r7, pc}

08017d5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b08e      	sub	sp, #56	; 0x38
 8017d60:	af04      	add	r7, sp, #16
 8017d62:	60f8      	str	r0, [r7, #12]
 8017d64:	60b9      	str	r1, [r7, #8]
 8017d66:	607a      	str	r2, [r7, #4]
 8017d68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d10a      	bne.n	8017d86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8017d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d74:	f383 8811 	msr	BASEPRI, r3
 8017d78:	f3bf 8f6f 	isb	sy
 8017d7c:	f3bf 8f4f 	dsb	sy
 8017d80:	623b      	str	r3, [r7, #32]
}
 8017d82:	bf00      	nop
 8017d84:	e7fe      	b.n	8017d84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d10a      	bne.n	8017da2 <xTaskCreateStatic+0x46>
	__asm volatile
 8017d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d90:	f383 8811 	msr	BASEPRI, r3
 8017d94:	f3bf 8f6f 	isb	sy
 8017d98:	f3bf 8f4f 	dsb	sy
 8017d9c:	61fb      	str	r3, [r7, #28]
}
 8017d9e:	bf00      	nop
 8017da0:	e7fe      	b.n	8017da0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017da2:	235c      	movs	r3, #92	; 0x5c
 8017da4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017da6:	693b      	ldr	r3, [r7, #16]
 8017da8:	2b5c      	cmp	r3, #92	; 0x5c
 8017daa:	d00a      	beq.n	8017dc2 <xTaskCreateStatic+0x66>
	__asm volatile
 8017dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017db0:	f383 8811 	msr	BASEPRI, r3
 8017db4:	f3bf 8f6f 	isb	sy
 8017db8:	f3bf 8f4f 	dsb	sy
 8017dbc:	61bb      	str	r3, [r7, #24]
}
 8017dbe:	bf00      	nop
 8017dc0:	e7fe      	b.n	8017dc0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017dc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d01e      	beq.n	8017e08 <xTaskCreateStatic+0xac>
 8017dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d01b      	beq.n	8017e08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017dd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ddc:	2202      	movs	r2, #2
 8017dde:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017de2:	2300      	movs	r3, #0
 8017de4:	9303      	str	r3, [sp, #12]
 8017de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de8:	9302      	str	r3, [sp, #8]
 8017dea:	f107 0314 	add.w	r3, r7, #20
 8017dee:	9301      	str	r3, [sp, #4]
 8017df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017df2:	9300      	str	r3, [sp, #0]
 8017df4:	683b      	ldr	r3, [r7, #0]
 8017df6:	687a      	ldr	r2, [r7, #4]
 8017df8:	68b9      	ldr	r1, [r7, #8]
 8017dfa:	68f8      	ldr	r0, [r7, #12]
 8017dfc:	f000 f850 	bl	8017ea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017e00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e02:	f000 f8dd 	bl	8017fc0 <prvAddNewTaskToReadyList>
 8017e06:	e001      	b.n	8017e0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017e08:	2300      	movs	r3, #0
 8017e0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017e0c:	697b      	ldr	r3, [r7, #20]
	}
 8017e0e:	4618      	mov	r0, r3
 8017e10:	3728      	adds	r7, #40	; 0x28
 8017e12:	46bd      	mov	sp, r7
 8017e14:	bd80      	pop	{r7, pc}

08017e16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017e16:	b580      	push	{r7, lr}
 8017e18:	b08c      	sub	sp, #48	; 0x30
 8017e1a:	af04      	add	r7, sp, #16
 8017e1c:	60f8      	str	r0, [r7, #12]
 8017e1e:	60b9      	str	r1, [r7, #8]
 8017e20:	603b      	str	r3, [r7, #0]
 8017e22:	4613      	mov	r3, r2
 8017e24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017e26:	88fb      	ldrh	r3, [r7, #6]
 8017e28:	009b      	lsls	r3, r3, #2
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	f001 fd1c 	bl	8019868 <pvPortMalloc>
 8017e30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017e32:	697b      	ldr	r3, [r7, #20]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d00e      	beq.n	8017e56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017e38:	205c      	movs	r0, #92	; 0x5c
 8017e3a:	f001 fd15 	bl	8019868 <pvPortMalloc>
 8017e3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017e40:	69fb      	ldr	r3, [r7, #28]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d003      	beq.n	8017e4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017e46:	69fb      	ldr	r3, [r7, #28]
 8017e48:	697a      	ldr	r2, [r7, #20]
 8017e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8017e4c:	e005      	b.n	8017e5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017e4e:	6978      	ldr	r0, [r7, #20]
 8017e50:	f001 fdd6 	bl	8019a00 <vPortFree>
 8017e54:	e001      	b.n	8017e5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017e56:	2300      	movs	r3, #0
 8017e58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017e5a:	69fb      	ldr	r3, [r7, #28]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d017      	beq.n	8017e90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017e60:	69fb      	ldr	r3, [r7, #28]
 8017e62:	2200      	movs	r2, #0
 8017e64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017e68:	88fa      	ldrh	r2, [r7, #6]
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	9303      	str	r3, [sp, #12]
 8017e6e:	69fb      	ldr	r3, [r7, #28]
 8017e70:	9302      	str	r3, [sp, #8]
 8017e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e74:	9301      	str	r3, [sp, #4]
 8017e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e78:	9300      	str	r3, [sp, #0]
 8017e7a:	683b      	ldr	r3, [r7, #0]
 8017e7c:	68b9      	ldr	r1, [r7, #8]
 8017e7e:	68f8      	ldr	r0, [r7, #12]
 8017e80:	f000 f80e 	bl	8017ea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017e84:	69f8      	ldr	r0, [r7, #28]
 8017e86:	f000 f89b 	bl	8017fc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017e8a:	2301      	movs	r3, #1
 8017e8c:	61bb      	str	r3, [r7, #24]
 8017e8e:	e002      	b.n	8017e96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017e94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017e96:	69bb      	ldr	r3, [r7, #24]
	}
 8017e98:	4618      	mov	r0, r3
 8017e9a:	3720      	adds	r7, #32
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	bd80      	pop	{r7, pc}

08017ea0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b088      	sub	sp, #32
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	60f8      	str	r0, [r7, #12]
 8017ea8:	60b9      	str	r1, [r7, #8]
 8017eaa:	607a      	str	r2, [r7, #4]
 8017eac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	009b      	lsls	r3, r3, #2
 8017eb6:	461a      	mov	r2, r3
 8017eb8:	21a5      	movs	r1, #165	; 0xa5
 8017eba:	f001 fef7 	bl	8019cac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017ec2:	6879      	ldr	r1, [r7, #4]
 8017ec4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017ec8:	440b      	add	r3, r1
 8017eca:	009b      	lsls	r3, r3, #2
 8017ecc:	4413      	add	r3, r2
 8017ece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017ed0:	69bb      	ldr	r3, [r7, #24]
 8017ed2:	f023 0307 	bic.w	r3, r3, #7
 8017ed6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017ed8:	69bb      	ldr	r3, [r7, #24]
 8017eda:	f003 0307 	and.w	r3, r3, #7
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d00a      	beq.n	8017ef8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ee6:	f383 8811 	msr	BASEPRI, r3
 8017eea:	f3bf 8f6f 	isb	sy
 8017eee:	f3bf 8f4f 	dsb	sy
 8017ef2:	617b      	str	r3, [r7, #20]
}
 8017ef4:	bf00      	nop
 8017ef6:	e7fe      	b.n	8017ef6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017ef8:	68bb      	ldr	r3, [r7, #8]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d01f      	beq.n	8017f3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017efe:	2300      	movs	r3, #0
 8017f00:	61fb      	str	r3, [r7, #28]
 8017f02:	e012      	b.n	8017f2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017f04:	68ba      	ldr	r2, [r7, #8]
 8017f06:	69fb      	ldr	r3, [r7, #28]
 8017f08:	4413      	add	r3, r2
 8017f0a:	7819      	ldrb	r1, [r3, #0]
 8017f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f0e:	69fb      	ldr	r3, [r7, #28]
 8017f10:	4413      	add	r3, r2
 8017f12:	3334      	adds	r3, #52	; 0x34
 8017f14:	460a      	mov	r2, r1
 8017f16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017f18:	68ba      	ldr	r2, [r7, #8]
 8017f1a:	69fb      	ldr	r3, [r7, #28]
 8017f1c:	4413      	add	r3, r2
 8017f1e:	781b      	ldrb	r3, [r3, #0]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d006      	beq.n	8017f32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017f24:	69fb      	ldr	r3, [r7, #28]
 8017f26:	3301      	adds	r3, #1
 8017f28:	61fb      	str	r3, [r7, #28]
 8017f2a:	69fb      	ldr	r3, [r7, #28]
 8017f2c:	2b0f      	cmp	r3, #15
 8017f2e:	d9e9      	bls.n	8017f04 <prvInitialiseNewTask+0x64>
 8017f30:	e000      	b.n	8017f34 <prvInitialiseNewTask+0x94>
			{
				break;
 8017f32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f36:	2200      	movs	r2, #0
 8017f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017f3c:	e003      	b.n	8017f46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f40:	2200      	movs	r2, #0
 8017f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f48:	2b37      	cmp	r3, #55	; 0x37
 8017f4a:	d901      	bls.n	8017f50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017f4c:	2337      	movs	r3, #55	; 0x37
 8017f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f5e:	2200      	movs	r2, #0
 8017f60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f64:	3304      	adds	r3, #4
 8017f66:	4618      	mov	r0, r3
 8017f68:	f7ff f978 	bl	801725c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f6e:	3318      	adds	r3, #24
 8017f70:	4618      	mov	r0, r3
 8017f72:	f7ff f973 	bl	801725c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f8e:	2200      	movs	r2, #0
 8017f90:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f94:	2200      	movs	r2, #0
 8017f96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017f9a:	683a      	ldr	r2, [r7, #0]
 8017f9c:	68f9      	ldr	r1, [r7, #12]
 8017f9e:	69b8      	ldr	r0, [r7, #24]
 8017fa0:	f001 fa14 	bl	80193cc <pxPortInitialiseStack>
 8017fa4:	4602      	mov	r2, r0
 8017fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fa8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d002      	beq.n	8017fb6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017fb6:	bf00      	nop
 8017fb8:	3720      	adds	r7, #32
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}
	...

08017fc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b082      	sub	sp, #8
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017fc8:	f001 fb2c 	bl	8019624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017fcc:	4b2d      	ldr	r3, [pc, #180]	; (8018084 <prvAddNewTaskToReadyList+0xc4>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	3301      	adds	r3, #1
 8017fd2:	4a2c      	ldr	r2, [pc, #176]	; (8018084 <prvAddNewTaskToReadyList+0xc4>)
 8017fd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017fd6:	4b2c      	ldr	r3, [pc, #176]	; (8018088 <prvAddNewTaskToReadyList+0xc8>)
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d109      	bne.n	8017ff2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017fde:	4a2a      	ldr	r2, [pc, #168]	; (8018088 <prvAddNewTaskToReadyList+0xc8>)
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017fe4:	4b27      	ldr	r3, [pc, #156]	; (8018084 <prvAddNewTaskToReadyList+0xc4>)
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	2b01      	cmp	r3, #1
 8017fea:	d110      	bne.n	801800e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017fec:	f000 fcca 	bl	8018984 <prvInitialiseTaskLists>
 8017ff0:	e00d      	b.n	801800e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017ff2:	4b26      	ldr	r3, [pc, #152]	; (801808c <prvAddNewTaskToReadyList+0xcc>)
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d109      	bne.n	801800e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017ffa:	4b23      	ldr	r3, [pc, #140]	; (8018088 <prvAddNewTaskToReadyList+0xc8>)
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018004:	429a      	cmp	r2, r3
 8018006:	d802      	bhi.n	801800e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018008:	4a1f      	ldr	r2, [pc, #124]	; (8018088 <prvAddNewTaskToReadyList+0xc8>)
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801800e:	4b20      	ldr	r3, [pc, #128]	; (8018090 <prvAddNewTaskToReadyList+0xd0>)
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	3301      	adds	r3, #1
 8018014:	4a1e      	ldr	r2, [pc, #120]	; (8018090 <prvAddNewTaskToReadyList+0xd0>)
 8018016:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018018:	4b1d      	ldr	r3, [pc, #116]	; (8018090 <prvAddNewTaskToReadyList+0xd0>)
 801801a:	681a      	ldr	r2, [r3, #0]
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018024:	4b1b      	ldr	r3, [pc, #108]	; (8018094 <prvAddNewTaskToReadyList+0xd4>)
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	429a      	cmp	r2, r3
 801802a:	d903      	bls.n	8018034 <prvAddNewTaskToReadyList+0x74>
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018030:	4a18      	ldr	r2, [pc, #96]	; (8018094 <prvAddNewTaskToReadyList+0xd4>)
 8018032:	6013      	str	r3, [r2, #0]
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018038:	4613      	mov	r3, r2
 801803a:	009b      	lsls	r3, r3, #2
 801803c:	4413      	add	r3, r2
 801803e:	009b      	lsls	r3, r3, #2
 8018040:	4a15      	ldr	r2, [pc, #84]	; (8018098 <prvAddNewTaskToReadyList+0xd8>)
 8018042:	441a      	add	r2, r3
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	3304      	adds	r3, #4
 8018048:	4619      	mov	r1, r3
 801804a:	4610      	mov	r0, r2
 801804c:	f7ff f913 	bl	8017276 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018050:	f001 fb18 	bl	8019684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018054:	4b0d      	ldr	r3, [pc, #52]	; (801808c <prvAddNewTaskToReadyList+0xcc>)
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d00e      	beq.n	801807a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801805c:	4b0a      	ldr	r3, [pc, #40]	; (8018088 <prvAddNewTaskToReadyList+0xc8>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018066:	429a      	cmp	r2, r3
 8018068:	d207      	bcs.n	801807a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801806a:	4b0c      	ldr	r3, [pc, #48]	; (801809c <prvAddNewTaskToReadyList+0xdc>)
 801806c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018070:	601a      	str	r2, [r3, #0]
 8018072:	f3bf 8f4f 	dsb	sy
 8018076:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801807a:	bf00      	nop
 801807c:	3708      	adds	r7, #8
 801807e:	46bd      	mov	sp, r7
 8018080:	bd80      	pop	{r7, pc}
 8018082:	bf00      	nop
 8018084:	24002b8c 	.word	0x24002b8c
 8018088:	240026b8 	.word	0x240026b8
 801808c:	24002b98 	.word	0x24002b98
 8018090:	24002ba8 	.word	0x24002ba8
 8018094:	24002b94 	.word	0x24002b94
 8018098:	240026bc 	.word	0x240026bc
 801809c:	e000ed04 	.word	0xe000ed04

080180a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b084      	sub	sp, #16
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80180a8:	2300      	movs	r3, #0
 80180aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d017      	beq.n	80180e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80180b2:	4b13      	ldr	r3, [pc, #76]	; (8018100 <vTaskDelay+0x60>)
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d00a      	beq.n	80180d0 <vTaskDelay+0x30>
	__asm volatile
 80180ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180be:	f383 8811 	msr	BASEPRI, r3
 80180c2:	f3bf 8f6f 	isb	sy
 80180c6:	f3bf 8f4f 	dsb	sy
 80180ca:	60bb      	str	r3, [r7, #8]
}
 80180cc:	bf00      	nop
 80180ce:	e7fe      	b.n	80180ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80180d0:	f000 f880 	bl	80181d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80180d4:	2100      	movs	r1, #0
 80180d6:	6878      	ldr	r0, [r7, #4]
 80180d8:	f000 fdb6 	bl	8018c48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80180dc:	f000 f888 	bl	80181f0 <xTaskResumeAll>
 80180e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d107      	bne.n	80180f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80180e8:	4b06      	ldr	r3, [pc, #24]	; (8018104 <vTaskDelay+0x64>)
 80180ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180ee:	601a      	str	r2, [r3, #0]
 80180f0:	f3bf 8f4f 	dsb	sy
 80180f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80180f8:	bf00      	nop
 80180fa:	3710      	adds	r7, #16
 80180fc:	46bd      	mov	sp, r7
 80180fe:	bd80      	pop	{r7, pc}
 8018100:	24002bb4 	.word	0x24002bb4
 8018104:	e000ed04 	.word	0xe000ed04

08018108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b08a      	sub	sp, #40	; 0x28
 801810c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801810e:	2300      	movs	r3, #0
 8018110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018112:	2300      	movs	r3, #0
 8018114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018116:	463a      	mov	r2, r7
 8018118:	1d39      	adds	r1, r7, #4
 801811a:	f107 0308 	add.w	r3, r7, #8
 801811e:	4618      	mov	r0, r3
 8018120:	f7fe fddc 	bl	8016cdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018124:	6839      	ldr	r1, [r7, #0]
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	68ba      	ldr	r2, [r7, #8]
 801812a:	9202      	str	r2, [sp, #8]
 801812c:	9301      	str	r3, [sp, #4]
 801812e:	2300      	movs	r3, #0
 8018130:	9300      	str	r3, [sp, #0]
 8018132:	2300      	movs	r3, #0
 8018134:	460a      	mov	r2, r1
 8018136:	4921      	ldr	r1, [pc, #132]	; (80181bc <vTaskStartScheduler+0xb4>)
 8018138:	4821      	ldr	r0, [pc, #132]	; (80181c0 <vTaskStartScheduler+0xb8>)
 801813a:	f7ff fe0f 	bl	8017d5c <xTaskCreateStatic>
 801813e:	4603      	mov	r3, r0
 8018140:	4a20      	ldr	r2, [pc, #128]	; (80181c4 <vTaskStartScheduler+0xbc>)
 8018142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018144:	4b1f      	ldr	r3, [pc, #124]	; (80181c4 <vTaskStartScheduler+0xbc>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d002      	beq.n	8018152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801814c:	2301      	movs	r3, #1
 801814e:	617b      	str	r3, [r7, #20]
 8018150:	e001      	b.n	8018156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018152:	2300      	movs	r3, #0
 8018154:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018156:	697b      	ldr	r3, [r7, #20]
 8018158:	2b01      	cmp	r3, #1
 801815a:	d102      	bne.n	8018162 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801815c:	f000 fdc8 	bl	8018cf0 <xTimerCreateTimerTask>
 8018160:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018162:	697b      	ldr	r3, [r7, #20]
 8018164:	2b01      	cmp	r3, #1
 8018166:	d116      	bne.n	8018196 <vTaskStartScheduler+0x8e>
	__asm volatile
 8018168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801816c:	f383 8811 	msr	BASEPRI, r3
 8018170:	f3bf 8f6f 	isb	sy
 8018174:	f3bf 8f4f 	dsb	sy
 8018178:	613b      	str	r3, [r7, #16]
}
 801817a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801817c:	4b12      	ldr	r3, [pc, #72]	; (80181c8 <vTaskStartScheduler+0xc0>)
 801817e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018182:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018184:	4b11      	ldr	r3, [pc, #68]	; (80181cc <vTaskStartScheduler+0xc4>)
 8018186:	2201      	movs	r2, #1
 8018188:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801818a:	4b11      	ldr	r3, [pc, #68]	; (80181d0 <vTaskStartScheduler+0xc8>)
 801818c:	2200      	movs	r2, #0
 801818e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018190:	f001 f9a6 	bl	80194e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018194:	e00e      	b.n	80181b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018196:	697b      	ldr	r3, [r7, #20]
 8018198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801819c:	d10a      	bne.n	80181b4 <vTaskStartScheduler+0xac>
	__asm volatile
 801819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181a2:	f383 8811 	msr	BASEPRI, r3
 80181a6:	f3bf 8f6f 	isb	sy
 80181aa:	f3bf 8f4f 	dsb	sy
 80181ae:	60fb      	str	r3, [r7, #12]
}
 80181b0:	bf00      	nop
 80181b2:	e7fe      	b.n	80181b2 <vTaskStartScheduler+0xaa>
}
 80181b4:	bf00      	nop
 80181b6:	3718      	adds	r7, #24
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bd80      	pop	{r7, pc}
 80181bc:	0801a920 	.word	0x0801a920
 80181c0:	08018955 	.word	0x08018955
 80181c4:	24002bb0 	.word	0x24002bb0
 80181c8:	24002bac 	.word	0x24002bac
 80181cc:	24002b98 	.word	0x24002b98
 80181d0:	24002b90 	.word	0x24002b90

080181d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80181d4:	b480      	push	{r7}
 80181d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80181d8:	4b04      	ldr	r3, [pc, #16]	; (80181ec <vTaskSuspendAll+0x18>)
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	3301      	adds	r3, #1
 80181de:	4a03      	ldr	r2, [pc, #12]	; (80181ec <vTaskSuspendAll+0x18>)
 80181e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80181e2:	bf00      	nop
 80181e4:	46bd      	mov	sp, r7
 80181e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ea:	4770      	bx	lr
 80181ec:	24002bb4 	.word	0x24002bb4

080181f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b084      	sub	sp, #16
 80181f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80181f6:	2300      	movs	r3, #0
 80181f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80181fa:	2300      	movs	r3, #0
 80181fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80181fe:	4b42      	ldr	r3, [pc, #264]	; (8018308 <xTaskResumeAll+0x118>)
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	2b00      	cmp	r3, #0
 8018204:	d10a      	bne.n	801821c <xTaskResumeAll+0x2c>
	__asm volatile
 8018206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801820a:	f383 8811 	msr	BASEPRI, r3
 801820e:	f3bf 8f6f 	isb	sy
 8018212:	f3bf 8f4f 	dsb	sy
 8018216:	603b      	str	r3, [r7, #0]
}
 8018218:	bf00      	nop
 801821a:	e7fe      	b.n	801821a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801821c:	f001 fa02 	bl	8019624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018220:	4b39      	ldr	r3, [pc, #228]	; (8018308 <xTaskResumeAll+0x118>)
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	3b01      	subs	r3, #1
 8018226:	4a38      	ldr	r2, [pc, #224]	; (8018308 <xTaskResumeAll+0x118>)
 8018228:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801822a:	4b37      	ldr	r3, [pc, #220]	; (8018308 <xTaskResumeAll+0x118>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d162      	bne.n	80182f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018232:	4b36      	ldr	r3, [pc, #216]	; (801830c <xTaskResumeAll+0x11c>)
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d05e      	beq.n	80182f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801823a:	e02f      	b.n	801829c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801823c:	4b34      	ldr	r3, [pc, #208]	; (8018310 <xTaskResumeAll+0x120>)
 801823e:	68db      	ldr	r3, [r3, #12]
 8018240:	68db      	ldr	r3, [r3, #12]
 8018242:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	3318      	adds	r3, #24
 8018248:	4618      	mov	r0, r3
 801824a:	f7ff f871 	bl	8017330 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	3304      	adds	r3, #4
 8018252:	4618      	mov	r0, r3
 8018254:	f7ff f86c 	bl	8017330 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801825c:	4b2d      	ldr	r3, [pc, #180]	; (8018314 <xTaskResumeAll+0x124>)
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	429a      	cmp	r2, r3
 8018262:	d903      	bls.n	801826c <xTaskResumeAll+0x7c>
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018268:	4a2a      	ldr	r2, [pc, #168]	; (8018314 <xTaskResumeAll+0x124>)
 801826a:	6013      	str	r3, [r2, #0]
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018270:	4613      	mov	r3, r2
 8018272:	009b      	lsls	r3, r3, #2
 8018274:	4413      	add	r3, r2
 8018276:	009b      	lsls	r3, r3, #2
 8018278:	4a27      	ldr	r2, [pc, #156]	; (8018318 <xTaskResumeAll+0x128>)
 801827a:	441a      	add	r2, r3
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	3304      	adds	r3, #4
 8018280:	4619      	mov	r1, r3
 8018282:	4610      	mov	r0, r2
 8018284:	f7fe fff7 	bl	8017276 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801828c:	4b23      	ldr	r3, [pc, #140]	; (801831c <xTaskResumeAll+0x12c>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018292:	429a      	cmp	r2, r3
 8018294:	d302      	bcc.n	801829c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018296:	4b22      	ldr	r3, [pc, #136]	; (8018320 <xTaskResumeAll+0x130>)
 8018298:	2201      	movs	r2, #1
 801829a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801829c:	4b1c      	ldr	r3, [pc, #112]	; (8018310 <xTaskResumeAll+0x120>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d1cb      	bne.n	801823c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d001      	beq.n	80182ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80182aa:	f000 fc09 	bl	8018ac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80182ae:	4b1d      	ldr	r3, [pc, #116]	; (8018324 <xTaskResumeAll+0x134>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d010      	beq.n	80182dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80182ba:	f000 f847 	bl	801834c <xTaskIncrementTick>
 80182be:	4603      	mov	r3, r0
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d002      	beq.n	80182ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80182c4:	4b16      	ldr	r3, [pc, #88]	; (8018320 <xTaskResumeAll+0x130>)
 80182c6:	2201      	movs	r2, #1
 80182c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	3b01      	subs	r3, #1
 80182ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d1f1      	bne.n	80182ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80182d6:	4b13      	ldr	r3, [pc, #76]	; (8018324 <xTaskResumeAll+0x134>)
 80182d8:	2200      	movs	r2, #0
 80182da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80182dc:	4b10      	ldr	r3, [pc, #64]	; (8018320 <xTaskResumeAll+0x130>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d009      	beq.n	80182f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80182e4:	2301      	movs	r3, #1
 80182e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80182e8:	4b0f      	ldr	r3, [pc, #60]	; (8018328 <xTaskResumeAll+0x138>)
 80182ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182ee:	601a      	str	r2, [r3, #0]
 80182f0:	f3bf 8f4f 	dsb	sy
 80182f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80182f8:	f001 f9c4 	bl	8019684 <vPortExitCritical>

	return xAlreadyYielded;
 80182fc:	68bb      	ldr	r3, [r7, #8]
}
 80182fe:	4618      	mov	r0, r3
 8018300:	3710      	adds	r7, #16
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}
 8018306:	bf00      	nop
 8018308:	24002bb4 	.word	0x24002bb4
 801830c:	24002b8c 	.word	0x24002b8c
 8018310:	24002b4c 	.word	0x24002b4c
 8018314:	24002b94 	.word	0x24002b94
 8018318:	240026bc 	.word	0x240026bc
 801831c:	240026b8 	.word	0x240026b8
 8018320:	24002ba0 	.word	0x24002ba0
 8018324:	24002b9c 	.word	0x24002b9c
 8018328:	e000ed04 	.word	0xe000ed04

0801832c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801832c:	b480      	push	{r7}
 801832e:	b083      	sub	sp, #12
 8018330:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018332:	4b05      	ldr	r3, [pc, #20]	; (8018348 <xTaskGetTickCount+0x1c>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018338:	687b      	ldr	r3, [r7, #4]
}
 801833a:	4618      	mov	r0, r3
 801833c:	370c      	adds	r7, #12
 801833e:	46bd      	mov	sp, r7
 8018340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018344:	4770      	bx	lr
 8018346:	bf00      	nop
 8018348:	24002b90 	.word	0x24002b90

0801834c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801834c:	b580      	push	{r7, lr}
 801834e:	b086      	sub	sp, #24
 8018350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018352:	2300      	movs	r3, #0
 8018354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018356:	4b53      	ldr	r3, [pc, #332]	; (80184a4 <xTaskIncrementTick+0x158>)
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	2b00      	cmp	r3, #0
 801835c:	f040 8095 	bne.w	801848a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018360:	4b51      	ldr	r3, [pc, #324]	; (80184a8 <xTaskIncrementTick+0x15c>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	3301      	adds	r3, #1
 8018366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018368:	4a4f      	ldr	r2, [pc, #316]	; (80184a8 <xTaskIncrementTick+0x15c>)
 801836a:	693b      	ldr	r3, [r7, #16]
 801836c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801836e:	693b      	ldr	r3, [r7, #16]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d120      	bne.n	80183b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018374:	4b4d      	ldr	r3, [pc, #308]	; (80184ac <xTaskIncrementTick+0x160>)
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d00a      	beq.n	8018394 <xTaskIncrementTick+0x48>
	__asm volatile
 801837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018382:	f383 8811 	msr	BASEPRI, r3
 8018386:	f3bf 8f6f 	isb	sy
 801838a:	f3bf 8f4f 	dsb	sy
 801838e:	603b      	str	r3, [r7, #0]
}
 8018390:	bf00      	nop
 8018392:	e7fe      	b.n	8018392 <xTaskIncrementTick+0x46>
 8018394:	4b45      	ldr	r3, [pc, #276]	; (80184ac <xTaskIncrementTick+0x160>)
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	60fb      	str	r3, [r7, #12]
 801839a:	4b45      	ldr	r3, [pc, #276]	; (80184b0 <xTaskIncrementTick+0x164>)
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	4a43      	ldr	r2, [pc, #268]	; (80184ac <xTaskIncrementTick+0x160>)
 80183a0:	6013      	str	r3, [r2, #0]
 80183a2:	4a43      	ldr	r2, [pc, #268]	; (80184b0 <xTaskIncrementTick+0x164>)
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	6013      	str	r3, [r2, #0]
 80183a8:	4b42      	ldr	r3, [pc, #264]	; (80184b4 <xTaskIncrementTick+0x168>)
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	3301      	adds	r3, #1
 80183ae:	4a41      	ldr	r2, [pc, #260]	; (80184b4 <xTaskIncrementTick+0x168>)
 80183b0:	6013      	str	r3, [r2, #0]
 80183b2:	f000 fb85 	bl	8018ac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80183b6:	4b40      	ldr	r3, [pc, #256]	; (80184b8 <xTaskIncrementTick+0x16c>)
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	693a      	ldr	r2, [r7, #16]
 80183bc:	429a      	cmp	r2, r3
 80183be:	d349      	bcc.n	8018454 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80183c0:	4b3a      	ldr	r3, [pc, #232]	; (80184ac <xTaskIncrementTick+0x160>)
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d104      	bne.n	80183d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80183ca:	4b3b      	ldr	r3, [pc, #236]	; (80184b8 <xTaskIncrementTick+0x16c>)
 80183cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80183d0:	601a      	str	r2, [r3, #0]
					break;
 80183d2:	e03f      	b.n	8018454 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183d4:	4b35      	ldr	r3, [pc, #212]	; (80184ac <xTaskIncrementTick+0x160>)
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	68db      	ldr	r3, [r3, #12]
 80183da:	68db      	ldr	r3, [r3, #12]
 80183dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80183de:	68bb      	ldr	r3, [r7, #8]
 80183e0:	685b      	ldr	r3, [r3, #4]
 80183e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80183e4:	693a      	ldr	r2, [r7, #16]
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	429a      	cmp	r2, r3
 80183ea:	d203      	bcs.n	80183f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80183ec:	4a32      	ldr	r2, [pc, #200]	; (80184b8 <xTaskIncrementTick+0x16c>)
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80183f2:	e02f      	b.n	8018454 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80183f4:	68bb      	ldr	r3, [r7, #8]
 80183f6:	3304      	adds	r3, #4
 80183f8:	4618      	mov	r0, r3
 80183fa:	f7fe ff99 	bl	8017330 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80183fe:	68bb      	ldr	r3, [r7, #8]
 8018400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018402:	2b00      	cmp	r3, #0
 8018404:	d004      	beq.n	8018410 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018406:	68bb      	ldr	r3, [r7, #8]
 8018408:	3318      	adds	r3, #24
 801840a:	4618      	mov	r0, r3
 801840c:	f7fe ff90 	bl	8017330 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018410:	68bb      	ldr	r3, [r7, #8]
 8018412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018414:	4b29      	ldr	r3, [pc, #164]	; (80184bc <xTaskIncrementTick+0x170>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	429a      	cmp	r2, r3
 801841a:	d903      	bls.n	8018424 <xTaskIncrementTick+0xd8>
 801841c:	68bb      	ldr	r3, [r7, #8]
 801841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018420:	4a26      	ldr	r2, [pc, #152]	; (80184bc <xTaskIncrementTick+0x170>)
 8018422:	6013      	str	r3, [r2, #0]
 8018424:	68bb      	ldr	r3, [r7, #8]
 8018426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018428:	4613      	mov	r3, r2
 801842a:	009b      	lsls	r3, r3, #2
 801842c:	4413      	add	r3, r2
 801842e:	009b      	lsls	r3, r3, #2
 8018430:	4a23      	ldr	r2, [pc, #140]	; (80184c0 <xTaskIncrementTick+0x174>)
 8018432:	441a      	add	r2, r3
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	3304      	adds	r3, #4
 8018438:	4619      	mov	r1, r3
 801843a:	4610      	mov	r0, r2
 801843c:	f7fe ff1b 	bl	8017276 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018444:	4b1f      	ldr	r3, [pc, #124]	; (80184c4 <xTaskIncrementTick+0x178>)
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801844a:	429a      	cmp	r2, r3
 801844c:	d3b8      	bcc.n	80183c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801844e:	2301      	movs	r3, #1
 8018450:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018452:	e7b5      	b.n	80183c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018454:	4b1b      	ldr	r3, [pc, #108]	; (80184c4 <xTaskIncrementTick+0x178>)
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801845a:	4919      	ldr	r1, [pc, #100]	; (80184c0 <xTaskIncrementTick+0x174>)
 801845c:	4613      	mov	r3, r2
 801845e:	009b      	lsls	r3, r3, #2
 8018460:	4413      	add	r3, r2
 8018462:	009b      	lsls	r3, r3, #2
 8018464:	440b      	add	r3, r1
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	2b01      	cmp	r3, #1
 801846a:	d901      	bls.n	8018470 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801846c:	2301      	movs	r3, #1
 801846e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8018470:	4b15      	ldr	r3, [pc, #84]	; (80184c8 <xTaskIncrementTick+0x17c>)
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d101      	bne.n	801847c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018478:	f7e9 fdf2 	bl	8002060 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801847c:	4b13      	ldr	r3, [pc, #76]	; (80184cc <xTaskIncrementTick+0x180>)
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	2b00      	cmp	r3, #0
 8018482:	d009      	beq.n	8018498 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8018484:	2301      	movs	r3, #1
 8018486:	617b      	str	r3, [r7, #20]
 8018488:	e006      	b.n	8018498 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801848a:	4b0f      	ldr	r3, [pc, #60]	; (80184c8 <xTaskIncrementTick+0x17c>)
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	3301      	adds	r3, #1
 8018490:	4a0d      	ldr	r2, [pc, #52]	; (80184c8 <xTaskIncrementTick+0x17c>)
 8018492:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8018494:	f7e9 fde4 	bl	8002060 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018498:	697b      	ldr	r3, [r7, #20]
}
 801849a:	4618      	mov	r0, r3
 801849c:	3718      	adds	r7, #24
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd80      	pop	{r7, pc}
 80184a2:	bf00      	nop
 80184a4:	24002bb4 	.word	0x24002bb4
 80184a8:	24002b90 	.word	0x24002b90
 80184ac:	24002b44 	.word	0x24002b44
 80184b0:	24002b48 	.word	0x24002b48
 80184b4:	24002ba4 	.word	0x24002ba4
 80184b8:	24002bac 	.word	0x24002bac
 80184bc:	24002b94 	.word	0x24002b94
 80184c0:	240026bc 	.word	0x240026bc
 80184c4:	240026b8 	.word	0x240026b8
 80184c8:	24002b9c 	.word	0x24002b9c
 80184cc:	24002ba0 	.word	0x24002ba0

080184d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80184d0:	b580      	push	{r7, lr}
 80184d2:	b084      	sub	sp, #16
 80184d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80184d6:	4b2f      	ldr	r3, [pc, #188]	; (8018594 <vTaskSwitchContext+0xc4>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d003      	beq.n	80184e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80184de:	4b2e      	ldr	r3, [pc, #184]	; (8018598 <vTaskSwitchContext+0xc8>)
 80184e0:	2201      	movs	r2, #1
 80184e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80184e4:	e052      	b.n	801858c <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 80184e6:	4b2c      	ldr	r3, [pc, #176]	; (8018598 <vTaskSwitchContext+0xc8>)
 80184e8:	2200      	movs	r2, #0
 80184ea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80184ec:	4b2b      	ldr	r3, [pc, #172]	; (801859c <vTaskSwitchContext+0xcc>)
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	681a      	ldr	r2, [r3, #0]
 80184f2:	4b2a      	ldr	r3, [pc, #168]	; (801859c <vTaskSwitchContext+0xcc>)
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184f8:	429a      	cmp	r2, r3
 80184fa:	d808      	bhi.n	801850e <vTaskSwitchContext+0x3e>
 80184fc:	4b27      	ldr	r3, [pc, #156]	; (801859c <vTaskSwitchContext+0xcc>)
 80184fe:	681a      	ldr	r2, [r3, #0]
 8018500:	4b26      	ldr	r3, [pc, #152]	; (801859c <vTaskSwitchContext+0xcc>)
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	3334      	adds	r3, #52	; 0x34
 8018506:	4619      	mov	r1, r3
 8018508:	4610      	mov	r0, r2
 801850a:	f7e9 fdb7 	bl	800207c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801850e:	4b24      	ldr	r3, [pc, #144]	; (80185a0 <vTaskSwitchContext+0xd0>)
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	60fb      	str	r3, [r7, #12]
 8018514:	e010      	b.n	8018538 <vTaskSwitchContext+0x68>
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d10a      	bne.n	8018532 <vTaskSwitchContext+0x62>
	__asm volatile
 801851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018520:	f383 8811 	msr	BASEPRI, r3
 8018524:	f3bf 8f6f 	isb	sy
 8018528:	f3bf 8f4f 	dsb	sy
 801852c:	607b      	str	r3, [r7, #4]
}
 801852e:	bf00      	nop
 8018530:	e7fe      	b.n	8018530 <vTaskSwitchContext+0x60>
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	3b01      	subs	r3, #1
 8018536:	60fb      	str	r3, [r7, #12]
 8018538:	491a      	ldr	r1, [pc, #104]	; (80185a4 <vTaskSwitchContext+0xd4>)
 801853a:	68fa      	ldr	r2, [r7, #12]
 801853c:	4613      	mov	r3, r2
 801853e:	009b      	lsls	r3, r3, #2
 8018540:	4413      	add	r3, r2
 8018542:	009b      	lsls	r3, r3, #2
 8018544:	440b      	add	r3, r1
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d0e4      	beq.n	8018516 <vTaskSwitchContext+0x46>
 801854c:	68fa      	ldr	r2, [r7, #12]
 801854e:	4613      	mov	r3, r2
 8018550:	009b      	lsls	r3, r3, #2
 8018552:	4413      	add	r3, r2
 8018554:	009b      	lsls	r3, r3, #2
 8018556:	4a13      	ldr	r2, [pc, #76]	; (80185a4 <vTaskSwitchContext+0xd4>)
 8018558:	4413      	add	r3, r2
 801855a:	60bb      	str	r3, [r7, #8]
 801855c:	68bb      	ldr	r3, [r7, #8]
 801855e:	685b      	ldr	r3, [r3, #4]
 8018560:	685a      	ldr	r2, [r3, #4]
 8018562:	68bb      	ldr	r3, [r7, #8]
 8018564:	605a      	str	r2, [r3, #4]
 8018566:	68bb      	ldr	r3, [r7, #8]
 8018568:	685a      	ldr	r2, [r3, #4]
 801856a:	68bb      	ldr	r3, [r7, #8]
 801856c:	3308      	adds	r3, #8
 801856e:	429a      	cmp	r2, r3
 8018570:	d104      	bne.n	801857c <vTaskSwitchContext+0xac>
 8018572:	68bb      	ldr	r3, [r7, #8]
 8018574:	685b      	ldr	r3, [r3, #4]
 8018576:	685a      	ldr	r2, [r3, #4]
 8018578:	68bb      	ldr	r3, [r7, #8]
 801857a:	605a      	str	r2, [r3, #4]
 801857c:	68bb      	ldr	r3, [r7, #8]
 801857e:	685b      	ldr	r3, [r3, #4]
 8018580:	68db      	ldr	r3, [r3, #12]
 8018582:	4a06      	ldr	r2, [pc, #24]	; (801859c <vTaskSwitchContext+0xcc>)
 8018584:	6013      	str	r3, [r2, #0]
 8018586:	4a06      	ldr	r2, [pc, #24]	; (80185a0 <vTaskSwitchContext+0xd0>)
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	6013      	str	r3, [r2, #0]
}
 801858c:	bf00      	nop
 801858e:	3710      	adds	r7, #16
 8018590:	46bd      	mov	sp, r7
 8018592:	bd80      	pop	{r7, pc}
 8018594:	24002bb4 	.word	0x24002bb4
 8018598:	24002ba0 	.word	0x24002ba0
 801859c:	240026b8 	.word	0x240026b8
 80185a0:	24002b94 	.word	0x24002b94
 80185a4:	240026bc 	.word	0x240026bc

080185a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80185a8:	b580      	push	{r7, lr}
 80185aa:	b084      	sub	sp, #16
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
 80185b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d10a      	bne.n	80185ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80185b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185bc:	f383 8811 	msr	BASEPRI, r3
 80185c0:	f3bf 8f6f 	isb	sy
 80185c4:	f3bf 8f4f 	dsb	sy
 80185c8:	60fb      	str	r3, [r7, #12]
}
 80185ca:	bf00      	nop
 80185cc:	e7fe      	b.n	80185cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80185ce:	4b07      	ldr	r3, [pc, #28]	; (80185ec <vTaskPlaceOnEventList+0x44>)
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	3318      	adds	r3, #24
 80185d4:	4619      	mov	r1, r3
 80185d6:	6878      	ldr	r0, [r7, #4]
 80185d8:	f7fe fe71 	bl	80172be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80185dc:	2101      	movs	r1, #1
 80185de:	6838      	ldr	r0, [r7, #0]
 80185e0:	f000 fb32 	bl	8018c48 <prvAddCurrentTaskToDelayedList>
}
 80185e4:	bf00      	nop
 80185e6:	3710      	adds	r7, #16
 80185e8:	46bd      	mov	sp, r7
 80185ea:	bd80      	pop	{r7, pc}
 80185ec:	240026b8 	.word	0x240026b8

080185f0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b086      	sub	sp, #24
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	60f8      	str	r0, [r7, #12]
 80185f8:	60b9      	str	r1, [r7, #8]
 80185fa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d10a      	bne.n	8018618 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8018602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018606:	f383 8811 	msr	BASEPRI, r3
 801860a:	f3bf 8f6f 	isb	sy
 801860e:	f3bf 8f4f 	dsb	sy
 8018612:	617b      	str	r3, [r7, #20]
}
 8018614:	bf00      	nop
 8018616:	e7fe      	b.n	8018616 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8018618:	4b11      	ldr	r3, [pc, #68]	; (8018660 <vTaskPlaceOnUnorderedEventList+0x70>)
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d10a      	bne.n	8018636 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8018620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018624:	f383 8811 	msr	BASEPRI, r3
 8018628:	f3bf 8f6f 	isb	sy
 801862c:	f3bf 8f4f 	dsb	sy
 8018630:	613b      	str	r3, [r7, #16]
}
 8018632:	bf00      	nop
 8018634:	e7fe      	b.n	8018634 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018636:	4b0b      	ldr	r3, [pc, #44]	; (8018664 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	68ba      	ldr	r2, [r7, #8]
 801863c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8018640:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018642:	4b08      	ldr	r3, [pc, #32]	; (8018664 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	3318      	adds	r3, #24
 8018648:	4619      	mov	r1, r3
 801864a:	68f8      	ldr	r0, [r7, #12]
 801864c:	f7fe fe13 	bl	8017276 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018650:	2101      	movs	r1, #1
 8018652:	6878      	ldr	r0, [r7, #4]
 8018654:	f000 faf8 	bl	8018c48 <prvAddCurrentTaskToDelayedList>
}
 8018658:	bf00      	nop
 801865a:	3718      	adds	r7, #24
 801865c:	46bd      	mov	sp, r7
 801865e:	bd80      	pop	{r7, pc}
 8018660:	24002bb4 	.word	0x24002bb4
 8018664:	240026b8 	.word	0x240026b8

08018668 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018668:	b580      	push	{r7, lr}
 801866a:	b086      	sub	sp, #24
 801866c:	af00      	add	r7, sp, #0
 801866e:	60f8      	str	r0, [r7, #12]
 8018670:	60b9      	str	r1, [r7, #8]
 8018672:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d10a      	bne.n	8018690 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801867e:	f383 8811 	msr	BASEPRI, r3
 8018682:	f3bf 8f6f 	isb	sy
 8018686:	f3bf 8f4f 	dsb	sy
 801868a:	617b      	str	r3, [r7, #20]
}
 801868c:	bf00      	nop
 801868e:	e7fe      	b.n	801868e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018690:	4b0a      	ldr	r3, [pc, #40]	; (80186bc <vTaskPlaceOnEventListRestricted+0x54>)
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	3318      	adds	r3, #24
 8018696:	4619      	mov	r1, r3
 8018698:	68f8      	ldr	r0, [r7, #12]
 801869a:	f7fe fdec 	bl	8017276 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d002      	beq.n	80186aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80186a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80186a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80186aa:	6879      	ldr	r1, [r7, #4]
 80186ac:	68b8      	ldr	r0, [r7, #8]
 80186ae:	f000 facb 	bl	8018c48 <prvAddCurrentTaskToDelayedList>
	}
 80186b2:	bf00      	nop
 80186b4:	3718      	adds	r7, #24
 80186b6:	46bd      	mov	sp, r7
 80186b8:	bd80      	pop	{r7, pc}
 80186ba:	bf00      	nop
 80186bc:	240026b8 	.word	0x240026b8

080186c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b086      	sub	sp, #24
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	68db      	ldr	r3, [r3, #12]
 80186cc:	68db      	ldr	r3, [r3, #12]
 80186ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80186d0:	693b      	ldr	r3, [r7, #16]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d10a      	bne.n	80186ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80186d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186da:	f383 8811 	msr	BASEPRI, r3
 80186de:	f3bf 8f6f 	isb	sy
 80186e2:	f3bf 8f4f 	dsb	sy
 80186e6:	60fb      	str	r3, [r7, #12]
}
 80186e8:	bf00      	nop
 80186ea:	e7fe      	b.n	80186ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80186ec:	693b      	ldr	r3, [r7, #16]
 80186ee:	3318      	adds	r3, #24
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7fe fe1d 	bl	8017330 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80186f6:	4b1e      	ldr	r3, [pc, #120]	; (8018770 <xTaskRemoveFromEventList+0xb0>)
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d11d      	bne.n	801873a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80186fe:	693b      	ldr	r3, [r7, #16]
 8018700:	3304      	adds	r3, #4
 8018702:	4618      	mov	r0, r3
 8018704:	f7fe fe14 	bl	8017330 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018708:	693b      	ldr	r3, [r7, #16]
 801870a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801870c:	4b19      	ldr	r3, [pc, #100]	; (8018774 <xTaskRemoveFromEventList+0xb4>)
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	429a      	cmp	r2, r3
 8018712:	d903      	bls.n	801871c <xTaskRemoveFromEventList+0x5c>
 8018714:	693b      	ldr	r3, [r7, #16]
 8018716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018718:	4a16      	ldr	r2, [pc, #88]	; (8018774 <xTaskRemoveFromEventList+0xb4>)
 801871a:	6013      	str	r3, [r2, #0]
 801871c:	693b      	ldr	r3, [r7, #16]
 801871e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018720:	4613      	mov	r3, r2
 8018722:	009b      	lsls	r3, r3, #2
 8018724:	4413      	add	r3, r2
 8018726:	009b      	lsls	r3, r3, #2
 8018728:	4a13      	ldr	r2, [pc, #76]	; (8018778 <xTaskRemoveFromEventList+0xb8>)
 801872a:	441a      	add	r2, r3
 801872c:	693b      	ldr	r3, [r7, #16]
 801872e:	3304      	adds	r3, #4
 8018730:	4619      	mov	r1, r3
 8018732:	4610      	mov	r0, r2
 8018734:	f7fe fd9f 	bl	8017276 <vListInsertEnd>
 8018738:	e005      	b.n	8018746 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801873a:	693b      	ldr	r3, [r7, #16]
 801873c:	3318      	adds	r3, #24
 801873e:	4619      	mov	r1, r3
 8018740:	480e      	ldr	r0, [pc, #56]	; (801877c <xTaskRemoveFromEventList+0xbc>)
 8018742:	f7fe fd98 	bl	8017276 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018746:	693b      	ldr	r3, [r7, #16]
 8018748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801874a:	4b0d      	ldr	r3, [pc, #52]	; (8018780 <xTaskRemoveFromEventList+0xc0>)
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018750:	429a      	cmp	r2, r3
 8018752:	d905      	bls.n	8018760 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018754:	2301      	movs	r3, #1
 8018756:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018758:	4b0a      	ldr	r3, [pc, #40]	; (8018784 <xTaskRemoveFromEventList+0xc4>)
 801875a:	2201      	movs	r2, #1
 801875c:	601a      	str	r2, [r3, #0]
 801875e:	e001      	b.n	8018764 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018760:	2300      	movs	r3, #0
 8018762:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018764:	697b      	ldr	r3, [r7, #20]
}
 8018766:	4618      	mov	r0, r3
 8018768:	3718      	adds	r7, #24
 801876a:	46bd      	mov	sp, r7
 801876c:	bd80      	pop	{r7, pc}
 801876e:	bf00      	nop
 8018770:	24002bb4 	.word	0x24002bb4
 8018774:	24002b94 	.word	0x24002b94
 8018778:	240026bc 	.word	0x240026bc
 801877c:	24002b4c 	.word	0x24002b4c
 8018780:	240026b8 	.word	0x240026b8
 8018784:	24002ba0 	.word	0x24002ba0

08018788 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018788:	b580      	push	{r7, lr}
 801878a:	b086      	sub	sp, #24
 801878c:	af00      	add	r7, sp, #0
 801878e:	6078      	str	r0, [r7, #4]
 8018790:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8018792:	4b29      	ldr	r3, [pc, #164]	; (8018838 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d10a      	bne.n	80187b0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801879e:	f383 8811 	msr	BASEPRI, r3
 80187a2:	f3bf 8f6f 	isb	sy
 80187a6:	f3bf 8f4f 	dsb	sy
 80187aa:	613b      	str	r3, [r7, #16]
}
 80187ac:	bf00      	nop
 80187ae:	e7fe      	b.n	80187ae <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80187b0:	683b      	ldr	r3, [r7, #0]
 80187b2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	68db      	ldr	r3, [r3, #12]
 80187be:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80187c0:	697b      	ldr	r3, [r7, #20]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d10a      	bne.n	80187dc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80187c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187ca:	f383 8811 	msr	BASEPRI, r3
 80187ce:	f3bf 8f6f 	isb	sy
 80187d2:	f3bf 8f4f 	dsb	sy
 80187d6:	60fb      	str	r3, [r7, #12]
}
 80187d8:	bf00      	nop
 80187da:	e7fe      	b.n	80187da <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80187dc:	6878      	ldr	r0, [r7, #4]
 80187de:	f7fe fda7 	bl	8017330 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80187e2:	697b      	ldr	r3, [r7, #20]
 80187e4:	3304      	adds	r3, #4
 80187e6:	4618      	mov	r0, r3
 80187e8:	f7fe fda2 	bl	8017330 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80187ec:	697b      	ldr	r3, [r7, #20]
 80187ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187f0:	4b12      	ldr	r3, [pc, #72]	; (801883c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	429a      	cmp	r2, r3
 80187f6:	d903      	bls.n	8018800 <vTaskRemoveFromUnorderedEventList+0x78>
 80187f8:	697b      	ldr	r3, [r7, #20]
 80187fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187fc:	4a0f      	ldr	r2, [pc, #60]	; (801883c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80187fe:	6013      	str	r3, [r2, #0]
 8018800:	697b      	ldr	r3, [r7, #20]
 8018802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018804:	4613      	mov	r3, r2
 8018806:	009b      	lsls	r3, r3, #2
 8018808:	4413      	add	r3, r2
 801880a:	009b      	lsls	r3, r3, #2
 801880c:	4a0c      	ldr	r2, [pc, #48]	; (8018840 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801880e:	441a      	add	r2, r3
 8018810:	697b      	ldr	r3, [r7, #20]
 8018812:	3304      	adds	r3, #4
 8018814:	4619      	mov	r1, r3
 8018816:	4610      	mov	r0, r2
 8018818:	f7fe fd2d 	bl	8017276 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801881c:	697b      	ldr	r3, [r7, #20]
 801881e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018820:	4b08      	ldr	r3, [pc, #32]	; (8018844 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018826:	429a      	cmp	r2, r3
 8018828:	d902      	bls.n	8018830 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801882a:	4b07      	ldr	r3, [pc, #28]	; (8018848 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801882c:	2201      	movs	r2, #1
 801882e:	601a      	str	r2, [r3, #0]
	}
}
 8018830:	bf00      	nop
 8018832:	3718      	adds	r7, #24
 8018834:	46bd      	mov	sp, r7
 8018836:	bd80      	pop	{r7, pc}
 8018838:	24002bb4 	.word	0x24002bb4
 801883c:	24002b94 	.word	0x24002b94
 8018840:	240026bc 	.word	0x240026bc
 8018844:	240026b8 	.word	0x240026b8
 8018848:	24002ba0 	.word	0x24002ba0

0801884c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801884c:	b480      	push	{r7}
 801884e:	b083      	sub	sp, #12
 8018850:	af00      	add	r7, sp, #0
 8018852:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018854:	4b06      	ldr	r3, [pc, #24]	; (8018870 <vTaskInternalSetTimeOutState+0x24>)
 8018856:	681a      	ldr	r2, [r3, #0]
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801885c:	4b05      	ldr	r3, [pc, #20]	; (8018874 <vTaskInternalSetTimeOutState+0x28>)
 801885e:	681a      	ldr	r2, [r3, #0]
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	605a      	str	r2, [r3, #4]
}
 8018864:	bf00      	nop
 8018866:	370c      	adds	r7, #12
 8018868:	46bd      	mov	sp, r7
 801886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801886e:	4770      	bx	lr
 8018870:	24002ba4 	.word	0x24002ba4
 8018874:	24002b90 	.word	0x24002b90

08018878 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b088      	sub	sp, #32
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
 8018880:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d10a      	bne.n	801889e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801888c:	f383 8811 	msr	BASEPRI, r3
 8018890:	f3bf 8f6f 	isb	sy
 8018894:	f3bf 8f4f 	dsb	sy
 8018898:	613b      	str	r3, [r7, #16]
}
 801889a:	bf00      	nop
 801889c:	e7fe      	b.n	801889c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801889e:	683b      	ldr	r3, [r7, #0]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d10a      	bne.n	80188ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80188a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188a8:	f383 8811 	msr	BASEPRI, r3
 80188ac:	f3bf 8f6f 	isb	sy
 80188b0:	f3bf 8f4f 	dsb	sy
 80188b4:	60fb      	str	r3, [r7, #12]
}
 80188b6:	bf00      	nop
 80188b8:	e7fe      	b.n	80188b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80188ba:	f000 feb3 	bl	8019624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80188be:	4b1d      	ldr	r3, [pc, #116]	; (8018934 <xTaskCheckForTimeOut+0xbc>)
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	685b      	ldr	r3, [r3, #4]
 80188c8:	69ba      	ldr	r2, [r7, #24]
 80188ca:	1ad3      	subs	r3, r2, r3
 80188cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80188ce:	683b      	ldr	r3, [r7, #0]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80188d6:	d102      	bne.n	80188de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80188d8:	2300      	movs	r3, #0
 80188da:	61fb      	str	r3, [r7, #28]
 80188dc:	e023      	b.n	8018926 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	681a      	ldr	r2, [r3, #0]
 80188e2:	4b15      	ldr	r3, [pc, #84]	; (8018938 <xTaskCheckForTimeOut+0xc0>)
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	429a      	cmp	r2, r3
 80188e8:	d007      	beq.n	80188fa <xTaskCheckForTimeOut+0x82>
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	685b      	ldr	r3, [r3, #4]
 80188ee:	69ba      	ldr	r2, [r7, #24]
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d302      	bcc.n	80188fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80188f4:	2301      	movs	r3, #1
 80188f6:	61fb      	str	r3, [r7, #28]
 80188f8:	e015      	b.n	8018926 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	697a      	ldr	r2, [r7, #20]
 8018900:	429a      	cmp	r2, r3
 8018902:	d20b      	bcs.n	801891c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018904:	683b      	ldr	r3, [r7, #0]
 8018906:	681a      	ldr	r2, [r3, #0]
 8018908:	697b      	ldr	r3, [r7, #20]
 801890a:	1ad2      	subs	r2, r2, r3
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018910:	6878      	ldr	r0, [r7, #4]
 8018912:	f7ff ff9b 	bl	801884c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018916:	2300      	movs	r3, #0
 8018918:	61fb      	str	r3, [r7, #28]
 801891a:	e004      	b.n	8018926 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801891c:	683b      	ldr	r3, [r7, #0]
 801891e:	2200      	movs	r2, #0
 8018920:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018922:	2301      	movs	r3, #1
 8018924:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018926:	f000 fead 	bl	8019684 <vPortExitCritical>

	return xReturn;
 801892a:	69fb      	ldr	r3, [r7, #28]
}
 801892c:	4618      	mov	r0, r3
 801892e:	3720      	adds	r7, #32
 8018930:	46bd      	mov	sp, r7
 8018932:	bd80      	pop	{r7, pc}
 8018934:	24002b90 	.word	0x24002b90
 8018938:	24002ba4 	.word	0x24002ba4

0801893c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801893c:	b480      	push	{r7}
 801893e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018940:	4b03      	ldr	r3, [pc, #12]	; (8018950 <vTaskMissedYield+0x14>)
 8018942:	2201      	movs	r2, #1
 8018944:	601a      	str	r2, [r3, #0]
}
 8018946:	bf00      	nop
 8018948:	46bd      	mov	sp, r7
 801894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801894e:	4770      	bx	lr
 8018950:	24002ba0 	.word	0x24002ba0

08018954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b082      	sub	sp, #8
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801895c:	f000 f852 	bl	8018a04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018960:	4b06      	ldr	r3, [pc, #24]	; (801897c <prvIdleTask+0x28>)
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	2b01      	cmp	r3, #1
 8018966:	d9f9      	bls.n	801895c <prvIdleTask+0x8>
			{
				taskYIELD();
 8018968:	4b05      	ldr	r3, [pc, #20]	; (8018980 <prvIdleTask+0x2c>)
 801896a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801896e:	601a      	str	r2, [r3, #0]
 8018970:	f3bf 8f4f 	dsb	sy
 8018974:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018978:	e7f0      	b.n	801895c <prvIdleTask+0x8>
 801897a:	bf00      	nop
 801897c:	240026bc 	.word	0x240026bc
 8018980:	e000ed04 	.word	0xe000ed04

08018984 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b082      	sub	sp, #8
 8018988:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801898a:	2300      	movs	r3, #0
 801898c:	607b      	str	r3, [r7, #4]
 801898e:	e00c      	b.n	80189aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018990:	687a      	ldr	r2, [r7, #4]
 8018992:	4613      	mov	r3, r2
 8018994:	009b      	lsls	r3, r3, #2
 8018996:	4413      	add	r3, r2
 8018998:	009b      	lsls	r3, r3, #2
 801899a:	4a12      	ldr	r2, [pc, #72]	; (80189e4 <prvInitialiseTaskLists+0x60>)
 801899c:	4413      	add	r3, r2
 801899e:	4618      	mov	r0, r3
 80189a0:	f7fe fc3c 	bl	801721c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	3301      	adds	r3, #1
 80189a8:	607b      	str	r3, [r7, #4]
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	2b37      	cmp	r3, #55	; 0x37
 80189ae:	d9ef      	bls.n	8018990 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80189b0:	480d      	ldr	r0, [pc, #52]	; (80189e8 <prvInitialiseTaskLists+0x64>)
 80189b2:	f7fe fc33 	bl	801721c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80189b6:	480d      	ldr	r0, [pc, #52]	; (80189ec <prvInitialiseTaskLists+0x68>)
 80189b8:	f7fe fc30 	bl	801721c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80189bc:	480c      	ldr	r0, [pc, #48]	; (80189f0 <prvInitialiseTaskLists+0x6c>)
 80189be:	f7fe fc2d 	bl	801721c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80189c2:	480c      	ldr	r0, [pc, #48]	; (80189f4 <prvInitialiseTaskLists+0x70>)
 80189c4:	f7fe fc2a 	bl	801721c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80189c8:	480b      	ldr	r0, [pc, #44]	; (80189f8 <prvInitialiseTaskLists+0x74>)
 80189ca:	f7fe fc27 	bl	801721c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80189ce:	4b0b      	ldr	r3, [pc, #44]	; (80189fc <prvInitialiseTaskLists+0x78>)
 80189d0:	4a05      	ldr	r2, [pc, #20]	; (80189e8 <prvInitialiseTaskLists+0x64>)
 80189d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80189d4:	4b0a      	ldr	r3, [pc, #40]	; (8018a00 <prvInitialiseTaskLists+0x7c>)
 80189d6:	4a05      	ldr	r2, [pc, #20]	; (80189ec <prvInitialiseTaskLists+0x68>)
 80189d8:	601a      	str	r2, [r3, #0]
}
 80189da:	bf00      	nop
 80189dc:	3708      	adds	r7, #8
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd80      	pop	{r7, pc}
 80189e2:	bf00      	nop
 80189e4:	240026bc 	.word	0x240026bc
 80189e8:	24002b1c 	.word	0x24002b1c
 80189ec:	24002b30 	.word	0x24002b30
 80189f0:	24002b4c 	.word	0x24002b4c
 80189f4:	24002b60 	.word	0x24002b60
 80189f8:	24002b78 	.word	0x24002b78
 80189fc:	24002b44 	.word	0x24002b44
 8018a00:	24002b48 	.word	0x24002b48

08018a04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b082      	sub	sp, #8
 8018a08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a0a:	e019      	b.n	8018a40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018a0c:	f000 fe0a 	bl	8019624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a10:	4b10      	ldr	r3, [pc, #64]	; (8018a54 <prvCheckTasksWaitingTermination+0x50>)
 8018a12:	68db      	ldr	r3, [r3, #12]
 8018a14:	68db      	ldr	r3, [r3, #12]
 8018a16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	3304      	adds	r3, #4
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f7fe fc87 	bl	8017330 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018a22:	4b0d      	ldr	r3, [pc, #52]	; (8018a58 <prvCheckTasksWaitingTermination+0x54>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	3b01      	subs	r3, #1
 8018a28:	4a0b      	ldr	r2, [pc, #44]	; (8018a58 <prvCheckTasksWaitingTermination+0x54>)
 8018a2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018a2c:	4b0b      	ldr	r3, [pc, #44]	; (8018a5c <prvCheckTasksWaitingTermination+0x58>)
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	3b01      	subs	r3, #1
 8018a32:	4a0a      	ldr	r2, [pc, #40]	; (8018a5c <prvCheckTasksWaitingTermination+0x58>)
 8018a34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018a36:	f000 fe25 	bl	8019684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018a3a:	6878      	ldr	r0, [r7, #4]
 8018a3c:	f000 f810 	bl	8018a60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a40:	4b06      	ldr	r3, [pc, #24]	; (8018a5c <prvCheckTasksWaitingTermination+0x58>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d1e1      	bne.n	8018a0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018a48:	bf00      	nop
 8018a4a:	bf00      	nop
 8018a4c:	3708      	adds	r7, #8
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	bd80      	pop	{r7, pc}
 8018a52:	bf00      	nop
 8018a54:	24002b60 	.word	0x24002b60
 8018a58:	24002b8c 	.word	0x24002b8c
 8018a5c:	24002b74 	.word	0x24002b74

08018a60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b084      	sub	sp, #16
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d108      	bne.n	8018a84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a76:	4618      	mov	r0, r3
 8018a78:	f000 ffc2 	bl	8019a00 <vPortFree>
				vPortFree( pxTCB );
 8018a7c:	6878      	ldr	r0, [r7, #4]
 8018a7e:	f000 ffbf 	bl	8019a00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018a82:	e018      	b.n	8018ab6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018a8a:	2b01      	cmp	r3, #1
 8018a8c:	d103      	bne.n	8018a96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018a8e:	6878      	ldr	r0, [r7, #4]
 8018a90:	f000 ffb6 	bl	8019a00 <vPortFree>
	}
 8018a94:	e00f      	b.n	8018ab6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018a9c:	2b02      	cmp	r3, #2
 8018a9e:	d00a      	beq.n	8018ab6 <prvDeleteTCB+0x56>
	__asm volatile
 8018aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aa4:	f383 8811 	msr	BASEPRI, r3
 8018aa8:	f3bf 8f6f 	isb	sy
 8018aac:	f3bf 8f4f 	dsb	sy
 8018ab0:	60fb      	str	r3, [r7, #12]
}
 8018ab2:	bf00      	nop
 8018ab4:	e7fe      	b.n	8018ab4 <prvDeleteTCB+0x54>
	}
 8018ab6:	bf00      	nop
 8018ab8:	3710      	adds	r7, #16
 8018aba:	46bd      	mov	sp, r7
 8018abc:	bd80      	pop	{r7, pc}
	...

08018ac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018ac0:	b480      	push	{r7}
 8018ac2:	b083      	sub	sp, #12
 8018ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018ac6:	4b0c      	ldr	r3, [pc, #48]	; (8018af8 <prvResetNextTaskUnblockTime+0x38>)
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d104      	bne.n	8018ada <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018ad0:	4b0a      	ldr	r3, [pc, #40]	; (8018afc <prvResetNextTaskUnblockTime+0x3c>)
 8018ad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018ad6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018ad8:	e008      	b.n	8018aec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ada:	4b07      	ldr	r3, [pc, #28]	; (8018af8 <prvResetNextTaskUnblockTime+0x38>)
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	68db      	ldr	r3, [r3, #12]
 8018ae0:	68db      	ldr	r3, [r3, #12]
 8018ae2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	685b      	ldr	r3, [r3, #4]
 8018ae8:	4a04      	ldr	r2, [pc, #16]	; (8018afc <prvResetNextTaskUnblockTime+0x3c>)
 8018aea:	6013      	str	r3, [r2, #0]
}
 8018aec:	bf00      	nop
 8018aee:	370c      	adds	r7, #12
 8018af0:	46bd      	mov	sp, r7
 8018af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af6:	4770      	bx	lr
 8018af8:	24002b44 	.word	0x24002b44
 8018afc:	24002bac 	.word	0x24002bac

08018b00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018b00:	b480      	push	{r7}
 8018b02:	b083      	sub	sp, #12
 8018b04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018b06:	4b0b      	ldr	r3, [pc, #44]	; (8018b34 <xTaskGetSchedulerState+0x34>)
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d102      	bne.n	8018b14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018b0e:	2301      	movs	r3, #1
 8018b10:	607b      	str	r3, [r7, #4]
 8018b12:	e008      	b.n	8018b26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b14:	4b08      	ldr	r3, [pc, #32]	; (8018b38 <xTaskGetSchedulerState+0x38>)
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d102      	bne.n	8018b22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018b1c:	2302      	movs	r3, #2
 8018b1e:	607b      	str	r3, [r7, #4]
 8018b20:	e001      	b.n	8018b26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018b22:	2300      	movs	r3, #0
 8018b24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018b26:	687b      	ldr	r3, [r7, #4]
	}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	370c      	adds	r7, #12
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b32:	4770      	bx	lr
 8018b34:	24002b98 	.word	0x24002b98
 8018b38:	24002bb4 	.word	0x24002bb4

08018b3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b086      	sub	sp, #24
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d056      	beq.n	8018c00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018b52:	4b2e      	ldr	r3, [pc, #184]	; (8018c0c <xTaskPriorityDisinherit+0xd0>)
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	693a      	ldr	r2, [r7, #16]
 8018b58:	429a      	cmp	r2, r3
 8018b5a:	d00a      	beq.n	8018b72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b60:	f383 8811 	msr	BASEPRI, r3
 8018b64:	f3bf 8f6f 	isb	sy
 8018b68:	f3bf 8f4f 	dsb	sy
 8018b6c:	60fb      	str	r3, [r7, #12]
}
 8018b6e:	bf00      	nop
 8018b70:	e7fe      	b.n	8018b70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018b72:	693b      	ldr	r3, [r7, #16]
 8018b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d10a      	bne.n	8018b90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b7e:	f383 8811 	msr	BASEPRI, r3
 8018b82:	f3bf 8f6f 	isb	sy
 8018b86:	f3bf 8f4f 	dsb	sy
 8018b8a:	60bb      	str	r3, [r7, #8]
}
 8018b8c:	bf00      	nop
 8018b8e:	e7fe      	b.n	8018b8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018b90:	693b      	ldr	r3, [r7, #16]
 8018b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b94:	1e5a      	subs	r2, r3, #1
 8018b96:	693b      	ldr	r3, [r7, #16]
 8018b98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018b9a:	693b      	ldr	r3, [r7, #16]
 8018b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b9e:	693b      	ldr	r3, [r7, #16]
 8018ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ba2:	429a      	cmp	r2, r3
 8018ba4:	d02c      	beq.n	8018c00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018ba6:	693b      	ldr	r3, [r7, #16]
 8018ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d128      	bne.n	8018c00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018bae:	693b      	ldr	r3, [r7, #16]
 8018bb0:	3304      	adds	r3, #4
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	f7fe fbbc 	bl	8017330 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018bb8:	693b      	ldr	r3, [r7, #16]
 8018bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018bbc:	693b      	ldr	r3, [r7, #16]
 8018bbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018bc0:	693b      	ldr	r3, [r7, #16]
 8018bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018bc8:	693b      	ldr	r3, [r7, #16]
 8018bca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018bcc:	693b      	ldr	r3, [r7, #16]
 8018bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bd0:	4b0f      	ldr	r3, [pc, #60]	; (8018c10 <xTaskPriorityDisinherit+0xd4>)
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	429a      	cmp	r2, r3
 8018bd6:	d903      	bls.n	8018be0 <xTaskPriorityDisinherit+0xa4>
 8018bd8:	693b      	ldr	r3, [r7, #16]
 8018bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bdc:	4a0c      	ldr	r2, [pc, #48]	; (8018c10 <xTaskPriorityDisinherit+0xd4>)
 8018bde:	6013      	str	r3, [r2, #0]
 8018be0:	693b      	ldr	r3, [r7, #16]
 8018be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018be4:	4613      	mov	r3, r2
 8018be6:	009b      	lsls	r3, r3, #2
 8018be8:	4413      	add	r3, r2
 8018bea:	009b      	lsls	r3, r3, #2
 8018bec:	4a09      	ldr	r2, [pc, #36]	; (8018c14 <xTaskPriorityDisinherit+0xd8>)
 8018bee:	441a      	add	r2, r3
 8018bf0:	693b      	ldr	r3, [r7, #16]
 8018bf2:	3304      	adds	r3, #4
 8018bf4:	4619      	mov	r1, r3
 8018bf6:	4610      	mov	r0, r2
 8018bf8:	f7fe fb3d 	bl	8017276 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018bfc:	2301      	movs	r3, #1
 8018bfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c00:	697b      	ldr	r3, [r7, #20]
	}
 8018c02:	4618      	mov	r0, r3
 8018c04:	3718      	adds	r7, #24
 8018c06:	46bd      	mov	sp, r7
 8018c08:	bd80      	pop	{r7, pc}
 8018c0a:	bf00      	nop
 8018c0c:	240026b8 	.word	0x240026b8
 8018c10:	24002b94 	.word	0x24002b94
 8018c14:	240026bc 	.word	0x240026bc

08018c18 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018c18:	b480      	push	{r7}
 8018c1a:	b083      	sub	sp, #12
 8018c1c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8018c1e:	4b09      	ldr	r3, [pc, #36]	; (8018c44 <uxTaskResetEventItemValue+0x2c>)
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	699b      	ldr	r3, [r3, #24]
 8018c24:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c26:	4b07      	ldr	r3, [pc, #28]	; (8018c44 <uxTaskResetEventItemValue+0x2c>)
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c2c:	4b05      	ldr	r3, [pc, #20]	; (8018c44 <uxTaskResetEventItemValue+0x2c>)
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018c34:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8018c36:	687b      	ldr	r3, [r7, #4]
}
 8018c38:	4618      	mov	r0, r3
 8018c3a:	370c      	adds	r7, #12
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c42:	4770      	bx	lr
 8018c44:	240026b8 	.word	0x240026b8

08018c48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b084      	sub	sp, #16
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
 8018c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018c52:	4b21      	ldr	r3, [pc, #132]	; (8018cd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018c58:	4b20      	ldr	r3, [pc, #128]	; (8018cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	3304      	adds	r3, #4
 8018c5e:	4618      	mov	r0, r3
 8018c60:	f7fe fb66 	bl	8017330 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c6a:	d10a      	bne.n	8018c82 <prvAddCurrentTaskToDelayedList+0x3a>
 8018c6c:	683b      	ldr	r3, [r7, #0]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d007      	beq.n	8018c82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c72:	4b1a      	ldr	r3, [pc, #104]	; (8018cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	3304      	adds	r3, #4
 8018c78:	4619      	mov	r1, r3
 8018c7a:	4819      	ldr	r0, [pc, #100]	; (8018ce0 <prvAddCurrentTaskToDelayedList+0x98>)
 8018c7c:	f7fe fafb 	bl	8017276 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018c80:	e026      	b.n	8018cd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018c82:	68fa      	ldr	r2, [r7, #12]
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	4413      	add	r3, r2
 8018c88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018c8a:	4b14      	ldr	r3, [pc, #80]	; (8018cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	68ba      	ldr	r2, [r7, #8]
 8018c90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018c92:	68ba      	ldr	r2, [r7, #8]
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	429a      	cmp	r2, r3
 8018c98:	d209      	bcs.n	8018cae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c9a:	4b12      	ldr	r3, [pc, #72]	; (8018ce4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018c9c:	681a      	ldr	r2, [r3, #0]
 8018c9e:	4b0f      	ldr	r3, [pc, #60]	; (8018cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	3304      	adds	r3, #4
 8018ca4:	4619      	mov	r1, r3
 8018ca6:	4610      	mov	r0, r2
 8018ca8:	f7fe fb09 	bl	80172be <vListInsert>
}
 8018cac:	e010      	b.n	8018cd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018cae:	4b0e      	ldr	r3, [pc, #56]	; (8018ce8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018cb0:	681a      	ldr	r2, [r3, #0]
 8018cb2:	4b0a      	ldr	r3, [pc, #40]	; (8018cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	3304      	adds	r3, #4
 8018cb8:	4619      	mov	r1, r3
 8018cba:	4610      	mov	r0, r2
 8018cbc:	f7fe faff 	bl	80172be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018cc0:	4b0a      	ldr	r3, [pc, #40]	; (8018cec <prvAddCurrentTaskToDelayedList+0xa4>)
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	68ba      	ldr	r2, [r7, #8]
 8018cc6:	429a      	cmp	r2, r3
 8018cc8:	d202      	bcs.n	8018cd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018cca:	4a08      	ldr	r2, [pc, #32]	; (8018cec <prvAddCurrentTaskToDelayedList+0xa4>)
 8018ccc:	68bb      	ldr	r3, [r7, #8]
 8018cce:	6013      	str	r3, [r2, #0]
}
 8018cd0:	bf00      	nop
 8018cd2:	3710      	adds	r7, #16
 8018cd4:	46bd      	mov	sp, r7
 8018cd6:	bd80      	pop	{r7, pc}
 8018cd8:	24002b90 	.word	0x24002b90
 8018cdc:	240026b8 	.word	0x240026b8
 8018ce0:	24002b78 	.word	0x24002b78
 8018ce4:	24002b48 	.word	0x24002b48
 8018ce8:	24002b44 	.word	0x24002b44
 8018cec:	24002bac 	.word	0x24002bac

08018cf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b08a      	sub	sp, #40	; 0x28
 8018cf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018cfa:	f000 fb07 	bl	801930c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018cfe:	4b1c      	ldr	r3, [pc, #112]	; (8018d70 <xTimerCreateTimerTask+0x80>)
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d021      	beq.n	8018d4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018d06:	2300      	movs	r3, #0
 8018d08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018d0e:	1d3a      	adds	r2, r7, #4
 8018d10:	f107 0108 	add.w	r1, r7, #8
 8018d14:	f107 030c 	add.w	r3, r7, #12
 8018d18:	4618      	mov	r0, r3
 8018d1a:	f7fd fff9 	bl	8016d10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018d1e:	6879      	ldr	r1, [r7, #4]
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	68fa      	ldr	r2, [r7, #12]
 8018d24:	9202      	str	r2, [sp, #8]
 8018d26:	9301      	str	r3, [sp, #4]
 8018d28:	2302      	movs	r3, #2
 8018d2a:	9300      	str	r3, [sp, #0]
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	460a      	mov	r2, r1
 8018d30:	4910      	ldr	r1, [pc, #64]	; (8018d74 <xTimerCreateTimerTask+0x84>)
 8018d32:	4811      	ldr	r0, [pc, #68]	; (8018d78 <xTimerCreateTimerTask+0x88>)
 8018d34:	f7ff f812 	bl	8017d5c <xTaskCreateStatic>
 8018d38:	4603      	mov	r3, r0
 8018d3a:	4a10      	ldr	r2, [pc, #64]	; (8018d7c <xTimerCreateTimerTask+0x8c>)
 8018d3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018d3e:	4b0f      	ldr	r3, [pc, #60]	; (8018d7c <xTimerCreateTimerTask+0x8c>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d001      	beq.n	8018d4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018d46:	2301      	movs	r3, #1
 8018d48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018d4a:	697b      	ldr	r3, [r7, #20]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d10a      	bne.n	8018d66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d54:	f383 8811 	msr	BASEPRI, r3
 8018d58:	f3bf 8f6f 	isb	sy
 8018d5c:	f3bf 8f4f 	dsb	sy
 8018d60:	613b      	str	r3, [r7, #16]
}
 8018d62:	bf00      	nop
 8018d64:	e7fe      	b.n	8018d64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018d66:	697b      	ldr	r3, [r7, #20]
}
 8018d68:	4618      	mov	r0, r3
 8018d6a:	3718      	adds	r7, #24
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	bd80      	pop	{r7, pc}
 8018d70:	24002be8 	.word	0x24002be8
 8018d74:	0801a928 	.word	0x0801a928
 8018d78:	08018eb5 	.word	0x08018eb5
 8018d7c:	24002bec 	.word	0x24002bec

08018d80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b08a      	sub	sp, #40	; 0x28
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	60f8      	str	r0, [r7, #12]
 8018d88:	60b9      	str	r1, [r7, #8]
 8018d8a:	607a      	str	r2, [r7, #4]
 8018d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018d8e:	2300      	movs	r3, #0
 8018d90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d10a      	bne.n	8018dae <xTimerGenericCommand+0x2e>
	__asm volatile
 8018d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d9c:	f383 8811 	msr	BASEPRI, r3
 8018da0:	f3bf 8f6f 	isb	sy
 8018da4:	f3bf 8f4f 	dsb	sy
 8018da8:	623b      	str	r3, [r7, #32]
}
 8018daa:	bf00      	nop
 8018dac:	e7fe      	b.n	8018dac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018dae:	4b1a      	ldr	r3, [pc, #104]	; (8018e18 <xTimerGenericCommand+0x98>)
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d02a      	beq.n	8018e0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018db6:	68bb      	ldr	r3, [r7, #8]
 8018db8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018dc2:	68bb      	ldr	r3, [r7, #8]
 8018dc4:	2b05      	cmp	r3, #5
 8018dc6:	dc18      	bgt.n	8018dfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018dc8:	f7ff fe9a 	bl	8018b00 <xTaskGetSchedulerState>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	2b02      	cmp	r3, #2
 8018dd0:	d109      	bne.n	8018de6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018dd2:	4b11      	ldr	r3, [pc, #68]	; (8018e18 <xTimerGenericCommand+0x98>)
 8018dd4:	6818      	ldr	r0, [r3, #0]
 8018dd6:	f107 0110 	add.w	r1, r7, #16
 8018dda:	2300      	movs	r3, #0
 8018ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018dde:	f7fe fbd5 	bl	801758c <xQueueGenericSend>
 8018de2:	6278      	str	r0, [r7, #36]	; 0x24
 8018de4:	e012      	b.n	8018e0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018de6:	4b0c      	ldr	r3, [pc, #48]	; (8018e18 <xTimerGenericCommand+0x98>)
 8018de8:	6818      	ldr	r0, [r3, #0]
 8018dea:	f107 0110 	add.w	r1, r7, #16
 8018dee:	2300      	movs	r3, #0
 8018df0:	2200      	movs	r2, #0
 8018df2:	f7fe fbcb 	bl	801758c <xQueueGenericSend>
 8018df6:	6278      	str	r0, [r7, #36]	; 0x24
 8018df8:	e008      	b.n	8018e0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018dfa:	4b07      	ldr	r3, [pc, #28]	; (8018e18 <xTimerGenericCommand+0x98>)
 8018dfc:	6818      	ldr	r0, [r3, #0]
 8018dfe:	f107 0110 	add.w	r1, r7, #16
 8018e02:	2300      	movs	r3, #0
 8018e04:	683a      	ldr	r2, [r7, #0]
 8018e06:	f7fe fcbf 	bl	8017788 <xQueueGenericSendFromISR>
 8018e0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018e0e:	4618      	mov	r0, r3
 8018e10:	3728      	adds	r7, #40	; 0x28
 8018e12:	46bd      	mov	sp, r7
 8018e14:	bd80      	pop	{r7, pc}
 8018e16:	bf00      	nop
 8018e18:	24002be8 	.word	0x24002be8

08018e1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018e1c:	b580      	push	{r7, lr}
 8018e1e:	b088      	sub	sp, #32
 8018e20:	af02      	add	r7, sp, #8
 8018e22:	6078      	str	r0, [r7, #4]
 8018e24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e26:	4b22      	ldr	r3, [pc, #136]	; (8018eb0 <prvProcessExpiredTimer+0x94>)
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	68db      	ldr	r3, [r3, #12]
 8018e2c:	68db      	ldr	r3, [r3, #12]
 8018e2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018e30:	697b      	ldr	r3, [r7, #20]
 8018e32:	3304      	adds	r3, #4
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7fe fa7b 	bl	8017330 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018e3a:	697b      	ldr	r3, [r7, #20]
 8018e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e40:	f003 0304 	and.w	r3, r3, #4
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d022      	beq.n	8018e8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018e48:	697b      	ldr	r3, [r7, #20]
 8018e4a:	699a      	ldr	r2, [r3, #24]
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	18d1      	adds	r1, r2, r3
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	683a      	ldr	r2, [r7, #0]
 8018e54:	6978      	ldr	r0, [r7, #20]
 8018e56:	f000 f8d1 	bl	8018ffc <prvInsertTimerInActiveList>
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d01f      	beq.n	8018ea0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018e60:	2300      	movs	r3, #0
 8018e62:	9300      	str	r3, [sp, #0]
 8018e64:	2300      	movs	r3, #0
 8018e66:	687a      	ldr	r2, [r7, #4]
 8018e68:	2100      	movs	r1, #0
 8018e6a:	6978      	ldr	r0, [r7, #20]
 8018e6c:	f7ff ff88 	bl	8018d80 <xTimerGenericCommand>
 8018e70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018e72:	693b      	ldr	r3, [r7, #16]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d113      	bne.n	8018ea0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e7c:	f383 8811 	msr	BASEPRI, r3
 8018e80:	f3bf 8f6f 	isb	sy
 8018e84:	f3bf 8f4f 	dsb	sy
 8018e88:	60fb      	str	r3, [r7, #12]
}
 8018e8a:	bf00      	nop
 8018e8c:	e7fe      	b.n	8018e8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018e8e:	697b      	ldr	r3, [r7, #20]
 8018e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e94:	f023 0301 	bic.w	r3, r3, #1
 8018e98:	b2da      	uxtb	r2, r3
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018ea0:	697b      	ldr	r3, [r7, #20]
 8018ea2:	6a1b      	ldr	r3, [r3, #32]
 8018ea4:	6978      	ldr	r0, [r7, #20]
 8018ea6:	4798      	blx	r3
}
 8018ea8:	bf00      	nop
 8018eaa:	3718      	adds	r7, #24
 8018eac:	46bd      	mov	sp, r7
 8018eae:	bd80      	pop	{r7, pc}
 8018eb0:	24002be0 	.word	0x24002be0

08018eb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	b084      	sub	sp, #16
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018ebc:	f107 0308 	add.w	r3, r7, #8
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	f000 f857 	bl	8018f74 <prvGetNextExpireTime>
 8018ec6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018ec8:	68bb      	ldr	r3, [r7, #8]
 8018eca:	4619      	mov	r1, r3
 8018ecc:	68f8      	ldr	r0, [r7, #12]
 8018ece:	f000 f803 	bl	8018ed8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018ed2:	f000 f8d5 	bl	8019080 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018ed6:	e7f1      	b.n	8018ebc <prvTimerTask+0x8>

08018ed8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018ed8:	b580      	push	{r7, lr}
 8018eda:	b084      	sub	sp, #16
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	6078      	str	r0, [r7, #4]
 8018ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018ee2:	f7ff f977 	bl	80181d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018ee6:	f107 0308 	add.w	r3, r7, #8
 8018eea:	4618      	mov	r0, r3
 8018eec:	f000 f866 	bl	8018fbc <prvSampleTimeNow>
 8018ef0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018ef2:	68bb      	ldr	r3, [r7, #8]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d130      	bne.n	8018f5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018ef8:	683b      	ldr	r3, [r7, #0]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d10a      	bne.n	8018f14 <prvProcessTimerOrBlockTask+0x3c>
 8018efe:	687a      	ldr	r2, [r7, #4]
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	429a      	cmp	r2, r3
 8018f04:	d806      	bhi.n	8018f14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018f06:	f7ff f973 	bl	80181f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018f0a:	68f9      	ldr	r1, [r7, #12]
 8018f0c:	6878      	ldr	r0, [r7, #4]
 8018f0e:	f7ff ff85 	bl	8018e1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018f12:	e024      	b.n	8018f5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018f14:	683b      	ldr	r3, [r7, #0]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d008      	beq.n	8018f2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018f1a:	4b13      	ldr	r3, [pc, #76]	; (8018f68 <prvProcessTimerOrBlockTask+0x90>)
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d101      	bne.n	8018f28 <prvProcessTimerOrBlockTask+0x50>
 8018f24:	2301      	movs	r3, #1
 8018f26:	e000      	b.n	8018f2a <prvProcessTimerOrBlockTask+0x52>
 8018f28:	2300      	movs	r3, #0
 8018f2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018f2c:	4b0f      	ldr	r3, [pc, #60]	; (8018f6c <prvProcessTimerOrBlockTask+0x94>)
 8018f2e:	6818      	ldr	r0, [r3, #0]
 8018f30:	687a      	ldr	r2, [r7, #4]
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	1ad3      	subs	r3, r2, r3
 8018f36:	683a      	ldr	r2, [r7, #0]
 8018f38:	4619      	mov	r1, r3
 8018f3a:	f7fe fedb 	bl	8017cf4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018f3e:	f7ff f957 	bl	80181f0 <xTaskResumeAll>
 8018f42:	4603      	mov	r3, r0
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d10a      	bne.n	8018f5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018f48:	4b09      	ldr	r3, [pc, #36]	; (8018f70 <prvProcessTimerOrBlockTask+0x98>)
 8018f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f4e:	601a      	str	r2, [r3, #0]
 8018f50:	f3bf 8f4f 	dsb	sy
 8018f54:	f3bf 8f6f 	isb	sy
}
 8018f58:	e001      	b.n	8018f5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018f5a:	f7ff f949 	bl	80181f0 <xTaskResumeAll>
}
 8018f5e:	bf00      	nop
 8018f60:	3710      	adds	r7, #16
 8018f62:	46bd      	mov	sp, r7
 8018f64:	bd80      	pop	{r7, pc}
 8018f66:	bf00      	nop
 8018f68:	24002be4 	.word	0x24002be4
 8018f6c:	24002be8 	.word	0x24002be8
 8018f70:	e000ed04 	.word	0xe000ed04

08018f74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018f74:	b480      	push	{r7}
 8018f76:	b085      	sub	sp, #20
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018f7c:	4b0e      	ldr	r3, [pc, #56]	; (8018fb8 <prvGetNextExpireTime+0x44>)
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d101      	bne.n	8018f8a <prvGetNextExpireTime+0x16>
 8018f86:	2201      	movs	r2, #1
 8018f88:	e000      	b.n	8018f8c <prvGetNextExpireTime+0x18>
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d105      	bne.n	8018fa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018f98:	4b07      	ldr	r3, [pc, #28]	; (8018fb8 <prvGetNextExpireTime+0x44>)
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	68db      	ldr	r3, [r3, #12]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	60fb      	str	r3, [r7, #12]
 8018fa2:	e001      	b.n	8018fa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018fa4:	2300      	movs	r3, #0
 8018fa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018fa8:	68fb      	ldr	r3, [r7, #12]
}
 8018faa:	4618      	mov	r0, r3
 8018fac:	3714      	adds	r7, #20
 8018fae:	46bd      	mov	sp, r7
 8018fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb4:	4770      	bx	lr
 8018fb6:	bf00      	nop
 8018fb8:	24002be0 	.word	0x24002be0

08018fbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b084      	sub	sp, #16
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018fc4:	f7ff f9b2 	bl	801832c <xTaskGetTickCount>
 8018fc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018fca:	4b0b      	ldr	r3, [pc, #44]	; (8018ff8 <prvSampleTimeNow+0x3c>)
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	68fa      	ldr	r2, [r7, #12]
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	d205      	bcs.n	8018fe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018fd4:	f000 f936 	bl	8019244 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	2201      	movs	r2, #1
 8018fdc:	601a      	str	r2, [r3, #0]
 8018fde:	e002      	b.n	8018fe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	2200      	movs	r2, #0
 8018fe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018fe6:	4a04      	ldr	r2, [pc, #16]	; (8018ff8 <prvSampleTimeNow+0x3c>)
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018fec:	68fb      	ldr	r3, [r7, #12]
}
 8018fee:	4618      	mov	r0, r3
 8018ff0:	3710      	adds	r7, #16
 8018ff2:	46bd      	mov	sp, r7
 8018ff4:	bd80      	pop	{r7, pc}
 8018ff6:	bf00      	nop
 8018ff8:	24002bf0 	.word	0x24002bf0

08018ffc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018ffc:	b580      	push	{r7, lr}
 8018ffe:	b086      	sub	sp, #24
 8019000:	af00      	add	r7, sp, #0
 8019002:	60f8      	str	r0, [r7, #12]
 8019004:	60b9      	str	r1, [r7, #8]
 8019006:	607a      	str	r2, [r7, #4]
 8019008:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801900a:	2300      	movs	r3, #0
 801900c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	68ba      	ldr	r2, [r7, #8]
 8019012:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	68fa      	ldr	r2, [r7, #12]
 8019018:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801901a:	68ba      	ldr	r2, [r7, #8]
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	429a      	cmp	r2, r3
 8019020:	d812      	bhi.n	8019048 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019022:	687a      	ldr	r2, [r7, #4]
 8019024:	683b      	ldr	r3, [r7, #0]
 8019026:	1ad2      	subs	r2, r2, r3
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	699b      	ldr	r3, [r3, #24]
 801902c:	429a      	cmp	r2, r3
 801902e:	d302      	bcc.n	8019036 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019030:	2301      	movs	r3, #1
 8019032:	617b      	str	r3, [r7, #20]
 8019034:	e01b      	b.n	801906e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019036:	4b10      	ldr	r3, [pc, #64]	; (8019078 <prvInsertTimerInActiveList+0x7c>)
 8019038:	681a      	ldr	r2, [r3, #0]
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	3304      	adds	r3, #4
 801903e:	4619      	mov	r1, r3
 8019040:	4610      	mov	r0, r2
 8019042:	f7fe f93c 	bl	80172be <vListInsert>
 8019046:	e012      	b.n	801906e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019048:	687a      	ldr	r2, [r7, #4]
 801904a:	683b      	ldr	r3, [r7, #0]
 801904c:	429a      	cmp	r2, r3
 801904e:	d206      	bcs.n	801905e <prvInsertTimerInActiveList+0x62>
 8019050:	68ba      	ldr	r2, [r7, #8]
 8019052:	683b      	ldr	r3, [r7, #0]
 8019054:	429a      	cmp	r2, r3
 8019056:	d302      	bcc.n	801905e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019058:	2301      	movs	r3, #1
 801905a:	617b      	str	r3, [r7, #20]
 801905c:	e007      	b.n	801906e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801905e:	4b07      	ldr	r3, [pc, #28]	; (801907c <prvInsertTimerInActiveList+0x80>)
 8019060:	681a      	ldr	r2, [r3, #0]
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	3304      	adds	r3, #4
 8019066:	4619      	mov	r1, r3
 8019068:	4610      	mov	r0, r2
 801906a:	f7fe f928 	bl	80172be <vListInsert>
		}
	}

	return xProcessTimerNow;
 801906e:	697b      	ldr	r3, [r7, #20]
}
 8019070:	4618      	mov	r0, r3
 8019072:	3718      	adds	r7, #24
 8019074:	46bd      	mov	sp, r7
 8019076:	bd80      	pop	{r7, pc}
 8019078:	24002be4 	.word	0x24002be4
 801907c:	24002be0 	.word	0x24002be0

08019080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019080:	b580      	push	{r7, lr}
 8019082:	b08e      	sub	sp, #56	; 0x38
 8019084:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019086:	e0ca      	b.n	801921e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	2b00      	cmp	r3, #0
 801908c:	da18      	bge.n	80190c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801908e:	1d3b      	adds	r3, r7, #4
 8019090:	3304      	adds	r3, #4
 8019092:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019096:	2b00      	cmp	r3, #0
 8019098:	d10a      	bne.n	80190b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801909e:	f383 8811 	msr	BASEPRI, r3
 80190a2:	f3bf 8f6f 	isb	sy
 80190a6:	f3bf 8f4f 	dsb	sy
 80190aa:	61fb      	str	r3, [r7, #28]
}
 80190ac:	bf00      	nop
 80190ae:	e7fe      	b.n	80190ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80190b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80190b6:	6850      	ldr	r0, [r2, #4]
 80190b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80190ba:	6892      	ldr	r2, [r2, #8]
 80190bc:	4611      	mov	r1, r2
 80190be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	f2c0 80aa 	blt.w	801921c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80190cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190ce:	695b      	ldr	r3, [r3, #20]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d004      	beq.n	80190de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80190d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190d6:	3304      	adds	r3, #4
 80190d8:	4618      	mov	r0, r3
 80190da:	f7fe f929 	bl	8017330 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80190de:	463b      	mov	r3, r7
 80190e0:	4618      	mov	r0, r3
 80190e2:	f7ff ff6b 	bl	8018fbc <prvSampleTimeNow>
 80190e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	2b09      	cmp	r3, #9
 80190ec:	f200 8097 	bhi.w	801921e <prvProcessReceivedCommands+0x19e>
 80190f0:	a201      	add	r2, pc, #4	; (adr r2, 80190f8 <prvProcessReceivedCommands+0x78>)
 80190f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190f6:	bf00      	nop
 80190f8:	08019121 	.word	0x08019121
 80190fc:	08019121 	.word	0x08019121
 8019100:	08019121 	.word	0x08019121
 8019104:	08019195 	.word	0x08019195
 8019108:	080191a9 	.word	0x080191a9
 801910c:	080191f3 	.word	0x080191f3
 8019110:	08019121 	.word	0x08019121
 8019114:	08019121 	.word	0x08019121
 8019118:	08019195 	.word	0x08019195
 801911c:	080191a9 	.word	0x080191a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019126:	f043 0301 	orr.w	r3, r3, #1
 801912a:	b2da      	uxtb	r2, r3
 801912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801912e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019132:	68ba      	ldr	r2, [r7, #8]
 8019134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019136:	699b      	ldr	r3, [r3, #24]
 8019138:	18d1      	adds	r1, r2, r3
 801913a:	68bb      	ldr	r3, [r7, #8]
 801913c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801913e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019140:	f7ff ff5c 	bl	8018ffc <prvInsertTimerInActiveList>
 8019144:	4603      	mov	r3, r0
 8019146:	2b00      	cmp	r3, #0
 8019148:	d069      	beq.n	801921e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801914c:	6a1b      	ldr	r3, [r3, #32]
 801914e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019150:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019158:	f003 0304 	and.w	r3, r3, #4
 801915c:	2b00      	cmp	r3, #0
 801915e:	d05e      	beq.n	801921e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019160:	68ba      	ldr	r2, [r7, #8]
 8019162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019164:	699b      	ldr	r3, [r3, #24]
 8019166:	441a      	add	r2, r3
 8019168:	2300      	movs	r3, #0
 801916a:	9300      	str	r3, [sp, #0]
 801916c:	2300      	movs	r3, #0
 801916e:	2100      	movs	r1, #0
 8019170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019172:	f7ff fe05 	bl	8018d80 <xTimerGenericCommand>
 8019176:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019178:	6a3b      	ldr	r3, [r7, #32]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d14f      	bne.n	801921e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019182:	f383 8811 	msr	BASEPRI, r3
 8019186:	f3bf 8f6f 	isb	sy
 801918a:	f3bf 8f4f 	dsb	sy
 801918e:	61bb      	str	r3, [r7, #24]
}
 8019190:	bf00      	nop
 8019192:	e7fe      	b.n	8019192 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801919a:	f023 0301 	bic.w	r3, r3, #1
 801919e:	b2da      	uxtb	r2, r3
 80191a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80191a6:	e03a      	b.n	801921e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80191a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191ae:	f043 0301 	orr.w	r3, r3, #1
 80191b2:	b2da      	uxtb	r2, r3
 80191b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80191ba:	68ba      	ldr	r2, [r7, #8]
 80191bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80191c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191c2:	699b      	ldr	r3, [r3, #24]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d10a      	bne.n	80191de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80191c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191cc:	f383 8811 	msr	BASEPRI, r3
 80191d0:	f3bf 8f6f 	isb	sy
 80191d4:	f3bf 8f4f 	dsb	sy
 80191d8:	617b      	str	r3, [r7, #20]
}
 80191da:	bf00      	nop
 80191dc:	e7fe      	b.n	80191dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80191de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191e0:	699a      	ldr	r2, [r3, #24]
 80191e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191e4:	18d1      	adds	r1, r2, r3
 80191e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80191ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80191ec:	f7ff ff06 	bl	8018ffc <prvInsertTimerInActiveList>
					break;
 80191f0:	e015      	b.n	801921e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80191f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191f8:	f003 0302 	and.w	r3, r3, #2
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d103      	bne.n	8019208 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019202:	f000 fbfd 	bl	8019a00 <vPortFree>
 8019206:	e00a      	b.n	801921e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801920a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801920e:	f023 0301 	bic.w	r3, r3, #1
 8019212:	b2da      	uxtb	r2, r3
 8019214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801921a:	e000      	b.n	801921e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801921c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801921e:	4b08      	ldr	r3, [pc, #32]	; (8019240 <prvProcessReceivedCommands+0x1c0>)
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	1d39      	adds	r1, r7, #4
 8019224:	2200      	movs	r2, #0
 8019226:	4618      	mov	r0, r3
 8019228:	f7fe fb4a 	bl	80178c0 <xQueueReceive>
 801922c:	4603      	mov	r3, r0
 801922e:	2b00      	cmp	r3, #0
 8019230:	f47f af2a 	bne.w	8019088 <prvProcessReceivedCommands+0x8>
	}
}
 8019234:	bf00      	nop
 8019236:	bf00      	nop
 8019238:	3730      	adds	r7, #48	; 0x30
 801923a:	46bd      	mov	sp, r7
 801923c:	bd80      	pop	{r7, pc}
 801923e:	bf00      	nop
 8019240:	24002be8 	.word	0x24002be8

08019244 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b088      	sub	sp, #32
 8019248:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801924a:	e048      	b.n	80192de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801924c:	4b2d      	ldr	r3, [pc, #180]	; (8019304 <prvSwitchTimerLists+0xc0>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	68db      	ldr	r3, [r3, #12]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019256:	4b2b      	ldr	r3, [pc, #172]	; (8019304 <prvSwitchTimerLists+0xc0>)
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	68db      	ldr	r3, [r3, #12]
 801925c:	68db      	ldr	r3, [r3, #12]
 801925e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	3304      	adds	r3, #4
 8019264:	4618      	mov	r0, r3
 8019266:	f7fe f863 	bl	8017330 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	6a1b      	ldr	r3, [r3, #32]
 801926e:	68f8      	ldr	r0, [r7, #12]
 8019270:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019278:	f003 0304 	and.w	r3, r3, #4
 801927c:	2b00      	cmp	r3, #0
 801927e:	d02e      	beq.n	80192de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	699b      	ldr	r3, [r3, #24]
 8019284:	693a      	ldr	r2, [r7, #16]
 8019286:	4413      	add	r3, r2
 8019288:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801928a:	68ba      	ldr	r2, [r7, #8]
 801928c:	693b      	ldr	r3, [r7, #16]
 801928e:	429a      	cmp	r2, r3
 8019290:	d90e      	bls.n	80192b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	68ba      	ldr	r2, [r7, #8]
 8019296:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	68fa      	ldr	r2, [r7, #12]
 801929c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801929e:	4b19      	ldr	r3, [pc, #100]	; (8019304 <prvSwitchTimerLists+0xc0>)
 80192a0:	681a      	ldr	r2, [r3, #0]
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	3304      	adds	r3, #4
 80192a6:	4619      	mov	r1, r3
 80192a8:	4610      	mov	r0, r2
 80192aa:	f7fe f808 	bl	80172be <vListInsert>
 80192ae:	e016      	b.n	80192de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80192b0:	2300      	movs	r3, #0
 80192b2:	9300      	str	r3, [sp, #0]
 80192b4:	2300      	movs	r3, #0
 80192b6:	693a      	ldr	r2, [r7, #16]
 80192b8:	2100      	movs	r1, #0
 80192ba:	68f8      	ldr	r0, [r7, #12]
 80192bc:	f7ff fd60 	bl	8018d80 <xTimerGenericCommand>
 80192c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d10a      	bne.n	80192de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80192c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192cc:	f383 8811 	msr	BASEPRI, r3
 80192d0:	f3bf 8f6f 	isb	sy
 80192d4:	f3bf 8f4f 	dsb	sy
 80192d8:	603b      	str	r3, [r7, #0]
}
 80192da:	bf00      	nop
 80192dc:	e7fe      	b.n	80192dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80192de:	4b09      	ldr	r3, [pc, #36]	; (8019304 <prvSwitchTimerLists+0xc0>)
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d1b1      	bne.n	801924c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80192e8:	4b06      	ldr	r3, [pc, #24]	; (8019304 <prvSwitchTimerLists+0xc0>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80192ee:	4b06      	ldr	r3, [pc, #24]	; (8019308 <prvSwitchTimerLists+0xc4>)
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	4a04      	ldr	r2, [pc, #16]	; (8019304 <prvSwitchTimerLists+0xc0>)
 80192f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80192f6:	4a04      	ldr	r2, [pc, #16]	; (8019308 <prvSwitchTimerLists+0xc4>)
 80192f8:	697b      	ldr	r3, [r7, #20]
 80192fa:	6013      	str	r3, [r2, #0]
}
 80192fc:	bf00      	nop
 80192fe:	3718      	adds	r7, #24
 8019300:	46bd      	mov	sp, r7
 8019302:	bd80      	pop	{r7, pc}
 8019304:	24002be0 	.word	0x24002be0
 8019308:	24002be4 	.word	0x24002be4

0801930c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b082      	sub	sp, #8
 8019310:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019312:	f000 f987 	bl	8019624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019316:	4b15      	ldr	r3, [pc, #84]	; (801936c <prvCheckForValidListAndQueue+0x60>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	2b00      	cmp	r3, #0
 801931c:	d120      	bne.n	8019360 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801931e:	4814      	ldr	r0, [pc, #80]	; (8019370 <prvCheckForValidListAndQueue+0x64>)
 8019320:	f7fd ff7c 	bl	801721c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019324:	4813      	ldr	r0, [pc, #76]	; (8019374 <prvCheckForValidListAndQueue+0x68>)
 8019326:	f7fd ff79 	bl	801721c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801932a:	4b13      	ldr	r3, [pc, #76]	; (8019378 <prvCheckForValidListAndQueue+0x6c>)
 801932c:	4a10      	ldr	r2, [pc, #64]	; (8019370 <prvCheckForValidListAndQueue+0x64>)
 801932e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019330:	4b12      	ldr	r3, [pc, #72]	; (801937c <prvCheckForValidListAndQueue+0x70>)
 8019332:	4a10      	ldr	r2, [pc, #64]	; (8019374 <prvCheckForValidListAndQueue+0x68>)
 8019334:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019336:	2300      	movs	r3, #0
 8019338:	9300      	str	r3, [sp, #0]
 801933a:	4b11      	ldr	r3, [pc, #68]	; (8019380 <prvCheckForValidListAndQueue+0x74>)
 801933c:	4a11      	ldr	r2, [pc, #68]	; (8019384 <prvCheckForValidListAndQueue+0x78>)
 801933e:	2110      	movs	r1, #16
 8019340:	200a      	movs	r0, #10
 8019342:	f7fe f887 	bl	8017454 <xQueueGenericCreateStatic>
 8019346:	4603      	mov	r3, r0
 8019348:	4a08      	ldr	r2, [pc, #32]	; (801936c <prvCheckForValidListAndQueue+0x60>)
 801934a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801934c:	4b07      	ldr	r3, [pc, #28]	; (801936c <prvCheckForValidListAndQueue+0x60>)
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d005      	beq.n	8019360 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019354:	4b05      	ldr	r3, [pc, #20]	; (801936c <prvCheckForValidListAndQueue+0x60>)
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	490b      	ldr	r1, [pc, #44]	; (8019388 <prvCheckForValidListAndQueue+0x7c>)
 801935a:	4618      	mov	r0, r3
 801935c:	f7fe fca0 	bl	8017ca0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019360:	f000 f990 	bl	8019684 <vPortExitCritical>
}
 8019364:	bf00      	nop
 8019366:	46bd      	mov	sp, r7
 8019368:	bd80      	pop	{r7, pc}
 801936a:	bf00      	nop
 801936c:	24002be8 	.word	0x24002be8
 8019370:	24002bb8 	.word	0x24002bb8
 8019374:	24002bcc 	.word	0x24002bcc
 8019378:	24002be0 	.word	0x24002be0
 801937c:	24002be4 	.word	0x24002be4
 8019380:	24002c94 	.word	0x24002c94
 8019384:	24002bf4 	.word	0x24002bf4
 8019388:	0801a930 	.word	0x0801a930

0801938c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801938c:	b580      	push	{r7, lr}
 801938e:	b08a      	sub	sp, #40	; 0x28
 8019390:	af00      	add	r7, sp, #0
 8019392:	60f8      	str	r0, [r7, #12]
 8019394:	60b9      	str	r1, [r7, #8]
 8019396:	607a      	str	r2, [r7, #4]
 8019398:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801939a:	f06f 0301 	mvn.w	r3, #1
 801939e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80193a4:	68bb      	ldr	r3, [r7, #8]
 80193a6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80193ac:	4b06      	ldr	r3, [pc, #24]	; (80193c8 <xTimerPendFunctionCallFromISR+0x3c>)
 80193ae:	6818      	ldr	r0, [r3, #0]
 80193b0:	f107 0114 	add.w	r1, r7, #20
 80193b4:	2300      	movs	r3, #0
 80193b6:	683a      	ldr	r2, [r7, #0]
 80193b8:	f7fe f9e6 	bl	8017788 <xQueueGenericSendFromISR>
 80193bc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80193be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80193c0:	4618      	mov	r0, r3
 80193c2:	3728      	adds	r7, #40	; 0x28
 80193c4:	46bd      	mov	sp, r7
 80193c6:	bd80      	pop	{r7, pc}
 80193c8:	24002be8 	.word	0x24002be8

080193cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80193cc:	b480      	push	{r7}
 80193ce:	b085      	sub	sp, #20
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	60f8      	str	r0, [r7, #12]
 80193d4:	60b9      	str	r1, [r7, #8]
 80193d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	3b04      	subs	r3, #4
 80193dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80193e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	3b04      	subs	r3, #4
 80193ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80193ec:	68bb      	ldr	r3, [r7, #8]
 80193ee:	f023 0201 	bic.w	r2, r3, #1
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	3b04      	subs	r3, #4
 80193fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80193fc:	4a0c      	ldr	r2, [pc, #48]	; (8019430 <pxPortInitialiseStack+0x64>)
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	3b14      	subs	r3, #20
 8019406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019408:	687a      	ldr	r2, [r7, #4]
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	3b04      	subs	r3, #4
 8019412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	f06f 0202 	mvn.w	r2, #2
 801941a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	3b20      	subs	r3, #32
 8019420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019422:	68fb      	ldr	r3, [r7, #12]
}
 8019424:	4618      	mov	r0, r3
 8019426:	3714      	adds	r7, #20
 8019428:	46bd      	mov	sp, r7
 801942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801942e:	4770      	bx	lr
 8019430:	08019435 	.word	0x08019435

08019434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019434:	b480      	push	{r7}
 8019436:	b085      	sub	sp, #20
 8019438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801943a:	2300      	movs	r3, #0
 801943c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801943e:	4b12      	ldr	r3, [pc, #72]	; (8019488 <prvTaskExitError+0x54>)
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019446:	d00a      	beq.n	801945e <prvTaskExitError+0x2a>
	__asm volatile
 8019448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801944c:	f383 8811 	msr	BASEPRI, r3
 8019450:	f3bf 8f6f 	isb	sy
 8019454:	f3bf 8f4f 	dsb	sy
 8019458:	60fb      	str	r3, [r7, #12]
}
 801945a:	bf00      	nop
 801945c:	e7fe      	b.n	801945c <prvTaskExitError+0x28>
	__asm volatile
 801945e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019462:	f383 8811 	msr	BASEPRI, r3
 8019466:	f3bf 8f6f 	isb	sy
 801946a:	f3bf 8f4f 	dsb	sy
 801946e:	60bb      	str	r3, [r7, #8]
}
 8019470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019472:	bf00      	nop
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d0fc      	beq.n	8019474 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801947a:	bf00      	nop
 801947c:	bf00      	nop
 801947e:	3714      	adds	r7, #20
 8019480:	46bd      	mov	sp, r7
 8019482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019486:	4770      	bx	lr
 8019488:	240000a0 	.word	0x240000a0
 801948c:	00000000 	.word	0x00000000

08019490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019490:	4b07      	ldr	r3, [pc, #28]	; (80194b0 <pxCurrentTCBConst2>)
 8019492:	6819      	ldr	r1, [r3, #0]
 8019494:	6808      	ldr	r0, [r1, #0]
 8019496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801949a:	f380 8809 	msr	PSP, r0
 801949e:	f3bf 8f6f 	isb	sy
 80194a2:	f04f 0000 	mov.w	r0, #0
 80194a6:	f380 8811 	msr	BASEPRI, r0
 80194aa:	4770      	bx	lr
 80194ac:	f3af 8000 	nop.w

080194b0 <pxCurrentTCBConst2>:
 80194b0:	240026b8 	.word	0x240026b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80194b4:	bf00      	nop
 80194b6:	bf00      	nop

080194b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80194b8:	4808      	ldr	r0, [pc, #32]	; (80194dc <prvPortStartFirstTask+0x24>)
 80194ba:	6800      	ldr	r0, [r0, #0]
 80194bc:	6800      	ldr	r0, [r0, #0]
 80194be:	f380 8808 	msr	MSP, r0
 80194c2:	f04f 0000 	mov.w	r0, #0
 80194c6:	f380 8814 	msr	CONTROL, r0
 80194ca:	b662      	cpsie	i
 80194cc:	b661      	cpsie	f
 80194ce:	f3bf 8f4f 	dsb	sy
 80194d2:	f3bf 8f6f 	isb	sy
 80194d6:	df00      	svc	0
 80194d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80194da:	bf00      	nop
 80194dc:	e000ed08 	.word	0xe000ed08

080194e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80194e0:	b580      	push	{r7, lr}
 80194e2:	b086      	sub	sp, #24
 80194e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80194e6:	4b46      	ldr	r3, [pc, #280]	; (8019600 <xPortStartScheduler+0x120>)
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	4a46      	ldr	r2, [pc, #280]	; (8019604 <xPortStartScheduler+0x124>)
 80194ec:	4293      	cmp	r3, r2
 80194ee:	d10a      	bne.n	8019506 <xPortStartScheduler+0x26>
	__asm volatile
 80194f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194f4:	f383 8811 	msr	BASEPRI, r3
 80194f8:	f3bf 8f6f 	isb	sy
 80194fc:	f3bf 8f4f 	dsb	sy
 8019500:	613b      	str	r3, [r7, #16]
}
 8019502:	bf00      	nop
 8019504:	e7fe      	b.n	8019504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019506:	4b3e      	ldr	r3, [pc, #248]	; (8019600 <xPortStartScheduler+0x120>)
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	4a3f      	ldr	r2, [pc, #252]	; (8019608 <xPortStartScheduler+0x128>)
 801950c:	4293      	cmp	r3, r2
 801950e:	d10a      	bne.n	8019526 <xPortStartScheduler+0x46>
	__asm volatile
 8019510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019514:	f383 8811 	msr	BASEPRI, r3
 8019518:	f3bf 8f6f 	isb	sy
 801951c:	f3bf 8f4f 	dsb	sy
 8019520:	60fb      	str	r3, [r7, #12]
}
 8019522:	bf00      	nop
 8019524:	e7fe      	b.n	8019524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019526:	4b39      	ldr	r3, [pc, #228]	; (801960c <xPortStartScheduler+0x12c>)
 8019528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801952a:	697b      	ldr	r3, [r7, #20]
 801952c:	781b      	ldrb	r3, [r3, #0]
 801952e:	b2db      	uxtb	r3, r3
 8019530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019532:	697b      	ldr	r3, [r7, #20]
 8019534:	22ff      	movs	r2, #255	; 0xff
 8019536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019538:	697b      	ldr	r3, [r7, #20]
 801953a:	781b      	ldrb	r3, [r3, #0]
 801953c:	b2db      	uxtb	r3, r3
 801953e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019540:	78fb      	ldrb	r3, [r7, #3]
 8019542:	b2db      	uxtb	r3, r3
 8019544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019548:	b2da      	uxtb	r2, r3
 801954a:	4b31      	ldr	r3, [pc, #196]	; (8019610 <xPortStartScheduler+0x130>)
 801954c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801954e:	4b31      	ldr	r3, [pc, #196]	; (8019614 <xPortStartScheduler+0x134>)
 8019550:	2207      	movs	r2, #7
 8019552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019554:	e009      	b.n	801956a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019556:	4b2f      	ldr	r3, [pc, #188]	; (8019614 <xPortStartScheduler+0x134>)
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	3b01      	subs	r3, #1
 801955c:	4a2d      	ldr	r2, [pc, #180]	; (8019614 <xPortStartScheduler+0x134>)
 801955e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019560:	78fb      	ldrb	r3, [r7, #3]
 8019562:	b2db      	uxtb	r3, r3
 8019564:	005b      	lsls	r3, r3, #1
 8019566:	b2db      	uxtb	r3, r3
 8019568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801956a:	78fb      	ldrb	r3, [r7, #3]
 801956c:	b2db      	uxtb	r3, r3
 801956e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019572:	2b80      	cmp	r3, #128	; 0x80
 8019574:	d0ef      	beq.n	8019556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019576:	4b27      	ldr	r3, [pc, #156]	; (8019614 <xPortStartScheduler+0x134>)
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	f1c3 0307 	rsb	r3, r3, #7
 801957e:	2b04      	cmp	r3, #4
 8019580:	d00a      	beq.n	8019598 <xPortStartScheduler+0xb8>
	__asm volatile
 8019582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019586:	f383 8811 	msr	BASEPRI, r3
 801958a:	f3bf 8f6f 	isb	sy
 801958e:	f3bf 8f4f 	dsb	sy
 8019592:	60bb      	str	r3, [r7, #8]
}
 8019594:	bf00      	nop
 8019596:	e7fe      	b.n	8019596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019598:	4b1e      	ldr	r3, [pc, #120]	; (8019614 <xPortStartScheduler+0x134>)
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	021b      	lsls	r3, r3, #8
 801959e:	4a1d      	ldr	r2, [pc, #116]	; (8019614 <xPortStartScheduler+0x134>)
 80195a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80195a2:	4b1c      	ldr	r3, [pc, #112]	; (8019614 <xPortStartScheduler+0x134>)
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80195aa:	4a1a      	ldr	r2, [pc, #104]	; (8019614 <xPortStartScheduler+0x134>)
 80195ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	b2da      	uxtb	r2, r3
 80195b2:	697b      	ldr	r3, [r7, #20]
 80195b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80195b6:	4b18      	ldr	r3, [pc, #96]	; (8019618 <xPortStartScheduler+0x138>)
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	4a17      	ldr	r2, [pc, #92]	; (8019618 <xPortStartScheduler+0x138>)
 80195bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80195c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80195c2:	4b15      	ldr	r3, [pc, #84]	; (8019618 <xPortStartScheduler+0x138>)
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	4a14      	ldr	r2, [pc, #80]	; (8019618 <xPortStartScheduler+0x138>)
 80195c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80195cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80195ce:	f000 f8dd 	bl	801978c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80195d2:	4b12      	ldr	r3, [pc, #72]	; (801961c <xPortStartScheduler+0x13c>)
 80195d4:	2200      	movs	r2, #0
 80195d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80195d8:	f000 f8fc 	bl	80197d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80195dc:	4b10      	ldr	r3, [pc, #64]	; (8019620 <xPortStartScheduler+0x140>)
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	4a0f      	ldr	r2, [pc, #60]	; (8019620 <xPortStartScheduler+0x140>)
 80195e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80195e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80195e8:	f7ff ff66 	bl	80194b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80195ec:	f7fe ff70 	bl	80184d0 <vTaskSwitchContext>
	prvTaskExitError();
 80195f0:	f7ff ff20 	bl	8019434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80195f4:	2300      	movs	r3, #0
}
 80195f6:	4618      	mov	r0, r3
 80195f8:	3718      	adds	r7, #24
 80195fa:	46bd      	mov	sp, r7
 80195fc:	bd80      	pop	{r7, pc}
 80195fe:	bf00      	nop
 8019600:	e000ed00 	.word	0xe000ed00
 8019604:	410fc271 	.word	0x410fc271
 8019608:	410fc270 	.word	0x410fc270
 801960c:	e000e400 	.word	0xe000e400
 8019610:	24002ce4 	.word	0x24002ce4
 8019614:	24002ce8 	.word	0x24002ce8
 8019618:	e000ed20 	.word	0xe000ed20
 801961c:	240000a0 	.word	0x240000a0
 8019620:	e000ef34 	.word	0xe000ef34

08019624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019624:	b480      	push	{r7}
 8019626:	b083      	sub	sp, #12
 8019628:	af00      	add	r7, sp, #0
	__asm volatile
 801962a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801962e:	f383 8811 	msr	BASEPRI, r3
 8019632:	f3bf 8f6f 	isb	sy
 8019636:	f3bf 8f4f 	dsb	sy
 801963a:	607b      	str	r3, [r7, #4]
}
 801963c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801963e:	4b0f      	ldr	r3, [pc, #60]	; (801967c <vPortEnterCritical+0x58>)
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	3301      	adds	r3, #1
 8019644:	4a0d      	ldr	r2, [pc, #52]	; (801967c <vPortEnterCritical+0x58>)
 8019646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019648:	4b0c      	ldr	r3, [pc, #48]	; (801967c <vPortEnterCritical+0x58>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	2b01      	cmp	r3, #1
 801964e:	d10f      	bne.n	8019670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019650:	4b0b      	ldr	r3, [pc, #44]	; (8019680 <vPortEnterCritical+0x5c>)
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	b2db      	uxtb	r3, r3
 8019656:	2b00      	cmp	r3, #0
 8019658:	d00a      	beq.n	8019670 <vPortEnterCritical+0x4c>
	__asm volatile
 801965a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801965e:	f383 8811 	msr	BASEPRI, r3
 8019662:	f3bf 8f6f 	isb	sy
 8019666:	f3bf 8f4f 	dsb	sy
 801966a:	603b      	str	r3, [r7, #0]
}
 801966c:	bf00      	nop
 801966e:	e7fe      	b.n	801966e <vPortEnterCritical+0x4a>
	}
}
 8019670:	bf00      	nop
 8019672:	370c      	adds	r7, #12
 8019674:	46bd      	mov	sp, r7
 8019676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801967a:	4770      	bx	lr
 801967c:	240000a0 	.word	0x240000a0
 8019680:	e000ed04 	.word	0xe000ed04

08019684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019684:	b480      	push	{r7}
 8019686:	b083      	sub	sp, #12
 8019688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801968a:	4b12      	ldr	r3, [pc, #72]	; (80196d4 <vPortExitCritical+0x50>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d10a      	bne.n	80196a8 <vPortExitCritical+0x24>
	__asm volatile
 8019692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019696:	f383 8811 	msr	BASEPRI, r3
 801969a:	f3bf 8f6f 	isb	sy
 801969e:	f3bf 8f4f 	dsb	sy
 80196a2:	607b      	str	r3, [r7, #4]
}
 80196a4:	bf00      	nop
 80196a6:	e7fe      	b.n	80196a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80196a8:	4b0a      	ldr	r3, [pc, #40]	; (80196d4 <vPortExitCritical+0x50>)
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	3b01      	subs	r3, #1
 80196ae:	4a09      	ldr	r2, [pc, #36]	; (80196d4 <vPortExitCritical+0x50>)
 80196b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80196b2:	4b08      	ldr	r3, [pc, #32]	; (80196d4 <vPortExitCritical+0x50>)
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d105      	bne.n	80196c6 <vPortExitCritical+0x42>
 80196ba:	2300      	movs	r3, #0
 80196bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80196be:	683b      	ldr	r3, [r7, #0]
 80196c0:	f383 8811 	msr	BASEPRI, r3
}
 80196c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80196c6:	bf00      	nop
 80196c8:	370c      	adds	r7, #12
 80196ca:	46bd      	mov	sp, r7
 80196cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d0:	4770      	bx	lr
 80196d2:	bf00      	nop
 80196d4:	240000a0 	.word	0x240000a0
	...

080196e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80196e0:	f3ef 8009 	mrs	r0, PSP
 80196e4:	f3bf 8f6f 	isb	sy
 80196e8:	4b15      	ldr	r3, [pc, #84]	; (8019740 <pxCurrentTCBConst>)
 80196ea:	681a      	ldr	r2, [r3, #0]
 80196ec:	f01e 0f10 	tst.w	lr, #16
 80196f0:	bf08      	it	eq
 80196f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80196f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196fa:	6010      	str	r0, [r2, #0]
 80196fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019704:	f380 8811 	msr	BASEPRI, r0
 8019708:	f3bf 8f4f 	dsb	sy
 801970c:	f3bf 8f6f 	isb	sy
 8019710:	f7fe fede 	bl	80184d0 <vTaskSwitchContext>
 8019714:	f04f 0000 	mov.w	r0, #0
 8019718:	f380 8811 	msr	BASEPRI, r0
 801971c:	bc09      	pop	{r0, r3}
 801971e:	6819      	ldr	r1, [r3, #0]
 8019720:	6808      	ldr	r0, [r1, #0]
 8019722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019726:	f01e 0f10 	tst.w	lr, #16
 801972a:	bf08      	it	eq
 801972c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019730:	f380 8809 	msr	PSP, r0
 8019734:	f3bf 8f6f 	isb	sy
 8019738:	4770      	bx	lr
 801973a:	bf00      	nop
 801973c:	f3af 8000 	nop.w

08019740 <pxCurrentTCBConst>:
 8019740:	240026b8 	.word	0x240026b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019744:	bf00      	nop
 8019746:	bf00      	nop

08019748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019748:	b580      	push	{r7, lr}
 801974a:	b082      	sub	sp, #8
 801974c:	af00      	add	r7, sp, #0
	__asm volatile
 801974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019752:	f383 8811 	msr	BASEPRI, r3
 8019756:	f3bf 8f6f 	isb	sy
 801975a:	f3bf 8f4f 	dsb	sy
 801975e:	607b      	str	r3, [r7, #4]
}
 8019760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019762:	f7fe fdf3 	bl	801834c <xTaskIncrementTick>
 8019766:	4603      	mov	r3, r0
 8019768:	2b00      	cmp	r3, #0
 801976a:	d003      	beq.n	8019774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801976c:	4b06      	ldr	r3, [pc, #24]	; (8019788 <xPortSysTickHandler+0x40>)
 801976e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019772:	601a      	str	r2, [r3, #0]
 8019774:	2300      	movs	r3, #0
 8019776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019778:	683b      	ldr	r3, [r7, #0]
 801977a:	f383 8811 	msr	BASEPRI, r3
}
 801977e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019780:	bf00      	nop
 8019782:	3708      	adds	r7, #8
 8019784:	46bd      	mov	sp, r7
 8019786:	bd80      	pop	{r7, pc}
 8019788:	e000ed04 	.word	0xe000ed04

0801978c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801978c:	b480      	push	{r7}
 801978e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019790:	4b0b      	ldr	r3, [pc, #44]	; (80197c0 <vPortSetupTimerInterrupt+0x34>)
 8019792:	2200      	movs	r2, #0
 8019794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019796:	4b0b      	ldr	r3, [pc, #44]	; (80197c4 <vPortSetupTimerInterrupt+0x38>)
 8019798:	2200      	movs	r2, #0
 801979a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801979c:	4b0a      	ldr	r3, [pc, #40]	; (80197c8 <vPortSetupTimerInterrupt+0x3c>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	4a0a      	ldr	r2, [pc, #40]	; (80197cc <vPortSetupTimerInterrupt+0x40>)
 80197a2:	fba2 2303 	umull	r2, r3, r2, r3
 80197a6:	099b      	lsrs	r3, r3, #6
 80197a8:	4a09      	ldr	r2, [pc, #36]	; (80197d0 <vPortSetupTimerInterrupt+0x44>)
 80197aa:	3b01      	subs	r3, #1
 80197ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80197ae:	4b04      	ldr	r3, [pc, #16]	; (80197c0 <vPortSetupTimerInterrupt+0x34>)
 80197b0:	2207      	movs	r2, #7
 80197b2:	601a      	str	r2, [r3, #0]
}
 80197b4:	bf00      	nop
 80197b6:	46bd      	mov	sp, r7
 80197b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197bc:	4770      	bx	lr
 80197be:	bf00      	nop
 80197c0:	e000e010 	.word	0xe000e010
 80197c4:	e000e018 	.word	0xe000e018
 80197c8:	24000090 	.word	0x24000090
 80197cc:	10624dd3 	.word	0x10624dd3
 80197d0:	e000e014 	.word	0xe000e014

080197d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80197d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80197e4 <vPortEnableVFP+0x10>
 80197d8:	6801      	ldr	r1, [r0, #0]
 80197da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80197de:	6001      	str	r1, [r0, #0]
 80197e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80197e2:	bf00      	nop
 80197e4:	e000ed88 	.word	0xe000ed88

080197e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80197e8:	b480      	push	{r7}
 80197ea:	b085      	sub	sp, #20
 80197ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80197ee:	f3ef 8305 	mrs	r3, IPSR
 80197f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	2b0f      	cmp	r3, #15
 80197f8:	d914      	bls.n	8019824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80197fa:	4a17      	ldr	r2, [pc, #92]	; (8019858 <vPortValidateInterruptPriority+0x70>)
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	4413      	add	r3, r2
 8019800:	781b      	ldrb	r3, [r3, #0]
 8019802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019804:	4b15      	ldr	r3, [pc, #84]	; (801985c <vPortValidateInterruptPriority+0x74>)
 8019806:	781b      	ldrb	r3, [r3, #0]
 8019808:	7afa      	ldrb	r2, [r7, #11]
 801980a:	429a      	cmp	r2, r3
 801980c:	d20a      	bcs.n	8019824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019812:	f383 8811 	msr	BASEPRI, r3
 8019816:	f3bf 8f6f 	isb	sy
 801981a:	f3bf 8f4f 	dsb	sy
 801981e:	607b      	str	r3, [r7, #4]
}
 8019820:	bf00      	nop
 8019822:	e7fe      	b.n	8019822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019824:	4b0e      	ldr	r3, [pc, #56]	; (8019860 <vPortValidateInterruptPriority+0x78>)
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801982c:	4b0d      	ldr	r3, [pc, #52]	; (8019864 <vPortValidateInterruptPriority+0x7c>)
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	429a      	cmp	r2, r3
 8019832:	d90a      	bls.n	801984a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019838:	f383 8811 	msr	BASEPRI, r3
 801983c:	f3bf 8f6f 	isb	sy
 8019840:	f3bf 8f4f 	dsb	sy
 8019844:	603b      	str	r3, [r7, #0]
}
 8019846:	bf00      	nop
 8019848:	e7fe      	b.n	8019848 <vPortValidateInterruptPriority+0x60>
	}
 801984a:	bf00      	nop
 801984c:	3714      	adds	r7, #20
 801984e:	46bd      	mov	sp, r7
 8019850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019854:	4770      	bx	lr
 8019856:	bf00      	nop
 8019858:	e000e3f0 	.word	0xe000e3f0
 801985c:	24002ce4 	.word	0x24002ce4
 8019860:	e000ed0c 	.word	0xe000ed0c
 8019864:	24002ce8 	.word	0x24002ce8

08019868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b08a      	sub	sp, #40	; 0x28
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019870:	2300      	movs	r3, #0
 8019872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019874:	f7fe fcae 	bl	80181d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019878:	4b5b      	ldr	r3, [pc, #364]	; (80199e8 <pvPortMalloc+0x180>)
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	2b00      	cmp	r3, #0
 801987e:	d101      	bne.n	8019884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019880:	f000 f920 	bl	8019ac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019884:	4b59      	ldr	r3, [pc, #356]	; (80199ec <pvPortMalloc+0x184>)
 8019886:	681a      	ldr	r2, [r3, #0]
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	4013      	ands	r3, r2
 801988c:	2b00      	cmp	r3, #0
 801988e:	f040 8093 	bne.w	80199b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d01d      	beq.n	80198d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019898:	2208      	movs	r2, #8
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	4413      	add	r3, r2
 801989e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	f003 0307 	and.w	r3, r3, #7
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d014      	beq.n	80198d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	f023 0307 	bic.w	r3, r3, #7
 80198b0:	3308      	adds	r3, #8
 80198b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	f003 0307 	and.w	r3, r3, #7
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d00a      	beq.n	80198d4 <pvPortMalloc+0x6c>
	__asm volatile
 80198be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198c2:	f383 8811 	msr	BASEPRI, r3
 80198c6:	f3bf 8f6f 	isb	sy
 80198ca:	f3bf 8f4f 	dsb	sy
 80198ce:	617b      	str	r3, [r7, #20]
}
 80198d0:	bf00      	nop
 80198d2:	e7fe      	b.n	80198d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d06e      	beq.n	80199b8 <pvPortMalloc+0x150>
 80198da:	4b45      	ldr	r3, [pc, #276]	; (80199f0 <pvPortMalloc+0x188>)
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	687a      	ldr	r2, [r7, #4]
 80198e0:	429a      	cmp	r2, r3
 80198e2:	d869      	bhi.n	80199b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80198e4:	4b43      	ldr	r3, [pc, #268]	; (80199f4 <pvPortMalloc+0x18c>)
 80198e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80198e8:	4b42      	ldr	r3, [pc, #264]	; (80199f4 <pvPortMalloc+0x18c>)
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80198ee:	e004      	b.n	80198fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80198f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80198f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80198fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198fc:	685b      	ldr	r3, [r3, #4]
 80198fe:	687a      	ldr	r2, [r7, #4]
 8019900:	429a      	cmp	r2, r3
 8019902:	d903      	bls.n	801990c <pvPortMalloc+0xa4>
 8019904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d1f1      	bne.n	80198f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801990c:	4b36      	ldr	r3, [pc, #216]	; (80199e8 <pvPortMalloc+0x180>)
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019912:	429a      	cmp	r2, r3
 8019914:	d050      	beq.n	80199b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019916:	6a3b      	ldr	r3, [r7, #32]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	2208      	movs	r2, #8
 801991c:	4413      	add	r3, r2
 801991e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019922:	681a      	ldr	r2, [r3, #0]
 8019924:	6a3b      	ldr	r3, [r7, #32]
 8019926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801992a:	685a      	ldr	r2, [r3, #4]
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	1ad2      	subs	r2, r2, r3
 8019930:	2308      	movs	r3, #8
 8019932:	005b      	lsls	r3, r3, #1
 8019934:	429a      	cmp	r2, r3
 8019936:	d91f      	bls.n	8019978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	4413      	add	r3, r2
 801993e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019940:	69bb      	ldr	r3, [r7, #24]
 8019942:	f003 0307 	and.w	r3, r3, #7
 8019946:	2b00      	cmp	r3, #0
 8019948:	d00a      	beq.n	8019960 <pvPortMalloc+0xf8>
	__asm volatile
 801994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801994e:	f383 8811 	msr	BASEPRI, r3
 8019952:	f3bf 8f6f 	isb	sy
 8019956:	f3bf 8f4f 	dsb	sy
 801995a:	613b      	str	r3, [r7, #16]
}
 801995c:	bf00      	nop
 801995e:	e7fe      	b.n	801995e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019962:	685a      	ldr	r2, [r3, #4]
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	1ad2      	subs	r2, r2, r3
 8019968:	69bb      	ldr	r3, [r7, #24]
 801996a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801996e:	687a      	ldr	r2, [r7, #4]
 8019970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019972:	69b8      	ldr	r0, [r7, #24]
 8019974:	f000 f908 	bl	8019b88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019978:	4b1d      	ldr	r3, [pc, #116]	; (80199f0 <pvPortMalloc+0x188>)
 801997a:	681a      	ldr	r2, [r3, #0]
 801997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801997e:	685b      	ldr	r3, [r3, #4]
 8019980:	1ad3      	subs	r3, r2, r3
 8019982:	4a1b      	ldr	r2, [pc, #108]	; (80199f0 <pvPortMalloc+0x188>)
 8019984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019986:	4b1a      	ldr	r3, [pc, #104]	; (80199f0 <pvPortMalloc+0x188>)
 8019988:	681a      	ldr	r2, [r3, #0]
 801998a:	4b1b      	ldr	r3, [pc, #108]	; (80199f8 <pvPortMalloc+0x190>)
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	429a      	cmp	r2, r3
 8019990:	d203      	bcs.n	801999a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019992:	4b17      	ldr	r3, [pc, #92]	; (80199f0 <pvPortMalloc+0x188>)
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	4a18      	ldr	r2, [pc, #96]	; (80199f8 <pvPortMalloc+0x190>)
 8019998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801999c:	685a      	ldr	r2, [r3, #4]
 801999e:	4b13      	ldr	r3, [pc, #76]	; (80199ec <pvPortMalloc+0x184>)
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	431a      	orrs	r2, r3
 80199a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80199a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199aa:	2200      	movs	r2, #0
 80199ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80199ae:	4b13      	ldr	r3, [pc, #76]	; (80199fc <pvPortMalloc+0x194>)
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	3301      	adds	r3, #1
 80199b4:	4a11      	ldr	r2, [pc, #68]	; (80199fc <pvPortMalloc+0x194>)
 80199b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80199b8:	f7fe fc1a 	bl	80181f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80199bc:	69fb      	ldr	r3, [r7, #28]
 80199be:	f003 0307 	and.w	r3, r3, #7
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d00a      	beq.n	80199dc <pvPortMalloc+0x174>
	__asm volatile
 80199c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199ca:	f383 8811 	msr	BASEPRI, r3
 80199ce:	f3bf 8f6f 	isb	sy
 80199d2:	f3bf 8f4f 	dsb	sy
 80199d6:	60fb      	str	r3, [r7, #12]
}
 80199d8:	bf00      	nop
 80199da:	e7fe      	b.n	80199da <pvPortMalloc+0x172>
	return pvReturn;
 80199dc:	69fb      	ldr	r3, [r7, #28]
}
 80199de:	4618      	mov	r0, r3
 80199e0:	3728      	adds	r7, #40	; 0x28
 80199e2:	46bd      	mov	sp, r7
 80199e4:	bd80      	pop	{r7, pc}
 80199e6:	bf00      	nop
 80199e8:	240068f4 	.word	0x240068f4
 80199ec:	24006908 	.word	0x24006908
 80199f0:	240068f8 	.word	0x240068f8
 80199f4:	240068ec 	.word	0x240068ec
 80199f8:	240068fc 	.word	0x240068fc
 80199fc:	24006900 	.word	0x24006900

08019a00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b086      	sub	sp, #24
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d04d      	beq.n	8019aae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019a12:	2308      	movs	r3, #8
 8019a14:	425b      	negs	r3, r3
 8019a16:	697a      	ldr	r2, [r7, #20]
 8019a18:	4413      	add	r3, r2
 8019a1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019a1c:	697b      	ldr	r3, [r7, #20]
 8019a1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019a20:	693b      	ldr	r3, [r7, #16]
 8019a22:	685a      	ldr	r2, [r3, #4]
 8019a24:	4b24      	ldr	r3, [pc, #144]	; (8019ab8 <vPortFree+0xb8>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	4013      	ands	r3, r2
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d10a      	bne.n	8019a44 <vPortFree+0x44>
	__asm volatile
 8019a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a32:	f383 8811 	msr	BASEPRI, r3
 8019a36:	f3bf 8f6f 	isb	sy
 8019a3a:	f3bf 8f4f 	dsb	sy
 8019a3e:	60fb      	str	r3, [r7, #12]
}
 8019a40:	bf00      	nop
 8019a42:	e7fe      	b.n	8019a42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019a44:	693b      	ldr	r3, [r7, #16]
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d00a      	beq.n	8019a62 <vPortFree+0x62>
	__asm volatile
 8019a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a50:	f383 8811 	msr	BASEPRI, r3
 8019a54:	f3bf 8f6f 	isb	sy
 8019a58:	f3bf 8f4f 	dsb	sy
 8019a5c:	60bb      	str	r3, [r7, #8]
}
 8019a5e:	bf00      	nop
 8019a60:	e7fe      	b.n	8019a60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019a62:	693b      	ldr	r3, [r7, #16]
 8019a64:	685a      	ldr	r2, [r3, #4]
 8019a66:	4b14      	ldr	r3, [pc, #80]	; (8019ab8 <vPortFree+0xb8>)
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	4013      	ands	r3, r2
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d01e      	beq.n	8019aae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019a70:	693b      	ldr	r3, [r7, #16]
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d11a      	bne.n	8019aae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019a78:	693b      	ldr	r3, [r7, #16]
 8019a7a:	685a      	ldr	r2, [r3, #4]
 8019a7c:	4b0e      	ldr	r3, [pc, #56]	; (8019ab8 <vPortFree+0xb8>)
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	43db      	mvns	r3, r3
 8019a82:	401a      	ands	r2, r3
 8019a84:	693b      	ldr	r3, [r7, #16]
 8019a86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019a88:	f7fe fba4 	bl	80181d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019a8c:	693b      	ldr	r3, [r7, #16]
 8019a8e:	685a      	ldr	r2, [r3, #4]
 8019a90:	4b0a      	ldr	r3, [pc, #40]	; (8019abc <vPortFree+0xbc>)
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	4413      	add	r3, r2
 8019a96:	4a09      	ldr	r2, [pc, #36]	; (8019abc <vPortFree+0xbc>)
 8019a98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019a9a:	6938      	ldr	r0, [r7, #16]
 8019a9c:	f000 f874 	bl	8019b88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019aa0:	4b07      	ldr	r3, [pc, #28]	; (8019ac0 <vPortFree+0xc0>)
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	3301      	adds	r3, #1
 8019aa6:	4a06      	ldr	r2, [pc, #24]	; (8019ac0 <vPortFree+0xc0>)
 8019aa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019aaa:	f7fe fba1 	bl	80181f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019aae:	bf00      	nop
 8019ab0:	3718      	adds	r7, #24
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	bd80      	pop	{r7, pc}
 8019ab6:	bf00      	nop
 8019ab8:	24006908 	.word	0x24006908
 8019abc:	240068f8 	.word	0x240068f8
 8019ac0:	24006904 	.word	0x24006904

08019ac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019ac4:	b480      	push	{r7}
 8019ac6:	b085      	sub	sp, #20
 8019ac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019aca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019ace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019ad0:	4b27      	ldr	r3, [pc, #156]	; (8019b70 <prvHeapInit+0xac>)
 8019ad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	f003 0307 	and.w	r3, r3, #7
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d00c      	beq.n	8019af8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	3307      	adds	r3, #7
 8019ae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	f023 0307 	bic.w	r3, r3, #7
 8019aea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019aec:	68ba      	ldr	r2, [r7, #8]
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	1ad3      	subs	r3, r2, r3
 8019af2:	4a1f      	ldr	r2, [pc, #124]	; (8019b70 <prvHeapInit+0xac>)
 8019af4:	4413      	add	r3, r2
 8019af6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019afc:	4a1d      	ldr	r2, [pc, #116]	; (8019b74 <prvHeapInit+0xb0>)
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019b02:	4b1c      	ldr	r3, [pc, #112]	; (8019b74 <prvHeapInit+0xb0>)
 8019b04:	2200      	movs	r2, #0
 8019b06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	68ba      	ldr	r2, [r7, #8]
 8019b0c:	4413      	add	r3, r2
 8019b0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019b10:	2208      	movs	r2, #8
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	1a9b      	subs	r3, r3, r2
 8019b16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	f023 0307 	bic.w	r3, r3, #7
 8019b1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	4a15      	ldr	r2, [pc, #84]	; (8019b78 <prvHeapInit+0xb4>)
 8019b24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019b26:	4b14      	ldr	r3, [pc, #80]	; (8019b78 <prvHeapInit+0xb4>)
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	2200      	movs	r2, #0
 8019b2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019b2e:	4b12      	ldr	r3, [pc, #72]	; (8019b78 <prvHeapInit+0xb4>)
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	2200      	movs	r2, #0
 8019b34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	68fa      	ldr	r2, [r7, #12]
 8019b3e:	1ad2      	subs	r2, r2, r3
 8019b40:	683b      	ldr	r3, [r7, #0]
 8019b42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019b44:	4b0c      	ldr	r3, [pc, #48]	; (8019b78 <prvHeapInit+0xb4>)
 8019b46:	681a      	ldr	r2, [r3, #0]
 8019b48:	683b      	ldr	r3, [r7, #0]
 8019b4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019b4c:	683b      	ldr	r3, [r7, #0]
 8019b4e:	685b      	ldr	r3, [r3, #4]
 8019b50:	4a0a      	ldr	r2, [pc, #40]	; (8019b7c <prvHeapInit+0xb8>)
 8019b52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019b54:	683b      	ldr	r3, [r7, #0]
 8019b56:	685b      	ldr	r3, [r3, #4]
 8019b58:	4a09      	ldr	r2, [pc, #36]	; (8019b80 <prvHeapInit+0xbc>)
 8019b5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019b5c:	4b09      	ldr	r3, [pc, #36]	; (8019b84 <prvHeapInit+0xc0>)
 8019b5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019b62:	601a      	str	r2, [r3, #0]
}
 8019b64:	bf00      	nop
 8019b66:	3714      	adds	r7, #20
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6e:	4770      	bx	lr
 8019b70:	24002cec 	.word	0x24002cec
 8019b74:	240068ec 	.word	0x240068ec
 8019b78:	240068f4 	.word	0x240068f4
 8019b7c:	240068fc 	.word	0x240068fc
 8019b80:	240068f8 	.word	0x240068f8
 8019b84:	24006908 	.word	0x24006908

08019b88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019b88:	b480      	push	{r7}
 8019b8a:	b085      	sub	sp, #20
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019b90:	4b28      	ldr	r3, [pc, #160]	; (8019c34 <prvInsertBlockIntoFreeList+0xac>)
 8019b92:	60fb      	str	r3, [r7, #12]
 8019b94:	e002      	b.n	8019b9c <prvInsertBlockIntoFreeList+0x14>
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	60fb      	str	r3, [r7, #12]
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	687a      	ldr	r2, [r7, #4]
 8019ba2:	429a      	cmp	r2, r3
 8019ba4:	d8f7      	bhi.n	8019b96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	685b      	ldr	r3, [r3, #4]
 8019bae:	68ba      	ldr	r2, [r7, #8]
 8019bb0:	4413      	add	r3, r2
 8019bb2:	687a      	ldr	r2, [r7, #4]
 8019bb4:	429a      	cmp	r2, r3
 8019bb6:	d108      	bne.n	8019bca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	685a      	ldr	r2, [r3, #4]
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	685b      	ldr	r3, [r3, #4]
 8019bc0:	441a      	add	r2, r3
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	685b      	ldr	r3, [r3, #4]
 8019bd2:	68ba      	ldr	r2, [r7, #8]
 8019bd4:	441a      	add	r2, r3
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	429a      	cmp	r2, r3
 8019bdc:	d118      	bne.n	8019c10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	681a      	ldr	r2, [r3, #0]
 8019be2:	4b15      	ldr	r3, [pc, #84]	; (8019c38 <prvInsertBlockIntoFreeList+0xb0>)
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	429a      	cmp	r2, r3
 8019be8:	d00d      	beq.n	8019c06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	685a      	ldr	r2, [r3, #4]
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	685b      	ldr	r3, [r3, #4]
 8019bf4:	441a      	add	r2, r3
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	681a      	ldr	r2, [r3, #0]
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	601a      	str	r2, [r3, #0]
 8019c04:	e008      	b.n	8019c18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019c06:	4b0c      	ldr	r3, [pc, #48]	; (8019c38 <prvInsertBlockIntoFreeList+0xb0>)
 8019c08:	681a      	ldr	r2, [r3, #0]
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	601a      	str	r2, [r3, #0]
 8019c0e:	e003      	b.n	8019c18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	681a      	ldr	r2, [r3, #0]
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019c18:	68fa      	ldr	r2, [r7, #12]
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	429a      	cmp	r2, r3
 8019c1e:	d002      	beq.n	8019c26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	687a      	ldr	r2, [r7, #4]
 8019c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019c26:	bf00      	nop
 8019c28:	3714      	adds	r7, #20
 8019c2a:	46bd      	mov	sp, r7
 8019c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c30:	4770      	bx	lr
 8019c32:	bf00      	nop
 8019c34:	240068ec 	.word	0x240068ec
 8019c38:	240068f4 	.word	0x240068f4

08019c3c <__errno>:
 8019c3c:	4b01      	ldr	r3, [pc, #4]	; (8019c44 <__errno+0x8>)
 8019c3e:	6818      	ldr	r0, [r3, #0]
 8019c40:	4770      	bx	lr
 8019c42:	bf00      	nop
 8019c44:	240000a4 	.word	0x240000a4

08019c48 <__libc_init_array>:
 8019c48:	b570      	push	{r4, r5, r6, lr}
 8019c4a:	4d0d      	ldr	r5, [pc, #52]	; (8019c80 <__libc_init_array+0x38>)
 8019c4c:	4c0d      	ldr	r4, [pc, #52]	; (8019c84 <__libc_init_array+0x3c>)
 8019c4e:	1b64      	subs	r4, r4, r5
 8019c50:	10a4      	asrs	r4, r4, #2
 8019c52:	2600      	movs	r6, #0
 8019c54:	42a6      	cmp	r6, r4
 8019c56:	d109      	bne.n	8019c6c <__libc_init_array+0x24>
 8019c58:	4d0b      	ldr	r5, [pc, #44]	; (8019c88 <__libc_init_array+0x40>)
 8019c5a:	4c0c      	ldr	r4, [pc, #48]	; (8019c8c <__libc_init_array+0x44>)
 8019c5c:	f000 fd2c 	bl	801a6b8 <_init>
 8019c60:	1b64      	subs	r4, r4, r5
 8019c62:	10a4      	asrs	r4, r4, #2
 8019c64:	2600      	movs	r6, #0
 8019c66:	42a6      	cmp	r6, r4
 8019c68:	d105      	bne.n	8019c76 <__libc_init_array+0x2e>
 8019c6a:	bd70      	pop	{r4, r5, r6, pc}
 8019c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c70:	4798      	blx	r3
 8019c72:	3601      	adds	r6, #1
 8019c74:	e7ee      	b.n	8019c54 <__libc_init_array+0xc>
 8019c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c7a:	4798      	blx	r3
 8019c7c:	3601      	adds	r6, #1
 8019c7e:	e7f2      	b.n	8019c66 <__libc_init_array+0x1e>
 8019c80:	0801ab70 	.word	0x0801ab70
 8019c84:	0801ab70 	.word	0x0801ab70
 8019c88:	0801ab70 	.word	0x0801ab70
 8019c8c:	0801ab74 	.word	0x0801ab74

08019c90 <memcpy>:
 8019c90:	440a      	add	r2, r1
 8019c92:	4291      	cmp	r1, r2
 8019c94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019c98:	d100      	bne.n	8019c9c <memcpy+0xc>
 8019c9a:	4770      	bx	lr
 8019c9c:	b510      	push	{r4, lr}
 8019c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019ca6:	4291      	cmp	r1, r2
 8019ca8:	d1f9      	bne.n	8019c9e <memcpy+0xe>
 8019caa:	bd10      	pop	{r4, pc}

08019cac <memset>:
 8019cac:	4402      	add	r2, r0
 8019cae:	4603      	mov	r3, r0
 8019cb0:	4293      	cmp	r3, r2
 8019cb2:	d100      	bne.n	8019cb6 <memset+0xa>
 8019cb4:	4770      	bx	lr
 8019cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8019cba:	e7f9      	b.n	8019cb0 <memset+0x4>

08019cbc <_puts_r>:
 8019cbc:	b570      	push	{r4, r5, r6, lr}
 8019cbe:	460e      	mov	r6, r1
 8019cc0:	4605      	mov	r5, r0
 8019cc2:	b118      	cbz	r0, 8019ccc <_puts_r+0x10>
 8019cc4:	6983      	ldr	r3, [r0, #24]
 8019cc6:	b90b      	cbnz	r3, 8019ccc <_puts_r+0x10>
 8019cc8:	f000 fa48 	bl	801a15c <__sinit>
 8019ccc:	69ab      	ldr	r3, [r5, #24]
 8019cce:	68ac      	ldr	r4, [r5, #8]
 8019cd0:	b913      	cbnz	r3, 8019cd8 <_puts_r+0x1c>
 8019cd2:	4628      	mov	r0, r5
 8019cd4:	f000 fa42 	bl	801a15c <__sinit>
 8019cd8:	4b2c      	ldr	r3, [pc, #176]	; (8019d8c <_puts_r+0xd0>)
 8019cda:	429c      	cmp	r4, r3
 8019cdc:	d120      	bne.n	8019d20 <_puts_r+0x64>
 8019cde:	686c      	ldr	r4, [r5, #4]
 8019ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019ce2:	07db      	lsls	r3, r3, #31
 8019ce4:	d405      	bmi.n	8019cf2 <_puts_r+0x36>
 8019ce6:	89a3      	ldrh	r3, [r4, #12]
 8019ce8:	0598      	lsls	r0, r3, #22
 8019cea:	d402      	bmi.n	8019cf2 <_puts_r+0x36>
 8019cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019cee:	f000 fad3 	bl	801a298 <__retarget_lock_acquire_recursive>
 8019cf2:	89a3      	ldrh	r3, [r4, #12]
 8019cf4:	0719      	lsls	r1, r3, #28
 8019cf6:	d51d      	bpl.n	8019d34 <_puts_r+0x78>
 8019cf8:	6923      	ldr	r3, [r4, #16]
 8019cfa:	b1db      	cbz	r3, 8019d34 <_puts_r+0x78>
 8019cfc:	3e01      	subs	r6, #1
 8019cfe:	68a3      	ldr	r3, [r4, #8]
 8019d00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019d04:	3b01      	subs	r3, #1
 8019d06:	60a3      	str	r3, [r4, #8]
 8019d08:	bb39      	cbnz	r1, 8019d5a <_puts_r+0x9e>
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	da38      	bge.n	8019d80 <_puts_r+0xc4>
 8019d0e:	4622      	mov	r2, r4
 8019d10:	210a      	movs	r1, #10
 8019d12:	4628      	mov	r0, r5
 8019d14:	f000 f848 	bl	8019da8 <__swbuf_r>
 8019d18:	3001      	adds	r0, #1
 8019d1a:	d011      	beq.n	8019d40 <_puts_r+0x84>
 8019d1c:	250a      	movs	r5, #10
 8019d1e:	e011      	b.n	8019d44 <_puts_r+0x88>
 8019d20:	4b1b      	ldr	r3, [pc, #108]	; (8019d90 <_puts_r+0xd4>)
 8019d22:	429c      	cmp	r4, r3
 8019d24:	d101      	bne.n	8019d2a <_puts_r+0x6e>
 8019d26:	68ac      	ldr	r4, [r5, #8]
 8019d28:	e7da      	b.n	8019ce0 <_puts_r+0x24>
 8019d2a:	4b1a      	ldr	r3, [pc, #104]	; (8019d94 <_puts_r+0xd8>)
 8019d2c:	429c      	cmp	r4, r3
 8019d2e:	bf08      	it	eq
 8019d30:	68ec      	ldreq	r4, [r5, #12]
 8019d32:	e7d5      	b.n	8019ce0 <_puts_r+0x24>
 8019d34:	4621      	mov	r1, r4
 8019d36:	4628      	mov	r0, r5
 8019d38:	f000 f888 	bl	8019e4c <__swsetup_r>
 8019d3c:	2800      	cmp	r0, #0
 8019d3e:	d0dd      	beq.n	8019cfc <_puts_r+0x40>
 8019d40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d46:	07da      	lsls	r2, r3, #31
 8019d48:	d405      	bmi.n	8019d56 <_puts_r+0x9a>
 8019d4a:	89a3      	ldrh	r3, [r4, #12]
 8019d4c:	059b      	lsls	r3, r3, #22
 8019d4e:	d402      	bmi.n	8019d56 <_puts_r+0x9a>
 8019d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d52:	f000 faa2 	bl	801a29a <__retarget_lock_release_recursive>
 8019d56:	4628      	mov	r0, r5
 8019d58:	bd70      	pop	{r4, r5, r6, pc}
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	da04      	bge.n	8019d68 <_puts_r+0xac>
 8019d5e:	69a2      	ldr	r2, [r4, #24]
 8019d60:	429a      	cmp	r2, r3
 8019d62:	dc06      	bgt.n	8019d72 <_puts_r+0xb6>
 8019d64:	290a      	cmp	r1, #10
 8019d66:	d004      	beq.n	8019d72 <_puts_r+0xb6>
 8019d68:	6823      	ldr	r3, [r4, #0]
 8019d6a:	1c5a      	adds	r2, r3, #1
 8019d6c:	6022      	str	r2, [r4, #0]
 8019d6e:	7019      	strb	r1, [r3, #0]
 8019d70:	e7c5      	b.n	8019cfe <_puts_r+0x42>
 8019d72:	4622      	mov	r2, r4
 8019d74:	4628      	mov	r0, r5
 8019d76:	f000 f817 	bl	8019da8 <__swbuf_r>
 8019d7a:	3001      	adds	r0, #1
 8019d7c:	d1bf      	bne.n	8019cfe <_puts_r+0x42>
 8019d7e:	e7df      	b.n	8019d40 <_puts_r+0x84>
 8019d80:	6823      	ldr	r3, [r4, #0]
 8019d82:	250a      	movs	r5, #10
 8019d84:	1c5a      	adds	r2, r3, #1
 8019d86:	6022      	str	r2, [r4, #0]
 8019d88:	701d      	strb	r5, [r3, #0]
 8019d8a:	e7db      	b.n	8019d44 <_puts_r+0x88>
 8019d8c:	0801ab28 	.word	0x0801ab28
 8019d90:	0801ab48 	.word	0x0801ab48
 8019d94:	0801ab08 	.word	0x0801ab08

08019d98 <puts>:
 8019d98:	4b02      	ldr	r3, [pc, #8]	; (8019da4 <puts+0xc>)
 8019d9a:	4601      	mov	r1, r0
 8019d9c:	6818      	ldr	r0, [r3, #0]
 8019d9e:	f7ff bf8d 	b.w	8019cbc <_puts_r>
 8019da2:	bf00      	nop
 8019da4:	240000a4 	.word	0x240000a4

08019da8 <__swbuf_r>:
 8019da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019daa:	460e      	mov	r6, r1
 8019dac:	4614      	mov	r4, r2
 8019dae:	4605      	mov	r5, r0
 8019db0:	b118      	cbz	r0, 8019dba <__swbuf_r+0x12>
 8019db2:	6983      	ldr	r3, [r0, #24]
 8019db4:	b90b      	cbnz	r3, 8019dba <__swbuf_r+0x12>
 8019db6:	f000 f9d1 	bl	801a15c <__sinit>
 8019dba:	4b21      	ldr	r3, [pc, #132]	; (8019e40 <__swbuf_r+0x98>)
 8019dbc:	429c      	cmp	r4, r3
 8019dbe:	d12b      	bne.n	8019e18 <__swbuf_r+0x70>
 8019dc0:	686c      	ldr	r4, [r5, #4]
 8019dc2:	69a3      	ldr	r3, [r4, #24]
 8019dc4:	60a3      	str	r3, [r4, #8]
 8019dc6:	89a3      	ldrh	r3, [r4, #12]
 8019dc8:	071a      	lsls	r2, r3, #28
 8019dca:	d52f      	bpl.n	8019e2c <__swbuf_r+0x84>
 8019dcc:	6923      	ldr	r3, [r4, #16]
 8019dce:	b36b      	cbz	r3, 8019e2c <__swbuf_r+0x84>
 8019dd0:	6923      	ldr	r3, [r4, #16]
 8019dd2:	6820      	ldr	r0, [r4, #0]
 8019dd4:	1ac0      	subs	r0, r0, r3
 8019dd6:	6963      	ldr	r3, [r4, #20]
 8019dd8:	b2f6      	uxtb	r6, r6
 8019dda:	4283      	cmp	r3, r0
 8019ddc:	4637      	mov	r7, r6
 8019dde:	dc04      	bgt.n	8019dea <__swbuf_r+0x42>
 8019de0:	4621      	mov	r1, r4
 8019de2:	4628      	mov	r0, r5
 8019de4:	f000 f926 	bl	801a034 <_fflush_r>
 8019de8:	bb30      	cbnz	r0, 8019e38 <__swbuf_r+0x90>
 8019dea:	68a3      	ldr	r3, [r4, #8]
 8019dec:	3b01      	subs	r3, #1
 8019dee:	60a3      	str	r3, [r4, #8]
 8019df0:	6823      	ldr	r3, [r4, #0]
 8019df2:	1c5a      	adds	r2, r3, #1
 8019df4:	6022      	str	r2, [r4, #0]
 8019df6:	701e      	strb	r6, [r3, #0]
 8019df8:	6963      	ldr	r3, [r4, #20]
 8019dfa:	3001      	adds	r0, #1
 8019dfc:	4283      	cmp	r3, r0
 8019dfe:	d004      	beq.n	8019e0a <__swbuf_r+0x62>
 8019e00:	89a3      	ldrh	r3, [r4, #12]
 8019e02:	07db      	lsls	r3, r3, #31
 8019e04:	d506      	bpl.n	8019e14 <__swbuf_r+0x6c>
 8019e06:	2e0a      	cmp	r6, #10
 8019e08:	d104      	bne.n	8019e14 <__swbuf_r+0x6c>
 8019e0a:	4621      	mov	r1, r4
 8019e0c:	4628      	mov	r0, r5
 8019e0e:	f000 f911 	bl	801a034 <_fflush_r>
 8019e12:	b988      	cbnz	r0, 8019e38 <__swbuf_r+0x90>
 8019e14:	4638      	mov	r0, r7
 8019e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e18:	4b0a      	ldr	r3, [pc, #40]	; (8019e44 <__swbuf_r+0x9c>)
 8019e1a:	429c      	cmp	r4, r3
 8019e1c:	d101      	bne.n	8019e22 <__swbuf_r+0x7a>
 8019e1e:	68ac      	ldr	r4, [r5, #8]
 8019e20:	e7cf      	b.n	8019dc2 <__swbuf_r+0x1a>
 8019e22:	4b09      	ldr	r3, [pc, #36]	; (8019e48 <__swbuf_r+0xa0>)
 8019e24:	429c      	cmp	r4, r3
 8019e26:	bf08      	it	eq
 8019e28:	68ec      	ldreq	r4, [r5, #12]
 8019e2a:	e7ca      	b.n	8019dc2 <__swbuf_r+0x1a>
 8019e2c:	4621      	mov	r1, r4
 8019e2e:	4628      	mov	r0, r5
 8019e30:	f000 f80c 	bl	8019e4c <__swsetup_r>
 8019e34:	2800      	cmp	r0, #0
 8019e36:	d0cb      	beq.n	8019dd0 <__swbuf_r+0x28>
 8019e38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019e3c:	e7ea      	b.n	8019e14 <__swbuf_r+0x6c>
 8019e3e:	bf00      	nop
 8019e40:	0801ab28 	.word	0x0801ab28
 8019e44:	0801ab48 	.word	0x0801ab48
 8019e48:	0801ab08 	.word	0x0801ab08

08019e4c <__swsetup_r>:
 8019e4c:	4b32      	ldr	r3, [pc, #200]	; (8019f18 <__swsetup_r+0xcc>)
 8019e4e:	b570      	push	{r4, r5, r6, lr}
 8019e50:	681d      	ldr	r5, [r3, #0]
 8019e52:	4606      	mov	r6, r0
 8019e54:	460c      	mov	r4, r1
 8019e56:	b125      	cbz	r5, 8019e62 <__swsetup_r+0x16>
 8019e58:	69ab      	ldr	r3, [r5, #24]
 8019e5a:	b913      	cbnz	r3, 8019e62 <__swsetup_r+0x16>
 8019e5c:	4628      	mov	r0, r5
 8019e5e:	f000 f97d 	bl	801a15c <__sinit>
 8019e62:	4b2e      	ldr	r3, [pc, #184]	; (8019f1c <__swsetup_r+0xd0>)
 8019e64:	429c      	cmp	r4, r3
 8019e66:	d10f      	bne.n	8019e88 <__swsetup_r+0x3c>
 8019e68:	686c      	ldr	r4, [r5, #4]
 8019e6a:	89a3      	ldrh	r3, [r4, #12]
 8019e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019e70:	0719      	lsls	r1, r3, #28
 8019e72:	d42c      	bmi.n	8019ece <__swsetup_r+0x82>
 8019e74:	06dd      	lsls	r5, r3, #27
 8019e76:	d411      	bmi.n	8019e9c <__swsetup_r+0x50>
 8019e78:	2309      	movs	r3, #9
 8019e7a:	6033      	str	r3, [r6, #0]
 8019e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019e80:	81a3      	strh	r3, [r4, #12]
 8019e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019e86:	e03e      	b.n	8019f06 <__swsetup_r+0xba>
 8019e88:	4b25      	ldr	r3, [pc, #148]	; (8019f20 <__swsetup_r+0xd4>)
 8019e8a:	429c      	cmp	r4, r3
 8019e8c:	d101      	bne.n	8019e92 <__swsetup_r+0x46>
 8019e8e:	68ac      	ldr	r4, [r5, #8]
 8019e90:	e7eb      	b.n	8019e6a <__swsetup_r+0x1e>
 8019e92:	4b24      	ldr	r3, [pc, #144]	; (8019f24 <__swsetup_r+0xd8>)
 8019e94:	429c      	cmp	r4, r3
 8019e96:	bf08      	it	eq
 8019e98:	68ec      	ldreq	r4, [r5, #12]
 8019e9a:	e7e6      	b.n	8019e6a <__swsetup_r+0x1e>
 8019e9c:	0758      	lsls	r0, r3, #29
 8019e9e:	d512      	bpl.n	8019ec6 <__swsetup_r+0x7a>
 8019ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ea2:	b141      	cbz	r1, 8019eb6 <__swsetup_r+0x6a>
 8019ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ea8:	4299      	cmp	r1, r3
 8019eaa:	d002      	beq.n	8019eb2 <__swsetup_r+0x66>
 8019eac:	4630      	mov	r0, r6
 8019eae:	f000 fa5b 	bl	801a368 <_free_r>
 8019eb2:	2300      	movs	r3, #0
 8019eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8019eb6:	89a3      	ldrh	r3, [r4, #12]
 8019eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019ebc:	81a3      	strh	r3, [r4, #12]
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	6063      	str	r3, [r4, #4]
 8019ec2:	6923      	ldr	r3, [r4, #16]
 8019ec4:	6023      	str	r3, [r4, #0]
 8019ec6:	89a3      	ldrh	r3, [r4, #12]
 8019ec8:	f043 0308 	orr.w	r3, r3, #8
 8019ecc:	81a3      	strh	r3, [r4, #12]
 8019ece:	6923      	ldr	r3, [r4, #16]
 8019ed0:	b94b      	cbnz	r3, 8019ee6 <__swsetup_r+0x9a>
 8019ed2:	89a3      	ldrh	r3, [r4, #12]
 8019ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019edc:	d003      	beq.n	8019ee6 <__swsetup_r+0x9a>
 8019ede:	4621      	mov	r1, r4
 8019ee0:	4630      	mov	r0, r6
 8019ee2:	f000 fa01 	bl	801a2e8 <__smakebuf_r>
 8019ee6:	89a0      	ldrh	r0, [r4, #12]
 8019ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019eec:	f010 0301 	ands.w	r3, r0, #1
 8019ef0:	d00a      	beq.n	8019f08 <__swsetup_r+0xbc>
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	60a3      	str	r3, [r4, #8]
 8019ef6:	6963      	ldr	r3, [r4, #20]
 8019ef8:	425b      	negs	r3, r3
 8019efa:	61a3      	str	r3, [r4, #24]
 8019efc:	6923      	ldr	r3, [r4, #16]
 8019efe:	b943      	cbnz	r3, 8019f12 <__swsetup_r+0xc6>
 8019f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019f04:	d1ba      	bne.n	8019e7c <__swsetup_r+0x30>
 8019f06:	bd70      	pop	{r4, r5, r6, pc}
 8019f08:	0781      	lsls	r1, r0, #30
 8019f0a:	bf58      	it	pl
 8019f0c:	6963      	ldrpl	r3, [r4, #20]
 8019f0e:	60a3      	str	r3, [r4, #8]
 8019f10:	e7f4      	b.n	8019efc <__swsetup_r+0xb0>
 8019f12:	2000      	movs	r0, #0
 8019f14:	e7f7      	b.n	8019f06 <__swsetup_r+0xba>
 8019f16:	bf00      	nop
 8019f18:	240000a4 	.word	0x240000a4
 8019f1c:	0801ab28 	.word	0x0801ab28
 8019f20:	0801ab48 	.word	0x0801ab48
 8019f24:	0801ab08 	.word	0x0801ab08

08019f28 <__sflush_r>:
 8019f28:	898a      	ldrh	r2, [r1, #12]
 8019f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f2e:	4605      	mov	r5, r0
 8019f30:	0710      	lsls	r0, r2, #28
 8019f32:	460c      	mov	r4, r1
 8019f34:	d458      	bmi.n	8019fe8 <__sflush_r+0xc0>
 8019f36:	684b      	ldr	r3, [r1, #4]
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	dc05      	bgt.n	8019f48 <__sflush_r+0x20>
 8019f3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	dc02      	bgt.n	8019f48 <__sflush_r+0x20>
 8019f42:	2000      	movs	r0, #0
 8019f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019f4a:	2e00      	cmp	r6, #0
 8019f4c:	d0f9      	beq.n	8019f42 <__sflush_r+0x1a>
 8019f4e:	2300      	movs	r3, #0
 8019f50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019f54:	682f      	ldr	r7, [r5, #0]
 8019f56:	602b      	str	r3, [r5, #0]
 8019f58:	d032      	beq.n	8019fc0 <__sflush_r+0x98>
 8019f5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019f5c:	89a3      	ldrh	r3, [r4, #12]
 8019f5e:	075a      	lsls	r2, r3, #29
 8019f60:	d505      	bpl.n	8019f6e <__sflush_r+0x46>
 8019f62:	6863      	ldr	r3, [r4, #4]
 8019f64:	1ac0      	subs	r0, r0, r3
 8019f66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019f68:	b10b      	cbz	r3, 8019f6e <__sflush_r+0x46>
 8019f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019f6c:	1ac0      	subs	r0, r0, r3
 8019f6e:	2300      	movs	r3, #0
 8019f70:	4602      	mov	r2, r0
 8019f72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019f74:	6a21      	ldr	r1, [r4, #32]
 8019f76:	4628      	mov	r0, r5
 8019f78:	47b0      	blx	r6
 8019f7a:	1c43      	adds	r3, r0, #1
 8019f7c:	89a3      	ldrh	r3, [r4, #12]
 8019f7e:	d106      	bne.n	8019f8e <__sflush_r+0x66>
 8019f80:	6829      	ldr	r1, [r5, #0]
 8019f82:	291d      	cmp	r1, #29
 8019f84:	d82c      	bhi.n	8019fe0 <__sflush_r+0xb8>
 8019f86:	4a2a      	ldr	r2, [pc, #168]	; (801a030 <__sflush_r+0x108>)
 8019f88:	40ca      	lsrs	r2, r1
 8019f8a:	07d6      	lsls	r6, r2, #31
 8019f8c:	d528      	bpl.n	8019fe0 <__sflush_r+0xb8>
 8019f8e:	2200      	movs	r2, #0
 8019f90:	6062      	str	r2, [r4, #4]
 8019f92:	04d9      	lsls	r1, r3, #19
 8019f94:	6922      	ldr	r2, [r4, #16]
 8019f96:	6022      	str	r2, [r4, #0]
 8019f98:	d504      	bpl.n	8019fa4 <__sflush_r+0x7c>
 8019f9a:	1c42      	adds	r2, r0, #1
 8019f9c:	d101      	bne.n	8019fa2 <__sflush_r+0x7a>
 8019f9e:	682b      	ldr	r3, [r5, #0]
 8019fa0:	b903      	cbnz	r3, 8019fa4 <__sflush_r+0x7c>
 8019fa2:	6560      	str	r0, [r4, #84]	; 0x54
 8019fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019fa6:	602f      	str	r7, [r5, #0]
 8019fa8:	2900      	cmp	r1, #0
 8019faa:	d0ca      	beq.n	8019f42 <__sflush_r+0x1a>
 8019fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019fb0:	4299      	cmp	r1, r3
 8019fb2:	d002      	beq.n	8019fba <__sflush_r+0x92>
 8019fb4:	4628      	mov	r0, r5
 8019fb6:	f000 f9d7 	bl	801a368 <_free_r>
 8019fba:	2000      	movs	r0, #0
 8019fbc:	6360      	str	r0, [r4, #52]	; 0x34
 8019fbe:	e7c1      	b.n	8019f44 <__sflush_r+0x1c>
 8019fc0:	6a21      	ldr	r1, [r4, #32]
 8019fc2:	2301      	movs	r3, #1
 8019fc4:	4628      	mov	r0, r5
 8019fc6:	47b0      	blx	r6
 8019fc8:	1c41      	adds	r1, r0, #1
 8019fca:	d1c7      	bne.n	8019f5c <__sflush_r+0x34>
 8019fcc:	682b      	ldr	r3, [r5, #0]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d0c4      	beq.n	8019f5c <__sflush_r+0x34>
 8019fd2:	2b1d      	cmp	r3, #29
 8019fd4:	d001      	beq.n	8019fda <__sflush_r+0xb2>
 8019fd6:	2b16      	cmp	r3, #22
 8019fd8:	d101      	bne.n	8019fde <__sflush_r+0xb6>
 8019fda:	602f      	str	r7, [r5, #0]
 8019fdc:	e7b1      	b.n	8019f42 <__sflush_r+0x1a>
 8019fde:	89a3      	ldrh	r3, [r4, #12]
 8019fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019fe4:	81a3      	strh	r3, [r4, #12]
 8019fe6:	e7ad      	b.n	8019f44 <__sflush_r+0x1c>
 8019fe8:	690f      	ldr	r7, [r1, #16]
 8019fea:	2f00      	cmp	r7, #0
 8019fec:	d0a9      	beq.n	8019f42 <__sflush_r+0x1a>
 8019fee:	0793      	lsls	r3, r2, #30
 8019ff0:	680e      	ldr	r6, [r1, #0]
 8019ff2:	bf08      	it	eq
 8019ff4:	694b      	ldreq	r3, [r1, #20]
 8019ff6:	600f      	str	r7, [r1, #0]
 8019ff8:	bf18      	it	ne
 8019ffa:	2300      	movne	r3, #0
 8019ffc:	eba6 0807 	sub.w	r8, r6, r7
 801a000:	608b      	str	r3, [r1, #8]
 801a002:	f1b8 0f00 	cmp.w	r8, #0
 801a006:	dd9c      	ble.n	8019f42 <__sflush_r+0x1a>
 801a008:	6a21      	ldr	r1, [r4, #32]
 801a00a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a00c:	4643      	mov	r3, r8
 801a00e:	463a      	mov	r2, r7
 801a010:	4628      	mov	r0, r5
 801a012:	47b0      	blx	r6
 801a014:	2800      	cmp	r0, #0
 801a016:	dc06      	bgt.n	801a026 <__sflush_r+0xfe>
 801a018:	89a3      	ldrh	r3, [r4, #12]
 801a01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a01e:	81a3      	strh	r3, [r4, #12]
 801a020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a024:	e78e      	b.n	8019f44 <__sflush_r+0x1c>
 801a026:	4407      	add	r7, r0
 801a028:	eba8 0800 	sub.w	r8, r8, r0
 801a02c:	e7e9      	b.n	801a002 <__sflush_r+0xda>
 801a02e:	bf00      	nop
 801a030:	20400001 	.word	0x20400001

0801a034 <_fflush_r>:
 801a034:	b538      	push	{r3, r4, r5, lr}
 801a036:	690b      	ldr	r3, [r1, #16]
 801a038:	4605      	mov	r5, r0
 801a03a:	460c      	mov	r4, r1
 801a03c:	b913      	cbnz	r3, 801a044 <_fflush_r+0x10>
 801a03e:	2500      	movs	r5, #0
 801a040:	4628      	mov	r0, r5
 801a042:	bd38      	pop	{r3, r4, r5, pc}
 801a044:	b118      	cbz	r0, 801a04e <_fflush_r+0x1a>
 801a046:	6983      	ldr	r3, [r0, #24]
 801a048:	b90b      	cbnz	r3, 801a04e <_fflush_r+0x1a>
 801a04a:	f000 f887 	bl	801a15c <__sinit>
 801a04e:	4b14      	ldr	r3, [pc, #80]	; (801a0a0 <_fflush_r+0x6c>)
 801a050:	429c      	cmp	r4, r3
 801a052:	d11b      	bne.n	801a08c <_fflush_r+0x58>
 801a054:	686c      	ldr	r4, [r5, #4]
 801a056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d0ef      	beq.n	801a03e <_fflush_r+0xa>
 801a05e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a060:	07d0      	lsls	r0, r2, #31
 801a062:	d404      	bmi.n	801a06e <_fflush_r+0x3a>
 801a064:	0599      	lsls	r1, r3, #22
 801a066:	d402      	bmi.n	801a06e <_fflush_r+0x3a>
 801a068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a06a:	f000 f915 	bl	801a298 <__retarget_lock_acquire_recursive>
 801a06e:	4628      	mov	r0, r5
 801a070:	4621      	mov	r1, r4
 801a072:	f7ff ff59 	bl	8019f28 <__sflush_r>
 801a076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a078:	07da      	lsls	r2, r3, #31
 801a07a:	4605      	mov	r5, r0
 801a07c:	d4e0      	bmi.n	801a040 <_fflush_r+0xc>
 801a07e:	89a3      	ldrh	r3, [r4, #12]
 801a080:	059b      	lsls	r3, r3, #22
 801a082:	d4dd      	bmi.n	801a040 <_fflush_r+0xc>
 801a084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a086:	f000 f908 	bl	801a29a <__retarget_lock_release_recursive>
 801a08a:	e7d9      	b.n	801a040 <_fflush_r+0xc>
 801a08c:	4b05      	ldr	r3, [pc, #20]	; (801a0a4 <_fflush_r+0x70>)
 801a08e:	429c      	cmp	r4, r3
 801a090:	d101      	bne.n	801a096 <_fflush_r+0x62>
 801a092:	68ac      	ldr	r4, [r5, #8]
 801a094:	e7df      	b.n	801a056 <_fflush_r+0x22>
 801a096:	4b04      	ldr	r3, [pc, #16]	; (801a0a8 <_fflush_r+0x74>)
 801a098:	429c      	cmp	r4, r3
 801a09a:	bf08      	it	eq
 801a09c:	68ec      	ldreq	r4, [r5, #12]
 801a09e:	e7da      	b.n	801a056 <_fflush_r+0x22>
 801a0a0:	0801ab28 	.word	0x0801ab28
 801a0a4:	0801ab48 	.word	0x0801ab48
 801a0a8:	0801ab08 	.word	0x0801ab08

0801a0ac <std>:
 801a0ac:	2300      	movs	r3, #0
 801a0ae:	b510      	push	{r4, lr}
 801a0b0:	4604      	mov	r4, r0
 801a0b2:	e9c0 3300 	strd	r3, r3, [r0]
 801a0b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a0ba:	6083      	str	r3, [r0, #8]
 801a0bc:	8181      	strh	r1, [r0, #12]
 801a0be:	6643      	str	r3, [r0, #100]	; 0x64
 801a0c0:	81c2      	strh	r2, [r0, #14]
 801a0c2:	6183      	str	r3, [r0, #24]
 801a0c4:	4619      	mov	r1, r3
 801a0c6:	2208      	movs	r2, #8
 801a0c8:	305c      	adds	r0, #92	; 0x5c
 801a0ca:	f7ff fdef 	bl	8019cac <memset>
 801a0ce:	4b05      	ldr	r3, [pc, #20]	; (801a0e4 <std+0x38>)
 801a0d0:	6263      	str	r3, [r4, #36]	; 0x24
 801a0d2:	4b05      	ldr	r3, [pc, #20]	; (801a0e8 <std+0x3c>)
 801a0d4:	62a3      	str	r3, [r4, #40]	; 0x28
 801a0d6:	4b05      	ldr	r3, [pc, #20]	; (801a0ec <std+0x40>)
 801a0d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a0da:	4b05      	ldr	r3, [pc, #20]	; (801a0f0 <std+0x44>)
 801a0dc:	6224      	str	r4, [r4, #32]
 801a0de:	6323      	str	r3, [r4, #48]	; 0x30
 801a0e0:	bd10      	pop	{r4, pc}
 801a0e2:	bf00      	nop
 801a0e4:	0801a549 	.word	0x0801a549
 801a0e8:	0801a56b 	.word	0x0801a56b
 801a0ec:	0801a5a3 	.word	0x0801a5a3
 801a0f0:	0801a5c7 	.word	0x0801a5c7

0801a0f4 <_cleanup_r>:
 801a0f4:	4901      	ldr	r1, [pc, #4]	; (801a0fc <_cleanup_r+0x8>)
 801a0f6:	f000 b8af 	b.w	801a258 <_fwalk_reent>
 801a0fa:	bf00      	nop
 801a0fc:	0801a035 	.word	0x0801a035

0801a100 <__sfmoreglue>:
 801a100:	b570      	push	{r4, r5, r6, lr}
 801a102:	2268      	movs	r2, #104	; 0x68
 801a104:	1e4d      	subs	r5, r1, #1
 801a106:	4355      	muls	r5, r2
 801a108:	460e      	mov	r6, r1
 801a10a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a10e:	f000 f997 	bl	801a440 <_malloc_r>
 801a112:	4604      	mov	r4, r0
 801a114:	b140      	cbz	r0, 801a128 <__sfmoreglue+0x28>
 801a116:	2100      	movs	r1, #0
 801a118:	e9c0 1600 	strd	r1, r6, [r0]
 801a11c:	300c      	adds	r0, #12
 801a11e:	60a0      	str	r0, [r4, #8]
 801a120:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a124:	f7ff fdc2 	bl	8019cac <memset>
 801a128:	4620      	mov	r0, r4
 801a12a:	bd70      	pop	{r4, r5, r6, pc}

0801a12c <__sfp_lock_acquire>:
 801a12c:	4801      	ldr	r0, [pc, #4]	; (801a134 <__sfp_lock_acquire+0x8>)
 801a12e:	f000 b8b3 	b.w	801a298 <__retarget_lock_acquire_recursive>
 801a132:	bf00      	nop
 801a134:	2400690d 	.word	0x2400690d

0801a138 <__sfp_lock_release>:
 801a138:	4801      	ldr	r0, [pc, #4]	; (801a140 <__sfp_lock_release+0x8>)
 801a13a:	f000 b8ae 	b.w	801a29a <__retarget_lock_release_recursive>
 801a13e:	bf00      	nop
 801a140:	2400690d 	.word	0x2400690d

0801a144 <__sinit_lock_acquire>:
 801a144:	4801      	ldr	r0, [pc, #4]	; (801a14c <__sinit_lock_acquire+0x8>)
 801a146:	f000 b8a7 	b.w	801a298 <__retarget_lock_acquire_recursive>
 801a14a:	bf00      	nop
 801a14c:	2400690e 	.word	0x2400690e

0801a150 <__sinit_lock_release>:
 801a150:	4801      	ldr	r0, [pc, #4]	; (801a158 <__sinit_lock_release+0x8>)
 801a152:	f000 b8a2 	b.w	801a29a <__retarget_lock_release_recursive>
 801a156:	bf00      	nop
 801a158:	2400690e 	.word	0x2400690e

0801a15c <__sinit>:
 801a15c:	b510      	push	{r4, lr}
 801a15e:	4604      	mov	r4, r0
 801a160:	f7ff fff0 	bl	801a144 <__sinit_lock_acquire>
 801a164:	69a3      	ldr	r3, [r4, #24]
 801a166:	b11b      	cbz	r3, 801a170 <__sinit+0x14>
 801a168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a16c:	f7ff bff0 	b.w	801a150 <__sinit_lock_release>
 801a170:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a174:	6523      	str	r3, [r4, #80]	; 0x50
 801a176:	4b13      	ldr	r3, [pc, #76]	; (801a1c4 <__sinit+0x68>)
 801a178:	4a13      	ldr	r2, [pc, #76]	; (801a1c8 <__sinit+0x6c>)
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a17e:	42a3      	cmp	r3, r4
 801a180:	bf04      	itt	eq
 801a182:	2301      	moveq	r3, #1
 801a184:	61a3      	streq	r3, [r4, #24]
 801a186:	4620      	mov	r0, r4
 801a188:	f000 f820 	bl	801a1cc <__sfp>
 801a18c:	6060      	str	r0, [r4, #4]
 801a18e:	4620      	mov	r0, r4
 801a190:	f000 f81c 	bl	801a1cc <__sfp>
 801a194:	60a0      	str	r0, [r4, #8]
 801a196:	4620      	mov	r0, r4
 801a198:	f000 f818 	bl	801a1cc <__sfp>
 801a19c:	2200      	movs	r2, #0
 801a19e:	60e0      	str	r0, [r4, #12]
 801a1a0:	2104      	movs	r1, #4
 801a1a2:	6860      	ldr	r0, [r4, #4]
 801a1a4:	f7ff ff82 	bl	801a0ac <std>
 801a1a8:	68a0      	ldr	r0, [r4, #8]
 801a1aa:	2201      	movs	r2, #1
 801a1ac:	2109      	movs	r1, #9
 801a1ae:	f7ff ff7d 	bl	801a0ac <std>
 801a1b2:	68e0      	ldr	r0, [r4, #12]
 801a1b4:	2202      	movs	r2, #2
 801a1b6:	2112      	movs	r1, #18
 801a1b8:	f7ff ff78 	bl	801a0ac <std>
 801a1bc:	2301      	movs	r3, #1
 801a1be:	61a3      	str	r3, [r4, #24]
 801a1c0:	e7d2      	b.n	801a168 <__sinit+0xc>
 801a1c2:	bf00      	nop
 801a1c4:	0801ab04 	.word	0x0801ab04
 801a1c8:	0801a0f5 	.word	0x0801a0f5

0801a1cc <__sfp>:
 801a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1ce:	4607      	mov	r7, r0
 801a1d0:	f7ff ffac 	bl	801a12c <__sfp_lock_acquire>
 801a1d4:	4b1e      	ldr	r3, [pc, #120]	; (801a250 <__sfp+0x84>)
 801a1d6:	681e      	ldr	r6, [r3, #0]
 801a1d8:	69b3      	ldr	r3, [r6, #24]
 801a1da:	b913      	cbnz	r3, 801a1e2 <__sfp+0x16>
 801a1dc:	4630      	mov	r0, r6
 801a1de:	f7ff ffbd 	bl	801a15c <__sinit>
 801a1e2:	3648      	adds	r6, #72	; 0x48
 801a1e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a1e8:	3b01      	subs	r3, #1
 801a1ea:	d503      	bpl.n	801a1f4 <__sfp+0x28>
 801a1ec:	6833      	ldr	r3, [r6, #0]
 801a1ee:	b30b      	cbz	r3, 801a234 <__sfp+0x68>
 801a1f0:	6836      	ldr	r6, [r6, #0]
 801a1f2:	e7f7      	b.n	801a1e4 <__sfp+0x18>
 801a1f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a1f8:	b9d5      	cbnz	r5, 801a230 <__sfp+0x64>
 801a1fa:	4b16      	ldr	r3, [pc, #88]	; (801a254 <__sfp+0x88>)
 801a1fc:	60e3      	str	r3, [r4, #12]
 801a1fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a202:	6665      	str	r5, [r4, #100]	; 0x64
 801a204:	f000 f847 	bl	801a296 <__retarget_lock_init_recursive>
 801a208:	f7ff ff96 	bl	801a138 <__sfp_lock_release>
 801a20c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a210:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a214:	6025      	str	r5, [r4, #0]
 801a216:	61a5      	str	r5, [r4, #24]
 801a218:	2208      	movs	r2, #8
 801a21a:	4629      	mov	r1, r5
 801a21c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a220:	f7ff fd44 	bl	8019cac <memset>
 801a224:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a228:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a22c:	4620      	mov	r0, r4
 801a22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a230:	3468      	adds	r4, #104	; 0x68
 801a232:	e7d9      	b.n	801a1e8 <__sfp+0x1c>
 801a234:	2104      	movs	r1, #4
 801a236:	4638      	mov	r0, r7
 801a238:	f7ff ff62 	bl	801a100 <__sfmoreglue>
 801a23c:	4604      	mov	r4, r0
 801a23e:	6030      	str	r0, [r6, #0]
 801a240:	2800      	cmp	r0, #0
 801a242:	d1d5      	bne.n	801a1f0 <__sfp+0x24>
 801a244:	f7ff ff78 	bl	801a138 <__sfp_lock_release>
 801a248:	230c      	movs	r3, #12
 801a24a:	603b      	str	r3, [r7, #0]
 801a24c:	e7ee      	b.n	801a22c <__sfp+0x60>
 801a24e:	bf00      	nop
 801a250:	0801ab04 	.word	0x0801ab04
 801a254:	ffff0001 	.word	0xffff0001

0801a258 <_fwalk_reent>:
 801a258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a25c:	4606      	mov	r6, r0
 801a25e:	4688      	mov	r8, r1
 801a260:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a264:	2700      	movs	r7, #0
 801a266:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a26a:	f1b9 0901 	subs.w	r9, r9, #1
 801a26e:	d505      	bpl.n	801a27c <_fwalk_reent+0x24>
 801a270:	6824      	ldr	r4, [r4, #0]
 801a272:	2c00      	cmp	r4, #0
 801a274:	d1f7      	bne.n	801a266 <_fwalk_reent+0xe>
 801a276:	4638      	mov	r0, r7
 801a278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a27c:	89ab      	ldrh	r3, [r5, #12]
 801a27e:	2b01      	cmp	r3, #1
 801a280:	d907      	bls.n	801a292 <_fwalk_reent+0x3a>
 801a282:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a286:	3301      	adds	r3, #1
 801a288:	d003      	beq.n	801a292 <_fwalk_reent+0x3a>
 801a28a:	4629      	mov	r1, r5
 801a28c:	4630      	mov	r0, r6
 801a28e:	47c0      	blx	r8
 801a290:	4307      	orrs	r7, r0
 801a292:	3568      	adds	r5, #104	; 0x68
 801a294:	e7e9      	b.n	801a26a <_fwalk_reent+0x12>

0801a296 <__retarget_lock_init_recursive>:
 801a296:	4770      	bx	lr

0801a298 <__retarget_lock_acquire_recursive>:
 801a298:	4770      	bx	lr

0801a29a <__retarget_lock_release_recursive>:
 801a29a:	4770      	bx	lr

0801a29c <__swhatbuf_r>:
 801a29c:	b570      	push	{r4, r5, r6, lr}
 801a29e:	460e      	mov	r6, r1
 801a2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2a4:	2900      	cmp	r1, #0
 801a2a6:	b096      	sub	sp, #88	; 0x58
 801a2a8:	4614      	mov	r4, r2
 801a2aa:	461d      	mov	r5, r3
 801a2ac:	da08      	bge.n	801a2c0 <__swhatbuf_r+0x24>
 801a2ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a2b2:	2200      	movs	r2, #0
 801a2b4:	602a      	str	r2, [r5, #0]
 801a2b6:	061a      	lsls	r2, r3, #24
 801a2b8:	d410      	bmi.n	801a2dc <__swhatbuf_r+0x40>
 801a2ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a2be:	e00e      	b.n	801a2de <__swhatbuf_r+0x42>
 801a2c0:	466a      	mov	r2, sp
 801a2c2:	f000 f9a7 	bl	801a614 <_fstat_r>
 801a2c6:	2800      	cmp	r0, #0
 801a2c8:	dbf1      	blt.n	801a2ae <__swhatbuf_r+0x12>
 801a2ca:	9a01      	ldr	r2, [sp, #4]
 801a2cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a2d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a2d4:	425a      	negs	r2, r3
 801a2d6:	415a      	adcs	r2, r3
 801a2d8:	602a      	str	r2, [r5, #0]
 801a2da:	e7ee      	b.n	801a2ba <__swhatbuf_r+0x1e>
 801a2dc:	2340      	movs	r3, #64	; 0x40
 801a2de:	2000      	movs	r0, #0
 801a2e0:	6023      	str	r3, [r4, #0]
 801a2e2:	b016      	add	sp, #88	; 0x58
 801a2e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a2e8 <__smakebuf_r>:
 801a2e8:	898b      	ldrh	r3, [r1, #12]
 801a2ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a2ec:	079d      	lsls	r5, r3, #30
 801a2ee:	4606      	mov	r6, r0
 801a2f0:	460c      	mov	r4, r1
 801a2f2:	d507      	bpl.n	801a304 <__smakebuf_r+0x1c>
 801a2f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a2f8:	6023      	str	r3, [r4, #0]
 801a2fa:	6123      	str	r3, [r4, #16]
 801a2fc:	2301      	movs	r3, #1
 801a2fe:	6163      	str	r3, [r4, #20]
 801a300:	b002      	add	sp, #8
 801a302:	bd70      	pop	{r4, r5, r6, pc}
 801a304:	ab01      	add	r3, sp, #4
 801a306:	466a      	mov	r2, sp
 801a308:	f7ff ffc8 	bl	801a29c <__swhatbuf_r>
 801a30c:	9900      	ldr	r1, [sp, #0]
 801a30e:	4605      	mov	r5, r0
 801a310:	4630      	mov	r0, r6
 801a312:	f000 f895 	bl	801a440 <_malloc_r>
 801a316:	b948      	cbnz	r0, 801a32c <__smakebuf_r+0x44>
 801a318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a31c:	059a      	lsls	r2, r3, #22
 801a31e:	d4ef      	bmi.n	801a300 <__smakebuf_r+0x18>
 801a320:	f023 0303 	bic.w	r3, r3, #3
 801a324:	f043 0302 	orr.w	r3, r3, #2
 801a328:	81a3      	strh	r3, [r4, #12]
 801a32a:	e7e3      	b.n	801a2f4 <__smakebuf_r+0xc>
 801a32c:	4b0d      	ldr	r3, [pc, #52]	; (801a364 <__smakebuf_r+0x7c>)
 801a32e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a330:	89a3      	ldrh	r3, [r4, #12]
 801a332:	6020      	str	r0, [r4, #0]
 801a334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a338:	81a3      	strh	r3, [r4, #12]
 801a33a:	9b00      	ldr	r3, [sp, #0]
 801a33c:	6163      	str	r3, [r4, #20]
 801a33e:	9b01      	ldr	r3, [sp, #4]
 801a340:	6120      	str	r0, [r4, #16]
 801a342:	b15b      	cbz	r3, 801a35c <__smakebuf_r+0x74>
 801a344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a348:	4630      	mov	r0, r6
 801a34a:	f000 f975 	bl	801a638 <_isatty_r>
 801a34e:	b128      	cbz	r0, 801a35c <__smakebuf_r+0x74>
 801a350:	89a3      	ldrh	r3, [r4, #12]
 801a352:	f023 0303 	bic.w	r3, r3, #3
 801a356:	f043 0301 	orr.w	r3, r3, #1
 801a35a:	81a3      	strh	r3, [r4, #12]
 801a35c:	89a0      	ldrh	r0, [r4, #12]
 801a35e:	4305      	orrs	r5, r0
 801a360:	81a5      	strh	r5, [r4, #12]
 801a362:	e7cd      	b.n	801a300 <__smakebuf_r+0x18>
 801a364:	0801a0f5 	.word	0x0801a0f5

0801a368 <_free_r>:
 801a368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a36a:	2900      	cmp	r1, #0
 801a36c:	d044      	beq.n	801a3f8 <_free_r+0x90>
 801a36e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a372:	9001      	str	r0, [sp, #4]
 801a374:	2b00      	cmp	r3, #0
 801a376:	f1a1 0404 	sub.w	r4, r1, #4
 801a37a:	bfb8      	it	lt
 801a37c:	18e4      	addlt	r4, r4, r3
 801a37e:	f000 f97d 	bl	801a67c <__malloc_lock>
 801a382:	4a1e      	ldr	r2, [pc, #120]	; (801a3fc <_free_r+0x94>)
 801a384:	9801      	ldr	r0, [sp, #4]
 801a386:	6813      	ldr	r3, [r2, #0]
 801a388:	b933      	cbnz	r3, 801a398 <_free_r+0x30>
 801a38a:	6063      	str	r3, [r4, #4]
 801a38c:	6014      	str	r4, [r2, #0]
 801a38e:	b003      	add	sp, #12
 801a390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a394:	f000 b978 	b.w	801a688 <__malloc_unlock>
 801a398:	42a3      	cmp	r3, r4
 801a39a:	d908      	bls.n	801a3ae <_free_r+0x46>
 801a39c:	6825      	ldr	r5, [r4, #0]
 801a39e:	1961      	adds	r1, r4, r5
 801a3a0:	428b      	cmp	r3, r1
 801a3a2:	bf01      	itttt	eq
 801a3a4:	6819      	ldreq	r1, [r3, #0]
 801a3a6:	685b      	ldreq	r3, [r3, #4]
 801a3a8:	1949      	addeq	r1, r1, r5
 801a3aa:	6021      	streq	r1, [r4, #0]
 801a3ac:	e7ed      	b.n	801a38a <_free_r+0x22>
 801a3ae:	461a      	mov	r2, r3
 801a3b0:	685b      	ldr	r3, [r3, #4]
 801a3b2:	b10b      	cbz	r3, 801a3b8 <_free_r+0x50>
 801a3b4:	42a3      	cmp	r3, r4
 801a3b6:	d9fa      	bls.n	801a3ae <_free_r+0x46>
 801a3b8:	6811      	ldr	r1, [r2, #0]
 801a3ba:	1855      	adds	r5, r2, r1
 801a3bc:	42a5      	cmp	r5, r4
 801a3be:	d10b      	bne.n	801a3d8 <_free_r+0x70>
 801a3c0:	6824      	ldr	r4, [r4, #0]
 801a3c2:	4421      	add	r1, r4
 801a3c4:	1854      	adds	r4, r2, r1
 801a3c6:	42a3      	cmp	r3, r4
 801a3c8:	6011      	str	r1, [r2, #0]
 801a3ca:	d1e0      	bne.n	801a38e <_free_r+0x26>
 801a3cc:	681c      	ldr	r4, [r3, #0]
 801a3ce:	685b      	ldr	r3, [r3, #4]
 801a3d0:	6053      	str	r3, [r2, #4]
 801a3d2:	4421      	add	r1, r4
 801a3d4:	6011      	str	r1, [r2, #0]
 801a3d6:	e7da      	b.n	801a38e <_free_r+0x26>
 801a3d8:	d902      	bls.n	801a3e0 <_free_r+0x78>
 801a3da:	230c      	movs	r3, #12
 801a3dc:	6003      	str	r3, [r0, #0]
 801a3de:	e7d6      	b.n	801a38e <_free_r+0x26>
 801a3e0:	6825      	ldr	r5, [r4, #0]
 801a3e2:	1961      	adds	r1, r4, r5
 801a3e4:	428b      	cmp	r3, r1
 801a3e6:	bf04      	itt	eq
 801a3e8:	6819      	ldreq	r1, [r3, #0]
 801a3ea:	685b      	ldreq	r3, [r3, #4]
 801a3ec:	6063      	str	r3, [r4, #4]
 801a3ee:	bf04      	itt	eq
 801a3f0:	1949      	addeq	r1, r1, r5
 801a3f2:	6021      	streq	r1, [r4, #0]
 801a3f4:	6054      	str	r4, [r2, #4]
 801a3f6:	e7ca      	b.n	801a38e <_free_r+0x26>
 801a3f8:	b003      	add	sp, #12
 801a3fa:	bd30      	pop	{r4, r5, pc}
 801a3fc:	24006910 	.word	0x24006910

0801a400 <sbrk_aligned>:
 801a400:	b570      	push	{r4, r5, r6, lr}
 801a402:	4e0e      	ldr	r6, [pc, #56]	; (801a43c <sbrk_aligned+0x3c>)
 801a404:	460c      	mov	r4, r1
 801a406:	6831      	ldr	r1, [r6, #0]
 801a408:	4605      	mov	r5, r0
 801a40a:	b911      	cbnz	r1, 801a412 <sbrk_aligned+0x12>
 801a40c:	f000 f88c 	bl	801a528 <_sbrk_r>
 801a410:	6030      	str	r0, [r6, #0]
 801a412:	4621      	mov	r1, r4
 801a414:	4628      	mov	r0, r5
 801a416:	f000 f887 	bl	801a528 <_sbrk_r>
 801a41a:	1c43      	adds	r3, r0, #1
 801a41c:	d00a      	beq.n	801a434 <sbrk_aligned+0x34>
 801a41e:	1cc4      	adds	r4, r0, #3
 801a420:	f024 0403 	bic.w	r4, r4, #3
 801a424:	42a0      	cmp	r0, r4
 801a426:	d007      	beq.n	801a438 <sbrk_aligned+0x38>
 801a428:	1a21      	subs	r1, r4, r0
 801a42a:	4628      	mov	r0, r5
 801a42c:	f000 f87c 	bl	801a528 <_sbrk_r>
 801a430:	3001      	adds	r0, #1
 801a432:	d101      	bne.n	801a438 <sbrk_aligned+0x38>
 801a434:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a438:	4620      	mov	r0, r4
 801a43a:	bd70      	pop	{r4, r5, r6, pc}
 801a43c:	24006914 	.word	0x24006914

0801a440 <_malloc_r>:
 801a440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a444:	1ccd      	adds	r5, r1, #3
 801a446:	f025 0503 	bic.w	r5, r5, #3
 801a44a:	3508      	adds	r5, #8
 801a44c:	2d0c      	cmp	r5, #12
 801a44e:	bf38      	it	cc
 801a450:	250c      	movcc	r5, #12
 801a452:	2d00      	cmp	r5, #0
 801a454:	4607      	mov	r7, r0
 801a456:	db01      	blt.n	801a45c <_malloc_r+0x1c>
 801a458:	42a9      	cmp	r1, r5
 801a45a:	d905      	bls.n	801a468 <_malloc_r+0x28>
 801a45c:	230c      	movs	r3, #12
 801a45e:	603b      	str	r3, [r7, #0]
 801a460:	2600      	movs	r6, #0
 801a462:	4630      	mov	r0, r6
 801a464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a468:	4e2e      	ldr	r6, [pc, #184]	; (801a524 <_malloc_r+0xe4>)
 801a46a:	f000 f907 	bl	801a67c <__malloc_lock>
 801a46e:	6833      	ldr	r3, [r6, #0]
 801a470:	461c      	mov	r4, r3
 801a472:	bb34      	cbnz	r4, 801a4c2 <_malloc_r+0x82>
 801a474:	4629      	mov	r1, r5
 801a476:	4638      	mov	r0, r7
 801a478:	f7ff ffc2 	bl	801a400 <sbrk_aligned>
 801a47c:	1c43      	adds	r3, r0, #1
 801a47e:	4604      	mov	r4, r0
 801a480:	d14d      	bne.n	801a51e <_malloc_r+0xde>
 801a482:	6834      	ldr	r4, [r6, #0]
 801a484:	4626      	mov	r6, r4
 801a486:	2e00      	cmp	r6, #0
 801a488:	d140      	bne.n	801a50c <_malloc_r+0xcc>
 801a48a:	6823      	ldr	r3, [r4, #0]
 801a48c:	4631      	mov	r1, r6
 801a48e:	4638      	mov	r0, r7
 801a490:	eb04 0803 	add.w	r8, r4, r3
 801a494:	f000 f848 	bl	801a528 <_sbrk_r>
 801a498:	4580      	cmp	r8, r0
 801a49a:	d13a      	bne.n	801a512 <_malloc_r+0xd2>
 801a49c:	6821      	ldr	r1, [r4, #0]
 801a49e:	3503      	adds	r5, #3
 801a4a0:	1a6d      	subs	r5, r5, r1
 801a4a2:	f025 0503 	bic.w	r5, r5, #3
 801a4a6:	3508      	adds	r5, #8
 801a4a8:	2d0c      	cmp	r5, #12
 801a4aa:	bf38      	it	cc
 801a4ac:	250c      	movcc	r5, #12
 801a4ae:	4629      	mov	r1, r5
 801a4b0:	4638      	mov	r0, r7
 801a4b2:	f7ff ffa5 	bl	801a400 <sbrk_aligned>
 801a4b6:	3001      	adds	r0, #1
 801a4b8:	d02b      	beq.n	801a512 <_malloc_r+0xd2>
 801a4ba:	6823      	ldr	r3, [r4, #0]
 801a4bc:	442b      	add	r3, r5
 801a4be:	6023      	str	r3, [r4, #0]
 801a4c0:	e00e      	b.n	801a4e0 <_malloc_r+0xa0>
 801a4c2:	6822      	ldr	r2, [r4, #0]
 801a4c4:	1b52      	subs	r2, r2, r5
 801a4c6:	d41e      	bmi.n	801a506 <_malloc_r+0xc6>
 801a4c8:	2a0b      	cmp	r2, #11
 801a4ca:	d916      	bls.n	801a4fa <_malloc_r+0xba>
 801a4cc:	1961      	adds	r1, r4, r5
 801a4ce:	42a3      	cmp	r3, r4
 801a4d0:	6025      	str	r5, [r4, #0]
 801a4d2:	bf18      	it	ne
 801a4d4:	6059      	strne	r1, [r3, #4]
 801a4d6:	6863      	ldr	r3, [r4, #4]
 801a4d8:	bf08      	it	eq
 801a4da:	6031      	streq	r1, [r6, #0]
 801a4dc:	5162      	str	r2, [r4, r5]
 801a4de:	604b      	str	r3, [r1, #4]
 801a4e0:	4638      	mov	r0, r7
 801a4e2:	f104 060b 	add.w	r6, r4, #11
 801a4e6:	f000 f8cf 	bl	801a688 <__malloc_unlock>
 801a4ea:	f026 0607 	bic.w	r6, r6, #7
 801a4ee:	1d23      	adds	r3, r4, #4
 801a4f0:	1af2      	subs	r2, r6, r3
 801a4f2:	d0b6      	beq.n	801a462 <_malloc_r+0x22>
 801a4f4:	1b9b      	subs	r3, r3, r6
 801a4f6:	50a3      	str	r3, [r4, r2]
 801a4f8:	e7b3      	b.n	801a462 <_malloc_r+0x22>
 801a4fa:	6862      	ldr	r2, [r4, #4]
 801a4fc:	42a3      	cmp	r3, r4
 801a4fe:	bf0c      	ite	eq
 801a500:	6032      	streq	r2, [r6, #0]
 801a502:	605a      	strne	r2, [r3, #4]
 801a504:	e7ec      	b.n	801a4e0 <_malloc_r+0xa0>
 801a506:	4623      	mov	r3, r4
 801a508:	6864      	ldr	r4, [r4, #4]
 801a50a:	e7b2      	b.n	801a472 <_malloc_r+0x32>
 801a50c:	4634      	mov	r4, r6
 801a50e:	6876      	ldr	r6, [r6, #4]
 801a510:	e7b9      	b.n	801a486 <_malloc_r+0x46>
 801a512:	230c      	movs	r3, #12
 801a514:	603b      	str	r3, [r7, #0]
 801a516:	4638      	mov	r0, r7
 801a518:	f000 f8b6 	bl	801a688 <__malloc_unlock>
 801a51c:	e7a1      	b.n	801a462 <_malloc_r+0x22>
 801a51e:	6025      	str	r5, [r4, #0]
 801a520:	e7de      	b.n	801a4e0 <_malloc_r+0xa0>
 801a522:	bf00      	nop
 801a524:	24006910 	.word	0x24006910

0801a528 <_sbrk_r>:
 801a528:	b538      	push	{r3, r4, r5, lr}
 801a52a:	4d06      	ldr	r5, [pc, #24]	; (801a544 <_sbrk_r+0x1c>)
 801a52c:	2300      	movs	r3, #0
 801a52e:	4604      	mov	r4, r0
 801a530:	4608      	mov	r0, r1
 801a532:	602b      	str	r3, [r5, #0]
 801a534:	f7ea f8cc 	bl	80046d0 <_sbrk>
 801a538:	1c43      	adds	r3, r0, #1
 801a53a:	d102      	bne.n	801a542 <_sbrk_r+0x1a>
 801a53c:	682b      	ldr	r3, [r5, #0]
 801a53e:	b103      	cbz	r3, 801a542 <_sbrk_r+0x1a>
 801a540:	6023      	str	r3, [r4, #0]
 801a542:	bd38      	pop	{r3, r4, r5, pc}
 801a544:	24006918 	.word	0x24006918

0801a548 <__sread>:
 801a548:	b510      	push	{r4, lr}
 801a54a:	460c      	mov	r4, r1
 801a54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a550:	f000 f8a0 	bl	801a694 <_read_r>
 801a554:	2800      	cmp	r0, #0
 801a556:	bfab      	itete	ge
 801a558:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a55a:	89a3      	ldrhlt	r3, [r4, #12]
 801a55c:	181b      	addge	r3, r3, r0
 801a55e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a562:	bfac      	ite	ge
 801a564:	6563      	strge	r3, [r4, #84]	; 0x54
 801a566:	81a3      	strhlt	r3, [r4, #12]
 801a568:	bd10      	pop	{r4, pc}

0801a56a <__swrite>:
 801a56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a56e:	461f      	mov	r7, r3
 801a570:	898b      	ldrh	r3, [r1, #12]
 801a572:	05db      	lsls	r3, r3, #23
 801a574:	4605      	mov	r5, r0
 801a576:	460c      	mov	r4, r1
 801a578:	4616      	mov	r6, r2
 801a57a:	d505      	bpl.n	801a588 <__swrite+0x1e>
 801a57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a580:	2302      	movs	r3, #2
 801a582:	2200      	movs	r2, #0
 801a584:	f000 f868 	bl	801a658 <_lseek_r>
 801a588:	89a3      	ldrh	r3, [r4, #12]
 801a58a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a58e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a592:	81a3      	strh	r3, [r4, #12]
 801a594:	4632      	mov	r2, r6
 801a596:	463b      	mov	r3, r7
 801a598:	4628      	mov	r0, r5
 801a59a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a59e:	f000 b817 	b.w	801a5d0 <_write_r>

0801a5a2 <__sseek>:
 801a5a2:	b510      	push	{r4, lr}
 801a5a4:	460c      	mov	r4, r1
 801a5a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5aa:	f000 f855 	bl	801a658 <_lseek_r>
 801a5ae:	1c43      	adds	r3, r0, #1
 801a5b0:	89a3      	ldrh	r3, [r4, #12]
 801a5b2:	bf15      	itete	ne
 801a5b4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a5b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a5ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a5be:	81a3      	strheq	r3, [r4, #12]
 801a5c0:	bf18      	it	ne
 801a5c2:	81a3      	strhne	r3, [r4, #12]
 801a5c4:	bd10      	pop	{r4, pc}

0801a5c6 <__sclose>:
 801a5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5ca:	f000 b813 	b.w	801a5f4 <_close_r>
	...

0801a5d0 <_write_r>:
 801a5d0:	b538      	push	{r3, r4, r5, lr}
 801a5d2:	4d07      	ldr	r5, [pc, #28]	; (801a5f0 <_write_r+0x20>)
 801a5d4:	4604      	mov	r4, r0
 801a5d6:	4608      	mov	r0, r1
 801a5d8:	4611      	mov	r1, r2
 801a5da:	2200      	movs	r2, #0
 801a5dc:	602a      	str	r2, [r5, #0]
 801a5de:	461a      	mov	r2, r3
 801a5e0:	f7ea f825 	bl	800462e <_write>
 801a5e4:	1c43      	adds	r3, r0, #1
 801a5e6:	d102      	bne.n	801a5ee <_write_r+0x1e>
 801a5e8:	682b      	ldr	r3, [r5, #0]
 801a5ea:	b103      	cbz	r3, 801a5ee <_write_r+0x1e>
 801a5ec:	6023      	str	r3, [r4, #0]
 801a5ee:	bd38      	pop	{r3, r4, r5, pc}
 801a5f0:	24006918 	.word	0x24006918

0801a5f4 <_close_r>:
 801a5f4:	b538      	push	{r3, r4, r5, lr}
 801a5f6:	4d06      	ldr	r5, [pc, #24]	; (801a610 <_close_r+0x1c>)
 801a5f8:	2300      	movs	r3, #0
 801a5fa:	4604      	mov	r4, r0
 801a5fc:	4608      	mov	r0, r1
 801a5fe:	602b      	str	r3, [r5, #0]
 801a600:	f7ea f831 	bl	8004666 <_close>
 801a604:	1c43      	adds	r3, r0, #1
 801a606:	d102      	bne.n	801a60e <_close_r+0x1a>
 801a608:	682b      	ldr	r3, [r5, #0]
 801a60a:	b103      	cbz	r3, 801a60e <_close_r+0x1a>
 801a60c:	6023      	str	r3, [r4, #0]
 801a60e:	bd38      	pop	{r3, r4, r5, pc}
 801a610:	24006918 	.word	0x24006918

0801a614 <_fstat_r>:
 801a614:	b538      	push	{r3, r4, r5, lr}
 801a616:	4d07      	ldr	r5, [pc, #28]	; (801a634 <_fstat_r+0x20>)
 801a618:	2300      	movs	r3, #0
 801a61a:	4604      	mov	r4, r0
 801a61c:	4608      	mov	r0, r1
 801a61e:	4611      	mov	r1, r2
 801a620:	602b      	str	r3, [r5, #0]
 801a622:	f7ea f82c 	bl	800467e <_fstat>
 801a626:	1c43      	adds	r3, r0, #1
 801a628:	d102      	bne.n	801a630 <_fstat_r+0x1c>
 801a62a:	682b      	ldr	r3, [r5, #0]
 801a62c:	b103      	cbz	r3, 801a630 <_fstat_r+0x1c>
 801a62e:	6023      	str	r3, [r4, #0]
 801a630:	bd38      	pop	{r3, r4, r5, pc}
 801a632:	bf00      	nop
 801a634:	24006918 	.word	0x24006918

0801a638 <_isatty_r>:
 801a638:	b538      	push	{r3, r4, r5, lr}
 801a63a:	4d06      	ldr	r5, [pc, #24]	; (801a654 <_isatty_r+0x1c>)
 801a63c:	2300      	movs	r3, #0
 801a63e:	4604      	mov	r4, r0
 801a640:	4608      	mov	r0, r1
 801a642:	602b      	str	r3, [r5, #0]
 801a644:	f7ea f82b 	bl	800469e <_isatty>
 801a648:	1c43      	adds	r3, r0, #1
 801a64a:	d102      	bne.n	801a652 <_isatty_r+0x1a>
 801a64c:	682b      	ldr	r3, [r5, #0]
 801a64e:	b103      	cbz	r3, 801a652 <_isatty_r+0x1a>
 801a650:	6023      	str	r3, [r4, #0]
 801a652:	bd38      	pop	{r3, r4, r5, pc}
 801a654:	24006918 	.word	0x24006918

0801a658 <_lseek_r>:
 801a658:	b538      	push	{r3, r4, r5, lr}
 801a65a:	4d07      	ldr	r5, [pc, #28]	; (801a678 <_lseek_r+0x20>)
 801a65c:	4604      	mov	r4, r0
 801a65e:	4608      	mov	r0, r1
 801a660:	4611      	mov	r1, r2
 801a662:	2200      	movs	r2, #0
 801a664:	602a      	str	r2, [r5, #0]
 801a666:	461a      	mov	r2, r3
 801a668:	f7ea f824 	bl	80046b4 <_lseek>
 801a66c:	1c43      	adds	r3, r0, #1
 801a66e:	d102      	bne.n	801a676 <_lseek_r+0x1e>
 801a670:	682b      	ldr	r3, [r5, #0]
 801a672:	b103      	cbz	r3, 801a676 <_lseek_r+0x1e>
 801a674:	6023      	str	r3, [r4, #0]
 801a676:	bd38      	pop	{r3, r4, r5, pc}
 801a678:	24006918 	.word	0x24006918

0801a67c <__malloc_lock>:
 801a67c:	4801      	ldr	r0, [pc, #4]	; (801a684 <__malloc_lock+0x8>)
 801a67e:	f7ff be0b 	b.w	801a298 <__retarget_lock_acquire_recursive>
 801a682:	bf00      	nop
 801a684:	2400690c 	.word	0x2400690c

0801a688 <__malloc_unlock>:
 801a688:	4801      	ldr	r0, [pc, #4]	; (801a690 <__malloc_unlock+0x8>)
 801a68a:	f7ff be06 	b.w	801a29a <__retarget_lock_release_recursive>
 801a68e:	bf00      	nop
 801a690:	2400690c 	.word	0x2400690c

0801a694 <_read_r>:
 801a694:	b538      	push	{r3, r4, r5, lr}
 801a696:	4d07      	ldr	r5, [pc, #28]	; (801a6b4 <_read_r+0x20>)
 801a698:	4604      	mov	r4, r0
 801a69a:	4608      	mov	r0, r1
 801a69c:	4611      	mov	r1, r2
 801a69e:	2200      	movs	r2, #0
 801a6a0:	602a      	str	r2, [r5, #0]
 801a6a2:	461a      	mov	r2, r3
 801a6a4:	f7e9 ffa6 	bl	80045f4 <_read>
 801a6a8:	1c43      	adds	r3, r0, #1
 801a6aa:	d102      	bne.n	801a6b2 <_read_r+0x1e>
 801a6ac:	682b      	ldr	r3, [r5, #0]
 801a6ae:	b103      	cbz	r3, 801a6b2 <_read_r+0x1e>
 801a6b0:	6023      	str	r3, [r4, #0]
 801a6b2:	bd38      	pop	{r3, r4, r5, pc}
 801a6b4:	24006918 	.word	0x24006918

0801a6b8 <_init>:
 801a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ba:	bf00      	nop
 801a6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6be:	bc08      	pop	{r3}
 801a6c0:	469e      	mov	lr, r3
 801a6c2:	4770      	bx	lr

0801a6c4 <_fini>:
 801a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6c6:	bf00      	nop
 801a6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6ca:	bc08      	pop	{r3}
 801a6cc:	469e      	mov	lr, r3
 801a6ce:	4770      	bx	lr
