
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a10  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08016cb0  08016cb0  00026cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080170f8  080170f8  000270f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017100  08017100  00027100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017104  08017104  00027104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017108  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000594c  24000120  08017210  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a6c  08017210  00035a6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032f45  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000055b6  00000000  00000000  0006307b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026a0  00000000  00000000  00068638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002498  00000000  00000000  0006acd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003fdb3  00000000  00000000  0006d170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003164d  00000000  00000000  000acf23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194853  00000000  00000000  000de570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00272dc3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ad8c  00000000  00000000  00272e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016c98 	.word	0x08016c98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016c98 	.word	0x08016c98

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	UptimeMillis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c38 	.word	0x24000c38

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 faaa 	bl	8012b70 <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fa9f 	bl	8012b70 <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fa94 	bl	8012b70 <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fa89 	bl	8012b70 <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f015 ff69 	bl	8016538 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c58 	.word	0x24000c58
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	08016d20 	.word	0x08016d20

08000688 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fbff 	bl	800fe98 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 83e8 	bhi.w	8000e78 <HAL_UART_RxCpltCallback+0x7f0>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a85 	.word	0x08000a85
 80006b8:	08000b0b 	.word	0x08000b0b
 80006bc:	08000b35 	.word	0x08000b35
 80006c0:	08000b5d 	.word	0x08000b5d
 80006c4:	08000b87 	.word	0x08000b87
 80006c8:	08000bb3 	.word	0x08000bb3
 80006cc:	08000bdf 	.word	0x08000bdf
 80006d0:	08000c09 	.word	0x08000c09
 80006d4:	08000c35 	.word	0x08000c35
 80006d8:	08000c61 	.word	0x08000c61
 80006dc:	08000c93 	.word	0x08000c93
 80006e0:	08000cc5 	.word	0x08000cc5
 80006e4:	08000d17 	.word	0x08000d17
 80006e8:	08000e1d 	.word	0x08000e1d
 80006ec:	08000e4d 	.word	0x08000e4d
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000af5 	.word	0x08000af5
 80006fc:	08000b21 	.word	0x08000b21
 8000700:	08000b49 	.word	0x08000b49
 8000704:	08000b71 	.word	0x08000b71
 8000708:	08000b9d 	.word	0x08000b9d
 800070c:	08000bc9 	.word	0x08000bc9
 8000710:	08000bf5 	.word	0x08000bf5
 8000714:	08000c1d 	.word	0x08000c1d
 8000718:	08000c45 	.word	0x08000c45
 800071c:	08000c77 	.word	0x08000c77
 8000720:	08000ca9 	.word	0x08000ca9
 8000724:	08000cdb 	.word	0x08000cdb
 8000728:	08000df5 	.word	0x08000df5
 800072c:	08000e45 	.word	0x08000e45
 8000730:	08000e79 	.word	0x08000e79
 8000734:	08000e79 	.word	0x08000e79
 8000738:	08000e79 	.word	0x08000e79
 800073c:	08000e79 	.word	0x08000e79
 8000740:	08000e79 	.word	0x08000e79
 8000744:	08000e79 	.word	0x08000e79
 8000748:	08000e79 	.word	0x08000e79
 800074c:	08000e79 	.word	0x08000e79
 8000750:	08000e79 	.word	0x08000e79
 8000754:	08000e79 	.word	0x08000e79
 8000758:	08000e79 	.word	0x08000e79
 800075c:	08000e79 	.word	0x08000e79
 8000760:	08000e79 	.word	0x08000e79
 8000764:	08000e79 	.word	0x08000e79
 8000768:	08000e79 	.word	0x08000e79
 800076c:	08000e79 	.word	0x08000e79
 8000770:	08000e79 	.word	0x08000e79
 8000774:	08000e79 	.word	0x08000e79
 8000778:	08000e79 	.word	0x08000e79
 800077c:	08000e79 	.word	0x08000e79
 8000780:	08000e79 	.word	0x08000e79
 8000784:	08000e79 	.word	0x08000e79
 8000788:	08000e79 	.word	0x08000e79
 800078c:	08000e79 	.word	0x08000e79
 8000790:	08000e79 	.word	0x08000e79
 8000794:	08000e79 	.word	0x08000e79
 8000798:	08000e79 	.word	0x08000e79
 800079c:	08000e79 	.word	0x08000e79
 80007a0:	08000e79 	.word	0x08000e79
 80007a4:	08000e79 	.word	0x08000e79
 80007a8:	08000e79 	.word	0x08000e79
 80007ac:	08000e79 	.word	0x08000e79
 80007b0:	08000e79 	.word	0x08000e79
 80007b4:	08000e79 	.word	0x08000e79
 80007b8:	08000e79 	.word	0x08000e79
 80007bc:	08000e79 	.word	0x08000e79
 80007c0:	08000e79 	.word	0x08000e79
 80007c4:	08000e79 	.word	0x08000e79
 80007c8:	08000e79 	.word	0x08000e79
 80007cc:	08000e79 	.word	0x08000e79
 80007d0:	08000e79 	.word	0x08000e79
 80007d4:	08000e79 	.word	0x08000e79
 80007d8:	08000e79 	.word	0x08000e79
 80007dc:	08000e79 	.word	0x08000e79
 80007e0:	08000e79 	.word	0x08000e79
 80007e4:	08000e79 	.word	0x08000e79
 80007e8:	08000e79 	.word	0x08000e79
 80007ec:	08000e79 	.word	0x08000e79
 80007f0:	08000e79 	.word	0x08000e79
 80007f4:	08000e79 	.word	0x08000e79
 80007f8:	08000e79 	.word	0x08000e79
 80007fc:	08000e79 	.word	0x08000e79
 8000800:	08000e79 	.word	0x08000e79
 8000804:	08000e79 	.word	0x08000e79
 8000808:	08000e79 	.word	0x08000e79
 800080c:	08000e79 	.word	0x08000e79
 8000810:	08000e79 	.word	0x08000e79
 8000814:	08000e79 	.word	0x08000e79
 8000818:	08000e79 	.word	0x08000e79
 800081c:	08000e79 	.word	0x08000e79
 8000820:	08000e79 	.word	0x08000e79
 8000824:	08000e79 	.word	0x08000e79
 8000828:	08000e79 	.word	0x08000e79
 800082c:	08000e79 	.word	0x08000e79
 8000830:	08000e79 	.word	0x08000e79
 8000834:	08000e79 	.word	0x08000e79
 8000838:	08000e79 	.word	0x08000e79
 800083c:	08000e79 	.word	0x08000e79
 8000840:	08000e79 	.word	0x08000e79
 8000844:	08000e79 	.word	0x08000e79
 8000848:	08000e79 	.word	0x08000e79
 800084c:	08000e79 	.word	0x08000e79
 8000850:	08000e79 	.word	0x08000e79
 8000854:	08000e79 	.word	0x08000e79
 8000858:	08000e79 	.word	0x08000e79
 800085c:	08000e79 	.word	0x08000e79
 8000860:	08000e79 	.word	0x08000e79
 8000864:	08000e79 	.word	0x08000e79
 8000868:	08000e79 	.word	0x08000e79
 800086c:	08000e79 	.word	0x08000e79
 8000870:	08000e79 	.word	0x08000e79
 8000874:	08000e79 	.word	0x08000e79
 8000878:	08000e79 	.word	0x08000e79
 800087c:	08000e79 	.word	0x08000e79
 8000880:	08000e79 	.word	0x08000e79
 8000884:	08000e79 	.word	0x08000e79
 8000888:	08000e79 	.word	0x08000e79
 800088c:	08000e79 	.word	0x08000e79
 8000890:	08000e79 	.word	0x08000e79
 8000894:	08000e79 	.word	0x08000e79
 8000898:	08000e79 	.word	0x08000e79
 800089c:	08000e79 	.word	0x08000e79
 80008a0:	08000e79 	.word	0x08000e79
 80008a4:	08000e79 	.word	0x08000e79
 80008a8:	08000e79 	.word	0x08000e79
 80008ac:	08000e79 	.word	0x08000e79
 80008b0:	08000e79 	.word	0x08000e79
 80008b4:	08000e79 	.word	0x08000e79
 80008b8:	08000e79 	.word	0x08000e79
 80008bc:	08000e79 	.word	0x08000e79
 80008c0:	08000e79 	.word	0x08000e79
 80008c4:	08000e79 	.word	0x08000e79
 80008c8:	08000e79 	.word	0x08000e79
 80008cc:	08000e79 	.word	0x08000e79
 80008d0:	08000e79 	.word	0x08000e79
 80008d4:	08000e79 	.word	0x08000e79
 80008d8:	08000e79 	.word	0x08000e79
 80008dc:	08000e79 	.word	0x08000e79
 80008e0:	08000e79 	.word	0x08000e79
 80008e4:	08000e79 	.word	0x08000e79
 80008e8:	08000e79 	.word	0x08000e79
 80008ec:	08000e79 	.word	0x08000e79
 80008f0:	08000e79 	.word	0x08000e79
 80008f4:	08000e79 	.word	0x08000e79
 80008f8:	08000e79 	.word	0x08000e79
 80008fc:	08000e79 	.word	0x08000e79
 8000900:	08000e79 	.word	0x08000e79
 8000904:	08000e79 	.word	0x08000e79
 8000908:	08000e79 	.word	0x08000e79
 800090c:	08000e79 	.word	0x08000e79
 8000910:	08000e79 	.word	0x08000e79
 8000914:	08000e79 	.word	0x08000e79
 8000918:	08000e79 	.word	0x08000e79
 800091c:	08000e79 	.word	0x08000e79
 8000920:	08000e79 	.word	0x08000e79
 8000924:	08000e79 	.word	0x08000e79
 8000928:	08000e79 	.word	0x08000e79
 800092c:	08000e79 	.word	0x08000e79
 8000930:	08000e79 	.word	0x08000e79
 8000934:	08000e79 	.word	0x08000e79
 8000938:	08000e79 	.word	0x08000e79
 800093c:	08000e79 	.word	0x08000e79
 8000940:	08000e79 	.word	0x08000e79
 8000944:	08000e79 	.word	0x08000e79
 8000948:	08000e79 	.word	0x08000e79
 800094c:	08000e79 	.word	0x08000e79
 8000950:	08000e79 	.word	0x08000e79
 8000954:	08000e79 	.word	0x08000e79
 8000958:	08000e79 	.word	0x08000e79
 800095c:	08000e79 	.word	0x08000e79
 8000960:	08000e79 	.word	0x08000e79
 8000964:	08000e79 	.word	0x08000e79
 8000968:	08000e79 	.word	0x08000e79
 800096c:	08000e79 	.word	0x08000e79
 8000970:	08000e79 	.word	0x08000e79
 8000974:	08000e79 	.word	0x08000e79
 8000978:	08000e79 	.word	0x08000e79
 800097c:	08000e79 	.word	0x08000e79
 8000980:	08000e79 	.word	0x08000e79
 8000984:	08000e79 	.word	0x08000e79
 8000988:	08000e79 	.word	0x08000e79
 800098c:	08000e79 	.word	0x08000e79
 8000990:	08000e79 	.word	0x08000e79
 8000994:	08000e79 	.word	0x08000e79
 8000998:	08000e79 	.word	0x08000e79
 800099c:	08000e79 	.word	0x08000e79
 80009a0:	08000e79 	.word	0x08000e79
 80009a4:	08000e79 	.word	0x08000e79
 80009a8:	08000e79 	.word	0x08000e79
 80009ac:	08000e79 	.word	0x08000e79
 80009b0:	08000e79 	.word	0x08000e79
 80009b4:	08000e79 	.word	0x08000e79
 80009b8:	08000e79 	.word	0x08000e79
 80009bc:	08000e79 	.word	0x08000e79
 80009c0:	08000e79 	.word	0x08000e79
 80009c4:	08000e79 	.word	0x08000e79
 80009c8:	08000e79 	.word	0x08000e79
 80009cc:	08000e79 	.word	0x08000e79
 80009d0:	08000e79 	.word	0x08000e79
 80009d4:	08000e79 	.word	0x08000e79
 80009d8:	08000e79 	.word	0x08000e79
 80009dc:	08000e79 	.word	0x08000e79
 80009e0:	08000e79 	.word	0x08000e79
 80009e4:	08000e79 	.word	0x08000e79
 80009e8:	08000e79 	.word	0x08000e79
 80009ec:	08000e79 	.word	0x08000e79
 80009f0:	08000e67 	.word	0x08000e67
 80009f4:	08000e79 	.word	0x08000e79
 80009f8:	08000e79 	.word	0x08000e79
 80009fc:	08000e79 	.word	0x08000e79
 8000a00:	08000e79 	.word	0x08000e79
 8000a04:	08000e79 	.word	0x08000e79
 8000a08:	08000e79 	.word	0x08000e79
 8000a0c:	08000e79 	.word	0x08000e79
 8000a10:	08000e79 	.word	0x08000e79
 8000a14:	08000e79 	.word	0x08000e79
 8000a18:	08000e79 	.word	0x08000e79
 8000a1c:	08000e79 	.word	0x08000e79
 8000a20:	08000e79 	.word	0x08000e79
 8000a24:	08000e79 	.word	0x08000e79
 8000a28:	08000e79 	.word	0x08000e79
 8000a2c:	08000e79 	.word	0x08000e79
 8000a30:	08000e55 	.word	0x08000e55
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f015 fd7f 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 f981 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000a46:	e222      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f015 fd75 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 f977 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e218      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
 8000a5c:	24000c5c 	.word	0x24000c5c
 8000a60:	24000638 	.word	0x24000638
 8000a64:	08016d38 	.word	0x08016d38
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	08016d40 	.word	0x08016d40
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48b8      	ldr	r0, [pc, #736]	; (8000d54 <HAL_UART_RxCpltCallback+0x6cc>)
 8000a72:	f015 fd61 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bb8      	ldr	r3, [pc, #736]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 f963 	bl	8008d48 <HAL_GPIO_WritePin>

		break;
 8000a82:	e204      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a84:	48b5      	ldr	r0, [pc, #724]	; (8000d5c <HAL_UART_RxCpltCallback+0x6d4>)
 8000a86:	f015 fd57 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a8a:	4bb3      	ldr	r3, [pc, #716]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f008 f959 	bl	8008d48 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a96:	4bb0      	ldr	r3, [pc, #704]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a98:	2140      	movs	r1, #64	; 0x40
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f008 f953 	bl	8008d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa2:	4baf      	ldr	r3, [pc, #700]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 f94c 	bl	8008d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab0:	4bab      	ldr	r3, [pc, #684]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f008 f945 	bl	8008d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000abe:	4ba8      	ldr	r3, [pc, #672]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f008 f93e 	bl	8008d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000acc:	4ba4      	ldr	r3, [pc, #656]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 f938 	bl	8008d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ad8:	4ba1      	ldr	r3, [pc, #644]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	2200      	movs	r2, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f008 f932 	bl	8008d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ae4:	4b9e      	ldr	r3, [pc, #632]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	2200      	movs	r2, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f008 f92b 	bl	8008d48 <HAL_GPIO_WritePin>

		break;
 8000af2:	e1cc      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000af4:	489b      	ldr	r0, [pc, #620]	; (8000d64 <HAL_UART_RxCpltCallback+0x6dc>)
 8000af6:	f015 fd1f 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000afa:	4b99      	ldr	r3, [pc, #612]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	2201      	movs	r2, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f008 f920 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000b08:	e1c1      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b0a:	4897      	ldr	r0, [pc, #604]	; (8000d68 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b0c:	f015 fd14 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b10:	4b93      	ldr	r3, [pc, #588]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b16:	2200      	movs	r2, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f008 f915 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000b1e:	e1b6      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b20:	4892      	ldr	r0, [pc, #584]	; (8000d6c <HAL_UART_RxCpltCallback+0x6e4>)
 8000b22:	f015 fd09 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b26:	4b8e      	ldr	r3, [pc, #568]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f008 f90b 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000b32:	e1ac      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b34:	488e      	ldr	r0, [pc, #568]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b36:	f015 fcff 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b3a:	4b89      	ldr	r3, [pc, #548]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f008 f901 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000b46:	e1a2      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b48:	488a      	ldr	r0, [pc, #552]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000b4a:	f015 fcf5 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b4e:	4b84      	ldr	r3, [pc, #528]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	2201      	movs	r2, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f008 f8f7 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000b5a:	e198      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b5c:	4886      	ldr	r0, [pc, #536]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b5e:	f015 fceb 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b62:	4b7f      	ldr	r3, [pc, #508]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	2200      	movs	r2, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f008 f8ed 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000b6e:	e18e      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b70:	4882      	ldr	r0, [pc, #520]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b72:	f015 fce1 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b76:	4b7a      	ldr	r3, [pc, #488]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f008 f8e2 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000b84:	e183      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b86:	487e      	ldr	r0, [pc, #504]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b88:	f015 fcd6 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b8c:	4b74      	ldr	r3, [pc, #464]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	2200      	movs	r2, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 f8d7 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000b9a:	e178      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b9c:	4879      	ldr	r0, [pc, #484]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b9e:	f015 fccb 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ba2:	4b6f      	ldr	r3, [pc, #444]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f008 f8cc 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000bb0:	e16d      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000bb2:	4875      	ldr	r0, [pc, #468]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bb4:	f015 fcc0 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000bb8:	4b69      	ldr	r3, [pc, #420]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f008 f8c1 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000bc6:	e162      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000bc8:	4870      	ldr	r0, [pc, #448]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000bca:	f015 fcb5 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000bce:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f008 f8b6 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000bdc:	e157      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000bde:	486c      	ldr	r0, [pc, #432]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000be0:	f015 fcaa 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000be4:	4b5e      	ldr	r3, [pc, #376]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bea:	2200      	movs	r2, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f008 f8ab 	bl	8008d48 <HAL_GPIO_WritePin>

		break;
 8000bf2:	e14c      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bf4:	4867      	ldr	r0, [pc, #412]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bf6:	f015 fc9f 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bfa:	4b57      	ldr	r3, [pc, #348]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000bfc:	2140      	movs	r1, #64	; 0x40
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4618      	mov	r0, r3
 8000c02:	f008 f8a1 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000c06:	e142      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c08:	4863      	ldr	r0, [pc, #396]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c0a:	f015 fc95 	bl	8016538 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c0e:	4b52      	ldr	r3, [pc, #328]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	2200      	movs	r2, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f008 f897 	bl	8008d48 <HAL_GPIO_WritePin>
		break;
 8000c1a:	e138      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c1c:	485f      	ldr	r0, [pc, #380]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c1e:	f015 fc8b 	bl	8016538 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2320      	movs	r3, #32
 8000c28:	4a5d      	ldr	r2, [pc, #372]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	485d      	ldr	r0, [pc, #372]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c2e:	f004 fcfb 	bl	8005628 <HAL_DAC_Start_DMA>
		break;
 8000c32:	e12c      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c34:	485c      	ldr	r0, [pc, #368]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000c36:	f015 fc7f 	bl	8016538 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4859      	ldr	r0, [pc, #356]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c3e:	f004 fdb3 	bl	80057a8 <HAL_DAC_Stop_DMA>
		break;
 8000c42:	e124      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c44:	4859      	ldr	r0, [pc, #356]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000c46:	f015 fc77 	bl	8016538 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	4858      	ldr	r0, [pc, #352]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000c4e:	f00d fc43 	bl	800e4d8 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c52:	4b58      	ldr	r3, [pc, #352]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c58:	4b57      	ldr	r3, [pc, #348]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	801a      	strh	r2, [r3, #0]
		break;
 8000c5e:	e116      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c60:	4856      	ldr	r0, [pc, #344]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000c62:	f015 fc69 	bl	8016538 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c66:	210c      	movs	r1, #12
 8000c68:	4851      	ldr	r0, [pc, #324]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000c6a:	f00d fd8f 	bl	800e78c <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c6e:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
		break;
 8000c74:	e10b      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c76:	4852      	ldr	r0, [pc, #328]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000c78:	f015 fc5e 	bl	8016538 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4851      	ldr	r0, [pc, #324]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c80:	f00d fc2a 	bl	800e4d8 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	801a      	strh	r2, [r3, #0]
		break;
 8000c90:	e0fd      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c92:	484f      	ldr	r0, [pc, #316]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c94:	f015 fc50 	bl	8016538 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	484a      	ldr	r0, [pc, #296]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c9c:	f00d fd76 	bl	800e78c <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
		break;
 8000ca6:	e0f2      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000ca8:	484a      	ldr	r0, [pc, #296]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000caa:	f015 fc45 	bl	8016538 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4849      	ldr	r0, [pc, #292]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cb2:	f00d fc11 	bl	800e4d8 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000cb6:	4b49      	ldr	r3, [pc, #292]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000cbc:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	801a      	strh	r2, [r3, #0]
		break;
 8000cc2:	e0e4      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000cc4:	4847      	ldr	r0, [pc, #284]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cc6:	f015 fc37 	bl	8016538 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4842      	ldr	r0, [pc, #264]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cce:	f00d fd5d 	bl	800e78c <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000cd2:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
		break;
 8000cd8:	e0d9      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000cda:	4843      	ldr	r0, [pc, #268]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cdc:	f015 fc2c 	bl	8016538 <puts>
		if (step < 17) {
 8000ce0:	4b42      	ldr	r3, [pc, #264]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	f200 80cb 	bhi.w	8000e80 <HAL_UART_RxCpltCallback+0x7f8>
			step += 2;
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cf4:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	4827      	ldr	r0, [pc, #156]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d08:	f004 fdf1 	bl	80058ee <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4825      	ldr	r0, [pc, #148]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d10:	f004 fc32 	bl	8005578 <HAL_DAC_Start>
		}
		break;
 8000d14:	e0b4      	b.n	8000e80 <HAL_UART_RxCpltCallback+0x7f8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000d16:	4836      	ldr	r0, [pc, #216]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000d18:	f015 fc0e 	bl	8016538 <puts>
		if (step > 3) {
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	f240 80af 	bls.w	8000e84 <HAL_UART_RxCpltCallback+0x7fc>
			step -= 2;
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d30:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	4818      	ldr	r0, [pc, #96]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d44:	f004 fdd3 	bl	80058ee <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4816      	ldr	r0, [pc, #88]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d4c:	f004 fc14 	bl	8005578 <HAL_DAC_Start>
		}
		break;
 8000d50:	e098      	b.n	8000e84 <HAL_UART_RxCpltCallback+0x7fc>
 8000d52:	bf00      	nop
 8000d54:	08016d4c 	.word	0x08016d4c
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	08016d58 	.word	0x08016d58
 8000d60:	58020800 	.word	0x58020800
 8000d64:	08016d64 	.word	0x08016d64
 8000d68:	08016d70 	.word	0x08016d70
 8000d6c:	08016d80 	.word	0x08016d80
 8000d70:	08016d8c 	.word	0x08016d8c
 8000d74:	08016d98 	.word	0x08016d98
 8000d78:	08016da4 	.word	0x08016da4
 8000d7c:	08016db4 	.word	0x08016db4
 8000d80:	08016dc0 	.word	0x08016dc0
 8000d84:	08016dcc 	.word	0x08016dcc
 8000d88:	08016dd8 	.word	0x08016dd8
 8000d8c:	08016de4 	.word	0x08016de4
 8000d90:	08016df4 	.word	0x08016df4
 8000d94:	08016e04 	.word	0x08016e04
 8000d98:	08016e10 	.word	0x08016e10
 8000d9c:	08016e20 	.word	0x08016e20
 8000da0:	24000010 	.word	0x24000010
 8000da4:	240002f4 	.word	0x240002f4
 8000da8:	08016e30 	.word	0x08016e30
 8000dac:	08016e40 	.word	0x08016e40
 8000db0:	24000554 	.word	0x24000554
 8000db4:	24000c53 	.word	0x24000c53
 8000db8:	24000c4e 	.word	0x24000c4e
 8000dbc:	08016e48 	.word	0x08016e48
 8000dc0:	08016e54 	.word	0x08016e54
 8000dc4:	24000508 	.word	0x24000508
 8000dc8:	24000c52 	.word	0x24000c52
 8000dcc:	24000c4c 	.word	0x24000c4c
 8000dd0:	08016e5c 	.word	0x08016e5c
 8000dd4:	08016e64 	.word	0x08016e64
 8000dd8:	240005a0 	.word	0x240005a0
 8000ddc:	24000c54 	.word	0x24000c54
 8000de0:	24000c50 	.word	0x24000c50
 8000de4:	08016e6c 	.word	0x08016e6c
 8000de8:	08016e74 	.word	0x08016e74
 8000dec:	2400000c 	.word	0x2400000c
 8000df0:	08016e7c 	.word	0x08016e7c
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000df4:	4828      	ldr	r0, [pc, #160]	; (8000e98 <HAL_UART_RxCpltCallback+0x810>)
 8000df6:	f015 fb9f 	bl	8016538 <puts>
		if (cadence <= 50000) {
 8000dfa:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d840      	bhi.n	8000e88 <HAL_UART_RxCpltCallback+0x800>
			cadence *= 2;
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4a23      	ldr	r2, [pc, #140]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e0e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e1a:	e035      	b.n	8000e88 <HAL_UART_RxCpltCallback+0x800>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e1c:	4820      	ldr	r0, [pc, #128]	; (8000ea0 <HAL_UART_RxCpltCallback+0x818>)
 8000e1e:	f015 fb8b 	bl	8016538 <puts>
		if (cadence >= 6250) {
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d92e      	bls.n	8000e8c <HAL_UART_RxCpltCallback+0x804>
			cadence /= 2;
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e36:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e42:	e023      	b.n	8000e8c <HAL_UART_RxCpltCallback+0x804>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e44:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <HAL_UART_RxCpltCallback+0x81c>)
 8000e46:	f015 fb77 	bl	8016538 <puts>
		// TODO: Exit stop mode
		break;
 8000e4a:	e020      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e4c:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <HAL_UART_RxCpltCallback+0x820>)
 8000e4e:	f015 fb73 	bl	8016538 <puts>
		// TODO: Enter stop mode
		break;
 8000e52:	e01c      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e54:	4815      	ldr	r0, [pc, #84]	; (8000eac <HAL_UART_RxCpltCallback+0x824>)
 8000e56:	f015 fb6f 	bl	8016538 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_UART_RxCpltCallback+0x828>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f013 fbce 	bl	8014600 <xTaskResumeFromISR>
		break;
 8000e64:	e013      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e66:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <HAL_UART_RxCpltCallback+0x82c>)
 8000e68:	f015 fb66 	bl	8016538 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_UART_RxCpltCallback+0x830>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f013 fbc5 	bl	8014600 <xTaskResumeFromISR>
		break;
 8000e76:	e00a      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	default: {
		printf("Unknown Command\n");
 8000e78:	4810      	ldr	r0, [pc, #64]	; (8000ebc <HAL_UART_RxCpltCallback+0x834>)
 8000e7a:	f015 fb5d 	bl	8016538 <puts>
		break;
 8000e7e:	e006      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e80:	bf00      	nop
 8000e82:	e004      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e84:	bf00      	nop
 8000e86:	e002      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e88:	bf00      	nop
 8000e8a:	e000      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e8c:	bf00      	nop
	}
	}
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08016e88 	.word	0x08016e88
 8000e9c:	24000008 	.word	0x24000008
 8000ea0:	08016e94 	.word	0x08016e94
 8000ea4:	08016ea0 	.word	0x08016ea0
 8000ea8:	08016eb0 	.word	0x08016eb0
 8000eac:	08016ec0 	.word	0x08016ec0
 8000eb0:	24000754 	.word	0x24000754
 8000eb4:	08016ecc 	.word	0x08016ecc
 8000eb8:	240009b4 	.word	0x240009b4
 8000ebc:	08016ed8 	.word	0x08016ed8

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f002 fdc4 	bl	8003a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f8b4 	bl	8001034 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ecc:	f000 f92e 	bl	800112c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f000 fed6 	bl	8001c80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed4:	f000 fe9c 	bl	8001c10 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ed8:	f000 fdb0 	bl	8001a3c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000edc:	f000 fe4c 	bl	8001b78 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ee0:	f000 fb3a 	bl	8001558 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ee4:	f000 fc30 	bl	8001748 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ee8:	f000 fd32 	bl	8001950 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000eec:	f000 fc84 	bl	80017f8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000ef0:	f000 fa6e 	bl	80013d0 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000ef4:	f000 f94a 	bl	800118c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000ef8:	f000 fafc 	bl	80014f4 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000efc:	f000 fbcc 	bl	8001698 <MX_SPI1_Init>
  MX_RTC_Init();
 8000f00:	f000 fb6c 	bl	80015dc <MX_RTC_Init>
  MX_TIM4_Init();
 8000f04:	f000 fdea 	bl	8001adc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
#ifndef DAMY
	if (!handshake()) {
 8000f08:	f001 f83c 	bl	8001f84 <handshake>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <main+0x56>
		Error_Handler();
 8000f12:	f001 fe5b 	bl	8002bcc <Error_Handler>
	}
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f16:	f011 fcad 	bl	8012874 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	2080      	movs	r0, #128	; 0x80
 8000f20:	f011 fed0 	bl	8012cc4 <osMessageQueueNew>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a28      	ldr	r2, [pc, #160]	; (8000fc8 <main+0x108>)
 8000f28:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f2a:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <main+0x10c>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4828      	ldr	r0, [pc, #160]	; (8000fd0 <main+0x110>)
 8000f30:	f011 fcea 	bl	8012908 <osThreadNew>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <main+0x114>)
 8000f38:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f3a:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <main+0x118>)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4827      	ldr	r0, [pc, #156]	; (8000fdc <main+0x11c>)
 8000f40:	f011 fce2 	bl	8012908 <osThreadNew>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a26      	ldr	r2, [pc, #152]	; (8000fe0 <main+0x120>)
 8000f48:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f4a:	4a26      	ldr	r2, [pc, #152]	; (8000fe4 <main+0x124>)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4826      	ldr	r0, [pc, #152]	; (8000fe8 <main+0x128>)
 8000f50:	f011 fcda 	bl	8012908 <osThreadNew>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a25      	ldr	r2, [pc, #148]	; (8000fec <main+0x12c>)
 8000f58:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f5a:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <main+0x130>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4825      	ldr	r0, [pc, #148]	; (8000ff4 <main+0x134>)
 8000f60:	f011 fcd2 	bl	8012908 <osThreadNew>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a24      	ldr	r2, [pc, #144]	; (8000ff8 <main+0x138>)
 8000f68:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000f6a:	4a24      	ldr	r2, [pc, #144]	; (8000ffc <main+0x13c>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4824      	ldr	r0, [pc, #144]	; (8001000 <main+0x140>)
 8000f70:	f011 fcca 	bl	8012908 <osThreadNew>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a23      	ldr	r2, [pc, #140]	; (8001004 <main+0x144>)
 8000f78:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f7a:	4a23      	ldr	r2, [pc, #140]	; (8001008 <main+0x148>)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4823      	ldr	r0, [pc, #140]	; (800100c <main+0x14c>)
 8000f80:	f011 fcc2 	bl	8012908 <osThreadNew>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a22      	ldr	r2, [pc, #136]	; (8001010 <main+0x150>)
 8000f88:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f8a:	4a22      	ldr	r2, [pc, #136]	; (8001014 <main+0x154>)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4822      	ldr	r0, [pc, #136]	; (8001018 <main+0x158>)
 8000f90:	f011 fcba 	bl	8012908 <osThreadNew>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a21      	ldr	r2, [pc, #132]	; (800101c <main+0x15c>)
 8000f98:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000f9a:	4a21      	ldr	r2, [pc, #132]	; (8001020 <main+0x160>)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4821      	ldr	r0, [pc, #132]	; (8001024 <main+0x164>)
 8000fa0:	f011 fcb2 	bl	8012908 <osThreadNew>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a20      	ldr	r2, [pc, #128]	; (8001028 <main+0x168>)
 8000fa8:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f011 fda0 	bl	8012af0 <osEventFlagsNew>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <main+0x16c>)
 8000fb4:	6013      	str	r3, [r2, #0]
	system_setup();
 8000fb6:	f001 f873 	bl	80020a0 <system_setup>
	printf("Starting kernal...\n");
 8000fba:	481d      	ldr	r0, [pc, #116]	; (8001030 <main+0x170>)
 8000fbc:	f015 fabc 	bl	8016538 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fc0:	f011 fc7c 	bl	80128bc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fc4:	e7fe      	b.n	8000fc4 <main+0x104>
 8000fc6:	bf00      	nop
 8000fc8:	24000c3c 	.word	0x24000c3c
 8000fcc:	08016f34 	.word	0x08016f34
 8000fd0:	080028a5 	.word	0x080028a5
 8000fd4:	24000744 	.word	0x24000744
 8000fd8:	08016f58 	.word	0x08016f58
 8000fdc:	080028e9 	.word	0x080028e9
 8000fe0:	24000748 	.word	0x24000748
 8000fe4:	08016f7c 	.word	0x08016f7c
 8000fe8:	0800292d 	.word	0x0800292d
 8000fec:	2400074c 	.word	0x2400074c
 8000ff0:	08016fa0 	.word	0x08016fa0
 8000ff4:	08002971 	.word	0x08002971
 8000ff8:	24000750 	.word	0x24000750
 8000ffc:	08016fc4 	.word	0x08016fc4
 8001000:	08002995 	.word	0x08002995
 8001004:	24000754 	.word	0x24000754
 8001008:	08016fe8 	.word	0x08016fe8
 800100c:	08002a3d 	.word	0x08002a3d
 8001010:	240009b4 	.word	0x240009b4
 8001014:	0801700c 	.word	0x0801700c
 8001018:	08002ae5 	.word	0x08002ae5
 800101c:	24000c14 	.word	0x24000c14
 8001020:	08017030 	.word	0x08017030
 8001024:	08002b9d 	.word	0x08002b9d
 8001028:	24000c18 	.word	0x24000c18
 800102c:	24000c58 	.word	0x24000c58
 8001030:	08016ee8 	.word	0x08016ee8

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09c      	sub	sp, #112	; 0x70
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	224c      	movs	r2, #76	; 0x4c
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f015 f922 	bl	801628c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f015 f91c 	bl	801628c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001054:	2002      	movs	r0, #2
 8001056:	f008 fc9d 	bl	8009994 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <SystemClock_Config+0xf0>)
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	4a30      	ldr	r2, [pc, #192]	; (8001124 <SystemClock_Config+0xf0>)
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	62d3      	str	r3, [r2, #44]	; 0x2c
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <SystemClock_Config+0xf0>)
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <SystemClock_Config+0xf4>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800107c:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <SystemClock_Config+0xf4>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <SystemClock_Config+0xf4>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001090:	bf00      	nop
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <SystemClock_Config+0xf4>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800109a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800109e:	d1f8      	bne.n	8001092 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ae:	2302      	movs	r3, #2
 80010b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010b2:	2304      	movs	r3, #4
 80010b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80010b6:	2320      	movs	r3, #32
 80010b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010be:	2304      	movs	r3, #4
 80010c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80010c6:	2308      	movs	r3, #8
 80010c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f008 fc96 	bl	8009a08 <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010e2:	f001 fd73 	bl	8002bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	233f      	movs	r3, #63	; 0x3f
 80010e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2303      	movs	r3, #3
 80010ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2101      	movs	r1, #1
 800110a:	4618      	mov	r0, r3
 800110c:	f009 f8d6 	bl	800a2bc <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001116:	f001 fd59 	bl	8002bcc <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3770      	adds	r7, #112	; 0x70
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	58000400 	.word	0x58000400
 8001128:	58024800 	.word	0x58024800

0800112c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b0b0      	sub	sp, #192	; 0xc0
 8001130:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	22c0      	movs	r2, #192	; 0xc0
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f015 f8a7 	bl	801628c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800113e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800114a:	2304      	movs	r3, #4
 800114c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800114e:	2320      	movs	r3, #32
 8001150:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001152:	2308      	movs	r3, #8
 8001154:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001156:	2304      	movs	r3, #4
 8001158:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	4618      	mov	r0, r3
 8001174:	f009 fc70 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800117e:	f001 fd25 	bl	8002bcc <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	37c0      	adds	r7, #192	; 0xc0
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
 80011ac:	615a      	str	r2, [r3, #20]
 80011ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011b0:	4b7a      	ldr	r3, [pc, #488]	; (800139c <MX_ADC1_Init+0x210>)
 80011b2:	4a7b      	ldr	r2, [pc, #492]	; (80013a0 <MX_ADC1_Init+0x214>)
 80011b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80011b6:	4b79      	ldr	r3, [pc, #484]	; (800139c <MX_ADC1_Init+0x210>)
 80011b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011be:	4b77      	ldr	r3, [pc, #476]	; (800139c <MX_ADC1_Init+0x210>)
 80011c0:	2208      	movs	r2, #8
 80011c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011c4:	4b75      	ldr	r3, [pc, #468]	; (800139c <MX_ADC1_Init+0x210>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ca:	4b74      	ldr	r3, [pc, #464]	; (800139c <MX_ADC1_Init+0x210>)
 80011cc:	2204      	movs	r2, #4
 80011ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011d0:	4b72      	ldr	r3, [pc, #456]	; (800139c <MX_ADC1_Init+0x210>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011d6:	4b71      	ldr	r3, [pc, #452]	; (800139c <MX_ADC1_Init+0x210>)
 80011d8:	2201      	movs	r2, #1
 80011da:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011dc:	4b6f      	ldr	r3, [pc, #444]	; (800139c <MX_ADC1_Init+0x210>)
 80011de:	220b      	movs	r2, #11
 80011e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e2:	4b6e      	ldr	r3, [pc, #440]	; (800139c <MX_ADC1_Init+0x210>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	4b6c      	ldr	r3, [pc, #432]	; (800139c <MX_ADC1_Init+0x210>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ee:	4b6b      	ldr	r3, [pc, #428]	; (800139c <MX_ADC1_Init+0x210>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011f4:	4b69      	ldr	r3, [pc, #420]	; (800139c <MX_ADC1_Init+0x210>)
 80011f6:	2203      	movs	r2, #3
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011fa:	4b68      	ldr	r3, [pc, #416]	; (800139c <MX_ADC1_Init+0x210>)
 80011fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001200:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001202:	4b66      	ldr	r3, [pc, #408]	; (800139c <MX_ADC1_Init+0x210>)
 8001204:	2200      	movs	r2, #0
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001208:	4b64      	ldr	r3, [pc, #400]	; (800139c <MX_ADC1_Init+0x210>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001210:	4862      	ldr	r0, [pc, #392]	; (800139c <MX_ADC1_Init+0x210>)
 8001212:	f002 fea9 	bl	8003f68 <HAL_ADC_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800121c:	f001 fcd6 	bl	8002bcc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	485c      	ldr	r0, [pc, #368]	; (800139c <MX_ADC1_Init+0x210>)
 800122c:	f003 ffc4 	bl	80051b8 <HAL_ADCEx_MultiModeConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001236:	f001 fcc9 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800123a:	4b5a      	ldr	r3, [pc, #360]	; (80013a4 <MX_ADC1_Init+0x218>)
 800123c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123e:	2306      	movs	r3, #6
 8001240:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001242:	2307      	movs	r3, #7
 8001244:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001246:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800124a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124c:	2304      	movs	r3, #4
 800124e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	484f      	ldr	r0, [pc, #316]	; (800139c <MX_ADC1_Init+0x210>)
 800125e:	f003 f907 	bl	8004470 <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001268:	f001 fcb0 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800126c:	4b4e      	ldr	r3, [pc, #312]	; (80013a8 <MX_ADC1_Init+0x21c>)
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001270:	230c      	movs	r3, #12
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	4619      	mov	r1, r3
 8001278:	4848      	ldr	r0, [pc, #288]	; (800139c <MX_ADC1_Init+0x210>)
 800127a:	f003 f8f9 	bl	8004470 <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001284:	f001 fca2 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001288:	4b48      	ldr	r3, [pc, #288]	; (80013ac <MX_ADC1_Init+0x220>)
 800128a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800128c:	2312      	movs	r3, #18
 800128e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	4841      	ldr	r0, [pc, #260]	; (800139c <MX_ADC1_Init+0x210>)
 8001296:	f003 f8eb 	bl	8004470 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80012a0:	f001 fc94 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012a4:	4b42      	ldr	r3, [pc, #264]	; (80013b0 <MX_ADC1_Init+0x224>)
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012a8:	2318      	movs	r3, #24
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	483a      	ldr	r0, [pc, #232]	; (800139c <MX_ADC1_Init+0x210>)
 80012b2:	f003 f8dd 	bl	8004470 <HAL_ADC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80012bc:	f001 fc86 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012c0:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <MX_ADC1_Init+0x228>)
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	4619      	mov	r1, r3
 80012ce:	4833      	ldr	r0, [pc, #204]	; (800139c <MX_ADC1_Init+0x210>)
 80012d0:	f003 f8ce 	bl	8004470 <HAL_ADC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80012da:	f001 fc77 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <MX_ADC1_Init+0x22c>)
 80012e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012e2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	482b      	ldr	r0, [pc, #172]	; (800139c <MX_ADC1_Init+0x210>)
 80012ee:	f003 f8bf 	bl	8004470 <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012f8:	f001 fc68 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012fc:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <MX_ADC1_Init+0x230>)
 80012fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001300:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001304:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	4824      	ldr	r0, [pc, #144]	; (800139c <MX_ADC1_Init+0x210>)
 800130c:	f003 f8b0 	bl	8004470 <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001316:	f001 fc59 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <MX_ADC1_Init+0x234>)
 800131c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800131e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001322:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	481c      	ldr	r0, [pc, #112]	; (800139c <MX_ADC1_Init+0x210>)
 800132a:	f003 f8a1 	bl	8004470 <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001334:	f001 fc4a 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <MX_ADC1_Init+0x238>)
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800133c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001340:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	4619      	mov	r1, r3
 8001346:	4815      	ldr	r0, [pc, #84]	; (800139c <MX_ADC1_Init+0x210>)
 8001348:	f003 f892 	bl	8004470 <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001352:	f001 fc3b 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_ADC1_Init+0x23c>)
 8001358:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800135a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	4619      	mov	r1, r3
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_ADC1_Init+0x210>)
 8001366:	f003 f883 	bl	8004470 <HAL_ADC_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001370:	f001 fc2c 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_ADC1_Init+0x240>)
 8001376:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001378:	f240 2306 	movw	r3, #518	; 0x206
 800137c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_ADC1_Init+0x210>)
 8001384:	f003 f874 	bl	8004470 <HAL_ADC_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800138e:	f001 fc1d 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2400013c 	.word	0x2400013c
 80013a0:	40022000 	.word	0x40022000
 80013a4:	0c900008 	.word	0x0c900008
 80013a8:	10c00010 	.word	0x10c00010
 80013ac:	14f00020 	.word	0x14f00020
 80013b0:	1d500080 	.word	0x1d500080
 80013b4:	21800100 	.word	0x21800100
 80013b8:	25b00200 	.word	0x25b00200
 80013bc:	2a000400 	.word	0x2a000400
 80013c0:	2e300800 	.word	0x2e300800
 80013c4:	3ac04000 	.word	0x3ac04000
 80013c8:	3ef08000 	.word	0x3ef08000
 80013cc:	47520000 	.word	0x47520000

080013d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]
 80013e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <MX_ADC3_Init+0x110>)
 80013ea:	4a3e      	ldr	r2, [pc, #248]	; (80014e4 <MX_ADC3_Init+0x114>)
 80013ec:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013ee:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <MX_ADC3_Init+0x110>)
 80013f0:	2208      	movs	r2, #8
 80013f2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013f4:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <MX_ADC3_Init+0x110>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <MX_ADC3_Init+0x110>)
 80013fc:	2204      	movs	r2, #4
 80013fe:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001400:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001402:	2200      	movs	r2, #0
 8001404:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001408:	2201      	movs	r2, #1
 800140a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <MX_ADC3_Init+0x110>)
 800140e:	2204      	movs	r2, #4
 8001410:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001414:	2200      	movs	r2, #0
 8001416:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <MX_ADC3_Init+0x110>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001420:	2200      	movs	r2, #0
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001426:	2203      	movs	r2, #3
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <MX_ADC3_Init+0x110>)
 800142c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <MX_ADC3_Init+0x110>)
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001440:	4827      	ldr	r0, [pc, #156]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001442:	f002 fd91 	bl	8003f68 <HAL_ADC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800144c:	f001 fbbe 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <MX_ADC3_Init+0x118>)
 8001452:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001454:	2306      	movs	r3, #6
 8001456:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001458:	2307      	movs	r3, #7
 800145a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800145c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001460:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001462:	2304      	movs	r3, #4
 8001464:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	481b      	ldr	r0, [pc, #108]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001474:	f002 fffc 	bl	8004470 <HAL_ADC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800147e:	f001 fba5 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_ADC3_Init+0x11c>)
 8001484:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001486:	230c      	movs	r3, #12
 8001488:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4814      	ldr	r0, [pc, #80]	; (80014e0 <MX_ADC3_Init+0x110>)
 8001490:	f002 ffee 	bl	8004470 <HAL_ADC_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800149a:	f001 fb97 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800149e:	2301      	movs	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014a2:	2312      	movs	r3, #18
 80014a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_ADC3_Init+0x110>)
 80014ac:	f002 ffe0 	bl	8004470 <HAL_ADC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80014b6:	f001 fb89 	bl	8002bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <MX_ADC3_Init+0x120>)
 80014bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014be:	2318      	movs	r3, #24
 80014c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <MX_ADC3_Init+0x110>)
 80014c8:	f002 ffd2 	bl	8004470 <HAL_ADC_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80014d2:	f001 fb7b 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	240001a0 	.word	0x240001a0
 80014e4:	58026000 	.word	0x58026000
 80014e8:	cb840000 	.word	0xcb840000
 80014ec:	cfb80000 	.word	0xcfb80000
 80014f0:	04300002 	.word	0x04300002

080014f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2224      	movs	r2, #36	; 0x24
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f014 fec3 	bl	801628c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_DAC1_Init+0x5c>)
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <MX_DAC1_Init+0x60>)
 800150a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800150c:	4810      	ldr	r0, [pc, #64]	; (8001550 <MX_DAC1_Init+0x5c>)
 800150e:	f004 f811 	bl	8005534 <HAL_DAC_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001518:	f001 fb58 	bl	8002bcc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001520:	230a      	movs	r3, #10
 8001522:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001528:	2301      	movs	r3, #1
 800152a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <MX_DAC1_Init+0x5c>)
 8001538:	f004 fa2c 	bl	8005994 <HAL_DAC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001542:	f001 fb43 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	240002f4 	.word	0x240002f4
 8001554:	40007400 	.word	0x40007400

08001558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_I2C1_Init+0x78>)
 800155e:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <MX_I2C1_Init+0x7c>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <MX_I2C1_Init+0x80>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_I2C1_Init+0x78>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001570:	2201      	movs	r2, #1
 8001572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <MX_I2C1_Init+0x78>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_I2C1_Init+0x78>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001592:	480f      	ldr	r0, [pc, #60]	; (80015d0 <MX_I2C1_Init+0x78>)
 8001594:	f007 fbf2 	bl	8008d7c <HAL_I2C_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800159e:	f001 fb15 	bl	8002bcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a2:	2100      	movs	r1, #0
 80015a4:	480a      	ldr	r0, [pc, #40]	; (80015d0 <MX_I2C1_Init+0x78>)
 80015a6:	f008 f939 	bl	800981c <HAL_I2CEx_ConfigAnalogFilter>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015b0:	f001 fb0c 	bl	8002bcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015b4:	2100      	movs	r1, #0
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_I2C1_Init+0x78>)
 80015b8:	f008 f97b 	bl	80098b2 <HAL_I2CEx_ConfigDigitalFilter>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015c2:	f001 fb03 	bl	8002bcc <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f008 f9c0 	bl	800994c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	24000380 	.word	0x24000380
 80015d4:	40005400 	.word	0x40005400
 80015d8:	0020081f 	.word	0x0020081f

080015dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015f0:	2300      	movs	r3, #0
 80015f2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_RTC_Init+0xb4>)
 80015f6:	4a27      	ldr	r2, [pc, #156]	; (8001694 <MX_RTC_Init+0xb8>)
 80015f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <MX_RTC_Init+0xb4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001600:	4b23      	ldr	r3, [pc, #140]	; (8001690 <MX_RTC_Init+0xb4>)
 8001602:	2263      	movs	r2, #99	; 0x63
 8001604:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <MX_RTC_Init+0xb4>)
 8001608:	f242 720f 	movw	r2, #9999	; 0x270f
 800160c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <MX_RTC_Init+0xb4>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_RTC_Init+0xb4>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_RTC_Init+0xb4>)
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_RTC_Init+0xb4>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001626:	481a      	ldr	r0, [pc, #104]	; (8001690 <MX_RTC_Init+0xb4>)
 8001628:	f00b ff14 	bl	800d454 <HAL_RTC_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001632:	f001 facb 	bl	8002bcc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001636:	2300      	movs	r3, #0
 8001638:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800163a:	2300      	movs	r3, #0
 800163c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800163e:	2300      	movs	r3, #0
 8001640:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2201      	movs	r2, #1
 800164e:	4619      	mov	r1, r3
 8001650:	480f      	ldr	r0, [pc, #60]	; (8001690 <MX_RTC_Init+0xb4>)
 8001652:	f00b ff81 	bl	800d558 <HAL_RTC_SetTime>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800165c:	f001 fab6 	bl	8002bcc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001660:	2301      	movs	r3, #1
 8001662:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001664:	2301      	movs	r3, #1
 8001666:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001668:	2301      	movs	r3, #1
 800166a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800166c:	2300      	movs	r3, #0
 800166e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	2201      	movs	r2, #1
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_RTC_Init+0xb4>)
 8001678:	f00c f868 	bl	800d74c <HAL_RTC_SetDate>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001682:	f001 faa3 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	240003d4 	.word	0x240003d4
 8001694:	58004000 	.word	0x58004000

08001698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <MX_SPI1_Init+0xa8>)
 800169e:	4a29      	ldr	r2, [pc, #164]	; (8001744 <MX_SPI1_Init+0xac>)
 80016a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016b4:	220f      	movs	r2, #15
 80016b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016ce:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_SPI1_Init+0xa8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_SPI1_Init+0xa8>)
 8001702:	2200      	movs	r2, #0
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_SPI1_Init+0xa8>)
 8001708:	2200      	movs	r2, #0
 800170a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_SPI1_Init+0xa8>)
 800170e:	2200      	movs	r2, #0
 8001710:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_SPI1_Init+0xa8>)
 8001714:	2200      	movs	r2, #0
 8001716:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_SPI1_Init+0xa8>)
 800171a:	2200      	movs	r2, #0
 800171c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_SPI1_Init+0xa8>)
 8001720:	2200      	movs	r2, #0
 8001722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_SPI1_Init+0xa8>)
 8001726:	2200      	movs	r2, #0
 8001728:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_SPI1_Init+0xa8>)
 800172c:	f00c f9b4 	bl	800da98 <HAL_SPI_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001736:	f001 fa49 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	240003f8 	.word	0x240003f8
 8001744:	40013000 	.word	0x40013000

08001748 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <MX_SPI2_Init+0xa8>)
 800174e:	4a29      	ldr	r2, [pc, #164]	; (80017f4 <MX_SPI2_Init+0xac>)
 8001750:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001754:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001758:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <MX_SPI2_Init+0xa8>)
 800175c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001760:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001764:	220f      	movs	r2, #15
 8001766:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_SPI2_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001776:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800177a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_SPI2_Init+0xa8>)
 800177e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001782:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_SPI2_Init+0xa8>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_SPI2_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_SPI2_Init+0xa8>)
 800179e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_SPI2_Init+0xa8>)
 80017dc:	f00c f95c 	bl	800da98 <HAL_SPI_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017e6:	f001 f9f1 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	24000480 	.word	0x24000480
 80017f4:	40003800 	.word	0x40003800

080017f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b09a      	sub	sp, #104	; 0x68
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
 8001828:	615a      	str	r2, [r3, #20]
 800182a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	222c      	movs	r2, #44	; 0x2c
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f014 fd2a 	bl	801628c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001838:	4b43      	ldr	r3, [pc, #268]	; (8001948 <MX_TIM1_Init+0x150>)
 800183a:	4a44      	ldr	r2, [pc, #272]	; (800194c <MX_TIM1_Init+0x154>)
 800183c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800183e:	4b42      	ldr	r3, [pc, #264]	; (8001948 <MX_TIM1_Init+0x150>)
 8001840:	2231      	movs	r2, #49	; 0x31
 8001842:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001844:	4b40      	ldr	r3, [pc, #256]	; (8001948 <MX_TIM1_Init+0x150>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <MX_TIM1_Init+0x150>)
 800184c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001850:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <MX_TIM1_Init+0x150>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001858:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <MX_TIM1_Init+0x150>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185e:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <MX_TIM1_Init+0x150>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001864:	4838      	ldr	r0, [pc, #224]	; (8001948 <MX_TIM1_Init+0x150>)
 8001866:	f00c fd68 	bl	800e33a <HAL_TIM_Base_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001870:	f001 f9ac 	bl	8002bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001878:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800187a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800187e:	4619      	mov	r1, r3
 8001880:	4831      	ldr	r0, [pc, #196]	; (8001948 <MX_TIM1_Init+0x150>)
 8001882:	f00d fae3 	bl	800ee4c <HAL_TIM_ConfigClockSource>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800188c:	f001 f99e 	bl	8002bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001890:	482d      	ldr	r0, [pc, #180]	; (8001948 <MX_TIM1_Init+0x150>)
 8001892:	f00d f85f 	bl	800e954 <HAL_TIM_PWM_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800189c:	f001 f996 	bl	8002bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018b0:	4619      	mov	r1, r3
 80018b2:	4825      	ldr	r0, [pc, #148]	; (8001948 <MX_TIM1_Init+0x150>)
 80018b4:	f00e f820 	bl	800f8f8 <HAL_TIMEx_MasterConfigSynchronization>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018be:	f001 f985 	bl	8002bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c2:	2360      	movs	r3, #96	; 0x60
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ce:	2300      	movs	r3, #0
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4818      	ldr	r0, [pc, #96]	; (8001948 <MX_TIM1_Init+0x150>)
 80018e8:	f00d f99c 	bl	800ec24 <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018f2:	f001 f96b 	bl	8002bcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800190a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001918:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4619      	mov	r1, r3
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <MX_TIM1_Init+0x150>)
 800192c:	f00e f872 	bl	800fa14 <HAL_TIMEx_ConfigBreakDeadTime>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001936:	f001 f949 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <MX_TIM1_Init+0x150>)
 800193c:	f001 fcf6 	bl	800332c <HAL_TIM_MspPostInit>

}
 8001940:	bf00      	nop
 8001942:	3768      	adds	r7, #104	; 0x68
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	24000508 	.word	0x24000508
 800194c:	40010000 	.word	0x40010000

08001950 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08e      	sub	sp, #56	; 0x38
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001970:	463b      	mov	r3, r7
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001982:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001988:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <MX_TIM2_Init+0xe8>)
 800198c:	2231      	movs	r2, #49	; 0x31
 800198e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001998:	f640 4234 	movw	r2, #3124	; 0xc34
 800199c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019a6:	2280      	movs	r2, #128	; 0x80
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019aa:	4823      	ldr	r0, [pc, #140]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019ac:	f00c fcc5 	bl	800e33a <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019b6:	f001 f909 	bl	8002bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c4:	4619      	mov	r1, r3
 80019c6:	481c      	ldr	r0, [pc, #112]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019c8:	f00d fa40 	bl	800ee4c <HAL_TIM_ConfigClockSource>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019d2:	f001 f8fb 	bl	8002bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019d6:	4818      	ldr	r0, [pc, #96]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019d8:	f00c ffbc 	bl	800e954 <HAL_TIM_PWM_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019e2:	f001 f8f3 	bl	8002bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019e6:	2320      	movs	r3, #32
 80019e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4810      	ldr	r0, [pc, #64]	; (8001a38 <MX_TIM2_Init+0xe8>)
 80019f6:	f00d ff7f 	bl	800f8f8 <HAL_TIMEx_MasterConfigSynchronization>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a00:	f001 f8e4 	bl	8002bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a04:	2360      	movs	r3, #96	; 0x60
 8001a06:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a14:	463b      	mov	r3, r7
 8001a16:	220c      	movs	r2, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001a1c:	f00d f902 	bl	800ec24 <HAL_TIM_PWM_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a26:	f001 f8d1 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a2a:	4803      	ldr	r0, [pc, #12]	; (8001a38 <MX_TIM2_Init+0xe8>)
 8001a2c:	f001 fc7e 	bl	800332c <HAL_TIM_MspPostInit>

}
 8001a30:	bf00      	nop
 8001a32:	3738      	adds	r7, #56	; 0x38
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24000554 	.word	0x24000554

08001a3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <MX_TIM3_Init+0x9c>)
 8001a5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a62:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a70:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001a84:	f00c fc59 	bl	800e33a <HAL_TIM_Base_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001a8e:	f001 f89d 	bl	8002bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001aa0:	f00d f9d4 	bl	800ee4c <HAL_TIM_ConfigClockSource>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001aaa:	f001 f88f 	bl	8002bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <MX_TIM3_Init+0x98>)
 8001abc:	f00d ff1c 	bl	800f8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001ac6:	f001 f881 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	240005a0 	.word	0x240005a0
 8001ad8:	40000400 	.word	0x40000400

08001adc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <MX_TIM4_Init+0x98>)
 8001afe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b02:	2263      	movs	r2, #99	; 0x63
 8001b04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b0e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b20:	4813      	ldr	r0, [pc, #76]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b22:	f00c fc0a 	bl	800e33a <HAL_TIM_Base_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b2c:	f001 f84e 	bl	8002bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480c      	ldr	r0, [pc, #48]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b3e:	f00d f985 	bl	800ee4c <HAL_TIM_ConfigClockSource>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b48:	f001 f840 	bl	8002bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b5a:	f00d fecd 	bl	800f8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b64:	f001 f832 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	240005ec 	.word	0x240005ec
 8001b74:	40000800 	.word	0x40000800

08001b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001b7e:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <MX_USART1_UART_Init+0x94>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001b84:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bc0:	4811      	ldr	r0, [pc, #68]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001bc2:	f00d ffc3 	bl	800fb4c <HAL_UART_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bcc:	f000 fffe 	bl	8002bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	480d      	ldr	r0, [pc, #52]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001bd4:	f010 fd3f 	bl	8012656 <HAL_UARTEx_SetTxFifoThreshold>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bde:	f000 fff5 	bl	8002bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be2:	2100      	movs	r1, #0
 8001be4:	4808      	ldr	r0, [pc, #32]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001be6:	f010 fd74 	bl	80126d2 <HAL_UARTEx_SetRxFifoThreshold>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bf0:	f000 ffec 	bl	8002bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_USART1_UART_Init+0x90>)
 8001bf6:	f010 fcf5 	bl	80125e4 <HAL_UARTEx_DisableFifoMode>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c00:	f000 ffe4 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	24000638 	.word	0x24000638
 8001c0c:	40011000 	.word	0x40011000

08001c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <MX_DMA_Init+0x6c>)
 8001c18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c1c:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <MX_DMA_Init+0x6c>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_DMA_Init+0x6c>)
 8001c28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2105      	movs	r1, #5
 8001c38:	200b      	movs	r0, #11
 8001c3a:	f003 fc53 	bl	80054e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c3e:	200b      	movs	r0, #11
 8001c40:	f003 fc6a 	bl	8005518 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2105      	movs	r1, #5
 8001c48:	200c      	movs	r0, #12
 8001c4a:	f003 fc4b 	bl	80054e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c4e:	200c      	movs	r0, #12
 8001c50:	f003 fc62 	bl	8005518 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2105      	movs	r1, #5
 8001c58:	200d      	movs	r0, #13
 8001c5a:	f003 fc43 	bl	80054e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c5e:	200d      	movs	r0, #13
 8001c60:	f003 fc5a 	bl	8005518 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2105      	movs	r1, #5
 8001c68:	2010      	movs	r0, #16
 8001c6a:	f003 fc3b 	bl	80054e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c6e:	2010      	movs	r0, #16
 8001c70:	f003 fc52 	bl	8005518 <HAL_NVIC_EnableIRQ>

}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	58024400 	.word	0x58024400

08001c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	4a32      	ldr	r2, [pc, #200]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cba:	4a2b      	ldr	r2, [pc, #172]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	4a23      	ldr	r2, [pc, #140]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce2:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <MX_GPIO_Init+0xe8>)
 8001d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001d14:	4815      	ldr	r0, [pc, #84]	; (8001d6c <MX_GPIO_Init+0xec>)
 8001d16:	f007 f817 	bl	8008d48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2164      	movs	r1, #100	; 0x64
 8001d1e:	4814      	ldr	r0, [pc, #80]	; (8001d70 <MX_GPIO_Init+0xf0>)
 8001d20:	f007 f812 	bl	8008d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d24:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001d28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <MX_GPIO_Init+0xec>)
 8001d3e:	f006 fe3b 	bl	80089b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_GPIO_Init+0xf0>)
 8001d5a:	f006 fe2d 	bl	80089b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	58020800 	.word	0x58020800
 8001d70:	58020400 	.word	0x58020400

08001d74 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	b299      	uxth	r1, r3
 8001d86:	f107 0208 	add.w	r2, r7, #8
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2301      	movs	r3, #1
 8001d92:	4817      	ldr	r0, [pc, #92]	; (8001df0 <poll_i2c_sensor+0x7c>)
 8001d94:	f007 f88e 	bl	8008eb4 <HAL_I2C_Master_Transmit>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001d9c:	7b7b      	ldrb	r3, [r7, #13]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001da2:	4814      	ldr	r0, [pc, #80]	; (8001df4 <poll_i2c_sensor+0x80>)
 8001da4:	f014 fbc8 	bl	8016538 <puts>
 8001da8:	e01c      	b.n	8001de4 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	b299      	uxth	r1, r3
 8001dae:	f107 0208 	add.w	r2, r7, #8
 8001db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2302      	movs	r3, #2
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <poll_i2c_sensor+0x7c>)
 8001dbc:	f007 f992 	bl	80090e4 <HAL_I2C_Master_Receive>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001dc4:	7b7b      	ldrb	r3, [r7, #13]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001dca:	480b      	ldr	r0, [pc, #44]	; (8001df8 <poll_i2c_sensor+0x84>)
 8001dcc:	f014 fbb4 	bl	8016538 <puts>
 8001dd0:	e008      	b.n	8001de4 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001dd2:	7a3b      	ldrb	r3, [r7, #8]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001dd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ddc:	7a7a      	ldrb	r2, [r7, #9]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	10db      	asrs	r3, r3, #3
 8001de2:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001de4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	24000380 	.word	0x24000380
 8001df4:	08016efc 	.word	0x08016efc
 8001df8:	08016f0c 	.word	0x08016f0c

08001dfc <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001e04:	f107 010c 	add.w	r1, r7, #12
 8001e08:	2301      	movs	r3, #1
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <receive_pmt_spi+0x44>)
 8001e0e:	f00b ff67 	bl	800dce0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e16:	7b7b      	ldrb	r3, [r7, #13]
 8001e18:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <receive_pmt_spi+0x44>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <receive_pmt_spi+0x44>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e28:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7bba      	ldrb	r2, [r7, #14]
 8001e2e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3301      	adds	r3, #1
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	701a      	strb	r2, [r3, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	240003f8 	.word	0x240003f8

08001e44 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001e4c:	f107 010c 	add.w	r1, r7, #12
 8001e50:	2364      	movs	r3, #100	; 0x64
 8001e52:	2201      	movs	r2, #1
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <receive_erpa_spi+0x44>)
 8001e56:	f00b ff43 	bl	800dce0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e5e:	7b7b      	ldrb	r3, [r7, #13]
 8001e60:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <receive_erpa_spi+0x44>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <receive_erpa_spi+0x44>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e70:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7bba      	ldrb	r2, [r7, #14]
 8001e76:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	701a      	strb	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	24000480 	.word	0x24000480

08001e8c <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <receive_erpa_adc+0x30>)
 8001e96:	885b      	ldrh	r3, [r3, #2]
 8001e98:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <receive_erpa_adc+0x30>)
 8001e9c:	895b      	ldrh	r3, [r3, #10]
 8001e9e:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	89fa      	ldrh	r2, [r7, #14]
 8001ea4:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	89ba      	ldrh	r2, [r7, #12]
 8001eac:	801a      	strh	r2, [r3, #0]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	24000ca0 	.word	0x24000ca0

08001ec0 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001ec8:	2390      	movs	r3, #144	; 0x90
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff52 	bl	8001d74 <poll_i2c_sensor>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001ed4:	2394      	movs	r3, #148	; 0x94
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff4c 	bl	8001d74 <poll_i2c_sensor>
 8001edc:	4603      	mov	r3, r0
 8001ede:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001ee0:	2392      	movs	r3, #146	; 0x92
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff46 	bl	8001d74 <poll_i2c_sensor>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001eec:	2396      	movs	r3, #150	; 0x96
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff40 	bl	8001d74 <poll_i2c_sensor>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	89fa      	ldrh	r2, [r7, #14]
 8001efc:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3302      	adds	r3, #2
 8001f02:	89ba      	ldrh	r2, [r7, #12]
 8001f04:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	897a      	ldrh	r2, [r7, #10]
 8001f0c:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3306      	adds	r3, #6
 8001f12:	893a      	ldrh	r2, [r7, #8]
 8001f14:	801a      	strh	r2, [r3, #0]
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_UART_TxCpltCallback+0x1c>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	24000000 	.word	0x24000000

08001f40 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f014 f97d 	bl	8016250 <malloc>
 8001f56:	4603      	mov	r3, r0
 8001f58:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	88fa      	ldrh	r2, [r7, #6]
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f014 f985 	bl	8016270 <memcpy>
	packet.size = size;
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	82bb      	strh	r3, [r7, #20]
	return packet;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f107 0310 	add.w	r3, r7, #16
 8001f72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f76:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <handshake>:

/**
 * @brief Performs a handshake by receiving and sending data over UART.
 * @return Status of the handshake operation.
 */
int handshake() {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b090      	sub	sp, #64	; 0x40
 8001f88:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do {
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001f8e:	f107 011c 	add.w	r1, r7, #28
 8001f92:	2364      	movs	r3, #100	; 0x64
 8001f94:	2209      	movs	r2, #9
 8001f96:	4840      	ldr	r0, [pc, #256]	; (8002098 <handshake+0x114>)
 8001f98:	f00d feb6 	bl	800fd08 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001f9c:	7f3b      	ldrb	r3, [r7, #28]
 8001f9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	} while (key != 0xFF);
 8001fa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001fa6:	2bff      	cmp	r3, #255	; 0xff
 8001fa8:	d1f1      	bne.n	8001f8e <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001faa:	7f7b      	ldrb	r3, [r7, #29]
 8001fac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001fb0:	7fbb      	ldrb	r3, [r7, #30]
 8001fb2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001fb6:	7ffb      	ldrb	r3, [r7, #31]
 8001fb8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001fbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001fc4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fc8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001fcc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fd0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8];
 8001fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001fe8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001fec:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001fee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ff2:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001ff4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ff8:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001ffa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ffe:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8002000:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002004:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8002006:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800200a:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds;
 800200c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800200e:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8002010:	f107 0318 	add.w	r3, r7, #24
 8002014:	2200      	movs	r2, #0
 8002016:	4619      	mov	r1, r3
 8002018:	4820      	ldr	r0, [pc, #128]	; (800209c <handshake+0x118>)
 800201a:	f00b fb97 	bl	800d74c <HAL_RTC_SetDate>
 800201e:	4603      	mov	r3, r0
 8002020:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 8002024:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <handshake+0xac>
		Error_Handler();
 800202c:	f000 fdce 	bl	8002bcc <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2200      	movs	r2, #0
 8002034:	4619      	mov	r1, r3
 8002036:	4819      	ldr	r0, [pc, #100]	; (800209c <handshake+0x118>)
 8002038:	f00b fa8e 	bl	800d558 <HAL_RTC_SetTime>
 800203c:	4603      	mov	r3, r0
 800203e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 8002042:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <handshake+0xca>
		Error_Handler();
 800204a:	f000 fdbf 	bl	8002bcc <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 800204e:	23fa      	movs	r3, #250	; 0xfa
 8002050:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 2;
 8002054:	2302      	movs	r3, #2
 8002056:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for (int i = 0; i < allowed_tries; i++) {
 800206c:	2300      	movs	r3, #0
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002070:	e009      	b.n	8002086 <handshake+0x102>
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8002072:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002076:	2364      	movs	r3, #100	; 0x64
 8002078:	2205      	movs	r2, #5
 800207a:	4807      	ldr	r0, [pc, #28]	; (8002098 <handshake+0x114>)
 800207c:	f00d fdb6 	bl	800fbec <HAL_UART_Transmit>
	for (int i = 0; i < allowed_tries; i++) {
 8002080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002082:	3301      	adds	r3, #1
 8002084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208a:	429a      	cmp	r2, r3
 800208c:	dbf1      	blt.n	8002072 <handshake+0xee>
	}

	return 1;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3740      	adds	r7, #64	; 0x40
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	24000638 	.word	0x24000638
 800209c:	240003d4 	.word	0x240003d4

080020a0 <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80020a4:	2100      	movs	r1, #0
 80020a6:	481b      	ldr	r0, [pc, #108]	; (8002114 <system_setup+0x74>)
 80020a8:	f00c fa16 	bl	800e4d8 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 80020ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80020b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020be:	4816      	ldr	r0, [pc, #88]	; (8002118 <system_setup+0x78>)
 80020c0:	f003 f816 	bl	80050f0 <HAL_ADCEx_Calibration_Start>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80020ca:	f000 fd7f 	bl	8002bcc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80020ce:	220b      	movs	r2, #11
 80020d0:	4912      	ldr	r1, [pc, #72]	; (800211c <system_setup+0x7c>)
 80020d2:	4811      	ldr	r0, [pc, #68]	; (8002118 <system_setup+0x78>)
 80020d4:	f002 f8ea 	bl	80042ac <HAL_ADC_Start_DMA>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80020de:	f000 fd75 	bl	8002bcc <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80020e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020ea:	480d      	ldr	r0, [pc, #52]	; (8002120 <system_setup+0x80>)
 80020ec:	f003 f800 	bl	80050f0 <HAL_ADCEx_Calibration_Start>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80020f6:	f000 fd69 	bl	8002bcc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80020fa:	2204      	movs	r2, #4
 80020fc:	4909      	ldr	r1, [pc, #36]	; (8002124 <system_setup+0x84>)
 80020fe:	4808      	ldr	r0, [pc, #32]	; (8002120 <system_setup+0x80>)
 8002100:	f002 f8d4 	bl	80042ac <HAL_ADC_Start_DMA>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800210a:	f000 fd5f 	bl	8002bcc <Error_Handler>
	}
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	240005ec 	.word	0x240005ec
 8002118:	2400013c 	.word	0x2400013c
 800211c:	24000ca0 	.word	0x24000ca0
 8002120:	240001a0 	.word	0x240001a0
 8002124:	24000cc0 	.word	0x24000cc0

08002128 <getMicro>:

uint32_t getMicro()
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0

    uint32_t ms = UptimeMillis;
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <getMicro+0x54>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	607b      	str	r3, [r7, #4]
    uint32_t st = SysTick->VAL;
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <getMicro+0x58>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	603b      	str	r3, [r7, #0]

    // Did UptimeMillis rollover while reading SysTick->VAL?
    if (ms != UptimeMillis)
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <getMicro+0x54>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	d005      	beq.n	8002150 <getMicro+0x28>
        // Rollover occurred so read both again.
        // Must read both because we don't know whether the
        // rollover occurred before or after reading SysTick->VAL.
        // No need to check for another rollover because there is
        // no chance of another rollover occurring so quickly.
        ms = UptimeMillis;
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <getMicro+0x54>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	607b      	str	r3, [r7, #4]
        st = SysTick->VAL;
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <getMicro+0x58>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	603b      	str	r3, [r7, #0]
    }
    return ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002156:	fb03 f202 	mul.w	r2, r3, r2
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <getMicro+0x58>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	3301      	adds	r3, #1
 8002160:	4908      	ldr	r1, [pc, #32]	; (8002184 <getMicro+0x5c>)
 8002162:	fba1 1303 	umull	r1, r3, r1, r3
 8002166:	099b      	lsrs	r3, r3, #6
 8002168:	6839      	ldr	r1, [r7, #0]
 800216a:	fbb1 f3f3 	udiv	r3, r1, r3
 800216e:	1ad3      	subs	r3, r2, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	24000c38 	.word	0x24000c38
 8002180:	e000e010 	.word	0xe000e010
 8002184:	10624dd3 	.word	0x10624dd3

08002188 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2200      	movs	r2, #0
 8002196:	4619      	mov	r1, r3
 8002198:	4822      	ldr	r0, [pc, #136]	; (8002224 <getTimestamp+0x9c>)
 800219a:	f00b fa7b 	bl	800d694 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800219e:	f107 0308 	add.w	r3, r7, #8
 80021a2:	2200      	movs	r2, #0
 80021a4:	4619      	mov	r1, r3
 80021a6:	481f      	ldr	r0, [pc, #124]	; (8002224 <getTimestamp+0x9c>)
 80021a8:	f00b fb58 	bl	800d85c <HAL_RTC_GetDate>
	uint32_t micro = getMicro();
 80021ac:	f7ff ffbc 	bl	8002128 <getMicro>
 80021b0:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t milliseconds = 1000000 - (currentTime.SubSeconds * 100);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2264      	movs	r2, #100	; 0x64
 80021b6:	fb03 f202 	mul.w	r2, r3, r2
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <getTimestamp+0xa0>)
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	623b      	str	r3, [r7, #32]

	buffer[0] = currentDate.Year;				// 0-99
 80021c0:	7afa      	ldrb	r2, [r7, #11]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;				// 1-12
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3301      	adds	r3, #1
 80021ca:	7a7a      	ldrb	r2, [r7, #9]
 80021cc:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;				// 1-31
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3302      	adds	r3, #2
 80021d2:	7aba      	ldrb	r2, [r7, #10]
 80021d4:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;				// 0-23
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3303      	adds	r3, #3
 80021da:	7b3a      	ldrb	r2, [r7, #12]
 80021dc:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;			// 0-59
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3304      	adds	r3, #4
 80021e2:	7b7a      	ldrb	r2, [r7, #13]
 80021e4:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;			// 0-59
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3305      	adds	r3, #5
 80021ea:	7bba      	ldrb	r2, [r7, #14]
 80021ec:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((micro >> 24) & 0xFF);
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	0e1a      	lsrs	r2, r3, #24
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3306      	adds	r3, #6
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((micro >> 16) & 0xFF);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	0c1a      	lsrs	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3307      	adds	r3, #7
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((micro >> 8) & 0xFF);
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	0a1a      	lsrs	r2, r3, #8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3308      	adds	r3, #8
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]
	buffer[9] = micro & 0xFF;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3309      	adds	r3, #9
 8002216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	240003d4 	.word	0x240003d4
 8002228:	000f4240 	.word	0x000f4240

0800222c <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002232:	bf00      	nop
 8002234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002238:	4845      	ldr	r0, [pc, #276]	; (8002350 <sample_pmt+0x124>)
 800223a:	f006 fd6d 	bl	8008d18 <HAL_GPIO_ReadPin>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f7      	bne.n	8002234 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8002244:	2010      	movs	r0, #16
 8002246:	f014 f803 	bl	8016250 <malloc>
 800224a:	4603      	mov	r3, r0
 800224c:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800224e:	2002      	movs	r0, #2
 8002250:	f013 fffe 	bl	8016250 <malloc>
 8002254:	4603      	mov	r3, r0
 8002256:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 8002258:	200a      	movs	r0, #10
 800225a:	f013 fff9 	bl	8016250 <malloc>
 800225e:	4603      	mov	r3, r0
 8002260:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f7ff ff90 	bl	8002188 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 8002268:	6938      	ldr	r0, [r7, #16]
 800226a:	f7ff fdc7 	bl	8001dfc <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	22bb      	movs	r2, #187	; 0xbb
 8002272:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3301      	adds	r3, #1
 8002278:	22bb      	movs	r2, #187	; 0xbb
 800227a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 800227c:	4b35      	ldr	r3, [pc, #212]	; (8002354 <sample_pmt+0x128>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	b29a      	uxth	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3302      	adds	r3, #2
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800228c:	4b31      	ldr	r3, [pc, #196]	; (8002354 <sample_pmt+0x128>)
 800228e:	881a      	ldrh	r2, [r3, #0]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3303      	adds	r3, #3
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3304      	adds	r3, #4
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	7812      	ldrb	r2, [r2, #0]
 80022a0:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3305      	adds	r3, #5
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	7852      	ldrb	r2, [r2, #1]
 80022aa:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3306      	adds	r3, #6
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	7812      	ldrb	r2, [r2, #0]
 80022b4:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3307      	adds	r3, #7
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	7852      	ldrb	r2, [r2, #1]
 80022be:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3308      	adds	r3, #8
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	7892      	ldrb	r2, [r2, #2]
 80022c8:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3309      	adds	r3, #9
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	78d2      	ldrb	r2, [r2, #3]
 80022d2:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	330a      	adds	r3, #10
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	7912      	ldrb	r2, [r2, #4]
 80022dc:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	330b      	adds	r3, #11
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	7952      	ldrb	r2, [r2, #5]
 80022e6:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	330c      	adds	r3, #12
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	7992      	ldrb	r2, [r2, #6]
 80022f0:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	330d      	adds	r3, #13
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	79d2      	ldrb	r2, [r2, #7]
 80022fa:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[8];
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	330e      	adds	r3, #14
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	7a12      	ldrb	r2, [r2, #8]
 8002304:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[9];
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	330f      	adds	r3, #15
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	7a52      	ldrb	r2, [r2, #9]
 800230e:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2210      	movs	r2, #16
 8002314:	6979      	ldr	r1, [r7, #20]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fe12 	bl	8001f40 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <sample_pmt+0x12c>)
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	1d39      	adds	r1, r7, #4
 8002322:	2300      	movs	r3, #0
 8002324:	2200      	movs	r2, #0
 8002326:	f010 fd41 	bl	8012dac <osMessageQueuePut>
	available_msgs++;
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <sample_pmt+0x130>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <sample_pmt+0x130>)
 8002332:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002334:	6978      	ldr	r0, [r7, #20]
 8002336:	f013 ff93 	bl	8016260 <free>
	free(pmt_spi);
 800233a:	6938      	ldr	r0, [r7, #16]
 800233c:	f013 ff90 	bl	8016260 <free>
	free(timestamp);
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f013 ff8d 	bl	8016260 <free>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	58020000 	.word	0x58020000
 8002354:	24000c4c 	.word	0x24000c4c
 8002358:	24000c3c 	.word	0x24000c3c
 800235c:	24000c48 	.word	0x24000c48

08002360 <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002366:	bf00      	nop
 8002368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800236c:	4859      	ldr	r0, [pc, #356]	; (80024d4 <sample_erpa+0x174>)
 800236e:	f006 fcd3 	bl	8008d18 <HAL_GPIO_ReadPin>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f7      	bne.n	8002368 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002378:	2014      	movs	r0, #20
 800237a:	f013 ff69 	bl	8016250 <malloc>
 800237e:	4603      	mov	r3, r0
 8002380:	617b      	str	r3, [r7, #20]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002382:	2002      	movs	r0, #2
 8002384:	f013 ff64 	bl	8016250 <malloc>
 8002388:	4603      	mov	r3, r0
 800238a:	613b      	str	r3, [r7, #16]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 800238c:	2004      	movs	r0, #4
 800238e:	f013 ff5f 	bl	8016250 <malloc>
 8002392:	4603      	mov	r3, r0
 8002394:	60fb      	str	r3, [r7, #12]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 8002396:	200a      	movs	r0, #10
 8002398:	f013 ff5a 	bl	8016250 <malloc>
 800239c:	4603      	mov	r3, r0
 800239e:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 80023a0:	68b8      	ldr	r0, [r7, #8]
 80023a2:	f7ff fef1 	bl	8002188 <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 80023a6:	6938      	ldr	r0, [r7, #16]
 80023a8:	f7ff fd4c 	bl	8001e44 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f7ff fd6d 	bl	8001e8c <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	22aa      	movs	r2, #170	; 0xaa
 80023b6:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3301      	adds	r3, #1
 80023bc:	22aa      	movs	r2, #170	; 0xaa
 80023be:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 80023c0:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <sample_erpa+0x178>)
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3302      	adds	r3, #2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 80023d0:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <sample_erpa+0x178>)
 80023d2:	881a      	ldrh	r2, [r3, #0]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3303      	adds	r3, #3
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	3304      	adds	r3, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	881a      	ldrh	r2, [r3, #0]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3305      	adds	r3, #5
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	3302      	adds	r3, #2
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	b29a      	uxth	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3306      	adds	r3, #6
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3302      	adds	r3, #2
 800240e:	881a      	ldrh	r2, [r3, #0]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3307      	adds	r3, #7
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3308      	adds	r3, #8
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	7812      	ldrb	r2, [r2, #0]
 8002420:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3309      	adds	r3, #9
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	7852      	ldrb	r2, [r2, #1]
 800242a:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	330a      	adds	r3, #10
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	7812      	ldrb	r2, [r2, #0]
 8002434:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	330b      	adds	r3, #11
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	7852      	ldrb	r2, [r2, #1]
 800243e:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	330c      	adds	r3, #12
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	7892      	ldrb	r2, [r2, #2]
 8002448:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	330d      	adds	r3, #13
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	78d2      	ldrb	r2, [r2, #3]
 8002452:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	330e      	adds	r3, #14
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	7912      	ldrb	r2, [r2, #4]
 800245c:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	330f      	adds	r3, #15
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	7952      	ldrb	r2, [r2, #5]
 8002466:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3310      	adds	r3, #16
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	7992      	ldrb	r2, [r2, #6]
 8002470:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3311      	adds	r3, #17
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	79d2      	ldrb	r2, [r2, #7]
 800247a:	701a      	strb	r2, [r3, #0]
	buffer[18] = timestamp[8];
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3312      	adds	r3, #18
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	7a12      	ldrb	r2, [r2, #8]
 8002484:	701a      	strb	r2, [r3, #0]
	buffer[19] = timestamp[9];
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3313      	adds	r3, #19
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	7a52      	ldrb	r2, [r2, #9]
 800248e:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002490:	463b      	mov	r3, r7
 8002492:	2214      	movs	r2, #20
 8002494:	6979      	ldr	r1, [r7, #20]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fd52 	bl	8001f40 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <sample_erpa+0x17c>)
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	4639      	mov	r1, r7
 80024a2:	2300      	movs	r3, #0
 80024a4:	2200      	movs	r2, #0
 80024a6:	f010 fc81 	bl	8012dac <osMessageQueuePut>
	available_msgs++;
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <sample_erpa+0x180>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <sample_erpa+0x180>)
 80024b2:	6013      	str	r3, [r2, #0]
	free(buffer);
 80024b4:	6978      	ldr	r0, [r7, #20]
 80024b6:	f013 fed3 	bl	8016260 <free>
	free(erpa_spi);
 80024ba:	6938      	ldr	r0, [r7, #16]
 80024bc:	f013 fed0 	bl	8016260 <free>
	free(erpa_adc);
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f013 fecd 	bl	8016260 <free>
	free(timestamp);
 80024c6:	68b8      	ldr	r0, [r7, #8]
 80024c8:	f013 feca 	bl	8016260 <free>
}
 80024cc:	bf00      	nop
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	58020400 	.word	0x58020400
 80024d8:	24000c4e 	.word	0x24000c4e
 80024dc:	24000c3c 	.word	0x24000c3c
 80024e0:	24000c48 	.word	0x24000c48

080024e4 <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 80024ea:	2030      	movs	r0, #48	; 0x30
 80024ec:	f013 feb0 	bl	8016250 <malloc>
 80024f0:	4603      	mov	r3, r0
 80024f2:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80024f4:	2008      	movs	r0, #8
 80024f6:	f013 feab 	bl	8016250 <malloc>
 80024fa:	4603      	mov	r3, r0
 80024fc:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 80024fe:	200a      	movs	r0, #10
 8002500:	f013 fea6 	bl	8016250 <malloc>
 8002504:	4603      	mov	r3, r0
 8002506:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff fe3d 	bl	8002188 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <sample_hk+0x78>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002516:	db25      	blt.n	8002564 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 8002518:	6938      	ldr	r0, [r7, #16]
 800251a:	f7ff fcd1 	bl	8001ec0 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002524:	b29a      	uxth	r2, r3
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <sample_hk+0x7c>)
 8002528:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	3302      	adds	r3, #2
 800252e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002532:	b29a      	uxth	r2, r3
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <sample_hk+0x7c>)
 8002536:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	3304      	adds	r3, #4
 800253c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b07      	ldr	r3, [pc, #28]	; (8002560 <sample_hk+0x7c>)
 8002544:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	3306      	adds	r3, #6
 800254a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254e:	b29a      	uxth	r2, r3
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <sample_hk+0x7c>)
 8002552:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 8002554:	4b01      	ldr	r3, [pc, #4]	; (800255c <sample_hk+0x78>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e01f      	b.n	800259c <sample_hk+0xb8>
 800255c:	24000004 	.word	0x24000004
 8002560:	24000cc8 	.word	0x24000cc8
	} else {
		TEMPERATURE_COUNTER++;
 8002564:	4b9f      	ldr	r3, [pc, #636]	; (80027e4 <sample_hk+0x300>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	4a9e      	ldr	r2, [pc, #632]	; (80027e4 <sample_hk+0x300>)
 800256c:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 800256e:	4b9e      	ldr	r3, [pc, #632]	; (80027e8 <sample_hk+0x304>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b21a      	sxth	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 8002578:	4b9b      	ldr	r3, [pc, #620]	; (80027e8 <sample_hk+0x304>)
 800257a:	885a      	ldrh	r2, [r3, #2]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	3302      	adds	r3, #2
 8002580:	b212      	sxth	r2, r2
 8002582:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 8002584:	4b98      	ldr	r3, [pc, #608]	; (80027e8 <sample_hk+0x304>)
 8002586:	889a      	ldrh	r2, [r3, #4]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	3304      	adds	r3, #4
 800258c:	b212      	sxth	r2, r2
 800258e:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 8002590:	4b95      	ldr	r3, [pc, #596]	; (80027e8 <sample_hk+0x304>)
 8002592:	88da      	ldrh	r2, [r3, #6]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	3306      	adds	r3, #6
 8002598:	b212      	sxth	r2, r2
 800259a:	801a      	strh	r2, [r3, #0]
	}

#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	22cc      	movs	r2, #204	; 0xcc
 80025a0:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3301      	adds	r3, #1
 80025a6:	22cc      	movs	r2, #204	; 0xcc
 80025a8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80025aa:	4b90      	ldr	r3, [pc, #576]	; (80027ec <sample_hk+0x308>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3302      	adds	r3, #2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80025ba:	4b8c      	ldr	r3, [pc, #560]	; (80027ec <sample_hk+0x308>)
 80025bc:	881a      	ldrh	r2, [r3, #0]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3303      	adds	r3, #3
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 80025c6:	4b8a      	ldr	r3, [pc, #552]	; (80027f0 <sample_hk+0x30c>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3304      	adds	r3, #4
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 80025d6:	4b86      	ldr	r3, [pc, #536]	; (80027f0 <sample_hk+0x30c>)
 80025d8:	881a      	ldrh	r2, [r3, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3305      	adds	r3, #5
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 80025e2:	4b84      	ldr	r3, [pc, #528]	; (80027f4 <sample_hk+0x310>)
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	0a1b      	lsrs	r3, r3, #8
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3306      	adds	r3, #6
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 80025f2:	4b80      	ldr	r3, [pc, #512]	; (80027f4 <sample_hk+0x310>)
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3307      	adds	r3, #7
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002604:	121a      	asrs	r2, r3, #8
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3308      	adds	r3, #8
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3309      	adds	r3, #9
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	3302      	adds	r3, #2
 8002620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002624:	121a      	asrs	r2, r3, #8
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	330a      	adds	r3, #10
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	3302      	adds	r3, #2
 8002632:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	330b      	adds	r3, #11
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	3304      	adds	r3, #4
 8002642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002646:	121a      	asrs	r2, r3, #8
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	330c      	adds	r3, #12
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	3304      	adds	r3, #4
 8002654:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	330d      	adds	r3, #13
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	3306      	adds	r3, #6
 8002664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002668:	121a      	asrs	r2, r3, #8
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	330e      	adds	r3, #14
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	3306      	adds	r3, #6
 8002676:	f9b3 2000 	ldrsh.w	r2, [r3]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	330f      	adds	r3, #15
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002682:	4b5d      	ldr	r3, [pc, #372]	; (80027f8 <sample_hk+0x314>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	b29a      	uxth	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3310      	adds	r3, #16
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 8002692:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <sample_hk+0x314>)
 8002694:	881a      	ldrh	r2, [r3, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3311      	adds	r3, #17
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 800269e:	4b57      	ldr	r3, [pc, #348]	; (80027fc <sample_hk+0x318>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3312      	adds	r3, #18
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 80026ae:	4b53      	ldr	r3, [pc, #332]	; (80027fc <sample_hk+0x318>)
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3313      	adds	r3, #19
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 80026ba:	4b51      	ldr	r3, [pc, #324]	; (8002800 <sample_hk+0x31c>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3314      	adds	r3, #20
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 80026ca:	4b4d      	ldr	r3, [pc, #308]	; (8002800 <sample_hk+0x31c>)
 80026cc:	881a      	ldrh	r2, [r3, #0]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3315      	adds	r3, #21
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 80026d6:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <sample_hk+0x320>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	b29a      	uxth	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	3316      	adds	r3, #22
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <sample_hk+0x320>)
 80026e8:	881a      	ldrh	r2, [r3, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3317      	adds	r3, #23
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 80026f2:	4b45      	ldr	r3, [pc, #276]	; (8002808 <sample_hk+0x324>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3318      	adds	r3, #24
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 8002702:	4b41      	ldr	r3, [pc, #260]	; (8002808 <sample_hk+0x324>)
 8002704:	881a      	ldrh	r2, [r3, #0]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3319      	adds	r3, #25
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 800270e:	4b3f      	ldr	r3, [pc, #252]	; (800280c <sample_hk+0x328>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	b29a      	uxth	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	331a      	adds	r3, #26
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 800271e:	4b3b      	ldr	r3, [pc, #236]	; (800280c <sample_hk+0x328>)
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	331b      	adds	r3, #27
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <sample_hk+0x32c>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	b29a      	uxth	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	331c      	adds	r3, #28
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 800273a:	4b35      	ldr	r3, [pc, #212]	; (8002810 <sample_hk+0x32c>)
 800273c:	881a      	ldrh	r2, [r3, #0]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	331d      	adds	r3, #29
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 8002746:	4b33      	ldr	r3, [pc, #204]	; (8002814 <sample_hk+0x330>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	b29a      	uxth	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	331e      	adds	r3, #30
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 8002756:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <sample_hk+0x330>)
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	331f      	adds	r3, #31
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002762:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <sample_hk+0x334>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	b29a      	uxth	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3320      	adds	r3, #32
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <sample_hk+0x334>)
 8002774:	881a      	ldrh	r2, [r3, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3321      	adds	r3, #33	; 0x21
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 800277e:	4b27      	ldr	r3, [pc, #156]	; (800281c <sample_hk+0x338>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	b29a      	uxth	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3322      	adds	r3, #34	; 0x22
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <sample_hk+0x338>)
 8002790:	881a      	ldrh	r2, [r3, #0]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3323      	adds	r3, #35	; 0x23
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 800279a:	4b21      	ldr	r3, [pc, #132]	; (8002820 <sample_hk+0x33c>)
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3324      	adds	r3, #36	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <sample_hk+0x33c>)
 80027ac:	881a      	ldrh	r2, [r3, #0]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3325      	adds	r3, #37	; 0x25
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3326      	adds	r3, #38	; 0x26
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	7812      	ldrb	r2, [r2, #0]
 80027be:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3327      	adds	r3, #39	; 0x27
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	7852      	ldrb	r2, [r2, #1]
 80027c8:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3328      	adds	r3, #40	; 0x28
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	7892      	ldrb	r2, [r2, #2]
 80027d2:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3329      	adds	r3, #41	; 0x29
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	78d2      	ldrb	r2, [r2, #3]
 80027dc:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	332a      	adds	r3, #42	; 0x2a
 80027e2:	e01f      	b.n	8002824 <sample_hk+0x340>
 80027e4:	24000004 	.word	0x24000004
 80027e8:	24000cc8 	.word	0x24000cc8
 80027ec:	24000c50 	.word	0x24000c50
 80027f0:	24000c1c 	.word	0x24000c1c
 80027f4:	24000c1e 	.word	0x24000c1e
 80027f8:	24000c20 	.word	0x24000c20
 80027fc:	24000c22 	.word	0x24000c22
 8002800:	24000c24 	.word	0x24000c24
 8002804:	24000c26 	.word	0x24000c26
 8002808:	24000c28 	.word	0x24000c28
 800280c:	24000c2a 	.word	0x24000c2a
 8002810:	24000c2c 	.word	0x24000c2c
 8002814:	24000c2e 	.word	0x24000c2e
 8002818:	24000c30 	.word	0x24000c30
 800281c:	24000c32 	.word	0x24000c32
 8002820:	24000c34 	.word	0x24000c34
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	7912      	ldrb	r2, [r2, #4]
 8002828:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	332b      	adds	r3, #43	; 0x2b
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	7952      	ldrb	r2, [r2, #5]
 8002832:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	332c      	adds	r3, #44	; 0x2c
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	7992      	ldrb	r2, [r2, #6]
 800283c:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	332d      	adds	r3, #45	; 0x2d
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	79d2      	ldrb	r2, [r2, #7]
 8002846:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	332e      	adds	r3, #46	; 0x2e
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	7a12      	ldrb	r2, [r2, #8]
 8002850:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	332f      	adds	r3, #47	; 0x2f
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	7a52      	ldrb	r2, [r2, #9]
 800285a:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	2230      	movs	r2, #48	; 0x30
 8002860:	6979      	ldr	r1, [r7, #20]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fb6c 	bl	8001f40 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <sample_hk+0x3b8>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	1d39      	adds	r1, r7, #4
 800286e:	2300      	movs	r3, #0
 8002870:	2200      	movs	r2, #0
 8002872:	f010 fa9b 	bl	8012dac <osMessageQueuePut>
	available_msgs++;
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <sample_hk+0x3bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3301      	adds	r3, #1
 800287c:	4a08      	ldr	r2, [pc, #32]	; (80028a0 <sample_hk+0x3bc>)
 800287e:	6013      	str	r3, [r2, #0]

	free(buffer);
 8002880:	6978      	ldr	r0, [r7, #20]
 8002882:	f013 fced 	bl	8016260 <free>
	free(hk_i2c);
 8002886:	6938      	ldr	r0, [r7, #16]
 8002888:	f013 fcea 	bl	8016260 <free>
	free(timestamp);
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f013 fce7 	bl	8016260 <free>
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	24000c3c 	.word	0x24000c3c
 80028a0:	24000c48 	.word	0x24000c48

080028a4 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <PMT_init+0x38>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028b4:	2200      	movs	r2, #0
 80028b6:	2101      	movs	r1, #1
 80028b8:	f010 f99e 	bl	8012bf8 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <PMT_init+0x3c>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <PMT_init+0x30>
			sample_pmt();
 80028c4:	f7ff fcb2 	bl	800222c <sample_pmt>
			pmt_seq++;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <PMT_init+0x40>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <PMT_init+0x40>)
 80028d2:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 80028d4:	f010 f8aa 	bl	8012a2c <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 80028d8:	e7e8      	b.n	80028ac <PMT_init+0x8>
 80028da:	bf00      	nop
 80028dc:	24000c58 	.word	0x24000c58
 80028e0:	24000c52 	.word	0x24000c52
 80028e4:	24000c4c 	.word	0x24000c4c

080028e8 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <ERPA_init+0x38>)
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028f8:	2200      	movs	r2, #0
 80028fa:	2102      	movs	r1, #2
 80028fc:	f010 f97c 	bl	8012bf8 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <ERPA_init+0x3c>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <ERPA_init+0x30>
			sample_erpa();
 8002908:	f7ff fd2a 	bl	8002360 <sample_erpa>
			erpa_seq++;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <ERPA_init+0x40>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <ERPA_init+0x40>)
 8002916:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002918:	f010 f888 	bl	8012a2c <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 800291c:	e7e8      	b.n	80028f0 <ERPA_init+0x8>
 800291e:	bf00      	nop
 8002920:	24000c58 	.word	0x24000c58
 8002924:	24000c53 	.word	0x24000c53
 8002928:	24000c4e 	.word	0x24000c4e

0800292c <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HK_init+0x38>)
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800293c:	2200      	movs	r2, #0
 800293e:	2104      	movs	r1, #4
 8002940:	f010 f95a 	bl	8012bf8 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HK_init+0x3c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <HK_init+0x30>
			sample_hk();
 800294c:	f7ff fdca 	bl	80024e4 <sample_hk>
			hk_seq++;
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <HK_init+0x40>)
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <HK_init+0x40>)
 800295a:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 800295c:	f010 f866 	bl	8012a2c <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002960:	e7e8      	b.n	8002934 <HK_init+0x8>
 8002962:	bf00      	nop
 8002964:	24000c58 	.word	0x24000c58
 8002968:	24000c54 	.word	0x24000c54
 800296c:	24000c50 	.word	0x24000c50

08002970 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002978:	2201      	movs	r2, #1
 800297a:	4904      	ldr	r1, [pc, #16]	; (800298c <UART_RX_init+0x1c>)
 800297c:	4804      	ldr	r0, [pc, #16]	; (8002990 <UART_RX_init+0x20>)
 800297e:	f00d fa8b 	bl	800fe98 <HAL_UART_Receive_IT>
		osDelay(5);
 8002982:	2005      	movs	r0, #5
 8002984:	f010 f899 	bl	8012aba <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002988:	e7f6      	b.n	8002978 <UART_RX_init+0x8>
 800298a:	bf00      	nop
 800298c:	24000c5c 	.word	0x24000c5c
 8002990:	24000638 	.word	0x24000638

08002994 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 800299c:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <GPIO_on_init+0x9c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f010 f863 	bl	8012a6c <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80029a6:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <GPIO_on_init+0xa0>)
 80029a8:	2104      	movs	r1, #4
 80029aa:	2201      	movs	r2, #1
 80029ac:	4618      	mov	r0, r3
 80029ae:	f006 f9cb 	bl	8008d48 <HAL_GPIO_WritePin>
		osDelay(100);
 80029b2:	2064      	movs	r0, #100	; 0x64
 80029b4:	f010 f881 	bl	8012aba <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 80029b8:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <GPIO_on_init+0xa0>)
 80029ba:	2120      	movs	r1, #32
 80029bc:	2201      	movs	r2, #1
 80029be:	4618      	mov	r0, r3
 80029c0:	f006 f9c2 	bl	8008d48 <HAL_GPIO_WritePin>
		osDelay(100);
 80029c4:	2064      	movs	r0, #100	; 0x64
 80029c6:	f010 f878 	bl	8012aba <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <GPIO_on_init+0xa4>)
 80029cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029d0:	2201      	movs	r2, #1
 80029d2:	4618      	mov	r0, r3
 80029d4:	f006 f9b8 	bl	8008d48 <HAL_GPIO_WritePin>
		osDelay(100);
 80029d8:	2064      	movs	r0, #100	; 0x64
 80029da:	f010 f86e 	bl	8012aba <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <GPIO_on_init+0xa4>)
 80029e0:	2180      	movs	r1, #128	; 0x80
 80029e2:	2201      	movs	r2, #1
 80029e4:	4618      	mov	r0, r3
 80029e6:	f006 f9af 	bl	8008d48 <HAL_GPIO_WritePin>
		osDelay(100);
 80029ea:	2064      	movs	r0, #100	; 0x64
 80029ec:	f010 f865 	bl	8012aba <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <GPIO_on_init+0xa4>)
 80029f2:	2140      	movs	r1, #64	; 0x40
 80029f4:	2201      	movs	r2, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f006 f9a6 	bl	8008d48 <HAL_GPIO_WritePin>
		osDelay(100);
 80029fc:	2064      	movs	r0, #100	; 0x64
 80029fe:	f010 f85c 	bl	8012aba <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <GPIO_on_init+0xa4>)
 8002a04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f006 f99c 	bl	8008d48 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a10:	2064      	movs	r0, #100	; 0x64
 8002a12:	f010 f852 	bl	8012aba <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <GPIO_on_init+0xa4>)
 8002a18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f006 f992 	bl	8008d48 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002a24:	4b02      	ldr	r3, [pc, #8]	; (8002a30 <GPIO_on_init+0x9c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f010 f81f 	bl	8012a6c <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002a2e:	e7ba      	b.n	80029a6 <GPIO_on_init+0x12>
 8002a30:	24000754 	.word	0x24000754
 8002a34:	58020400 	.word	0x58020400
 8002a38:	58020800 	.word	0x58020800

08002a3c <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <GPIO_off_init+0x9c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f010 f80f 	bl	8012a6c <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002a4e:	4b23      	ldr	r3, [pc, #140]	; (8002adc <GPIO_off_init+0xa0>)
 8002a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a54:	2200      	movs	r2, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f006 f976 	bl	8008d48 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a5c:	2064      	movs	r0, #100	; 0x64
 8002a5e:	f010 f82c 	bl	8012aba <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002a62:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <GPIO_off_init+0xa0>)
 8002a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f006 f96c 	bl	8008d48 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a70:	2064      	movs	r0, #100	; 0x64
 8002a72:	f010 f822 	bl	8012aba <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002a76:	4b19      	ldr	r3, [pc, #100]	; (8002adc <GPIO_off_init+0xa0>)
 8002a78:	2140      	movs	r1, #64	; 0x40
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f006 f963 	bl	8008d48 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a82:	2064      	movs	r0, #100	; 0x64
 8002a84:	f010 f819 	bl	8012aba <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <GPIO_off_init+0xa0>)
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f006 f95a 	bl	8008d48 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a94:	2064      	movs	r0, #100	; 0x64
 8002a96:	f010 f810 	bl	8012aba <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <GPIO_off_init+0xa0>)
 8002a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f006 f950 	bl	8008d48 <HAL_GPIO_WritePin>
		osDelay(100);
 8002aa8:	2064      	movs	r0, #100	; 0x64
 8002aaa:	f010 f806 	bl	8012aba <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <GPIO_off_init+0xa4>)
 8002ab0:	2120      	movs	r1, #32
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f006 f947 	bl	8008d48 <HAL_GPIO_WritePin>
		osDelay(100);
 8002aba:	2064      	movs	r0, #100	; 0x64
 8002abc:	f00f fffd 	bl	8012aba <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002ac0:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <GPIO_off_init+0xa4>)
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f006 f93e 	bl	8008d48 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002acc:	4b02      	ldr	r3, [pc, #8]	; (8002ad8 <GPIO_off_init+0x9c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f00f ffcb 	bl	8012a6c <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002ad6:	e7ba      	b.n	8002a4e <GPIO_off_init+0x12>
 8002ad8:	240009b4 	.word	0x240009b4
 8002adc:	58020800 	.word	0x58020800
 8002ae0:	58020400 	.word	0x58020400

08002ae4 <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002af4:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <UART_TX_init+0xa4>)
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002afc:	2200      	movs	r2, #0
 8002afe:	4923      	ldr	r1, [pc, #140]	; (8002b8c <UART_TX_init+0xa8>)
 8002b00:	f010 f9b4 	bl	8012e6c <osMessageQueueGet>
 8002b04:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d120      	bne.n	8002b4e <UART_TX_init+0x6a>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002b0c:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <UART_TX_init+0xa8>)
 8002b0e:	889b      	ldrh	r3, [r3, #4]
 8002b10:	461a      	mov	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b1a:	d218      	bcs.n	8002b4e <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <UART_TX_init+0xac>)
 8002b20:	4413      	add	r3, r2
 8002b22:	4a1a      	ldr	r2, [pc, #104]	; (8002b8c <UART_TX_init+0xa8>)
 8002b24:	6811      	ldr	r1, [r2, #0]
 8002b26:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <UART_TX_init+0xa8>)
 8002b28:	8892      	ldrh	r2, [r2, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f013 fba0 	bl	8016270 <memcpy>
					free(msg.array);
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <UART_TX_init+0xa8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f013 fb93 	bl	8016260 <free>
					total_size += msg.size;
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <UART_TX_init+0xa8>)
 8002b3c:	889b      	ldrh	r3, [r3, #4]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
					if(total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)){
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 8002b4c:	d203      	bcs.n	8002b56 <UART_TX_init+0x72>
						break;
					}
				}
			}
		} while (status == osOK);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0cf      	beq.n	8002af4 <UART_TX_init+0x10>
 8002b54:	e000      	b.n	8002b58 <UART_TX_init+0x74>
						break;
 8002b56:	bf00      	nop

		if (total_size > 0) {
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d010      	beq.n	8002b80 <UART_TX_init+0x9c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	490a      	ldr	r1, [pc, #40]	; (8002b90 <UART_TX_init+0xac>)
 8002b66:	480b      	ldr	r0, [pc, #44]	; (8002b94 <UART_TX_init+0xb0>)
 8002b68:	f00d f9e2 	bl	800ff30 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002b6c:	e001      	b.n	8002b72 <UART_TX_init+0x8e>
				osThreadYield();
 8002b6e:	f00f ff5d 	bl	8012a2c <osThreadYield>
			while (tx_flag == 0) {
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <UART_TX_init+0xb4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f9      	beq.n	8002b6e <UART_TX_init+0x8a>
			}

			// Reset the flag
			tx_flag = 0;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <UART_TX_init+0xb4>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002b80:	f00f ff54 	bl	8012a2c <osThreadYield>
		total_size = 0;
 8002b84:	e7b4      	b.n	8002af0 <UART_TX_init+0xc>
 8002b86:	bf00      	nop
 8002b88:	24000c3c 	.word	0x24000c3c
 8002b8c:	24000c40 	.word	0x24000c40
 8002b90:	24000cd0 	.word	0x24000cd0
 8002b94:	24000638 	.word	0x24000638
 8002b98:	24000000 	.word	0x24000000

08002b9c <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */
#ifdef DAMY
		osThreadExit();
#endif
	osThreadExit(); // REMOVE
 8002ba4:	f00f ff83 	bl	8012aae <osThreadExit>

08002ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bba:	f000 ff85 	bl	8003ac8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40001000 	.word	0x40001000

08002bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd0:	b672      	cpsid	i
}
 8002bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002bd4:	e7fe      	b.n	8002bd4 <Error_Handler+0x8>
	...

08002bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <HAL_MspInit+0x38>)
 8002be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002be4:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <HAL_MspInit+0x38>)
 8002be6:	f043 0302 	orr.w	r3, r3, #2
 8002bea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_MspInit+0x38>)
 8002bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	210f      	movs	r1, #15
 8002c00:	f06f 0001 	mvn.w	r0, #1
 8002c04:	f002 fc6e 	bl	80054e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	58024400 	.word	0x58024400

08002c14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08e      	sub	sp, #56	; 0x38
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a7b      	ldr	r2, [pc, #492]	; (8002e20 <HAL_ADC_MspInit+0x20c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	f040 8091 	bne.w	8002d5a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c38:	4b7a      	ldr	r3, [pc, #488]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002c3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c3e:	4a79      	ldr	r2, [pc, #484]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002c40:	f043 0320 	orr.w	r3, r3, #32
 8002c44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c48:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002c4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c56:	4b73      	ldr	r3, [pc, #460]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5c:	4a71      	ldr	r2, [pc, #452]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c66:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c74:	4b6b      	ldr	r3, [pc, #428]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c7a:	4a6a      	ldr	r2, [pc, #424]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c84:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	61bb      	str	r3, [r7, #24]
 8002c90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	4b64      	ldr	r3, [pc, #400]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c98:	4a62      	ldr	r2, [pc, #392]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca2:	4b60      	ldr	r3, [pc, #384]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002cb0:	2333      	movs	r3, #51	; 0x33
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4859      	ldr	r0, [pc, #356]	; (8002e28 <HAL_ADC_MspInit+0x214>)
 8002cc4:	f005 fe78 	bl	80089b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002cc8:	23ce      	movs	r3, #206	; 0xce
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4854      	ldr	r0, [pc, #336]	; (8002e2c <HAL_ADC_MspInit+0x218>)
 8002cdc:	f005 fe6c 	bl	80089b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	484f      	ldr	r0, [pc, #316]	; (8002e30 <HAL_ADC_MspInit+0x21c>)
 8002cf4:	f005 fe60 	bl	80089b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002cf8:	4b4e      	ldr	r3, [pc, #312]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002cfa:	4a4f      	ldr	r2, [pc, #316]	; (8002e38 <HAL_ADC_MspInit+0x224>)
 8002cfc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002cfe:	4b4d      	ldr	r3, [pc, #308]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002d00:	2209      	movs	r2, #9
 8002d02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d04:	4b4b      	ldr	r3, [pc, #300]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d0a:	4b4a      	ldr	r3, [pc, #296]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d10:	4b48      	ldr	r3, [pc, #288]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d18:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002d1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d20:	4b44      	ldr	r3, [pc, #272]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d28:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d30:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d36:	4b3f      	ldr	r3, [pc, #252]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d3c:	483d      	ldr	r0, [pc, #244]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002d3e:	f002 ffff 	bl	8005d40 <HAL_DMA_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002d48:	f7ff ff40 	bl	8002bcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a39      	ldr	r2, [pc, #228]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002d50:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d52:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <HAL_ADC_MspInit+0x220>)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d58:	e05e      	b.n	8002e18 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a37      	ldr	r2, [pc, #220]	; (8002e3c <HAL_ADC_MspInit+0x228>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d159      	bne.n	8002e18 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d64:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6a:	4a2e      	ldr	r2, [pc, #184]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002d6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d74:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d82:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d88:	4a26      	ldr	r2, [pc, #152]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002d8a:	f043 0304 	orr.w	r3, r3, #4
 8002d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_ADC_MspInit+0x210>)
 8002d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002da0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002da4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002da8:	f000 feba 	bl	8003b20 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002dac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002db0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002db4:	f000 feb4 	bl	8003b20 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_ADC_MspInit+0x230>)
 8002dbc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002dc0:	2273      	movs	r2, #115	; 0x73
 8002dc2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002dd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dde:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002de0:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002de6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dee:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002dfc:	4810      	ldr	r0, [pc, #64]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002dfe:	f002 ff9f 	bl	8005d40 <HAL_DMA_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002e08:	f7ff fee0 	bl	8002bcc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a0c      	ldr	r2, [pc, #48]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002e10:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e12:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <HAL_ADC_MspInit+0x22c>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e18:	bf00      	nop
 8002e1a:	3738      	adds	r7, #56	; 0x38
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40022000 	.word	0x40022000
 8002e24:	58024400 	.word	0x58024400
 8002e28:	58020800 	.word	0x58020800
 8002e2c:	58020000 	.word	0x58020000
 8002e30:	58020400 	.word	0x58020400
 8002e34:	24000204 	.word	0x24000204
 8002e38:	40020010 	.word	0x40020010
 8002e3c:	58026000 	.word	0x58026000
 8002e40:	2400027c 	.word	0x2400027c
 8002e44:	40020028 	.word	0x40020028

08002e48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a34      	ldr	r2, [pc, #208]	; (8002f38 <HAL_DAC_MspInit+0xf0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d161      	bne.n	8002f2e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002e6a:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <HAL_DAC_MspInit+0xf4>)
 8002e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e70:	4a32      	ldr	r2, [pc, #200]	; (8002f3c <HAL_DAC_MspInit+0xf4>)
 8002e72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e7a:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <HAL_DAC_MspInit+0xf4>)
 8002e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e88:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <HAL_DAC_MspInit+0xf4>)
 8002e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8e:	4a2b      	ldr	r2, [pc, #172]	; (8002f3c <HAL_DAC_MspInit+0xf4>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e98:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <HAL_DAC_MspInit+0xf4>)
 8002e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ea6:	2310      	movs	r3, #16
 8002ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4821      	ldr	r0, [pc, #132]	; (8002f40 <HAL_DAC_MspInit+0xf8>)
 8002eba:	f005 fd7d 	bl	80089b8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002ec0:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <HAL_DAC_MspInit+0x100>)
 8002ec2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002ec6:	2243      	movs	r2, #67	; 0x43
 8002ec8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eca:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002ecc:	2240      	movs	r2, #64	; 0x40
 8002ece:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed0:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002edc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002ee0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ee4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002ee8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eec:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ef4:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002f02:	4810      	ldr	r0, [pc, #64]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002f04:	f002 ff1c 	bl	8005d40 <HAL_DMA_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002f0e:	f7ff fe5d 	bl	8002bcc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a0b      	ldr	r2, [pc, #44]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <HAL_DAC_MspInit+0xfc>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2105      	movs	r1, #5
 8002f22:	2036      	movs	r0, #54	; 0x36
 8002f24:	f002 fade 	bl	80054e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f28:	2036      	movs	r0, #54	; 0x36
 8002f2a:	f002 faf5 	bl	8005518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002f2e:	bf00      	nop
 8002f30:	3728      	adds	r7, #40	; 0x28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40007400 	.word	0x40007400
 8002f3c:	58024400 	.word	0x58024400
 8002f40:	58020000 	.word	0x58020000
 8002f44:	24000308 	.word	0x24000308
 8002f48:	40020088 	.word	0x40020088

08002f4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b0ba      	sub	sp, #232	; 0xe8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f64:	f107 0310 	add.w	r3, r7, #16
 8002f68:	22c0      	movs	r2, #192	; 0xc0
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f013 f98d 	bl	801628c <memset>
  if(hi2c->Instance==I2C1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a27      	ldr	r2, [pc, #156]	; (8003014 <HAL_I2C_MspInit+0xc8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d146      	bne.n	800300a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f7c:	f04f 0208 	mov.w	r2, #8
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f8e:	f107 0310 	add.w	r3, r7, #16
 8002f92:	4618      	mov	r0, r3
 8002f94:	f007 fd60 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002f9e:	f7ff fe15 	bl	8002bcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_I2C_MspInit+0xcc>)
 8002fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa8:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <HAL_I2C_MspInit+0xcc>)
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fb2:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_I2C_MspInit+0xcc>)
 8002fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc8:	2312      	movs	r3, #18
 8002fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fda:	2304      	movs	r3, #4
 8002fdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	480d      	ldr	r0, [pc, #52]	; (800301c <HAL_I2C_MspInit+0xd0>)
 8002fe8:	f005 fce6 	bl	80089b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_I2C_MspInit+0xcc>)
 8002fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ff2:	4a09      	ldr	r2, [pc, #36]	; (8003018 <HAL_I2C_MspInit+0xcc>)
 8002ff4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ff8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_I2C_MspInit+0xcc>)
 8002ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800300a:	bf00      	nop
 800300c:	37e8      	adds	r7, #232	; 0xe8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40005400 	.word	0x40005400
 8003018:	58024400 	.word	0x58024400
 800301c:	58020400 	.word	0x58020400

08003020 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b0b2      	sub	sp, #200	; 0xc8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003028:	f107 0308 	add.w	r3, r7, #8
 800302c:	22c0      	movs	r2, #192	; 0xc0
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f013 f92b 	bl	801628c <memset>
  if(hrtc->Instance==RTC)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a10      	ldr	r2, [pc, #64]	; (800307c <HAL_RTC_MspInit+0x5c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d118      	bne.n	8003072 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003040:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <HAL_RTC_MspInit+0x60>)
 800304e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003052:	f107 0308 	add.w	r3, r7, #8
 8003056:	4618      	mov	r0, r3
 8003058:	f007 fcfe 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003062:	f7ff fdb3 	bl	8002bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_RTC_MspInit+0x64>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	4a06      	ldr	r2, [pc, #24]	; (8003084 <HAL_RTC_MspInit+0x64>)
 800306c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003070:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003072:	bf00      	nop
 8003074:	37c8      	adds	r7, #200	; 0xc8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	58004000 	.word	0x58004000
 8003080:	00019300 	.word	0x00019300
 8003084:	58024400 	.word	0x58024400

08003088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b0bc      	sub	sp, #240	; 0xf0
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003090:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030a0:	f107 0318 	add.w	r3, r7, #24
 80030a4:	22c0      	movs	r2, #192	; 0xc0
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f013 f8ef 	bl	801628c <memset>
  if(hspi->Instance==SPI1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a4c      	ldr	r2, [pc, #304]	; (80031e4 <HAL_SPI_MspInit+0x15c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d145      	bne.n	8003144 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80030b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030c8:	f107 0318 	add.w	r3, r7, #24
 80030cc:	4618      	mov	r0, r3
 80030ce:	f007 fcc3 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80030d8:	f7ff fd78 	bl	8002bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030dc:	4b42      	ldr	r3, [pc, #264]	; (80031e8 <HAL_SPI_MspInit+0x160>)
 80030de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030e2:	4a41      	ldr	r2, [pc, #260]	; (80031e8 <HAL_SPI_MspInit+0x160>)
 80030e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030ec:	4b3e      	ldr	r3, [pc, #248]	; (80031e8 <HAL_SPI_MspInit+0x160>)
 80030ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	4b3b      	ldr	r3, [pc, #236]	; (80031e8 <HAL_SPI_MspInit+0x160>)
 80030fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003100:	4a39      	ldr	r2, [pc, #228]	; (80031e8 <HAL_SPI_MspInit+0x160>)
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <HAL_SPI_MspInit+0x160>)
 800310c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003118:	2318      	movs	r3, #24
 800311a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311e:	2302      	movs	r3, #2
 8003120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003130:	2305      	movs	r3, #5
 8003132:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003136:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800313a:	4619      	mov	r1, r3
 800313c:	482b      	ldr	r0, [pc, #172]	; (80031ec <HAL_SPI_MspInit+0x164>)
 800313e:	f005 fc3b 	bl	80089b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003142:	e04a      	b.n	80031da <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a29      	ldr	r2, [pc, #164]	; (80031f0 <HAL_SPI_MspInit+0x168>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d145      	bne.n	80031da <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800314e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800315a:	2300      	movs	r3, #0
 800315c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800315e:	f107 0318 	add.w	r3, r7, #24
 8003162:	4618      	mov	r0, r3
 8003164:	f007 fc78 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800316e:	f7ff fd2d 	bl	8002bcc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_SPI_MspInit+0x160>)
 8003174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003178:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <HAL_SPI_MspInit+0x160>)
 800317a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_SPI_MspInit+0x160>)
 8003184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003190:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_SPI_MspInit+0x160>)
 8003192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003196:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <HAL_SPI_MspInit+0x160>)
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a0:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <HAL_SPI_MspInit+0x160>)
 80031a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80031ae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80031b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031c8:	2305      	movs	r3, #5
 80031ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80031d2:	4619      	mov	r1, r3
 80031d4:	4805      	ldr	r0, [pc, #20]	; (80031ec <HAL_SPI_MspInit+0x164>)
 80031d6:	f005 fbef 	bl	80089b8 <HAL_GPIO_Init>
}
 80031da:	bf00      	nop
 80031dc:	37f0      	adds	r7, #240	; 0xf0
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40013000 	.word	0x40013000
 80031e8:	58024400 	.word	0x58024400
 80031ec:	58020400 	.word	0x58020400
 80031f0:	40003800 	.word	0x40003800

080031f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a46      	ldr	r2, [pc, #280]	; (800331c <HAL_TIM_Base_MspInit+0x128>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d12f      	bne.n	8003266 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003206:	4b46      	ldr	r3, [pc, #280]	; (8003320 <HAL_TIM_Base_MspInit+0x12c>)
 8003208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800320c:	4a44      	ldr	r2, [pc, #272]	; (8003320 <HAL_TIM_Base_MspInit+0x12c>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003216:	4b42      	ldr	r3, [pc, #264]	; (8003320 <HAL_TIM_Base_MspInit+0x12c>)
 8003218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003224:	2200      	movs	r2, #0
 8003226:	2105      	movs	r1, #5
 8003228:	2018      	movs	r0, #24
 800322a:	f002 f95b 	bl	80054e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800322e:	2018      	movs	r0, #24
 8003230:	f002 f972 	bl	8005518 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003234:	2200      	movs	r2, #0
 8003236:	2105      	movs	r1, #5
 8003238:	2019      	movs	r0, #25
 800323a:	f002 f953 	bl	80054e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800323e:	2019      	movs	r0, #25
 8003240:	f002 f96a 	bl	8005518 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003244:	2200      	movs	r2, #0
 8003246:	2105      	movs	r1, #5
 8003248:	201a      	movs	r0, #26
 800324a:	f002 f94b 	bl	80054e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800324e:	201a      	movs	r0, #26
 8003250:	f002 f962 	bl	8005518 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	2105      	movs	r1, #5
 8003258:	201b      	movs	r0, #27
 800325a:	f002 f943 	bl	80054e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800325e:	201b      	movs	r0, #27
 8003260:	f002 f95a 	bl	8005518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003264:	e055      	b.n	8003312 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d117      	bne.n	80032a0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_TIM_Base_MspInit+0x12c>)
 8003272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003276:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <HAL_TIM_Base_MspInit+0x12c>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003280:	4b27      	ldr	r3, [pc, #156]	; (8003320 <HAL_TIM_Base_MspInit+0x12c>)
 8003282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	2105      	movs	r1, #5
 8003292:	201c      	movs	r0, #28
 8003294:	f002 f926 	bl	80054e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003298:	201c      	movs	r0, #28
 800329a:	f002 f93d 	bl	8005518 <HAL_NVIC_EnableIRQ>
}
 800329e:	e038      	b.n	8003312 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <HAL_TIM_Base_MspInit+0x130>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d117      	bne.n	80032da <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_TIM_Base_MspInit+0x12c>)
 80032ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_TIM_Base_MspInit+0x12c>)
 80032b2:	f043 0302 	orr.w	r3, r3, #2
 80032b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032ba:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_TIM_Base_MspInit+0x12c>)
 80032bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80032c8:	2200      	movs	r2, #0
 80032ca:	2105      	movs	r1, #5
 80032cc:	201d      	movs	r0, #29
 80032ce:	f002 f909 	bl	80054e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032d2:	201d      	movs	r0, #29
 80032d4:	f002 f920 	bl	8005518 <HAL_NVIC_EnableIRQ>
}
 80032d8:	e01b      	b.n	8003312 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a12      	ldr	r2, [pc, #72]	; (8003328 <HAL_TIM_Base_MspInit+0x134>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d116      	bne.n	8003312 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <HAL_TIM_Base_MspInit+0x12c>)
 80032e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032ea:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <HAL_TIM_Base_MspInit+0x12c>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032f4:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_TIM_Base_MspInit+0x12c>)
 80032f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2105      	movs	r1, #5
 8003306:	201e      	movs	r0, #30
 8003308:	f002 f8ec 	bl	80054e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800330c:	201e      	movs	r0, #30
 800330e:	f002 f903 	bl	8005518 <HAL_NVIC_EnableIRQ>
}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000
 8003320:	58024400 	.word	0x58024400
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800

0800332c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	; 0x28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a26      	ldr	r2, [pc, #152]	; (80033e4 <HAL_TIM_MspPostInit+0xb8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d120      	bne.n	8003390 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334e:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_TIM_MspPostInit+0xbc>)
 8003350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003354:	4a24      	ldr	r2, [pc, #144]	; (80033e8 <HAL_TIM_MspPostInit+0xbc>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_TIM_MspPostInit+0xbc>)
 8003360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800336c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800337e:	2301      	movs	r3, #1
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	4619      	mov	r1, r3
 8003388:	4818      	ldr	r0, [pc, #96]	; (80033ec <HAL_TIM_MspPostInit+0xc0>)
 800338a:	f005 fb15 	bl	80089b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800338e:	e024      	b.n	80033da <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d11f      	bne.n	80033da <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <HAL_TIM_MspPostInit+0xbc>)
 800339c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a0:	4a11      	ldr	r2, [pc, #68]	; (80033e8 <HAL_TIM_MspPostInit+0xbc>)
 80033a2:	f043 0302 	orr.w	r3, r3, #2
 80033a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033aa:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <HAL_TIM_MspPostInit+0xbc>)
 80033ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80033b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	2302      	movs	r3, #2
 80033c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c6:	2300      	movs	r3, #0
 80033c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033ca:	2301      	movs	r3, #1
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	4619      	mov	r1, r3
 80033d4:	4806      	ldr	r0, [pc, #24]	; (80033f0 <HAL_TIM_MspPostInit+0xc4>)
 80033d6:	f005 faef 	bl	80089b8 <HAL_GPIO_Init>
}
 80033da:	bf00      	nop
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40010000 	.word	0x40010000
 80033e8:	58024400 	.word	0x58024400
 80033ec:	58020000 	.word	0x58020000
 80033f0:	58020400 	.word	0x58020400

080033f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b0ba      	sub	sp, #232	; 0xe8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800340c:	f107 0310 	add.w	r3, r7, #16
 8003410:	22c0      	movs	r2, #192	; 0xc0
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f012 ff39 	bl	801628c <memset>
  if(huart->Instance==USART1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a41      	ldr	r2, [pc, #260]	; (8003524 <HAL_UART_MspInit+0x130>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d17b      	bne.n	800351c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003424:	f04f 0201 	mov.w	r2, #1
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003430:	2300      	movs	r3, #0
 8003432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003436:	f107 0310 	add.w	r3, r7, #16
 800343a:	4618      	mov	r0, r3
 800343c:	f007 fb0c 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003446:	f7ff fbc1 	bl	8002bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800344a:	4b37      	ldr	r3, [pc, #220]	; (8003528 <HAL_UART_MspInit+0x134>)
 800344c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003450:	4a35      	ldr	r2, [pc, #212]	; (8003528 <HAL_UART_MspInit+0x134>)
 8003452:	f043 0310 	orr.w	r3, r3, #16
 8003456:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800345a:	4b33      	ldr	r3, [pc, #204]	; (8003528 <HAL_UART_MspInit+0x134>)
 800345c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003468:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <HAL_UART_MspInit+0x134>)
 800346a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800346e:	4a2e      	ldr	r2, [pc, #184]	; (8003528 <HAL_UART_MspInit+0x134>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003478:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <HAL_UART_MspInit+0x134>)
 800347a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003486:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800348a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348e:	2302      	movs	r3, #2
 8003490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034a0:	2307      	movs	r3, #7
 80034a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034aa:	4619      	mov	r1, r3
 80034ac:	481f      	ldr	r0, [pc, #124]	; (800352c <HAL_UART_MspInit+0x138>)
 80034ae:	f005 fa83 	bl	80089b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80034b2:	4b1f      	ldr	r3, [pc, #124]	; (8003530 <HAL_UART_MspInit+0x13c>)
 80034b4:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_UART_MspInit+0x140>)
 80034b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_UART_MspInit+0x13c>)
 80034ba:	222a      	movs	r2, #42	; 0x2a
 80034bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034be:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <HAL_UART_MspInit+0x13c>)
 80034c0:	2240      	movs	r2, #64	; 0x40
 80034c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <HAL_UART_MspInit+0x13c>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034ca:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_UART_MspInit+0x13c>)
 80034cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <HAL_UART_MspInit+0x13c>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d8:	4b15      	ldr	r3, [pc, #84]	; (8003530 <HAL_UART_MspInit+0x13c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80034de:	4b14      	ldr	r3, [pc, #80]	; (8003530 <HAL_UART_MspInit+0x13c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_UART_MspInit+0x13c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <HAL_UART_MspInit+0x13c>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80034f0:	480f      	ldr	r0, [pc, #60]	; (8003530 <HAL_UART_MspInit+0x13c>)
 80034f2:	f002 fc25 	bl	8005d40 <HAL_DMA_Init>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80034fc:	f7ff fb66 	bl	8002bcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a0b      	ldr	r2, [pc, #44]	; (8003530 <HAL_UART_MspInit+0x13c>)
 8003504:	67da      	str	r2, [r3, #124]	; 0x7c
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <HAL_UART_MspInit+0x13c>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800350c:	2200      	movs	r2, #0
 800350e:	2105      	movs	r1, #5
 8003510:	2025      	movs	r0, #37	; 0x25
 8003512:	f001 ffe7 	bl	80054e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003516:	2025      	movs	r0, #37	; 0x25
 8003518:	f001 fffe 	bl	8005518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800351c:	bf00      	nop
 800351e:	37e8      	adds	r7, #232	; 0xe8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40011000 	.word	0x40011000
 8003528:	58024400 	.word	0x58024400
 800352c:	58020000 	.word	0x58020000
 8003530:	240006cc 	.word	0x240006cc
 8003534:	40020040 	.word	0x40020040

08003538 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b090      	sub	sp, #64	; 0x40
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	d827      	bhi.n	8003596 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003546:	2200      	movs	r2, #0
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	2036      	movs	r0, #54	; 0x36
 800354c:	f001 ffca 	bl	80054e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003550:	2036      	movs	r0, #54	; 0x36
 8003552:	f001 ffe1 	bl	8005518 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003556:	4a29      	ldr	r2, [pc, #164]	; (80035fc <HAL_InitTick+0xc4>)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800355c:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_InitTick+0xc8>)
 800355e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003562:	4a27      	ldr	r2, [pc, #156]	; (8003600 <HAL_InitTick+0xc8>)
 8003564:	f043 0310 	orr.w	r3, r3, #16
 8003568:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800356c:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_InitTick+0xc8>)
 800356e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800357a:	f107 0210 	add.w	r2, r7, #16
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f007 fa25 	bl	800a9d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800358a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <HAL_InitTick+0x6a>
 8003594:	e001      	b.n	800359a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e02b      	b.n	80035f2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800359a:	f007 f9ef 	bl	800a97c <HAL_RCC_GetPCLK1Freq>
 800359e:	63f8      	str	r0, [r7, #60]	; 0x3c
 80035a0:	e004      	b.n	80035ac <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80035a2:	f007 f9eb 	bl	800a97c <HAL_RCC_GetPCLK1Freq>
 80035a6:	4603      	mov	r3, r0
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ae:	4a15      	ldr	r2, [pc, #84]	; (8003604 <HAL_InitTick+0xcc>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	0c9b      	lsrs	r3, r3, #18
 80035b6:	3b01      	subs	r3, #1
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HAL_InitTick+0xd0>)
 80035bc:	4a13      	ldr	r2, [pc, #76]	; (800360c <HAL_InitTick+0xd4>)
 80035be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <HAL_InitTick+0xd0>)
 80035c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035c8:	4a0f      	ldr	r2, [pc, #60]	; (8003608 <HAL_InitTick+0xd0>)
 80035ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <HAL_InitTick+0xd0>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <HAL_InitTick+0xd0>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80035da:	480b      	ldr	r0, [pc, #44]	; (8003608 <HAL_InitTick+0xd0>)
 80035dc:	f00a fead 	bl	800e33a <HAL_TIM_Base_Init>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d104      	bne.n	80035f0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80035e6:	4808      	ldr	r0, [pc, #32]	; (8003608 <HAL_InitTick+0xd0>)
 80035e8:	f00a fefe 	bl	800e3e8 <HAL_TIM_Base_Start_IT>
 80035ec:	4603      	mov	r3, r0
 80035ee:	e000      	b.n	80035f2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3740      	adds	r7, #64	; 0x40
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	24000098 	.word	0x24000098
 8003600:	58024400 	.word	0x58024400
 8003604:	431bde83 	.word	0x431bde83
 8003608:	240010b8 	.word	0x240010b8
 800360c:	40001000 	.word	0x40001000

08003610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003614:	e7fe      	b.n	8003614 <NMI_Handler+0x4>

08003616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800361a:	e7fe      	b.n	800361a <HardFault_Handler+0x4>

0800361c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003620:	e7fe      	b.n	8003620 <MemManage_Handler+0x4>

08003622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003626:	e7fe      	b.n	8003626 <BusFault_Handler+0x4>

08003628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800362c:	e7fe      	b.n	800362c <UsageFault_Handler+0x4>

0800362e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800362e:	b480      	push	{r7}
 8003630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <DMA1_Stream0_IRQHandler+0x10>)
 8003642:	f003 fea7 	bl	8007394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	24000204 	.word	0x24000204

08003650 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <DMA1_Stream1_IRQHandler+0x10>)
 8003656:	f003 fe9d 	bl	8007394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	2400027c 	.word	0x2400027c

08003664 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <DMA1_Stream2_IRQHandler+0x10>)
 800366a:	f003 fe93 	bl	8007394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	240006cc 	.word	0x240006cc

08003678 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800367c:	4802      	ldr	r0, [pc, #8]	; (8003688 <DMA1_Stream5_IRQHandler+0x10>)
 800367e:	f003 fe89 	bl	8007394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	24000308 	.word	0x24000308

0800368c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003690:	4802      	ldr	r0, [pc, #8]	; (800369c <TIM1_BRK_IRQHandler+0x10>)
 8003692:	f00b f9c0 	bl	800ea16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	24000508 	.word	0x24000508

080036a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <TIM1_UP_IRQHandler+0x10>)
 80036a6:	f00b f9b6 	bl	800ea16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	24000508 	.word	0x24000508

080036b4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036b8:	4802      	ldr	r0, [pc, #8]	; (80036c4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80036ba:	f00b f9ac 	bl	800ea16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	24000508 	.word	0x24000508

080036c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036cc:	4802      	ldr	r0, [pc, #8]	; (80036d8 <TIM1_CC_IRQHandler+0x10>)
 80036ce:	f00b f9a2 	bl	800ea16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	24000508 	.word	0x24000508

080036dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036e0:	4802      	ldr	r0, [pc, #8]	; (80036ec <TIM2_IRQHandler+0x10>)
 80036e2:	f00b f998 	bl	800ea16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	24000554 	.word	0x24000554

080036f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036f4:	4802      	ldr	r0, [pc, #8]	; (8003700 <TIM3_IRQHandler+0x10>)
 80036f6:	f00b f98e 	bl	800ea16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	240005a0 	.word	0x240005a0

08003704 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003708:	4802      	ldr	r0, [pc, #8]	; (8003714 <TIM4_IRQHandler+0x10>)
 800370a:	f00b f984 	bl	800ea16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	240005ec 	.word	0x240005ec

08003718 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800371c:	4802      	ldr	r0, [pc, #8]	; (8003728 <USART1_IRQHandler+0x10>)
 800371e:	f00c fc87 	bl	8010030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	24000638 	.word	0x24000638

0800372c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <TIM6_DAC_IRQHandler+0x20>)
 8003732:	791b      	ldrb	r3, [r3, #4]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800373a:	4804      	ldr	r0, [pc, #16]	; (800374c <TIM6_DAC_IRQHandler+0x20>)
 800373c:	f002 f881 	bl	8005842 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003740:	4803      	ldr	r0, [pc, #12]	; (8003750 <TIM6_DAC_IRQHandler+0x24>)
 8003742:	f00b f968 	bl	800ea16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	240002f4 	.word	0x240002f4
 8003750:	240010b8 	.word	0x240010b8

08003754 <ITM_SendChar>:
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
 800375e:	4b0f      	ldr	r3, [pc, #60]	; (800379c <ITM_SendChar+0x48>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a0e      	ldr	r2, [pc, #56]	; (800379c <ITM_SendChar+0x48>)
 8003764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <ITM_SendChar+0x4c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <ITM_SendChar+0x4c>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	bf00      	nop
 8003778:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f8      	beq.n	8003778 <ITM_SendChar+0x24>
 8003786:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	e000edfc 	.word	0xe000edfc
 80037a0:	e0000e00 	.word	0xe0000e00

080037a4 <_read>:
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	e00a      	b.n	80037cc <_read+0x28>
 80037b6:	f3af 8000 	nop.w
 80037ba:	4601      	mov	r1, r0
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	60ba      	str	r2, [r7, #8]
 80037c2:	b2ca      	uxtb	r2, r1
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	3301      	adds	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	dbf0      	blt.n	80037b6 <_read+0x12>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <_write>:
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	e009      	b.n	8003804 <_write+0x26>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	60ba      	str	r2, [r7, #8]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ffab 	bl	8003754 <ITM_SendChar>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3301      	adds	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	429a      	cmp	r2, r3
 800380a:	dbf1      	blt.n	80037f0 <_write+0x12>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <_close>:
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <_fstat>:
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	2300      	movs	r3, #0
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <_isatty>:
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	2301      	movs	r3, #1
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <_lseek>:
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	2300      	movs	r3, #0
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <_sbrk>:
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	4a14      	ldr	r2, [pc, #80]	; (80038dc <_sbrk+0x5c>)
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <_sbrk+0x60>)
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <_sbrk+0x64>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <_sbrk+0x22>
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <_sbrk+0x64>)
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <_sbrk+0x68>)
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <_sbrk+0x64>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4413      	add	r3, r2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d207      	bcs.n	80038c0 <_sbrk+0x40>
 80038b0:	f012 fca4 	bl	80161fc <__errno>
 80038b4:	4603      	mov	r3, r0
 80038b6:	220c      	movs	r2, #12
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038be:	e009      	b.n	80038d4 <_sbrk+0x54>
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <_sbrk+0x64>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <_sbrk+0x64>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	4a05      	ldr	r2, [pc, #20]	; (80038e4 <_sbrk+0x64>)
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	24080000 	.word	0x24080000
 80038e0:	00000400 	.word	0x00000400
 80038e4:	24001104 	.word	0x24001104
 80038e8:	24005a70 	.word	0x24005a70

080038ec <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80038f0:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <SystemInit+0xe4>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	4a36      	ldr	r2, [pc, #216]	; (80039d0 <SystemInit+0xe4>)
 80038f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003900:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <SystemInit+0xe8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	2b06      	cmp	r3, #6
 800390a:	d807      	bhi.n	800391c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800390c:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <SystemInit+0xe8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f023 030f 	bic.w	r3, r3, #15
 8003914:	4a2f      	ldr	r2, [pc, #188]	; (80039d4 <SystemInit+0xe8>)
 8003916:	f043 0307 	orr.w	r3, r3, #7
 800391a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 800391c:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <SystemInit+0xec>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2d      	ldr	r2, [pc, #180]	; (80039d8 <SystemInit+0xec>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003928:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <SystemInit+0xec>)
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800392e:	4b2a      	ldr	r3, [pc, #168]	; (80039d8 <SystemInit+0xec>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4929      	ldr	r1, [pc, #164]	; (80039d8 <SystemInit+0xec>)
 8003934:	4b29      	ldr	r3, [pc, #164]	; (80039dc <SystemInit+0xf0>)
 8003936:	4013      	ands	r3, r2
 8003938:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <SystemInit+0xe8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <SystemInit+0xe8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 030f 	bic.w	r3, r3, #15
 800394e:	4a21      	ldr	r2, [pc, #132]	; (80039d4 <SystemInit+0xe8>)
 8003950:	f043 0307 	orr.w	r3, r3, #7
 8003954:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003956:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <SystemInit+0xec>)
 8003958:	2200      	movs	r2, #0
 800395a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 800395c:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <SystemInit+0xec>)
 800395e:	2200      	movs	r2, #0
 8003960:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003962:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <SystemInit+0xec>)
 8003964:	2200      	movs	r2, #0
 8003966:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <SystemInit+0xec>)
 800396a:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <SystemInit+0xf4>)
 800396c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800396e:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <SystemInit+0xec>)
 8003970:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <SystemInit+0xf8>)
 8003972:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003974:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <SystemInit+0xec>)
 8003976:	4a1c      	ldr	r2, [pc, #112]	; (80039e8 <SystemInit+0xfc>)
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800397a:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <SystemInit+0xec>)
 800397c:	2200      	movs	r2, #0
 800397e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003980:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <SystemInit+0xec>)
 8003982:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <SystemInit+0xfc>)
 8003984:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <SystemInit+0xec>)
 8003988:	2200      	movs	r2, #0
 800398a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800398c:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <SystemInit+0xec>)
 800398e:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <SystemInit+0xfc>)
 8003990:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <SystemInit+0xec>)
 8003994:	2200      	movs	r2, #0
 8003996:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <SystemInit+0xec>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <SystemInit+0xec>)
 800399e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <SystemInit+0xec>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <SystemInit+0x100>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <SystemInit+0x104>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b6:	d202      	bcs.n	80039be <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <SystemInit+0x108>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039be:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <SystemInit+0x10c>)
 80039c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80039c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80039c6:	bf00      	nop
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000ed00 	.word	0xe000ed00
 80039d4:	52002000 	.word	0x52002000
 80039d8:	58024400 	.word	0x58024400
 80039dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80039e0:	02020200 	.word	0x02020200
 80039e4:	01ff0000 	.word	0x01ff0000
 80039e8:	01010280 	.word	0x01010280
 80039ec:	5c001000 	.word	0x5c001000
 80039f0:	ffff0000 	.word	0xffff0000
 80039f4:	51008108 	.word	0x51008108
 80039f8:	52004000 	.word	0x52004000

080039fc <Reset_Handler>:
 80039fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a34 <LoopFillZerobss+0xe>
 8003a00:	f7ff ff74 	bl	80038ec <SystemInit>
 8003a04:	480c      	ldr	r0, [pc, #48]	; (8003a38 <LoopFillZerobss+0x12>)
 8003a06:	490d      	ldr	r1, [pc, #52]	; (8003a3c <LoopFillZerobss+0x16>)
 8003a08:	4a0d      	ldr	r2, [pc, #52]	; (8003a40 <LoopFillZerobss+0x1a>)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e002      	b.n	8003a14 <LoopCopyDataInit>

08003a0e <CopyDataInit>:
 8003a0e:	58d4      	ldr	r4, [r2, r3]
 8003a10:	50c4      	str	r4, [r0, r3]
 8003a12:	3304      	adds	r3, #4

08003a14 <LoopCopyDataInit>:
 8003a14:	18c4      	adds	r4, r0, r3
 8003a16:	428c      	cmp	r4, r1
 8003a18:	d3f9      	bcc.n	8003a0e <CopyDataInit>
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <LoopFillZerobss+0x1e>)
 8003a1c:	4c0a      	ldr	r4, [pc, #40]	; (8003a48 <LoopFillZerobss+0x22>)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e001      	b.n	8003a26 <LoopFillZerobss>

08003a22 <FillZerobss>:
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	3204      	adds	r2, #4

08003a26 <LoopFillZerobss>:
 8003a26:	42a2      	cmp	r2, r4
 8003a28:	d3fb      	bcc.n	8003a22 <FillZerobss>
 8003a2a:	f012 fbed 	bl	8016208 <__libc_init_array>
 8003a2e:	f7fd fa47 	bl	8000ec0 <main>
 8003a32:	4770      	bx	lr
 8003a34:	24080000 	.word	0x24080000
 8003a38:	24000000 	.word	0x24000000
 8003a3c:	24000108 	.word	0x24000108
 8003a40:	08017108 	.word	0x08017108
 8003a44:	24000120 	.word	0x24000120
 8003a48:	24005a6c 	.word	0x24005a6c

08003a4c <ADC3_IRQHandler>:
 8003a4c:	e7fe      	b.n	8003a4c <ADC3_IRQHandler>
	...

08003a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a56:	2003      	movs	r0, #3
 8003a58:	f001 fd39 	bl	80054ce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a5c:	f006 fde4 	bl	800a628 <HAL_RCC_GetSysClockFreq>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <HAL_Init+0x68>)
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	4913      	ldr	r1, [pc, #76]	; (8003abc <HAL_Init+0x6c>)
 8003a6e:	5ccb      	ldrb	r3, [r1, r3]
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
 8003a78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <HAL_Init+0x68>)
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_Init+0x6c>)
 8003a84:	5cd3      	ldrb	r3, [r2, r3]
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a90:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <HAL_Init+0x70>)
 8003a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a94:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <HAL_Init+0x74>)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a9a:	2005      	movs	r0, #5
 8003a9c:	f7ff fd4c 	bl	8003538 <HAL_InitTick>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e002      	b.n	8003ab0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003aaa:	f7ff f895 	bl	8002bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	58024400 	.word	0x58024400
 8003abc:	08017054 	.word	0x08017054
 8003ac0:	24000094 	.word	0x24000094
 8003ac4:	24000090 	.word	0x24000090

08003ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_IncTick+0x20>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_IncTick+0x24>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	4a04      	ldr	r2, [pc, #16]	; (8003aec <HAL_IncTick+0x24>)
 8003ada:	6013      	str	r3, [r2, #0]
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	2400009c 	.word	0x2400009c
 8003aec:	24001108 	.word	0x24001108

08003af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return uwTick;
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <HAL_GetTick+0x14>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	24001108 	.word	0x24001108

08003b08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_GetREVID+0x14>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	0c1b      	lsrs	r3, r3, #16
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	5c001000 	.word	0x5c001000

08003b20 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	401a      	ands	r2, r3
 8003b34:	4904      	ldr	r1, [pc, #16]	; (8003b48 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	58000400 	.word	0x58000400

08003b4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	609a      	str	r2, [r3, #8]
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3360      	adds	r3, #96	; 0x60
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	431a      	orrs	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003be8:	bf00      	nop
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	431a      	orrs	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	611a      	str	r2, [r3, #16]
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b087      	sub	sp, #28
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3360      	adds	r3, #96	; 0x60
 8003c36:	461a      	mov	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	601a      	str	r2, [r3, #0]
  }
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b087      	sub	sp, #28
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3330      	adds	r3, #48	; 0x30
 8003c92:	461a      	mov	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	4413      	add	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	211f      	movs	r1, #31
 8003cae:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	0e9b      	lsrs	r3, r3, #26
 8003cba:	f003 011f 	and.w	r1, r3, #31
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f023 0203 	bic.w	r2, r3, #3
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	60da      	str	r2, [r3, #12]
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	0e5b      	lsrs	r3, r3, #25
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	4413      	add	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	0d1b      	lsrs	r3, r3, #20
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2107      	movs	r1, #7
 8003d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	401a      	ands	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	0d1b      	lsrs	r3, r3, #20
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	431a      	orrs	r2, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d70:	43db      	mvns	r3, r3
 8003d72:	401a      	ands	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f003 0318 	and.w	r3, r3, #24
 8003d7a:	4908      	ldr	r1, [pc, #32]	; (8003d9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d7c:	40d9      	lsrs	r1, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	400b      	ands	r3, r1
 8003d82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d86:	431a      	orrs	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	000fffff 	.word	0x000fffff

08003da0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 031f 	and.w	r3, r3, #31
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <LL_ADC_DisableDeepPowerDown+0x20>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6093      	str	r3, [r2, #8]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	5fffffc0 	.word	0x5fffffc0

08003de0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df4:	d101      	bne.n	8003dfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <LL_ADC_EnableInternalRegulator+0x24>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	6fffffc0 	.word	0x6fffffc0

08003e30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e44:	d101      	bne.n	8003e4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <LL_ADC_Enable+0x24>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	f043 0201 	orr.w	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	7fffffc0 	.word	0x7fffffc0

08003e80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <LL_ADC_Disable+0x24>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	f043 0202 	orr.w	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	7fffffc0 	.word	0x7fffffc0

08003ea8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <LL_ADC_IsEnabled+0x18>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <LL_ADC_IsEnabled+0x1a>
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d101      	bne.n	8003ee6 <LL_ADC_IsDisableOngoing+0x18>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <LL_ADC_IsDisableOngoing+0x1a>
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <LL_ADC_REG_StartConversion+0x24>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	f043 0204 	orr.w	r2, r3, #4
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	7fffffc0 	.word	0x7fffffc0

08003f1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d101      	bne.n	8003f34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d101      	bne.n	8003f5a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e18f      	b.n	80042a2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7fe fe3f 	bl	8002c14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff19 	bl	8003de0 <LL_ADC_IsDeepPowerDownEnabled>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff feff 	bl	8003dbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff ff34 	bl	8003e30 <LL_ADC_IsInternalRegulatorEnabled>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d114      	bne.n	8003ff8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff ff18 	bl	8003e08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fd8:	4b87      	ldr	r3, [pc, #540]	; (80041f8 <HAL_ADC_Init+0x290>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	099b      	lsrs	r3, r3, #6
 8003fde:	4a87      	ldr	r2, [pc, #540]	; (80041fc <HAL_ADC_Init+0x294>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	099b      	lsrs	r3, r3, #6
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fea:	e002      	b.n	8003ff2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f9      	bne.n	8003fec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff17 	bl	8003e30 <LL_ADC_IsInternalRegulatorEnabled>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10d      	bne.n	8004024 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	f043 0210 	orr.w	r2, r3, #16
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	f043 0201 	orr.w	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff77 	bl	8003f1c <LL_ADC_REG_IsConversionOngoing>
 800402e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 8129 	bne.w	8004290 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f040 8125 	bne.w	8004290 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800404e:	f043 0202 	orr.w	r2, r3, #2
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff ff24 	bl	8003ea8 <LL_ADC_IsEnabled>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d136      	bne.n	80040d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a65      	ldr	r2, [pc, #404]	; (8004200 <HAL_ADC_Init+0x298>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_ADC_Init+0x112>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a63      	ldr	r2, [pc, #396]	; (8004204 <HAL_ADC_Init+0x29c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10e      	bne.n	8004098 <HAL_ADC_Init+0x130>
 800407a:	4861      	ldr	r0, [pc, #388]	; (8004200 <HAL_ADC_Init+0x298>)
 800407c:	f7ff ff14 	bl	8003ea8 <LL_ADC_IsEnabled>
 8004080:	4604      	mov	r4, r0
 8004082:	4860      	ldr	r0, [pc, #384]	; (8004204 <HAL_ADC_Init+0x29c>)
 8004084:	f7ff ff10 	bl	8003ea8 <LL_ADC_IsEnabled>
 8004088:	4603      	mov	r3, r0
 800408a:	4323      	orrs	r3, r4
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	e008      	b.n	80040aa <HAL_ADC_Init+0x142>
 8004098:	485b      	ldr	r0, [pc, #364]	; (8004208 <HAL_ADC_Init+0x2a0>)
 800409a:	f7ff ff05 	bl	8003ea8 <LL_ADC_IsEnabled>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d012      	beq.n	80040d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a53      	ldr	r2, [pc, #332]	; (8004200 <HAL_ADC_Init+0x298>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_ADC_Init+0x15a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a51      	ldr	r2, [pc, #324]	; (8004204 <HAL_ADC_Init+0x29c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <HAL_ADC_Init+0x15e>
 80040c2:	4a52      	ldr	r2, [pc, #328]	; (800420c <HAL_ADC_Init+0x2a4>)
 80040c4:	e000      	b.n	80040c8 <HAL_ADC_Init+0x160>
 80040c6:	4a52      	ldr	r2, [pc, #328]	; (8004210 <HAL_ADC_Init+0x2a8>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4619      	mov	r1, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	f7ff fd3c 	bl	8003b4c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80040d4:	f7ff fd18 	bl	8003b08 <HAL_GetREVID>
 80040d8:	4603      	mov	r3, r0
 80040da:	f241 0203 	movw	r2, #4099	; 0x1003
 80040de:	4293      	cmp	r3, r2
 80040e0:	d914      	bls.n	800410c <HAL_ADC_Init+0x1a4>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d110      	bne.n	800410c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	7d5b      	ldrb	r3, [r3, #21]
 80040ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040f4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80040fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	7f1b      	ldrb	r3, [r3, #28]
 8004100:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004102:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004104:	f043 030c 	orr.w	r3, r3, #12
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	e00d      	b.n	8004128 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7d5b      	ldrb	r3, [r3, #21]
 8004110:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004116:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800411c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7f1b      	ldrb	r3, [r3, #28]
 8004122:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7f1b      	ldrb	r3, [r3, #28]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d106      	bne.n	800413e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	3b01      	subs	r3, #1
 8004136:	045b      	lsls	r3, r3, #17
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	4b2c      	ldr	r3, [pc, #176]	; (8004214 <HAL_ADC_Init+0x2ac>)
 8004162:	4013      	ands	r3, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	69b9      	ldr	r1, [r7, #24]
 800416a:	430b      	orrs	r3, r1
 800416c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fed2 	bl	8003f1c <LL_ADC_REG_IsConversionOngoing>
 8004178:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fedf 	bl	8003f42 <LL_ADC_INJ_IsConversionOngoing>
 8004184:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d15f      	bne.n	800424c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d15c      	bne.n	800424c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7d1b      	ldrb	r3, [r3, #20]
 8004196:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800419c:	4313      	orrs	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	4b1c      	ldr	r3, [pc, #112]	; (8004218 <HAL_ADC_Init+0x2b0>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	69b9      	ldr	r1, [r7, #24]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d130      	bne.n	8004220 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <HAL_ADC_Init+0x2b4>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041d2:	3a01      	subs	r2, #1
 80041d4:	0411      	lsls	r1, r2, #16
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041da:	4311      	orrs	r1, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041e0:	4311      	orrs	r1, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041e6:	430a      	orrs	r2, r1
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	611a      	str	r2, [r3, #16]
 80041f4:	e01c      	b.n	8004230 <HAL_ADC_Init+0x2c8>
 80041f6:	bf00      	nop
 80041f8:	24000090 	.word	0x24000090
 80041fc:	053e2d63 	.word	0x053e2d63
 8004200:	40022000 	.word	0x40022000
 8004204:	40022100 	.word	0x40022100
 8004208:	58026000 	.word	0x58026000
 800420c:	40022300 	.word	0x40022300
 8004210:	58026300 	.word	0x58026300
 8004214:	fff0c003 	.word	0xfff0c003
 8004218:	ffffbffc 	.word	0xffffbffc
 800421c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fdec 	bl	8004e24 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10c      	bne.n	800426e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f023 010f 	bic.w	r1, r3, #15
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	1e5a      	subs	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
 800426c:	e007      	b.n	800427e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 020f 	bic.w	r2, r2, #15
 800427c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	f023 0303 	bic.w	r3, r3, #3
 8004286:	f043 0201 	orr.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	655a      	str	r2, [r3, #84]	; 0x54
 800428e:	e007      	b.n	80042a0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	f043 0210 	orr.w	r2, r3, #16
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3724      	adds	r7, #36	; 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd90      	pop	{r4, r7, pc}
 80042aa:	bf00      	nop

080042ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a55      	ldr	r2, [pc, #340]	; (8004414 <HAL_ADC_Start_DMA+0x168>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_ADC_Start_DMA+0x20>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a54      	ldr	r2, [pc, #336]	; (8004418 <HAL_ADC_Start_DMA+0x16c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_Start_DMA+0x24>
 80042cc:	4b53      	ldr	r3, [pc, #332]	; (800441c <HAL_ADC_Start_DMA+0x170>)
 80042ce:	e000      	b.n	80042d2 <HAL_ADC_Start_DMA+0x26>
 80042d0:	4b53      	ldr	r3, [pc, #332]	; (8004420 <HAL_ADC_Start_DMA+0x174>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fd64 	bl	8003da0 <LL_ADC_GetMultimode>
 80042d8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fe1c 	bl	8003f1c <LL_ADC_REG_IsConversionOngoing>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f040 808c 	bne.w	8004404 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_ADC_Start_DMA+0x4e>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e087      	b.n	800440a <HAL_ADC_Start_DMA+0x15e>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b05      	cmp	r3, #5
 800430c:	d002      	beq.n	8004314 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b09      	cmp	r3, #9
 8004312:	d170      	bne.n	80043f6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fc07 	bl	8004b28 <ADC_Enable>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d163      	bne.n	80043ec <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004328:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <HAL_ADC_Start_DMA+0x178>)
 800432a:	4013      	ands	r3, r2
 800432c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a37      	ldr	r2, [pc, #220]	; (8004418 <HAL_ADC_Start_DMA+0x16c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d002      	beq.n	8004344 <HAL_ADC_Start_DMA+0x98>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	e000      	b.n	8004346 <HAL_ADC_Start_DMA+0x9a>
 8004344:	4b33      	ldr	r3, [pc, #204]	; (8004414 <HAL_ADC_Start_DMA+0x168>)
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	4293      	cmp	r3, r2
 800434c:	d002      	beq.n	8004354 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d006      	beq.n	800437a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004370:	f023 0206 	bic.w	r2, r3, #6
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	659a      	str	r2, [r3, #88]	; 0x58
 8004378:	e002      	b.n	8004380 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004384:	4a28      	ldr	r2, [pc, #160]	; (8004428 <HAL_ADC_Start_DMA+0x17c>)
 8004386:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438c:	4a27      	ldr	r2, [pc, #156]	; (800442c <HAL_ADC_Start_DMA+0x180>)
 800438e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004394:	4a26      	ldr	r2, [pc, #152]	; (8004430 <HAL_ADC_Start_DMA+0x184>)
 8004396:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	221c      	movs	r2, #28
 800439e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0210 	orr.w	r2, r2, #16
 80043b6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	4619      	mov	r1, r3
 80043c2:	4610      	mov	r0, r2
 80043c4:	f7ff fc89 	bl	8003cda <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3340      	adds	r3, #64	; 0x40
 80043d2:	4619      	mov	r1, r3
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f002 f80e 	bl	80063f8 <HAL_DMA_Start_IT>
 80043dc:	4603      	mov	r3, r0
 80043de:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fd85 	bl	8003ef4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80043ea:	e00d      	b.n	8004408 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80043f4:	e008      	b.n	8004408 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004402:	e001      	b.n	8004408 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004404:	2302      	movs	r3, #2
 8004406:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004408:	7dfb      	ldrb	r3, [r7, #23]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40022000 	.word	0x40022000
 8004418:	40022100 	.word	0x40022100
 800441c:	40022300 	.word	0x40022300
 8004420:	58026300 	.word	0x58026300
 8004424:	fffff0fe 	.word	0xfffff0fe
 8004428:	08004cfb 	.word	0x08004cfb
 800442c:	08004dd3 	.word	0x08004dd3
 8004430:	08004def 	.word	0x08004def

08004434 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b0a1      	sub	sp, #132	; 0x84
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a65      	ldr	r2, [pc, #404]	; (8004620 <HAL_ADC_ConfigChannel+0x1b0>)
 800448a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_ADC_ConfigChannel+0x2a>
 8004496:	2302      	movs	r3, #2
 8004498:	e32e      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x688>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fd38 	bl	8003f1c <LL_ADC_REG_IsConversionOngoing>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f040 8313 	bne.w	8004ada <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	db2c      	blt.n	8004516 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <HAL_ADC_ConfigChannel+0x6a>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	0e9b      	lsrs	r3, r3, #26
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	2201      	movs	r2, #1
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	e016      	b.n	8004508 <HAL_ADC_ConfigChannel+0x98>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80044e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ea:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80044ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80044f2:	2320      	movs	r3, #32
 80044f4:	e003      	b.n	80044fe <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80044f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044f8:	fab3 f383 	clz	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	2201      	movs	r2, #1
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	69d1      	ldr	r1, [r2, #28]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	430b      	orrs	r3, r1
 8004514:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6859      	ldr	r1, [r3, #4]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	f7ff fbad 	bl	8003c82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fcf5 	bl	8003f1c <LL_ADC_REG_IsConversionOngoing>
 8004532:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff fd02 	bl	8003f42 <LL_ADC_INJ_IsConversionOngoing>
 800453e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004542:	2b00      	cmp	r3, #0
 8004544:	f040 80b8 	bne.w	80046b8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 80b4 	bne.w	80046b8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6819      	ldr	r1, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	461a      	mov	r2, r3
 800455e:	f7ff fbcf 	bl	8003d00 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004562:	4b30      	ldr	r3, [pc, #192]	; (8004624 <HAL_ADC_ConfigChannel+0x1b4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800456a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800456e:	d10b      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x118>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	e01d      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x154>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <HAL_ADC_ConfigChannel+0x13e>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	089b      	lsrs	r3, r3, #2
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	e00a      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x154>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d02c      	beq.n	8004628 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6919      	ldr	r1, [r3, #16]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045dc:	f7ff faea 	bl	8003bb4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6919      	ldr	r1, [r3, #16]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	7e5b      	ldrb	r3, [r3, #25]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d102      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x186>
 80045f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045f4:	e000      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x188>
 80045f6:	2300      	movs	r3, #0
 80045f8:	461a      	mov	r2, r3
 80045fa:	f7ff fb14 	bl	8003c26 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6919      	ldr	r1, [r3, #16]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	7e1b      	ldrb	r3, [r3, #24]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d102      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x1a4>
 800460e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004612:	e000      	b.n	8004616 <HAL_ADC_ConfigChannel+0x1a6>
 8004614:	2300      	movs	r3, #0
 8004616:	461a      	mov	r2, r3
 8004618:	f7ff faec 	bl	8003bf4 <LL_ADC_SetDataRightShift>
 800461c:	e04c      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x248>
 800461e:	bf00      	nop
 8004620:	47ff0000 	.word	0x47ff0000
 8004624:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	069b      	lsls	r3, r3, #26
 8004638:	429a      	cmp	r2, r3
 800463a:	d107      	bne.n	800464c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800464a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004652:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	069b      	lsls	r3, r3, #26
 800465c:	429a      	cmp	r2, r3
 800465e:	d107      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800466e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004676:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	069b      	lsls	r3, r3, #26
 8004680:	429a      	cmp	r2, r3
 8004682:	d107      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004692:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800469a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	069b      	lsls	r3, r3, #26
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d107      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046b6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fbf3 	bl	8003ea8 <LL_ADC_IsEnabled>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f040 8211 	bne.w	8004aec <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f7ff fb3e 	bl	8003d58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4aa1      	ldr	r2, [pc, #644]	; (8004968 <HAL_ADC_ConfigChannel+0x4f8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	f040 812e 	bne.w	8004944 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10b      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x2a0>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	0e9b      	lsrs	r3, r3, #26
 80046fe:	3301      	adds	r3, #1
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	2b09      	cmp	r3, #9
 8004706:	bf94      	ite	ls
 8004708:	2301      	movls	r3, #1
 800470a:	2300      	movhi	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	e019      	b.n	8004744 <HAL_ADC_ConfigChannel+0x2d4>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004718:	fa93 f3a3 	rbit	r3, r3
 800471c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800471e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004720:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004728:	2320      	movs	r3, #32
 800472a:	e003      	b.n	8004734 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800472c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	3301      	adds	r3, #1
 8004736:	f003 031f 	and.w	r3, r3, #31
 800473a:	2b09      	cmp	r3, #9
 800473c:	bf94      	ite	ls
 800473e:	2301      	movls	r3, #1
 8004740:	2300      	movhi	r3, #0
 8004742:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004744:	2b00      	cmp	r3, #0
 8004746:	d079      	beq.n	800483c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x2f4>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	0e9b      	lsrs	r3, r3, #26
 800475a:	3301      	adds	r3, #1
 800475c:	069b      	lsls	r3, r3, #26
 800475e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004762:	e015      	b.n	8004790 <HAL_ADC_ConfigChannel+0x320>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476c:	fa93 f3a3 	rbit	r3, r3
 8004770:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004774:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800477c:	2320      	movs	r3, #32
 800477e:	e003      	b.n	8004788 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	3301      	adds	r3, #1
 800478a:	069b      	lsls	r3, r3, #26
 800478c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x340>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	0e9b      	lsrs	r3, r3, #26
 80047a2:	3301      	adds	r3, #1
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	e017      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x370>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b8:	fa93 f3a3 	rbit	r3, r3
 80047bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80047be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80047c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80047c8:	2320      	movs	r3, #32
 80047ca:	e003      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80047cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ce:	fab3 f383 	clz	r3, r3
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3301      	adds	r3, #1
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	2101      	movs	r1, #1
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	ea42 0103 	orr.w	r1, r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <HAL_ADC_ConfigChannel+0x396>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	0e9b      	lsrs	r3, r3, #26
 80047f6:	3301      	adds	r3, #1
 80047f8:	f003 021f 	and.w	r2, r3, #31
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	051b      	lsls	r3, r3, #20
 8004804:	e018      	b.n	8004838 <HAL_ADC_ConfigChannel+0x3c8>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480e:	fa93 f3a3 	rbit	r3, r3
 8004812:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800481e:	2320      	movs	r3, #32
 8004820:	e003      	b.n	800482a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	fab3 f383 	clz	r3, r3
 8004828:	b2db      	uxtb	r3, r3
 800482a:	3301      	adds	r3, #1
 800482c:	f003 021f 	and.w	r2, r3, #31
 8004830:	4613      	mov	r3, r2
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	4413      	add	r3, r2
 8004836:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004838:	430b      	orrs	r3, r1
 800483a:	e07e      	b.n	800493a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004844:	2b00      	cmp	r3, #0
 8004846:	d107      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x3e8>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	0e9b      	lsrs	r3, r3, #26
 800484e:	3301      	adds	r3, #1
 8004850:	069b      	lsls	r3, r3, #26
 8004852:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004856:	e015      	b.n	8004884 <HAL_ADC_ConfigChannel+0x414>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	fa93 f3a3 	rbit	r3, r3
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004870:	2320      	movs	r3, #32
 8004872:	e003      	b.n	800487c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	fab3 f383 	clz	r3, r3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	3301      	adds	r3, #1
 800487e:	069b      	lsls	r3, r3, #26
 8004880:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x434>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	0e9b      	lsrs	r3, r3, #26
 8004896:	3301      	adds	r3, #1
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	2101      	movs	r1, #1
 800489e:	fa01 f303 	lsl.w	r3, r1, r3
 80048a2:	e017      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x464>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	fa93 f3a3 	rbit	r3, r3
 80048b0:	61bb      	str	r3, [r7, #24]
  return result;
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80048bc:	2320      	movs	r3, #32
 80048be:	e003      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	3301      	adds	r3, #1
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2101      	movs	r1, #1
 80048d0:	fa01 f303 	lsl.w	r3, r1, r3
 80048d4:	ea42 0103 	orr.w	r1, r2, r3
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10d      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x490>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	0e9b      	lsrs	r3, r3, #26
 80048ea:	3301      	adds	r3, #1
 80048ec:	f003 021f 	and.w	r2, r3, #31
 80048f0:	4613      	mov	r3, r2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	4413      	add	r3, r2
 80048f6:	3b1e      	subs	r3, #30
 80048f8:	051b      	lsls	r3, r3, #20
 80048fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048fe:	e01b      	b.n	8004938 <HAL_ADC_ConfigChannel+0x4c8>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	60fb      	str	r3, [r7, #12]
  return result;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004918:	2320      	movs	r3, #32
 800491a:	e003      	b.n	8004924 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	fab3 f383 	clz	r3, r3
 8004922:	b2db      	uxtb	r3, r3
 8004924:	3301      	adds	r3, #1
 8004926:	f003 021f 	and.w	r2, r3, #31
 800492a:	4613      	mov	r3, r2
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4413      	add	r3, r2
 8004930:	3b1e      	subs	r3, #30
 8004932:	051b      	lsls	r3, r3, #20
 8004934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004938:	430b      	orrs	r3, r1
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	6892      	ldr	r2, [r2, #8]
 800493e:	4619      	mov	r1, r3
 8004940:	f7ff f9de 	bl	8003d00 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f280 80cf 	bge.w	8004aec <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a06      	ldr	r2, [pc, #24]	; (800496c <HAL_ADC_ConfigChannel+0x4fc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_ADC_ConfigChannel+0x4f2>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a04      	ldr	r2, [pc, #16]	; (8004970 <HAL_ADC_ConfigChannel+0x500>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10a      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x508>
 8004962:	4b04      	ldr	r3, [pc, #16]	; (8004974 <HAL_ADC_ConfigChannel+0x504>)
 8004964:	e009      	b.n	800497a <HAL_ADC_ConfigChannel+0x50a>
 8004966:	bf00      	nop
 8004968:	47ff0000 	.word	0x47ff0000
 800496c:	40022000 	.word	0x40022000
 8004970:	40022100 	.word	0x40022100
 8004974:	40022300 	.word	0x40022300
 8004978:	4b61      	ldr	r3, [pc, #388]	; (8004b00 <HAL_ADC_ConfigChannel+0x690>)
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff f90c 	bl	8003b98 <LL_ADC_GetCommonPathInternalCh>
 8004980:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a5f      	ldr	r2, [pc, #380]	; (8004b04 <HAL_ADC_ConfigChannel+0x694>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_ADC_ConfigChannel+0x526>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a5d      	ldr	r2, [pc, #372]	; (8004b08 <HAL_ADC_ConfigChannel+0x698>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d10e      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x544>
 8004996:	485b      	ldr	r0, [pc, #364]	; (8004b04 <HAL_ADC_ConfigChannel+0x694>)
 8004998:	f7ff fa86 	bl	8003ea8 <LL_ADC_IsEnabled>
 800499c:	4604      	mov	r4, r0
 800499e:	485a      	ldr	r0, [pc, #360]	; (8004b08 <HAL_ADC_ConfigChannel+0x698>)
 80049a0:	f7ff fa82 	bl	8003ea8 <LL_ADC_IsEnabled>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4323      	orrs	r3, r4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e008      	b.n	80049c6 <HAL_ADC_ConfigChannel+0x556>
 80049b4:	4855      	ldr	r0, [pc, #340]	; (8004b0c <HAL_ADC_ConfigChannel+0x69c>)
 80049b6:	f7ff fa77 	bl	8003ea8 <LL_ADC_IsEnabled>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d07d      	beq.n	8004ac6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a50      	ldr	r2, [pc, #320]	; (8004b10 <HAL_ADC_ConfigChannel+0x6a0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d130      	bne.n	8004a36 <HAL_ADC_ConfigChannel+0x5c6>
 80049d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d12b      	bne.n	8004a36 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a4a      	ldr	r2, [pc, #296]	; (8004b0c <HAL_ADC_ConfigChannel+0x69c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	f040 8081 	bne.w	8004aec <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a45      	ldr	r2, [pc, #276]	; (8004b04 <HAL_ADC_ConfigChannel+0x694>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_ADC_ConfigChannel+0x58e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a43      	ldr	r2, [pc, #268]	; (8004b08 <HAL_ADC_ConfigChannel+0x698>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x592>
 80049fe:	4a45      	ldr	r2, [pc, #276]	; (8004b14 <HAL_ADC_ConfigChannel+0x6a4>)
 8004a00:	e000      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x594>
 8004a02:	4a3f      	ldr	r2, [pc, #252]	; (8004b00 <HAL_ADC_ConfigChannel+0x690>)
 8004a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	f7ff f8b0 	bl	8003b72 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a12:	4b41      	ldr	r3, [pc, #260]	; (8004b18 <HAL_ADC_ConfigChannel+0x6a8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	099b      	lsrs	r3, r3, #6
 8004a18:	4a40      	ldr	r2, [pc, #256]	; (8004b1c <HAL_ADC_ConfigChannel+0x6ac>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	099b      	lsrs	r3, r3, #6
 8004a20:	3301      	adds	r3, #1
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a26:	e002      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f9      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a34:	e05a      	b.n	8004aec <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a39      	ldr	r2, [pc, #228]	; (8004b20 <HAL_ADC_ConfigChannel+0x6b0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d11e      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x60e>
 8004a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d119      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2f      	ldr	r2, [pc, #188]	; (8004b0c <HAL_ADC_ConfigChannel+0x69c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d14b      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a2a      	ldr	r2, [pc, #168]	; (8004b04 <HAL_ADC_ConfigChannel+0x694>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_ADC_ConfigChannel+0x5f8>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a29      	ldr	r2, [pc, #164]	; (8004b08 <HAL_ADC_ConfigChannel+0x698>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d101      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x5fc>
 8004a68:	4a2a      	ldr	r2, [pc, #168]	; (8004b14 <HAL_ADC_ConfigChannel+0x6a4>)
 8004a6a:	e000      	b.n	8004a6e <HAL_ADC_ConfigChannel+0x5fe>
 8004a6c:	4a24      	ldr	r2, [pc, #144]	; (8004b00 <HAL_ADC_ConfigChannel+0x690>)
 8004a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f7ff f87b 	bl	8003b72 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a7c:	e036      	b.n	8004aec <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a28      	ldr	r2, [pc, #160]	; (8004b24 <HAL_ADC_ConfigChannel+0x6b4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d131      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x67c>
 8004a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d12c      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <HAL_ADC_ConfigChannel+0x69c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d127      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a18      	ldr	r2, [pc, #96]	; (8004b04 <HAL_ADC_ConfigChannel+0x694>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_ADC_ConfigChannel+0x640>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <HAL_ADC_ConfigChannel+0x698>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d101      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x644>
 8004ab0:	4a18      	ldr	r2, [pc, #96]	; (8004b14 <HAL_ADC_ConfigChannel+0x6a4>)
 8004ab2:	e000      	b.n	8004ab6 <HAL_ADC_ConfigChannel+0x646>
 8004ab4:	4a12      	ldr	r2, [pc, #72]	; (8004b00 <HAL_ADC_ConfigChannel+0x690>)
 8004ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7ff f857 	bl	8003b72 <LL_ADC_SetCommonPathInternalCh>
 8004ac4:	e012      	b.n	8004aec <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004ad8:	e008      	b.n	8004aec <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004af4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3784      	adds	r7, #132	; 0x84
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd90      	pop	{r4, r7, pc}
 8004b00:	58026300 	.word	0x58026300
 8004b04:	40022000 	.word	0x40022000
 8004b08:	40022100 	.word	0x40022100
 8004b0c:	58026000 	.word	0x58026000
 8004b10:	cb840000 	.word	0xcb840000
 8004b14:	40022300 	.word	0x40022300
 8004b18:	24000090 	.word	0x24000090
 8004b1c:	053e2d63 	.word	0x053e2d63
 8004b20:	c7520000 	.word	0xc7520000
 8004b24:	cfb80000 	.word	0xcfb80000

08004b28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff f9b7 	bl	8003ea8 <LL_ADC_IsEnabled>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d16e      	bne.n	8004c1e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	4b38      	ldr	r3, [pc, #224]	; (8004c28 <ADC_Enable+0x100>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00d      	beq.n	8004b6a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b52:	f043 0210 	orr.w	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	f043 0201 	orr.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e05a      	b.n	8004c20 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff f972 	bl	8003e58 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b74:	f7fe ffbc 	bl	8003af0 <HAL_GetTick>
 8004b78:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a2b      	ldr	r2, [pc, #172]	; (8004c2c <ADC_Enable+0x104>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <ADC_Enable+0x66>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a29      	ldr	r2, [pc, #164]	; (8004c30 <ADC_Enable+0x108>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d101      	bne.n	8004b92 <ADC_Enable+0x6a>
 8004b8e:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <ADC_Enable+0x10c>)
 8004b90:	e000      	b.n	8004b94 <ADC_Enable+0x6c>
 8004b92:	4b29      	ldr	r3, [pc, #164]	; (8004c38 <ADC_Enable+0x110>)
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff f903 	bl	8003da0 <LL_ADC_GetMultimode>
 8004b9a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a23      	ldr	r2, [pc, #140]	; (8004c30 <ADC_Enable+0x108>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d002      	beq.n	8004bac <ADC_Enable+0x84>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	e000      	b.n	8004bae <ADC_Enable+0x86>
 8004bac:	4b1f      	ldr	r3, [pc, #124]	; (8004c2c <ADC_Enable+0x104>)
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d02c      	beq.n	8004c10 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d130      	bne.n	8004c1e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bbc:	e028      	b.n	8004c10 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff f970 	bl	8003ea8 <LL_ADC_IsEnabled>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d104      	bne.n	8004bd8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff f940 	bl	8003e58 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004bd8:	f7fe ff8a 	bl	8003af0 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d914      	bls.n	8004c10 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d00d      	beq.n	8004c10 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf8:	f043 0210 	orr.w	r2, r3, #16
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c04:	f043 0201 	orr.w	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e007      	b.n	8004c20 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d1cf      	bne.n	8004bbe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	8000003f 	.word	0x8000003f
 8004c2c:	40022000 	.word	0x40022000
 8004c30:	40022100 	.word	0x40022100
 8004c34:	40022300 	.word	0x40022300
 8004c38:	58026300 	.word	0x58026300

08004c3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff f940 	bl	8003ece <LL_ADC_IsDisableOngoing>
 8004c4e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff f927 	bl	8003ea8 <LL_ADC_IsEnabled>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d047      	beq.n	8004cf0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d144      	bne.n	8004cf0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 030d 	and.w	r3, r3, #13
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d10c      	bne.n	8004c8e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff f901 	bl	8003e80 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2203      	movs	r2, #3
 8004c84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c86:	f7fe ff33 	bl	8003af0 <HAL_GetTick>
 8004c8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c8c:	e029      	b.n	8004ce2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	f043 0210 	orr.w	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	f043 0201 	orr.w	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e023      	b.n	8004cf2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004caa:	f7fe ff21 	bl	8003af0 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d914      	bls.n	8004ce2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00d      	beq.n	8004ce2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cca:	f043 0210 	orr.w	r2, r3, #16
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	f043 0201 	orr.w	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e007      	b.n	8004cf2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1dc      	bne.n	8004caa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d14b      	bne.n	8004dac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d021      	beq.n	8004d72 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe ff92 	bl	8003c5c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d032      	beq.n	8004da4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d12b      	bne.n	8004da4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d11f      	bne.n	8004da4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	f043 0201 	orr.w	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54
 8004d70:	e018      	b.n	8004da4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d111      	bne.n	8004da4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff fb45 	bl	8004434 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004daa:	e00e      	b.n	8004dca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7ff fb4f 	bl	800445c <HAL_ADC_ErrorCallback>
}
 8004dbe:	e004      	b.n	8004dca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f7ff fb31 	bl	8004448 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0c:	f043 0204 	orr.w	r2, r3, #4
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff fb21 	bl	800445c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a7a      	ldr	r2, [pc, #488]	; (800501c <ADC_ConfigureBoostMode+0x1f8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <ADC_ConfigureBoostMode+0x1c>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a79      	ldr	r2, [pc, #484]	; (8005020 <ADC_ConfigureBoostMode+0x1fc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d109      	bne.n	8004e54 <ADC_ConfigureBoostMode+0x30>
 8004e40:	4b78      	ldr	r3, [pc, #480]	; (8005024 <ADC_ConfigureBoostMode+0x200>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	bf14      	ite	ne
 8004e4c:	2301      	movne	r3, #1
 8004e4e:	2300      	moveq	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	e008      	b.n	8004e66 <ADC_ConfigureBoostMode+0x42>
 8004e54:	4b74      	ldr	r3, [pc, #464]	; (8005028 <ADC_ConfigureBoostMode+0x204>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d01c      	beq.n	8004ea4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e6a:	f005 fd57 	bl	800a91c <HAL_RCC_GetHCLKFreq>
 8004e6e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e78:	d010      	beq.n	8004e9c <ADC_ConfigureBoostMode+0x78>
 8004e7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e7e:	d873      	bhi.n	8004f68 <ADC_ConfigureBoostMode+0x144>
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e84:	d002      	beq.n	8004e8c <ADC_ConfigureBoostMode+0x68>
 8004e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e8a:	d16d      	bne.n	8004f68 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e98:	60fb      	str	r3, [r7, #12]
        break;
 8004e9a:	e068      	b.n	8004f6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	089b      	lsrs	r3, r3, #2
 8004ea0:	60fb      	str	r3, [r7, #12]
        break;
 8004ea2:	e064      	b.n	8004f6e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ea4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004ea8:	f04f 0100 	mov.w	r1, #0
 8004eac:	f006 ffde 	bl	800be6c <HAL_RCCEx_GetPeriphCLKFreq>
 8004eb0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004eba:	d051      	beq.n	8004f60 <ADC_ConfigureBoostMode+0x13c>
 8004ebc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ec0:	d854      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x148>
 8004ec2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ec6:	d047      	beq.n	8004f58 <ADC_ConfigureBoostMode+0x134>
 8004ec8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ecc:	d84e      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x148>
 8004ece:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ed2:	d03d      	beq.n	8004f50 <ADC_ConfigureBoostMode+0x12c>
 8004ed4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ed8:	d848      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x148>
 8004eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ede:	d033      	beq.n	8004f48 <ADC_ConfigureBoostMode+0x124>
 8004ee0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee4:	d842      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x148>
 8004ee6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004eea:	d029      	beq.n	8004f40 <ADC_ConfigureBoostMode+0x11c>
 8004eec:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ef0:	d83c      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x148>
 8004ef2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ef6:	d01a      	beq.n	8004f2e <ADC_ConfigureBoostMode+0x10a>
 8004ef8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004efc:	d836      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x148>
 8004efe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f02:	d014      	beq.n	8004f2e <ADC_ConfigureBoostMode+0x10a>
 8004f04:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f08:	d830      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x148>
 8004f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0e:	d00e      	beq.n	8004f2e <ADC_ConfigureBoostMode+0x10a>
 8004f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f14:	d82a      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x148>
 8004f16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f1a:	d008      	beq.n	8004f2e <ADC_ConfigureBoostMode+0x10a>
 8004f1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f20:	d824      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x148>
 8004f22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f26:	d002      	beq.n	8004f2e <ADC_ConfigureBoostMode+0x10a>
 8004f28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f2c:	d11e      	bne.n	8004f6c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	0c9b      	lsrs	r3, r3, #18
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	60fb      	str	r3, [r7, #12]
        break;
 8004f3e:	e016      	b.n	8004f6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	60fb      	str	r3, [r7, #12]
        break;
 8004f46:	e012      	b.n	8004f6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	60fb      	str	r3, [r7, #12]
        break;
 8004f4e:	e00e      	b.n	8004f6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	099b      	lsrs	r3, r3, #6
 8004f54:	60fb      	str	r3, [r7, #12]
        break;
 8004f56:	e00a      	b.n	8004f6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	09db      	lsrs	r3, r3, #7
 8004f5c:	60fb      	str	r3, [r7, #12]
        break;
 8004f5e:	e006      	b.n	8004f6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	0a1b      	lsrs	r3, r3, #8
 8004f64:	60fb      	str	r3, [r7, #12]
        break;
 8004f66:	e002      	b.n	8004f6e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004f68:	bf00      	nop
 8004f6a:	e000      	b.n	8004f6e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f6c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004f6e:	f7fe fdcb 	bl	8003b08 <HAL_GetREVID>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d815      	bhi.n	8004fa8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a2b      	ldr	r2, [pc, #172]	; (800502c <ADC_ConfigureBoostMode+0x208>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d908      	bls.n	8004f96 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f94:	e03e      	b.n	8005014 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fa4:	609a      	str	r2, [r3, #8]
}
 8004fa6:	e035      	b.n	8005014 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4a1f      	ldr	r2, [pc, #124]	; (8005030 <ADC_ConfigureBoostMode+0x20c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d808      	bhi.n	8004fc8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fc4:	609a      	str	r2, [r3, #8]
}
 8004fc6:	e025      	b.n	8005014 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <ADC_ConfigureBoostMode+0x210>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d80a      	bhi.n	8004fe6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fe2:	609a      	str	r2, [r3, #8]
}
 8004fe4:	e016      	b.n	8005014 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4a13      	ldr	r2, [pc, #76]	; (8005038 <ADC_ConfigureBoostMode+0x214>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d80a      	bhi.n	8005004 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005000:	609a      	str	r2, [r3, #8]
}
 8005002:	e007      	b.n	8005014 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005012:	609a      	str	r2, [r3, #8]
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40022000 	.word	0x40022000
 8005020:	40022100 	.word	0x40022100
 8005024:	40022300 	.word	0x40022300
 8005028:	58026300 	.word	0x58026300
 800502c:	01312d00 	.word	0x01312d00
 8005030:	005f5e10 	.word	0x005f5e10
 8005034:	00bebc20 	.word	0x00bebc20
 8005038:	017d7840 	.word	0x017d7840

0800503c <LL_ADC_IsEnabled>:
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <LL_ADC_IsEnabled+0x18>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <LL_ADC_IsEnabled+0x1a>
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
	...

08005064 <LL_ADC_StartCalibration>:
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	4b09      	ldr	r3, [pc, #36]	; (800509c <LL_ADC_StartCalibration+0x38>)
 8005076:	4013      	ands	r3, r2
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005084:	430a      	orrs	r2, r1
 8005086:	4313      	orrs	r3, r2
 8005088:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	609a      	str	r2, [r3, #8]
}
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	3ffeffc0 	.word	0x3ffeffc0

080050a0 <LL_ADC_IsCalibrationOnGoing>:
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050b4:	d101      	bne.n	80050ba <LL_ADC_IsCalibrationOnGoing+0x1a>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <LL_ADC_REG_IsConversionOngoing>:
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d101      	bne.n	80050e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_ADCEx_Calibration_Start+0x1e>
 800510a:	2302      	movs	r3, #2
 800510c:	e04c      	b.n	80051a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff fd90 	bl	8004c3c <ADC_Disable>
 800511c:	4603      	mov	r3, r0
 800511e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d135      	bne.n	8005192 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800512a:	4b21      	ldr	r3, [pc, #132]	; (80051b0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800512c:	4013      	ands	r3, r2
 800512e:	f043 0202 	orr.w	r2, r3, #2
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff ff90 	bl	8005064 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005144:	e014      	b.n	8005170 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	3301      	adds	r3, #1
 800514a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d30d      	bcc.n	8005170 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	f023 0312 	bic.w	r3, r3, #18
 800515c:	f043 0210 	orr.w	r2, r3, #16
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e01b      	b.n	80051a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff ff93 	bl	80050a0 <LL_ADC_IsCalibrationOnGoing>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e2      	bne.n	8005146 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	f023 0303 	bic.w	r3, r3, #3
 8005188:	f043 0201 	orr.w	r2, r3, #1
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	655a      	str	r2, [r3, #84]	; 0x54
 8005190:	e005      	b.n	800519e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	f043 0210 	orr.w	r2, r3, #16
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	ffffeefd 	.word	0xffffeefd
 80051b4:	25c3f800 	.word	0x25c3f800

080051b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b09f      	sub	sp, #124	; 0x7c
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e0be      	b.n	8005354 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80051de:	2300      	movs	r3, #0
 80051e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a5c      	ldr	r2, [pc, #368]	; (800535c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d102      	bne.n	80051f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80051f0:	4b5b      	ldr	r3, [pc, #364]	; (8005360 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	e001      	b.n	80051fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10b      	bne.n	8005218 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005204:	f043 0220 	orr.w	r2, r3, #32
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e09d      	b.n	8005354 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff ff54 	bl	80050c8 <LL_ADC_REG_IsConversionOngoing>
 8005220:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff ff4e 	bl	80050c8 <LL_ADC_REG_IsConversionOngoing>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d17f      	bne.n	8005332 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005234:	2b00      	cmp	r3, #0
 8005236:	d17c      	bne.n	8005332 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a47      	ldr	r2, [pc, #284]	; (800535c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a46      	ldr	r2, [pc, #280]	; (8005360 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d101      	bne.n	8005250 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800524c:	4b45      	ldr	r3, [pc, #276]	; (8005364 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800524e:	e000      	b.n	8005252 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005250:	4b45      	ldr	r3, [pc, #276]	; (8005368 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005252:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d039      	beq.n	80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800525c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	431a      	orrs	r2, r3
 800526a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a3a      	ldr	r2, [pc, #232]	; (800535c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a38      	ldr	r2, [pc, #224]	; (8005360 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d10e      	bne.n	80052a0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005282:	4836      	ldr	r0, [pc, #216]	; (800535c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005284:	f7ff feda 	bl	800503c <LL_ADC_IsEnabled>
 8005288:	4604      	mov	r4, r0
 800528a:	4835      	ldr	r0, [pc, #212]	; (8005360 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800528c:	f7ff fed6 	bl	800503c <LL_ADC_IsEnabled>
 8005290:	4603      	mov	r3, r0
 8005292:	4323      	orrs	r3, r4
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e008      	b.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80052a0:	4832      	ldr	r0, [pc, #200]	; (800536c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80052a2:	f7ff fecb 	bl	800503c <LL_ADC_IsEnabled>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bf0c      	ite	eq
 80052ac:	2301      	moveq	r3, #1
 80052ae:	2300      	movne	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d047      	beq.n	8005346 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80052b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	4b2d      	ldr	r3, [pc, #180]	; (8005370 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80052bc:	4013      	ands	r3, r2
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	6811      	ldr	r1, [r2, #0]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	6892      	ldr	r2, [r2, #8]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	431a      	orrs	r2, r3
 80052ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052cc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052ce:	e03a      	b.n	8005346 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80052d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1e      	ldr	r2, [pc, #120]	; (800535c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d10e      	bne.n	800530e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80052f0:	481a      	ldr	r0, [pc, #104]	; (800535c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80052f2:	f7ff fea3 	bl	800503c <LL_ADC_IsEnabled>
 80052f6:	4604      	mov	r4, r0
 80052f8:	4819      	ldr	r0, [pc, #100]	; (8005360 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80052fa:	f7ff fe9f 	bl	800503c <LL_ADC_IsEnabled>
 80052fe:	4603      	mov	r3, r0
 8005300:	4323      	orrs	r3, r4
 8005302:	2b00      	cmp	r3, #0
 8005304:	bf0c      	ite	eq
 8005306:	2301      	moveq	r3, #1
 8005308:	2300      	movne	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	e008      	b.n	8005320 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800530e:	4817      	ldr	r0, [pc, #92]	; (800536c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005310:	f7ff fe94 	bl	800503c <LL_ADC_IsEnabled>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	bf0c      	ite	eq
 800531a:	2301      	moveq	r3, #1
 800531c:	2300      	movne	r3, #0
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d010      	beq.n	8005346 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	4b11      	ldr	r3, [pc, #68]	; (8005370 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800532a:	4013      	ands	r3, r2
 800532c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800532e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005330:	e009      	b.n	8005346 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	f043 0220 	orr.w	r2, r3, #32
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005344:	e000      	b.n	8005348 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005346:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005350:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005354:	4618      	mov	r0, r3
 8005356:	377c      	adds	r7, #124	; 0x7c
 8005358:	46bd      	mov	sp, r7
 800535a:	bd90      	pop	{r4, r7, pc}
 800535c:	40022000 	.word	0x40022000
 8005360:	40022100 	.word	0x40022100
 8005364:	40022300 	.word	0x40022300
 8005368:	58026300 	.word	0x58026300
 800536c:	58026000 	.word	0x58026000
 8005370:	fffff0e0 	.word	0xfffff0e0

08005374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <__NVIC_SetPriorityGrouping+0x40>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005390:	4013      	ands	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <__NVIC_SetPriorityGrouping+0x44>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053a2:	4a04      	ldr	r2, [pc, #16]	; (80053b4 <__NVIC_SetPriorityGrouping+0x40>)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	60d3      	str	r3, [r2, #12]
}
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	e000ed00 	.word	0xe000ed00
 80053b8:	05fa0000 	.word	0x05fa0000

080053bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c0:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <__NVIC_GetPriorityGrouping+0x18>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	0a1b      	lsrs	r3, r3, #8
 80053c6:	f003 0307 	and.w	r3, r3, #7
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	e000ed00 	.word	0xe000ed00

080053d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	db0b      	blt.n	8005402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	f003 021f 	and.w	r2, r3, #31
 80053f0:	4907      	ldr	r1, [pc, #28]	; (8005410 <__NVIC_EnableIRQ+0x38>)
 80053f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2001      	movs	r0, #1
 80053fa:	fa00 f202 	lsl.w	r2, r0, r2
 80053fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	e000e100 	.word	0xe000e100

08005414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	6039      	str	r1, [r7, #0]
 800541e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005424:	2b00      	cmp	r3, #0
 8005426:	db0a      	blt.n	800543e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	490c      	ldr	r1, [pc, #48]	; (8005460 <__NVIC_SetPriority+0x4c>)
 800542e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005432:	0112      	lsls	r2, r2, #4
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	440b      	add	r3, r1
 8005438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800543c:	e00a      	b.n	8005454 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	b2da      	uxtb	r2, r3
 8005442:	4908      	ldr	r1, [pc, #32]	; (8005464 <__NVIC_SetPriority+0x50>)
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	3b04      	subs	r3, #4
 800544c:	0112      	lsls	r2, r2, #4
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	440b      	add	r3, r1
 8005452:	761a      	strb	r2, [r3, #24]
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	e000e100 	.word	0xe000e100
 8005464:	e000ed00 	.word	0xe000ed00

08005468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005468:	b480      	push	{r7}
 800546a:	b089      	sub	sp, #36	; 0x24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f1c3 0307 	rsb	r3, r3, #7
 8005482:	2b04      	cmp	r3, #4
 8005484:	bf28      	it	cs
 8005486:	2304      	movcs	r3, #4
 8005488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	3304      	adds	r3, #4
 800548e:	2b06      	cmp	r3, #6
 8005490:	d902      	bls.n	8005498 <NVIC_EncodePriority+0x30>
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	3b03      	subs	r3, #3
 8005496:	e000      	b.n	800549a <NVIC_EncodePriority+0x32>
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800549c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43da      	mvns	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	401a      	ands	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	43d9      	mvns	r1, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c0:	4313      	orrs	r3, r2
         );
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3724      	adds	r7, #36	; 0x24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff ff4c 	bl	8005374 <__NVIC_SetPriorityGrouping>
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	4603      	mov	r3, r0
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054f2:	f7ff ff63 	bl	80053bc <__NVIC_GetPriorityGrouping>
 80054f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	6978      	ldr	r0, [r7, #20]
 80054fe:	f7ff ffb3 	bl	8005468 <NVIC_EncodePriority>
 8005502:	4602      	mov	r2, r0
 8005504:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005508:	4611      	mov	r1, r2
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff ff82 	bl	8005414 <__NVIC_SetPriority>
}
 8005510:	bf00      	nop
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff ff56 	bl	80053d8 <__NVIC_EnableIRQ>
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e014      	b.n	8005570 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	791b      	ldrb	r3, [r3, #4]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d105      	bne.n	800555c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fd fc76 	bl	8002e48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e046      	b.n	800561a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	795b      	ldrb	r3, [r3, #5]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_DAC_Start+0x20>
 8005594:	2302      	movs	r3, #2
 8005596:	e040      	b.n	800561a <HAL_DAC_Start+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2202      	movs	r2, #2
 80055a2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6819      	ldr	r1, [r3, #0]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2201      	movs	r2, #1
 80055b2:	409a      	lsls	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10f      	bne.n	80055e2 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d11d      	bne.n	800560c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	605a      	str	r2, [r3, #4]
 80055e0:	e014      	b.n	800560c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2102      	movs	r1, #2
 80055f4:	fa01 f303 	lsl.w	r3, r1, r3
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d107      	bne.n	800560c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0202 	orr.w	r2, r2, #2
 800560a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0a2      	b.n	8005786 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	795b      	ldrb	r3, [r3, #5]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_DAC_Start_DMA+0x24>
 8005648:	2302      	movs	r3, #2
 800564a:	e09c      	b.n	8005786 <HAL_DAC_Start_DMA+0x15e>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2202      	movs	r2, #2
 8005656:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d129      	bne.n	80056b2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	4a4b      	ldr	r2, [pc, #300]	; (8005790 <HAL_DAC_Start_DMA+0x168>)
 8005664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	4a4a      	ldr	r2, [pc, #296]	; (8005794 <HAL_DAC_Start_DMA+0x16c>)
 800566c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	4a49      	ldr	r2, [pc, #292]	; (8005798 <HAL_DAC_Start_DMA+0x170>)
 8005674:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005684:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_DAC_Start_DMA+0x6c>
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	2b04      	cmp	r3, #4
 8005690:	d005      	beq.n	800569e <HAL_DAC_Start_DMA+0x76>
 8005692:	e009      	b.n	80056a8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3308      	adds	r3, #8
 800569a:	613b      	str	r3, [r7, #16]
        break;
 800569c:	e033      	b.n	8005706 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	613b      	str	r3, [r7, #16]
        break;
 80056a6:	e02e      	b.n	8005706 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3310      	adds	r3, #16
 80056ae:	613b      	str	r3, [r7, #16]
        break;
 80056b0:	e029      	b.n	8005706 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	4a39      	ldr	r2, [pc, #228]	; (800579c <HAL_DAC_Start_DMA+0x174>)
 80056b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	4a38      	ldr	r2, [pc, #224]	; (80057a0 <HAL_DAC_Start_DMA+0x178>)
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	4a37      	ldr	r2, [pc, #220]	; (80057a4 <HAL_DAC_Start_DMA+0x17c>)
 80056c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80056d8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_DAC_Start_DMA+0xc0>
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d005      	beq.n	80056f2 <HAL_DAC_Start_DMA+0xca>
 80056e6:	e009      	b.n	80056fc <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3314      	adds	r3, #20
 80056ee:	613b      	str	r3, [r7, #16]
        break;
 80056f0:	e009      	b.n	8005706 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3318      	adds	r3, #24
 80056f8:	613b      	str	r3, [r7, #16]
        break;
 80056fa:	e004      	b.n	8005706 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	331c      	adds	r3, #28
 8005702:	613b      	str	r3, [r7, #16]
        break;
 8005704:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d111      	bne.n	8005730 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800571a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6898      	ldr	r0, [r3, #8]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	f000 fe67 	bl	80063f8 <HAL_DMA_Start_IT>
 800572a:	4603      	mov	r3, r0
 800572c:	75fb      	strb	r3, [r7, #23]
 800572e:	e010      	b.n	8005752 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800573e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68d8      	ldr	r0, [r3, #12]
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	f000 fe55 	bl	80063f8 <HAL_DMA_Start_IT>
 800574e:	4603      	mov	r3, r0
 8005750:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10c      	bne.n	8005778 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6819      	ldr	r1, [r3, #0]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2201      	movs	r2, #1
 800576c:	409a      	lsls	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	e005      	b.n	8005784 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	f043 0204 	orr.w	r2, r3, #4
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	08005c19 	.word	0x08005c19
 8005794:	08005c3b 	.word	0x08005c3b
 8005798:	08005c57 	.word	0x08005c57
 800579c:	08005cd5 	.word	0x08005cd5
 80057a0:	08005cf7 	.word	0x08005cf7
 80057a4:	08005d13 	.word	0x08005d13

080057a8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e03e      	b.n	800583a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6819      	ldr	r1, [r3, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	43da      	mvns	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	400a      	ands	r2, r1
 80057d8:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6819      	ldr	r1, [r3, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	2201      	movs	r2, #1
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	43da      	mvns	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	400a      	ands	r2, r1
 80057f4:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10d      	bne.n	8005818 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	4618      	mov	r0, r3
 8005802:	f001 f863 	bl	80068cc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	e00c      	b.n	8005832 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4618      	mov	r0, r3
 800581e:	f001 f855 	bl	80068cc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005830:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005858:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01d      	beq.n	80058a0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d018      	beq.n	80058a0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2204      	movs	r2, #4
 8005872:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f043 0201 	orr.w	r2, r3, #1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005888:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005898:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f86f 	bl	800597e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01d      	beq.n	80058e6 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d018      	beq.n	80058e6 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2204      	movs	r2, #4
 80058b8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f043 0202 	orr.w	r2, r3, #2
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80058ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80058de:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f9ed 	bl	8005cc0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b087      	sub	sp, #28
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
 80058fa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e015      	b.n	8005936 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d105      	bne.n	8005922 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4413      	add	r3, r2
 800591c:	3308      	adds	r3, #8
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e004      	b.n	800592c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4413      	add	r3, r2
 8005928:	3314      	adds	r3, #20
 800592a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	461a      	mov	r2, r3
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
	...

08005994 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08a      	sub	sp, #40	; 0x28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <HAL_DAC_ConfigChannel+0x1e>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e12a      	b.n	8005c0c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	795b      	ldrb	r3, [r3, #5]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_DAC_ConfigChannel+0x2e>
 80059be:	2302      	movs	r3, #2
 80059c0:	e124      	b.n	8005c0c <HAL_DAC_ConfigChannel+0x278>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2202      	movs	r2, #2
 80059cc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d17a      	bne.n	8005acc <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80059d6:	f7fe f88b 	bl	8003af0 <HAL_GetTick>
 80059da:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d13d      	bne.n	8005a5e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059e2:	e018      	b.n	8005a16 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80059e4:	f7fe f884 	bl	8003af0 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d911      	bls.n	8005a16 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f8:	4b86      	ldr	r3, [pc, #536]	; (8005c14 <HAL_DAC_ConfigChannel+0x280>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f043 0208 	orr.w	r2, r3, #8
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2203      	movs	r2, #3
 8005a10:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e0fa      	b.n	8005c0c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1c:	4b7d      	ldr	r3, [pc, #500]	; (8005c14 <HAL_DAC_ConfigChannel+0x280>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1df      	bne.n	80059e4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	6992      	ldr	r2, [r2, #24]
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8005a2e:	e020      	b.n	8005a72 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a30:	f7fe f85e 	bl	8003af0 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d90f      	bls.n	8005a5e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	da0a      	bge.n	8005a5e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f043 0208 	orr.w	r2, r3, #8
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2203      	movs	r2, #3
 8005a58:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e0d6      	b.n	8005c0c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	dbe3      	blt.n	8005a30 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	6992      	ldr	r2, [r2, #24]
 8005a70:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005a82:	fa01 f303 	lsl.w	r3, r1, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	ea02 0103 	and.w	r1, r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	409a      	lsls	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f003 0310 	and.w	r3, r3, #16
 8005aac:	21ff      	movs	r1, #255	; 0xff
 8005aae:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	ea02 0103 	and.w	r1, r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f003 0310 	and.w	r3, r3, #16
 8005ac2:	409a      	lsls	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d11d      	bne.n	8005b10 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	221f      	movs	r2, #31
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4013      	ands	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2207      	movs	r2, #7
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	43db      	mvns	r3, r3
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d102      	bne.n	8005b3a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
 8005b38:	e00f      	b.n	8005b5a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d102      	bne.n	8005b48 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005b42:	2301      	movs	r3, #1
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
 8005b46:	e008      	b.n	8005b5a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005b50:	2301      	movs	r3, #1
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
 8005b54:	e001      	b.n	8005b5a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6819      	ldr	r1, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	43da      	mvns	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	400a      	ands	r2, r1
 8005ba0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6819      	ldr	r1, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	22c0      	movs	r2, #192	; 0xc0
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	43da      	mvns	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	400a      	ands	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3728      	adds	r7, #40	; 0x28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20008000 	.word	0x20008000

08005c18 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f7ff fe8b 	bl	8005942 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	711a      	strb	r2, [r3, #4]
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff fe84 	bl	8005956 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005c4e:	bf00      	nop
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f043 0204 	orr.w	r2, r3, #4
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7ff fe7a 	bl	800596a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	711a      	strb	r2, [r3, #4]
}
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff ffce 	bl	8005c84 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	711a      	strb	r2, [r3, #4]
}
 8005cee:	bf00      	nop
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f7ff ffc7 	bl	8005c98 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f043 0204 	orr.w	r2, r3, #4
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7ff ffbd 	bl	8005cac <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	711a      	strb	r2, [r3, #4]
}
 8005d38:	bf00      	nop
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d48:	f7fd fed2 	bl	8003af0 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e316      	b.n	8006386 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a66      	ldr	r2, [pc, #408]	; (8005ef8 <HAL_DMA_Init+0x1b8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d04a      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a65      	ldr	r2, [pc, #404]	; (8005efc <HAL_DMA_Init+0x1bc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d045      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a63      	ldr	r2, [pc, #396]	; (8005f00 <HAL_DMA_Init+0x1c0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d040      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a62      	ldr	r2, [pc, #392]	; (8005f04 <HAL_DMA_Init+0x1c4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d03b      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a60      	ldr	r2, [pc, #384]	; (8005f08 <HAL_DMA_Init+0x1c8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d036      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a5f      	ldr	r2, [pc, #380]	; (8005f0c <HAL_DMA_Init+0x1cc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d031      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a5d      	ldr	r2, [pc, #372]	; (8005f10 <HAL_DMA_Init+0x1d0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d02c      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a5c      	ldr	r2, [pc, #368]	; (8005f14 <HAL_DMA_Init+0x1d4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d027      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a5a      	ldr	r2, [pc, #360]	; (8005f18 <HAL_DMA_Init+0x1d8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d022      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a59      	ldr	r2, [pc, #356]	; (8005f1c <HAL_DMA_Init+0x1dc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d01d      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a57      	ldr	r2, [pc, #348]	; (8005f20 <HAL_DMA_Init+0x1e0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d018      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a56      	ldr	r2, [pc, #344]	; (8005f24 <HAL_DMA_Init+0x1e4>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d013      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a54      	ldr	r2, [pc, #336]	; (8005f28 <HAL_DMA_Init+0x1e8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00e      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a53      	ldr	r2, [pc, #332]	; (8005f2c <HAL_DMA_Init+0x1ec>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d009      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a51      	ldr	r2, [pc, #324]	; (8005f30 <HAL_DMA_Init+0x1f0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_DMA_Init+0xb8>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a50      	ldr	r2, [pc, #320]	; (8005f34 <HAL_DMA_Init+0x1f4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d101      	bne.n	8005dfc <HAL_DMA_Init+0xbc>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <HAL_DMA_Init+0xbe>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 813b 	beq.w	800607a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a37      	ldr	r2, [pc, #220]	; (8005ef8 <HAL_DMA_Init+0x1b8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d04a      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a36      	ldr	r2, [pc, #216]	; (8005efc <HAL_DMA_Init+0x1bc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d045      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a34      	ldr	r2, [pc, #208]	; (8005f00 <HAL_DMA_Init+0x1c0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d040      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a33      	ldr	r2, [pc, #204]	; (8005f04 <HAL_DMA_Init+0x1c4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d03b      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a31      	ldr	r2, [pc, #196]	; (8005f08 <HAL_DMA_Init+0x1c8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d036      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a30      	ldr	r2, [pc, #192]	; (8005f0c <HAL_DMA_Init+0x1cc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d031      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a2e      	ldr	r2, [pc, #184]	; (8005f10 <HAL_DMA_Init+0x1d0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d02c      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a2d      	ldr	r2, [pc, #180]	; (8005f14 <HAL_DMA_Init+0x1d4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d027      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a2b      	ldr	r2, [pc, #172]	; (8005f18 <HAL_DMA_Init+0x1d8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d022      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a2a      	ldr	r2, [pc, #168]	; (8005f1c <HAL_DMA_Init+0x1dc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d01d      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a28      	ldr	r2, [pc, #160]	; (8005f20 <HAL_DMA_Init+0x1e0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d018      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a27      	ldr	r2, [pc, #156]	; (8005f24 <HAL_DMA_Init+0x1e4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d013      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a25      	ldr	r2, [pc, #148]	; (8005f28 <HAL_DMA_Init+0x1e8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00e      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a24      	ldr	r2, [pc, #144]	; (8005f2c <HAL_DMA_Init+0x1ec>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d009      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a22      	ldr	r2, [pc, #136]	; (8005f30 <HAL_DMA_Init+0x1f0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d004      	beq.n	8005eb4 <HAL_DMA_Init+0x174>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a21      	ldr	r2, [pc, #132]	; (8005f34 <HAL_DMA_Init+0x1f4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d108      	bne.n	8005ec6 <HAL_DMA_Init+0x186>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0201 	bic.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e007      	b.n	8005ed6 <HAL_DMA_Init+0x196>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ed6:	e02f      	b.n	8005f38 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ed8:	f7fd fe0a 	bl	8003af0 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b05      	cmp	r3, #5
 8005ee4:	d928      	bls.n	8005f38 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2203      	movs	r2, #3
 8005ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e246      	b.n	8006386 <HAL_DMA_Init+0x646>
 8005ef8:	40020010 	.word	0x40020010
 8005efc:	40020028 	.word	0x40020028
 8005f00:	40020040 	.word	0x40020040
 8005f04:	40020058 	.word	0x40020058
 8005f08:	40020070 	.word	0x40020070
 8005f0c:	40020088 	.word	0x40020088
 8005f10:	400200a0 	.word	0x400200a0
 8005f14:	400200b8 	.word	0x400200b8
 8005f18:	40020410 	.word	0x40020410
 8005f1c:	40020428 	.word	0x40020428
 8005f20:	40020440 	.word	0x40020440
 8005f24:	40020458 	.word	0x40020458
 8005f28:	40020470 	.word	0x40020470
 8005f2c:	40020488 	.word	0x40020488
 8005f30:	400204a0 	.word	0x400204a0
 8005f34:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1c8      	bne.n	8005ed8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4b83      	ldr	r3, [pc, #524]	; (8006160 <HAL_DMA_Init+0x420>)
 8005f52:	4013      	ands	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f76:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d107      	bne.n	8005f9c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	4313      	orrs	r3, r2
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005f9c:	4b71      	ldr	r3, [pc, #452]	; (8006164 <HAL_DMA_Init+0x424>)
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	4b71      	ldr	r3, [pc, #452]	; (8006168 <HAL_DMA_Init+0x428>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fa8:	d328      	bcc.n	8005ffc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b28      	cmp	r3, #40	; 0x28
 8005fb0:	d903      	bls.n	8005fba <HAL_DMA_Init+0x27a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b2e      	cmp	r3, #46	; 0x2e
 8005fb8:	d917      	bls.n	8005fea <HAL_DMA_Init+0x2aa>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b3e      	cmp	r3, #62	; 0x3e
 8005fc0:	d903      	bls.n	8005fca <HAL_DMA_Init+0x28a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2b42      	cmp	r3, #66	; 0x42
 8005fc8:	d90f      	bls.n	8005fea <HAL_DMA_Init+0x2aa>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b46      	cmp	r3, #70	; 0x46
 8005fd0:	d903      	bls.n	8005fda <HAL_DMA_Init+0x29a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b48      	cmp	r3, #72	; 0x48
 8005fd8:	d907      	bls.n	8005fea <HAL_DMA_Init+0x2aa>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b4e      	cmp	r3, #78	; 0x4e
 8005fe0:	d905      	bls.n	8005fee <HAL_DMA_Init+0x2ae>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b52      	cmp	r3, #82	; 0x52
 8005fe8:	d801      	bhi.n	8005fee <HAL_DMA_Init+0x2ae>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <HAL_DMA_Init+0x2b0>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ffa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f023 0307 	bic.w	r3, r3, #7
 8006012:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	2b04      	cmp	r3, #4
 8006024:	d117      	bne.n	8006056 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00e      	beq.n	8006056 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f002 fb33 	bl	80086a4 <DMA_CheckFifoParam>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d008      	beq.n	8006056 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2240      	movs	r2, #64	; 0x40
 8006048:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e197      	b.n	8006386 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f002 fa6e 	bl	8008540 <DMA_CalcBaseAndBitshift>
 8006064:	4603      	mov	r3, r0
 8006066:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	223f      	movs	r2, #63	; 0x3f
 8006072:	409a      	lsls	r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	609a      	str	r2, [r3, #8]
 8006078:	e0cd      	b.n	8006216 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a3b      	ldr	r2, [pc, #236]	; (800616c <HAL_DMA_Init+0x42c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d022      	beq.n	80060ca <HAL_DMA_Init+0x38a>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a39      	ldr	r2, [pc, #228]	; (8006170 <HAL_DMA_Init+0x430>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d01d      	beq.n	80060ca <HAL_DMA_Init+0x38a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a38      	ldr	r2, [pc, #224]	; (8006174 <HAL_DMA_Init+0x434>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d018      	beq.n	80060ca <HAL_DMA_Init+0x38a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a36      	ldr	r2, [pc, #216]	; (8006178 <HAL_DMA_Init+0x438>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <HAL_DMA_Init+0x38a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a35      	ldr	r2, [pc, #212]	; (800617c <HAL_DMA_Init+0x43c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00e      	beq.n	80060ca <HAL_DMA_Init+0x38a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a33      	ldr	r2, [pc, #204]	; (8006180 <HAL_DMA_Init+0x440>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_DMA_Init+0x38a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a32      	ldr	r2, [pc, #200]	; (8006184 <HAL_DMA_Init+0x444>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d004      	beq.n	80060ca <HAL_DMA_Init+0x38a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a30      	ldr	r2, [pc, #192]	; (8006188 <HAL_DMA_Init+0x448>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d101      	bne.n	80060ce <HAL_DMA_Init+0x38e>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <HAL_DMA_Init+0x390>
 80060ce:	2300      	movs	r3, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 8097 	beq.w	8006204 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a24      	ldr	r2, [pc, #144]	; (800616c <HAL_DMA_Init+0x42c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d021      	beq.n	8006124 <HAL_DMA_Init+0x3e4>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a22      	ldr	r2, [pc, #136]	; (8006170 <HAL_DMA_Init+0x430>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01c      	beq.n	8006124 <HAL_DMA_Init+0x3e4>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a21      	ldr	r2, [pc, #132]	; (8006174 <HAL_DMA_Init+0x434>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d017      	beq.n	8006124 <HAL_DMA_Init+0x3e4>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1f      	ldr	r2, [pc, #124]	; (8006178 <HAL_DMA_Init+0x438>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d012      	beq.n	8006124 <HAL_DMA_Init+0x3e4>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1e      	ldr	r2, [pc, #120]	; (800617c <HAL_DMA_Init+0x43c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00d      	beq.n	8006124 <HAL_DMA_Init+0x3e4>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1c      	ldr	r2, [pc, #112]	; (8006180 <HAL_DMA_Init+0x440>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d008      	beq.n	8006124 <HAL_DMA_Init+0x3e4>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <HAL_DMA_Init+0x444>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <HAL_DMA_Init+0x3e4>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a19      	ldr	r2, [pc, #100]	; (8006188 <HAL_DMA_Init+0x448>)
 8006122:	4293      	cmp	r3, r2
 8006124:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2202      	movs	r2, #2
 800612a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4b12      	ldr	r3, [pc, #72]	; (800618c <HAL_DMA_Init+0x44c>)
 8006142:	4013      	ands	r3, r2
 8006144:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d020      	beq.n	8006190 <HAL_DMA_Init+0x450>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b80      	cmp	r3, #128	; 0x80
 8006154:	d102      	bne.n	800615c <HAL_DMA_Init+0x41c>
 8006156:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800615a:	e01a      	b.n	8006192 <HAL_DMA_Init+0x452>
 800615c:	2300      	movs	r3, #0
 800615e:	e018      	b.n	8006192 <HAL_DMA_Init+0x452>
 8006160:	fe10803f 	.word	0xfe10803f
 8006164:	5c001000 	.word	0x5c001000
 8006168:	ffff0000 	.word	0xffff0000
 800616c:	58025408 	.word	0x58025408
 8006170:	5802541c 	.word	0x5802541c
 8006174:	58025430 	.word	0x58025430
 8006178:	58025444 	.word	0x58025444
 800617c:	58025458 	.word	0x58025458
 8006180:	5802546c 	.word	0x5802546c
 8006184:	58025480 	.word	0x58025480
 8006188:	58025494 	.word	0x58025494
 800618c:	fffe000f 	.word	0xfffe000f
 8006190:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	68d2      	ldr	r2, [r2, #12]
 8006196:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80061a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	4b6e      	ldr	r3, [pc, #440]	; (8006390 <HAL_DMA_Init+0x650>)
 80061d8:	4413      	add	r3, r2
 80061da:	4a6e      	ldr	r2, [pc, #440]	; (8006394 <HAL_DMA_Init+0x654>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	091b      	lsrs	r3, r3, #4
 80061e2:	009a      	lsls	r2, r3, #2
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f002 f9a9 	bl	8008540 <DMA_CalcBaseAndBitshift>
 80061ee:	4603      	mov	r3, r0
 80061f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	2201      	movs	r2, #1
 80061fc:	409a      	lsls	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	605a      	str	r2, [r3, #4]
 8006202:	e008      	b.n	8006216 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2240      	movs	r2, #64	; 0x40
 8006208:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2203      	movs	r2, #3
 800620e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e0b7      	b.n	8006386 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a5f      	ldr	r2, [pc, #380]	; (8006398 <HAL_DMA_Init+0x658>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d072      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a5d      	ldr	r2, [pc, #372]	; (800639c <HAL_DMA_Init+0x65c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d06d      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a5c      	ldr	r2, [pc, #368]	; (80063a0 <HAL_DMA_Init+0x660>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d068      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a5a      	ldr	r2, [pc, #360]	; (80063a4 <HAL_DMA_Init+0x664>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d063      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a59      	ldr	r2, [pc, #356]	; (80063a8 <HAL_DMA_Init+0x668>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d05e      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a57      	ldr	r2, [pc, #348]	; (80063ac <HAL_DMA_Init+0x66c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d059      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a56      	ldr	r2, [pc, #344]	; (80063b0 <HAL_DMA_Init+0x670>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d054      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a54      	ldr	r2, [pc, #336]	; (80063b4 <HAL_DMA_Init+0x674>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d04f      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a53      	ldr	r2, [pc, #332]	; (80063b8 <HAL_DMA_Init+0x678>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d04a      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a51      	ldr	r2, [pc, #324]	; (80063bc <HAL_DMA_Init+0x67c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d045      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a50      	ldr	r2, [pc, #320]	; (80063c0 <HAL_DMA_Init+0x680>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d040      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a4e      	ldr	r2, [pc, #312]	; (80063c4 <HAL_DMA_Init+0x684>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d03b      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a4d      	ldr	r2, [pc, #308]	; (80063c8 <HAL_DMA_Init+0x688>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d036      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a4b      	ldr	r2, [pc, #300]	; (80063cc <HAL_DMA_Init+0x68c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d031      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a4a      	ldr	r2, [pc, #296]	; (80063d0 <HAL_DMA_Init+0x690>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d02c      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a48      	ldr	r2, [pc, #288]	; (80063d4 <HAL_DMA_Init+0x694>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d027      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a47      	ldr	r2, [pc, #284]	; (80063d8 <HAL_DMA_Init+0x698>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a45      	ldr	r2, [pc, #276]	; (80063dc <HAL_DMA_Init+0x69c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01d      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a44      	ldr	r2, [pc, #272]	; (80063e0 <HAL_DMA_Init+0x6a0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a42      	ldr	r2, [pc, #264]	; (80063e4 <HAL_DMA_Init+0x6a4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a41      	ldr	r2, [pc, #260]	; (80063e8 <HAL_DMA_Init+0x6a8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a3f      	ldr	r2, [pc, #252]	; (80063ec <HAL_DMA_Init+0x6ac>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a3e      	ldr	r2, [pc, #248]	; (80063f0 <HAL_DMA_Init+0x6b0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_DMA_Init+0x5c6>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a3c      	ldr	r2, [pc, #240]	; (80063f4 <HAL_DMA_Init+0x6b4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d101      	bne.n	800630a <HAL_DMA_Init+0x5ca>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <HAL_DMA_Init+0x5cc>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d032      	beq.n	8006376 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f002 fa43 	bl	800879c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b80      	cmp	r3, #128	; 0x80
 800631c:	d102      	bne.n	8006324 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006338:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d010      	beq.n	8006364 <HAL_DMA_Init+0x624>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b08      	cmp	r3, #8
 8006348:	d80c      	bhi.n	8006364 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f002 fac0 	bl	80088d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006360:	605a      	str	r2, [r3, #4]
 8006362:	e008      	b.n	8006376 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	a7fdabf8 	.word	0xa7fdabf8
 8006394:	cccccccd 	.word	0xcccccccd
 8006398:	40020010 	.word	0x40020010
 800639c:	40020028 	.word	0x40020028
 80063a0:	40020040 	.word	0x40020040
 80063a4:	40020058 	.word	0x40020058
 80063a8:	40020070 	.word	0x40020070
 80063ac:	40020088 	.word	0x40020088
 80063b0:	400200a0 	.word	0x400200a0
 80063b4:	400200b8 	.word	0x400200b8
 80063b8:	40020410 	.word	0x40020410
 80063bc:	40020428 	.word	0x40020428
 80063c0:	40020440 	.word	0x40020440
 80063c4:	40020458 	.word	0x40020458
 80063c8:	40020470 	.word	0x40020470
 80063cc:	40020488 	.word	0x40020488
 80063d0:	400204a0 	.word	0x400204a0
 80063d4:	400204b8 	.word	0x400204b8
 80063d8:	58025408 	.word	0x58025408
 80063dc:	5802541c 	.word	0x5802541c
 80063e0:	58025430 	.word	0x58025430
 80063e4:	58025444 	.word	0x58025444
 80063e8:	58025458 	.word	0x58025458
 80063ec:	5802546c 	.word	0x5802546c
 80063f0:	58025480 	.word	0x58025480
 80063f4:	58025494 	.word	0x58025494

080063f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e226      	b.n	8006862 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <HAL_DMA_Start_IT+0x2a>
 800641e:	2302      	movs	r3, #2
 8006420:	e21f      	b.n	8006862 <HAL_DMA_Start_IT+0x46a>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b01      	cmp	r3, #1
 8006434:	f040 820a 	bne.w	800684c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a68      	ldr	r2, [pc, #416]	; (80065ec <HAL_DMA_Start_IT+0x1f4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d04a      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a66      	ldr	r2, [pc, #408]	; (80065f0 <HAL_DMA_Start_IT+0x1f8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d045      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a65      	ldr	r2, [pc, #404]	; (80065f4 <HAL_DMA_Start_IT+0x1fc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d040      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a63      	ldr	r2, [pc, #396]	; (80065f8 <HAL_DMA_Start_IT+0x200>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d03b      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a62      	ldr	r2, [pc, #392]	; (80065fc <HAL_DMA_Start_IT+0x204>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d036      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a60      	ldr	r2, [pc, #384]	; (8006600 <HAL_DMA_Start_IT+0x208>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d031      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a5f      	ldr	r2, [pc, #380]	; (8006604 <HAL_DMA_Start_IT+0x20c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d02c      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a5d      	ldr	r2, [pc, #372]	; (8006608 <HAL_DMA_Start_IT+0x210>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d027      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a5c      	ldr	r2, [pc, #368]	; (800660c <HAL_DMA_Start_IT+0x214>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d022      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a5a      	ldr	r2, [pc, #360]	; (8006610 <HAL_DMA_Start_IT+0x218>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d01d      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a59      	ldr	r2, [pc, #356]	; (8006614 <HAL_DMA_Start_IT+0x21c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d018      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a57      	ldr	r2, [pc, #348]	; (8006618 <HAL_DMA_Start_IT+0x220>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d013      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a56      	ldr	r2, [pc, #344]	; (800661c <HAL_DMA_Start_IT+0x224>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00e      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a54      	ldr	r2, [pc, #336]	; (8006620 <HAL_DMA_Start_IT+0x228>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d009      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a53      	ldr	r2, [pc, #332]	; (8006624 <HAL_DMA_Start_IT+0x22c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d004      	beq.n	80064e6 <HAL_DMA_Start_IT+0xee>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a51      	ldr	r2, [pc, #324]	; (8006628 <HAL_DMA_Start_IT+0x230>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d108      	bne.n	80064f8 <HAL_DMA_Start_IT+0x100>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0201 	bic.w	r2, r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	e007      	b.n	8006508 <HAL_DMA_Start_IT+0x110>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f001 fe6a 	bl	80081e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a34      	ldr	r2, [pc, #208]	; (80065ec <HAL_DMA_Start_IT+0x1f4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d04a      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a33      	ldr	r2, [pc, #204]	; (80065f0 <HAL_DMA_Start_IT+0x1f8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d045      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a31      	ldr	r2, [pc, #196]	; (80065f4 <HAL_DMA_Start_IT+0x1fc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d040      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a30      	ldr	r2, [pc, #192]	; (80065f8 <HAL_DMA_Start_IT+0x200>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d03b      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a2e      	ldr	r2, [pc, #184]	; (80065fc <HAL_DMA_Start_IT+0x204>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d036      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a2d      	ldr	r2, [pc, #180]	; (8006600 <HAL_DMA_Start_IT+0x208>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d031      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a2b      	ldr	r2, [pc, #172]	; (8006604 <HAL_DMA_Start_IT+0x20c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d02c      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2a      	ldr	r2, [pc, #168]	; (8006608 <HAL_DMA_Start_IT+0x210>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d027      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a28      	ldr	r2, [pc, #160]	; (800660c <HAL_DMA_Start_IT+0x214>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d022      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a27      	ldr	r2, [pc, #156]	; (8006610 <HAL_DMA_Start_IT+0x218>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d01d      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a25      	ldr	r2, [pc, #148]	; (8006614 <HAL_DMA_Start_IT+0x21c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d018      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a24      	ldr	r2, [pc, #144]	; (8006618 <HAL_DMA_Start_IT+0x220>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a22      	ldr	r2, [pc, #136]	; (800661c <HAL_DMA_Start_IT+0x224>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00e      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a21      	ldr	r2, [pc, #132]	; (8006620 <HAL_DMA_Start_IT+0x228>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d009      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <HAL_DMA_Start_IT+0x22c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_DMA_Start_IT+0x1bc>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <HAL_DMA_Start_IT+0x230>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d101      	bne.n	80065b8 <HAL_DMA_Start_IT+0x1c0>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <HAL_DMA_Start_IT+0x1c2>
 80065b8:	2300      	movs	r3, #0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d036      	beq.n	800662c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f023 021e 	bic.w	r2, r3, #30
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0216 	orr.w	r2, r2, #22
 80065d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d03e      	beq.n	8006658 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0208 	orr.w	r2, r2, #8
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e035      	b.n	8006658 <HAL_DMA_Start_IT+0x260>
 80065ec:	40020010 	.word	0x40020010
 80065f0:	40020028 	.word	0x40020028
 80065f4:	40020040 	.word	0x40020040
 80065f8:	40020058 	.word	0x40020058
 80065fc:	40020070 	.word	0x40020070
 8006600:	40020088 	.word	0x40020088
 8006604:	400200a0 	.word	0x400200a0
 8006608:	400200b8 	.word	0x400200b8
 800660c:	40020410 	.word	0x40020410
 8006610:	40020428 	.word	0x40020428
 8006614:	40020440 	.word	0x40020440
 8006618:	40020458 	.word	0x40020458
 800661c:	40020470 	.word	0x40020470
 8006620:	40020488 	.word	0x40020488
 8006624:	400204a0 	.word	0x400204a0
 8006628:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f023 020e 	bic.w	r2, r3, #14
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 020a 	orr.w	r2, r2, #10
 800663e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0204 	orr.w	r2, r2, #4
 8006656:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a83      	ldr	r2, [pc, #524]	; (800686c <HAL_DMA_Start_IT+0x474>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d072      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a82      	ldr	r2, [pc, #520]	; (8006870 <HAL_DMA_Start_IT+0x478>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d06d      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a80      	ldr	r2, [pc, #512]	; (8006874 <HAL_DMA_Start_IT+0x47c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d068      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a7f      	ldr	r2, [pc, #508]	; (8006878 <HAL_DMA_Start_IT+0x480>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d063      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a7d      	ldr	r2, [pc, #500]	; (800687c <HAL_DMA_Start_IT+0x484>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d05e      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a7c      	ldr	r2, [pc, #496]	; (8006880 <HAL_DMA_Start_IT+0x488>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d059      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a7a      	ldr	r2, [pc, #488]	; (8006884 <HAL_DMA_Start_IT+0x48c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d054      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a79      	ldr	r2, [pc, #484]	; (8006888 <HAL_DMA_Start_IT+0x490>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d04f      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a77      	ldr	r2, [pc, #476]	; (800688c <HAL_DMA_Start_IT+0x494>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d04a      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a76      	ldr	r2, [pc, #472]	; (8006890 <HAL_DMA_Start_IT+0x498>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d045      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a74      	ldr	r2, [pc, #464]	; (8006894 <HAL_DMA_Start_IT+0x49c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d040      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a73      	ldr	r2, [pc, #460]	; (8006898 <HAL_DMA_Start_IT+0x4a0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d03b      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a71      	ldr	r2, [pc, #452]	; (800689c <HAL_DMA_Start_IT+0x4a4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d036      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a70      	ldr	r2, [pc, #448]	; (80068a0 <HAL_DMA_Start_IT+0x4a8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d031      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a6e      	ldr	r2, [pc, #440]	; (80068a4 <HAL_DMA_Start_IT+0x4ac>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d02c      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a6d      	ldr	r2, [pc, #436]	; (80068a8 <HAL_DMA_Start_IT+0x4b0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d027      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a6b      	ldr	r2, [pc, #428]	; (80068ac <HAL_DMA_Start_IT+0x4b4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d022      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a6a      	ldr	r2, [pc, #424]	; (80068b0 <HAL_DMA_Start_IT+0x4b8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d01d      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a68      	ldr	r2, [pc, #416]	; (80068b4 <HAL_DMA_Start_IT+0x4bc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d018      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a67      	ldr	r2, [pc, #412]	; (80068b8 <HAL_DMA_Start_IT+0x4c0>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a65      	ldr	r2, [pc, #404]	; (80068bc <HAL_DMA_Start_IT+0x4c4>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00e      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a64      	ldr	r2, [pc, #400]	; (80068c0 <HAL_DMA_Start_IT+0x4c8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d009      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a62      	ldr	r2, [pc, #392]	; (80068c4 <HAL_DMA_Start_IT+0x4cc>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <HAL_DMA_Start_IT+0x350>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a61      	ldr	r2, [pc, #388]	; (80068c8 <HAL_DMA_Start_IT+0x4d0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d101      	bne.n	800674c <HAL_DMA_Start_IT+0x354>
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <HAL_DMA_Start_IT+0x356>
 800674c:	2300      	movs	r3, #0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01a      	beq.n	8006788 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800676e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006786:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a37      	ldr	r2, [pc, #220]	; (800686c <HAL_DMA_Start_IT+0x474>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d04a      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a36      	ldr	r2, [pc, #216]	; (8006870 <HAL_DMA_Start_IT+0x478>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d045      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a34      	ldr	r2, [pc, #208]	; (8006874 <HAL_DMA_Start_IT+0x47c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d040      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a33      	ldr	r2, [pc, #204]	; (8006878 <HAL_DMA_Start_IT+0x480>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d03b      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a31      	ldr	r2, [pc, #196]	; (800687c <HAL_DMA_Start_IT+0x484>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d036      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a30      	ldr	r2, [pc, #192]	; (8006880 <HAL_DMA_Start_IT+0x488>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d031      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a2e      	ldr	r2, [pc, #184]	; (8006884 <HAL_DMA_Start_IT+0x48c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d02c      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a2d      	ldr	r2, [pc, #180]	; (8006888 <HAL_DMA_Start_IT+0x490>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d027      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a2b      	ldr	r2, [pc, #172]	; (800688c <HAL_DMA_Start_IT+0x494>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d022      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a2a      	ldr	r2, [pc, #168]	; (8006890 <HAL_DMA_Start_IT+0x498>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d01d      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a28      	ldr	r2, [pc, #160]	; (8006894 <HAL_DMA_Start_IT+0x49c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d018      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a27      	ldr	r2, [pc, #156]	; (8006898 <HAL_DMA_Start_IT+0x4a0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d013      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a25      	ldr	r2, [pc, #148]	; (800689c <HAL_DMA_Start_IT+0x4a4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00e      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a24      	ldr	r2, [pc, #144]	; (80068a0 <HAL_DMA_Start_IT+0x4a8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d009      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a22      	ldr	r2, [pc, #136]	; (80068a4 <HAL_DMA_Start_IT+0x4ac>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d004      	beq.n	8006828 <HAL_DMA_Start_IT+0x430>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a21      	ldr	r2, [pc, #132]	; (80068a8 <HAL_DMA_Start_IT+0x4b0>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d108      	bne.n	800683a <HAL_DMA_Start_IT+0x442>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	e012      	b.n	8006860 <HAL_DMA_Start_IT+0x468>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0201 	orr.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e009      	b.n	8006860 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006852:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006860:	7dfb      	ldrb	r3, [r7, #23]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40020010 	.word	0x40020010
 8006870:	40020028 	.word	0x40020028
 8006874:	40020040 	.word	0x40020040
 8006878:	40020058 	.word	0x40020058
 800687c:	40020070 	.word	0x40020070
 8006880:	40020088 	.word	0x40020088
 8006884:	400200a0 	.word	0x400200a0
 8006888:	400200b8 	.word	0x400200b8
 800688c:	40020410 	.word	0x40020410
 8006890:	40020428 	.word	0x40020428
 8006894:	40020440 	.word	0x40020440
 8006898:	40020458 	.word	0x40020458
 800689c:	40020470 	.word	0x40020470
 80068a0:	40020488 	.word	0x40020488
 80068a4:	400204a0 	.word	0x400204a0
 80068a8:	400204b8 	.word	0x400204b8
 80068ac:	58025408 	.word	0x58025408
 80068b0:	5802541c 	.word	0x5802541c
 80068b4:	58025430 	.word	0x58025430
 80068b8:	58025444 	.word	0x58025444
 80068bc:	58025458 	.word	0x58025458
 80068c0:	5802546c 	.word	0x5802546c
 80068c4:	58025480 	.word	0x58025480
 80068c8:	58025494 	.word	0x58025494

080068cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80068d4:	f7fd f90c 	bl	8003af0 <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e2dc      	b.n	8006e9e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d008      	beq.n	8006902 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2280      	movs	r2, #128	; 0x80
 80068f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e2cd      	b.n	8006e9e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a76      	ldr	r2, [pc, #472]	; (8006ae0 <HAL_DMA_Abort+0x214>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d04a      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a74      	ldr	r2, [pc, #464]	; (8006ae4 <HAL_DMA_Abort+0x218>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d045      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a73      	ldr	r2, [pc, #460]	; (8006ae8 <HAL_DMA_Abort+0x21c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d040      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a71      	ldr	r2, [pc, #452]	; (8006aec <HAL_DMA_Abort+0x220>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d03b      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a70      	ldr	r2, [pc, #448]	; (8006af0 <HAL_DMA_Abort+0x224>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d036      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a6e      	ldr	r2, [pc, #440]	; (8006af4 <HAL_DMA_Abort+0x228>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d031      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a6d      	ldr	r2, [pc, #436]	; (8006af8 <HAL_DMA_Abort+0x22c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d02c      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a6b      	ldr	r2, [pc, #428]	; (8006afc <HAL_DMA_Abort+0x230>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d027      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a6a      	ldr	r2, [pc, #424]	; (8006b00 <HAL_DMA_Abort+0x234>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d022      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a68      	ldr	r2, [pc, #416]	; (8006b04 <HAL_DMA_Abort+0x238>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01d      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a67      	ldr	r2, [pc, #412]	; (8006b08 <HAL_DMA_Abort+0x23c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d018      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a65      	ldr	r2, [pc, #404]	; (8006b0c <HAL_DMA_Abort+0x240>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d013      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a64      	ldr	r2, [pc, #400]	; (8006b10 <HAL_DMA_Abort+0x244>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00e      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a62      	ldr	r2, [pc, #392]	; (8006b14 <HAL_DMA_Abort+0x248>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d009      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a61      	ldr	r2, [pc, #388]	; (8006b18 <HAL_DMA_Abort+0x24c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d004      	beq.n	80069a2 <HAL_DMA_Abort+0xd6>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a5f      	ldr	r2, [pc, #380]	; (8006b1c <HAL_DMA_Abort+0x250>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d101      	bne.n	80069a6 <HAL_DMA_Abort+0xda>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <HAL_DMA_Abort+0xdc>
 80069a6:	2300      	movs	r3, #0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d013      	beq.n	80069d4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 021e 	bic.w	r2, r2, #30
 80069ba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695a      	ldr	r2, [r3, #20]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	e00a      	b.n	80069ea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 020e 	bic.w	r2, r2, #14
 80069e2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a3c      	ldr	r2, [pc, #240]	; (8006ae0 <HAL_DMA_Abort+0x214>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d072      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a3a      	ldr	r2, [pc, #232]	; (8006ae4 <HAL_DMA_Abort+0x218>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d06d      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a39      	ldr	r2, [pc, #228]	; (8006ae8 <HAL_DMA_Abort+0x21c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d068      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a37      	ldr	r2, [pc, #220]	; (8006aec <HAL_DMA_Abort+0x220>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d063      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a36      	ldr	r2, [pc, #216]	; (8006af0 <HAL_DMA_Abort+0x224>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d05e      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a34      	ldr	r2, [pc, #208]	; (8006af4 <HAL_DMA_Abort+0x228>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d059      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a33      	ldr	r2, [pc, #204]	; (8006af8 <HAL_DMA_Abort+0x22c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d054      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a31      	ldr	r2, [pc, #196]	; (8006afc <HAL_DMA_Abort+0x230>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d04f      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a30      	ldr	r2, [pc, #192]	; (8006b00 <HAL_DMA_Abort+0x234>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d04a      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a2e      	ldr	r2, [pc, #184]	; (8006b04 <HAL_DMA_Abort+0x238>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d045      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a2d      	ldr	r2, [pc, #180]	; (8006b08 <HAL_DMA_Abort+0x23c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d040      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a2b      	ldr	r2, [pc, #172]	; (8006b0c <HAL_DMA_Abort+0x240>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d03b      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a2a      	ldr	r2, [pc, #168]	; (8006b10 <HAL_DMA_Abort+0x244>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d036      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a28      	ldr	r2, [pc, #160]	; (8006b14 <HAL_DMA_Abort+0x248>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d031      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a27      	ldr	r2, [pc, #156]	; (8006b18 <HAL_DMA_Abort+0x24c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d02c      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a25      	ldr	r2, [pc, #148]	; (8006b1c <HAL_DMA_Abort+0x250>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d027      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a24      	ldr	r2, [pc, #144]	; (8006b20 <HAL_DMA_Abort+0x254>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d022      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a22      	ldr	r2, [pc, #136]	; (8006b24 <HAL_DMA_Abort+0x258>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d01d      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a21      	ldr	r2, [pc, #132]	; (8006b28 <HAL_DMA_Abort+0x25c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d018      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a1f      	ldr	r2, [pc, #124]	; (8006b2c <HAL_DMA_Abort+0x260>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d013      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1e      	ldr	r2, [pc, #120]	; (8006b30 <HAL_DMA_Abort+0x264>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00e      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1c      	ldr	r2, [pc, #112]	; (8006b34 <HAL_DMA_Abort+0x268>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1b      	ldr	r2, [pc, #108]	; (8006b38 <HAL_DMA_Abort+0x26c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_DMA_Abort+0x20e>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a19      	ldr	r2, [pc, #100]	; (8006b3c <HAL_DMA_Abort+0x270>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d132      	bne.n	8006b40 <HAL_DMA_Abort+0x274>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e031      	b.n	8006b42 <HAL_DMA_Abort+0x276>
 8006ade:	bf00      	nop
 8006ae0:	40020010 	.word	0x40020010
 8006ae4:	40020028 	.word	0x40020028
 8006ae8:	40020040 	.word	0x40020040
 8006aec:	40020058 	.word	0x40020058
 8006af0:	40020070 	.word	0x40020070
 8006af4:	40020088 	.word	0x40020088
 8006af8:	400200a0 	.word	0x400200a0
 8006afc:	400200b8 	.word	0x400200b8
 8006b00:	40020410 	.word	0x40020410
 8006b04:	40020428 	.word	0x40020428
 8006b08:	40020440 	.word	0x40020440
 8006b0c:	40020458 	.word	0x40020458
 8006b10:	40020470 	.word	0x40020470
 8006b14:	40020488 	.word	0x40020488
 8006b18:	400204a0 	.word	0x400204a0
 8006b1c:	400204b8 	.word	0x400204b8
 8006b20:	58025408 	.word	0x58025408
 8006b24:	5802541c 	.word	0x5802541c
 8006b28:	58025430 	.word	0x58025430
 8006b2c:	58025444 	.word	0x58025444
 8006b30:	58025458 	.word	0x58025458
 8006b34:	5802546c 	.word	0x5802546c
 8006b38:	58025480 	.word	0x58025480
 8006b3c:	58025494 	.word	0x58025494
 8006b40:	2300      	movs	r3, #0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b54:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a6d      	ldr	r2, [pc, #436]	; (8006d10 <HAL_DMA_Abort+0x444>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d04a      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a6b      	ldr	r2, [pc, #428]	; (8006d14 <HAL_DMA_Abort+0x448>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d045      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a6a      	ldr	r2, [pc, #424]	; (8006d18 <HAL_DMA_Abort+0x44c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d040      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a68      	ldr	r2, [pc, #416]	; (8006d1c <HAL_DMA_Abort+0x450>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d03b      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a67      	ldr	r2, [pc, #412]	; (8006d20 <HAL_DMA_Abort+0x454>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d036      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a65      	ldr	r2, [pc, #404]	; (8006d24 <HAL_DMA_Abort+0x458>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d031      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a64      	ldr	r2, [pc, #400]	; (8006d28 <HAL_DMA_Abort+0x45c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d02c      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a62      	ldr	r2, [pc, #392]	; (8006d2c <HAL_DMA_Abort+0x460>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d027      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a61      	ldr	r2, [pc, #388]	; (8006d30 <HAL_DMA_Abort+0x464>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d022      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a5f      	ldr	r2, [pc, #380]	; (8006d34 <HAL_DMA_Abort+0x468>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d01d      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a5e      	ldr	r2, [pc, #376]	; (8006d38 <HAL_DMA_Abort+0x46c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d018      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a5c      	ldr	r2, [pc, #368]	; (8006d3c <HAL_DMA_Abort+0x470>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d013      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a5b      	ldr	r2, [pc, #364]	; (8006d40 <HAL_DMA_Abort+0x474>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d00e      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a59      	ldr	r2, [pc, #356]	; (8006d44 <HAL_DMA_Abort+0x478>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d009      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a58      	ldr	r2, [pc, #352]	; (8006d48 <HAL_DMA_Abort+0x47c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d004      	beq.n	8006bf6 <HAL_DMA_Abort+0x32a>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a56      	ldr	r2, [pc, #344]	; (8006d4c <HAL_DMA_Abort+0x480>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d108      	bne.n	8006c08 <HAL_DMA_Abort+0x33c>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0201 	bic.w	r2, r2, #1
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	e007      	b.n	8006c18 <HAL_DMA_Abort+0x34c>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0201 	bic.w	r2, r2, #1
 8006c16:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c18:	e013      	b.n	8006c42 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c1a:	f7fc ff69 	bl	8003af0 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b05      	cmp	r3, #5
 8006c26:	d90c      	bls.n	8006c42 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2203      	movs	r2, #3
 8006c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e12d      	b.n	8006e9e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e5      	bne.n	8006c1a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a2f      	ldr	r2, [pc, #188]	; (8006d10 <HAL_DMA_Abort+0x444>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d04a      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a2d      	ldr	r2, [pc, #180]	; (8006d14 <HAL_DMA_Abort+0x448>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d045      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a2c      	ldr	r2, [pc, #176]	; (8006d18 <HAL_DMA_Abort+0x44c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d040      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a2a      	ldr	r2, [pc, #168]	; (8006d1c <HAL_DMA_Abort+0x450>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d03b      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a29      	ldr	r2, [pc, #164]	; (8006d20 <HAL_DMA_Abort+0x454>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d036      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a27      	ldr	r2, [pc, #156]	; (8006d24 <HAL_DMA_Abort+0x458>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d031      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a26      	ldr	r2, [pc, #152]	; (8006d28 <HAL_DMA_Abort+0x45c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d02c      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a24      	ldr	r2, [pc, #144]	; (8006d2c <HAL_DMA_Abort+0x460>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d027      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a23      	ldr	r2, [pc, #140]	; (8006d30 <HAL_DMA_Abort+0x464>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d022      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <HAL_DMA_Abort+0x468>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d01d      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a20      	ldr	r2, [pc, #128]	; (8006d38 <HAL_DMA_Abort+0x46c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d018      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1e      	ldr	r2, [pc, #120]	; (8006d3c <HAL_DMA_Abort+0x470>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d013      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1d      	ldr	r2, [pc, #116]	; (8006d40 <HAL_DMA_Abort+0x474>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00e      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1b      	ldr	r2, [pc, #108]	; (8006d44 <HAL_DMA_Abort+0x478>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d009      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1a      	ldr	r2, [pc, #104]	; (8006d48 <HAL_DMA_Abort+0x47c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d004      	beq.n	8006cee <HAL_DMA_Abort+0x422>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <HAL_DMA_Abort+0x480>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d101      	bne.n	8006cf2 <HAL_DMA_Abort+0x426>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <HAL_DMA_Abort+0x428>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d02b      	beq.n	8006d50 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cfc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	223f      	movs	r2, #63	; 0x3f
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	609a      	str	r2, [r3, #8]
 8006d0e:	e02a      	b.n	8006d66 <HAL_DMA_Abort+0x49a>
 8006d10:	40020010 	.word	0x40020010
 8006d14:	40020028 	.word	0x40020028
 8006d18:	40020040 	.word	0x40020040
 8006d1c:	40020058 	.word	0x40020058
 8006d20:	40020070 	.word	0x40020070
 8006d24:	40020088 	.word	0x40020088
 8006d28:	400200a0 	.word	0x400200a0
 8006d2c:	400200b8 	.word	0x400200b8
 8006d30:	40020410 	.word	0x40020410
 8006d34:	40020428 	.word	0x40020428
 8006d38:	40020440 	.word	0x40020440
 8006d3c:	40020458 	.word	0x40020458
 8006d40:	40020470 	.word	0x40020470
 8006d44:	40020488 	.word	0x40020488
 8006d48:	400204a0 	.word	0x400204a0
 8006d4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d54:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2201      	movs	r2, #1
 8006d60:	409a      	lsls	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a4f      	ldr	r2, [pc, #316]	; (8006ea8 <HAL_DMA_Abort+0x5dc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d072      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a4d      	ldr	r2, [pc, #308]	; (8006eac <HAL_DMA_Abort+0x5e0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d06d      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a4c      	ldr	r2, [pc, #304]	; (8006eb0 <HAL_DMA_Abort+0x5e4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d068      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a4a      	ldr	r2, [pc, #296]	; (8006eb4 <HAL_DMA_Abort+0x5e8>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d063      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a49      	ldr	r2, [pc, #292]	; (8006eb8 <HAL_DMA_Abort+0x5ec>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d05e      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a47      	ldr	r2, [pc, #284]	; (8006ebc <HAL_DMA_Abort+0x5f0>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d059      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a46      	ldr	r2, [pc, #280]	; (8006ec0 <HAL_DMA_Abort+0x5f4>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d054      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a44      	ldr	r2, [pc, #272]	; (8006ec4 <HAL_DMA_Abort+0x5f8>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d04f      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a43      	ldr	r2, [pc, #268]	; (8006ec8 <HAL_DMA_Abort+0x5fc>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d04a      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a41      	ldr	r2, [pc, #260]	; (8006ecc <HAL_DMA_Abort+0x600>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d045      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a40      	ldr	r2, [pc, #256]	; (8006ed0 <HAL_DMA_Abort+0x604>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d040      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a3e      	ldr	r2, [pc, #248]	; (8006ed4 <HAL_DMA_Abort+0x608>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d03b      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a3d      	ldr	r2, [pc, #244]	; (8006ed8 <HAL_DMA_Abort+0x60c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d036      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a3b      	ldr	r2, [pc, #236]	; (8006edc <HAL_DMA_Abort+0x610>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d031      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a3a      	ldr	r2, [pc, #232]	; (8006ee0 <HAL_DMA_Abort+0x614>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d02c      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a38      	ldr	r2, [pc, #224]	; (8006ee4 <HAL_DMA_Abort+0x618>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d027      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a37      	ldr	r2, [pc, #220]	; (8006ee8 <HAL_DMA_Abort+0x61c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d022      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a35      	ldr	r2, [pc, #212]	; (8006eec <HAL_DMA_Abort+0x620>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d01d      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a34      	ldr	r2, [pc, #208]	; (8006ef0 <HAL_DMA_Abort+0x624>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d018      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a32      	ldr	r2, [pc, #200]	; (8006ef4 <HAL_DMA_Abort+0x628>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a31      	ldr	r2, [pc, #196]	; (8006ef8 <HAL_DMA_Abort+0x62c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2f      	ldr	r2, [pc, #188]	; (8006efc <HAL_DMA_Abort+0x630>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a2e      	ldr	r2, [pc, #184]	; (8006f00 <HAL_DMA_Abort+0x634>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_DMA_Abort+0x58a>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a2c      	ldr	r2, [pc, #176]	; (8006f04 <HAL_DMA_Abort+0x638>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d101      	bne.n	8006e5a <HAL_DMA_Abort+0x58e>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <HAL_DMA_Abort+0x590>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d015      	beq.n	8006e8c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e68:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00c      	beq.n	8006e8c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e80:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e8a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40020010 	.word	0x40020010
 8006eac:	40020028 	.word	0x40020028
 8006eb0:	40020040 	.word	0x40020040
 8006eb4:	40020058 	.word	0x40020058
 8006eb8:	40020070 	.word	0x40020070
 8006ebc:	40020088 	.word	0x40020088
 8006ec0:	400200a0 	.word	0x400200a0
 8006ec4:	400200b8 	.word	0x400200b8
 8006ec8:	40020410 	.word	0x40020410
 8006ecc:	40020428 	.word	0x40020428
 8006ed0:	40020440 	.word	0x40020440
 8006ed4:	40020458 	.word	0x40020458
 8006ed8:	40020470 	.word	0x40020470
 8006edc:	40020488 	.word	0x40020488
 8006ee0:	400204a0 	.word	0x400204a0
 8006ee4:	400204b8 	.word	0x400204b8
 8006ee8:	58025408 	.word	0x58025408
 8006eec:	5802541c 	.word	0x5802541c
 8006ef0:	58025430 	.word	0x58025430
 8006ef4:	58025444 	.word	0x58025444
 8006ef8:	58025458 	.word	0x58025458
 8006efc:	5802546c 	.word	0x5802546c
 8006f00:	58025480 	.word	0x58025480
 8006f04:	58025494 	.word	0x58025494

08006f08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e237      	b.n	800738a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d004      	beq.n	8006f30 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2280      	movs	r2, #128	; 0x80
 8006f2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e22c      	b.n	800738a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a5c      	ldr	r2, [pc, #368]	; (80070a8 <HAL_DMA_Abort_IT+0x1a0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d04a      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a5b      	ldr	r2, [pc, #364]	; (80070ac <HAL_DMA_Abort_IT+0x1a4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d045      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a59      	ldr	r2, [pc, #356]	; (80070b0 <HAL_DMA_Abort_IT+0x1a8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d040      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a58      	ldr	r2, [pc, #352]	; (80070b4 <HAL_DMA_Abort_IT+0x1ac>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d03b      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a56      	ldr	r2, [pc, #344]	; (80070b8 <HAL_DMA_Abort_IT+0x1b0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d036      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a55      	ldr	r2, [pc, #340]	; (80070bc <HAL_DMA_Abort_IT+0x1b4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d031      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a53      	ldr	r2, [pc, #332]	; (80070c0 <HAL_DMA_Abort_IT+0x1b8>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d02c      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a52      	ldr	r2, [pc, #328]	; (80070c4 <HAL_DMA_Abort_IT+0x1bc>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d027      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a50      	ldr	r2, [pc, #320]	; (80070c8 <HAL_DMA_Abort_IT+0x1c0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d022      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a4f      	ldr	r2, [pc, #316]	; (80070cc <HAL_DMA_Abort_IT+0x1c4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d01d      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a4d      	ldr	r2, [pc, #308]	; (80070d0 <HAL_DMA_Abort_IT+0x1c8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d018      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a4c      	ldr	r2, [pc, #304]	; (80070d4 <HAL_DMA_Abort_IT+0x1cc>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d013      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a4a      	ldr	r2, [pc, #296]	; (80070d8 <HAL_DMA_Abort_IT+0x1d0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00e      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a49      	ldr	r2, [pc, #292]	; (80070dc <HAL_DMA_Abort_IT+0x1d4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d009      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a47      	ldr	r2, [pc, #284]	; (80070e0 <HAL_DMA_Abort_IT+0x1d8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0xc8>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a46      	ldr	r2, [pc, #280]	; (80070e4 <HAL_DMA_Abort_IT+0x1dc>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d101      	bne.n	8006fd4 <HAL_DMA_Abort_IT+0xcc>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e000      	b.n	8006fd6 <HAL_DMA_Abort_IT+0xce>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 8086 	beq.w	80070e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2204      	movs	r2, #4
 8006fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a2f      	ldr	r2, [pc, #188]	; (80070a8 <HAL_DMA_Abort_IT+0x1a0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d04a      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a2e      	ldr	r2, [pc, #184]	; (80070ac <HAL_DMA_Abort_IT+0x1a4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d045      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a2c      	ldr	r2, [pc, #176]	; (80070b0 <HAL_DMA_Abort_IT+0x1a8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d040      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a2b      	ldr	r2, [pc, #172]	; (80070b4 <HAL_DMA_Abort_IT+0x1ac>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d03b      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a29      	ldr	r2, [pc, #164]	; (80070b8 <HAL_DMA_Abort_IT+0x1b0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d036      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a28      	ldr	r2, [pc, #160]	; (80070bc <HAL_DMA_Abort_IT+0x1b4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d031      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a26      	ldr	r2, [pc, #152]	; (80070c0 <HAL_DMA_Abort_IT+0x1b8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d02c      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a25      	ldr	r2, [pc, #148]	; (80070c4 <HAL_DMA_Abort_IT+0x1bc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d027      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a23      	ldr	r2, [pc, #140]	; (80070c8 <HAL_DMA_Abort_IT+0x1c0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d022      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a22      	ldr	r2, [pc, #136]	; (80070cc <HAL_DMA_Abort_IT+0x1c4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d01d      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a20      	ldr	r2, [pc, #128]	; (80070d0 <HAL_DMA_Abort_IT+0x1c8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d018      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a1f      	ldr	r2, [pc, #124]	; (80070d4 <HAL_DMA_Abort_IT+0x1cc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d013      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a1d      	ldr	r2, [pc, #116]	; (80070d8 <HAL_DMA_Abort_IT+0x1d0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00e      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1c      	ldr	r2, [pc, #112]	; (80070dc <HAL_DMA_Abort_IT+0x1d4>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d009      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1a      	ldr	r2, [pc, #104]	; (80070e0 <HAL_DMA_Abort_IT+0x1d8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d004      	beq.n	8007084 <HAL_DMA_Abort_IT+0x17c>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <HAL_DMA_Abort_IT+0x1dc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d108      	bne.n	8007096 <HAL_DMA_Abort_IT+0x18e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0201 	bic.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	e178      	b.n	8007388 <HAL_DMA_Abort_IT+0x480>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	e16f      	b.n	8007388 <HAL_DMA_Abort_IT+0x480>
 80070a8:	40020010 	.word	0x40020010
 80070ac:	40020028 	.word	0x40020028
 80070b0:	40020040 	.word	0x40020040
 80070b4:	40020058 	.word	0x40020058
 80070b8:	40020070 	.word	0x40020070
 80070bc:	40020088 	.word	0x40020088
 80070c0:	400200a0 	.word	0x400200a0
 80070c4:	400200b8 	.word	0x400200b8
 80070c8:	40020410 	.word	0x40020410
 80070cc:	40020428 	.word	0x40020428
 80070d0:	40020440 	.word	0x40020440
 80070d4:	40020458 	.word	0x40020458
 80070d8:	40020470 	.word	0x40020470
 80070dc:	40020488 	.word	0x40020488
 80070e0:	400204a0 	.word	0x400204a0
 80070e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 020e 	bic.w	r2, r2, #14
 80070f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a6c      	ldr	r2, [pc, #432]	; (80072b0 <HAL_DMA_Abort_IT+0x3a8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d04a      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a6b      	ldr	r2, [pc, #428]	; (80072b4 <HAL_DMA_Abort_IT+0x3ac>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d045      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a69      	ldr	r2, [pc, #420]	; (80072b8 <HAL_DMA_Abort_IT+0x3b0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d040      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a68      	ldr	r2, [pc, #416]	; (80072bc <HAL_DMA_Abort_IT+0x3b4>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d03b      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a66      	ldr	r2, [pc, #408]	; (80072c0 <HAL_DMA_Abort_IT+0x3b8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d036      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a65      	ldr	r2, [pc, #404]	; (80072c4 <HAL_DMA_Abort_IT+0x3bc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d031      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a63      	ldr	r2, [pc, #396]	; (80072c8 <HAL_DMA_Abort_IT+0x3c0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d02c      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a62      	ldr	r2, [pc, #392]	; (80072cc <HAL_DMA_Abort_IT+0x3c4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d027      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a60      	ldr	r2, [pc, #384]	; (80072d0 <HAL_DMA_Abort_IT+0x3c8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d022      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a5f      	ldr	r2, [pc, #380]	; (80072d4 <HAL_DMA_Abort_IT+0x3cc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d01d      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a5d      	ldr	r2, [pc, #372]	; (80072d8 <HAL_DMA_Abort_IT+0x3d0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d018      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a5c      	ldr	r2, [pc, #368]	; (80072dc <HAL_DMA_Abort_IT+0x3d4>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d013      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a5a      	ldr	r2, [pc, #360]	; (80072e0 <HAL_DMA_Abort_IT+0x3d8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00e      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a59      	ldr	r2, [pc, #356]	; (80072e4 <HAL_DMA_Abort_IT+0x3dc>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d009      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a57      	ldr	r2, [pc, #348]	; (80072e8 <HAL_DMA_Abort_IT+0x3e0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d004      	beq.n	8007198 <HAL_DMA_Abort_IT+0x290>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a56      	ldr	r2, [pc, #344]	; (80072ec <HAL_DMA_Abort_IT+0x3e4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d108      	bne.n	80071aa <HAL_DMA_Abort_IT+0x2a2>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0201 	bic.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e007      	b.n	80071ba <HAL_DMA_Abort_IT+0x2b2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0201 	bic.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a3c      	ldr	r2, [pc, #240]	; (80072b0 <HAL_DMA_Abort_IT+0x3a8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d072      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a3a      	ldr	r2, [pc, #232]	; (80072b4 <HAL_DMA_Abort_IT+0x3ac>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d06d      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a39      	ldr	r2, [pc, #228]	; (80072b8 <HAL_DMA_Abort_IT+0x3b0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d068      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a37      	ldr	r2, [pc, #220]	; (80072bc <HAL_DMA_Abort_IT+0x3b4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d063      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a36      	ldr	r2, [pc, #216]	; (80072c0 <HAL_DMA_Abort_IT+0x3b8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d05e      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a34      	ldr	r2, [pc, #208]	; (80072c4 <HAL_DMA_Abort_IT+0x3bc>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d059      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a33      	ldr	r2, [pc, #204]	; (80072c8 <HAL_DMA_Abort_IT+0x3c0>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d054      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a31      	ldr	r2, [pc, #196]	; (80072cc <HAL_DMA_Abort_IT+0x3c4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d04f      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a30      	ldr	r2, [pc, #192]	; (80072d0 <HAL_DMA_Abort_IT+0x3c8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d04a      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a2e      	ldr	r2, [pc, #184]	; (80072d4 <HAL_DMA_Abort_IT+0x3cc>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d045      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a2d      	ldr	r2, [pc, #180]	; (80072d8 <HAL_DMA_Abort_IT+0x3d0>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d040      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a2b      	ldr	r2, [pc, #172]	; (80072dc <HAL_DMA_Abort_IT+0x3d4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d03b      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a2a      	ldr	r2, [pc, #168]	; (80072e0 <HAL_DMA_Abort_IT+0x3d8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d036      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a28      	ldr	r2, [pc, #160]	; (80072e4 <HAL_DMA_Abort_IT+0x3dc>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d031      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a27      	ldr	r2, [pc, #156]	; (80072e8 <HAL_DMA_Abort_IT+0x3e0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d02c      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a25      	ldr	r2, [pc, #148]	; (80072ec <HAL_DMA_Abort_IT+0x3e4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d027      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a24      	ldr	r2, [pc, #144]	; (80072f0 <HAL_DMA_Abort_IT+0x3e8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d022      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a22      	ldr	r2, [pc, #136]	; (80072f4 <HAL_DMA_Abort_IT+0x3ec>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01d      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a21      	ldr	r2, [pc, #132]	; (80072f8 <HAL_DMA_Abort_IT+0x3f0>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d018      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1f      	ldr	r2, [pc, #124]	; (80072fc <HAL_DMA_Abort_IT+0x3f4>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1e      	ldr	r2, [pc, #120]	; (8007300 <HAL_DMA_Abort_IT+0x3f8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1c      	ldr	r2, [pc, #112]	; (8007304 <HAL_DMA_Abort_IT+0x3fc>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d009      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <HAL_DMA_Abort_IT+0x400>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <HAL_DMA_Abort_IT+0x3a2>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a19      	ldr	r2, [pc, #100]	; (800730c <HAL_DMA_Abort_IT+0x404>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d132      	bne.n	8007310 <HAL_DMA_Abort_IT+0x408>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e031      	b.n	8007312 <HAL_DMA_Abort_IT+0x40a>
 80072ae:	bf00      	nop
 80072b0:	40020010 	.word	0x40020010
 80072b4:	40020028 	.word	0x40020028
 80072b8:	40020040 	.word	0x40020040
 80072bc:	40020058 	.word	0x40020058
 80072c0:	40020070 	.word	0x40020070
 80072c4:	40020088 	.word	0x40020088
 80072c8:	400200a0 	.word	0x400200a0
 80072cc:	400200b8 	.word	0x400200b8
 80072d0:	40020410 	.word	0x40020410
 80072d4:	40020428 	.word	0x40020428
 80072d8:	40020440 	.word	0x40020440
 80072dc:	40020458 	.word	0x40020458
 80072e0:	40020470 	.word	0x40020470
 80072e4:	40020488 	.word	0x40020488
 80072e8:	400204a0 	.word	0x400204a0
 80072ec:	400204b8 	.word	0x400204b8
 80072f0:	58025408 	.word	0x58025408
 80072f4:	5802541c 	.word	0x5802541c
 80072f8:	58025430 	.word	0x58025430
 80072fc:	58025444 	.word	0x58025444
 8007300:	58025458 	.word	0x58025458
 8007304:	5802546c 	.word	0x5802546c
 8007308:	58025480 	.word	0x58025480
 800730c:	58025494 	.word	0x58025494
 8007310:	2300      	movs	r3, #0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d028      	beq.n	8007368 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007324:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	2201      	movs	r2, #1
 8007336:	409a      	lsls	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007344:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00c      	beq.n	8007368 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800735c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007366:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop

08007394 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80073a0:	4b67      	ldr	r3, [pc, #412]	; (8007540 <HAL_DMA_IRQHandler+0x1ac>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a67      	ldr	r2, [pc, #412]	; (8007544 <HAL_DMA_IRQHandler+0x1b0>)
 80073a6:	fba2 2303 	umull	r2, r3, r2, r3
 80073aa:	0a9b      	lsrs	r3, r3, #10
 80073ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a5f      	ldr	r2, [pc, #380]	; (8007548 <HAL_DMA_IRQHandler+0x1b4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d04a      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a5d      	ldr	r2, [pc, #372]	; (800754c <HAL_DMA_IRQHandler+0x1b8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d045      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a5c      	ldr	r2, [pc, #368]	; (8007550 <HAL_DMA_IRQHandler+0x1bc>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d040      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a5a      	ldr	r2, [pc, #360]	; (8007554 <HAL_DMA_IRQHandler+0x1c0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d03b      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a59      	ldr	r2, [pc, #356]	; (8007558 <HAL_DMA_IRQHandler+0x1c4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d036      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a57      	ldr	r2, [pc, #348]	; (800755c <HAL_DMA_IRQHandler+0x1c8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d031      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a56      	ldr	r2, [pc, #344]	; (8007560 <HAL_DMA_IRQHandler+0x1cc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d02c      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a54      	ldr	r2, [pc, #336]	; (8007564 <HAL_DMA_IRQHandler+0x1d0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d027      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a53      	ldr	r2, [pc, #332]	; (8007568 <HAL_DMA_IRQHandler+0x1d4>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d022      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a51      	ldr	r2, [pc, #324]	; (800756c <HAL_DMA_IRQHandler+0x1d8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d01d      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a50      	ldr	r2, [pc, #320]	; (8007570 <HAL_DMA_IRQHandler+0x1dc>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d018      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a4e      	ldr	r2, [pc, #312]	; (8007574 <HAL_DMA_IRQHandler+0x1e0>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d013      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a4d      	ldr	r2, [pc, #308]	; (8007578 <HAL_DMA_IRQHandler+0x1e4>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d00e      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a4b      	ldr	r2, [pc, #300]	; (800757c <HAL_DMA_IRQHandler+0x1e8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d009      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a4a      	ldr	r2, [pc, #296]	; (8007580 <HAL_DMA_IRQHandler+0x1ec>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d004      	beq.n	8007466 <HAL_DMA_IRQHandler+0xd2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a48      	ldr	r2, [pc, #288]	; (8007584 <HAL_DMA_IRQHandler+0x1f0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d101      	bne.n	800746a <HAL_DMA_IRQHandler+0xd6>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <HAL_DMA_IRQHandler+0xd8>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 842b 	beq.w	8007cc8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007476:	f003 031f 	and.w	r3, r3, #31
 800747a:	2208      	movs	r2, #8
 800747c:	409a      	lsls	r2, r3
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	4013      	ands	r3, r2
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 80a2 	beq.w	80075cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a2e      	ldr	r2, [pc, #184]	; (8007548 <HAL_DMA_IRQHandler+0x1b4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d04a      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a2d      	ldr	r2, [pc, #180]	; (800754c <HAL_DMA_IRQHandler+0x1b8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d045      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a2b      	ldr	r2, [pc, #172]	; (8007550 <HAL_DMA_IRQHandler+0x1bc>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d040      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a2a      	ldr	r2, [pc, #168]	; (8007554 <HAL_DMA_IRQHandler+0x1c0>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d03b      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a28      	ldr	r2, [pc, #160]	; (8007558 <HAL_DMA_IRQHandler+0x1c4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d036      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a27      	ldr	r2, [pc, #156]	; (800755c <HAL_DMA_IRQHandler+0x1c8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d031      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a25      	ldr	r2, [pc, #148]	; (8007560 <HAL_DMA_IRQHandler+0x1cc>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d02c      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a24      	ldr	r2, [pc, #144]	; (8007564 <HAL_DMA_IRQHandler+0x1d0>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d027      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a22      	ldr	r2, [pc, #136]	; (8007568 <HAL_DMA_IRQHandler+0x1d4>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d022      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a21      	ldr	r2, [pc, #132]	; (800756c <HAL_DMA_IRQHandler+0x1d8>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d01d      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a1f      	ldr	r2, [pc, #124]	; (8007570 <HAL_DMA_IRQHandler+0x1dc>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d018      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a1e      	ldr	r2, [pc, #120]	; (8007574 <HAL_DMA_IRQHandler+0x1e0>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d013      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1c      	ldr	r2, [pc, #112]	; (8007578 <HAL_DMA_IRQHandler+0x1e4>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00e      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a1b      	ldr	r2, [pc, #108]	; (800757c <HAL_DMA_IRQHandler+0x1e8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d009      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a19      	ldr	r2, [pc, #100]	; (8007580 <HAL_DMA_IRQHandler+0x1ec>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d004      	beq.n	8007528 <HAL_DMA_IRQHandler+0x194>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a18      	ldr	r2, [pc, #96]	; (8007584 <HAL_DMA_IRQHandler+0x1f0>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d12f      	bne.n	8007588 <HAL_DMA_IRQHandler+0x1f4>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	bf14      	ite	ne
 8007536:	2301      	movne	r3, #1
 8007538:	2300      	moveq	r3, #0
 800753a:	b2db      	uxtb	r3, r3
 800753c:	e02e      	b.n	800759c <HAL_DMA_IRQHandler+0x208>
 800753e:	bf00      	nop
 8007540:	24000090 	.word	0x24000090
 8007544:	1b4e81b5 	.word	0x1b4e81b5
 8007548:	40020010 	.word	0x40020010
 800754c:	40020028 	.word	0x40020028
 8007550:	40020040 	.word	0x40020040
 8007554:	40020058 	.word	0x40020058
 8007558:	40020070 	.word	0x40020070
 800755c:	40020088 	.word	0x40020088
 8007560:	400200a0 	.word	0x400200a0
 8007564:	400200b8 	.word	0x400200b8
 8007568:	40020410 	.word	0x40020410
 800756c:	40020428 	.word	0x40020428
 8007570:	40020440 	.word	0x40020440
 8007574:	40020458 	.word	0x40020458
 8007578:	40020470 	.word	0x40020470
 800757c:	40020488 	.word	0x40020488
 8007580:	400204a0 	.word	0x400204a0
 8007584:	400204b8 	.word	0x400204b8
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0308 	and.w	r3, r3, #8
 8007592:	2b00      	cmp	r3, #0
 8007594:	bf14      	ite	ne
 8007596:	2301      	movne	r3, #1
 8007598:	2300      	moveq	r3, #0
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d015      	beq.n	80075cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0204 	bic.w	r2, r2, #4
 80075ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b4:	f003 031f 	and.w	r3, r3, #31
 80075b8:	2208      	movs	r2, #8
 80075ba:	409a      	lsls	r2, r3
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c4:	f043 0201 	orr.w	r2, r3, #1
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d0:	f003 031f 	and.w	r3, r3, #31
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	fa22 f303 	lsr.w	r3, r2, r3
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d06e      	beq.n	80076c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a69      	ldr	r2, [pc, #420]	; (800778c <HAL_DMA_IRQHandler+0x3f8>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d04a      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a67      	ldr	r2, [pc, #412]	; (8007790 <HAL_DMA_IRQHandler+0x3fc>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d045      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a66      	ldr	r2, [pc, #408]	; (8007794 <HAL_DMA_IRQHandler+0x400>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d040      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a64      	ldr	r2, [pc, #400]	; (8007798 <HAL_DMA_IRQHandler+0x404>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d03b      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a63      	ldr	r2, [pc, #396]	; (800779c <HAL_DMA_IRQHandler+0x408>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d036      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a61      	ldr	r2, [pc, #388]	; (80077a0 <HAL_DMA_IRQHandler+0x40c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d031      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a60      	ldr	r2, [pc, #384]	; (80077a4 <HAL_DMA_IRQHandler+0x410>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d02c      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a5e      	ldr	r2, [pc, #376]	; (80077a8 <HAL_DMA_IRQHandler+0x414>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d027      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a5d      	ldr	r2, [pc, #372]	; (80077ac <HAL_DMA_IRQHandler+0x418>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d022      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a5b      	ldr	r2, [pc, #364]	; (80077b0 <HAL_DMA_IRQHandler+0x41c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d01d      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a5a      	ldr	r2, [pc, #360]	; (80077b4 <HAL_DMA_IRQHandler+0x420>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d018      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a58      	ldr	r2, [pc, #352]	; (80077b8 <HAL_DMA_IRQHandler+0x424>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d013      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a57      	ldr	r2, [pc, #348]	; (80077bc <HAL_DMA_IRQHandler+0x428>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d00e      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a55      	ldr	r2, [pc, #340]	; (80077c0 <HAL_DMA_IRQHandler+0x42c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d009      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a54      	ldr	r2, [pc, #336]	; (80077c4 <HAL_DMA_IRQHandler+0x430>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d004      	beq.n	8007682 <HAL_DMA_IRQHandler+0x2ee>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a52      	ldr	r2, [pc, #328]	; (80077c8 <HAL_DMA_IRQHandler+0x434>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d10a      	bne.n	8007698 <HAL_DMA_IRQHandler+0x304>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768c:	2b00      	cmp	r3, #0
 800768e:	bf14      	ite	ne
 8007690:	2301      	movne	r3, #1
 8007692:	2300      	moveq	r3, #0
 8007694:	b2db      	uxtb	r3, r3
 8007696:	e003      	b.n	80076a0 <HAL_DMA_IRQHandler+0x30c>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2300      	movs	r3, #0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00d      	beq.n	80076c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a8:	f003 031f 	and.w	r3, r3, #31
 80076ac:	2201      	movs	r2, #1
 80076ae:	409a      	lsls	r2, r3
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b8:	f043 0202 	orr.w	r2, r3, #2
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	2204      	movs	r2, #4
 80076ca:	409a      	lsls	r2, r3
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	4013      	ands	r3, r2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 808f 	beq.w	80077f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a2c      	ldr	r2, [pc, #176]	; (800778c <HAL_DMA_IRQHandler+0x3f8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d04a      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a2a      	ldr	r2, [pc, #168]	; (8007790 <HAL_DMA_IRQHandler+0x3fc>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d045      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a29      	ldr	r2, [pc, #164]	; (8007794 <HAL_DMA_IRQHandler+0x400>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d040      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a27      	ldr	r2, [pc, #156]	; (8007798 <HAL_DMA_IRQHandler+0x404>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d03b      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a26      	ldr	r2, [pc, #152]	; (800779c <HAL_DMA_IRQHandler+0x408>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d036      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a24      	ldr	r2, [pc, #144]	; (80077a0 <HAL_DMA_IRQHandler+0x40c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d031      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a23      	ldr	r2, [pc, #140]	; (80077a4 <HAL_DMA_IRQHandler+0x410>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d02c      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a21      	ldr	r2, [pc, #132]	; (80077a8 <HAL_DMA_IRQHandler+0x414>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d027      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a20      	ldr	r2, [pc, #128]	; (80077ac <HAL_DMA_IRQHandler+0x418>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d022      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a1e      	ldr	r2, [pc, #120]	; (80077b0 <HAL_DMA_IRQHandler+0x41c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d01d      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a1d      	ldr	r2, [pc, #116]	; (80077b4 <HAL_DMA_IRQHandler+0x420>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d018      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a1b      	ldr	r2, [pc, #108]	; (80077b8 <HAL_DMA_IRQHandler+0x424>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d013      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a1a      	ldr	r2, [pc, #104]	; (80077bc <HAL_DMA_IRQHandler+0x428>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d00e      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <HAL_DMA_IRQHandler+0x42c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d009      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a17      	ldr	r2, [pc, #92]	; (80077c4 <HAL_DMA_IRQHandler+0x430>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d004      	beq.n	8007776 <HAL_DMA_IRQHandler+0x3e2>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a15      	ldr	r2, [pc, #84]	; (80077c8 <HAL_DMA_IRQHandler+0x434>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d12a      	bne.n	80077cc <HAL_DMA_IRQHandler+0x438>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	bf14      	ite	ne
 8007784:	2301      	movne	r3, #1
 8007786:	2300      	moveq	r3, #0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	e023      	b.n	80077d4 <HAL_DMA_IRQHandler+0x440>
 800778c:	40020010 	.word	0x40020010
 8007790:	40020028 	.word	0x40020028
 8007794:	40020040 	.word	0x40020040
 8007798:	40020058 	.word	0x40020058
 800779c:	40020070 	.word	0x40020070
 80077a0:	40020088 	.word	0x40020088
 80077a4:	400200a0 	.word	0x400200a0
 80077a8:	400200b8 	.word	0x400200b8
 80077ac:	40020410 	.word	0x40020410
 80077b0:	40020428 	.word	0x40020428
 80077b4:	40020440 	.word	0x40020440
 80077b8:	40020458 	.word	0x40020458
 80077bc:	40020470 	.word	0x40020470
 80077c0:	40020488 	.word	0x40020488
 80077c4:	400204a0 	.word	0x400204a0
 80077c8:	400204b8 	.word	0x400204b8
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2300      	movs	r3, #0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00d      	beq.n	80077f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077dc:	f003 031f 	and.w	r3, r3, #31
 80077e0:	2204      	movs	r2, #4
 80077e2:	409a      	lsls	r2, r3
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ec:	f043 0204 	orr.w	r2, r3, #4
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f8:	f003 031f 	and.w	r3, r3, #31
 80077fc:	2210      	movs	r2, #16
 80077fe:	409a      	lsls	r2, r3
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	4013      	ands	r3, r2
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 80a6 	beq.w	8007956 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a85      	ldr	r2, [pc, #532]	; (8007a24 <HAL_DMA_IRQHandler+0x690>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d04a      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a83      	ldr	r2, [pc, #524]	; (8007a28 <HAL_DMA_IRQHandler+0x694>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d045      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a82      	ldr	r2, [pc, #520]	; (8007a2c <HAL_DMA_IRQHandler+0x698>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d040      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a80      	ldr	r2, [pc, #512]	; (8007a30 <HAL_DMA_IRQHandler+0x69c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d03b      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a7f      	ldr	r2, [pc, #508]	; (8007a34 <HAL_DMA_IRQHandler+0x6a0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d036      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a7d      	ldr	r2, [pc, #500]	; (8007a38 <HAL_DMA_IRQHandler+0x6a4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d031      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a7c      	ldr	r2, [pc, #496]	; (8007a3c <HAL_DMA_IRQHandler+0x6a8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d02c      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a7a      	ldr	r2, [pc, #488]	; (8007a40 <HAL_DMA_IRQHandler+0x6ac>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d027      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a79      	ldr	r2, [pc, #484]	; (8007a44 <HAL_DMA_IRQHandler+0x6b0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d022      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a77      	ldr	r2, [pc, #476]	; (8007a48 <HAL_DMA_IRQHandler+0x6b4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d01d      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a76      	ldr	r2, [pc, #472]	; (8007a4c <HAL_DMA_IRQHandler+0x6b8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d018      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a74      	ldr	r2, [pc, #464]	; (8007a50 <HAL_DMA_IRQHandler+0x6bc>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d013      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a73      	ldr	r2, [pc, #460]	; (8007a54 <HAL_DMA_IRQHandler+0x6c0>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d00e      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a71      	ldr	r2, [pc, #452]	; (8007a58 <HAL_DMA_IRQHandler+0x6c4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d009      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a70      	ldr	r2, [pc, #448]	; (8007a5c <HAL_DMA_IRQHandler+0x6c8>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d004      	beq.n	80078aa <HAL_DMA_IRQHandler+0x516>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a6e      	ldr	r2, [pc, #440]	; (8007a60 <HAL_DMA_IRQHandler+0x6cc>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d10a      	bne.n	80078c0 <HAL_DMA_IRQHandler+0x52c>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bf14      	ite	ne
 80078b8:	2301      	movne	r3, #1
 80078ba:	2300      	moveq	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	e009      	b.n	80078d4 <HAL_DMA_IRQHandler+0x540>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	bf14      	ite	ne
 80078ce:	2301      	movne	r3, #1
 80078d0:	2300      	moveq	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d03e      	beq.n	8007956 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078dc:	f003 031f 	and.w	r3, r3, #31
 80078e0:	2210      	movs	r2, #16
 80078e2:	409a      	lsls	r2, r3
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d018      	beq.n	8007928 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d108      	bne.n	8007916 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	d024      	beq.n	8007956 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	4798      	blx	r3
 8007914:	e01f      	b.n	8007956 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01b      	beq.n	8007956 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	4798      	blx	r3
 8007926:	e016      	b.n	8007956 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007932:	2b00      	cmp	r3, #0
 8007934:	d107      	bne.n	8007946 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0208 	bic.w	r2, r2, #8
 8007944:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795a:	f003 031f 	and.w	r3, r3, #31
 800795e:	2220      	movs	r2, #32
 8007960:	409a      	lsls	r2, r3
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	4013      	ands	r3, r2
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 8110 	beq.w	8007b8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a2c      	ldr	r2, [pc, #176]	; (8007a24 <HAL_DMA_IRQHandler+0x690>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d04a      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a2b      	ldr	r2, [pc, #172]	; (8007a28 <HAL_DMA_IRQHandler+0x694>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d045      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a29      	ldr	r2, [pc, #164]	; (8007a2c <HAL_DMA_IRQHandler+0x698>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d040      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a28      	ldr	r2, [pc, #160]	; (8007a30 <HAL_DMA_IRQHandler+0x69c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d03b      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a26      	ldr	r2, [pc, #152]	; (8007a34 <HAL_DMA_IRQHandler+0x6a0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d036      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a25      	ldr	r2, [pc, #148]	; (8007a38 <HAL_DMA_IRQHandler+0x6a4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d031      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a23      	ldr	r2, [pc, #140]	; (8007a3c <HAL_DMA_IRQHandler+0x6a8>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d02c      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a22      	ldr	r2, [pc, #136]	; (8007a40 <HAL_DMA_IRQHandler+0x6ac>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d027      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a20      	ldr	r2, [pc, #128]	; (8007a44 <HAL_DMA_IRQHandler+0x6b0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d022      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1f      	ldr	r2, [pc, #124]	; (8007a48 <HAL_DMA_IRQHandler+0x6b4>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d01d      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1d      	ldr	r2, [pc, #116]	; (8007a4c <HAL_DMA_IRQHandler+0x6b8>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d018      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a1c      	ldr	r2, [pc, #112]	; (8007a50 <HAL_DMA_IRQHandler+0x6bc>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d013      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a1a      	ldr	r2, [pc, #104]	; (8007a54 <HAL_DMA_IRQHandler+0x6c0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d00e      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a19      	ldr	r2, [pc, #100]	; (8007a58 <HAL_DMA_IRQHandler+0x6c4>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d009      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a17      	ldr	r2, [pc, #92]	; (8007a5c <HAL_DMA_IRQHandler+0x6c8>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d004      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x678>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a16      	ldr	r2, [pc, #88]	; (8007a60 <HAL_DMA_IRQHandler+0x6cc>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d12b      	bne.n	8007a64 <HAL_DMA_IRQHandler+0x6d0>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	bf14      	ite	ne
 8007a1a:	2301      	movne	r3, #1
 8007a1c:	2300      	moveq	r3, #0
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	e02a      	b.n	8007a78 <HAL_DMA_IRQHandler+0x6e4>
 8007a22:	bf00      	nop
 8007a24:	40020010 	.word	0x40020010
 8007a28:	40020028 	.word	0x40020028
 8007a2c:	40020040 	.word	0x40020040
 8007a30:	40020058 	.word	0x40020058
 8007a34:	40020070 	.word	0x40020070
 8007a38:	40020088 	.word	0x40020088
 8007a3c:	400200a0 	.word	0x400200a0
 8007a40:	400200b8 	.word	0x400200b8
 8007a44:	40020410 	.word	0x40020410
 8007a48:	40020428 	.word	0x40020428
 8007a4c:	40020440 	.word	0x40020440
 8007a50:	40020458 	.word	0x40020458
 8007a54:	40020470 	.word	0x40020470
 8007a58:	40020488 	.word	0x40020488
 8007a5c:	400204a0 	.word	0x400204a0
 8007a60:	400204b8 	.word	0x400204b8
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	bf14      	ite	ne
 8007a72:	2301      	movne	r3, #1
 8007a74:	2300      	moveq	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 8087 	beq.w	8007b8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a82:	f003 031f 	and.w	r3, r3, #31
 8007a86:	2220      	movs	r2, #32
 8007a88:	409a      	lsls	r2, r3
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d139      	bne.n	8007b0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0216 	bic.w	r2, r2, #22
 8007aa8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	695a      	ldr	r2, [r3, #20]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ab8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <HAL_DMA_IRQHandler+0x736>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d007      	beq.n	8007ada <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0208 	bic.w	r2, r2, #8
 8007ad8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ade:	f003 031f 	and.w	r3, r3, #31
 8007ae2:	223f      	movs	r2, #63	; 0x3f
 8007ae4:	409a      	lsls	r2, r3
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 834a 	beq.w	8008198 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	4798      	blx	r3
          }
          return;
 8007b0c:	e344      	b.n	8008198 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d018      	beq.n	8007b4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d108      	bne.n	8007b3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d02c      	beq.n	8007b8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
 8007b3a:	e027      	b.n	8007b8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d023      	beq.n	8007b8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	4798      	blx	r3
 8007b4c:	e01e      	b.n	8007b8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10f      	bne.n	8007b7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0210 	bic.w	r2, r2, #16
 8007b6a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 8306 	beq.w	80081a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 8088 	beq.w	8007cb4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a7a      	ldr	r2, [pc, #488]	; (8007d9c <HAL_DMA_IRQHandler+0xa08>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d04a      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a79      	ldr	r2, [pc, #484]	; (8007da0 <HAL_DMA_IRQHandler+0xa0c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d045      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a77      	ldr	r2, [pc, #476]	; (8007da4 <HAL_DMA_IRQHandler+0xa10>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d040      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a76      	ldr	r2, [pc, #472]	; (8007da8 <HAL_DMA_IRQHandler+0xa14>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d03b      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a74      	ldr	r2, [pc, #464]	; (8007dac <HAL_DMA_IRQHandler+0xa18>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d036      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a73      	ldr	r2, [pc, #460]	; (8007db0 <HAL_DMA_IRQHandler+0xa1c>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d031      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a71      	ldr	r2, [pc, #452]	; (8007db4 <HAL_DMA_IRQHandler+0xa20>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d02c      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a70      	ldr	r2, [pc, #448]	; (8007db8 <HAL_DMA_IRQHandler+0xa24>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d027      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a6e      	ldr	r2, [pc, #440]	; (8007dbc <HAL_DMA_IRQHandler+0xa28>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d022      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a6d      	ldr	r2, [pc, #436]	; (8007dc0 <HAL_DMA_IRQHandler+0xa2c>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d01d      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a6b      	ldr	r2, [pc, #428]	; (8007dc4 <HAL_DMA_IRQHandler+0xa30>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d018      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a6a      	ldr	r2, [pc, #424]	; (8007dc8 <HAL_DMA_IRQHandler+0xa34>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d013      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a68      	ldr	r2, [pc, #416]	; (8007dcc <HAL_DMA_IRQHandler+0xa38>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00e      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a67      	ldr	r2, [pc, #412]	; (8007dd0 <HAL_DMA_IRQHandler+0xa3c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d009      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a65      	ldr	r2, [pc, #404]	; (8007dd4 <HAL_DMA_IRQHandler+0xa40>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d004      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x8b8>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a64      	ldr	r2, [pc, #400]	; (8007dd8 <HAL_DMA_IRQHandler+0xa44>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d108      	bne.n	8007c5e <HAL_DMA_IRQHandler+0x8ca>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 0201 	bic.w	r2, r2, #1
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	e007      	b.n	8007c6e <HAL_DMA_IRQHandler+0x8da>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0201 	bic.w	r2, r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3301      	adds	r3, #1
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d307      	bcc.n	8007c8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1f2      	bne.n	8007c6e <HAL_DMA_IRQHandler+0x8da>
 8007c88:	e000      	b.n	8007c8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007c8a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d004      	beq.n	8007ca4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2203      	movs	r2, #3
 8007c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007ca2:	e003      	b.n	8007cac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 8272 	beq.w	80081a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
 8007cc6:	e26c      	b.n	80081a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a43      	ldr	r2, [pc, #268]	; (8007ddc <HAL_DMA_IRQHandler+0xa48>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d022      	beq.n	8007d18 <HAL_DMA_IRQHandler+0x984>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a42      	ldr	r2, [pc, #264]	; (8007de0 <HAL_DMA_IRQHandler+0xa4c>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d01d      	beq.n	8007d18 <HAL_DMA_IRQHandler+0x984>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a40      	ldr	r2, [pc, #256]	; (8007de4 <HAL_DMA_IRQHandler+0xa50>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d018      	beq.n	8007d18 <HAL_DMA_IRQHandler+0x984>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a3f      	ldr	r2, [pc, #252]	; (8007de8 <HAL_DMA_IRQHandler+0xa54>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d013      	beq.n	8007d18 <HAL_DMA_IRQHandler+0x984>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a3d      	ldr	r2, [pc, #244]	; (8007dec <HAL_DMA_IRQHandler+0xa58>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d00e      	beq.n	8007d18 <HAL_DMA_IRQHandler+0x984>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a3c      	ldr	r2, [pc, #240]	; (8007df0 <HAL_DMA_IRQHandler+0xa5c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d009      	beq.n	8007d18 <HAL_DMA_IRQHandler+0x984>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a3a      	ldr	r2, [pc, #232]	; (8007df4 <HAL_DMA_IRQHandler+0xa60>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d004      	beq.n	8007d18 <HAL_DMA_IRQHandler+0x984>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a39      	ldr	r2, [pc, #228]	; (8007df8 <HAL_DMA_IRQHandler+0xa64>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d101      	bne.n	8007d1c <HAL_DMA_IRQHandler+0x988>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e000      	b.n	8007d1e <HAL_DMA_IRQHandler+0x98a>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 823f 	beq.w	80081a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d30:	f003 031f 	and.w	r3, r3, #31
 8007d34:	2204      	movs	r2, #4
 8007d36:	409a      	lsls	r2, r3
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 80cd 	beq.w	8007edc <HAL_DMA_IRQHandler+0xb48>
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 80c7 	beq.w	8007edc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d52:	f003 031f 	and.w	r3, r3, #31
 8007d56:	2204      	movs	r2, #4
 8007d58:	409a      	lsls	r2, r3
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d049      	beq.n	8007dfc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d109      	bne.n	8007d86 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 8210 	beq.w	800819c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d84:	e20a      	b.n	800819c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 8206 	beq.w	800819c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d98:	e200      	b.n	800819c <HAL_DMA_IRQHandler+0xe08>
 8007d9a:	bf00      	nop
 8007d9c:	40020010 	.word	0x40020010
 8007da0:	40020028 	.word	0x40020028
 8007da4:	40020040 	.word	0x40020040
 8007da8:	40020058 	.word	0x40020058
 8007dac:	40020070 	.word	0x40020070
 8007db0:	40020088 	.word	0x40020088
 8007db4:	400200a0 	.word	0x400200a0
 8007db8:	400200b8 	.word	0x400200b8
 8007dbc:	40020410 	.word	0x40020410
 8007dc0:	40020428 	.word	0x40020428
 8007dc4:	40020440 	.word	0x40020440
 8007dc8:	40020458 	.word	0x40020458
 8007dcc:	40020470 	.word	0x40020470
 8007dd0:	40020488 	.word	0x40020488
 8007dd4:	400204a0 	.word	0x400204a0
 8007dd8:	400204b8 	.word	0x400204b8
 8007ddc:	58025408 	.word	0x58025408
 8007de0:	5802541c 	.word	0x5802541c
 8007de4:	58025430 	.word	0x58025430
 8007de8:	58025444 	.word	0x58025444
 8007dec:	58025458 	.word	0x58025458
 8007df0:	5802546c 	.word	0x5802546c
 8007df4:	58025480 	.word	0x58025480
 8007df8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d160      	bne.n	8007ec8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a7f      	ldr	r2, [pc, #508]	; (8008008 <HAL_DMA_IRQHandler+0xc74>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d04a      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a7d      	ldr	r2, [pc, #500]	; (800800c <HAL_DMA_IRQHandler+0xc78>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d045      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a7c      	ldr	r2, [pc, #496]	; (8008010 <HAL_DMA_IRQHandler+0xc7c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d040      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a7a      	ldr	r2, [pc, #488]	; (8008014 <HAL_DMA_IRQHandler+0xc80>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d03b      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a79      	ldr	r2, [pc, #484]	; (8008018 <HAL_DMA_IRQHandler+0xc84>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d036      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a77      	ldr	r2, [pc, #476]	; (800801c <HAL_DMA_IRQHandler+0xc88>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d031      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a76      	ldr	r2, [pc, #472]	; (8008020 <HAL_DMA_IRQHandler+0xc8c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d02c      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a74      	ldr	r2, [pc, #464]	; (8008024 <HAL_DMA_IRQHandler+0xc90>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d027      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a73      	ldr	r2, [pc, #460]	; (8008028 <HAL_DMA_IRQHandler+0xc94>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d022      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a71      	ldr	r2, [pc, #452]	; (800802c <HAL_DMA_IRQHandler+0xc98>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01d      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a70      	ldr	r2, [pc, #448]	; (8008030 <HAL_DMA_IRQHandler+0xc9c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d018      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a6e      	ldr	r2, [pc, #440]	; (8008034 <HAL_DMA_IRQHandler+0xca0>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d013      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a6d      	ldr	r2, [pc, #436]	; (8008038 <HAL_DMA_IRQHandler+0xca4>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00e      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a6b      	ldr	r2, [pc, #428]	; (800803c <HAL_DMA_IRQHandler+0xca8>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d009      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a6a      	ldr	r2, [pc, #424]	; (8008040 <HAL_DMA_IRQHandler+0xcac>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d004      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xb12>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a68      	ldr	r2, [pc, #416]	; (8008044 <HAL_DMA_IRQHandler+0xcb0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d108      	bne.n	8007eb8 <HAL_DMA_IRQHandler+0xb24>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 0208 	bic.w	r2, r2, #8
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	e007      	b.n	8007ec8 <HAL_DMA_IRQHandler+0xb34>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 0204 	bic.w	r2, r2, #4
 8007ec6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8165 	beq.w	800819c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eda:	e15f      	b.n	800819c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ee0:	f003 031f 	and.w	r3, r3, #31
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	409a      	lsls	r2, r3
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	4013      	ands	r3, r2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 80c5 	beq.w	800807c <HAL_DMA_IRQHandler+0xce8>
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f003 0302 	and.w	r3, r3, #2
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 80bf 	beq.w	800807c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f02:	f003 031f 	and.w	r3, r3, #31
 8007f06:	2202      	movs	r2, #2
 8007f08:	409a      	lsls	r2, r3
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d018      	beq.n	8007f4a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d109      	bne.n	8007f36 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 813a 	beq.w	80081a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f34:	e134      	b.n	80081a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 8130 	beq.w	80081a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f48:	e12a      	b.n	80081a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f040 8089 	bne.w	8008068 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a2b      	ldr	r2, [pc, #172]	; (8008008 <HAL_DMA_IRQHandler+0xc74>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d04a      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a29      	ldr	r2, [pc, #164]	; (800800c <HAL_DMA_IRQHandler+0xc78>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d045      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a28      	ldr	r2, [pc, #160]	; (8008010 <HAL_DMA_IRQHandler+0xc7c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d040      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a26      	ldr	r2, [pc, #152]	; (8008014 <HAL_DMA_IRQHandler+0xc80>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d03b      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a25      	ldr	r2, [pc, #148]	; (8008018 <HAL_DMA_IRQHandler+0xc84>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d036      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a23      	ldr	r2, [pc, #140]	; (800801c <HAL_DMA_IRQHandler+0xc88>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d031      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a22      	ldr	r2, [pc, #136]	; (8008020 <HAL_DMA_IRQHandler+0xc8c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d02c      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a20      	ldr	r2, [pc, #128]	; (8008024 <HAL_DMA_IRQHandler+0xc90>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d027      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a1f      	ldr	r2, [pc, #124]	; (8008028 <HAL_DMA_IRQHandler+0xc94>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d022      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a1d      	ldr	r2, [pc, #116]	; (800802c <HAL_DMA_IRQHandler+0xc98>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d01d      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a1c      	ldr	r2, [pc, #112]	; (8008030 <HAL_DMA_IRQHandler+0xc9c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d018      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1a      	ldr	r2, [pc, #104]	; (8008034 <HAL_DMA_IRQHandler+0xca0>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d013      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a19      	ldr	r2, [pc, #100]	; (8008038 <HAL_DMA_IRQHandler+0xca4>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00e      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a17      	ldr	r2, [pc, #92]	; (800803c <HAL_DMA_IRQHandler+0xca8>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d009      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a16      	ldr	r2, [pc, #88]	; (8008040 <HAL_DMA_IRQHandler+0xcac>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d004      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xc62>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a14      	ldr	r2, [pc, #80]	; (8008044 <HAL_DMA_IRQHandler+0xcb0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d128      	bne.n	8008048 <HAL_DMA_IRQHandler+0xcb4>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0214 	bic.w	r2, r2, #20
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	e027      	b.n	8008058 <HAL_DMA_IRQHandler+0xcc4>
 8008008:	40020010 	.word	0x40020010
 800800c:	40020028 	.word	0x40020028
 8008010:	40020040 	.word	0x40020040
 8008014:	40020058 	.word	0x40020058
 8008018:	40020070 	.word	0x40020070
 800801c:	40020088 	.word	0x40020088
 8008020:	400200a0 	.word	0x400200a0
 8008024:	400200b8 	.word	0x400200b8
 8008028:	40020410 	.word	0x40020410
 800802c:	40020428 	.word	0x40020428
 8008030:	40020440 	.word	0x40020440
 8008034:	40020458 	.word	0x40020458
 8008038:	40020470 	.word	0x40020470
 800803c:	40020488 	.word	0x40020488
 8008040:	400204a0 	.word	0x400204a0
 8008044:	400204b8 	.word	0x400204b8
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 020a 	bic.w	r2, r2, #10
 8008056:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8097 	beq.w	80081a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800807a:	e091      	b.n	80081a0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008080:	f003 031f 	and.w	r3, r3, #31
 8008084:	2208      	movs	r2, #8
 8008086:	409a      	lsls	r2, r3
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	4013      	ands	r3, r2
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 8088 	beq.w	80081a2 <HAL_DMA_IRQHandler+0xe0e>
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f003 0308 	and.w	r3, r3, #8
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 8082 	beq.w	80081a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a41      	ldr	r2, [pc, #260]	; (80081a8 <HAL_DMA_IRQHandler+0xe14>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d04a      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a3f      	ldr	r2, [pc, #252]	; (80081ac <HAL_DMA_IRQHandler+0xe18>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d045      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a3e      	ldr	r2, [pc, #248]	; (80081b0 <HAL_DMA_IRQHandler+0xe1c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d040      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a3c      	ldr	r2, [pc, #240]	; (80081b4 <HAL_DMA_IRQHandler+0xe20>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d03b      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a3b      	ldr	r2, [pc, #236]	; (80081b8 <HAL_DMA_IRQHandler+0xe24>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d036      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a39      	ldr	r2, [pc, #228]	; (80081bc <HAL_DMA_IRQHandler+0xe28>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d031      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a38      	ldr	r2, [pc, #224]	; (80081c0 <HAL_DMA_IRQHandler+0xe2c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d02c      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a36      	ldr	r2, [pc, #216]	; (80081c4 <HAL_DMA_IRQHandler+0xe30>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d027      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a35      	ldr	r2, [pc, #212]	; (80081c8 <HAL_DMA_IRQHandler+0xe34>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d022      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a33      	ldr	r2, [pc, #204]	; (80081cc <HAL_DMA_IRQHandler+0xe38>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d01d      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a32      	ldr	r2, [pc, #200]	; (80081d0 <HAL_DMA_IRQHandler+0xe3c>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d018      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a30      	ldr	r2, [pc, #192]	; (80081d4 <HAL_DMA_IRQHandler+0xe40>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d013      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a2f      	ldr	r2, [pc, #188]	; (80081d8 <HAL_DMA_IRQHandler+0xe44>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00e      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a2d      	ldr	r2, [pc, #180]	; (80081dc <HAL_DMA_IRQHandler+0xe48>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d009      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a2c      	ldr	r2, [pc, #176]	; (80081e0 <HAL_DMA_IRQHandler+0xe4c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d004      	beq.n	800813e <HAL_DMA_IRQHandler+0xdaa>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a2a      	ldr	r2, [pc, #168]	; (80081e4 <HAL_DMA_IRQHandler+0xe50>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d108      	bne.n	8008150 <HAL_DMA_IRQHandler+0xdbc>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f022 021c 	bic.w	r2, r2, #28
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	e007      	b.n	8008160 <HAL_DMA_IRQHandler+0xdcc>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f022 020e 	bic.w	r2, r2, #14
 800815e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008164:	f003 031f 	and.w	r3, r3, #31
 8008168:	2201      	movs	r2, #1
 800816a:	409a      	lsls	r2, r3
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800818a:	2b00      	cmp	r3, #0
 800818c:	d009      	beq.n	80081a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	4798      	blx	r3
 8008196:	e004      	b.n	80081a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008198:	bf00      	nop
 800819a:	e002      	b.n	80081a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800819c:	bf00      	nop
 800819e:	e000      	b.n	80081a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80081a2:	3728      	adds	r7, #40	; 0x28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	40020010 	.word	0x40020010
 80081ac:	40020028 	.word	0x40020028
 80081b0:	40020040 	.word	0x40020040
 80081b4:	40020058 	.word	0x40020058
 80081b8:	40020070 	.word	0x40020070
 80081bc:	40020088 	.word	0x40020088
 80081c0:	400200a0 	.word	0x400200a0
 80081c4:	400200b8 	.word	0x400200b8
 80081c8:	40020410 	.word	0x40020410
 80081cc:	40020428 	.word	0x40020428
 80081d0:	40020440 	.word	0x40020440
 80081d4:	40020458 	.word	0x40020458
 80081d8:	40020470 	.word	0x40020470
 80081dc:	40020488 	.word	0x40020488
 80081e0:	400204a0 	.word	0x400204a0
 80081e4:	400204b8 	.word	0x400204b8

080081e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008200:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a7f      	ldr	r2, [pc, #508]	; (8008404 <DMA_SetConfig+0x21c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d072      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a7d      	ldr	r2, [pc, #500]	; (8008408 <DMA_SetConfig+0x220>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d06d      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a7c      	ldr	r2, [pc, #496]	; (800840c <DMA_SetConfig+0x224>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d068      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a7a      	ldr	r2, [pc, #488]	; (8008410 <DMA_SetConfig+0x228>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d063      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a79      	ldr	r2, [pc, #484]	; (8008414 <DMA_SetConfig+0x22c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d05e      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a77      	ldr	r2, [pc, #476]	; (8008418 <DMA_SetConfig+0x230>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d059      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a76      	ldr	r2, [pc, #472]	; (800841c <DMA_SetConfig+0x234>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d054      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a74      	ldr	r2, [pc, #464]	; (8008420 <DMA_SetConfig+0x238>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d04f      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a73      	ldr	r2, [pc, #460]	; (8008424 <DMA_SetConfig+0x23c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d04a      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a71      	ldr	r2, [pc, #452]	; (8008428 <DMA_SetConfig+0x240>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d045      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a70      	ldr	r2, [pc, #448]	; (800842c <DMA_SetConfig+0x244>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d040      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a6e      	ldr	r2, [pc, #440]	; (8008430 <DMA_SetConfig+0x248>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d03b      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a6d      	ldr	r2, [pc, #436]	; (8008434 <DMA_SetConfig+0x24c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d036      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a6b      	ldr	r2, [pc, #428]	; (8008438 <DMA_SetConfig+0x250>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d031      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a6a      	ldr	r2, [pc, #424]	; (800843c <DMA_SetConfig+0x254>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d02c      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a68      	ldr	r2, [pc, #416]	; (8008440 <DMA_SetConfig+0x258>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d027      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a67      	ldr	r2, [pc, #412]	; (8008444 <DMA_SetConfig+0x25c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d022      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a65      	ldr	r2, [pc, #404]	; (8008448 <DMA_SetConfig+0x260>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d01d      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a64      	ldr	r2, [pc, #400]	; (800844c <DMA_SetConfig+0x264>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d018      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a62      	ldr	r2, [pc, #392]	; (8008450 <DMA_SetConfig+0x268>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d013      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a61      	ldr	r2, [pc, #388]	; (8008454 <DMA_SetConfig+0x26c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d00e      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a5f      	ldr	r2, [pc, #380]	; (8008458 <DMA_SetConfig+0x270>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d009      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a5e      	ldr	r2, [pc, #376]	; (800845c <DMA_SetConfig+0x274>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d004      	beq.n	80082f2 <DMA_SetConfig+0x10a>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a5c      	ldr	r2, [pc, #368]	; (8008460 <DMA_SetConfig+0x278>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d101      	bne.n	80082f6 <DMA_SetConfig+0x10e>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e000      	b.n	80082f8 <DMA_SetConfig+0x110>
 80082f6:	2300      	movs	r3, #0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00d      	beq.n	8008318 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008304:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d004      	beq.n	8008318 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008316:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a39      	ldr	r2, [pc, #228]	; (8008404 <DMA_SetConfig+0x21c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d04a      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a38      	ldr	r2, [pc, #224]	; (8008408 <DMA_SetConfig+0x220>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d045      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a36      	ldr	r2, [pc, #216]	; (800840c <DMA_SetConfig+0x224>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d040      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a35      	ldr	r2, [pc, #212]	; (8008410 <DMA_SetConfig+0x228>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d03b      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a33      	ldr	r2, [pc, #204]	; (8008414 <DMA_SetConfig+0x22c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d036      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a32      	ldr	r2, [pc, #200]	; (8008418 <DMA_SetConfig+0x230>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d031      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a30      	ldr	r2, [pc, #192]	; (800841c <DMA_SetConfig+0x234>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d02c      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a2f      	ldr	r2, [pc, #188]	; (8008420 <DMA_SetConfig+0x238>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d027      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a2d      	ldr	r2, [pc, #180]	; (8008424 <DMA_SetConfig+0x23c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d022      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a2c      	ldr	r2, [pc, #176]	; (8008428 <DMA_SetConfig+0x240>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d01d      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a2a      	ldr	r2, [pc, #168]	; (800842c <DMA_SetConfig+0x244>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d018      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a29      	ldr	r2, [pc, #164]	; (8008430 <DMA_SetConfig+0x248>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d013      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a27      	ldr	r2, [pc, #156]	; (8008434 <DMA_SetConfig+0x24c>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d00e      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a26      	ldr	r2, [pc, #152]	; (8008438 <DMA_SetConfig+0x250>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d009      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a24      	ldr	r2, [pc, #144]	; (800843c <DMA_SetConfig+0x254>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d004      	beq.n	80083b8 <DMA_SetConfig+0x1d0>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a23      	ldr	r2, [pc, #140]	; (8008440 <DMA_SetConfig+0x258>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d101      	bne.n	80083bc <DMA_SetConfig+0x1d4>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e000      	b.n	80083be <DMA_SetConfig+0x1d6>
 80083bc:	2300      	movs	r3, #0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d059      	beq.n	8008476 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c6:	f003 031f 	and.w	r3, r3, #31
 80083ca:	223f      	movs	r2, #63	; 0x3f
 80083cc:	409a      	lsls	r2, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	2b40      	cmp	r3, #64	; 0x40
 80083f0:	d138      	bne.n	8008464 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008402:	e086      	b.n	8008512 <DMA_SetConfig+0x32a>
 8008404:	40020010 	.word	0x40020010
 8008408:	40020028 	.word	0x40020028
 800840c:	40020040 	.word	0x40020040
 8008410:	40020058 	.word	0x40020058
 8008414:	40020070 	.word	0x40020070
 8008418:	40020088 	.word	0x40020088
 800841c:	400200a0 	.word	0x400200a0
 8008420:	400200b8 	.word	0x400200b8
 8008424:	40020410 	.word	0x40020410
 8008428:	40020428 	.word	0x40020428
 800842c:	40020440 	.word	0x40020440
 8008430:	40020458 	.word	0x40020458
 8008434:	40020470 	.word	0x40020470
 8008438:	40020488 	.word	0x40020488
 800843c:	400204a0 	.word	0x400204a0
 8008440:	400204b8 	.word	0x400204b8
 8008444:	58025408 	.word	0x58025408
 8008448:	5802541c 	.word	0x5802541c
 800844c:	58025430 	.word	0x58025430
 8008450:	58025444 	.word	0x58025444
 8008454:	58025458 	.word	0x58025458
 8008458:	5802546c 	.word	0x5802546c
 800845c:	58025480 	.word	0x58025480
 8008460:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	60da      	str	r2, [r3, #12]
}
 8008474:	e04d      	b.n	8008512 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a29      	ldr	r2, [pc, #164]	; (8008520 <DMA_SetConfig+0x338>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d022      	beq.n	80084c6 <DMA_SetConfig+0x2de>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a27      	ldr	r2, [pc, #156]	; (8008524 <DMA_SetConfig+0x33c>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d01d      	beq.n	80084c6 <DMA_SetConfig+0x2de>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a26      	ldr	r2, [pc, #152]	; (8008528 <DMA_SetConfig+0x340>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d018      	beq.n	80084c6 <DMA_SetConfig+0x2de>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a24      	ldr	r2, [pc, #144]	; (800852c <DMA_SetConfig+0x344>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d013      	beq.n	80084c6 <DMA_SetConfig+0x2de>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a23      	ldr	r2, [pc, #140]	; (8008530 <DMA_SetConfig+0x348>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00e      	beq.n	80084c6 <DMA_SetConfig+0x2de>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a21      	ldr	r2, [pc, #132]	; (8008534 <DMA_SetConfig+0x34c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d009      	beq.n	80084c6 <DMA_SetConfig+0x2de>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a20      	ldr	r2, [pc, #128]	; (8008538 <DMA_SetConfig+0x350>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d004      	beq.n	80084c6 <DMA_SetConfig+0x2de>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a1e      	ldr	r2, [pc, #120]	; (800853c <DMA_SetConfig+0x354>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d101      	bne.n	80084ca <DMA_SetConfig+0x2e2>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e000      	b.n	80084cc <DMA_SetConfig+0x2e4>
 80084ca:	2300      	movs	r3, #0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d020      	beq.n	8008512 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d4:	f003 031f 	and.w	r3, r3, #31
 80084d8:	2201      	movs	r2, #1
 80084da:	409a      	lsls	r2, r3
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	2b40      	cmp	r3, #64	; 0x40
 80084ee:	d108      	bne.n	8008502 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	60da      	str	r2, [r3, #12]
}
 8008500:	e007      	b.n	8008512 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	60da      	str	r2, [r3, #12]
}
 8008512:	bf00      	nop
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	58025408 	.word	0x58025408
 8008524:	5802541c 	.word	0x5802541c
 8008528:	58025430 	.word	0x58025430
 800852c:	58025444 	.word	0x58025444
 8008530:	58025458 	.word	0x58025458
 8008534:	5802546c 	.word	0x5802546c
 8008538:	58025480 	.word	0x58025480
 800853c:	58025494 	.word	0x58025494

08008540 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a42      	ldr	r2, [pc, #264]	; (8008658 <DMA_CalcBaseAndBitshift+0x118>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d04a      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a41      	ldr	r2, [pc, #260]	; (800865c <DMA_CalcBaseAndBitshift+0x11c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d045      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a3f      	ldr	r2, [pc, #252]	; (8008660 <DMA_CalcBaseAndBitshift+0x120>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d040      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a3e      	ldr	r2, [pc, #248]	; (8008664 <DMA_CalcBaseAndBitshift+0x124>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d03b      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a3c      	ldr	r2, [pc, #240]	; (8008668 <DMA_CalcBaseAndBitshift+0x128>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d036      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a3b      	ldr	r2, [pc, #236]	; (800866c <DMA_CalcBaseAndBitshift+0x12c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d031      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a39      	ldr	r2, [pc, #228]	; (8008670 <DMA_CalcBaseAndBitshift+0x130>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d02c      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a38      	ldr	r2, [pc, #224]	; (8008674 <DMA_CalcBaseAndBitshift+0x134>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d027      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a36      	ldr	r2, [pc, #216]	; (8008678 <DMA_CalcBaseAndBitshift+0x138>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d022      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a35      	ldr	r2, [pc, #212]	; (800867c <DMA_CalcBaseAndBitshift+0x13c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d01d      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a33      	ldr	r2, [pc, #204]	; (8008680 <DMA_CalcBaseAndBitshift+0x140>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d018      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a32      	ldr	r2, [pc, #200]	; (8008684 <DMA_CalcBaseAndBitshift+0x144>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d013      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a30      	ldr	r2, [pc, #192]	; (8008688 <DMA_CalcBaseAndBitshift+0x148>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d00e      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a2f      	ldr	r2, [pc, #188]	; (800868c <DMA_CalcBaseAndBitshift+0x14c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d009      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a2d      	ldr	r2, [pc, #180]	; (8008690 <DMA_CalcBaseAndBitshift+0x150>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d004      	beq.n	80085e8 <DMA_CalcBaseAndBitshift+0xa8>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a2c      	ldr	r2, [pc, #176]	; (8008694 <DMA_CalcBaseAndBitshift+0x154>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d101      	bne.n	80085ec <DMA_CalcBaseAndBitshift+0xac>
 80085e8:	2301      	movs	r3, #1
 80085ea:	e000      	b.n	80085ee <DMA_CalcBaseAndBitshift+0xae>
 80085ec:	2300      	movs	r3, #0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d024      	beq.n	800863c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	3b10      	subs	r3, #16
 80085fa:	4a27      	ldr	r2, [pc, #156]	; (8008698 <DMA_CalcBaseAndBitshift+0x158>)
 80085fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008600:	091b      	lsrs	r3, r3, #4
 8008602:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	4a24      	ldr	r2, [pc, #144]	; (800869c <DMA_CalcBaseAndBitshift+0x15c>)
 800860c:	5cd3      	ldrb	r3, [r2, r3]
 800860e:	461a      	mov	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b03      	cmp	r3, #3
 8008618:	d908      	bls.n	800862c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	4b1f      	ldr	r3, [pc, #124]	; (80086a0 <DMA_CalcBaseAndBitshift+0x160>)
 8008622:	4013      	ands	r3, r2
 8008624:	1d1a      	adds	r2, r3, #4
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	659a      	str	r2, [r3, #88]	; 0x58
 800862a:	e00d      	b.n	8008648 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	4b1b      	ldr	r3, [pc, #108]	; (80086a0 <DMA_CalcBaseAndBitshift+0x160>)
 8008634:	4013      	ands	r3, r2
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	6593      	str	r3, [r2, #88]	; 0x58
 800863a:	e005      	b.n	8008648 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	40020010 	.word	0x40020010
 800865c:	40020028 	.word	0x40020028
 8008660:	40020040 	.word	0x40020040
 8008664:	40020058 	.word	0x40020058
 8008668:	40020070 	.word	0x40020070
 800866c:	40020088 	.word	0x40020088
 8008670:	400200a0 	.word	0x400200a0
 8008674:	400200b8 	.word	0x400200b8
 8008678:	40020410 	.word	0x40020410
 800867c:	40020428 	.word	0x40020428
 8008680:	40020440 	.word	0x40020440
 8008684:	40020458 	.word	0x40020458
 8008688:	40020470 	.word	0x40020470
 800868c:	40020488 	.word	0x40020488
 8008690:	400204a0 	.word	0x400204a0
 8008694:	400204b8 	.word	0x400204b8
 8008698:	aaaaaaab 	.word	0xaaaaaaab
 800869c:	08017064 	.word	0x08017064
 80086a0:	fffffc00 	.word	0xfffffc00

080086a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d120      	bne.n	80086fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d858      	bhi.n	8008772 <DMA_CheckFifoParam+0xce>
 80086c0:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <DMA_CheckFifoParam+0x24>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	080086d9 	.word	0x080086d9
 80086cc:	080086eb 	.word	0x080086eb
 80086d0:	080086d9 	.word	0x080086d9
 80086d4:	08008773 	.word	0x08008773
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d048      	beq.n	8008776 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086e8:	e045      	b.n	8008776 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086f2:	d142      	bne.n	800877a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086f8:	e03f      	b.n	800877a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008702:	d123      	bne.n	800874c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008708:	2b03      	cmp	r3, #3
 800870a:	d838      	bhi.n	800877e <DMA_CheckFifoParam+0xda>
 800870c:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <DMA_CheckFifoParam+0x70>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	08008725 	.word	0x08008725
 8008718:	0800872b 	.word	0x0800872b
 800871c:	08008725 	.word	0x08008725
 8008720:	0800873d 	.word	0x0800873d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	73fb      	strb	r3, [r7, #15]
        break;
 8008728:	e030      	b.n	800878c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d025      	beq.n	8008782 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800873a:	e022      	b.n	8008782 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008744:	d11f      	bne.n	8008786 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800874a:	e01c      	b.n	8008786 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008750:	2b02      	cmp	r3, #2
 8008752:	d902      	bls.n	800875a <DMA_CheckFifoParam+0xb6>
 8008754:	2b03      	cmp	r3, #3
 8008756:	d003      	beq.n	8008760 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008758:	e018      	b.n	800878c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	73fb      	strb	r3, [r7, #15]
        break;
 800875e:	e015      	b.n	800878c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00e      	beq.n	800878a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	73fb      	strb	r3, [r7, #15]
    break;
 8008770:	e00b      	b.n	800878a <DMA_CheckFifoParam+0xe6>
        break;
 8008772:	bf00      	nop
 8008774:	e00a      	b.n	800878c <DMA_CheckFifoParam+0xe8>
        break;
 8008776:	bf00      	nop
 8008778:	e008      	b.n	800878c <DMA_CheckFifoParam+0xe8>
        break;
 800877a:	bf00      	nop
 800877c:	e006      	b.n	800878c <DMA_CheckFifoParam+0xe8>
        break;
 800877e:	bf00      	nop
 8008780:	e004      	b.n	800878c <DMA_CheckFifoParam+0xe8>
        break;
 8008782:	bf00      	nop
 8008784:	e002      	b.n	800878c <DMA_CheckFifoParam+0xe8>
        break;
 8008786:	bf00      	nop
 8008788:	e000      	b.n	800878c <DMA_CheckFifoParam+0xe8>
    break;
 800878a:	bf00      	nop
    }
  }

  return status;
 800878c:	7bfb      	ldrb	r3, [r7, #15]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop

0800879c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a38      	ldr	r2, [pc, #224]	; (8008890 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d022      	beq.n	80087fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a36      	ldr	r2, [pc, #216]	; (8008894 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d01d      	beq.n	80087fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a35      	ldr	r2, [pc, #212]	; (8008898 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d018      	beq.n	80087fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a33      	ldr	r2, [pc, #204]	; (800889c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d013      	beq.n	80087fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a32      	ldr	r2, [pc, #200]	; (80088a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00e      	beq.n	80087fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a30      	ldr	r2, [pc, #192]	; (80088a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d009      	beq.n	80087fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a2f      	ldr	r2, [pc, #188]	; (80088a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d004      	beq.n	80087fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a2d      	ldr	r2, [pc, #180]	; (80088ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d101      	bne.n	80087fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e000      	b.n	8008800 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80087fe:	2300      	movs	r3, #0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d01a      	beq.n	800883a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	b2db      	uxtb	r3, r3
 800880a:	3b08      	subs	r3, #8
 800880c:	4a28      	ldr	r2, [pc, #160]	; (80088b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800880e:	fba2 2303 	umull	r2, r3, r2, r3
 8008812:	091b      	lsrs	r3, r3, #4
 8008814:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	4b26      	ldr	r3, [pc, #152]	; (80088b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	461a      	mov	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a24      	ldr	r2, [pc, #144]	; (80088b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008828:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f003 031f 	and.w	r3, r3, #31
 8008830:	2201      	movs	r2, #1
 8008832:	409a      	lsls	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008838:	e024      	b.n	8008884 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	3b10      	subs	r3, #16
 8008842:	4a1e      	ldr	r2, [pc, #120]	; (80088bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008844:	fba2 2303 	umull	r2, r3, r2, r3
 8008848:	091b      	lsrs	r3, r3, #4
 800884a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	4a1c      	ldr	r2, [pc, #112]	; (80088c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d806      	bhi.n	8008862 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	4a1b      	ldr	r2, [pc, #108]	; (80088c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d902      	bls.n	8008862 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3308      	adds	r3, #8
 8008860:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	4b18      	ldr	r3, [pc, #96]	; (80088c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	461a      	mov	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a16      	ldr	r2, [pc, #88]	; (80088cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008874:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f003 031f 	and.w	r3, r3, #31
 800887c:	2201      	movs	r2, #1
 800887e:	409a      	lsls	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008884:	bf00      	nop
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	58025408 	.word	0x58025408
 8008894:	5802541c 	.word	0x5802541c
 8008898:	58025430 	.word	0x58025430
 800889c:	58025444 	.word	0x58025444
 80088a0:	58025458 	.word	0x58025458
 80088a4:	5802546c 	.word	0x5802546c
 80088a8:	58025480 	.word	0x58025480
 80088ac:	58025494 	.word	0x58025494
 80088b0:	cccccccd 	.word	0xcccccccd
 80088b4:	16009600 	.word	0x16009600
 80088b8:	58025880 	.word	0x58025880
 80088bc:	aaaaaaab 	.word	0xaaaaaaab
 80088c0:	400204b8 	.word	0x400204b8
 80088c4:	4002040f 	.word	0x4002040f
 80088c8:	10008200 	.word	0x10008200
 80088cc:	40020880 	.word	0x40020880

080088d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d04a      	beq.n	800897c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d847      	bhi.n	800897c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a25      	ldr	r2, [pc, #148]	; (8008988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d022      	beq.n	800893c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a24      	ldr	r2, [pc, #144]	; (800898c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d01d      	beq.n	800893c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a22      	ldr	r2, [pc, #136]	; (8008990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d018      	beq.n	800893c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a21      	ldr	r2, [pc, #132]	; (8008994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d013      	beq.n	800893c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a1f      	ldr	r2, [pc, #124]	; (8008998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d00e      	beq.n	800893c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a1e      	ldr	r2, [pc, #120]	; (800899c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d009      	beq.n	800893c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a1c      	ldr	r2, [pc, #112]	; (80089a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d004      	beq.n	800893c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a1b      	ldr	r2, [pc, #108]	; (80089a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d101      	bne.n	8008940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800893c:	2301      	movs	r3, #1
 800893e:	e000      	b.n	8008942 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008940:	2300      	movs	r3, #0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4b17      	ldr	r3, [pc, #92]	; (80089a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800894a:	4413      	add	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	461a      	mov	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a15      	ldr	r2, [pc, #84]	; (80089ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008958:	671a      	str	r2, [r3, #112]	; 0x70
 800895a:	e009      	b.n	8008970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4b14      	ldr	r3, [pc, #80]	; (80089b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008960:	4413      	add	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	461a      	mov	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a11      	ldr	r2, [pc, #68]	; (80089b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800896e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3b01      	subs	r3, #1
 8008974:	2201      	movs	r2, #1
 8008976:	409a      	lsls	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800897c:	bf00      	nop
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	58025408 	.word	0x58025408
 800898c:	5802541c 	.word	0x5802541c
 8008990:	58025430 	.word	0x58025430
 8008994:	58025444 	.word	0x58025444
 8008998:	58025458 	.word	0x58025458
 800899c:	5802546c 	.word	0x5802546c
 80089a0:	58025480 	.word	0x58025480
 80089a4:	58025494 	.word	0x58025494
 80089a8:	1600963f 	.word	0x1600963f
 80089ac:	58025940 	.word	0x58025940
 80089b0:	1000823f 	.word	0x1000823f
 80089b4:	40020940 	.word	0x40020940

080089b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b089      	sub	sp, #36	; 0x24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089c6:	4b89      	ldr	r3, [pc, #548]	; (8008bec <HAL_GPIO_Init+0x234>)
 80089c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089ca:	e194      	b.n	8008cf6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	2101      	movs	r1, #1
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	fa01 f303 	lsl.w	r3, r1, r3
 80089d8:	4013      	ands	r3, r2
 80089da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 8186 	beq.w	8008cf0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d005      	beq.n	80089fc <HAL_GPIO_Init+0x44>
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f003 0303 	and.w	r3, r3, #3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d130      	bne.n	8008a5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	2203      	movs	r2, #3
 8008a08:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	4013      	ands	r3, r2
 8008a12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	68da      	ldr	r2, [r3, #12]
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	005b      	lsls	r3, r3, #1
 8008a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a32:	2201      	movs	r2, #1
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3a:	43db      	mvns	r3, r3
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	091b      	lsrs	r3, r3, #4
 8008a48:	f003 0201 	and.w	r2, r3, #1
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a52:	69ba      	ldr	r2, [r7, #24]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d017      	beq.n	8008a9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	2203      	movs	r2, #3
 8008a76:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d123      	bne.n	8008aee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	08da      	lsrs	r2, r3, #3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	3208      	adds	r2, #8
 8008aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	220f      	movs	r2, #15
 8008abe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac2:	43db      	mvns	r3, r3
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	691a      	ldr	r2, [r3, #16]
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	f003 0307 	and.w	r3, r3, #7
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	08da      	lsrs	r2, r3, #3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3208      	adds	r2, #8
 8008ae8:	69b9      	ldr	r1, [r7, #24]
 8008aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	2203      	movs	r2, #3
 8008afa:	fa02 f303 	lsl.w	r3, r2, r3
 8008afe:	43db      	mvns	r3, r3
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	4013      	ands	r3, r2
 8008b04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f003 0203 	and.w	r2, r3, #3
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	005b      	lsls	r3, r3, #1
 8008b12:	fa02 f303 	lsl.w	r3, r2, r3
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 80e0 	beq.w	8008cf0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b30:	4b2f      	ldr	r3, [pc, #188]	; (8008bf0 <HAL_GPIO_Init+0x238>)
 8008b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b36:	4a2e      	ldr	r2, [pc, #184]	; (8008bf0 <HAL_GPIO_Init+0x238>)
 8008b38:	f043 0302 	orr.w	r3, r3, #2
 8008b3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b40:	4b2b      	ldr	r3, [pc, #172]	; (8008bf0 <HAL_GPIO_Init+0x238>)
 8008b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b4e:	4a29      	ldr	r2, [pc, #164]	; (8008bf4 <HAL_GPIO_Init+0x23c>)
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	089b      	lsrs	r3, r3, #2
 8008b54:	3302      	adds	r3, #2
 8008b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	f003 0303 	and.w	r3, r3, #3
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	220f      	movs	r2, #15
 8008b66:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6a:	43db      	mvns	r3, r3
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a20      	ldr	r2, [pc, #128]	; (8008bf8 <HAL_GPIO_Init+0x240>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d052      	beq.n	8008c20 <HAL_GPIO_Init+0x268>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a1f      	ldr	r2, [pc, #124]	; (8008bfc <HAL_GPIO_Init+0x244>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d031      	beq.n	8008be6 <HAL_GPIO_Init+0x22e>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a1e      	ldr	r2, [pc, #120]	; (8008c00 <HAL_GPIO_Init+0x248>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d02b      	beq.n	8008be2 <HAL_GPIO_Init+0x22a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <HAL_GPIO_Init+0x24c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d025      	beq.n	8008bde <HAL_GPIO_Init+0x226>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a1c      	ldr	r2, [pc, #112]	; (8008c08 <HAL_GPIO_Init+0x250>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d01f      	beq.n	8008bda <HAL_GPIO_Init+0x222>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a1b      	ldr	r2, [pc, #108]	; (8008c0c <HAL_GPIO_Init+0x254>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d019      	beq.n	8008bd6 <HAL_GPIO_Init+0x21e>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1a      	ldr	r2, [pc, #104]	; (8008c10 <HAL_GPIO_Init+0x258>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d013      	beq.n	8008bd2 <HAL_GPIO_Init+0x21a>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a19      	ldr	r2, [pc, #100]	; (8008c14 <HAL_GPIO_Init+0x25c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d00d      	beq.n	8008bce <HAL_GPIO_Init+0x216>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a18      	ldr	r2, [pc, #96]	; (8008c18 <HAL_GPIO_Init+0x260>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d007      	beq.n	8008bca <HAL_GPIO_Init+0x212>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a17      	ldr	r2, [pc, #92]	; (8008c1c <HAL_GPIO_Init+0x264>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d101      	bne.n	8008bc6 <HAL_GPIO_Init+0x20e>
 8008bc2:	2309      	movs	r3, #9
 8008bc4:	e02d      	b.n	8008c22 <HAL_GPIO_Init+0x26a>
 8008bc6:	230a      	movs	r3, #10
 8008bc8:	e02b      	b.n	8008c22 <HAL_GPIO_Init+0x26a>
 8008bca:	2308      	movs	r3, #8
 8008bcc:	e029      	b.n	8008c22 <HAL_GPIO_Init+0x26a>
 8008bce:	2307      	movs	r3, #7
 8008bd0:	e027      	b.n	8008c22 <HAL_GPIO_Init+0x26a>
 8008bd2:	2306      	movs	r3, #6
 8008bd4:	e025      	b.n	8008c22 <HAL_GPIO_Init+0x26a>
 8008bd6:	2305      	movs	r3, #5
 8008bd8:	e023      	b.n	8008c22 <HAL_GPIO_Init+0x26a>
 8008bda:	2304      	movs	r3, #4
 8008bdc:	e021      	b.n	8008c22 <HAL_GPIO_Init+0x26a>
 8008bde:	2303      	movs	r3, #3
 8008be0:	e01f      	b.n	8008c22 <HAL_GPIO_Init+0x26a>
 8008be2:	2302      	movs	r3, #2
 8008be4:	e01d      	b.n	8008c22 <HAL_GPIO_Init+0x26a>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e01b      	b.n	8008c22 <HAL_GPIO_Init+0x26a>
 8008bea:	bf00      	nop
 8008bec:	58000080 	.word	0x58000080
 8008bf0:	58024400 	.word	0x58024400
 8008bf4:	58000400 	.word	0x58000400
 8008bf8:	58020000 	.word	0x58020000
 8008bfc:	58020400 	.word	0x58020400
 8008c00:	58020800 	.word	0x58020800
 8008c04:	58020c00 	.word	0x58020c00
 8008c08:	58021000 	.word	0x58021000
 8008c0c:	58021400 	.word	0x58021400
 8008c10:	58021800 	.word	0x58021800
 8008c14:	58021c00 	.word	0x58021c00
 8008c18:	58022000 	.word	0x58022000
 8008c1c:	58022400 	.word	0x58022400
 8008c20:	2300      	movs	r3, #0
 8008c22:	69fa      	ldr	r2, [r7, #28]
 8008c24:	f002 0203 	and.w	r2, r2, #3
 8008c28:	0092      	lsls	r2, r2, #2
 8008c2a:	4093      	lsls	r3, r2
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c32:	4938      	ldr	r1, [pc, #224]	; (8008d14 <HAL_GPIO_Init+0x35c>)
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	089b      	lsrs	r3, r3, #2
 8008c38:	3302      	adds	r3, #2
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	43db      	mvns	r3, r3
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	4013      	ands	r3, r2
 8008c50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	43db      	mvns	r3, r3
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	43db      	mvns	r3, r3
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	43db      	mvns	r3, r3
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f47f ae63 	bne.w	80089cc <HAL_GPIO_Init+0x14>
  }
}
 8008d06:	bf00      	nop
 8008d08:	bf00      	nop
 8008d0a:	3724      	adds	r7, #36	; 0x24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	58000400 	.word	0x58000400

08008d18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	691a      	ldr	r2, [r3, #16]
 8008d28:	887b      	ldrh	r3, [r7, #2]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d002      	beq.n	8008d36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
 8008d34:	e001      	b.n	8008d3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	807b      	strh	r3, [r7, #2]
 8008d54:	4613      	mov	r3, r2
 8008d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d58:	787b      	ldrb	r3, [r7, #1]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d5e:	887a      	ldrh	r2, [r7, #2]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d64:	e003      	b.n	8008d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d66:	887b      	ldrh	r3, [r7, #2]
 8008d68:	041a      	lsls	r2, r3, #16
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	619a      	str	r2, [r3, #24]
}
 8008d6e:	bf00      	nop
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
	...

08008d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e08b      	b.n	8008ea6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d106      	bne.n	8008da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7fa f8d2 	bl	8002f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2224      	movs	r2, #36	; 0x24
 8008dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 0201 	bic.w	r2, r2, #1
 8008dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008dcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ddc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d107      	bne.n	8008df6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689a      	ldr	r2, [r3, #8]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008df2:	609a      	str	r2, [r3, #8]
 8008df4:	e006      	b.n	8008e04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008e02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d108      	bne.n	8008e1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e1a:	605a      	str	r2, [r3, #4]
 8008e1c:	e007      	b.n	8008e2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6859      	ldr	r1, [r3, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	4b1d      	ldr	r3, [pc, #116]	; (8008eb0 <HAL_I2C_Init+0x134>)
 8008e3a:	430b      	orrs	r3, r1
 8008e3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691a      	ldr	r2, [r3, #16]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	69d9      	ldr	r1, [r3, #28]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a1a      	ldr	r2, [r3, #32]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	430a      	orrs	r2, r1
 8008e76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f042 0201 	orr.w	r2, r2, #1
 8008e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	02008000 	.word	0x02008000

08008eb4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af02      	add	r7, sp, #8
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	607a      	str	r2, [r7, #4]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	817b      	strh	r3, [r7, #10]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	f040 80fd 	bne.w	80090d0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_I2C_Master_Transmit+0x30>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e0f6      	b.n	80090d2 <HAL_I2C_Master_Transmit+0x21e>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008eec:	f7fa fe00 	bl	8003af0 <HAL_GetTick>
 8008ef0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	2319      	movs	r3, #25
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f000 fa0a 	bl	8009318 <I2C_WaitOnFlagUntilTimeout>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e0e1      	b.n	80090d2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2221      	movs	r2, #33	; 0x21
 8008f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2210      	movs	r2, #16
 8008f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	893a      	ldrh	r2, [r7, #8]
 8008f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	2bff      	cmp	r3, #255	; 0xff
 8008f3e:	d906      	bls.n	8008f4e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	22ff      	movs	r2, #255	; 0xff
 8008f44:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008f46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	e007      	b.n	8008f5e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008f58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f5c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d024      	beq.n	8008fb0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	781a      	ldrb	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	3b01      	subs	r3, #1
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	8979      	ldrh	r1, [r7, #10]
 8008fa2:	4b4e      	ldr	r3, [pc, #312]	; (80090dc <HAL_I2C_Master_Transmit+0x228>)
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 fc05 	bl	80097b8 <I2C_TransferConfig>
 8008fae:	e066      	b.n	800907e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	8979      	ldrh	r1, [r7, #10]
 8008fb8:	4b48      	ldr	r3, [pc, #288]	; (80090dc <HAL_I2C_Master_Transmit+0x228>)
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 fbfa 	bl	80097b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008fc4:	e05b      	b.n	800907e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	6a39      	ldr	r1, [r7, #32]
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 f9fd 	bl	80093ca <I2C_WaitOnTXISFlagUntilTimeout>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e07b      	b.n	80090d2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	781a      	ldrb	r2, [r3, #0]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009002:	3b01      	subs	r3, #1
 8009004:	b29a      	uxth	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800900e:	b29b      	uxth	r3, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d034      	beq.n	800907e <HAL_I2C_Master_Transmit+0x1ca>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009018:	2b00      	cmp	r3, #0
 800901a:	d130      	bne.n	800907e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	2200      	movs	r2, #0
 8009024:	2180      	movs	r1, #128	; 0x80
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 f976 	bl	8009318 <I2C_WaitOnFlagUntilTimeout>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e04d      	b.n	80090d2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800903a:	b29b      	uxth	r3, r3
 800903c:	2bff      	cmp	r3, #255	; 0xff
 800903e:	d90e      	bls.n	800905e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	22ff      	movs	r2, #255	; 0xff
 8009044:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800904a:	b2da      	uxtb	r2, r3
 800904c:	8979      	ldrh	r1, [r7, #10]
 800904e:	2300      	movs	r3, #0
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 fbae 	bl	80097b8 <I2C_TransferConfig>
 800905c:	e00f      	b.n	800907e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009062:	b29a      	uxth	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800906c:	b2da      	uxtb	r2, r3
 800906e:	8979      	ldrh	r1, [r7, #10]
 8009070:	2300      	movs	r3, #0
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 fb9d 	bl	80097b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009082:	b29b      	uxth	r3, r3
 8009084:	2b00      	cmp	r3, #0
 8009086:	d19e      	bne.n	8008fc6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	6a39      	ldr	r1, [r7, #32]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 f9e3 	bl	8009458 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e01a      	b.n	80090d2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2220      	movs	r2, #32
 80090a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6859      	ldr	r1, [r3, #4]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <HAL_I2C_Master_Transmit+0x22c>)
 80090b0:	400b      	ands	r3, r1
 80090b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	e000      	b.n	80090d2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80090d0:	2302      	movs	r3, #2
  }
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3718      	adds	r7, #24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	80002000 	.word	0x80002000
 80090e0:	fe00e800 	.word	0xfe00e800

080090e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	607a      	str	r2, [r7, #4]
 80090ee:	461a      	mov	r2, r3
 80090f0:	460b      	mov	r3, r1
 80090f2:	817b      	strh	r3, [r7, #10]
 80090f4:	4613      	mov	r3, r2
 80090f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b20      	cmp	r3, #32
 8009102:	f040 80db 	bne.w	80092bc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_I2C_Master_Receive+0x30>
 8009110:	2302      	movs	r3, #2
 8009112:	e0d4      	b.n	80092be <HAL_I2C_Master_Receive+0x1da>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800911c:	f7fa fce8 	bl	8003af0 <HAL_GetTick>
 8009120:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	2319      	movs	r3, #25
 8009128:	2201      	movs	r2, #1
 800912a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 f8f2 	bl	8009318 <I2C_WaitOnFlagUntilTimeout>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e0bf      	b.n	80092be <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2222      	movs	r2, #34	; 0x22
 8009142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2210      	movs	r2, #16
 800914a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	893a      	ldrh	r2, [r7, #8]
 800915e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800916a:	b29b      	uxth	r3, r3
 800916c:	2bff      	cmp	r3, #255	; 0xff
 800916e:	d90e      	bls.n	800918e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	22ff      	movs	r2, #255	; 0xff
 8009174:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800917a:	b2da      	uxtb	r2, r3
 800917c:	8979      	ldrh	r1, [r7, #10]
 800917e:	4b52      	ldr	r3, [pc, #328]	; (80092c8 <HAL_I2C_Master_Receive+0x1e4>)
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 fb16 	bl	80097b8 <I2C_TransferConfig>
 800918c:	e06d      	b.n	800926a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009192:	b29a      	uxth	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800919c:	b2da      	uxtb	r2, r3
 800919e:	8979      	ldrh	r1, [r7, #10]
 80091a0:	4b49      	ldr	r3, [pc, #292]	; (80092c8 <HAL_I2C_Master_Receive+0x1e4>)
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 fb05 	bl	80097b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80091ae:	e05c      	b.n	800926a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	6a39      	ldr	r1, [r7, #32]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 f993 	bl	80094e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e07c      	b.n	80092be <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	b2d2      	uxtb	r2, r2
 80091d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	3b01      	subs	r3, #1
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d034      	beq.n	800926a <HAL_I2C_Master_Receive+0x186>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009204:	2b00      	cmp	r3, #0
 8009206:	d130      	bne.n	800926a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	2200      	movs	r2, #0
 8009210:	2180      	movs	r1, #128	; 0x80
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 f880 	bl	8009318 <I2C_WaitOnFlagUntilTimeout>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e04d      	b.n	80092be <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009226:	b29b      	uxth	r3, r3
 8009228:	2bff      	cmp	r3, #255	; 0xff
 800922a:	d90e      	bls.n	800924a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	22ff      	movs	r2, #255	; 0xff
 8009230:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009236:	b2da      	uxtb	r2, r3
 8009238:	8979      	ldrh	r1, [r7, #10]
 800923a:	2300      	movs	r3, #0
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 fab8 	bl	80097b8 <I2C_TransferConfig>
 8009248:	e00f      	b.n	800926a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800924e:	b29a      	uxth	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009258:	b2da      	uxtb	r2, r3
 800925a:	8979      	ldrh	r1, [r7, #10]
 800925c:	2300      	movs	r3, #0
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 faa7 	bl	80097b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926e:	b29b      	uxth	r3, r3
 8009270:	2b00      	cmp	r3, #0
 8009272:	d19d      	bne.n	80091b0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	6a39      	ldr	r1, [r7, #32]
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 f8ed 	bl	8009458 <I2C_WaitOnSTOPFlagUntilTimeout>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e01a      	b.n	80092be <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2220      	movs	r2, #32
 800928e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6859      	ldr	r1, [r3, #4]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	4b0c      	ldr	r3, [pc, #48]	; (80092cc <HAL_I2C_Master_Receive+0x1e8>)
 800929c:	400b      	ands	r3, r1
 800929e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2220      	movs	r2, #32
 80092a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	e000      	b.n	80092be <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80092bc:	2302      	movs	r3, #2
  }
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3718      	adds	r7, #24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	80002400 	.word	0x80002400
 80092cc:	fe00e800 	.word	0xfe00e800

080092d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	f003 0302 	and.w	r3, r3, #2
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d103      	bne.n	80092ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2200      	movs	r2, #0
 80092ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d007      	beq.n	800930c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0201 	orr.w	r2, r2, #1
 800930a:	619a      	str	r2, [r3, #24]
  }
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	603b      	str	r3, [r7, #0]
 8009324:	4613      	mov	r3, r2
 8009326:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009328:	e03b      	b.n	80093a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 f962 	bl	80095f8 <I2C_IsErrorOccurred>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e041      	b.n	80093c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009344:	d02d      	beq.n	80093a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009346:	f7fa fbd3 	bl	8003af0 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d302      	bcc.n	800935c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d122      	bne.n	80093a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	4013      	ands	r3, r2
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	429a      	cmp	r2, r3
 800936a:	bf0c      	ite	eq
 800936c:	2301      	moveq	r3, #1
 800936e:	2300      	movne	r3, #0
 8009370:	b2db      	uxtb	r3, r3
 8009372:	461a      	mov	r2, r3
 8009374:	79fb      	ldrb	r3, [r7, #7]
 8009376:	429a      	cmp	r2, r3
 8009378:	d113      	bne.n	80093a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937e:	f043 0220 	orr.w	r2, r3, #32
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2220      	movs	r2, #32
 800938a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e00f      	b.n	80093c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	699a      	ldr	r2, [r3, #24]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	4013      	ands	r3, r2
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	bf0c      	ite	eq
 80093b2:	2301      	moveq	r3, #1
 80093b4:	2300      	movne	r3, #0
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	461a      	mov	r2, r3
 80093ba:	79fb      	ldrb	r3, [r7, #7]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d0b4      	beq.n	800932a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80093d6:	e033      	b.n	8009440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	68b9      	ldr	r1, [r7, #8]
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 f90b 	bl	80095f8 <I2C_IsErrorOccurred>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e031      	b.n	8009450 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f2:	d025      	beq.n	8009440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093f4:	f7fa fb7c 	bl	8003af0 <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	429a      	cmp	r2, r3
 8009402:	d302      	bcc.n	800940a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d11a      	bne.n	8009440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b02      	cmp	r3, #2
 8009416:	d013      	beq.n	8009440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941c:	f043 0220 	orr.w	r2, r3, #32
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2220      	movs	r2, #32
 8009428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e007      	b.n	8009450 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	f003 0302 	and.w	r3, r3, #2
 800944a:	2b02      	cmp	r3, #2
 800944c:	d1c4      	bne.n	80093d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009464:	e02f      	b.n	80094c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	68b9      	ldr	r1, [r7, #8]
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 f8c4 	bl	80095f8 <I2C_IsErrorOccurred>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e02d      	b.n	80094d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800947a:	f7fa fb39 	bl	8003af0 <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	429a      	cmp	r2, r3
 8009488:	d302      	bcc.n	8009490 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d11a      	bne.n	80094c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b20      	cmp	r3, #32
 800949c:	d013      	beq.n	80094c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a2:	f043 0220 	orr.w	r2, r3, #32
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e007      	b.n	80094d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	f003 0320 	and.w	r3, r3, #32
 80094d0:	2b20      	cmp	r3, #32
 80094d2:	d1c8      	bne.n	8009466 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
	...

080094e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80094f0:	e071      	b.n	80095d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	68b9      	ldr	r1, [r7, #8]
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f000 f87e 	bl	80095f8 <I2C_IsErrorOccurred>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	f003 0320 	and.w	r3, r3, #32
 8009510:	2b20      	cmp	r3, #32
 8009512:	d13b      	bne.n	800958c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009514:	7dfb      	ldrb	r3, [r7, #23]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d138      	bne.n	800958c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	f003 0304 	and.w	r3, r3, #4
 8009524:	2b04      	cmp	r3, #4
 8009526:	d105      	bne.n	8009534 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	f003 0310 	and.w	r3, r3, #16
 800953e:	2b10      	cmp	r3, #16
 8009540:	d121      	bne.n	8009586 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2210      	movs	r2, #16
 8009548:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2204      	movs	r2, #4
 800954e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2220      	movs	r2, #32
 8009556:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6859      	ldr	r1, [r3, #4]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	4b24      	ldr	r3, [pc, #144]	; (80095f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009564:	400b      	ands	r3, r1
 8009566:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2220      	movs	r2, #32
 800956c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	75fb      	strb	r3, [r7, #23]
 8009584:	e002      	b.n	800958c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800958c:	f7fa fab0 	bl	8003af0 <HAL_GetTick>
 8009590:	4602      	mov	r2, r0
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	429a      	cmp	r2, r3
 800959a:	d302      	bcc.n	80095a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d119      	bne.n	80095d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d116      	bne.n	80095d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	f003 0304 	and.w	r3, r3, #4
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d00f      	beq.n	80095d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ba:	f043 0220 	orr.w	r2, r3, #32
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2220      	movs	r2, #32
 80095c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	f003 0304 	and.w	r3, r3, #4
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	d002      	beq.n	80095ea <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d083      	beq.n	80094f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	fe00e800 	.word	0xfe00e800

080095f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08a      	sub	sp, #40	; 0x28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	f003 0310 	and.w	r3, r3, #16
 8009620:	2b00      	cmp	r3, #0
 8009622:	d068      	beq.n	80096f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2210      	movs	r2, #16
 800962a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800962c:	e049      	b.n	80096c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009634:	d045      	beq.n	80096c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009636:	f7fa fa5b 	bl	8003af0 <HAL_GetTick>
 800963a:	4602      	mov	r2, r0
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	429a      	cmp	r2, r3
 8009644:	d302      	bcc.n	800964c <I2C_IsErrorOccurred+0x54>
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d13a      	bne.n	80096c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009656:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800965e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800966a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800966e:	d121      	bne.n	80096b4 <I2C_IsErrorOccurred+0xbc>
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009676:	d01d      	beq.n	80096b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009678:	7cfb      	ldrb	r3, [r7, #19]
 800967a:	2b20      	cmp	r3, #32
 800967c:	d01a      	beq.n	80096b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800968c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800968e:	f7fa fa2f 	bl	8003af0 <HAL_GetTick>
 8009692:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009694:	e00e      	b.n	80096b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009696:	f7fa fa2b 	bl	8003af0 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	2b19      	cmp	r3, #25
 80096a2:	d907      	bls.n	80096b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	f043 0320 	orr.w	r3, r3, #32
 80096aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80096b2:	e006      	b.n	80096c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	f003 0320 	and.w	r3, r3, #32
 80096be:	2b20      	cmp	r3, #32
 80096c0:	d1e9      	bne.n	8009696 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	f003 0320 	and.w	r3, r3, #32
 80096cc:	2b20      	cmp	r3, #32
 80096ce:	d003      	beq.n	80096d8 <I2C_IsErrorOccurred+0xe0>
 80096d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d0aa      	beq.n	800962e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80096d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d103      	bne.n	80096e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2220      	movs	r2, #32
 80096e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	f043 0304 	orr.w	r3, r3, #4
 80096ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00b      	beq.n	8009720 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	f043 0301 	orr.w	r3, r3, #1
 800970e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009718:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00b      	beq.n	8009742 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	f043 0308 	orr.w	r3, r3, #8
 8009730:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800973a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	f043 0302 	orr.w	r3, r3, #2
 8009752:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800975c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01c      	beq.n	80097a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f7ff fdaf 	bl	80092d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6859      	ldr	r1, [r3, #4]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	4b0d      	ldr	r3, [pc, #52]	; (80097b4 <I2C_IsErrorOccurred+0x1bc>)
 800977e:	400b      	ands	r3, r1
 8009780:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	431a      	orrs	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2220      	movs	r2, #32
 8009792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80097a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3728      	adds	r7, #40	; 0x28
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	fe00e800 	.word	0xfe00e800

080097b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	607b      	str	r3, [r7, #4]
 80097c2:	460b      	mov	r3, r1
 80097c4:	817b      	strh	r3, [r7, #10]
 80097c6:	4613      	mov	r3, r2
 80097c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097ca:	897b      	ldrh	r3, [r7, #10]
 80097cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80097d0:	7a7b      	ldrb	r3, [r7, #9]
 80097d2:	041b      	lsls	r3, r3, #16
 80097d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	0d5b      	lsrs	r3, r3, #21
 80097f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80097f6:	4b08      	ldr	r3, [pc, #32]	; (8009818 <I2C_TransferConfig+0x60>)
 80097f8:	430b      	orrs	r3, r1
 80097fa:	43db      	mvns	r3, r3
 80097fc:	ea02 0103 	and.w	r1, r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	430a      	orrs	r2, r1
 8009808:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800980a:	bf00      	nop
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	03ff63ff 	.word	0x03ff63ff

0800981c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b20      	cmp	r3, #32
 8009830:	d138      	bne.n	80098a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009838:	2b01      	cmp	r3, #1
 800983a:	d101      	bne.n	8009840 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800983c:	2302      	movs	r3, #2
 800983e:	e032      	b.n	80098a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2224      	movs	r2, #36	; 0x24
 800984c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f022 0201 	bic.w	r2, r2, #1
 800985e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800986e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6819      	ldr	r1, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	430a      	orrs	r2, r1
 800987e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f042 0201 	orr.w	r2, r2, #1
 800988e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2220      	movs	r2, #32
 8009894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	e000      	b.n	80098a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80098a4:	2302      	movs	r3, #2
  }
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b20      	cmp	r3, #32
 80098c6:	d139      	bne.n	800993c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d101      	bne.n	80098d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80098d2:	2302      	movs	r3, #2
 80098d4:	e033      	b.n	800993e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2224      	movs	r2, #36	; 0x24
 80098e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0201 	bic.w	r2, r2, #1
 80098f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009904:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	021b      	lsls	r3, r3, #8
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4313      	orrs	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f042 0201 	orr.w	r2, r2, #1
 8009926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2220      	movs	r2, #32
 800992c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	e000      	b.n	800993e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800993c:	2302      	movs	r3, #2
  }
}
 800993e:	4618      	mov	r0, r3
 8009940:	3714      	adds	r7, #20
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
	...

0800994c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009954:	4b0d      	ldr	r3, [pc, #52]	; (800998c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009956:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800995a:	4a0c      	ldr	r2, [pc, #48]	; (800998c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800995c:	f043 0302 	orr.w	r3, r3, #2
 8009960:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009964:	4b09      	ldr	r3, [pc, #36]	; (800998c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009966:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	60fb      	str	r3, [r7, #12]
 8009970:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009972:	4b07      	ldr	r3, [pc, #28]	; (8009990 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	4906      	ldr	r1, [pc, #24]	; (8009990 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4313      	orrs	r3, r2
 800997c:	604b      	str	r3, [r1, #4]
}
 800997e:	bf00      	nop
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	58024400 	.word	0x58024400
 8009990:	58000400 	.word	0x58000400

08009994 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800999c:	4b19      	ldr	r3, [pc, #100]	; (8009a04 <HAL_PWREx_ConfigSupply+0x70>)
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f003 0304 	and.w	r3, r3, #4
 80099a4:	2b04      	cmp	r3, #4
 80099a6:	d00a      	beq.n	80099be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80099a8:	4b16      	ldr	r3, [pc, #88]	; (8009a04 <HAL_PWREx_ConfigSupply+0x70>)
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	f003 0307 	and.w	r3, r3, #7
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d001      	beq.n	80099ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e01f      	b.n	80099fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	e01d      	b.n	80099fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80099be:	4b11      	ldr	r3, [pc, #68]	; (8009a04 <HAL_PWREx_ConfigSupply+0x70>)
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	f023 0207 	bic.w	r2, r3, #7
 80099c6:	490f      	ldr	r1, [pc, #60]	; (8009a04 <HAL_PWREx_ConfigSupply+0x70>)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80099ce:	f7fa f88f 	bl	8003af0 <HAL_GetTick>
 80099d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80099d4:	e009      	b.n	80099ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80099d6:	f7fa f88b 	bl	8003af0 <HAL_GetTick>
 80099da:	4602      	mov	r2, r0
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099e4:	d901      	bls.n	80099ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e007      	b.n	80099fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80099ea:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <HAL_PWREx_ConfigSupply+0x70>)
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099f6:	d1ee      	bne.n	80099d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	58024800 	.word	0x58024800

08009a08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08c      	sub	sp, #48	; 0x30
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d102      	bne.n	8009a1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	f000 bc48 	b.w	800a2ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 8088 	beq.w	8009b3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a2a:	4b99      	ldr	r3, [pc, #612]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a34:	4b96      	ldr	r3, [pc, #600]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a38:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3c:	2b10      	cmp	r3, #16
 8009a3e:	d007      	beq.n	8009a50 <HAL_RCC_OscConfig+0x48>
 8009a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a42:	2b18      	cmp	r3, #24
 8009a44:	d111      	bne.n	8009a6a <HAL_RCC_OscConfig+0x62>
 8009a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a48:	f003 0303 	and.w	r3, r3, #3
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d10c      	bne.n	8009a6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a50:	4b8f      	ldr	r3, [pc, #572]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d06d      	beq.n	8009b38 <HAL_RCC_OscConfig+0x130>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d169      	bne.n	8009b38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	f000 bc21 	b.w	800a2ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a72:	d106      	bne.n	8009a82 <HAL_RCC_OscConfig+0x7a>
 8009a74:	4b86      	ldr	r3, [pc, #536]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a85      	ldr	r2, [pc, #532]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	e02e      	b.n	8009ae0 <HAL_RCC_OscConfig+0xd8>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10c      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x9c>
 8009a8a:	4b81      	ldr	r3, [pc, #516]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a80      	ldr	r2, [pc, #512]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a94:	6013      	str	r3, [r2, #0]
 8009a96:	4b7e      	ldr	r3, [pc, #504]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a7d      	ldr	r2, [pc, #500]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009aa0:	6013      	str	r3, [r2, #0]
 8009aa2:	e01d      	b.n	8009ae0 <HAL_RCC_OscConfig+0xd8>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aac:	d10c      	bne.n	8009ac8 <HAL_RCC_OscConfig+0xc0>
 8009aae:	4b78      	ldr	r3, [pc, #480]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a77      	ldr	r2, [pc, #476]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ab8:	6013      	str	r3, [r2, #0]
 8009aba:	4b75      	ldr	r3, [pc, #468]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a74      	ldr	r2, [pc, #464]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	e00b      	b.n	8009ae0 <HAL_RCC_OscConfig+0xd8>
 8009ac8:	4b71      	ldr	r3, [pc, #452]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a70      	ldr	r2, [pc, #448]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	4b6e      	ldr	r3, [pc, #440]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a6d      	ldr	r2, [pc, #436]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d013      	beq.n	8009b10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ae8:	f7fa f802 	bl	8003af0 <HAL_GetTick>
 8009aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009aee:	e008      	b.n	8009b02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009af0:	f7f9 fffe 	bl	8003af0 <HAL_GetTick>
 8009af4:	4602      	mov	r2, r0
 8009af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	2b64      	cmp	r3, #100	; 0x64
 8009afc:	d901      	bls.n	8009b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e3d4      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b02:	4b63      	ldr	r3, [pc, #396]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d0f0      	beq.n	8009af0 <HAL_RCC_OscConfig+0xe8>
 8009b0e:	e014      	b.n	8009b3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b10:	f7f9 ffee 	bl	8003af0 <HAL_GetTick>
 8009b14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b16:	e008      	b.n	8009b2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b18:	f7f9 ffea 	bl	8003af0 <HAL_GetTick>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	2b64      	cmp	r3, #100	; 0x64
 8009b24:	d901      	bls.n	8009b2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e3c0      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b2a:	4b59      	ldr	r3, [pc, #356]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1f0      	bne.n	8009b18 <HAL_RCC_OscConfig+0x110>
 8009b36:	e000      	b.n	8009b3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 80ca 	beq.w	8009cdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b48:	4b51      	ldr	r3, [pc, #324]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b52:	4b4f      	ldr	r3, [pc, #316]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d007      	beq.n	8009b6e <HAL_RCC_OscConfig+0x166>
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	2b18      	cmp	r3, #24
 8009b62:	d156      	bne.n	8009c12 <HAL_RCC_OscConfig+0x20a>
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	f003 0303 	and.w	r3, r3, #3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d151      	bne.n	8009c12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b6e:	4b48      	ldr	r3, [pc, #288]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f003 0304 	and.w	r3, r3, #4
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d005      	beq.n	8009b86 <HAL_RCC_OscConfig+0x17e>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e392      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b86:	4b42      	ldr	r3, [pc, #264]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f023 0219 	bic.w	r2, r3, #25
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	493f      	ldr	r1, [pc, #252]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b98:	f7f9 ffaa 	bl	8003af0 <HAL_GetTick>
 8009b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b9e:	e008      	b.n	8009bb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ba0:	f7f9 ffa6 	bl	8003af0 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d901      	bls.n	8009bb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e37c      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bb2:	4b37      	ldr	r3, [pc, #220]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0304 	and.w	r3, r3, #4
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d0f0      	beq.n	8009ba0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bbe:	f7f9 ffa3 	bl	8003b08 <HAL_GetREVID>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d817      	bhi.n	8009bfc <HAL_RCC_OscConfig+0x1f4>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	2b40      	cmp	r3, #64	; 0x40
 8009bd2:	d108      	bne.n	8009be6 <HAL_RCC_OscConfig+0x1de>
 8009bd4:	4b2e      	ldr	r3, [pc, #184]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009bdc:	4a2c      	ldr	r2, [pc, #176]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009be2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009be4:	e07a      	b.n	8009cdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009be6:	4b2a      	ldr	r3, [pc, #168]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	031b      	lsls	r3, r3, #12
 8009bf4:	4926      	ldr	r1, [pc, #152]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bfa:	e06f      	b.n	8009cdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bfc:	4b24      	ldr	r3, [pc, #144]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	061b      	lsls	r3, r3, #24
 8009c0a:	4921      	ldr	r1, [pc, #132]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c10:	e064      	b.n	8009cdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d047      	beq.n	8009caa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c1a:	4b1d      	ldr	r3, [pc, #116]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f023 0219 	bic.w	r2, r3, #25
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	491a      	ldr	r1, [pc, #104]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c2c:	f7f9 ff60 	bl	8003af0 <HAL_GetTick>
 8009c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c32:	e008      	b.n	8009c46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c34:	f7f9 ff5c 	bl	8003af0 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d901      	bls.n	8009c46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e332      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c46:	4b12      	ldr	r3, [pc, #72]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0304 	and.w	r3, r3, #4
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0f0      	beq.n	8009c34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c52:	f7f9 ff59 	bl	8003b08 <HAL_GetREVID>
 8009c56:	4603      	mov	r3, r0
 8009c58:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d819      	bhi.n	8009c94 <HAL_RCC_OscConfig+0x28c>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	2b40      	cmp	r3, #64	; 0x40
 8009c66:	d108      	bne.n	8009c7a <HAL_RCC_OscConfig+0x272>
 8009c68:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009c70:	4a07      	ldr	r2, [pc, #28]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c76:	6053      	str	r3, [r2, #4]
 8009c78:	e030      	b.n	8009cdc <HAL_RCC_OscConfig+0x2d4>
 8009c7a:	4b05      	ldr	r3, [pc, #20]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	031b      	lsls	r3, r3, #12
 8009c88:	4901      	ldr	r1, [pc, #4]	; (8009c90 <HAL_RCC_OscConfig+0x288>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	604b      	str	r3, [r1, #4]
 8009c8e:	e025      	b.n	8009cdc <HAL_RCC_OscConfig+0x2d4>
 8009c90:	58024400 	.word	0x58024400
 8009c94:	4b9a      	ldr	r3, [pc, #616]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	061b      	lsls	r3, r3, #24
 8009ca2:	4997      	ldr	r1, [pc, #604]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	604b      	str	r3, [r1, #4]
 8009ca8:	e018      	b.n	8009cdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009caa:	4b95      	ldr	r3, [pc, #596]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a94      	ldr	r2, [pc, #592]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009cb0:	f023 0301 	bic.w	r3, r3, #1
 8009cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cb6:	f7f9 ff1b 	bl	8003af0 <HAL_GetTick>
 8009cba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009cbc:	e008      	b.n	8009cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cbe:	f7f9 ff17 	bl	8003af0 <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d901      	bls.n	8009cd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e2ed      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009cd0:	4b8b      	ldr	r3, [pc, #556]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0304 	and.w	r3, r3, #4
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1f0      	bne.n	8009cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0310 	and.w	r3, r3, #16
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 80a9 	beq.w	8009e3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cea:	4b85      	ldr	r3, [pc, #532]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009cf4:	4b82      	ldr	r3, [pc, #520]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d007      	beq.n	8009d10 <HAL_RCC_OscConfig+0x308>
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	2b18      	cmp	r3, #24
 8009d04:	d13a      	bne.n	8009d7c <HAL_RCC_OscConfig+0x374>
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d135      	bne.n	8009d7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d10:	4b7b      	ldr	r3, [pc, #492]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <HAL_RCC_OscConfig+0x320>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	2b80      	cmp	r3, #128	; 0x80
 8009d22:	d001      	beq.n	8009d28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e2c1      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d28:	f7f9 feee 	bl	8003b08 <HAL_GetREVID>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d817      	bhi.n	8009d66 <HAL_RCC_OscConfig+0x35e>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	2b20      	cmp	r3, #32
 8009d3c:	d108      	bne.n	8009d50 <HAL_RCC_OscConfig+0x348>
 8009d3e:	4b70      	ldr	r3, [pc, #448]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009d46:	4a6e      	ldr	r2, [pc, #440]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009d48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d4e:	e075      	b.n	8009e3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d50:	4b6b      	ldr	r3, [pc, #428]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	069b      	lsls	r3, r3, #26
 8009d5e:	4968      	ldr	r1, [pc, #416]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d64:	e06a      	b.n	8009e3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d66:	4b66      	ldr	r3, [pc, #408]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	061b      	lsls	r3, r3, #24
 8009d74:	4962      	ldr	r1, [pc, #392]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d7a:	e05f      	b.n	8009e3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d042      	beq.n	8009e0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009d84:	4b5e      	ldr	r3, [pc, #376]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a5d      	ldr	r2, [pc, #372]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d90:	f7f9 feae 	bl	8003af0 <HAL_GetTick>
 8009d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d96:	e008      	b.n	8009daa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009d98:	f7f9 feaa 	bl	8003af0 <HAL_GetTick>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d901      	bls.n	8009daa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e280      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009daa:	4b55      	ldr	r3, [pc, #340]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d0f0      	beq.n	8009d98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009db6:	f7f9 fea7 	bl	8003b08 <HAL_GetREVID>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d817      	bhi.n	8009df4 <HAL_RCC_OscConfig+0x3ec>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	2b20      	cmp	r3, #32
 8009dca:	d108      	bne.n	8009dde <HAL_RCC_OscConfig+0x3d6>
 8009dcc:	4b4c      	ldr	r3, [pc, #304]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009dd4:	4a4a      	ldr	r2, [pc, #296]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009dd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dda:	6053      	str	r3, [r2, #4]
 8009ddc:	e02e      	b.n	8009e3c <HAL_RCC_OscConfig+0x434>
 8009dde:	4b48      	ldr	r3, [pc, #288]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a1b      	ldr	r3, [r3, #32]
 8009dea:	069b      	lsls	r3, r3, #26
 8009dec:	4944      	ldr	r1, [pc, #272]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009dee:	4313      	orrs	r3, r2
 8009df0:	604b      	str	r3, [r1, #4]
 8009df2:	e023      	b.n	8009e3c <HAL_RCC_OscConfig+0x434>
 8009df4:	4b42      	ldr	r3, [pc, #264]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	061b      	lsls	r3, r3, #24
 8009e02:	493f      	ldr	r1, [pc, #252]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009e04:	4313      	orrs	r3, r2
 8009e06:	60cb      	str	r3, [r1, #12]
 8009e08:	e018      	b.n	8009e3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009e0a:	4b3d      	ldr	r3, [pc, #244]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a3c      	ldr	r2, [pc, #240]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e16:	f7f9 fe6b 	bl	8003af0 <HAL_GetTick>
 8009e1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e1c:	e008      	b.n	8009e30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e1e:	f7f9 fe67 	bl	8003af0 <HAL_GetTick>
 8009e22:	4602      	mov	r2, r0
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d901      	bls.n	8009e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	e23d      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e30:	4b33      	ldr	r3, [pc, #204]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1f0      	bne.n	8009e1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 0308 	and.w	r3, r3, #8
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d036      	beq.n	8009eb6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	695b      	ldr	r3, [r3, #20]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d019      	beq.n	8009e84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e50:	4b2b      	ldr	r3, [pc, #172]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e54:	4a2a      	ldr	r2, [pc, #168]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009e56:	f043 0301 	orr.w	r3, r3, #1
 8009e5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e5c:	f7f9 fe48 	bl	8003af0 <HAL_GetTick>
 8009e60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e62:	e008      	b.n	8009e76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e64:	f7f9 fe44 	bl	8003af0 <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d901      	bls.n	8009e76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e21a      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e76:	4b22      	ldr	r3, [pc, #136]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e7a:	f003 0302 	and.w	r3, r3, #2
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d0f0      	beq.n	8009e64 <HAL_RCC_OscConfig+0x45c>
 8009e82:	e018      	b.n	8009eb6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e84:	4b1e      	ldr	r3, [pc, #120]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e88:	4a1d      	ldr	r2, [pc, #116]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009e8a:	f023 0301 	bic.w	r3, r3, #1
 8009e8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e90:	f7f9 fe2e 	bl	8003af0 <HAL_GetTick>
 8009e94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e96:	e008      	b.n	8009eaa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e98:	f7f9 fe2a 	bl	8003af0 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d901      	bls.n	8009eaa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e200      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009eaa:	4b15      	ldr	r3, [pc, #84]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1f0      	bne.n	8009e98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0320 	and.w	r3, r3, #32
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d039      	beq.n	8009f36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d01c      	beq.n	8009f04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009eca:	4b0d      	ldr	r3, [pc, #52]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a0c      	ldr	r2, [pc, #48]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ed4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ed6:	f7f9 fe0b 	bl	8003af0 <HAL_GetTick>
 8009eda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009edc:	e008      	b.n	8009ef0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ede:	f7f9 fe07 	bl	8003af0 <HAL_GetTick>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d901      	bls.n	8009ef0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009eec:	2303      	movs	r3, #3
 8009eee:	e1dd      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ef0:	4b03      	ldr	r3, [pc, #12]	; (8009f00 <HAL_RCC_OscConfig+0x4f8>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d0f0      	beq.n	8009ede <HAL_RCC_OscConfig+0x4d6>
 8009efc:	e01b      	b.n	8009f36 <HAL_RCC_OscConfig+0x52e>
 8009efe:	bf00      	nop
 8009f00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f04:	4b9b      	ldr	r3, [pc, #620]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a9a      	ldr	r2, [pc, #616]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009f0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f10:	f7f9 fdee 	bl	8003af0 <HAL_GetTick>
 8009f14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f16:	e008      	b.n	8009f2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f18:	f7f9 fdea 	bl	8003af0 <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d901      	bls.n	8009f2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e1c0      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f2a:	4b92      	ldr	r3, [pc, #584]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1f0      	bne.n	8009f18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0304 	and.w	r3, r3, #4
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f000 8081 	beq.w	800a046 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009f44:	4b8c      	ldr	r3, [pc, #560]	; (800a178 <HAL_RCC_OscConfig+0x770>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a8b      	ldr	r2, [pc, #556]	; (800a178 <HAL_RCC_OscConfig+0x770>)
 8009f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f50:	f7f9 fdce 	bl	8003af0 <HAL_GetTick>
 8009f54:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f56:	e008      	b.n	8009f6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f58:	f7f9 fdca 	bl	8003af0 <HAL_GetTick>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	2b64      	cmp	r3, #100	; 0x64
 8009f64:	d901      	bls.n	8009f6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e1a0      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f6a:	4b83      	ldr	r3, [pc, #524]	; (800a178 <HAL_RCC_OscConfig+0x770>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d0f0      	beq.n	8009f58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d106      	bne.n	8009f8c <HAL_RCC_OscConfig+0x584>
 8009f7e:	4b7d      	ldr	r3, [pc, #500]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f82:	4a7c      	ldr	r2, [pc, #496]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009f84:	f043 0301 	orr.w	r3, r3, #1
 8009f88:	6713      	str	r3, [r2, #112]	; 0x70
 8009f8a:	e02d      	b.n	8009fe8 <HAL_RCC_OscConfig+0x5e0>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10c      	bne.n	8009fae <HAL_RCC_OscConfig+0x5a6>
 8009f94:	4b77      	ldr	r3, [pc, #476]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f98:	4a76      	ldr	r2, [pc, #472]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009f9a:	f023 0301 	bic.w	r3, r3, #1
 8009f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8009fa0:	4b74      	ldr	r3, [pc, #464]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fa4:	4a73      	ldr	r2, [pc, #460]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009fa6:	f023 0304 	bic.w	r3, r3, #4
 8009faa:	6713      	str	r3, [r2, #112]	; 0x70
 8009fac:	e01c      	b.n	8009fe8 <HAL_RCC_OscConfig+0x5e0>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	2b05      	cmp	r3, #5
 8009fb4:	d10c      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x5c8>
 8009fb6:	4b6f      	ldr	r3, [pc, #444]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fba:	4a6e      	ldr	r2, [pc, #440]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009fbc:	f043 0304 	orr.w	r3, r3, #4
 8009fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8009fc2:	4b6c      	ldr	r3, [pc, #432]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc6:	4a6b      	ldr	r2, [pc, #428]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009fc8:	f043 0301 	orr.w	r3, r3, #1
 8009fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8009fce:	e00b      	b.n	8009fe8 <HAL_RCC_OscConfig+0x5e0>
 8009fd0:	4b68      	ldr	r3, [pc, #416]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd4:	4a67      	ldr	r2, [pc, #412]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009fd6:	f023 0301 	bic.w	r3, r3, #1
 8009fda:	6713      	str	r3, [r2, #112]	; 0x70
 8009fdc:	4b65      	ldr	r3, [pc, #404]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe0:	4a64      	ldr	r2, [pc, #400]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 8009fe2:	f023 0304 	bic.w	r3, r3, #4
 8009fe6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d015      	beq.n	800a01c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ff0:	f7f9 fd7e 	bl	8003af0 <HAL_GetTick>
 8009ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ff6:	e00a      	b.n	800a00e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ff8:	f7f9 fd7a 	bl	8003af0 <HAL_GetTick>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	f241 3288 	movw	r2, #5000	; 0x1388
 800a006:	4293      	cmp	r3, r2
 800a008:	d901      	bls.n	800a00e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e14e      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a00e:	4b59      	ldr	r3, [pc, #356]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a012:	f003 0302 	and.w	r3, r3, #2
 800a016:	2b00      	cmp	r3, #0
 800a018:	d0ee      	beq.n	8009ff8 <HAL_RCC_OscConfig+0x5f0>
 800a01a:	e014      	b.n	800a046 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a01c:	f7f9 fd68 	bl	8003af0 <HAL_GetTick>
 800a020:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a022:	e00a      	b.n	800a03a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a024:	f7f9 fd64 	bl	8003af0 <HAL_GetTick>
 800a028:	4602      	mov	r2, r0
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a032:	4293      	cmp	r3, r2
 800a034:	d901      	bls.n	800a03a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e138      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a03a:	4b4e      	ldr	r3, [pc, #312]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03e:	f003 0302 	and.w	r3, r3, #2
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1ee      	bne.n	800a024 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 812d 	beq.w	800a2aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a050:	4b48      	ldr	r3, [pc, #288]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a058:	2b18      	cmp	r3, #24
 800a05a:	f000 80bd 	beq.w	800a1d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a062:	2b02      	cmp	r3, #2
 800a064:	f040 809e 	bne.w	800a1a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a068:	4b42      	ldr	r3, [pc, #264]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a41      	ldr	r2, [pc, #260]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a06e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a074:	f7f9 fd3c 	bl	8003af0 <HAL_GetTick>
 800a078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a07a:	e008      	b.n	800a08e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a07c:	f7f9 fd38 	bl	8003af0 <HAL_GetTick>
 800a080:	4602      	mov	r2, r0
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	2b02      	cmp	r3, #2
 800a088:	d901      	bls.n	800a08e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	e10e      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a08e:	4b39      	ldr	r3, [pc, #228]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1f0      	bne.n	800a07c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a09a:	4b36      	ldr	r3, [pc, #216]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a09c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a09e:	4b37      	ldr	r3, [pc, #220]	; (800a17c <HAL_RCC_OscConfig+0x774>)
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a0aa:	0112      	lsls	r2, r2, #4
 800a0ac:	430a      	orrs	r2, r1
 800a0ae:	4931      	ldr	r1, [pc, #196]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	628b      	str	r3, [r1, #40]	; 0x28
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	025b      	lsls	r3, r3, #9
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	431a      	orrs	r2, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	041b      	lsls	r3, r3, #16
 800a0d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0d6:	431a      	orrs	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	061b      	lsls	r3, r3, #24
 800a0e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0e4:	4923      	ldr	r1, [pc, #140]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a0ea:	4b22      	ldr	r3, [pc, #136]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	4a21      	ldr	r2, [pc, #132]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a0f0:	f023 0301 	bic.w	r3, r3, #1
 800a0f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a0f6:	4b1f      	ldr	r3, [pc, #124]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a0f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0fa:	4b21      	ldr	r3, [pc, #132]	; (800a180 <HAL_RCC_OscConfig+0x778>)
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a102:	00d2      	lsls	r2, r2, #3
 800a104:	491b      	ldr	r1, [pc, #108]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a106:	4313      	orrs	r3, r2
 800a108:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a10a:	4b1a      	ldr	r3, [pc, #104]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10e:	f023 020c 	bic.w	r2, r3, #12
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a116:	4917      	ldr	r1, [pc, #92]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a118:	4313      	orrs	r3, r2
 800a11a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a11c:	4b15      	ldr	r3, [pc, #84]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a120:	f023 0202 	bic.w	r2, r3, #2
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a128:	4912      	ldr	r1, [pc, #72]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a12a:	4313      	orrs	r3, r2
 800a12c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a12e:	4b11      	ldr	r3, [pc, #68]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a132:	4a10      	ldr	r2, [pc, #64]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a138:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a13a:	4b0e      	ldr	r3, [pc, #56]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13e:	4a0d      	ldr	r2, [pc, #52]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a144:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a146:	4b0b      	ldr	r3, [pc, #44]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14a:	4a0a      	ldr	r2, [pc, #40]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a14c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a150:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a152:	4b08      	ldr	r3, [pc, #32]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a156:	4a07      	ldr	r2, [pc, #28]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a158:	f043 0301 	orr.w	r3, r3, #1
 800a15c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a15e:	4b05      	ldr	r3, [pc, #20]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a04      	ldr	r2, [pc, #16]	; (800a174 <HAL_RCC_OscConfig+0x76c>)
 800a164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a16a:	f7f9 fcc1 	bl	8003af0 <HAL_GetTick>
 800a16e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a170:	e011      	b.n	800a196 <HAL_RCC_OscConfig+0x78e>
 800a172:	bf00      	nop
 800a174:	58024400 	.word	0x58024400
 800a178:	58024800 	.word	0x58024800
 800a17c:	fffffc0c 	.word	0xfffffc0c
 800a180:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a184:	f7f9 fcb4 	bl	8003af0 <HAL_GetTick>
 800a188:	4602      	mov	r2, r0
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d901      	bls.n	800a196 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e08a      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a196:	4b47      	ldr	r3, [pc, #284]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0f0      	beq.n	800a184 <HAL_RCC_OscConfig+0x77c>
 800a1a2:	e082      	b.n	800a2aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1a4:	4b43      	ldr	r3, [pc, #268]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a42      	ldr	r2, [pc, #264]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a1aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b0:	f7f9 fc9e 	bl	8003af0 <HAL_GetTick>
 800a1b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1b6:	e008      	b.n	800a1ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1b8:	f7f9 fc9a 	bl	8003af0 <HAL_GetTick>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d901      	bls.n	800a1ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e070      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1ca:	4b3a      	ldr	r3, [pc, #232]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1f0      	bne.n	800a1b8 <HAL_RCC_OscConfig+0x7b0>
 800a1d6:	e068      	b.n	800a2aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a1d8:	4b36      	ldr	r3, [pc, #216]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a1de:	4b35      	ldr	r3, [pc, #212]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d031      	beq.n	800a250 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f003 0203 	and.w	r2, r3, #3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d12a      	bne.n	800a250 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	091b      	lsrs	r3, r3, #4
 800a1fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a206:	429a      	cmp	r2, r3
 800a208:	d122      	bne.n	800a250 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a214:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a216:	429a      	cmp	r2, r3
 800a218:	d11a      	bne.n	800a250 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	0a5b      	lsrs	r3, r3, #9
 800a21e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a226:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a228:	429a      	cmp	r2, r3
 800a22a:	d111      	bne.n	800a250 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	0c1b      	lsrs	r3, r3, #16
 800a230:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a238:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d108      	bne.n	800a250 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	0e1b      	lsrs	r3, r3, #24
 800a242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a24a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d001      	beq.n	800a254 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e02b      	b.n	800a2ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a254:	4b17      	ldr	r3, [pc, #92]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a258:	08db      	lsrs	r3, r3, #3
 800a25a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a25e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	429a      	cmp	r2, r3
 800a268:	d01f      	beq.n	800a2aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a26a:	4b12      	ldr	r3, [pc, #72]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26e:	4a11      	ldr	r2, [pc, #68]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a270:	f023 0301 	bic.w	r3, r3, #1
 800a274:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a276:	f7f9 fc3b 	bl	8003af0 <HAL_GetTick>
 800a27a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a27c:	bf00      	nop
 800a27e:	f7f9 fc37 	bl	8003af0 <HAL_GetTick>
 800a282:	4602      	mov	r2, r0
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	4293      	cmp	r3, r2
 800a288:	d0f9      	beq.n	800a27e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a28a:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a28c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a28e:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <HAL_RCC_OscConfig+0x8b0>)
 800a290:	4013      	ands	r3, r2
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a296:	00d2      	lsls	r2, r2, #3
 800a298:	4906      	ldr	r1, [pc, #24]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a29e:	4b05      	ldr	r3, [pc, #20]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a2:	4a04      	ldr	r2, [pc, #16]	; (800a2b4 <HAL_RCC_OscConfig+0x8ac>)
 800a2a4:	f043 0301 	orr.w	r3, r3, #1
 800a2a8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3730      	adds	r7, #48	; 0x30
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	58024400 	.word	0x58024400
 800a2b8:	ffff0007 	.word	0xffff0007

0800a2bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d101      	bne.n	800a2d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e19c      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a2d0:	4b8a      	ldr	r3, [pc, #552]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 030f 	and.w	r3, r3, #15
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d910      	bls.n	800a300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2de:	4b87      	ldr	r3, [pc, #540]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f023 020f 	bic.w	r2, r3, #15
 800a2e6:	4985      	ldr	r1, [pc, #532]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2ee:	4b83      	ldr	r3, [pc, #524]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 030f 	and.w	r3, r3, #15
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d001      	beq.n	800a300 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e184      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d010      	beq.n	800a32e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691a      	ldr	r2, [r3, #16]
 800a310:	4b7b      	ldr	r3, [pc, #492]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a318:	429a      	cmp	r2, r3
 800a31a:	d908      	bls.n	800a32e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a31c:	4b78      	ldr	r3, [pc, #480]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	4975      	ldr	r1, [pc, #468]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a32a:	4313      	orrs	r3, r2
 800a32c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0308 	and.w	r3, r3, #8
 800a336:	2b00      	cmp	r3, #0
 800a338:	d010      	beq.n	800a35c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695a      	ldr	r2, [r3, #20]
 800a33e:	4b70      	ldr	r3, [pc, #448]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a346:	429a      	cmp	r2, r3
 800a348:	d908      	bls.n	800a35c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a34a:	4b6d      	ldr	r3, [pc, #436]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	496a      	ldr	r1, [pc, #424]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a358:	4313      	orrs	r3, r2
 800a35a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0310 	and.w	r3, r3, #16
 800a364:	2b00      	cmp	r3, #0
 800a366:	d010      	beq.n	800a38a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	699a      	ldr	r2, [r3, #24]
 800a36c:	4b64      	ldr	r3, [pc, #400]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a374:	429a      	cmp	r2, r3
 800a376:	d908      	bls.n	800a38a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a378:	4b61      	ldr	r3, [pc, #388]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	495e      	ldr	r1, [pc, #376]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a386:	4313      	orrs	r3, r2
 800a388:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0320 	and.w	r3, r3, #32
 800a392:	2b00      	cmp	r3, #0
 800a394:	d010      	beq.n	800a3b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	69da      	ldr	r2, [r3, #28]
 800a39a:	4b59      	ldr	r3, [pc, #356]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d908      	bls.n	800a3b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a3a6:	4b56      	ldr	r3, [pc, #344]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	69db      	ldr	r3, [r3, #28]
 800a3b2:	4953      	ldr	r1, [pc, #332]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0302 	and.w	r3, r3, #2
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d010      	beq.n	800a3e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68da      	ldr	r2, [r3, #12]
 800a3c8:	4b4d      	ldr	r3, [pc, #308]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	f003 030f 	and.w	r3, r3, #15
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d908      	bls.n	800a3e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3d4:	4b4a      	ldr	r3, [pc, #296]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	f023 020f 	bic.w	r2, r3, #15
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	4947      	ldr	r1, [pc, #284]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d055      	beq.n	800a49e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a3f2:	4b43      	ldr	r3, [pc, #268]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	4940      	ldr	r1, [pc, #256]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a400:	4313      	orrs	r3, r2
 800a402:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d107      	bne.n	800a41c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a40c:	4b3c      	ldr	r3, [pc, #240]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d121      	bne.n	800a45c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e0f6      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	2b03      	cmp	r3, #3
 800a422:	d107      	bne.n	800a434 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a424:	4b36      	ldr	r3, [pc, #216]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d115      	bne.n	800a45c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e0ea      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d107      	bne.n	800a44c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a43c:	4b30      	ldr	r3, [pc, #192]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a444:	2b00      	cmp	r3, #0
 800a446:	d109      	bne.n	800a45c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	e0de      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a44c:	4b2c      	ldr	r3, [pc, #176]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 0304 	and.w	r3, r3, #4
 800a454:	2b00      	cmp	r3, #0
 800a456:	d101      	bne.n	800a45c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e0d6      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a45c:	4b28      	ldr	r3, [pc, #160]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	f023 0207 	bic.w	r2, r3, #7
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	4925      	ldr	r1, [pc, #148]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a46a:	4313      	orrs	r3, r2
 800a46c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a46e:	f7f9 fb3f 	bl	8003af0 <HAL_GetTick>
 800a472:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a474:	e00a      	b.n	800a48c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a476:	f7f9 fb3b 	bl	8003af0 <HAL_GetTick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	f241 3288 	movw	r2, #5000	; 0x1388
 800a484:	4293      	cmp	r3, r2
 800a486:	d901      	bls.n	800a48c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a488:	2303      	movs	r3, #3
 800a48a:	e0be      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a48c:	4b1c      	ldr	r3, [pc, #112]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d1eb      	bne.n	800a476 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0302 	and.w	r3, r3, #2
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d010      	beq.n	800a4cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	4b14      	ldr	r3, [pc, #80]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	f003 030f 	and.w	r3, r3, #15
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d208      	bcs.n	800a4cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4ba:	4b11      	ldr	r3, [pc, #68]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	f023 020f 	bic.w	r2, r3, #15
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	490e      	ldr	r1, [pc, #56]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a4cc:	4b0b      	ldr	r3, [pc, #44]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d214      	bcs.n	800a504 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4da:	4b08      	ldr	r3, [pc, #32]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f023 020f 	bic.w	r2, r3, #15
 800a4e2:	4906      	ldr	r1, [pc, #24]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4ea:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d005      	beq.n	800a504 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e086      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
 800a4fc:	52002000 	.word	0x52002000
 800a500:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0304 	and.w	r3, r3, #4
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d010      	beq.n	800a532 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	691a      	ldr	r2, [r3, #16]
 800a514:	4b3f      	ldr	r3, [pc, #252]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d208      	bcs.n	800a532 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a520:	4b3c      	ldr	r3, [pc, #240]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	4939      	ldr	r1, [pc, #228]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a52e:	4313      	orrs	r3, r2
 800a530:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 0308 	and.w	r3, r3, #8
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d010      	beq.n	800a560 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	695a      	ldr	r2, [r3, #20]
 800a542:	4b34      	ldr	r3, [pc, #208]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d208      	bcs.n	800a560 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a54e:	4b31      	ldr	r3, [pc, #196]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	492e      	ldr	r1, [pc, #184]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a55c:	4313      	orrs	r3, r2
 800a55e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 0310 	and.w	r3, r3, #16
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d010      	beq.n	800a58e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	699a      	ldr	r2, [r3, #24]
 800a570:	4b28      	ldr	r3, [pc, #160]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a572:	69db      	ldr	r3, [r3, #28]
 800a574:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a578:	429a      	cmp	r2, r3
 800a57a:	d208      	bcs.n	800a58e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a57c:	4b25      	ldr	r3, [pc, #148]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a57e:	69db      	ldr	r3, [r3, #28]
 800a580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	4922      	ldr	r1, [pc, #136]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a58a:	4313      	orrs	r3, r2
 800a58c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0320 	and.w	r3, r3, #32
 800a596:	2b00      	cmp	r3, #0
 800a598:	d010      	beq.n	800a5bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	69da      	ldr	r2, [r3, #28]
 800a59e:	4b1d      	ldr	r3, [pc, #116]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d208      	bcs.n	800a5bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a5aa:	4b1a      	ldr	r3, [pc, #104]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	69db      	ldr	r3, [r3, #28]
 800a5b6:	4917      	ldr	r1, [pc, #92]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a5bc:	f000 f834 	bl	800a628 <HAL_RCC_GetSysClockFreq>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	4b14      	ldr	r3, [pc, #80]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	0a1b      	lsrs	r3, r3, #8
 800a5c8:	f003 030f 	and.w	r3, r3, #15
 800a5cc:	4912      	ldr	r1, [pc, #72]	; (800a618 <HAL_RCC_ClockConfig+0x35c>)
 800a5ce:	5ccb      	ldrb	r3, [r1, r3]
 800a5d0:	f003 031f 	and.w	r3, r3, #31
 800a5d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5da:	4b0e      	ldr	r3, [pc, #56]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	f003 030f 	and.w	r3, r3, #15
 800a5e2:	4a0d      	ldr	r2, [pc, #52]	; (800a618 <HAL_RCC_ClockConfig+0x35c>)
 800a5e4:	5cd3      	ldrb	r3, [r2, r3]
 800a5e6:	f003 031f 	and.w	r3, r3, #31
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a5f0:	4a0a      	ldr	r2, [pc, #40]	; (800a61c <HAL_RCC_ClockConfig+0x360>)
 800a5f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5f4:	4a0a      	ldr	r2, [pc, #40]	; (800a620 <HAL_RCC_ClockConfig+0x364>)
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a5fa:	4b0a      	ldr	r3, [pc, #40]	; (800a624 <HAL_RCC_ClockConfig+0x368>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7f8 ff9a 	bl	8003538 <HAL_InitTick>
 800a604:	4603      	mov	r3, r0
 800a606:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a608:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	58024400 	.word	0x58024400
 800a618:	08017054 	.word	0x08017054
 800a61c:	24000094 	.word	0x24000094
 800a620:	24000090 	.word	0x24000090
 800a624:	24000098 	.word	0x24000098

0800a628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a628:	b480      	push	{r7}
 800a62a:	b089      	sub	sp, #36	; 0x24
 800a62c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a62e:	4bb3      	ldr	r3, [pc, #716]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a636:	2b18      	cmp	r3, #24
 800a638:	f200 8155 	bhi.w	800a8e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a63c:	a201      	add	r2, pc, #4	; (adr r2, 800a644 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a642:	bf00      	nop
 800a644:	0800a6a9 	.word	0x0800a6a9
 800a648:	0800a8e7 	.word	0x0800a8e7
 800a64c:	0800a8e7 	.word	0x0800a8e7
 800a650:	0800a8e7 	.word	0x0800a8e7
 800a654:	0800a8e7 	.word	0x0800a8e7
 800a658:	0800a8e7 	.word	0x0800a8e7
 800a65c:	0800a8e7 	.word	0x0800a8e7
 800a660:	0800a8e7 	.word	0x0800a8e7
 800a664:	0800a6cf 	.word	0x0800a6cf
 800a668:	0800a8e7 	.word	0x0800a8e7
 800a66c:	0800a8e7 	.word	0x0800a8e7
 800a670:	0800a8e7 	.word	0x0800a8e7
 800a674:	0800a8e7 	.word	0x0800a8e7
 800a678:	0800a8e7 	.word	0x0800a8e7
 800a67c:	0800a8e7 	.word	0x0800a8e7
 800a680:	0800a8e7 	.word	0x0800a8e7
 800a684:	0800a6d5 	.word	0x0800a6d5
 800a688:	0800a8e7 	.word	0x0800a8e7
 800a68c:	0800a8e7 	.word	0x0800a8e7
 800a690:	0800a8e7 	.word	0x0800a8e7
 800a694:	0800a8e7 	.word	0x0800a8e7
 800a698:	0800a8e7 	.word	0x0800a8e7
 800a69c:	0800a8e7 	.word	0x0800a8e7
 800a6a0:	0800a8e7 	.word	0x0800a8e7
 800a6a4:	0800a6db 	.word	0x0800a6db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6a8:	4b94      	ldr	r3, [pc, #592]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0320 	and.w	r3, r3, #32
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d009      	beq.n	800a6c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6b4:	4b91      	ldr	r3, [pc, #580]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	08db      	lsrs	r3, r3, #3
 800a6ba:	f003 0303 	and.w	r3, r3, #3
 800a6be:	4a90      	ldr	r2, [pc, #576]	; (800a900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a6c6:	e111      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a6c8:	4b8d      	ldr	r3, [pc, #564]	; (800a900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6ca:	61bb      	str	r3, [r7, #24]
      break;
 800a6cc:	e10e      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a6ce:	4b8d      	ldr	r3, [pc, #564]	; (800a904 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a6d0:	61bb      	str	r3, [r7, #24]
      break;
 800a6d2:	e10b      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a6d4:	4b8c      	ldr	r3, [pc, #560]	; (800a908 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a6d6:	61bb      	str	r3, [r7, #24]
      break;
 800a6d8:	e108      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6da:	4b88      	ldr	r3, [pc, #544]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a6e4:	4b85      	ldr	r3, [pc, #532]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e8:	091b      	lsrs	r3, r3, #4
 800a6ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a6f0:	4b82      	ldr	r3, [pc, #520]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a6fa:	4b80      	ldr	r3, [pc, #512]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fe:	08db      	lsrs	r3, r3, #3
 800a700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	fb02 f303 	mul.w	r3, r2, r3
 800a70a:	ee07 3a90 	vmov	s15, r3
 800a70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a712:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f000 80e1 	beq.w	800a8e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b02      	cmp	r3, #2
 800a722:	f000 8083 	beq.w	800a82c <HAL_RCC_GetSysClockFreq+0x204>
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2b02      	cmp	r3, #2
 800a72a:	f200 80a1 	bhi.w	800a870 <HAL_RCC_GetSysClockFreq+0x248>
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <HAL_RCC_GetSysClockFreq+0x114>
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d056      	beq.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a73a:	e099      	b.n	800a870 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a73c:	4b6f      	ldr	r3, [pc, #444]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 0320 	and.w	r3, r3, #32
 800a744:	2b00      	cmp	r3, #0
 800a746:	d02d      	beq.n	800a7a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a748:	4b6c      	ldr	r3, [pc, #432]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	08db      	lsrs	r3, r3, #3
 800a74e:	f003 0303 	and.w	r3, r3, #3
 800a752:	4a6b      	ldr	r2, [pc, #428]	; (800a900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a754:	fa22 f303 	lsr.w	r3, r2, r3
 800a758:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	ee07 3a90 	vmov	s15, r3
 800a760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	ee07 3a90 	vmov	s15, r3
 800a76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a772:	4b62      	ldr	r3, [pc, #392]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77a:	ee07 3a90 	vmov	s15, r3
 800a77e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a782:	ed97 6a02 	vldr	s12, [r7, #8]
 800a786:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a90c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a78a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a78e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a79a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a79e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a7a2:	e087      	b.n	800a8b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	ee07 3a90 	vmov	s15, r3
 800a7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a910 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a7b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7b6:	4b51      	ldr	r3, [pc, #324]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7be:	ee07 3a90 	vmov	s15, r3
 800a7c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a90c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7e6:	e065      	b.n	800a8b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	ee07 3a90 	vmov	s15, r3
 800a7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a914 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7fa:	4b40      	ldr	r3, [pc, #256]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a802:	ee07 3a90 	vmov	s15, r3
 800a806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a80a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a80e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a90c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a81a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a81e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a826:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a82a:	e043      	b.n	800a8b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	ee07 3a90 	vmov	s15, r3
 800a832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a836:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a918 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a83a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a83e:	4b2f      	ldr	r3, [pc, #188]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a846:	ee07 3a90 	vmov	s15, r3
 800a84a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a84e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a852:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a90c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a85a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a85e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a86e:	e021      	b.n	800a8b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	ee07 3a90 	vmov	s15, r3
 800a876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a87a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a914 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a87e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a882:	4b1e      	ldr	r3, [pc, #120]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88a:	ee07 3a90 	vmov	s15, r3
 800a88e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a892:	ed97 6a02 	vldr	s12, [r7, #8]
 800a896:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a90c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a89a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a89e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a8b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a8b4:	4b11      	ldr	r3, [pc, #68]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b8:	0a5b      	lsrs	r3, r3, #9
 800a8ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8be:	3301      	adds	r3, #1
 800a8c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	ee07 3a90 	vmov	s15, r3
 800a8c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a8cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8d8:	ee17 3a90 	vmov	r3, s15
 800a8dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a8de:	e005      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	61bb      	str	r3, [r7, #24]
      break;
 800a8e4:	e002      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a8e6:	4b07      	ldr	r3, [pc, #28]	; (800a904 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a8e8:	61bb      	str	r3, [r7, #24]
      break;
 800a8ea:	bf00      	nop
  }

  return sysclockfreq;
 800a8ec:	69bb      	ldr	r3, [r7, #24]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3724      	adds	r7, #36	; 0x24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	58024400 	.word	0x58024400
 800a900:	03d09000 	.word	0x03d09000
 800a904:	003d0900 	.word	0x003d0900
 800a908:	017d7840 	.word	0x017d7840
 800a90c:	46000000 	.word	0x46000000
 800a910:	4c742400 	.word	0x4c742400
 800a914:	4a742400 	.word	0x4a742400
 800a918:	4bbebc20 	.word	0x4bbebc20

0800a91c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a922:	f7ff fe81 	bl	800a628 <HAL_RCC_GetSysClockFreq>
 800a926:	4602      	mov	r2, r0
 800a928:	4b10      	ldr	r3, [pc, #64]	; (800a96c <HAL_RCC_GetHCLKFreq+0x50>)
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	0a1b      	lsrs	r3, r3, #8
 800a92e:	f003 030f 	and.w	r3, r3, #15
 800a932:	490f      	ldr	r1, [pc, #60]	; (800a970 <HAL_RCC_GetHCLKFreq+0x54>)
 800a934:	5ccb      	ldrb	r3, [r1, r3]
 800a936:	f003 031f 	and.w	r3, r3, #31
 800a93a:	fa22 f303 	lsr.w	r3, r2, r3
 800a93e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a940:	4b0a      	ldr	r3, [pc, #40]	; (800a96c <HAL_RCC_GetHCLKFreq+0x50>)
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	f003 030f 	and.w	r3, r3, #15
 800a948:	4a09      	ldr	r2, [pc, #36]	; (800a970 <HAL_RCC_GetHCLKFreq+0x54>)
 800a94a:	5cd3      	ldrb	r3, [r2, r3]
 800a94c:	f003 031f 	and.w	r3, r3, #31
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	fa22 f303 	lsr.w	r3, r2, r3
 800a956:	4a07      	ldr	r2, [pc, #28]	; (800a974 <HAL_RCC_GetHCLKFreq+0x58>)
 800a958:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a95a:	4a07      	ldr	r2, [pc, #28]	; (800a978 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a960:	4b04      	ldr	r3, [pc, #16]	; (800a974 <HAL_RCC_GetHCLKFreq+0x58>)
 800a962:	681b      	ldr	r3, [r3, #0]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	58024400 	.word	0x58024400
 800a970:	08017054 	.word	0x08017054
 800a974:	24000094 	.word	0x24000094
 800a978:	24000090 	.word	0x24000090

0800a97c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a980:	f7ff ffcc 	bl	800a91c <HAL_RCC_GetHCLKFreq>
 800a984:	4602      	mov	r2, r0
 800a986:	4b06      	ldr	r3, [pc, #24]	; (800a9a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	091b      	lsrs	r3, r3, #4
 800a98c:	f003 0307 	and.w	r3, r3, #7
 800a990:	4904      	ldr	r1, [pc, #16]	; (800a9a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a992:	5ccb      	ldrb	r3, [r1, r3]
 800a994:	f003 031f 	and.w	r3, r3, #31
 800a998:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	58024400 	.word	0x58024400
 800a9a4:	08017054 	.word	0x08017054

0800a9a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a9ac:	f7ff ffb6 	bl	800a91c <HAL_RCC_GetHCLKFreq>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	4b06      	ldr	r3, [pc, #24]	; (800a9cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	0a1b      	lsrs	r3, r3, #8
 800a9b8:	f003 0307 	and.w	r3, r3, #7
 800a9bc:	4904      	ldr	r1, [pc, #16]	; (800a9d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a9be:	5ccb      	ldrb	r3, [r1, r3]
 800a9c0:	f003 031f 	and.w	r3, r3, #31
 800a9c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	58024400 	.word	0x58024400
 800a9d0:	08017054 	.word	0x08017054

0800a9d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	223f      	movs	r2, #63	; 0x3f
 800a9e2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a9e4:	4b1a      	ldr	r3, [pc, #104]	; (800aa50 <HAL_RCC_GetClockConfig+0x7c>)
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	f003 0207 	and.w	r2, r3, #7
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a9f0:	4b17      	ldr	r3, [pc, #92]	; (800aa50 <HAL_RCC_GetClockConfig+0x7c>)
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a9fc:	4b14      	ldr	r3, [pc, #80]	; (800aa50 <HAL_RCC_GetClockConfig+0x7c>)
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	f003 020f 	and.w	r2, r3, #15
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800aa08:	4b11      	ldr	r3, [pc, #68]	; (800aa50 <HAL_RCC_GetClockConfig+0x7c>)
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800aa14:	4b0e      	ldr	r3, [pc, #56]	; (800aa50 <HAL_RCC_GetClockConfig+0x7c>)
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800aa20:	4b0b      	ldr	r3, [pc, #44]	; (800aa50 <HAL_RCC_GetClockConfig+0x7c>)
 800aa22:	69db      	ldr	r3, [r3, #28]
 800aa24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800aa2c:	4b08      	ldr	r3, [pc, #32]	; (800aa50 <HAL_RCC_GetClockConfig+0x7c>)
 800aa2e:	6a1b      	ldr	r3, [r3, #32]
 800aa30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aa38:	4b06      	ldr	r3, [pc, #24]	; (800aa54 <HAL_RCC_GetClockConfig+0x80>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 020f 	and.w	r2, r3, #15
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	601a      	str	r2, [r3, #0]
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	58024400 	.word	0x58024400
 800aa54:	52002000 	.word	0x52002000

0800aa58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa5c:	b0ca      	sub	sp, #296	; 0x128
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aa64:	2300      	movs	r3, #0
 800aa66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800aa7c:	2500      	movs	r5, #0
 800aa7e:	ea54 0305 	orrs.w	r3, r4, r5
 800aa82:	d049      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800aa84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa8e:	d02f      	beq.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800aa90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa94:	d828      	bhi.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aa96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa9a:	d01a      	beq.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aa9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aaa0:	d822      	bhi.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x56>
 800aaa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaaa:	d007      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aaac:	e01c      	b.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaae:	4bb8      	ldr	r3, [pc, #736]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab2:	4ab7      	ldr	r2, [pc, #732]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aab8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aaba:	e01a      	b.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aabc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac0:	3308      	adds	r3, #8
 800aac2:	2102      	movs	r1, #2
 800aac4:	4618      	mov	r0, r3
 800aac6:	f002 fb61 	bl	800d18c <RCCEx_PLL2_Config>
 800aaca:	4603      	mov	r3, r0
 800aacc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aad0:	e00f      	b.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aad6:	3328      	adds	r3, #40	; 0x28
 800aad8:	2102      	movs	r1, #2
 800aada:	4618      	mov	r0, r3
 800aadc:	f002 fc08 	bl	800d2f0 <RCCEx_PLL3_Config>
 800aae0:	4603      	mov	r3, r0
 800aae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aae6:	e004      	b.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aaee:	e000      	b.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aaf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10a      	bne.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aafa:	4ba5      	ldr	r3, [pc, #660]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aafe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ab02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab08:	4aa1      	ldr	r2, [pc, #644]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab0a:	430b      	orrs	r3, r1
 800ab0c:	6513      	str	r3, [r2, #80]	; 0x50
 800ab0e:	e003      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ab18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ab24:	f04f 0900 	mov.w	r9, #0
 800ab28:	ea58 0309 	orrs.w	r3, r8, r9
 800ab2c:	d047      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ab2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab34:	2b04      	cmp	r3, #4
 800ab36:	d82a      	bhi.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ab38:	a201      	add	r2, pc, #4	; (adr r2, 800ab40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ab3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3e:	bf00      	nop
 800ab40:	0800ab55 	.word	0x0800ab55
 800ab44:	0800ab63 	.word	0x0800ab63
 800ab48:	0800ab79 	.word	0x0800ab79
 800ab4c:	0800ab97 	.word	0x0800ab97
 800ab50:	0800ab97 	.word	0x0800ab97
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab54:	4b8e      	ldr	r3, [pc, #568]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab58:	4a8d      	ldr	r2, [pc, #564]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab60:	e01a      	b.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab66:	3308      	adds	r3, #8
 800ab68:	2100      	movs	r1, #0
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f002 fb0e 	bl	800d18c <RCCEx_PLL2_Config>
 800ab70:	4603      	mov	r3, r0
 800ab72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab76:	e00f      	b.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab7c:	3328      	adds	r3, #40	; 0x28
 800ab7e:	2100      	movs	r1, #0
 800ab80:	4618      	mov	r0, r3
 800ab82:	f002 fbb5 	bl	800d2f0 <RCCEx_PLL3_Config>
 800ab86:	4603      	mov	r3, r0
 800ab88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab8c:	e004      	b.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab94:	e000      	b.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ab96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d10a      	bne.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aba0:	4b7b      	ldr	r3, [pc, #492]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba4:	f023 0107 	bic.w	r1, r3, #7
 800aba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abae:	4a78      	ldr	r2, [pc, #480]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abb0:	430b      	orrs	r3, r1
 800abb2:	6513      	str	r3, [r2, #80]	; 0x50
 800abb4:	e003      	b.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800abbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800abca:	f04f 0b00 	mov.w	fp, #0
 800abce:	ea5a 030b 	orrs.w	r3, sl, fp
 800abd2:	d04c      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800abd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abde:	d030      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800abe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe4:	d829      	bhi.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800abe6:	2bc0      	cmp	r3, #192	; 0xc0
 800abe8:	d02d      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800abea:	2bc0      	cmp	r3, #192	; 0xc0
 800abec:	d825      	bhi.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800abee:	2b80      	cmp	r3, #128	; 0x80
 800abf0:	d018      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800abf2:	2b80      	cmp	r3, #128	; 0x80
 800abf4:	d821      	bhi.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d002      	beq.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800abfa:	2b40      	cmp	r3, #64	; 0x40
 800abfc:	d007      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800abfe:	e01c      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac00:	4b63      	ldr	r3, [pc, #396]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac04:	4a62      	ldr	r2, [pc, #392]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac0c:	e01c      	b.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac12:	3308      	adds	r3, #8
 800ac14:	2100      	movs	r1, #0
 800ac16:	4618      	mov	r0, r3
 800ac18:	f002 fab8 	bl	800d18c <RCCEx_PLL2_Config>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac22:	e011      	b.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac28:	3328      	adds	r3, #40	; 0x28
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f002 fb5f 	bl	800d2f0 <RCCEx_PLL3_Config>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac38:	e006      	b.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac40:	e002      	b.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ac42:	bf00      	nop
 800ac44:	e000      	b.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ac46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10a      	bne.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ac50:	4b4f      	ldr	r3, [pc, #316]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac54:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ac58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac5e:	4a4c      	ldr	r2, [pc, #304]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac60:	430b      	orrs	r3, r1
 800ac62:	6513      	str	r3, [r2, #80]	; 0x50
 800ac64:	e003      	b.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ac6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ac7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ac84:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ac88:	460b      	mov	r3, r1
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	d053      	beq.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ac8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac9a:	d035      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ac9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aca0:	d82e      	bhi.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800aca2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aca6:	d031      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800aca8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800acac:	d828      	bhi.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800acae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acb2:	d01a      	beq.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x292>
 800acb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acb8:	d822      	bhi.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800acbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acc2:	d007      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800acc4:	e01c      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acc6:	4b32      	ldr	r3, [pc, #200]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acca:	4a31      	ldr	r2, [pc, #196]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800accc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acd2:	e01c      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acd8:	3308      	adds	r3, #8
 800acda:	2100      	movs	r1, #0
 800acdc:	4618      	mov	r0, r3
 800acde:	f002 fa55 	bl	800d18c <RCCEx_PLL2_Config>
 800ace2:	4603      	mov	r3, r0
 800ace4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ace8:	e011      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acee:	3328      	adds	r3, #40	; 0x28
 800acf0:	2100      	movs	r1, #0
 800acf2:	4618      	mov	r0, r3
 800acf4:	f002 fafc 	bl	800d2f0 <RCCEx_PLL3_Config>
 800acf8:	4603      	mov	r3, r0
 800acfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acfe:	e006      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad06:	e002      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ad08:	bf00      	nop
 800ad0a:	e000      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ad0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10b      	bne.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ad16:	4b1e      	ldr	r3, [pc, #120]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad1a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ad1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad26:	4a1a      	ldr	r2, [pc, #104]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad28:	430b      	orrs	r3, r1
 800ad2a:	6593      	str	r3, [r2, #88]	; 0x58
 800ad2c:	e003      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ad36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ad42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ad46:	2300      	movs	r3, #0
 800ad48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ad4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ad50:	460b      	mov	r3, r1
 800ad52:	4313      	orrs	r3, r2
 800ad54:	d056      	beq.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ad56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad62:	d038      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ad64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad68:	d831      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad6e:	d034      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ad70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad74:	d82b      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad7a:	d01d      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ad7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad80:	d825      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d006      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ad86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad8a:	d00a      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ad8c:	e01f      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad8e:	bf00      	nop
 800ad90:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad94:	4ba2      	ldr	r3, [pc, #648]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad98:	4aa1      	ldr	r2, [pc, #644]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ada0:	e01c      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ada2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada6:	3308      	adds	r3, #8
 800ada8:	2100      	movs	r1, #0
 800adaa:	4618      	mov	r0, r3
 800adac:	f002 f9ee 	bl	800d18c <RCCEx_PLL2_Config>
 800adb0:	4603      	mov	r3, r0
 800adb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800adb6:	e011      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adbc:	3328      	adds	r3, #40	; 0x28
 800adbe:	2100      	movs	r1, #0
 800adc0:	4618      	mov	r0, r3
 800adc2:	f002 fa95 	bl	800d2f0 <RCCEx_PLL3_Config>
 800adc6:	4603      	mov	r3, r0
 800adc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adcc:	e006      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800add4:	e002      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800add6:	bf00      	nop
 800add8:	e000      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800adda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800addc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10b      	bne.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ade4:	4b8e      	ldr	r3, [pc, #568]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ade6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800adec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adf4:	4a8a      	ldr	r2, [pc, #552]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adf6:	430b      	orrs	r3, r1
 800adf8:	6593      	str	r3, [r2, #88]	; 0x58
 800adfa:	e003      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ae04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ae10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae14:	2300      	movs	r3, #0
 800ae16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ae1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4313      	orrs	r3, r2
 800ae22:	d03a      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ae24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae2a:	2b30      	cmp	r3, #48	; 0x30
 800ae2c:	d01f      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ae2e:	2b30      	cmp	r3, #48	; 0x30
 800ae30:	d819      	bhi.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ae32:	2b20      	cmp	r3, #32
 800ae34:	d00c      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ae36:	2b20      	cmp	r3, #32
 800ae38:	d815      	bhi.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d019      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ae3e:	2b10      	cmp	r3, #16
 800ae40:	d111      	bne.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae42:	4b77      	ldr	r3, [pc, #476]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae46:	4a76      	ldr	r2, [pc, #472]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ae4e:	e011      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae54:	3308      	adds	r3, #8
 800ae56:	2102      	movs	r1, #2
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f002 f997 	bl	800d18c <RCCEx_PLL2_Config>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ae64:	e006      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae6c:	e002      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ae6e:	bf00      	nop
 800ae70:	e000      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ae72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10a      	bne.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ae7c:	4b68      	ldr	r3, [pc, #416]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae80:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ae84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae8a:	4a65      	ldr	r2, [pc, #404]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae8c:	430b      	orrs	r3, r1
 800ae8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae90:	e003      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ae9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800aea6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aeb0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	d051      	beq.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aeba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aec4:	d035      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800aec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aeca:	d82e      	bhi.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aecc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aed0:	d031      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800aed2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aed6:	d828      	bhi.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aedc:	d01a      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800aede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aee2:	d822      	bhi.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d003      	beq.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800aee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeec:	d007      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800aeee:	e01c      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aef0:	4b4b      	ldr	r3, [pc, #300]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef4:	4a4a      	ldr	r2, [pc, #296]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aefa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aefc:	e01c      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aefe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af02:	3308      	adds	r3, #8
 800af04:	2100      	movs	r1, #0
 800af06:	4618      	mov	r0, r3
 800af08:	f002 f940 	bl	800d18c <RCCEx_PLL2_Config>
 800af0c:	4603      	mov	r3, r0
 800af0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af12:	e011      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af18:	3328      	adds	r3, #40	; 0x28
 800af1a:	2100      	movs	r1, #0
 800af1c:	4618      	mov	r0, r3
 800af1e:	f002 f9e7 	bl	800d2f0 <RCCEx_PLL3_Config>
 800af22:	4603      	mov	r3, r0
 800af24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af28:	e006      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af30:	e002      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800af32:	bf00      	nop
 800af34:	e000      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800af36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10a      	bne.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800af40:	4b37      	ldr	r3, [pc, #220]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af44:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800af48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af4e:	4a34      	ldr	r2, [pc, #208]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af50:	430b      	orrs	r3, r1
 800af52:	6513      	str	r3, [r2, #80]	; 0x50
 800af54:	e003      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800af5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800af6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af6e:	2300      	movs	r3, #0
 800af70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800af78:	460b      	mov	r3, r1
 800af7a:	4313      	orrs	r3, r2
 800af7c:	d056      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800af7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af88:	d033      	beq.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800af8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af8e:	d82c      	bhi.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af94:	d02f      	beq.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800af96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af9a:	d826      	bhi.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afa0:	d02b      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800afa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afa6:	d820      	bhi.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800afa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afac:	d012      	beq.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800afae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afb2:	d81a      	bhi.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d022      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800afb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afbc:	d115      	bne.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc2:	3308      	adds	r3, #8
 800afc4:	2101      	movs	r1, #1
 800afc6:	4618      	mov	r0, r3
 800afc8:	f002 f8e0 	bl	800d18c <RCCEx_PLL2_Config>
 800afcc:	4603      	mov	r3, r0
 800afce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800afd2:	e015      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd8:	3328      	adds	r3, #40	; 0x28
 800afda:	2101      	movs	r1, #1
 800afdc:	4618      	mov	r0, r3
 800afde:	f002 f987 	bl	800d2f0 <RCCEx_PLL3_Config>
 800afe2:	4603      	mov	r3, r0
 800afe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800afe8:	e00a      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aff0:	e006      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800aff2:	bf00      	nop
 800aff4:	e004      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800aff6:	bf00      	nop
 800aff8:	e002      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800affa:	bf00      	nop
 800affc:	e000      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800affe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10d      	bne.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b008:	4b05      	ldr	r3, [pc, #20]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b00c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b016:	4a02      	ldr	r2, [pc, #8]	; (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b018:	430b      	orrs	r3, r1
 800b01a:	6513      	str	r3, [r2, #80]	; 0x50
 800b01c:	e006      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b01e:	bf00      	nop
 800b020:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b024:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b028:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b03c:	2300      	movs	r3, #0
 800b03e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b042:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b046:	460b      	mov	r3, r1
 800b048:	4313      	orrs	r3, r2
 800b04a:	d055      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b050:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b058:	d033      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b05a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b05e:	d82c      	bhi.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b064:	d02f      	beq.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b06a:	d826      	bhi.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b06c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b070:	d02b      	beq.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b072:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b076:	d820      	bhi.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b07c:	d012      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b07e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b082:	d81a      	bhi.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b084:	2b00      	cmp	r3, #0
 800b086:	d022      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b08c:	d115      	bne.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b092:	3308      	adds	r3, #8
 800b094:	2101      	movs	r1, #1
 800b096:	4618      	mov	r0, r3
 800b098:	f002 f878 	bl	800d18c <RCCEx_PLL2_Config>
 800b09c:	4603      	mov	r3, r0
 800b09e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b0a2:	e015      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a8:	3328      	adds	r3, #40	; 0x28
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f002 f91f 	bl	800d2f0 <RCCEx_PLL3_Config>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b0b8:	e00a      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0c0:	e006      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b0c2:	bf00      	nop
 800b0c4:	e004      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b0c6:	bf00      	nop
 800b0c8:	e002      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b0ca:	bf00      	nop
 800b0cc:	e000      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b0ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10b      	bne.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b0d8:	4ba3      	ldr	r3, [pc, #652]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0dc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0e8:	4a9f      	ldr	r2, [pc, #636]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0ea:	430b      	orrs	r3, r1
 800b0ec:	6593      	str	r3, [r2, #88]	; 0x58
 800b0ee:	e003      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b100:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b108:	2300      	movs	r3, #0
 800b10a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b10e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b112:	460b      	mov	r3, r1
 800b114:	4313      	orrs	r3, r2
 800b116:	d037      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b11e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b122:	d00e      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b128:	d816      	bhi.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d018      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b12e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b132:	d111      	bne.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b134:	4b8c      	ldr	r3, [pc, #560]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b138:	4a8b      	ldr	r2, [pc, #556]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b13a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b13e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b140:	e00f      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b146:	3308      	adds	r3, #8
 800b148:	2101      	movs	r1, #1
 800b14a:	4618      	mov	r0, r3
 800b14c:	f002 f81e 	bl	800d18c <RCCEx_PLL2_Config>
 800b150:	4603      	mov	r3, r0
 800b152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b156:	e004      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b15e:	e000      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b160:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10a      	bne.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b16a:	4b7f      	ldr	r3, [pc, #508]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b16e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b178:	4a7b      	ldr	r2, [pc, #492]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b17a:	430b      	orrs	r3, r1
 800b17c:	6513      	str	r3, [r2, #80]	; 0x50
 800b17e:	e003      	b.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b180:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b184:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b198:	2300      	movs	r3, #0
 800b19a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b19e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	d039      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ae:	2b03      	cmp	r3, #3
 800b1b0:	d81c      	bhi.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b1b2:	a201      	add	r2, pc, #4	; (adr r2, 800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b8:	0800b1f5 	.word	0x0800b1f5
 800b1bc:	0800b1c9 	.word	0x0800b1c9
 800b1c0:	0800b1d7 	.word	0x0800b1d7
 800b1c4:	0800b1f5 	.word	0x0800b1f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1c8:	4b67      	ldr	r3, [pc, #412]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1cc:	4a66      	ldr	r2, [pc, #408]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b1d4:	e00f      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1da:	3308      	adds	r3, #8
 800b1dc:	2102      	movs	r1, #2
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f001 ffd4 	bl	800d18c <RCCEx_PLL2_Config>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b1ea:	e004      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1f2:	e000      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d10a      	bne.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b1fe:	4b5a      	ldr	r3, [pc, #360]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b202:	f023 0103 	bic.w	r1, r3, #3
 800b206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b20c:	4a56      	ldr	r2, [pc, #344]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b20e:	430b      	orrs	r3, r1
 800b210:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b212:	e003      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b218:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b22c:	2300      	movs	r3, #0
 800b22e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b232:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b236:	460b      	mov	r3, r1
 800b238:	4313      	orrs	r3, r2
 800b23a:	f000 809f 	beq.w	800b37c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b23e:	4b4b      	ldr	r3, [pc, #300]	; (800b36c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a4a      	ldr	r2, [pc, #296]	; (800b36c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b248:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b24a:	f7f8 fc51 	bl	8003af0 <HAL_GetTick>
 800b24e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b252:	e00b      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b254:	f7f8 fc4c 	bl	8003af0 <HAL_GetTick>
 800b258:	4602      	mov	r2, r0
 800b25a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	2b64      	cmp	r3, #100	; 0x64
 800b262:	d903      	bls.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b26a:	e005      	b.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b26c:	4b3f      	ldr	r3, [pc, #252]	; (800b36c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b274:	2b00      	cmp	r3, #0
 800b276:	d0ed      	beq.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d179      	bne.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b280:	4b39      	ldr	r3, [pc, #228]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b288:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b28c:	4053      	eors	r3, r2
 800b28e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b292:	2b00      	cmp	r3, #0
 800b294:	d015      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b296:	4b34      	ldr	r3, [pc, #208]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b29e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b2a2:	4b31      	ldr	r3, [pc, #196]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a6:	4a30      	ldr	r2, [pc, #192]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b2ae:	4b2e      	ldr	r3, [pc, #184]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b2:	4a2d      	ldr	r2, [pc, #180]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b2ba:	4a2b      	ldr	r2, [pc, #172]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b2c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b2ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ce:	d118      	bne.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2d0:	f7f8 fc0e 	bl	8003af0 <HAL_GetTick>
 800b2d4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2d8:	e00d      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2da:	f7f8 fc09 	bl	8003af0 <HAL_GetTick>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b2e4:	1ad2      	subs	r2, r2, r3
 800b2e6:	f241 3388 	movw	r3, #5000	; 0x1388
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d903      	bls.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b2f4:	e005      	b.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2f6:	4b1c      	ldr	r3, [pc, #112]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fa:	f003 0302 	and.w	r3, r3, #2
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d0eb      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b306:	2b00      	cmp	r3, #0
 800b308:	d129      	bne.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b30e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b31a:	d10e      	bne.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b31c:	4b12      	ldr	r3, [pc, #72]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b328:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b32c:	091a      	lsrs	r2, r3, #4
 800b32e:	4b10      	ldr	r3, [pc, #64]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b330:	4013      	ands	r3, r2
 800b332:	4a0d      	ldr	r2, [pc, #52]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b334:	430b      	orrs	r3, r1
 800b336:	6113      	str	r3, [r2, #16]
 800b338:	e005      	b.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b33a:	4b0b      	ldr	r3, [pc, #44]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	4a0a      	ldr	r2, [pc, #40]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b340:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b344:	6113      	str	r3, [r2, #16]
 800b346:	4b08      	ldr	r3, [pc, #32]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b348:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b34e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b356:	4a04      	ldr	r2, [pc, #16]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b358:	430b      	orrs	r3, r1
 800b35a:	6713      	str	r3, [r2, #112]	; 0x70
 800b35c:	e00e      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b35e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b366:	e009      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b368:	58024400 	.word	0x58024400
 800b36c:	58024800 	.word	0x58024800
 800b370:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	f002 0301 	and.w	r3, r2, #1
 800b388:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b38c:	2300      	movs	r3, #0
 800b38e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b392:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b396:	460b      	mov	r3, r1
 800b398:	4313      	orrs	r3, r2
 800b39a:	f000 8089 	beq.w	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3a4:	2b28      	cmp	r3, #40	; 0x28
 800b3a6:	d86b      	bhi.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b3a8:	a201      	add	r2, pc, #4	; (adr r2, 800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ae:	bf00      	nop
 800b3b0:	0800b489 	.word	0x0800b489
 800b3b4:	0800b481 	.word	0x0800b481
 800b3b8:	0800b481 	.word	0x0800b481
 800b3bc:	0800b481 	.word	0x0800b481
 800b3c0:	0800b481 	.word	0x0800b481
 800b3c4:	0800b481 	.word	0x0800b481
 800b3c8:	0800b481 	.word	0x0800b481
 800b3cc:	0800b481 	.word	0x0800b481
 800b3d0:	0800b455 	.word	0x0800b455
 800b3d4:	0800b481 	.word	0x0800b481
 800b3d8:	0800b481 	.word	0x0800b481
 800b3dc:	0800b481 	.word	0x0800b481
 800b3e0:	0800b481 	.word	0x0800b481
 800b3e4:	0800b481 	.word	0x0800b481
 800b3e8:	0800b481 	.word	0x0800b481
 800b3ec:	0800b481 	.word	0x0800b481
 800b3f0:	0800b46b 	.word	0x0800b46b
 800b3f4:	0800b481 	.word	0x0800b481
 800b3f8:	0800b481 	.word	0x0800b481
 800b3fc:	0800b481 	.word	0x0800b481
 800b400:	0800b481 	.word	0x0800b481
 800b404:	0800b481 	.word	0x0800b481
 800b408:	0800b481 	.word	0x0800b481
 800b40c:	0800b481 	.word	0x0800b481
 800b410:	0800b489 	.word	0x0800b489
 800b414:	0800b481 	.word	0x0800b481
 800b418:	0800b481 	.word	0x0800b481
 800b41c:	0800b481 	.word	0x0800b481
 800b420:	0800b481 	.word	0x0800b481
 800b424:	0800b481 	.word	0x0800b481
 800b428:	0800b481 	.word	0x0800b481
 800b42c:	0800b481 	.word	0x0800b481
 800b430:	0800b489 	.word	0x0800b489
 800b434:	0800b481 	.word	0x0800b481
 800b438:	0800b481 	.word	0x0800b481
 800b43c:	0800b481 	.word	0x0800b481
 800b440:	0800b481 	.word	0x0800b481
 800b444:	0800b481 	.word	0x0800b481
 800b448:	0800b481 	.word	0x0800b481
 800b44c:	0800b481 	.word	0x0800b481
 800b450:	0800b489 	.word	0x0800b489
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b458:	3308      	adds	r3, #8
 800b45a:	2101      	movs	r1, #1
 800b45c:	4618      	mov	r0, r3
 800b45e:	f001 fe95 	bl	800d18c <RCCEx_PLL2_Config>
 800b462:	4603      	mov	r3, r0
 800b464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b468:	e00f      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46e:	3328      	adds	r3, #40	; 0x28
 800b470:	2101      	movs	r1, #1
 800b472:	4618      	mov	r0, r3
 800b474:	f001 ff3c 	bl	800d2f0 <RCCEx_PLL3_Config>
 800b478:	4603      	mov	r3, r0
 800b47a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b47e:	e004      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b486:	e000      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b48a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10a      	bne.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b492:	4bbf      	ldr	r3, [pc, #764]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b496:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b49e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4a0:	4abb      	ldr	r2, [pc, #748]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4a2:	430b      	orrs	r3, r1
 800b4a4:	6553      	str	r3, [r2, #84]	; 0x54
 800b4a6:	e003      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f002 0302 	and.w	r3, r2, #2
 800b4bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b4c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	d041      	beq.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4d6:	2b05      	cmp	r3, #5
 800b4d8:	d824      	bhi.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b4da:	a201      	add	r2, pc, #4	; (adr r2, 800b4e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e0:	0800b52d 	.word	0x0800b52d
 800b4e4:	0800b4f9 	.word	0x0800b4f9
 800b4e8:	0800b50f 	.word	0x0800b50f
 800b4ec:	0800b52d 	.word	0x0800b52d
 800b4f0:	0800b52d 	.word	0x0800b52d
 800b4f4:	0800b52d 	.word	0x0800b52d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fc:	3308      	adds	r3, #8
 800b4fe:	2101      	movs	r1, #1
 800b500:	4618      	mov	r0, r3
 800b502:	f001 fe43 	bl	800d18c <RCCEx_PLL2_Config>
 800b506:	4603      	mov	r3, r0
 800b508:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b50c:	e00f      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b512:	3328      	adds	r3, #40	; 0x28
 800b514:	2101      	movs	r1, #1
 800b516:	4618      	mov	r0, r3
 800b518:	f001 feea 	bl	800d2f0 <RCCEx_PLL3_Config>
 800b51c:	4603      	mov	r3, r0
 800b51e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b522:	e004      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b52a:	e000      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b52c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b52e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10a      	bne.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b536:	4b96      	ldr	r3, [pc, #600]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b53a:	f023 0107 	bic.w	r1, r3, #7
 800b53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b544:	4a92      	ldr	r2, [pc, #584]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b546:	430b      	orrs	r3, r1
 800b548:	6553      	str	r3, [r2, #84]	; 0x54
 800b54a:	e003      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b54c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b550:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	f002 0304 	and.w	r3, r2, #4
 800b560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b564:	2300      	movs	r3, #0
 800b566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b56a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b56e:	460b      	mov	r3, r1
 800b570:	4313      	orrs	r3, r2
 800b572:	d044      	beq.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b57c:	2b05      	cmp	r3, #5
 800b57e:	d825      	bhi.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b580:	a201      	add	r2, pc, #4	; (adr r2, 800b588 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b586:	bf00      	nop
 800b588:	0800b5d5 	.word	0x0800b5d5
 800b58c:	0800b5a1 	.word	0x0800b5a1
 800b590:	0800b5b7 	.word	0x0800b5b7
 800b594:	0800b5d5 	.word	0x0800b5d5
 800b598:	0800b5d5 	.word	0x0800b5d5
 800b59c:	0800b5d5 	.word	0x0800b5d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a4:	3308      	adds	r3, #8
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f001 fdef 	bl	800d18c <RCCEx_PLL2_Config>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b5b4:	e00f      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ba:	3328      	adds	r3, #40	; 0x28
 800b5bc:	2101      	movs	r1, #1
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f001 fe96 	bl	800d2f0 <RCCEx_PLL3_Config>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b5ca:	e004      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5d2:	e000      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b5d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10b      	bne.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b5de:	4b6c      	ldr	r3, [pc, #432]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e2:	f023 0107 	bic.w	r1, r3, #7
 800b5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5ee:	4a68      	ldr	r2, [pc, #416]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5f0:	430b      	orrs	r3, r1
 800b5f2:	6593      	str	r3, [r2, #88]	; 0x58
 800b5f4:	e003      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b606:	f002 0320 	and.w	r3, r2, #32
 800b60a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b60e:	2300      	movs	r3, #0
 800b610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b618:	460b      	mov	r3, r1
 800b61a:	4313      	orrs	r3, r2
 800b61c:	d055      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b62a:	d033      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b62c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b630:	d82c      	bhi.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b636:	d02f      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b63c:	d826      	bhi.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b63e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b642:	d02b      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b644:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b648:	d820      	bhi.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b64a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b64e:	d012      	beq.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b654:	d81a      	bhi.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b656:	2b00      	cmp	r3, #0
 800b658:	d022      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b65a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b65e:	d115      	bne.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b664:	3308      	adds	r3, #8
 800b666:	2100      	movs	r1, #0
 800b668:	4618      	mov	r0, r3
 800b66a:	f001 fd8f 	bl	800d18c <RCCEx_PLL2_Config>
 800b66e:	4603      	mov	r3, r0
 800b670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b674:	e015      	b.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b67a:	3328      	adds	r3, #40	; 0x28
 800b67c:	2102      	movs	r1, #2
 800b67e:	4618      	mov	r0, r3
 800b680:	f001 fe36 	bl	800d2f0 <RCCEx_PLL3_Config>
 800b684:	4603      	mov	r3, r0
 800b686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b68a:	e00a      	b.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b692:	e006      	b.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b694:	bf00      	nop
 800b696:	e004      	b.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b698:	bf00      	nop
 800b69a:	e002      	b.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b69c:	bf00      	nop
 800b69e:	e000      	b.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b6a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10b      	bne.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b6aa:	4b39      	ldr	r3, [pc, #228]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ba:	4a35      	ldr	r2, [pc, #212]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6bc:	430b      	orrs	r3, r1
 800b6be:	6553      	str	r3, [r2, #84]	; 0x54
 800b6c0:	e003      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b6d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b6e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	d058      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6f6:	d033      	beq.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b6f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6fc:	d82c      	bhi.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b6fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b702:	d02f      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b708:	d826      	bhi.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b70a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b70e:	d02b      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b714:	d820      	bhi.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b71a:	d012      	beq.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b71c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b720:	d81a      	bhi.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b722:	2b00      	cmp	r3, #0
 800b724:	d022      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b72a:	d115      	bne.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b730:	3308      	adds	r3, #8
 800b732:	2100      	movs	r1, #0
 800b734:	4618      	mov	r0, r3
 800b736:	f001 fd29 	bl	800d18c <RCCEx_PLL2_Config>
 800b73a:	4603      	mov	r3, r0
 800b73c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b740:	e015      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b746:	3328      	adds	r3, #40	; 0x28
 800b748:	2102      	movs	r1, #2
 800b74a:	4618      	mov	r0, r3
 800b74c:	f001 fdd0 	bl	800d2f0 <RCCEx_PLL3_Config>
 800b750:	4603      	mov	r3, r0
 800b752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b756:	e00a      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b75e:	e006      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b760:	bf00      	nop
 800b762:	e004      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b764:	bf00      	nop
 800b766:	e002      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b768:	bf00      	nop
 800b76a:	e000      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b76c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b76e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10e      	bne.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b776:	4b06      	ldr	r3, [pc, #24]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b77a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b786:	4a02      	ldr	r2, [pc, #8]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b788:	430b      	orrs	r3, r1
 800b78a:	6593      	str	r3, [r2, #88]	; 0x58
 800b78c:	e006      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b78e:	bf00      	nop
 800b790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b7a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b7b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	d055      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b7bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7c8:	d033      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b7ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7ce:	d82c      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7d4:	d02f      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b7d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7da:	d826      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7e0:	d02b      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b7e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7e6:	d820      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7ec:	d012      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b7ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7f2:	d81a      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d022      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b7f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7fc:	d115      	bne.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b802:	3308      	adds	r3, #8
 800b804:	2100      	movs	r1, #0
 800b806:	4618      	mov	r0, r3
 800b808:	f001 fcc0 	bl	800d18c <RCCEx_PLL2_Config>
 800b80c:	4603      	mov	r3, r0
 800b80e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b812:	e015      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b818:	3328      	adds	r3, #40	; 0x28
 800b81a:	2102      	movs	r1, #2
 800b81c:	4618      	mov	r0, r3
 800b81e:	f001 fd67 	bl	800d2f0 <RCCEx_PLL3_Config>
 800b822:	4603      	mov	r3, r0
 800b824:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b828:	e00a      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b830:	e006      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b832:	bf00      	nop
 800b834:	e004      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b836:	bf00      	nop
 800b838:	e002      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b83a:	bf00      	nop
 800b83c:	e000      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b83e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b844:	2b00      	cmp	r3, #0
 800b846:	d10b      	bne.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b848:	4ba1      	ldr	r3, [pc, #644]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b84a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b84c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b854:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b858:	4a9d      	ldr	r2, [pc, #628]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b85a:	430b      	orrs	r3, r1
 800b85c:	6593      	str	r3, [r2, #88]	; 0x58
 800b85e:	e003      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f002 0308 	and.w	r3, r2, #8
 800b874:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b878:	2300      	movs	r3, #0
 800b87a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b87e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b882:	460b      	mov	r3, r1
 800b884:	4313      	orrs	r3, r2
 800b886:	d01e      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b894:	d10c      	bne.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89a:	3328      	adds	r3, #40	; 0x28
 800b89c:	2102      	movs	r1, #2
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f001 fd26 	bl	800d2f0 <RCCEx_PLL3_Config>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b8b0:	4b87      	ldr	r3, [pc, #540]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8c0:	4a83      	ldr	r2, [pc, #524]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8c2:	430b      	orrs	r3, r1
 800b8c4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	f002 0310 	and.w	r3, r2, #16
 800b8d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b8dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	d01e      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8f2:	d10c      	bne.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f8:	3328      	adds	r3, #40	; 0x28
 800b8fa:	2102      	movs	r1, #2
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f001 fcf7 	bl	800d2f0 <RCCEx_PLL3_Config>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b90e:	4b70      	ldr	r3, [pc, #448]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b912:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b91e:	4a6c      	ldr	r2, [pc, #432]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b920:	430b      	orrs	r3, r1
 800b922:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b934:	2300      	movs	r3, #0
 800b936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b93a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b93e:	460b      	mov	r3, r1
 800b940:	4313      	orrs	r3, r2
 800b942:	d03e      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b948:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b94c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b950:	d022      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b956:	d81b      	bhi.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b95c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b960:	d00b      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b962:	e015      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b968:	3308      	adds	r3, #8
 800b96a:	2100      	movs	r1, #0
 800b96c:	4618      	mov	r0, r3
 800b96e:	f001 fc0d 	bl	800d18c <RCCEx_PLL2_Config>
 800b972:	4603      	mov	r3, r0
 800b974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b978:	e00f      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b97e:	3328      	adds	r3, #40	; 0x28
 800b980:	2102      	movs	r1, #2
 800b982:	4618      	mov	r0, r3
 800b984:	f001 fcb4 	bl	800d2f0 <RCCEx_PLL3_Config>
 800b988:	4603      	mov	r3, r0
 800b98a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b98e:	e004      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b996:	e000      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b99a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d10b      	bne.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b9a2:	4b4b      	ldr	r3, [pc, #300]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b9b2:	4a47      	ldr	r2, [pc, #284]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9b4:	430b      	orrs	r3, r1
 800b9b6:	6593      	str	r3, [r2, #88]	; 0x58
 800b9b8:	e003      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b9ce:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b9d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b9d8:	460b      	mov	r3, r1
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	d03b      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9ea:	d01f      	beq.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b9ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9f0:	d818      	bhi.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b9f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9f6:	d003      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b9f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9fc:	d007      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b9fe:	e011      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba00:	4b33      	ldr	r3, [pc, #204]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba04:	4a32      	ldr	r2, [pc, #200]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba0c:	e00f      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba12:	3328      	adds	r3, #40	; 0x28
 800ba14:	2101      	movs	r1, #1
 800ba16:	4618      	mov	r0, r3
 800ba18:	f001 fc6a 	bl	800d2f0 <RCCEx_PLL3_Config>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba22:	e004      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba2a:	e000      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ba2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10b      	bne.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba36:	4b26      	ldr	r3, [pc, #152]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ba3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba46:	4a22      	ldr	r2, [pc, #136]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba48:	430b      	orrs	r3, r1
 800ba4a:	6553      	str	r3, [r2, #84]	; 0x54
 800ba4c:	e003      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ba56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ba62:	673b      	str	r3, [r7, #112]	; 0x70
 800ba64:	2300      	movs	r3, #0
 800ba66:	677b      	str	r3, [r7, #116]	; 0x74
 800ba68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	d034      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ba72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ba7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba80:	d007      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ba82:	e011      	b.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba84:	4b12      	ldr	r3, [pc, #72]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba88:	4a11      	ldr	r2, [pc, #68]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba90:	e00e      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba96:	3308      	adds	r3, #8
 800ba98:	2102      	movs	r1, #2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f001 fb76 	bl	800d18c <RCCEx_PLL2_Config>
 800baa0:	4603      	mov	r3, r0
 800baa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800baa6:	e003      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10d      	bne.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bab8:	4b05      	ldr	r3, [pc, #20]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800baba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800babc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac6:	4a02      	ldr	r2, [pc, #8]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bac8:	430b      	orrs	r3, r1
 800baca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bacc:	e006      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bace:	bf00      	nop
 800bad0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bad8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800badc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bae8:	66bb      	str	r3, [r7, #104]	; 0x68
 800baea:	2300      	movs	r3, #0
 800baec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800baee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800baf2:	460b      	mov	r3, r1
 800baf4:	4313      	orrs	r3, r2
 800baf6:	d00c      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800baf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bafc:	3328      	adds	r3, #40	; 0x28
 800bafe:	2102      	movs	r1, #2
 800bb00:	4618      	mov	r0, r3
 800bb02:	f001 fbf5 	bl	800d2f0 <RCCEx_PLL3_Config>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bb1e:	663b      	str	r3, [r7, #96]	; 0x60
 800bb20:	2300      	movs	r3, #0
 800bb22:	667b      	str	r3, [r7, #100]	; 0x64
 800bb24:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bb28:	460b      	mov	r3, r1
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	d038      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bb2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb3a:	d018      	beq.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bb3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb40:	d811      	bhi.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bb42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb46:	d014      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bb48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb4c:	d80b      	bhi.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d011      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bb52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb56:	d106      	bne.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb58:	4bc3      	ldr	r3, [pc, #780]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5c:	4ac2      	ldr	r2, [pc, #776]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bb64:	e008      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb6c:	e004      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bb6e:	bf00      	nop
 800bb70:	e002      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bb72:	bf00      	nop
 800bb74:	e000      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bb76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10b      	bne.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb80:	4bb9      	ldr	r3, [pc, #740]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb90:	4ab5      	ldr	r2, [pc, #724]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb92:	430b      	orrs	r3, r1
 800bb94:	6553      	str	r3, [r2, #84]	; 0x54
 800bb96:	e003      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bbac:	65bb      	str	r3, [r7, #88]	; 0x58
 800bbae:	2300      	movs	r3, #0
 800bbb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbb2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	d009      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bbbc:	4baa      	ldr	r3, [pc, #680]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bbc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbca:	4aa7      	ldr	r2, [pc, #668]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbcc:	430b      	orrs	r3, r1
 800bbce:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bbd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bbdc:	653b      	str	r3, [r7, #80]	; 0x50
 800bbde:	2300      	movs	r3, #0
 800bbe0:	657b      	str	r3, [r7, #84]	; 0x54
 800bbe2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	d00a      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bbec:	4b9e      	ldr	r3, [pc, #632]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbee:	691b      	ldr	r3, [r3, #16]
 800bbf0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bbf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bbfc:	4a9a      	ldr	r2, [pc, #616]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbfe:	430b      	orrs	r3, r1
 800bc00:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bc0e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc10:	2300      	movs	r3, #0
 800bc12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bc18:	460b      	mov	r3, r1
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	d009      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc1e:	4b92      	ldr	r3, [pc, #584]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc22:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc2c:	4a8e      	ldr	r2, [pc, #568]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc2e:	430b      	orrs	r3, r1
 800bc30:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bc3e:	643b      	str	r3, [r7, #64]	; 0x40
 800bc40:	2300      	movs	r3, #0
 800bc42:	647b      	str	r3, [r7, #68]	; 0x44
 800bc44:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	d00e      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc4e:	4b86      	ldr	r3, [pc, #536]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	4a85      	ldr	r2, [pc, #532]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc58:	6113      	str	r3, [r2, #16]
 800bc5a:	4b83      	ldr	r3, [pc, #524]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc5c:	6919      	ldr	r1, [r3, #16]
 800bc5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bc66:	4a80      	ldr	r2, [pc, #512]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc68:	430b      	orrs	r3, r1
 800bc6a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bc6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc74:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bc78:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bc82:	460b      	mov	r3, r1
 800bc84:	4313      	orrs	r3, r2
 800bc86:	d009      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc88:	4b77      	ldr	r3, [pc, #476]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc8c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bc90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc96:	4a74      	ldr	r2, [pc, #464]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc98:	430b      	orrs	r3, r1
 800bc9a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bca8:	633b      	str	r3, [r7, #48]	; 0x30
 800bcaa:	2300      	movs	r3, #0
 800bcac:	637b      	str	r3, [r7, #52]	; 0x34
 800bcae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	d00a      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bcb8:	4b6b      	ldr	r3, [pc, #428]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcbc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bcc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcc8:	4a67      	ldr	r2, [pc, #412]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcca:	430b      	orrs	r3, r1
 800bccc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	62b9      	str	r1, [r7, #40]	; 0x28
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bce0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bce4:	460b      	mov	r3, r1
 800bce6:	4313      	orrs	r3, r2
 800bce8:	d011      	beq.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcee:	3308      	adds	r3, #8
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f001 fa4a 	bl	800d18c <RCCEx_PLL2_Config>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bcfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d003      	beq.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bd0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	2100      	movs	r1, #0
 800bd18:	6239      	str	r1, [r7, #32]
 800bd1a:	f003 0302 	and.w	r3, r3, #2
 800bd1e:	627b      	str	r3, [r7, #36]	; 0x24
 800bd20:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bd24:	460b      	mov	r3, r1
 800bd26:	4313      	orrs	r3, r2
 800bd28:	d011      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd2e:	3308      	adds	r3, #8
 800bd30:	2101      	movs	r1, #1
 800bd32:	4618      	mov	r0, r3
 800bd34:	f001 fa2a 	bl	800d18c <RCCEx_PLL2_Config>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d003      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	2100      	movs	r1, #0
 800bd58:	61b9      	str	r1, [r7, #24]
 800bd5a:	f003 0304 	and.w	r3, r3, #4
 800bd5e:	61fb      	str	r3, [r7, #28]
 800bd60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bd64:	460b      	mov	r3, r1
 800bd66:	4313      	orrs	r3, r2
 800bd68:	d011      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd6e:	3308      	adds	r3, #8
 800bd70:	2102      	movs	r1, #2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f001 fa0a 	bl	800d18c <RCCEx_PLL2_Config>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d003      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bd8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd96:	2100      	movs	r1, #0
 800bd98:	6139      	str	r1, [r7, #16]
 800bd9a:	f003 0308 	and.w	r3, r3, #8
 800bd9e:	617b      	str	r3, [r7, #20]
 800bda0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bda4:	460b      	mov	r3, r1
 800bda6:	4313      	orrs	r3, r2
 800bda8:	d011      	beq.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bdaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdae:	3328      	adds	r3, #40	; 0x28
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f001 fa9c 	bl	800d2f0 <RCCEx_PLL3_Config>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bdbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d003      	beq.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bdce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	f003 0310 	and.w	r3, r3, #16
 800bdde:	60fb      	str	r3, [r7, #12]
 800bde0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bde4:	460b      	mov	r3, r1
 800bde6:	4313      	orrs	r3, r2
 800bde8:	d011      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdee:	3328      	adds	r3, #40	; 0x28
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f001 fa7c 	bl	800d2f0 <RCCEx_PLL3_Config>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bdfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be02:	2b00      	cmp	r3, #0
 800be04:	d003      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800be0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	2100      	movs	r1, #0
 800be18:	6039      	str	r1, [r7, #0]
 800be1a:	f003 0320 	and.w	r3, r3, #32
 800be1e:	607b      	str	r3, [r7, #4]
 800be20:	e9d7 1200 	ldrd	r1, r2, [r7]
 800be24:	460b      	mov	r3, r1
 800be26:	4313      	orrs	r3, r2
 800be28:	d011      	beq.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be2e:	3328      	adds	r3, #40	; 0x28
 800be30:	2102      	movs	r1, #2
 800be32:	4618      	mov	r0, r3
 800be34:	f001 fa5c 	bl	800d2f0 <RCCEx_PLL3_Config>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800be3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be42:	2b00      	cmp	r3, #0
 800be44:	d003      	beq.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800be4e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800be52:	2b00      	cmp	r3, #0
 800be54:	d101      	bne.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	e000      	b.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800be62:	46bd      	mov	sp, r7
 800be64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be68:	58024400 	.word	0x58024400

0800be6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b090      	sub	sp, #64	; 0x40
 800be70:	af00      	add	r7, sp, #0
 800be72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be7a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800be7e:	430b      	orrs	r3, r1
 800be80:	f040 8094 	bne.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800be84:	4b9e      	ldr	r3, [pc, #632]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be88:	f003 0307 	and.w	r3, r3, #7
 800be8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be90:	2b04      	cmp	r3, #4
 800be92:	f200 8087 	bhi.w	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800be96:	a201      	add	r2, pc, #4	; (adr r2, 800be9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800be98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9c:	0800beb1 	.word	0x0800beb1
 800bea0:	0800bed9 	.word	0x0800bed9
 800bea4:	0800bf01 	.word	0x0800bf01
 800bea8:	0800bf9d 	.word	0x0800bf9d
 800beac:	0800bf29 	.word	0x0800bf29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800beb0:	4b93      	ldr	r3, [pc, #588]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800beb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bebc:	d108      	bne.n	800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bec2:	4618      	mov	r0, r3
 800bec4:	f001 f810 	bl	800cee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800becc:	f000 bd45 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bed0:	2300      	movs	r3, #0
 800bed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bed4:	f000 bd41 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bed8:	4b89      	ldr	r3, [pc, #548]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bee4:	d108      	bne.n	800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bee6:	f107 0318 	add.w	r3, r7, #24
 800beea:	4618      	mov	r0, r3
 800beec:	f000 fd54 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bef4:	f000 bd31 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bef8:	2300      	movs	r3, #0
 800befa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800befc:	f000 bd2d 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf00:	4b7f      	ldr	r3, [pc, #508]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf0c:	d108      	bne.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf0e:	f107 030c 	add.w	r3, r7, #12
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 fe94 	bl	800cc40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf1c:	f000 bd1d 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf20:	2300      	movs	r3, #0
 800bf22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf24:	f000 bd19 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf28:	4b75      	ldr	r3, [pc, #468]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf30:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf32:	4b73      	ldr	r3, [pc, #460]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f003 0304 	and.w	r3, r3, #4
 800bf3a:	2b04      	cmp	r3, #4
 800bf3c:	d10c      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bf3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d109      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf44:	4b6e      	ldr	r3, [pc, #440]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	08db      	lsrs	r3, r3, #3
 800bf4a:	f003 0303 	and.w	r3, r3, #3
 800bf4e:	4a6d      	ldr	r2, [pc, #436]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bf50:	fa22 f303 	lsr.w	r3, r2, r3
 800bf54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf56:	e01f      	b.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf58:	4b69      	ldr	r3, [pc, #420]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf64:	d106      	bne.n	800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bf66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf6c:	d102      	bne.n	800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf6e:	4b66      	ldr	r3, [pc, #408]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bf70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf72:	e011      	b.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf74:	4b62      	ldr	r3, [pc, #392]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf80:	d106      	bne.n	800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf88:	d102      	bne.n	800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf8a:	4b60      	ldr	r3, [pc, #384]	; (800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bf8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf8e:	e003      	b.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf90:	2300      	movs	r3, #0
 800bf92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf94:	f000 bce1 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf98:	f000 bcdf 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf9c:	4b5c      	ldr	r3, [pc, #368]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfa0:	f000 bcdb 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfa8:	f000 bcd7 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bfac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfb0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bfb4:	430b      	orrs	r3, r1
 800bfb6:	f040 80ad 	bne.w	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bfba:	4b51      	ldr	r3, [pc, #324]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfbe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bfc2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfca:	d056      	beq.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfd2:	f200 8090 	bhi.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd8:	2bc0      	cmp	r3, #192	; 0xc0
 800bfda:	f000 8088 	beq.w	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	2bc0      	cmp	r3, #192	; 0xc0
 800bfe2:	f200 8088 	bhi.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	2b80      	cmp	r3, #128	; 0x80
 800bfea:	d032      	beq.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	2b80      	cmp	r3, #128	; 0x80
 800bff0:	f200 8081 	bhi.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d003      	beq.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	2b40      	cmp	r3, #64	; 0x40
 800bffe:	d014      	beq.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c000:	e079      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c002:	4b3f      	ldr	r3, [pc, #252]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c00a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c00e:	d108      	bne.n	800c022 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c014:	4618      	mov	r0, r3
 800c016:	f000 ff67 	bl	800cee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c01e:	f000 bc9c 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c022:	2300      	movs	r3, #0
 800c024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c026:	f000 bc98 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c02a:	4b35      	ldr	r3, [pc, #212]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c036:	d108      	bne.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c038:	f107 0318 	add.w	r3, r7, #24
 800c03c:	4618      	mov	r0, r3
 800c03e:	f000 fcab 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c046:	f000 bc88 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c04e:	f000 bc84 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c052:	4b2b      	ldr	r3, [pc, #172]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c05a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c05e:	d108      	bne.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c060:	f107 030c 	add.w	r3, r7, #12
 800c064:	4618      	mov	r0, r3
 800c066:	f000 fdeb 	bl	800cc40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c06e:	f000 bc74 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c072:	2300      	movs	r3, #0
 800c074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c076:	f000 bc70 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c07a:	4b21      	ldr	r3, [pc, #132]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c07e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c082:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c084:	4b1e      	ldr	r3, [pc, #120]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 0304 	and.w	r3, r3, #4
 800c08c:	2b04      	cmp	r3, #4
 800c08e:	d10c      	bne.n	800c0aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c092:	2b00      	cmp	r3, #0
 800c094:	d109      	bne.n	800c0aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c096:	4b1a      	ldr	r3, [pc, #104]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	08db      	lsrs	r3, r3, #3
 800c09c:	f003 0303 	and.w	r3, r3, #3
 800c0a0:	4a18      	ldr	r2, [pc, #96]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0a8:	e01f      	b.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0aa:	4b15      	ldr	r3, [pc, #84]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0b6:	d106      	bne.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0be:	d102      	bne.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0c0:	4b11      	ldr	r3, [pc, #68]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0c4:	e011      	b.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0c6:	4b0e      	ldr	r3, [pc, #56]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0d2:	d106      	bne.n	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0da:	d102      	bne.n	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0dc:	4b0b      	ldr	r3, [pc, #44]	; (800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c0de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0e0:	e003      	b.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0e6:	f000 bc38 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0ea:	f000 bc36 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0ee:	4b08      	ldr	r3, [pc, #32]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f2:	f000 bc32 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0fa:	f000 bc2e 	b.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0fe:	bf00      	nop
 800c100:	58024400 	.word	0x58024400
 800c104:	03d09000 	.word	0x03d09000
 800c108:	003d0900 	.word	0x003d0900
 800c10c:	017d7840 	.word	0x017d7840
 800c110:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c114:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c118:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c11c:	430b      	orrs	r3, r1
 800c11e:	f040 809c 	bne.w	800c25a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c122:	4b9e      	ldr	r3, [pc, #632]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c126:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c12a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c132:	d054      	beq.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c13a:	f200 808b 	bhi.w	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c144:	f000 8083 	beq.w	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c14e:	f200 8081 	bhi.w	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c158:	d02f      	beq.n	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c160:	d878      	bhi.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	2b00      	cmp	r3, #0
 800c166:	d004      	beq.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c16e:	d012      	beq.n	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c170:	e070      	b.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c172:	4b8a      	ldr	r3, [pc, #552]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c17a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c17e:	d107      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c184:	4618      	mov	r0, r3
 800c186:	f000 feaf 	bl	800cee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c18e:	e3e4      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c190:	2300      	movs	r3, #0
 800c192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c194:	e3e1      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c196:	4b81      	ldr	r3, [pc, #516]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c19e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1a2:	d107      	bne.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1a4:	f107 0318 	add.w	r3, r7, #24
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f000 fbf5 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1b2:	e3d2      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b8:	e3cf      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1ba:	4b78      	ldr	r3, [pc, #480]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1c6:	d107      	bne.n	800c1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1c8:	f107 030c 	add.w	r3, r7, #12
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f000 fd37 	bl	800cc40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d6:	e3c0      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1dc:	e3bd      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1de:	4b6f      	ldr	r3, [pc, #444]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1e8:	4b6c      	ldr	r3, [pc, #432]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f003 0304 	and.w	r3, r3, #4
 800c1f0:	2b04      	cmp	r3, #4
 800c1f2:	d10c      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d109      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1fa:	4b68      	ldr	r3, [pc, #416]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	08db      	lsrs	r3, r3, #3
 800c200:	f003 0303 	and.w	r3, r3, #3
 800c204:	4a66      	ldr	r2, [pc, #408]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c206:	fa22 f303 	lsr.w	r3, r2, r3
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c20c:	e01e      	b.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c20e:	4b63      	ldr	r3, [pc, #396]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c21a:	d106      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c21e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c222:	d102      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c224:	4b5f      	ldr	r3, [pc, #380]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c226:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c228:	e010      	b.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c22a:	4b5c      	ldr	r3, [pc, #368]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c236:	d106      	bne.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c23e:	d102      	bne.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c240:	4b59      	ldr	r3, [pc, #356]	; (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c242:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c244:	e002      	b.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c246:	2300      	movs	r3, #0
 800c248:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c24a:	e386      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c24c:	e385      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c24e:	4b57      	ldr	r3, [pc, #348]	; (800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c252:	e382      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c254:	2300      	movs	r3, #0
 800c256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c258:	e37f      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c25a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c25e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c262:	430b      	orrs	r3, r1
 800c264:	f040 80a7 	bne.w	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c268:	4b4c      	ldr	r3, [pc, #304]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c26c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c270:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c278:	d055      	beq.n	800c326 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c280:	f200 8096 	bhi.w	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c28a:	f000 8084 	beq.w	800c396 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c290:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c294:	f200 808c 	bhi.w	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c29e:	d030      	beq.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2a6:	f200 8083 	bhi.w	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d004      	beq.n	800c2ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c2b6:	d012      	beq.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c2b8:	e07a      	b.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2ba:	4b38      	ldr	r3, [pc, #224]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2c6:	d107      	bne.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f000 fe0b 	bl	800cee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2d6:	e340      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2dc:	e33d      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2de:	4b2f      	ldr	r3, [pc, #188]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2ea:	d107      	bne.n	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2ec:	f107 0318 	add.w	r3, r7, #24
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f000 fb51 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2fa:	e32e      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c300:	e32b      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c302:	4b26      	ldr	r3, [pc, #152]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c30a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c30e:	d107      	bne.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c310:	f107 030c 	add.w	r3, r7, #12
 800c314:	4618      	mov	r0, r3
 800c316:	f000 fc93 	bl	800cc40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c31e:	e31c      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c320:	2300      	movs	r3, #0
 800c322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c324:	e319      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c326:	4b1d      	ldr	r3, [pc, #116]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c32a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c32e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c330:	4b1a      	ldr	r3, [pc, #104]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 0304 	and.w	r3, r3, #4
 800c338:	2b04      	cmp	r3, #4
 800c33a:	d10c      	bne.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d109      	bne.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c342:	4b16      	ldr	r3, [pc, #88]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	08db      	lsrs	r3, r3, #3
 800c348:	f003 0303 	and.w	r3, r3, #3
 800c34c:	4a14      	ldr	r2, [pc, #80]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c34e:	fa22 f303 	lsr.w	r3, r2, r3
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c354:	e01e      	b.n	800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c356:	4b11      	ldr	r3, [pc, #68]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c362:	d106      	bne.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c36a:	d102      	bne.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c36c:	4b0d      	ldr	r3, [pc, #52]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c36e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c370:	e010      	b.n	800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c372:	4b0a      	ldr	r3, [pc, #40]	; (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c37a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c37e:	d106      	bne.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c386:	d102      	bne.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c388:	4b07      	ldr	r3, [pc, #28]	; (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c38a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c38c:	e002      	b.n	800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c392:	e2e2      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c394:	e2e1      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c396:	4b05      	ldr	r3, [pc, #20]	; (800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c39a:	e2de      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c39c:	58024400 	.word	0x58024400
 800c3a0:	03d09000 	.word	0x03d09000
 800c3a4:	003d0900 	.word	0x003d0900
 800c3a8:	017d7840 	.word	0x017d7840
 800c3ac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3b4:	e2d1      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c3b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3ba:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c3be:	430b      	orrs	r3, r1
 800c3c0:	f040 809c 	bne.w	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c3c4:	4b93      	ldr	r3, [pc, #588]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3c8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c3cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3d4:	d054      	beq.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3dc:	f200 808b 	bhi.w	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3e6:	f000 8083 	beq.w	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3f0:	f200 8081 	bhi.w	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3fa:	d02f      	beq.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c402:	d878      	bhi.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	2b00      	cmp	r3, #0
 800c408:	d004      	beq.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c410:	d012      	beq.n	800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c412:	e070      	b.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c414:	4b7f      	ldr	r3, [pc, #508]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c41c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c420:	d107      	bne.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c426:	4618      	mov	r0, r3
 800c428:	f000 fd5e 	bl	800cee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c430:	e293      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c436:	e290      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c438:	4b76      	ldr	r3, [pc, #472]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c444:	d107      	bne.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c446:	f107 0318 	add.w	r3, r7, #24
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 faa4 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c454:	e281      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c456:	2300      	movs	r3, #0
 800c458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c45a:	e27e      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c45c:	4b6d      	ldr	r3, [pc, #436]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c468:	d107      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c46a:	f107 030c 	add.w	r3, r7, #12
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 fbe6 	bl	800cc40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c478:	e26f      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c47a:	2300      	movs	r3, #0
 800c47c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c47e:	e26c      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c480:	4b64      	ldr	r3, [pc, #400]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c488:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c48a:	4b62      	ldr	r3, [pc, #392]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f003 0304 	and.w	r3, r3, #4
 800c492:	2b04      	cmp	r3, #4
 800c494:	d10c      	bne.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d109      	bne.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c49c:	4b5d      	ldr	r3, [pc, #372]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	08db      	lsrs	r3, r3, #3
 800c4a2:	f003 0303 	and.w	r3, r3, #3
 800c4a6:	4a5c      	ldr	r2, [pc, #368]	; (800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c4a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ae:	e01e      	b.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4b0:	4b58      	ldr	r3, [pc, #352]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4bc:	d106      	bne.n	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4c4:	d102      	bne.n	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4c6:	4b55      	ldr	r3, [pc, #340]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ca:	e010      	b.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4cc:	4b51      	ldr	r3, [pc, #324]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4d8:	d106      	bne.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e0:	d102      	bne.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4e2:	4b4f      	ldr	r3, [pc, #316]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4e6:	e002      	b.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4ec:	e235      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4ee:	e234      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4f0:	4b4c      	ldr	r3, [pc, #304]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f4:	e231      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fa:	e22e      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c4fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c500:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c504:	430b      	orrs	r3, r1
 800c506:	f040 808f 	bne.w	800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c50a:	4b42      	ldr	r3, [pc, #264]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c50c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c50e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c512:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c51a:	d06b      	beq.n	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c522:	d874      	bhi.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c52a:	d056      	beq.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c532:	d86c      	bhi.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c53a:	d03b      	beq.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c542:	d864      	bhi.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c54a:	d021      	beq.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c552:	d85c      	bhi.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c556:	2b00      	cmp	r3, #0
 800c558:	d004      	beq.n	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c560:	d004      	beq.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c562:	e054      	b.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c564:	f7fe fa0a 	bl	800a97c <HAL_RCC_GetPCLK1Freq>
 800c568:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c56a:	e1f6      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c56c:	4b29      	ldr	r3, [pc, #164]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c578:	d107      	bne.n	800c58a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c57a:	f107 0318 	add.w	r3, r7, #24
 800c57e:	4618      	mov	r0, r3
 800c580:	f000 fa0a 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c588:	e1e7      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c58e:	e1e4      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c590:	4b20      	ldr	r3, [pc, #128]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c59c:	d107      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c59e:	f107 030c 	add.w	r3, r7, #12
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 fb4c 	bl	800cc40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ac:	e1d5      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5b2:	e1d2      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5b4:	4b17      	ldr	r3, [pc, #92]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f003 0304 	and.w	r3, r3, #4
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	d109      	bne.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5c0:	4b14      	ldr	r3, [pc, #80]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	08db      	lsrs	r3, r3, #3
 800c5c6:	f003 0303 	and.w	r3, r3, #3
 800c5ca:	4a13      	ldr	r2, [pc, #76]	; (800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c5cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5d2:	e1c2      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d8:	e1bf      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c5da:	4b0e      	ldr	r3, [pc, #56]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5e6:	d102      	bne.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c5e8:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ec:	e1b5      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f2:	e1b2      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5f4:	4b07      	ldr	r3, [pc, #28]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c600:	d102      	bne.n	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c602:	4b07      	ldr	r3, [pc, #28]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c604:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c606:	e1a8      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c608:	2300      	movs	r3, #0
 800c60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c60c:	e1a5      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c60e:	2300      	movs	r3, #0
 800c610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c612:	e1a2      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c614:	58024400 	.word	0x58024400
 800c618:	03d09000 	.word	0x03d09000
 800c61c:	003d0900 	.word	0x003d0900
 800c620:	017d7840 	.word	0x017d7840
 800c624:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c62c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c630:	430b      	orrs	r3, r1
 800c632:	d173      	bne.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c634:	4b9c      	ldr	r3, [pc, #624]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c63c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c644:	d02f      	beq.n	800c6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c64c:	d863      	bhi.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	2b00      	cmp	r3, #0
 800c652:	d004      	beq.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c65a:	d012      	beq.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c65c:	e05b      	b.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c65e:	4b92      	ldr	r3, [pc, #584]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c66a:	d107      	bne.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c66c:	f107 0318 	add.w	r3, r7, #24
 800c670:	4618      	mov	r0, r3
 800c672:	f000 f991 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c67a:	e16e      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c67c:	2300      	movs	r3, #0
 800c67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c680:	e16b      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c682:	4b89      	ldr	r3, [pc, #548]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c68a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c68e:	d107      	bne.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c690:	f107 030c 	add.w	r3, r7, #12
 800c694:	4618      	mov	r0, r3
 800c696:	f000 fad3 	bl	800cc40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c69e:	e15c      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6a4:	e159      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6a6:	4b80      	ldr	r3, [pc, #512]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6b0:	4b7d      	ldr	r3, [pc, #500]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f003 0304 	and.w	r3, r3, #4
 800c6b8:	2b04      	cmp	r3, #4
 800c6ba:	d10c      	bne.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d109      	bne.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6c2:	4b79      	ldr	r3, [pc, #484]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	08db      	lsrs	r3, r3, #3
 800c6c8:	f003 0303 	and.w	r3, r3, #3
 800c6cc:	4a77      	ldr	r2, [pc, #476]	; (800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c6ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6d4:	e01e      	b.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6d6:	4b74      	ldr	r3, [pc, #464]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6e2:	d106      	bne.n	800c6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6ea:	d102      	bne.n	800c6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6ec:	4b70      	ldr	r3, [pc, #448]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f0:	e010      	b.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6f2:	4b6d      	ldr	r3, [pc, #436]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6fe:	d106      	bne.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c706:	d102      	bne.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c708:	4b6a      	ldr	r3, [pc, #424]	; (800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c70a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c70c:	e002      	b.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c70e:	2300      	movs	r3, #0
 800c710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c712:	e122      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c714:	e121      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c71a:	e11e      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c71c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c720:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c724:	430b      	orrs	r3, r1
 800c726:	d133      	bne.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c728:	4b5f      	ldr	r3, [pc, #380]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c72a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c72c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c730:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c734:	2b00      	cmp	r3, #0
 800c736:	d004      	beq.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c73e:	d012      	beq.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c740:	e023      	b.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c742:	4b59      	ldr	r3, [pc, #356]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c74a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c74e:	d107      	bne.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c754:	4618      	mov	r0, r3
 800c756:	f000 fbc7 	bl	800cee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c75e:	e0fc      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c764:	e0f9      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c766:	4b50      	ldr	r3, [pc, #320]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c76e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c772:	d107      	bne.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c774:	f107 0318 	add.w	r3, r7, #24
 800c778:	4618      	mov	r0, r3
 800c77a:	f000 f90d 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c782:	e0ea      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c784:	2300      	movs	r3, #0
 800c786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c788:	e0e7      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c78e:	e0e4      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c794:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c798:	430b      	orrs	r3, r1
 800c79a:	f040 808d 	bne.w	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c79e:	4b42      	ldr	r3, [pc, #264]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c7a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7ae:	d06b      	beq.n	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7b6:	d874      	bhi.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7be:	d056      	beq.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7c6:	d86c      	bhi.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7ce:	d03b      	beq.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7d6:	d864      	bhi.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7de:	d021      	beq.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7e6:	d85c      	bhi.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d004      	beq.n	800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7f4:	d004      	beq.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c7f6:	e054      	b.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c7f8:	f000 f8b8 	bl	800c96c <HAL_RCCEx_GetD3PCLK1Freq>
 800c7fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7fe:	e0ac      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c800:	4b29      	ldr	r3, [pc, #164]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c80c:	d107      	bne.n	800c81e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c80e:	f107 0318 	add.w	r3, r7, #24
 800c812:	4618      	mov	r0, r3
 800c814:	f000 f8c0 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c81c:	e09d      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c81e:	2300      	movs	r3, #0
 800c820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c822:	e09a      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c824:	4b20      	ldr	r3, [pc, #128]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c82c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c830:	d107      	bne.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c832:	f107 030c 	add.w	r3, r7, #12
 800c836:	4618      	mov	r0, r3
 800c838:	f000 fa02 	bl	800cc40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c840:	e08b      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c846:	e088      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c848:	4b17      	ldr	r3, [pc, #92]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 0304 	and.w	r3, r3, #4
 800c850:	2b04      	cmp	r3, #4
 800c852:	d109      	bne.n	800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c854:	4b14      	ldr	r3, [pc, #80]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	08db      	lsrs	r3, r3, #3
 800c85a:	f003 0303 	and.w	r3, r3, #3
 800c85e:	4a13      	ldr	r2, [pc, #76]	; (800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c860:	fa22 f303 	lsr.w	r3, r2, r3
 800c864:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c866:	e078      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c868:	2300      	movs	r3, #0
 800c86a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c86c:	e075      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c86e:	4b0e      	ldr	r3, [pc, #56]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c87a:	d102      	bne.n	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c87c:	4b0c      	ldr	r3, [pc, #48]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c880:	e06b      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c882:	2300      	movs	r3, #0
 800c884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c886:	e068      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c888:	4b07      	ldr	r3, [pc, #28]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c894:	d102      	bne.n	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c896:	4b07      	ldr	r3, [pc, #28]	; (800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c898:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c89a:	e05e      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c89c:	2300      	movs	r3, #0
 800c89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a0:	e05b      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a6:	e058      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8a8:	58024400 	.word	0x58024400
 800c8ac:	03d09000 	.word	0x03d09000
 800c8b0:	003d0900 	.word	0x003d0900
 800c8b4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c8b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8bc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c8c0:	430b      	orrs	r3, r1
 800c8c2:	d148      	bne.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c8c4:	4b27      	ldr	r3, [pc, #156]	; (800c964 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c8c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8d4:	d02a      	beq.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8dc:	d838      	bhi.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d004      	beq.n	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8ea:	d00d      	beq.n	800c908 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c8ec:	e030      	b.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8ee:	4b1d      	ldr	r3, [pc, #116]	; (800c964 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8fa:	d102      	bne.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c8fc:	4b1a      	ldr	r3, [pc, #104]	; (800c968 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c900:	e02b      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c902:	2300      	movs	r3, #0
 800c904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c906:	e028      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c908:	4b16      	ldr	r3, [pc, #88]	; (800c964 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c914:	d107      	bne.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 fae4 	bl	800cee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c924:	e019      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c926:	2300      	movs	r3, #0
 800c928:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c92a:	e016      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c92c:	4b0d      	ldr	r3, [pc, #52]	; (800c964 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c938:	d107      	bne.n	800c94a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c93a:	f107 0318 	add.w	r3, r7, #24
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 f82a 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c948:	e007      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c94e:	e004      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c954:	e001      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c956:	2300      	movs	r3, #0
 800c958:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3740      	adds	r7, #64	; 0x40
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	58024400 	.word	0x58024400
 800c968:	017d7840 	.word	0x017d7840

0800c96c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c970:	f7fd ffd4 	bl	800a91c <HAL_RCC_GetHCLKFreq>
 800c974:	4602      	mov	r2, r0
 800c976:	4b06      	ldr	r3, [pc, #24]	; (800c990 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	091b      	lsrs	r3, r3, #4
 800c97c:	f003 0307 	and.w	r3, r3, #7
 800c980:	4904      	ldr	r1, [pc, #16]	; (800c994 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c982:	5ccb      	ldrb	r3, [r1, r3]
 800c984:	f003 031f 	and.w	r3, r3, #31
 800c988:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	58024400 	.word	0x58024400
 800c994:	08017054 	.word	0x08017054

0800c998 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c998:	b480      	push	{r7}
 800c99a:	b089      	sub	sp, #36	; 0x24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9a0:	4ba1      	ldr	r3, [pc, #644]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9a4:	f003 0303 	and.w	r3, r3, #3
 800c9a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c9aa:	4b9f      	ldr	r3, [pc, #636]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ae:	0b1b      	lsrs	r3, r3, #12
 800c9b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c9b6:	4b9c      	ldr	r3, [pc, #624]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ba:	091b      	lsrs	r3, r3, #4
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c9c2:	4b99      	ldr	r3, [pc, #612]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c6:	08db      	lsrs	r3, r3, #3
 800c9c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	fb02 f303 	mul.w	r3, r2, r3
 800c9d2:	ee07 3a90 	vmov	s15, r3
 800c9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 8111 	beq.w	800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	f000 8083 	beq.w	800caf4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	f200 80a1 	bhi.w	800cb38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d003      	beq.n	800ca04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d056      	beq.n	800cab0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ca02:	e099      	b.n	800cb38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca04:	4b88      	ldr	r3, [pc, #544]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f003 0320 	and.w	r3, r3, #32
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d02d      	beq.n	800ca6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca10:	4b85      	ldr	r3, [pc, #532]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	08db      	lsrs	r3, r3, #3
 800ca16:	f003 0303 	and.w	r3, r3, #3
 800ca1a:	4a84      	ldr	r2, [pc, #528]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ca1c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	ee07 3a90 	vmov	s15, r3
 800ca28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	ee07 3a90 	vmov	s15, r3
 800ca32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca3a:	4b7b      	ldr	r3, [pc, #492]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca42:	ee07 3a90 	vmov	s15, r3
 800ca46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca6a:	e087      	b.n	800cb7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	ee07 3a90 	vmov	s15, r3
 800ca72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca7e:	4b6a      	ldr	r3, [pc, #424]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca86:	ee07 3a90 	vmov	s15, r3
 800ca8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca92:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caae:	e065      	b.n	800cb7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	ee07 3a90 	vmov	s15, r3
 800cab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cabe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cac2:	4b59      	ldr	r3, [pc, #356]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caca:	ee07 3a90 	vmov	s15, r3
 800cace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cad2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cad6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caf2:	e043      	b.n	800cb7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	ee07 3a90 	vmov	s15, r3
 800cafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cafe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cb02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb06:	4b48      	ldr	r3, [pc, #288]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb0e:	ee07 3a90 	vmov	s15, r3
 800cb12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb16:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb36:	e021      	b.n	800cb7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	ee07 3a90 	vmov	s15, r3
 800cb3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb4a:	4b37      	ldr	r3, [pc, #220]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb52:	ee07 3a90 	vmov	s15, r3
 800cb56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb7c:	4b2a      	ldr	r3, [pc, #168]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb80:	0a5b      	lsrs	r3, r3, #9
 800cb82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb86:	ee07 3a90 	vmov	s15, r3
 800cb8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb96:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cba2:	ee17 2a90 	vmov	r2, s15
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cbaa:	4b1f      	ldr	r3, [pc, #124]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbae:	0c1b      	lsrs	r3, r3, #16
 800cbb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbb4:	ee07 3a90 	vmov	s15, r3
 800cbb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbc4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbd0:	ee17 2a90 	vmov	r2, s15
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cbd8:	4b13      	ldr	r3, [pc, #76]	; (800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbdc:	0e1b      	lsrs	r3, r3, #24
 800cbde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbe2:	ee07 3a90 	vmov	s15, r3
 800cbe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbfe:	ee17 2a90 	vmov	r2, s15
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cc06:	e008      	b.n	800cc1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	609a      	str	r2, [r3, #8]
}
 800cc1a:	bf00      	nop
 800cc1c:	3724      	adds	r7, #36	; 0x24
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	58024400 	.word	0x58024400
 800cc2c:	03d09000 	.word	0x03d09000
 800cc30:	46000000 	.word	0x46000000
 800cc34:	4c742400 	.word	0x4c742400
 800cc38:	4a742400 	.word	0x4a742400
 800cc3c:	4bbebc20 	.word	0x4bbebc20

0800cc40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b089      	sub	sp, #36	; 0x24
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc48:	4ba1      	ldr	r3, [pc, #644]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc4c:	f003 0303 	and.w	r3, r3, #3
 800cc50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc52:	4b9f      	ldr	r3, [pc, #636]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc56:	0d1b      	lsrs	r3, r3, #20
 800cc58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc5e:	4b9c      	ldr	r3, [pc, #624]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc62:	0a1b      	lsrs	r3, r3, #8
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc6a:	4b99      	ldr	r3, [pc, #612]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc6e:	08db      	lsrs	r3, r3, #3
 800cc70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc74:	693a      	ldr	r2, [r7, #16]
 800cc76:	fb02 f303 	mul.w	r3, r2, r3
 800cc7a:	ee07 3a90 	vmov	s15, r3
 800cc7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f000 8111 	beq.w	800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	f000 8083 	beq.w	800cd9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	f200 80a1 	bhi.w	800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d003      	beq.n	800ccac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d056      	beq.n	800cd58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ccaa:	e099      	b.n	800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccac:	4b88      	ldr	r3, [pc, #544]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 0320 	and.w	r3, r3, #32
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d02d      	beq.n	800cd14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccb8:	4b85      	ldr	r3, [pc, #532]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	08db      	lsrs	r3, r3, #3
 800ccbe:	f003 0303 	and.w	r3, r3, #3
 800ccc2:	4a84      	ldr	r2, [pc, #528]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ccc4:	fa22 f303 	lsr.w	r3, r2, r3
 800ccc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	ee07 3a90 	vmov	s15, r3
 800ccd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	ee07 3a90 	vmov	s15, r3
 800ccda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cce2:	4b7b      	ldr	r3, [pc, #492]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccea:	ee07 3a90 	vmov	s15, r3
 800ccee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd12:	e087      	b.n	800ce24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	ee07 3a90 	vmov	s15, r3
 800cd1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cedc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cd22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd26:	4b6a      	ldr	r3, [pc, #424]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd2e:	ee07 3a90 	vmov	s15, r3
 800cd32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd36:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd56:	e065      	b.n	800ce24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	ee07 3a90 	vmov	s15, r3
 800cd5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd6a:	4b59      	ldr	r3, [pc, #356]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd72:	ee07 3a90 	vmov	s15, r3
 800cd76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd9a:	e043      	b.n	800ce24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	ee07 3a90 	vmov	s15, r3
 800cda2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cda6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cdaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdae:	4b48      	ldr	r3, [pc, #288]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdb6:	ee07 3a90 	vmov	s15, r3
 800cdba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdde:	e021      	b.n	800ce24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	ee07 3a90 	vmov	s15, r3
 800cde6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdf2:	4b37      	ldr	r3, [pc, #220]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdfa:	ee07 3a90 	vmov	s15, r3
 800cdfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce06:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ce24:	4b2a      	ldr	r3, [pc, #168]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce28:	0a5b      	lsrs	r3, r3, #9
 800ce2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce2e:	ee07 3a90 	vmov	s15, r3
 800ce32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce4a:	ee17 2a90 	vmov	r2, s15
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce52:	4b1f      	ldr	r3, [pc, #124]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce56:	0c1b      	lsrs	r3, r3, #16
 800ce58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce5c:	ee07 3a90 	vmov	s15, r3
 800ce60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce78:	ee17 2a90 	vmov	r2, s15
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce80:	4b13      	ldr	r3, [pc, #76]	; (800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce84:	0e1b      	lsrs	r3, r3, #24
 800ce86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce8a:	ee07 3a90 	vmov	s15, r3
 800ce8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cea6:	ee17 2a90 	vmov	r2, s15
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ceae:	e008      	b.n	800cec2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	609a      	str	r2, [r3, #8]
}
 800cec2:	bf00      	nop
 800cec4:	3724      	adds	r7, #36	; 0x24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	58024400 	.word	0x58024400
 800ced4:	03d09000 	.word	0x03d09000
 800ced8:	46000000 	.word	0x46000000
 800cedc:	4c742400 	.word	0x4c742400
 800cee0:	4a742400 	.word	0x4a742400
 800cee4:	4bbebc20 	.word	0x4bbebc20

0800cee8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b089      	sub	sp, #36	; 0x24
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cef0:	4ba0      	ldr	r3, [pc, #640]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef4:	f003 0303 	and.w	r3, r3, #3
 800cef8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cefa:	4b9e      	ldr	r3, [pc, #632]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cefc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cefe:	091b      	lsrs	r3, r3, #4
 800cf00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cf06:	4b9b      	ldr	r3, [pc, #620]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0a:	f003 0301 	and.w	r3, r3, #1
 800cf0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cf10:	4b98      	ldr	r3, [pc, #608]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf14:	08db      	lsrs	r3, r3, #3
 800cf16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	fb02 f303 	mul.w	r3, r2, r3
 800cf20:	ee07 3a90 	vmov	s15, r3
 800cf24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 8111 	beq.w	800d156 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cf34:	69bb      	ldr	r3, [r7, #24]
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	f000 8083 	beq.w	800d042 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	f200 80a1 	bhi.w	800d086 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d003      	beq.n	800cf52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d056      	beq.n	800cffe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cf50:	e099      	b.n	800d086 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf52:	4b88      	ldr	r3, [pc, #544]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f003 0320 	and.w	r3, r3, #32
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d02d      	beq.n	800cfba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf5e:	4b85      	ldr	r3, [pc, #532]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	08db      	lsrs	r3, r3, #3
 800cf64:	f003 0303 	and.w	r3, r3, #3
 800cf68:	4a83      	ldr	r2, [pc, #524]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cf6a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	ee07 3a90 	vmov	s15, r3
 800cf76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	ee07 3a90 	vmov	s15, r3
 800cf80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf88:	4b7a      	ldr	r3, [pc, #488]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf90:	ee07 3a90 	vmov	s15, r3
 800cf94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf98:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfb8:	e087      	b.n	800d0ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	ee07 3a90 	vmov	s15, r3
 800cfc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfc4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d180 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cfc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfcc:	4b69      	ldr	r3, [pc, #420]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfd4:	ee07 3a90 	vmov	s15, r3
 800cfd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfdc:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfe0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cff8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cffc:	e065      	b.n	800d0ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	ee07 3a90 	vmov	s15, r3
 800d004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d008:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d184 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d00c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d010:	4b58      	ldr	r3, [pc, #352]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d018:	ee07 3a90 	vmov	s15, r3
 800d01c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d020:	ed97 6a03 	vldr	s12, [r7, #12]
 800d024:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d02c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d03c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d040:	e043      	b.n	800d0ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	ee07 3a90 	vmov	s15, r3
 800d048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d04c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d054:	4b47      	ldr	r3, [pc, #284]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d05c:	ee07 3a90 	vmov	s15, r3
 800d060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d064:	ed97 6a03 	vldr	s12, [r7, #12]
 800d068:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d06c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d07c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d080:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d084:	e021      	b.n	800d0ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	ee07 3a90 	vmov	s15, r3
 800d08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d090:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d180 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d098:	4b36      	ldr	r3, [pc, #216]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d09c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0a0:	ee07 3a90 	vmov	s15, r3
 800d0a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d0ca:	4b2a      	ldr	r3, [pc, #168]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ce:	0a5b      	lsrs	r3, r3, #9
 800d0d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0d4:	ee07 3a90 	vmov	s15, r3
 800d0d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0f0:	ee17 2a90 	vmov	r2, s15
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d0f8:	4b1e      	ldr	r3, [pc, #120]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0fc:	0c1b      	lsrs	r3, r3, #16
 800d0fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d102:	ee07 3a90 	vmov	s15, r3
 800d106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d10e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d112:	edd7 6a07 	vldr	s13, [r7, #28]
 800d116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d11a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d11e:	ee17 2a90 	vmov	r2, s15
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d126:	4b13      	ldr	r3, [pc, #76]	; (800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d12a:	0e1b      	lsrs	r3, r3, #24
 800d12c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d130:	ee07 3a90 	vmov	s15, r3
 800d134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d13c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d140:	edd7 6a07 	vldr	s13, [r7, #28]
 800d144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d14c:	ee17 2a90 	vmov	r2, s15
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d154:	e008      	b.n	800d168 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	609a      	str	r2, [r3, #8]
}
 800d168:	bf00      	nop
 800d16a:	3724      	adds	r7, #36	; 0x24
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr
 800d174:	58024400 	.word	0x58024400
 800d178:	03d09000 	.word	0x03d09000
 800d17c:	46000000 	.word	0x46000000
 800d180:	4c742400 	.word	0x4c742400
 800d184:	4a742400 	.word	0x4a742400
 800d188:	4bbebc20 	.word	0x4bbebc20

0800d18c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d196:	2300      	movs	r3, #0
 800d198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d19a:	4b53      	ldr	r3, [pc, #332]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d19e:	f003 0303 	and.w	r3, r3, #3
 800d1a2:	2b03      	cmp	r3, #3
 800d1a4:	d101      	bne.n	800d1aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e099      	b.n	800d2de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d1aa:	4b4f      	ldr	r3, [pc, #316]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a4e      	ldr	r2, [pc, #312]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d1b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1b6:	f7f6 fc9b 	bl	8003af0 <HAL_GetTick>
 800d1ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1bc:	e008      	b.n	800d1d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d1be:	f7f6 fc97 	bl	8003af0 <HAL_GetTick>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	d901      	bls.n	800d1d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	e086      	b.n	800d2de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1d0:	4b45      	ldr	r3, [pc, #276]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1f0      	bne.n	800d1be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d1dc:	4b42      	ldr	r3, [pc, #264]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	031b      	lsls	r3, r3, #12
 800d1ea:	493f      	ldr	r1, [pc, #252]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	628b      	str	r3, [r1, #40]	; 0x28
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	3b01      	subs	r3, #1
 800d200:	025b      	lsls	r3, r3, #9
 800d202:	b29b      	uxth	r3, r3
 800d204:	431a      	orrs	r2, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	68db      	ldr	r3, [r3, #12]
 800d20a:	3b01      	subs	r3, #1
 800d20c:	041b      	lsls	r3, r3, #16
 800d20e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d212:	431a      	orrs	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	691b      	ldr	r3, [r3, #16]
 800d218:	3b01      	subs	r3, #1
 800d21a:	061b      	lsls	r3, r3, #24
 800d21c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d220:	4931      	ldr	r1, [pc, #196]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d222:	4313      	orrs	r3, r2
 800d224:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d226:	4b30      	ldr	r3, [pc, #192]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	695b      	ldr	r3, [r3, #20]
 800d232:	492d      	ldr	r1, [pc, #180]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d234:	4313      	orrs	r3, r2
 800d236:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d238:	4b2b      	ldr	r3, [pc, #172]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23c:	f023 0220 	bic.w	r2, r3, #32
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	699b      	ldr	r3, [r3, #24]
 800d244:	4928      	ldr	r1, [pc, #160]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d246:	4313      	orrs	r3, r2
 800d248:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d24a:	4b27      	ldr	r3, [pc, #156]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24e:	4a26      	ldr	r2, [pc, #152]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d250:	f023 0310 	bic.w	r3, r3, #16
 800d254:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d256:	4b24      	ldr	r3, [pc, #144]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d25a:	4b24      	ldr	r3, [pc, #144]	; (800d2ec <RCCEx_PLL2_Config+0x160>)
 800d25c:	4013      	ands	r3, r2
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	69d2      	ldr	r2, [r2, #28]
 800d262:	00d2      	lsls	r2, r2, #3
 800d264:	4920      	ldr	r1, [pc, #128]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d266:	4313      	orrs	r3, r2
 800d268:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d26a:	4b1f      	ldr	r3, [pc, #124]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26e:	4a1e      	ldr	r2, [pc, #120]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d270:	f043 0310 	orr.w	r3, r3, #16
 800d274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d106      	bne.n	800d28a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d27c:	4b1a      	ldr	r3, [pc, #104]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d280:	4a19      	ldr	r2, [pc, #100]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d282:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d286:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d288:	e00f      	b.n	800d2aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d106      	bne.n	800d29e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d290:	4b15      	ldr	r3, [pc, #84]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d294:	4a14      	ldr	r2, [pc, #80]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d29a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d29c:	e005      	b.n	800d2aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d29e:	4b12      	ldr	r3, [pc, #72]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a2:	4a11      	ldr	r2, [pc, #68]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d2a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d2a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d2aa:	4b0f      	ldr	r3, [pc, #60]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a0e      	ldr	r2, [pc, #56]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d2b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2b6:	f7f6 fc1b 	bl	8003af0 <HAL_GetTick>
 800d2ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2bc:	e008      	b.n	800d2d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d2be:	f7f6 fc17 	bl	8003af0 <HAL_GetTick>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d901      	bls.n	800d2d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	e006      	b.n	800d2de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2d0:	4b05      	ldr	r3, [pc, #20]	; (800d2e8 <RCCEx_PLL2_Config+0x15c>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d0f0      	beq.n	800d2be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	58024400 	.word	0x58024400
 800d2ec:	ffff0007 	.word	0xffff0007

0800d2f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d2fe:	4b53      	ldr	r3, [pc, #332]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d302:	f003 0303 	and.w	r3, r3, #3
 800d306:	2b03      	cmp	r3, #3
 800d308:	d101      	bne.n	800d30e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d30a:	2301      	movs	r3, #1
 800d30c:	e099      	b.n	800d442 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d30e:	4b4f      	ldr	r3, [pc, #316]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a4e      	ldr	r2, [pc, #312]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d31a:	f7f6 fbe9 	bl	8003af0 <HAL_GetTick>
 800d31e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d320:	e008      	b.n	800d334 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d322:	f7f6 fbe5 	bl	8003af0 <HAL_GetTick>
 800d326:	4602      	mov	r2, r0
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d901      	bls.n	800d334 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d330:	2303      	movs	r3, #3
 800d332:	e086      	b.n	800d442 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d334:	4b45      	ldr	r3, [pc, #276]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1f0      	bne.n	800d322 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d340:	4b42      	ldr	r3, [pc, #264]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d344:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	051b      	lsls	r3, r3, #20
 800d34e:	493f      	ldr	r1, [pc, #252]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d350:	4313      	orrs	r3, r2
 800d352:	628b      	str	r3, [r1, #40]	; 0x28
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	3b01      	subs	r3, #1
 800d35a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	3b01      	subs	r3, #1
 800d364:	025b      	lsls	r3, r3, #9
 800d366:	b29b      	uxth	r3, r3
 800d368:	431a      	orrs	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	3b01      	subs	r3, #1
 800d370:	041b      	lsls	r3, r3, #16
 800d372:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d376:	431a      	orrs	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	691b      	ldr	r3, [r3, #16]
 800d37c:	3b01      	subs	r3, #1
 800d37e:	061b      	lsls	r3, r3, #24
 800d380:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d384:	4931      	ldr	r1, [pc, #196]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d386:	4313      	orrs	r3, r2
 800d388:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d38a:	4b30      	ldr	r3, [pc, #192]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	695b      	ldr	r3, [r3, #20]
 800d396:	492d      	ldr	r1, [pc, #180]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d398:	4313      	orrs	r3, r2
 800d39a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d39c:	4b2b      	ldr	r3, [pc, #172]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	699b      	ldr	r3, [r3, #24]
 800d3a8:	4928      	ldr	r1, [pc, #160]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d3ae:	4b27      	ldr	r3, [pc, #156]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b2:	4a26      	ldr	r2, [pc, #152]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d3b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d3ba:	4b24      	ldr	r3, [pc, #144]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d3bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3be:	4b24      	ldr	r3, [pc, #144]	; (800d450 <RCCEx_PLL3_Config+0x160>)
 800d3c0:	4013      	ands	r3, r2
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	69d2      	ldr	r2, [r2, #28]
 800d3c6:	00d2      	lsls	r2, r2, #3
 800d3c8:	4920      	ldr	r1, [pc, #128]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d3ce:	4b1f      	ldr	r3, [pc, #124]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d2:	4a1e      	ldr	r2, [pc, #120]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d3d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d106      	bne.n	800d3ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d3e0:	4b1a      	ldr	r3, [pc, #104]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e4:	4a19      	ldr	r2, [pc, #100]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d3e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d3ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3ec:	e00f      	b.n	800d40e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d106      	bne.n	800d402 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d3f4:	4b15      	ldr	r3, [pc, #84]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f8:	4a14      	ldr	r2, [pc, #80]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d3fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d3fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d400:	e005      	b.n	800d40e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d402:	4b12      	ldr	r3, [pc, #72]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d406:	4a11      	ldr	r2, [pc, #68]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d40c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d40e:	4b0f      	ldr	r3, [pc, #60]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a0e      	ldr	r2, [pc, #56]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d41a:	f7f6 fb69 	bl	8003af0 <HAL_GetTick>
 800d41e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d420:	e008      	b.n	800d434 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d422:	f7f6 fb65 	bl	8003af0 <HAL_GetTick>
 800d426:	4602      	mov	r2, r0
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	2b02      	cmp	r3, #2
 800d42e:	d901      	bls.n	800d434 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d430:	2303      	movs	r3, #3
 800d432:	e006      	b.n	800d442 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d434:	4b05      	ldr	r3, [pc, #20]	; (800d44c <RCCEx_PLL3_Config+0x15c>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d0f0      	beq.n	800d422 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d440:	7bfb      	ldrb	r3, [r7, #15]
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	58024400 	.word	0x58024400
 800d450:	ffff0007 	.word	0xffff0007

0800d454 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d071      	beq.n	800d54a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d106      	bne.n	800d480 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2200      	movs	r2, #0
 800d476:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7f5 fdd0 	bl	8003020 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2202      	movs	r2, #2
 800d484:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	f003 0310 	and.w	r3, r3, #16
 800d492:	2b10      	cmp	r3, #16
 800d494:	d050      	beq.n	800d538 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	22ca      	movs	r2, #202	; 0xca
 800d49c:	625a      	str	r2, [r3, #36]	; 0x24
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2253      	movs	r2, #83	; 0x53
 800d4a4:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 fa4a 	bl	800d940 <RTC_EnterInitMode>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d124      	bne.n	800d500 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	6899      	ldr	r1, [r3, #8]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	4b24      	ldr	r3, [pc, #144]	; (800d554 <HAL_RTC_Init+0x100>)
 800d4c2:	400b      	ands	r3, r1
 800d4c4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6899      	ldr	r1, [r3, #8]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	685a      	ldr	r2, [r3, #4]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	431a      	orrs	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	699b      	ldr	r3, [r3, #24]
 800d4da:	431a      	orrs	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	430a      	orrs	r2, r1
 800d4e2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	0419      	lsls	r1, r3, #16
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	68da      	ldr	r2, [r3, #12]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	430a      	orrs	r2, r1
 800d4f4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 fa56 	bl	800d9a8 <RTC_ExitInitMode>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d500:	7bfb      	ldrb	r3, [r7, #15]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d113      	bne.n	800d52e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f022 0203 	bic.w	r2, r2, #3
 800d514:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	69da      	ldr	r2, [r3, #28]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	695b      	ldr	r3, [r3, #20]
 800d524:	431a      	orrs	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	430a      	orrs	r2, r1
 800d52c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	22ff      	movs	r2, #255	; 0xff
 800d534:	625a      	str	r2, [r3, #36]	; 0x24
 800d536:	e001      	b.n	800d53c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d538:	2300      	movs	r3, #0
 800d53a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d103      	bne.n	800d54a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2201      	movs	r2, #1
 800d546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	ff8fffbf 	.word	0xff8fffbf

0800d558 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d558:	b590      	push	{r4, r7, lr}
 800d55a:	b087      	sub	sp, #28
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d56a:	2b01      	cmp	r3, #1
 800d56c:	d101      	bne.n	800d572 <HAL_RTC_SetTime+0x1a>
 800d56e:	2302      	movs	r3, #2
 800d570:	e089      	b.n	800d686 <HAL_RTC_SetTime+0x12e>
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2201      	movs	r2, #1
 800d576:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2202      	movs	r2, #2
 800d57e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	22ca      	movs	r2, #202	; 0xca
 800d588:	625a      	str	r2, [r3, #36]	; 0x24
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2253      	movs	r2, #83	; 0x53
 800d590:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f000 f9d4 	bl	800d940 <RTC_EnterInitMode>
 800d598:	4603      	mov	r3, r0
 800d59a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d59c:	7cfb      	ldrb	r3, [r7, #19]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d161      	bne.n	800d666 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d126      	bne.n	800d5f6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d102      	bne.n	800d5bc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f000 fa2f 	bl	800da24 <RTC_ByteToBcd2>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	785b      	ldrb	r3, [r3, #1]
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f000 fa28 	bl	800da24 <RTC_ByteToBcd2>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d5d8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	789b      	ldrb	r3, [r3, #2]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f000 fa20 	bl	800da24 <RTC_ByteToBcd2>
 800d5e4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d5e6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	78db      	ldrb	r3, [r3, #3]
 800d5ee:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	617b      	str	r3, [r7, #20]
 800d5f4:	e018      	b.n	800d628 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d600:	2b00      	cmp	r3, #0
 800d602:	d102      	bne.n	800d60a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	2200      	movs	r2, #0
 800d608:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	785b      	ldrb	r3, [r3, #1]
 800d614:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d616:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d618:	68ba      	ldr	r2, [r7, #8]
 800d61a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d61c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	78db      	ldrb	r3, [r3, #3]
 800d622:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d624:	4313      	orrs	r3, r2
 800d626:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	6979      	ldr	r1, [r7, #20]
 800d62e:	4b18      	ldr	r3, [pc, #96]	; (800d690 <HAL_RTC_SetTime+0x138>)
 800d630:	400b      	ands	r3, r1
 800d632:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	689a      	ldr	r2, [r3, #8]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d642:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	6899      	ldr	r1, [r3, #8]
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	68da      	ldr	r2, [r3, #12]
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	431a      	orrs	r2, r3
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	430a      	orrs	r2, r1
 800d65a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f000 f9a3 	bl	800d9a8 <RTC_ExitInitMode>
 800d662:	4603      	mov	r3, r0
 800d664:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	22ff      	movs	r2, #255	; 0xff
 800d66c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d66e:	7cfb      	ldrb	r3, [r7, #19]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d103      	bne.n	800d67c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2201      	movs	r2, #1
 800d678:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2200      	movs	r2, #0
 800d680:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d684:	7cfb      	ldrb	r3, [r7, #19]
}
 800d686:	4618      	mov	r0, r3
 800d688:	371c      	adds	r7, #28
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd90      	pop	{r4, r7, pc}
 800d68e:	bf00      	nop
 800d690:	007f7f7f 	.word	0x007f7f7f

0800d694 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af00      	add	r7, sp, #0
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	691b      	ldr	r3, [r3, #16]
 800d6b0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	4b22      	ldr	r3, [pc, #136]	; (800d748 <HAL_RTC_GetTime+0xb4>)
 800d6c0:	4013      	ands	r3, r2
 800d6c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	0c1b      	lsrs	r3, r3, #16
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	0a1b      	lsrs	r3, r3, #8
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6de:	b2da      	uxtb	r2, r3
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6ec:	b2da      	uxtb	r2, r3
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	0d9b      	lsrs	r3, r3, #22
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	f003 0301 	and.w	r3, r3, #1
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d11a      	bne.n	800d73e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	4618      	mov	r0, r3
 800d70e:	f000 f9a9 	bl	800da64 <RTC_Bcd2ToByte>
 800d712:	4603      	mov	r3, r0
 800d714:	461a      	mov	r2, r3
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	785b      	ldrb	r3, [r3, #1]
 800d71e:	4618      	mov	r0, r3
 800d720:	f000 f9a0 	bl	800da64 <RTC_Bcd2ToByte>
 800d724:	4603      	mov	r3, r0
 800d726:	461a      	mov	r2, r3
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	789b      	ldrb	r3, [r3, #2]
 800d730:	4618      	mov	r0, r3
 800d732:	f000 f997 	bl	800da64 <RTC_Bcd2ToByte>
 800d736:	4603      	mov	r3, r0
 800d738:	461a      	mov	r2, r3
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3718      	adds	r7, #24
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	007f7f7f 	.word	0x007f7f7f

0800d74c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d74c:	b590      	push	{r4, r7, lr}
 800d74e:	b087      	sub	sp, #28
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d101      	bne.n	800d766 <HAL_RTC_SetDate+0x1a>
 800d762:	2302      	movs	r3, #2
 800d764:	e073      	b.n	800d84e <HAL_RTC_SetDate+0x102>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2201      	movs	r2, #1
 800d76a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2202      	movs	r2, #2
 800d772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d10e      	bne.n	800d79a <HAL_RTC_SetDate+0x4e>
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	785b      	ldrb	r3, [r3, #1]
 800d780:	f003 0310 	and.w	r3, r3, #16
 800d784:	2b00      	cmp	r3, #0
 800d786:	d008      	beq.n	800d79a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	785b      	ldrb	r3, [r3, #1]
 800d78c:	f023 0310 	bic.w	r3, r3, #16
 800d790:	b2db      	uxtb	r3, r3
 800d792:	330a      	adds	r3, #10
 800d794:	b2da      	uxtb	r2, r3
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d11c      	bne.n	800d7da <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	78db      	ldrb	r3, [r3, #3]
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f000 f93d 	bl	800da24 <RTC_ByteToBcd2>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	785b      	ldrb	r3, [r3, #1]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f000 f936 	bl	800da24 <RTC_ByteToBcd2>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d7bc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	789b      	ldrb	r3, [r3, #2]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 f92e 	bl	800da24 <RTC_ByteToBcd2>
 800d7c8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d7ca:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	617b      	str	r3, [r7, #20]
 800d7d8:	e00e      	b.n	800d7f8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	78db      	ldrb	r3, [r3, #3]
 800d7de:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	785b      	ldrb	r3, [r3, #1]
 800d7e4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d7e6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d7ec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	22ca      	movs	r2, #202	; 0xca
 800d7fe:	625a      	str	r2, [r3, #36]	; 0x24
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2253      	movs	r2, #83	; 0x53
 800d806:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f000 f899 	bl	800d940 <RTC_EnterInitMode>
 800d80e:	4603      	mov	r3, r0
 800d810:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d812:	7cfb      	ldrb	r3, [r7, #19]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10a      	bne.n	800d82e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	6979      	ldr	r1, [r7, #20]
 800d81e:	4b0e      	ldr	r3, [pc, #56]	; (800d858 <HAL_RTC_SetDate+0x10c>)
 800d820:	400b      	ands	r3, r1
 800d822:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f000 f8bf 	bl	800d9a8 <RTC_ExitInitMode>
 800d82a:	4603      	mov	r3, r0
 800d82c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	22ff      	movs	r2, #255	; 0xff
 800d834:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d836:	7cfb      	ldrb	r3, [r7, #19]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d103      	bne.n	800d844 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2201      	movs	r2, #1
 800d840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2200      	movs	r2, #0
 800d848:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d84c:	7cfb      	ldrb	r3, [r7, #19]


}
 800d84e:	4618      	mov	r0, r3
 800d850:	371c      	adds	r7, #28
 800d852:	46bd      	mov	sp, r7
 800d854:	bd90      	pop	{r4, r7, pc}
 800d856:	bf00      	nop
 800d858:	00ffff3f 	.word	0x00ffff3f

0800d85c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b086      	sub	sp, #24
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	685a      	ldr	r2, [r3, #4]
 800d86e:	4b21      	ldr	r3, [pc, #132]	; (800d8f4 <HAL_RTC_GetDate+0x98>)
 800d870:	4013      	ands	r3, r2
 800d872:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	0c1b      	lsrs	r3, r3, #16
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	0a1b      	lsrs	r3, r3, #8
 800d882:	b2db      	uxtb	r3, r3
 800d884:	f003 031f 	and.w	r3, r3, #31
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	b2db      	uxtb	r3, r3
 800d892:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d896:	b2da      	uxtb	r2, r3
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	0b5b      	lsrs	r3, r3, #13
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	f003 0307 	and.w	r3, r3, #7
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d11a      	bne.n	800d8e8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	78db      	ldrb	r3, [r3, #3]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f000 f8d4 	bl	800da64 <RTC_Bcd2ToByte>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	461a      	mov	r2, r3
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	785b      	ldrb	r3, [r3, #1]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f000 f8cb 	bl	800da64 <RTC_Bcd2ToByte>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	789b      	ldrb	r3, [r3, #2]
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f000 f8c2 	bl	800da64 <RTC_Bcd2ToByte>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3718      	adds	r7, #24
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	00ffff3f 	.word	0x00ffff3f

0800d8f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a0d      	ldr	r2, [pc, #52]	; (800d93c <HAL_RTC_WaitForSynchro+0x44>)
 800d906:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d908:	f7f6 f8f2 	bl	8003af0 <HAL_GetTick>
 800d90c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d90e:	e009      	b.n	800d924 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d910:	f7f6 f8ee 	bl	8003af0 <HAL_GetTick>
 800d914:	4602      	mov	r2, r0
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	1ad3      	subs	r3, r2, r3
 800d91a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d91e:	d901      	bls.n	800d924 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d920:	2303      	movs	r3, #3
 800d922:	e007      	b.n	800d934 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	f003 0320 	and.w	r3, r3, #32
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d0ee      	beq.n	800d910 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3710      	adds	r7, #16
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	0003ff5f 	.word	0x0003ff5f

0800d940 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d948:	2300      	movs	r3, #0
 800d94a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d956:	2b00      	cmp	r3, #0
 800d958:	d120      	bne.n	800d99c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d962:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d964:	f7f6 f8c4 	bl	8003af0 <HAL_GetTick>
 800d968:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d96a:	e00d      	b.n	800d988 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d96c:	f7f6 f8c0 	bl	8003af0 <HAL_GetTick>
 800d970:	4602      	mov	r2, r0
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d97a:	d905      	bls.n	800d988 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d97c:	2303      	movs	r3, #3
 800d97e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2203      	movs	r2, #3
 800d984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d992:	2b00      	cmp	r3, #0
 800d994:	d102      	bne.n	800d99c <RTC_EnterInitMode+0x5c>
 800d996:	7bfb      	ldrb	r3, [r7, #15]
 800d998:	2b03      	cmp	r3, #3
 800d99a:	d1e7      	bne.n	800d96c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
	...

0800d9a8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d9b4:	4b1a      	ldr	r3, [pc, #104]	; (800da20 <RTC_ExitInitMode+0x78>)
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	4a19      	ldr	r2, [pc, #100]	; (800da20 <RTC_ExitInitMode+0x78>)
 800d9ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9be:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d9c0:	4b17      	ldr	r3, [pc, #92]	; (800da20 <RTC_ExitInitMode+0x78>)
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	f003 0320 	and.w	r3, r3, #32
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d10c      	bne.n	800d9e6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f7ff ff93 	bl	800d8f8 <HAL_RTC_WaitForSynchro>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d01e      	beq.n	800da16 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2203      	movs	r2, #3
 800d9dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	73fb      	strb	r3, [r7, #15]
 800d9e4:	e017      	b.n	800da16 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d9e6:	4b0e      	ldr	r3, [pc, #56]	; (800da20 <RTC_ExitInitMode+0x78>)
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	4a0d      	ldr	r2, [pc, #52]	; (800da20 <RTC_ExitInitMode+0x78>)
 800d9ec:	f023 0320 	bic.w	r3, r3, #32
 800d9f0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7ff ff80 	bl	800d8f8 <HAL_RTC_WaitForSynchro>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d005      	beq.n	800da0a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2203      	movs	r2, #3
 800da02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800da06:	2303      	movs	r3, #3
 800da08:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800da0a:	4b05      	ldr	r3, [pc, #20]	; (800da20 <RTC_ExitInitMode+0x78>)
 800da0c:	689b      	ldr	r3, [r3, #8]
 800da0e:	4a04      	ldr	r2, [pc, #16]	; (800da20 <RTC_ExitInitMode+0x78>)
 800da10:	f043 0320 	orr.w	r3, r3, #32
 800da14:	6093      	str	r3, [r2, #8]
  }

  return status;
 800da16:	7bfb      	ldrb	r3, [r7, #15]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	58004000 	.word	0x58004000

0800da24 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	4603      	mov	r3, r0
 800da2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800da2e:	2300      	movs	r3, #0
 800da30:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800da32:	79fb      	ldrb	r3, [r7, #7]
 800da34:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800da36:	e005      	b.n	800da44 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	3301      	adds	r3, #1
 800da3c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800da3e:	7afb      	ldrb	r3, [r7, #11]
 800da40:	3b0a      	subs	r3, #10
 800da42:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800da44:	7afb      	ldrb	r3, [r7, #11]
 800da46:	2b09      	cmp	r3, #9
 800da48:	d8f6      	bhi.n	800da38 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	011b      	lsls	r3, r3, #4
 800da50:	b2da      	uxtb	r2, r3
 800da52:	7afb      	ldrb	r3, [r7, #11]
 800da54:	4313      	orrs	r3, r2
 800da56:	b2db      	uxtb	r3, r3
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3714      	adds	r7, #20
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	4603      	mov	r3, r0
 800da6c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800da6e:	79fb      	ldrb	r3, [r7, #7]
 800da70:	091b      	lsrs	r3, r3, #4
 800da72:	b2db      	uxtb	r3, r3
 800da74:	461a      	mov	r2, r3
 800da76:	0092      	lsls	r2, r2, #2
 800da78:	4413      	add	r3, r2
 800da7a:	005b      	lsls	r3, r3, #1
 800da7c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800da7e:	79fb      	ldrb	r3, [r7, #7]
 800da80:	f003 030f 	and.w	r3, r3, #15
 800da84:	b2da      	uxtb	r2, r3
 800da86:	7bfb      	ldrb	r3, [r7, #15]
 800da88:	4413      	add	r3, r2
 800da8a:	b2db      	uxtb	r3, r3
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3714      	adds	r7, #20
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d101      	bne.n	800daaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800daa6:	2301      	movs	r3, #1
 800daa8:	e10f      	b.n	800dcca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a87      	ldr	r2, [pc, #540]	; (800dcd4 <HAL_SPI_Init+0x23c>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d00f      	beq.n	800dada <HAL_SPI_Init+0x42>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a86      	ldr	r2, [pc, #536]	; (800dcd8 <HAL_SPI_Init+0x240>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d00a      	beq.n	800dada <HAL_SPI_Init+0x42>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a84      	ldr	r2, [pc, #528]	; (800dcdc <HAL_SPI_Init+0x244>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d005      	beq.n	800dada <HAL_SPI_Init+0x42>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	2b0f      	cmp	r3, #15
 800dad4:	d901      	bls.n	800dada <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	e0f7      	b.n	800dcca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 fc12 	bl	800e304 <SPI_GetPacketSize>
 800dae0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	4a7b      	ldr	r2, [pc, #492]	; (800dcd4 <HAL_SPI_Init+0x23c>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d00c      	beq.n	800db06 <HAL_SPI_Init+0x6e>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a79      	ldr	r2, [pc, #484]	; (800dcd8 <HAL_SPI_Init+0x240>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d007      	beq.n	800db06 <HAL_SPI_Init+0x6e>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4a78      	ldr	r2, [pc, #480]	; (800dcdc <HAL_SPI_Init+0x244>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d002      	beq.n	800db06 <HAL_SPI_Init+0x6e>
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2b08      	cmp	r3, #8
 800db04:	d811      	bhi.n	800db2a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db0a:	4a72      	ldr	r2, [pc, #456]	; (800dcd4 <HAL_SPI_Init+0x23c>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d009      	beq.n	800db24 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a70      	ldr	r2, [pc, #448]	; (800dcd8 <HAL_SPI_Init+0x240>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d004      	beq.n	800db24 <HAL_SPI_Init+0x8c>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4a6f      	ldr	r2, [pc, #444]	; (800dcdc <HAL_SPI_Init+0x244>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d104      	bne.n	800db2e <HAL_SPI_Init+0x96>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2b10      	cmp	r3, #16
 800db28:	d901      	bls.n	800db2e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800db2a:	2301      	movs	r3, #1
 800db2c:	e0cd      	b.n	800dcca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db34:	b2db      	uxtb	r3, r3
 800db36:	2b00      	cmp	r3, #0
 800db38:	d106      	bne.n	800db48 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7f5 faa0 	bl	8003088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2202      	movs	r2, #2
 800db4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f022 0201 	bic.w	r2, r2, #1
 800db5e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800db6a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800db74:	d119      	bne.n	800dbaa <HAL_SPI_Init+0x112>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db7e:	d103      	bne.n	800db88 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800db84:	2b00      	cmp	r3, #0
 800db86:	d008      	beq.n	800db9a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d10c      	bne.n	800dbaa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800db94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db98:	d107      	bne.n	800dbaa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dba8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00f      	beq.n	800dbd6 <HAL_SPI_Init+0x13e>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	2b06      	cmp	r3, #6
 800dbbc:	d90b      	bls.n	800dbd6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	430a      	orrs	r2, r1
 800dbd2:	601a      	str	r2, [r3, #0]
 800dbd4:	e007      	b.n	800dbe6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dbe4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	69da      	ldr	r2, [r3, #28]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbee:	431a      	orrs	r2, r3
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	431a      	orrs	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbf8:	ea42 0103 	orr.w	r1, r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	68da      	ldr	r2, [r3, #12]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	430a      	orrs	r2, r1
 800dc06:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc10:	431a      	orrs	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc16:	431a      	orrs	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	699b      	ldr	r3, [r3, #24]
 800dc1c:	431a      	orrs	r2, r3
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	691b      	ldr	r3, [r3, #16]
 800dc22:	431a      	orrs	r2, r3
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	695b      	ldr	r3, [r3, #20]
 800dc28:	431a      	orrs	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a1b      	ldr	r3, [r3, #32]
 800dc2e:	431a      	orrs	r2, r3
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	431a      	orrs	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc3a:	431a      	orrs	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	431a      	orrs	r2, r3
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc46:	ea42 0103 	orr.w	r1, r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	430a      	orrs	r2, r1
 800dc54:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d113      	bne.n	800dc86 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc70:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc84:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f022 0201 	bic.w	r2, r2, #1
 800dc94:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d00a      	beq.n	800dcb8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	430a      	orrs	r2, r1
 800dcb6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	40013000 	.word	0x40013000
 800dcd8:	40003800 	.word	0x40003800
 800dcdc:	40003c00 	.word	0x40003c00

0800dce0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b088      	sub	sp, #32
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	603b      	str	r3, [r7, #0]
 800dcec:	4613      	mov	r3, r2
 800dcee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcf4:	095b      	lsrs	r3, r3, #5
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	3330      	adds	r3, #48	; 0x30
 800dd02:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dd04:	f7f5 fef4 	bl	8003af0 <HAL_GetTick>
 800dd08:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d001      	beq.n	800dd1a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800dd16:	2302      	movs	r3, #2
 800dd18:	e250      	b.n	800e1bc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d002      	beq.n	800dd26 <HAL_SPI_Receive+0x46>
 800dd20:	88fb      	ldrh	r3, [r7, #6]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d101      	bne.n	800dd2a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800dd26:	2301      	movs	r3, #1
 800dd28:	e248      	b.n	800e1bc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d101      	bne.n	800dd38 <HAL_SPI_Receive+0x58>
 800dd34:	2302      	movs	r3, #2
 800dd36:	e241      	b.n	800e1bc <HAL_SPI_Receive+0x4dc>
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2204      	movs	r2, #4
 800dd44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	68ba      	ldr	r2, [r7, #8]
 800dd54:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	88fa      	ldrh	r2, [r7, #6]
 800dd5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	88fa      	ldrh	r2, [r7, #6]
 800dd62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2200      	movs	r2, #0
 800dd78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2200      	movs	r2, #0
 800dd86:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dd90:	d108      	bne.n	800dda4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	681a      	ldr	r2, [r3, #0]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dda0:	601a      	str	r2, [r3, #0]
 800dda2:	e009      	b.n	800ddb8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ddb6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	685a      	ldr	r2, [r3, #4]
 800ddbe:	4b95      	ldr	r3, [pc, #596]	; (800e014 <HAL_SPI_Receive+0x334>)
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	88f9      	ldrh	r1, [r7, #6]
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	6812      	ldr	r2, [r2, #0]
 800ddc8:	430b      	orrs	r3, r1
 800ddca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f042 0201 	orr.w	r2, r2, #1
 800ddda:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dde4:	d107      	bne.n	800ddf6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddf4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	2b0f      	cmp	r3, #15
 800ddfc:	d96c      	bls.n	800ded8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ddfe:	e064      	b.n	800deca <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	695b      	ldr	r3, [r3, #20]
 800de06:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	695b      	ldr	r3, [r3, #20]
 800de0e:	f003 0301 	and.w	r3, r3, #1
 800de12:	2b01      	cmp	r3, #1
 800de14:	d114      	bne.n	800de40 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800de20:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de26:	1d1a      	adds	r2, r3, #4
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de32:	b29b      	uxth	r3, r3
 800de34:	3b01      	subs	r3, #1
 800de36:	b29a      	uxth	r2, r3
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de3e:	e044      	b.n	800deca <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de46:	b29b      	uxth	r3, r3
 800de48:	8bfa      	ldrh	r2, [r7, #30]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d919      	bls.n	800de82 <HAL_SPI_Receive+0x1a2>
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de54:	2b00      	cmp	r3, #0
 800de56:	d014      	beq.n	800de82 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800de62:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de68:	1d1a      	adds	r2, r3, #4
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de74:	b29b      	uxth	r3, r3
 800de76:	3b01      	subs	r3, #1
 800de78:	b29a      	uxth	r2, r3
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de80:	e023      	b.n	800deca <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de82:	f7f5 fe35 	bl	8003af0 <HAL_GetTick>
 800de86:	4602      	mov	r2, r0
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	1ad3      	subs	r3, r2, r3
 800de8c:	683a      	ldr	r2, [r7, #0]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d803      	bhi.n	800de9a <HAL_SPI_Receive+0x1ba>
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de98:	d102      	bne.n	800dea0 <HAL_SPI_Receive+0x1c0>
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d114      	bne.n	800deca <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f000 f98f 	bl	800e1c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800deac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2201      	movs	r2, #1
 800deba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2200      	movs	r2, #0
 800dec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dec6:	2303      	movs	r3, #3
 800dec8:	e178      	b.n	800e1bc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d194      	bne.n	800de00 <HAL_SPI_Receive+0x120>
 800ded6:	e15e      	b.n	800e196 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	2b07      	cmp	r3, #7
 800dede:	f240 8153 	bls.w	800e188 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dee2:	e08f      	b.n	800e004 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	695b      	ldr	r3, [r3, #20]
 800deea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	695b      	ldr	r3, [r3, #20]
 800def2:	f003 0301 	and.w	r3, r3, #1
 800def6:	2b01      	cmp	r3, #1
 800def8:	d114      	bne.n	800df24 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800defe:	69ba      	ldr	r2, [r7, #24]
 800df00:	8812      	ldrh	r2, [r2, #0]
 800df02:	b292      	uxth	r2, r2
 800df04:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df0a:	1c9a      	adds	r2, r3, #2
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df16:	b29b      	uxth	r3, r3
 800df18:	3b01      	subs	r3, #1
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df22:	e06f      	b.n	800e004 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	8bfa      	ldrh	r2, [r7, #30]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d924      	bls.n	800df7c <HAL_SPI_Receive+0x29c>
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d01f      	beq.n	800df7c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df40:	69ba      	ldr	r2, [r7, #24]
 800df42:	8812      	ldrh	r2, [r2, #0]
 800df44:	b292      	uxth	r2, r2
 800df46:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df4c:	1c9a      	adds	r2, r3, #2
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df56:	69ba      	ldr	r2, [r7, #24]
 800df58:	8812      	ldrh	r2, [r2, #0]
 800df5a:	b292      	uxth	r2, r2
 800df5c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df62:	1c9a      	adds	r2, r3, #2
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df6e:	b29b      	uxth	r3, r3
 800df70:	3b02      	subs	r3, #2
 800df72:	b29a      	uxth	r2, r3
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df7a:	e043      	b.n	800e004 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df82:	b29b      	uxth	r3, r3
 800df84:	2b01      	cmp	r3, #1
 800df86:	d119      	bne.n	800dfbc <HAL_SPI_Receive+0x2dc>
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d014      	beq.n	800dfbc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df96:	69ba      	ldr	r2, [r7, #24]
 800df98:	8812      	ldrh	r2, [r2, #0]
 800df9a:	b292      	uxth	r2, r2
 800df9c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfa2:	1c9a      	adds	r2, r3, #2
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	3b01      	subs	r3, #1
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dfba:	e023      	b.n	800e004 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfbc:	f7f5 fd98 	bl	8003af0 <HAL_GetTick>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	683a      	ldr	r2, [r7, #0]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d803      	bhi.n	800dfd4 <HAL_SPI_Receive+0x2f4>
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfd2:	d102      	bne.n	800dfda <HAL_SPI_Receive+0x2fa>
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d114      	bne.n	800e004 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	f000 f8f2 	bl	800e1c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfe6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2201      	movs	r2, #1
 800dff4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2200      	movs	r2, #0
 800dffc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e000:	2303      	movs	r3, #3
 800e002:	e0db      	b.n	800e1bc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f47f af69 	bne.w	800dee4 <HAL_SPI_Receive+0x204>
 800e012:	e0c0      	b.n	800e196 <HAL_SPI_Receive+0x4b6>
 800e014:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	695b      	ldr	r3, [r3, #20]
 800e01e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	695b      	ldr	r3, [r3, #20]
 800e026:	f003 0301 	and.w	r3, r3, #1
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d117      	bne.n	800e05e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e03a:	7812      	ldrb	r2, [r2, #0]
 800e03c:	b2d2      	uxtb	r2, r2
 800e03e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e044:	1c5a      	adds	r2, r3, #1
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e050:	b29b      	uxth	r3, r3
 800e052:	3b01      	subs	r3, #1
 800e054:	b29a      	uxth	r2, r3
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e05c:	e094      	b.n	800e188 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e064:	b29b      	uxth	r3, r3
 800e066:	8bfa      	ldrh	r2, [r7, #30]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d946      	bls.n	800e0fa <HAL_SPI_Receive+0x41a>
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e072:	2b00      	cmp	r3, #0
 800e074:	d041      	beq.n	800e0fa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e082:	7812      	ldrb	r2, [r2, #0]
 800e084:	b2d2      	uxtb	r2, r2
 800e086:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e08c:	1c5a      	adds	r2, r3, #1
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e09e:	7812      	ldrb	r2, [r2, #0]
 800e0a0:	b2d2      	uxtb	r2, r2
 800e0a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0a8:	1c5a      	adds	r2, r3, #1
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0ba:	7812      	ldrb	r2, [r2, #0]
 800e0bc:	b2d2      	uxtb	r2, r2
 800e0be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0c4:	1c5a      	adds	r2, r3, #1
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0d6:	7812      	ldrb	r2, [r2, #0]
 800e0d8:	b2d2      	uxtb	r2, r2
 800e0da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0e0:	1c5a      	adds	r2, r3, #1
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	3b04      	subs	r3, #4
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0f8:	e046      	b.n	800e188 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e100:	b29b      	uxth	r3, r3
 800e102:	2b03      	cmp	r3, #3
 800e104:	d81c      	bhi.n	800e140 <HAL_SPI_Receive+0x460>
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d017      	beq.n	800e140 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e11c:	7812      	ldrb	r2, [r2, #0]
 800e11e:	b2d2      	uxtb	r2, r2
 800e120:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e126:	1c5a      	adds	r2, r3, #1
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e132:	b29b      	uxth	r3, r3
 800e134:	3b01      	subs	r3, #1
 800e136:	b29a      	uxth	r2, r3
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e13e:	e023      	b.n	800e188 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e140:	f7f5 fcd6 	bl	8003af0 <HAL_GetTick>
 800e144:	4602      	mov	r2, r0
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	683a      	ldr	r2, [r7, #0]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d803      	bhi.n	800e158 <HAL_SPI_Receive+0x478>
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e156:	d102      	bne.n	800e15e <HAL_SPI_Receive+0x47e>
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d114      	bne.n	800e188 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f000 f830 	bl	800e1c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e16a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e184:	2303      	movs	r3, #3
 800e186:	e019      	b.n	800e1bc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e18e:	b29b      	uxth	r3, r3
 800e190:	2b00      	cmp	r3, #0
 800e192:	f47f af41 	bne.w	800e018 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e196:	68f8      	ldr	r0, [r7, #12]
 800e198:	f000 f814 	bl	800e1c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d001      	beq.n	800e1ba <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e000      	b.n	800e1bc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e1ba:	2300      	movs	r3, #0
  }
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3720      	adds	r7, #32
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	695b      	ldr	r3, [r3, #20]
 800e1d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	699a      	ldr	r2, [r3, #24]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f042 0208 	orr.w	r2, r2, #8
 800e1e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	699a      	ldr	r2, [r3, #24]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f042 0210 	orr.w	r2, r2, #16
 800e1f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f022 0201 	bic.w	r2, r2, #1
 800e202:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	6919      	ldr	r1, [r3, #16]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	4b3c      	ldr	r3, [pc, #240]	; (800e300 <SPI_CloseTransfer+0x13c>)
 800e210:	400b      	ands	r3, r1
 800e212:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	689a      	ldr	r2, [r3, #8]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e222:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	2b04      	cmp	r3, #4
 800e22e:	d014      	beq.n	800e25a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f003 0320 	and.w	r3, r3, #32
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00f      	beq.n	800e25a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e240:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	699a      	ldr	r2, [r3, #24]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f042 0220 	orr.w	r2, r2, #32
 800e258:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e260:	b2db      	uxtb	r3, r3
 800e262:	2b03      	cmp	r3, #3
 800e264:	d014      	beq.n	800e290 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d00f      	beq.n	800e290 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e276:	f043 0204 	orr.w	r2, r3, #4
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	699a      	ldr	r2, [r3, #24]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e28e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e296:	2b00      	cmp	r3, #0
 800e298:	d00f      	beq.n	800e2ba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2a0:	f043 0201 	orr.w	r2, r3, #1
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	699a      	ldr	r2, [r3, #24]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d00f      	beq.n	800e2e4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2ca:	f043 0208 	orr.w	r2, r3, #8
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	699a      	ldr	r2, [r3, #24]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e2f4:	bf00      	nop
 800e2f6:	3714      	adds	r7, #20
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	fffffc90 	.word	0xfffffc90

0800e304 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e304:	b480      	push	{r7}
 800e306:	b085      	sub	sp, #20
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e310:	095b      	lsrs	r3, r3, #5
 800e312:	3301      	adds	r3, #1
 800e314:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	3301      	adds	r3, #1
 800e31c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	3307      	adds	r3, #7
 800e322:	08db      	lsrs	r3, r3, #3
 800e324:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	68fa      	ldr	r2, [r7, #12]
 800e32a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3714      	adds	r7, #20
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr

0800e33a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	b082      	sub	sp, #8
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d101      	bne.n	800e34c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e348:	2301      	movs	r3, #1
 800e34a:	e049      	b.n	800e3e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e352:	b2db      	uxtb	r3, r3
 800e354:	2b00      	cmp	r3, #0
 800e356:	d106      	bne.n	800e366 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f7f4 ff47 	bl	80031f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2202      	movs	r2, #2
 800e36a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	3304      	adds	r3, #4
 800e376:	4619      	mov	r1, r3
 800e378:	4610      	mov	r0, r2
 800e37a:	f000 fe7d 	bl	800f078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2201      	movs	r2, #1
 800e382:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2201      	movs	r2, #1
 800e38a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2201      	movs	r2, #1
 800e392:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2201      	movs	r2, #1
 800e39a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e3de:	2300      	movs	r3, #0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d001      	beq.n	800e400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e054      	b.n	800e4aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2202      	movs	r2, #2
 800e404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	68da      	ldr	r2, [r3, #12]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f042 0201 	orr.w	r2, r2, #1
 800e416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a26      	ldr	r2, [pc, #152]	; (800e4b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d022      	beq.n	800e468 <HAL_TIM_Base_Start_IT+0x80>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e42a:	d01d      	beq.n	800e468 <HAL_TIM_Base_Start_IT+0x80>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a22      	ldr	r2, [pc, #136]	; (800e4bc <HAL_TIM_Base_Start_IT+0xd4>)
 800e432:	4293      	cmp	r3, r2
 800e434:	d018      	beq.n	800e468 <HAL_TIM_Base_Start_IT+0x80>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4a21      	ldr	r2, [pc, #132]	; (800e4c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d013      	beq.n	800e468 <HAL_TIM_Base_Start_IT+0x80>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4a1f      	ldr	r2, [pc, #124]	; (800e4c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d00e      	beq.n	800e468 <HAL_TIM_Base_Start_IT+0x80>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4a1e      	ldr	r2, [pc, #120]	; (800e4c8 <HAL_TIM_Base_Start_IT+0xe0>)
 800e450:	4293      	cmp	r3, r2
 800e452:	d009      	beq.n	800e468 <HAL_TIM_Base_Start_IT+0x80>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a1c      	ldr	r2, [pc, #112]	; (800e4cc <HAL_TIM_Base_Start_IT+0xe4>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d004      	beq.n	800e468 <HAL_TIM_Base_Start_IT+0x80>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	4a1b      	ldr	r2, [pc, #108]	; (800e4d0 <HAL_TIM_Base_Start_IT+0xe8>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d115      	bne.n	800e494 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	689a      	ldr	r2, [r3, #8]
 800e46e:	4b19      	ldr	r3, [pc, #100]	; (800e4d4 <HAL_TIM_Base_Start_IT+0xec>)
 800e470:	4013      	ands	r3, r2
 800e472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2b06      	cmp	r3, #6
 800e478:	d015      	beq.n	800e4a6 <HAL_TIM_Base_Start_IT+0xbe>
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e480:	d011      	beq.n	800e4a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f042 0201 	orr.w	r2, r2, #1
 800e490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e492:	e008      	b.n	800e4a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f042 0201 	orr.w	r2, r2, #1
 800e4a2:	601a      	str	r2, [r3, #0]
 800e4a4:	e000      	b.n	800e4a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3714      	adds	r7, #20
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr
 800e4b6:	bf00      	nop
 800e4b8:	40010000 	.word	0x40010000
 800e4bc:	40000400 	.word	0x40000400
 800e4c0:	40000800 	.word	0x40000800
 800e4c4:	40000c00 	.word	0x40000c00
 800e4c8:	40010400 	.word	0x40010400
 800e4cc:	40001800 	.word	0x40001800
 800e4d0:	40014000 	.word	0x40014000
 800e4d4:	00010007 	.word	0x00010007

0800e4d8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d109      	bne.n	800e500 <HAL_TIM_OC_Start_IT+0x28>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	bf14      	ite	ne
 800e4f8:	2301      	movne	r3, #1
 800e4fa:	2300      	moveq	r3, #0
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	e03c      	b.n	800e57a <HAL_TIM_OC_Start_IT+0xa2>
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	2b04      	cmp	r3, #4
 800e504:	d109      	bne.n	800e51a <HAL_TIM_OC_Start_IT+0x42>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	2b01      	cmp	r3, #1
 800e510:	bf14      	ite	ne
 800e512:	2301      	movne	r3, #1
 800e514:	2300      	moveq	r3, #0
 800e516:	b2db      	uxtb	r3, r3
 800e518:	e02f      	b.n	800e57a <HAL_TIM_OC_Start_IT+0xa2>
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	2b08      	cmp	r3, #8
 800e51e:	d109      	bne.n	800e534 <HAL_TIM_OC_Start_IT+0x5c>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e526:	b2db      	uxtb	r3, r3
 800e528:	2b01      	cmp	r3, #1
 800e52a:	bf14      	ite	ne
 800e52c:	2301      	movne	r3, #1
 800e52e:	2300      	moveq	r3, #0
 800e530:	b2db      	uxtb	r3, r3
 800e532:	e022      	b.n	800e57a <HAL_TIM_OC_Start_IT+0xa2>
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	2b0c      	cmp	r3, #12
 800e538:	d109      	bne.n	800e54e <HAL_TIM_OC_Start_IT+0x76>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e540:	b2db      	uxtb	r3, r3
 800e542:	2b01      	cmp	r3, #1
 800e544:	bf14      	ite	ne
 800e546:	2301      	movne	r3, #1
 800e548:	2300      	moveq	r3, #0
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	e015      	b.n	800e57a <HAL_TIM_OC_Start_IT+0xa2>
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	2b10      	cmp	r3, #16
 800e552:	d109      	bne.n	800e568 <HAL_TIM_OC_Start_IT+0x90>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	bf14      	ite	ne
 800e560:	2301      	movne	r3, #1
 800e562:	2300      	moveq	r3, #0
 800e564:	b2db      	uxtb	r3, r3
 800e566:	e008      	b.n	800e57a <HAL_TIM_OC_Start_IT+0xa2>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	2b01      	cmp	r3, #1
 800e572:	bf14      	ite	ne
 800e574:	2301      	movne	r3, #1
 800e576:	2300      	moveq	r3, #0
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d001      	beq.n	800e582 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e57e:	2301      	movs	r3, #1
 800e580:	e0ec      	b.n	800e75c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d104      	bne.n	800e592 <HAL_TIM_OC_Start_IT+0xba>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2202      	movs	r2, #2
 800e58c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e590:	e023      	b.n	800e5da <HAL_TIM_OC_Start_IT+0x102>
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	2b04      	cmp	r3, #4
 800e596:	d104      	bne.n	800e5a2 <HAL_TIM_OC_Start_IT+0xca>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2202      	movs	r2, #2
 800e59c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e5a0:	e01b      	b.n	800e5da <HAL_TIM_OC_Start_IT+0x102>
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	2b08      	cmp	r3, #8
 800e5a6:	d104      	bne.n	800e5b2 <HAL_TIM_OC_Start_IT+0xda>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2202      	movs	r2, #2
 800e5ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e5b0:	e013      	b.n	800e5da <HAL_TIM_OC_Start_IT+0x102>
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	2b0c      	cmp	r3, #12
 800e5b6:	d104      	bne.n	800e5c2 <HAL_TIM_OC_Start_IT+0xea>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2202      	movs	r2, #2
 800e5bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e5c0:	e00b      	b.n	800e5da <HAL_TIM_OC_Start_IT+0x102>
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	2b10      	cmp	r3, #16
 800e5c6:	d104      	bne.n	800e5d2 <HAL_TIM_OC_Start_IT+0xfa>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2202      	movs	r2, #2
 800e5cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e5d0:	e003      	b.n	800e5da <HAL_TIM_OC_Start_IT+0x102>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2202      	movs	r2, #2
 800e5d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	2b0c      	cmp	r3, #12
 800e5de:	d841      	bhi.n	800e664 <HAL_TIM_OC_Start_IT+0x18c>
 800e5e0:	a201      	add	r2, pc, #4	; (adr r2, 800e5e8 <HAL_TIM_OC_Start_IT+0x110>)
 800e5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5e6:	bf00      	nop
 800e5e8:	0800e61d 	.word	0x0800e61d
 800e5ec:	0800e665 	.word	0x0800e665
 800e5f0:	0800e665 	.word	0x0800e665
 800e5f4:	0800e665 	.word	0x0800e665
 800e5f8:	0800e62f 	.word	0x0800e62f
 800e5fc:	0800e665 	.word	0x0800e665
 800e600:	0800e665 	.word	0x0800e665
 800e604:	0800e665 	.word	0x0800e665
 800e608:	0800e641 	.word	0x0800e641
 800e60c:	0800e665 	.word	0x0800e665
 800e610:	0800e665 	.word	0x0800e665
 800e614:	0800e665 	.word	0x0800e665
 800e618:	0800e653 	.word	0x0800e653
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	68da      	ldr	r2, [r3, #12]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f042 0202 	orr.w	r2, r2, #2
 800e62a:	60da      	str	r2, [r3, #12]
      break;
 800e62c:	e01d      	b.n	800e66a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	68da      	ldr	r2, [r3, #12]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f042 0204 	orr.w	r2, r2, #4
 800e63c:	60da      	str	r2, [r3, #12]
      break;
 800e63e:	e014      	b.n	800e66a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	68da      	ldr	r2, [r3, #12]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f042 0208 	orr.w	r2, r2, #8
 800e64e:	60da      	str	r2, [r3, #12]
      break;
 800e650:	e00b      	b.n	800e66a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	68da      	ldr	r2, [r3, #12]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f042 0210 	orr.w	r2, r2, #16
 800e660:	60da      	str	r2, [r3, #12]
      break;
 800e662:	e002      	b.n	800e66a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e664:	2301      	movs	r3, #1
 800e666:	73fb      	strb	r3, [r7, #15]
      break;
 800e668:	bf00      	nop
  }

  if (status == HAL_OK)
 800e66a:	7bfb      	ldrb	r3, [r7, #15]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d174      	bne.n	800e75a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2201      	movs	r2, #1
 800e676:	6839      	ldr	r1, [r7, #0]
 800e678:	4618      	mov	r0, r3
 800e67a:	f001 f917 	bl	800f8ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a38      	ldr	r2, [pc, #224]	; (800e764 <HAL_TIM_OC_Start_IT+0x28c>)
 800e684:	4293      	cmp	r3, r2
 800e686:	d013      	beq.n	800e6b0 <HAL_TIM_OC_Start_IT+0x1d8>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a36      	ldr	r2, [pc, #216]	; (800e768 <HAL_TIM_OC_Start_IT+0x290>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d00e      	beq.n	800e6b0 <HAL_TIM_OC_Start_IT+0x1d8>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4a35      	ldr	r2, [pc, #212]	; (800e76c <HAL_TIM_OC_Start_IT+0x294>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d009      	beq.n	800e6b0 <HAL_TIM_OC_Start_IT+0x1d8>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a33      	ldr	r2, [pc, #204]	; (800e770 <HAL_TIM_OC_Start_IT+0x298>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d004      	beq.n	800e6b0 <HAL_TIM_OC_Start_IT+0x1d8>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a32      	ldr	r2, [pc, #200]	; (800e774 <HAL_TIM_OC_Start_IT+0x29c>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d101      	bne.n	800e6b4 <HAL_TIM_OC_Start_IT+0x1dc>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e000      	b.n	800e6b6 <HAL_TIM_OC_Start_IT+0x1de>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d007      	beq.n	800e6ca <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e6c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4a25      	ldr	r2, [pc, #148]	; (800e764 <HAL_TIM_OC_Start_IT+0x28c>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d022      	beq.n	800e71a <HAL_TIM_OC_Start_IT+0x242>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6dc:	d01d      	beq.n	800e71a <HAL_TIM_OC_Start_IT+0x242>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	4a25      	ldr	r2, [pc, #148]	; (800e778 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d018      	beq.n	800e71a <HAL_TIM_OC_Start_IT+0x242>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a23      	ldr	r2, [pc, #140]	; (800e77c <HAL_TIM_OC_Start_IT+0x2a4>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d013      	beq.n	800e71a <HAL_TIM_OC_Start_IT+0x242>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4a22      	ldr	r2, [pc, #136]	; (800e780 <HAL_TIM_OC_Start_IT+0x2a8>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d00e      	beq.n	800e71a <HAL_TIM_OC_Start_IT+0x242>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a19      	ldr	r2, [pc, #100]	; (800e768 <HAL_TIM_OC_Start_IT+0x290>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d009      	beq.n	800e71a <HAL_TIM_OC_Start_IT+0x242>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a1e      	ldr	r2, [pc, #120]	; (800e784 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d004      	beq.n	800e71a <HAL_TIM_OC_Start_IT+0x242>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a15      	ldr	r2, [pc, #84]	; (800e76c <HAL_TIM_OC_Start_IT+0x294>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d115      	bne.n	800e746 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	689a      	ldr	r2, [r3, #8]
 800e720:	4b19      	ldr	r3, [pc, #100]	; (800e788 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e722:	4013      	ands	r3, r2
 800e724:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	2b06      	cmp	r3, #6
 800e72a:	d015      	beq.n	800e758 <HAL_TIM_OC_Start_IT+0x280>
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e732:	d011      	beq.n	800e758 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	681a      	ldr	r2, [r3, #0]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f042 0201 	orr.w	r2, r2, #1
 800e742:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e744:	e008      	b.n	800e758 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f042 0201 	orr.w	r2, r2, #1
 800e754:	601a      	str	r2, [r3, #0]
 800e756:	e000      	b.n	800e75a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e758:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3710      	adds	r7, #16
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	40010000 	.word	0x40010000
 800e768:	40010400 	.word	0x40010400
 800e76c:	40014000 	.word	0x40014000
 800e770:	40014400 	.word	0x40014400
 800e774:	40014800 	.word	0x40014800
 800e778:	40000400 	.word	0x40000400
 800e77c:	40000800 	.word	0x40000800
 800e780:	40000c00 	.word	0x40000c00
 800e784:	40001800 	.word	0x40001800
 800e788:	00010007 	.word	0x00010007

0800e78c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e796:	2300      	movs	r3, #0
 800e798:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	2b0c      	cmp	r3, #12
 800e79e:	d841      	bhi.n	800e824 <HAL_TIM_OC_Stop_IT+0x98>
 800e7a0:	a201      	add	r2, pc, #4	; (adr r2, 800e7a8 <HAL_TIM_OC_Stop_IT+0x1c>)
 800e7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a6:	bf00      	nop
 800e7a8:	0800e7dd 	.word	0x0800e7dd
 800e7ac:	0800e825 	.word	0x0800e825
 800e7b0:	0800e825 	.word	0x0800e825
 800e7b4:	0800e825 	.word	0x0800e825
 800e7b8:	0800e7ef 	.word	0x0800e7ef
 800e7bc:	0800e825 	.word	0x0800e825
 800e7c0:	0800e825 	.word	0x0800e825
 800e7c4:	0800e825 	.word	0x0800e825
 800e7c8:	0800e801 	.word	0x0800e801
 800e7cc:	0800e825 	.word	0x0800e825
 800e7d0:	0800e825 	.word	0x0800e825
 800e7d4:	0800e825 	.word	0x0800e825
 800e7d8:	0800e813 	.word	0x0800e813
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	68da      	ldr	r2, [r3, #12]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f022 0202 	bic.w	r2, r2, #2
 800e7ea:	60da      	str	r2, [r3, #12]
      break;
 800e7ec:	e01d      	b.n	800e82a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	68da      	ldr	r2, [r3, #12]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f022 0204 	bic.w	r2, r2, #4
 800e7fc:	60da      	str	r2, [r3, #12]
      break;
 800e7fe:	e014      	b.n	800e82a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	68da      	ldr	r2, [r3, #12]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f022 0208 	bic.w	r2, r2, #8
 800e80e:	60da      	str	r2, [r3, #12]
      break;
 800e810:	e00b      	b.n	800e82a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	68da      	ldr	r2, [r3, #12]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f022 0210 	bic.w	r2, r2, #16
 800e820:	60da      	str	r2, [r3, #12]
      break;
 800e822:	e002      	b.n	800e82a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e824:	2301      	movs	r3, #1
 800e826:	73fb      	strb	r3, [r7, #15]
      break;
 800e828:	bf00      	nop
  }

  if (status == HAL_OK)
 800e82a:	7bfb      	ldrb	r3, [r7, #15]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f040 8081 	bne.w	800e934 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2200      	movs	r2, #0
 800e838:	6839      	ldr	r1, [r7, #0]
 800e83a:	4618      	mov	r0, r3
 800e83c:	f001 f836 	bl	800f8ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4a3e      	ldr	r2, [pc, #248]	; (800e940 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d013      	beq.n	800e872 <HAL_TIM_OC_Stop_IT+0xe6>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a3d      	ldr	r2, [pc, #244]	; (800e944 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d00e      	beq.n	800e872 <HAL_TIM_OC_Stop_IT+0xe6>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a3b      	ldr	r2, [pc, #236]	; (800e948 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d009      	beq.n	800e872 <HAL_TIM_OC_Stop_IT+0xe6>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4a3a      	ldr	r2, [pc, #232]	; (800e94c <HAL_TIM_OC_Stop_IT+0x1c0>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d004      	beq.n	800e872 <HAL_TIM_OC_Stop_IT+0xe6>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a38      	ldr	r2, [pc, #224]	; (800e950 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d101      	bne.n	800e876 <HAL_TIM_OC_Stop_IT+0xea>
 800e872:	2301      	movs	r3, #1
 800e874:	e000      	b.n	800e878 <HAL_TIM_OC_Stop_IT+0xec>
 800e876:	2300      	movs	r3, #0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d017      	beq.n	800e8ac <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	6a1a      	ldr	r2, [r3, #32]
 800e882:	f241 1311 	movw	r3, #4369	; 0x1111
 800e886:	4013      	ands	r3, r2
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10f      	bne.n	800e8ac <HAL_TIM_OC_Stop_IT+0x120>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	6a1a      	ldr	r2, [r3, #32]
 800e892:	f240 4344 	movw	r3, #1092	; 0x444
 800e896:	4013      	ands	r3, r2
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d107      	bne.n	800e8ac <HAL_TIM_OC_Stop_IT+0x120>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e8aa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	6a1a      	ldr	r2, [r3, #32]
 800e8b2:	f241 1311 	movw	r3, #4369	; 0x1111
 800e8b6:	4013      	ands	r3, r2
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d10f      	bne.n	800e8dc <HAL_TIM_OC_Stop_IT+0x150>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	6a1a      	ldr	r2, [r3, #32]
 800e8c2:	f240 4344 	movw	r3, #1092	; 0x444
 800e8c6:	4013      	ands	r3, r2
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d107      	bne.n	800e8dc <HAL_TIM_OC_Stop_IT+0x150>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f022 0201 	bic.w	r2, r2, #1
 800e8da:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d104      	bne.n	800e8ec <HAL_TIM_OC_Stop_IT+0x160>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e8ea:	e023      	b.n	800e934 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	2b04      	cmp	r3, #4
 800e8f0:	d104      	bne.n	800e8fc <HAL_TIM_OC_Stop_IT+0x170>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e8fa:	e01b      	b.n	800e934 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	2b08      	cmp	r3, #8
 800e900:	d104      	bne.n	800e90c <HAL_TIM_OC_Stop_IT+0x180>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2201      	movs	r2, #1
 800e906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e90a:	e013      	b.n	800e934 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	2b0c      	cmp	r3, #12
 800e910:	d104      	bne.n	800e91c <HAL_TIM_OC_Stop_IT+0x190>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e91a:	e00b      	b.n	800e934 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2b10      	cmp	r3, #16
 800e920:	d104      	bne.n	800e92c <HAL_TIM_OC_Stop_IT+0x1a0>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2201      	movs	r2, #1
 800e926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e92a:	e003      	b.n	800e934 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800e934:	7bfb      	ldrb	r3, [r7, #15]
}
 800e936:	4618      	mov	r0, r3
 800e938:	3710      	adds	r7, #16
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop
 800e940:	40010000 	.word	0x40010000
 800e944:	40010400 	.word	0x40010400
 800e948:	40014000 	.word	0x40014000
 800e94c:	40014400 	.word	0x40014400
 800e950:	40014800 	.word	0x40014800

0800e954 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d101      	bne.n	800e966 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e962:	2301      	movs	r3, #1
 800e964:	e049      	b.n	800e9fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d106      	bne.n	800e980 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f000 f841 	bl	800ea02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2202      	movs	r2, #2
 800e984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	3304      	adds	r3, #4
 800e990:	4619      	mov	r1, r3
 800e992:	4610      	mov	r0, r2
 800e994:	f000 fb70 	bl	800f078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2201      	movs	r2, #1
 800e99c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e9f8:	2300      	movs	r3, #0
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ea02:	b480      	push	{r7}
 800ea04:	b083      	sub	sp, #12
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ea0a:	bf00      	nop
 800ea0c:	370c      	adds	r7, #12
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr

0800ea16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b084      	sub	sp, #16
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	691b      	ldr	r3, [r3, #16]
 800ea2c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	f003 0302 	and.w	r3, r3, #2
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d020      	beq.n	800ea7a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f003 0302 	and.w	r3, r3, #2
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d01b      	beq.n	800ea7a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f06f 0202 	mvn.w	r2, #2
 800ea4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2201      	movs	r2, #1
 800ea50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	699b      	ldr	r3, [r3, #24]
 800ea58:	f003 0303 	and.w	r3, r3, #3
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d003      	beq.n	800ea68 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 faeb 	bl	800f03c <HAL_TIM_IC_CaptureCallback>
 800ea66:	e005      	b.n	800ea74 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7f1 fdc9 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 faee 	bl	800f050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	f003 0304 	and.w	r3, r3, #4
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d020      	beq.n	800eac6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f003 0304 	and.w	r3, r3, #4
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d01b      	beq.n	800eac6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f06f 0204 	mvn.w	r2, #4
 800ea96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2202      	movs	r2, #2
 800ea9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	699b      	ldr	r3, [r3, #24]
 800eaa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d003      	beq.n	800eab4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f000 fac5 	bl	800f03c <HAL_TIM_IC_CaptureCallback>
 800eab2:	e005      	b.n	800eac0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7f1 fda3 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 fac8 	bl	800f050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2200      	movs	r2, #0
 800eac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	f003 0308 	and.w	r3, r3, #8
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d020      	beq.n	800eb12 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f003 0308 	and.w	r3, r3, #8
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d01b      	beq.n	800eb12 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f06f 0208 	mvn.w	r2, #8
 800eae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2204      	movs	r2, #4
 800eae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	69db      	ldr	r3, [r3, #28]
 800eaf0:	f003 0303 	and.w	r3, r3, #3
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d003      	beq.n	800eb00 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 fa9f 	bl	800f03c <HAL_TIM_IC_CaptureCallback>
 800eafe:	e005      	b.n	800eb0c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7f1 fd7d 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 faa2 	bl	800f050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	f003 0310 	and.w	r3, r3, #16
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d020      	beq.n	800eb5e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f003 0310 	and.w	r3, r3, #16
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d01b      	beq.n	800eb5e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f06f 0210 	mvn.w	r2, #16
 800eb2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2208      	movs	r2, #8
 800eb34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	69db      	ldr	r3, [r3, #28]
 800eb3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d003      	beq.n	800eb4c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 fa79 	bl	800f03c <HAL_TIM_IC_CaptureCallback>
 800eb4a:	e005      	b.n	800eb58 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7f1 fd57 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fa7c 	bl	800f050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	f003 0301 	and.w	r3, r3, #1
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00c      	beq.n	800eb82 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f003 0301 	and.w	r3, r3, #1
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d007      	beq.n	800eb82 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f06f 0201 	mvn.w	r2, #1
 800eb7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7f4 f813 	bl	8002ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d104      	bne.n	800eb96 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00c      	beq.n	800ebb0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d007      	beq.n	800ebb0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800eba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 ffba 	bl	800fb24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00c      	beq.n	800ebd4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d007      	beq.n	800ebd4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ebcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 ffb2 	bl	800fb38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d00c      	beq.n	800ebf8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d007      	beq.n	800ebf8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ebf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f000 fa36 	bl	800f064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	f003 0320 	and.w	r3, r3, #32
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d00c      	beq.n	800ec1c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f003 0320 	and.w	r3, r3, #32
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d007      	beq.n	800ec1c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f06f 0220 	mvn.w	r2, #32
 800ec14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 ff7a 	bl	800fb10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ec1c:	bf00      	nop
 800ec1e:	3710      	adds	r7, #16
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b086      	sub	sp, #24
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec30:	2300      	movs	r3, #0
 800ec32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d101      	bne.n	800ec42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ec3e:	2302      	movs	r3, #2
 800ec40:	e0ff      	b.n	800ee42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2201      	movs	r2, #1
 800ec46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2b14      	cmp	r3, #20
 800ec4e:	f200 80f0 	bhi.w	800ee32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ec52:	a201      	add	r2, pc, #4	; (adr r2, 800ec58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ec54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec58:	0800ecad 	.word	0x0800ecad
 800ec5c:	0800ee33 	.word	0x0800ee33
 800ec60:	0800ee33 	.word	0x0800ee33
 800ec64:	0800ee33 	.word	0x0800ee33
 800ec68:	0800eced 	.word	0x0800eced
 800ec6c:	0800ee33 	.word	0x0800ee33
 800ec70:	0800ee33 	.word	0x0800ee33
 800ec74:	0800ee33 	.word	0x0800ee33
 800ec78:	0800ed2f 	.word	0x0800ed2f
 800ec7c:	0800ee33 	.word	0x0800ee33
 800ec80:	0800ee33 	.word	0x0800ee33
 800ec84:	0800ee33 	.word	0x0800ee33
 800ec88:	0800ed6f 	.word	0x0800ed6f
 800ec8c:	0800ee33 	.word	0x0800ee33
 800ec90:	0800ee33 	.word	0x0800ee33
 800ec94:	0800ee33 	.word	0x0800ee33
 800ec98:	0800edb1 	.word	0x0800edb1
 800ec9c:	0800ee33 	.word	0x0800ee33
 800eca0:	0800ee33 	.word	0x0800ee33
 800eca4:	0800ee33 	.word	0x0800ee33
 800eca8:	0800edf1 	.word	0x0800edf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	68b9      	ldr	r1, [r7, #8]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f000 fa86 	bl	800f1c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	699a      	ldr	r2, [r3, #24]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f042 0208 	orr.w	r2, r2, #8
 800ecc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	699a      	ldr	r2, [r3, #24]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f022 0204 	bic.w	r2, r2, #4
 800ecd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	6999      	ldr	r1, [r3, #24]
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	691a      	ldr	r2, [r3, #16]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	430a      	orrs	r2, r1
 800ece8:	619a      	str	r2, [r3, #24]
      break;
 800ecea:	e0a5      	b.n	800ee38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	68b9      	ldr	r1, [r7, #8]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f000 faf6 	bl	800f2e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	699a      	ldr	r2, [r3, #24]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	699a      	ldr	r2, [r3, #24]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6999      	ldr	r1, [r3, #24]
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	691b      	ldr	r3, [r3, #16]
 800ed22:	021a      	lsls	r2, r3, #8
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	430a      	orrs	r2, r1
 800ed2a:	619a      	str	r2, [r3, #24]
      break;
 800ed2c:	e084      	b.n	800ee38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	68b9      	ldr	r1, [r7, #8]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f000 fb5f 	bl	800f3f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	69da      	ldr	r2, [r3, #28]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f042 0208 	orr.w	r2, r2, #8
 800ed48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	69da      	ldr	r2, [r3, #28]
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f022 0204 	bic.w	r2, r2, #4
 800ed58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	69d9      	ldr	r1, [r3, #28]
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	691a      	ldr	r2, [r3, #16]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	430a      	orrs	r2, r1
 800ed6a:	61da      	str	r2, [r3, #28]
      break;
 800ed6c:	e064      	b.n	800ee38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	68b9      	ldr	r1, [r7, #8]
 800ed74:	4618      	mov	r0, r3
 800ed76:	f000 fbc7 	bl	800f508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	69da      	ldr	r2, [r3, #28]
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	69da      	ldr	r2, [r3, #28]
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	69d9      	ldr	r1, [r3, #28]
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	691b      	ldr	r3, [r3, #16]
 800eda4:	021a      	lsls	r2, r3, #8
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	430a      	orrs	r2, r1
 800edac:	61da      	str	r2, [r3, #28]
      break;
 800edae:	e043      	b.n	800ee38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	68b9      	ldr	r1, [r7, #8]
 800edb6:	4618      	mov	r0, r3
 800edb8:	f000 fc10 	bl	800f5dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f042 0208 	orr.w	r2, r2, #8
 800edca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f022 0204 	bic.w	r2, r2, #4
 800edda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	691a      	ldr	r2, [r3, #16]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	430a      	orrs	r2, r1
 800edec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800edee:	e023      	b.n	800ee38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	68b9      	ldr	r1, [r7, #8]
 800edf6:	4618      	mov	r0, r3
 800edf8:	f000 fc54 	bl	800f6a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	691b      	ldr	r3, [r3, #16]
 800ee26:	021a      	lsls	r2, r3, #8
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	430a      	orrs	r2, r1
 800ee2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ee30:	e002      	b.n	800ee38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ee32:	2301      	movs	r3, #1
 800ee34:	75fb      	strb	r3, [r7, #23]
      break;
 800ee36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ee40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3718      	adds	r7, #24
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop

0800ee4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ee56:	2300      	movs	r3, #0
 800ee58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d101      	bne.n	800ee68 <HAL_TIM_ConfigClockSource+0x1c>
 800ee64:	2302      	movs	r3, #2
 800ee66:	e0dc      	b.n	800f022 <HAL_TIM_ConfigClockSource+0x1d6>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2202      	movs	r2, #2
 800ee74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	689b      	ldr	r3, [r3, #8]
 800ee7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ee80:	68ba      	ldr	r2, [r7, #8]
 800ee82:	4b6a      	ldr	r3, [pc, #424]	; (800f02c <HAL_TIM_ConfigClockSource+0x1e0>)
 800ee84:	4013      	ands	r3, r2
 800ee86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ee8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a64      	ldr	r2, [pc, #400]	; (800f030 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	f000 80a9 	beq.w	800eff6 <HAL_TIM_ConfigClockSource+0x1aa>
 800eea4:	4a62      	ldr	r2, [pc, #392]	; (800f030 <HAL_TIM_ConfigClockSource+0x1e4>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	f200 80ae 	bhi.w	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800eeac:	4a61      	ldr	r2, [pc, #388]	; (800f034 <HAL_TIM_ConfigClockSource+0x1e8>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	f000 80a1 	beq.w	800eff6 <HAL_TIM_ConfigClockSource+0x1aa>
 800eeb4:	4a5f      	ldr	r2, [pc, #380]	; (800f034 <HAL_TIM_ConfigClockSource+0x1e8>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	f200 80a6 	bhi.w	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800eebc:	4a5e      	ldr	r2, [pc, #376]	; (800f038 <HAL_TIM_ConfigClockSource+0x1ec>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	f000 8099 	beq.w	800eff6 <HAL_TIM_ConfigClockSource+0x1aa>
 800eec4:	4a5c      	ldr	r2, [pc, #368]	; (800f038 <HAL_TIM_ConfigClockSource+0x1ec>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	f200 809e 	bhi.w	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800eecc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800eed0:	f000 8091 	beq.w	800eff6 <HAL_TIM_ConfigClockSource+0x1aa>
 800eed4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800eed8:	f200 8096 	bhi.w	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800eedc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eee0:	f000 8089 	beq.w	800eff6 <HAL_TIM_ConfigClockSource+0x1aa>
 800eee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eee8:	f200 808e 	bhi.w	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800eeec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eef0:	d03e      	beq.n	800ef70 <HAL_TIM_ConfigClockSource+0x124>
 800eef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eef6:	f200 8087 	bhi.w	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800eefa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eefe:	f000 8086 	beq.w	800f00e <HAL_TIM_ConfigClockSource+0x1c2>
 800ef02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef06:	d87f      	bhi.n	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef08:	2b70      	cmp	r3, #112	; 0x70
 800ef0a:	d01a      	beq.n	800ef42 <HAL_TIM_ConfigClockSource+0xf6>
 800ef0c:	2b70      	cmp	r3, #112	; 0x70
 800ef0e:	d87b      	bhi.n	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef10:	2b60      	cmp	r3, #96	; 0x60
 800ef12:	d050      	beq.n	800efb6 <HAL_TIM_ConfigClockSource+0x16a>
 800ef14:	2b60      	cmp	r3, #96	; 0x60
 800ef16:	d877      	bhi.n	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef18:	2b50      	cmp	r3, #80	; 0x50
 800ef1a:	d03c      	beq.n	800ef96 <HAL_TIM_ConfigClockSource+0x14a>
 800ef1c:	2b50      	cmp	r3, #80	; 0x50
 800ef1e:	d873      	bhi.n	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef20:	2b40      	cmp	r3, #64	; 0x40
 800ef22:	d058      	beq.n	800efd6 <HAL_TIM_ConfigClockSource+0x18a>
 800ef24:	2b40      	cmp	r3, #64	; 0x40
 800ef26:	d86f      	bhi.n	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef28:	2b30      	cmp	r3, #48	; 0x30
 800ef2a:	d064      	beq.n	800eff6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef2c:	2b30      	cmp	r3, #48	; 0x30
 800ef2e:	d86b      	bhi.n	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef30:	2b20      	cmp	r3, #32
 800ef32:	d060      	beq.n	800eff6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef34:	2b20      	cmp	r3, #32
 800ef36:	d867      	bhi.n	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d05c      	beq.n	800eff6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef3c:	2b10      	cmp	r3, #16
 800ef3e:	d05a      	beq.n	800eff6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef40:	e062      	b.n	800f008 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6818      	ldr	r0, [r3, #0]
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	6899      	ldr	r1, [r3, #8]
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	f000 fc8b 	bl	800f86c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	689b      	ldr	r3, [r3, #8]
 800ef5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ef64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	68ba      	ldr	r2, [r7, #8]
 800ef6c:	609a      	str	r2, [r3, #8]
      break;
 800ef6e:	e04f      	b.n	800f010 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6818      	ldr	r0, [r3, #0]
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	6899      	ldr	r1, [r3, #8]
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	685a      	ldr	r2, [r3, #4]
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	f000 fc74 	bl	800f86c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	689a      	ldr	r2, [r3, #8]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ef92:	609a      	str	r2, [r3, #8]
      break;
 800ef94:	e03c      	b.n	800f010 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6818      	ldr	r0, [r3, #0]
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	6859      	ldr	r1, [r3, #4]
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	461a      	mov	r2, r3
 800efa4:	f000 fbe4 	bl	800f770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2150      	movs	r1, #80	; 0x50
 800efae:	4618      	mov	r0, r3
 800efb0:	f000 fc3e 	bl	800f830 <TIM_ITRx_SetConfig>
      break;
 800efb4:	e02c      	b.n	800f010 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6818      	ldr	r0, [r3, #0]
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	6859      	ldr	r1, [r3, #4]
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	461a      	mov	r2, r3
 800efc4:	f000 fc03 	bl	800f7ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	2160      	movs	r1, #96	; 0x60
 800efce:	4618      	mov	r0, r3
 800efd0:	f000 fc2e 	bl	800f830 <TIM_ITRx_SetConfig>
      break;
 800efd4:	e01c      	b.n	800f010 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6818      	ldr	r0, [r3, #0]
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	6859      	ldr	r1, [r3, #4]
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	461a      	mov	r2, r3
 800efe4:	f000 fbc4 	bl	800f770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2140      	movs	r1, #64	; 0x40
 800efee:	4618      	mov	r0, r3
 800eff0:	f000 fc1e 	bl	800f830 <TIM_ITRx_SetConfig>
      break;
 800eff4:	e00c      	b.n	800f010 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4619      	mov	r1, r3
 800f000:	4610      	mov	r0, r2
 800f002:	f000 fc15 	bl	800f830 <TIM_ITRx_SetConfig>
      break;
 800f006:	e003      	b.n	800f010 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f008:	2301      	movs	r3, #1
 800f00a:	73fb      	strb	r3, [r7, #15]
      break;
 800f00c:	e000      	b.n	800f010 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f00e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2201      	movs	r2, #1
 800f014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f020:	7bfb      	ldrb	r3, [r7, #15]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	ffceff88 	.word	0xffceff88
 800f030:	00100040 	.word	0x00100040
 800f034:	00100030 	.word	0x00100030
 800f038:	00100020 	.word	0x00100020

0800f03c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f044:	bf00      	nop
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f058:	bf00      	nop
 800f05a:	370c      	adds	r7, #12
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f06c:	bf00      	nop
 800f06e:	370c      	adds	r7, #12
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr

0800f078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f078:	b480      	push	{r7}
 800f07a:	b085      	sub	sp, #20
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4a46      	ldr	r2, [pc, #280]	; (800f1a4 <TIM_Base_SetConfig+0x12c>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d013      	beq.n	800f0b8 <TIM_Base_SetConfig+0x40>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f096:	d00f      	beq.n	800f0b8 <TIM_Base_SetConfig+0x40>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	4a43      	ldr	r2, [pc, #268]	; (800f1a8 <TIM_Base_SetConfig+0x130>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d00b      	beq.n	800f0b8 <TIM_Base_SetConfig+0x40>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	4a42      	ldr	r2, [pc, #264]	; (800f1ac <TIM_Base_SetConfig+0x134>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d007      	beq.n	800f0b8 <TIM_Base_SetConfig+0x40>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4a41      	ldr	r2, [pc, #260]	; (800f1b0 <TIM_Base_SetConfig+0x138>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d003      	beq.n	800f0b8 <TIM_Base_SetConfig+0x40>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4a40      	ldr	r2, [pc, #256]	; (800f1b4 <TIM_Base_SetConfig+0x13c>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d108      	bne.n	800f0ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4a35      	ldr	r2, [pc, #212]	; (800f1a4 <TIM_Base_SetConfig+0x12c>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d01f      	beq.n	800f112 <TIM_Base_SetConfig+0x9a>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0d8:	d01b      	beq.n	800f112 <TIM_Base_SetConfig+0x9a>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	4a32      	ldr	r2, [pc, #200]	; (800f1a8 <TIM_Base_SetConfig+0x130>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d017      	beq.n	800f112 <TIM_Base_SetConfig+0x9a>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	4a31      	ldr	r2, [pc, #196]	; (800f1ac <TIM_Base_SetConfig+0x134>)
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d013      	beq.n	800f112 <TIM_Base_SetConfig+0x9a>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	4a30      	ldr	r2, [pc, #192]	; (800f1b0 <TIM_Base_SetConfig+0x138>)
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	d00f      	beq.n	800f112 <TIM_Base_SetConfig+0x9a>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4a2f      	ldr	r2, [pc, #188]	; (800f1b4 <TIM_Base_SetConfig+0x13c>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d00b      	beq.n	800f112 <TIM_Base_SetConfig+0x9a>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4a2e      	ldr	r2, [pc, #184]	; (800f1b8 <TIM_Base_SetConfig+0x140>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d007      	beq.n	800f112 <TIM_Base_SetConfig+0x9a>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4a2d      	ldr	r2, [pc, #180]	; (800f1bc <TIM_Base_SetConfig+0x144>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d003      	beq.n	800f112 <TIM_Base_SetConfig+0x9a>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4a2c      	ldr	r2, [pc, #176]	; (800f1c0 <TIM_Base_SetConfig+0x148>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d108      	bne.n	800f124 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	4313      	orrs	r3, r2
 800f122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	695b      	ldr	r3, [r3, #20]
 800f12e:	4313      	orrs	r3, r2
 800f130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	68fa      	ldr	r2, [r7, #12]
 800f136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	689a      	ldr	r2, [r3, #8]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	4a16      	ldr	r2, [pc, #88]	; (800f1a4 <TIM_Base_SetConfig+0x12c>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d00f      	beq.n	800f170 <TIM_Base_SetConfig+0xf8>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	4a18      	ldr	r2, [pc, #96]	; (800f1b4 <TIM_Base_SetConfig+0x13c>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d00b      	beq.n	800f170 <TIM_Base_SetConfig+0xf8>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4a17      	ldr	r2, [pc, #92]	; (800f1b8 <TIM_Base_SetConfig+0x140>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d007      	beq.n	800f170 <TIM_Base_SetConfig+0xf8>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4a16      	ldr	r2, [pc, #88]	; (800f1bc <TIM_Base_SetConfig+0x144>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d003      	beq.n	800f170 <TIM_Base_SetConfig+0xf8>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	4a15      	ldr	r2, [pc, #84]	; (800f1c0 <TIM_Base_SetConfig+0x148>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d103      	bne.n	800f178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	691a      	ldr	r2, [r3, #16]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	691b      	ldr	r3, [r3, #16]
 800f182:	f003 0301 	and.w	r3, r3, #1
 800f186:	2b01      	cmp	r3, #1
 800f188:	d105      	bne.n	800f196 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	691b      	ldr	r3, [r3, #16]
 800f18e:	f023 0201 	bic.w	r2, r3, #1
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	611a      	str	r2, [r3, #16]
  }
}
 800f196:	bf00      	nop
 800f198:	3714      	adds	r7, #20
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	40010000 	.word	0x40010000
 800f1a8:	40000400 	.word	0x40000400
 800f1ac:	40000800 	.word	0x40000800
 800f1b0:	40000c00 	.word	0x40000c00
 800f1b4:	40010400 	.word	0x40010400
 800f1b8:	40014000 	.word	0x40014000
 800f1bc:	40014400 	.word	0x40014400
 800f1c0:	40014800 	.word	0x40014800

0800f1c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b087      	sub	sp, #28
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6a1b      	ldr	r3, [r3, #32]
 800f1d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6a1b      	ldr	r3, [r3, #32]
 800f1d8:	f023 0201 	bic.w	r2, r3, #1
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	699b      	ldr	r3, [r3, #24]
 800f1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	4b37      	ldr	r3, [pc, #220]	; (800f2cc <TIM_OC1_SetConfig+0x108>)
 800f1f0:	4013      	ands	r3, r2
 800f1f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f023 0303 	bic.w	r3, r3, #3
 800f1fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	4313      	orrs	r3, r2
 800f204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	f023 0302 	bic.w	r3, r3, #2
 800f20c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	689b      	ldr	r3, [r3, #8]
 800f212:	697a      	ldr	r2, [r7, #20]
 800f214:	4313      	orrs	r3, r2
 800f216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	4a2d      	ldr	r2, [pc, #180]	; (800f2d0 <TIM_OC1_SetConfig+0x10c>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d00f      	beq.n	800f240 <TIM_OC1_SetConfig+0x7c>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	4a2c      	ldr	r2, [pc, #176]	; (800f2d4 <TIM_OC1_SetConfig+0x110>)
 800f224:	4293      	cmp	r3, r2
 800f226:	d00b      	beq.n	800f240 <TIM_OC1_SetConfig+0x7c>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	4a2b      	ldr	r2, [pc, #172]	; (800f2d8 <TIM_OC1_SetConfig+0x114>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d007      	beq.n	800f240 <TIM_OC1_SetConfig+0x7c>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	4a2a      	ldr	r2, [pc, #168]	; (800f2dc <TIM_OC1_SetConfig+0x118>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d003      	beq.n	800f240 <TIM_OC1_SetConfig+0x7c>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	4a29      	ldr	r2, [pc, #164]	; (800f2e0 <TIM_OC1_SetConfig+0x11c>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d10c      	bne.n	800f25a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	f023 0308 	bic.w	r3, r3, #8
 800f246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	697a      	ldr	r2, [r7, #20]
 800f24e:	4313      	orrs	r3, r2
 800f250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	f023 0304 	bic.w	r3, r3, #4
 800f258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	4a1c      	ldr	r2, [pc, #112]	; (800f2d0 <TIM_OC1_SetConfig+0x10c>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	d00f      	beq.n	800f282 <TIM_OC1_SetConfig+0xbe>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	4a1b      	ldr	r2, [pc, #108]	; (800f2d4 <TIM_OC1_SetConfig+0x110>)
 800f266:	4293      	cmp	r3, r2
 800f268:	d00b      	beq.n	800f282 <TIM_OC1_SetConfig+0xbe>
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	4a1a      	ldr	r2, [pc, #104]	; (800f2d8 <TIM_OC1_SetConfig+0x114>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	d007      	beq.n	800f282 <TIM_OC1_SetConfig+0xbe>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	4a19      	ldr	r2, [pc, #100]	; (800f2dc <TIM_OC1_SetConfig+0x118>)
 800f276:	4293      	cmp	r3, r2
 800f278:	d003      	beq.n	800f282 <TIM_OC1_SetConfig+0xbe>
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4a18      	ldr	r2, [pc, #96]	; (800f2e0 <TIM_OC1_SetConfig+0x11c>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d111      	bne.n	800f2a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	695b      	ldr	r3, [r3, #20]
 800f296:	693a      	ldr	r2, [r7, #16]
 800f298:	4313      	orrs	r3, r2
 800f29a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	699b      	ldr	r3, [r3, #24]
 800f2a0:	693a      	ldr	r2, [r7, #16]
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	693a      	ldr	r2, [r7, #16]
 800f2aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	685a      	ldr	r2, [r3, #4]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	697a      	ldr	r2, [r7, #20]
 800f2be:	621a      	str	r2, [r3, #32]
}
 800f2c0:	bf00      	nop
 800f2c2:	371c      	adds	r7, #28
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr
 800f2cc:	fffeff8f 	.word	0xfffeff8f
 800f2d0:	40010000 	.word	0x40010000
 800f2d4:	40010400 	.word	0x40010400
 800f2d8:	40014000 	.word	0x40014000
 800f2dc:	40014400 	.word	0x40014400
 800f2e0:	40014800 	.word	0x40014800

0800f2e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b087      	sub	sp, #28
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a1b      	ldr	r3, [r3, #32]
 800f2f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6a1b      	ldr	r3, [r3, #32]
 800f2f8:	f023 0210 	bic.w	r2, r3, #16
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	699b      	ldr	r3, [r3, #24]
 800f30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f30c:	68fa      	ldr	r2, [r7, #12]
 800f30e:	4b34      	ldr	r3, [pc, #208]	; (800f3e0 <TIM_OC2_SetConfig+0xfc>)
 800f310:	4013      	ands	r3, r2
 800f312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f31a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	021b      	lsls	r3, r3, #8
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	4313      	orrs	r3, r2
 800f326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	f023 0320 	bic.w	r3, r3, #32
 800f32e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	011b      	lsls	r3, r3, #4
 800f336:	697a      	ldr	r2, [r7, #20]
 800f338:	4313      	orrs	r3, r2
 800f33a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	4a29      	ldr	r2, [pc, #164]	; (800f3e4 <TIM_OC2_SetConfig+0x100>)
 800f340:	4293      	cmp	r3, r2
 800f342:	d003      	beq.n	800f34c <TIM_OC2_SetConfig+0x68>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	4a28      	ldr	r2, [pc, #160]	; (800f3e8 <TIM_OC2_SetConfig+0x104>)
 800f348:	4293      	cmp	r3, r2
 800f34a:	d10d      	bne.n	800f368 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	011b      	lsls	r3, r3, #4
 800f35a:	697a      	ldr	r2, [r7, #20]
 800f35c:	4313      	orrs	r3, r2
 800f35e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	4a1e      	ldr	r2, [pc, #120]	; (800f3e4 <TIM_OC2_SetConfig+0x100>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d00f      	beq.n	800f390 <TIM_OC2_SetConfig+0xac>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	4a1d      	ldr	r2, [pc, #116]	; (800f3e8 <TIM_OC2_SetConfig+0x104>)
 800f374:	4293      	cmp	r3, r2
 800f376:	d00b      	beq.n	800f390 <TIM_OC2_SetConfig+0xac>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	4a1c      	ldr	r2, [pc, #112]	; (800f3ec <TIM_OC2_SetConfig+0x108>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d007      	beq.n	800f390 <TIM_OC2_SetConfig+0xac>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4a1b      	ldr	r2, [pc, #108]	; (800f3f0 <TIM_OC2_SetConfig+0x10c>)
 800f384:	4293      	cmp	r3, r2
 800f386:	d003      	beq.n	800f390 <TIM_OC2_SetConfig+0xac>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4a1a      	ldr	r2, [pc, #104]	; (800f3f4 <TIM_OC2_SetConfig+0x110>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d113      	bne.n	800f3b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f39e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	695b      	ldr	r3, [r3, #20]
 800f3a4:	009b      	lsls	r3, r3, #2
 800f3a6:	693a      	ldr	r2, [r7, #16]
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	699b      	ldr	r3, [r3, #24]
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	693a      	ldr	r2, [r7, #16]
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	693a      	ldr	r2, [r7, #16]
 800f3bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	685a      	ldr	r2, [r3, #4]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	697a      	ldr	r2, [r7, #20]
 800f3d0:	621a      	str	r2, [r3, #32]
}
 800f3d2:	bf00      	nop
 800f3d4:	371c      	adds	r7, #28
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop
 800f3e0:	feff8fff 	.word	0xfeff8fff
 800f3e4:	40010000 	.word	0x40010000
 800f3e8:	40010400 	.word	0x40010400
 800f3ec:	40014000 	.word	0x40014000
 800f3f0:	40014400 	.word	0x40014400
 800f3f4:	40014800 	.word	0x40014800

0800f3f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b087      	sub	sp, #28
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6a1b      	ldr	r3, [r3, #32]
 800f406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6a1b      	ldr	r3, [r3, #32]
 800f40c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	69db      	ldr	r3, [r3, #28]
 800f41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	4b33      	ldr	r3, [pc, #204]	; (800f4f0 <TIM_OC3_SetConfig+0xf8>)
 800f424:	4013      	ands	r3, r2
 800f426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f023 0303 	bic.w	r3, r3, #3
 800f42e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	68fa      	ldr	r2, [r7, #12]
 800f436:	4313      	orrs	r3, r2
 800f438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	689b      	ldr	r3, [r3, #8]
 800f446:	021b      	lsls	r3, r3, #8
 800f448:	697a      	ldr	r2, [r7, #20]
 800f44a:	4313      	orrs	r3, r2
 800f44c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4a28      	ldr	r2, [pc, #160]	; (800f4f4 <TIM_OC3_SetConfig+0xfc>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d003      	beq.n	800f45e <TIM_OC3_SetConfig+0x66>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4a27      	ldr	r2, [pc, #156]	; (800f4f8 <TIM_OC3_SetConfig+0x100>)
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d10d      	bne.n	800f47a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f464:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	021b      	lsls	r3, r3, #8
 800f46c:	697a      	ldr	r2, [r7, #20]
 800f46e:	4313      	orrs	r3, r2
 800f470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4a1d      	ldr	r2, [pc, #116]	; (800f4f4 <TIM_OC3_SetConfig+0xfc>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d00f      	beq.n	800f4a2 <TIM_OC3_SetConfig+0xaa>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4a1c      	ldr	r2, [pc, #112]	; (800f4f8 <TIM_OC3_SetConfig+0x100>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d00b      	beq.n	800f4a2 <TIM_OC3_SetConfig+0xaa>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4a1b      	ldr	r2, [pc, #108]	; (800f4fc <TIM_OC3_SetConfig+0x104>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d007      	beq.n	800f4a2 <TIM_OC3_SetConfig+0xaa>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4a1a      	ldr	r2, [pc, #104]	; (800f500 <TIM_OC3_SetConfig+0x108>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d003      	beq.n	800f4a2 <TIM_OC3_SetConfig+0xaa>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4a19      	ldr	r2, [pc, #100]	; (800f504 <TIM_OC3_SetConfig+0x10c>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d113      	bne.n	800f4ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f4b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	695b      	ldr	r3, [r3, #20]
 800f4b6:	011b      	lsls	r3, r3, #4
 800f4b8:	693a      	ldr	r2, [r7, #16]
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	699b      	ldr	r3, [r3, #24]
 800f4c2:	011b      	lsls	r3, r3, #4
 800f4c4:	693a      	ldr	r2, [r7, #16]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	693a      	ldr	r2, [r7, #16]
 800f4ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	685a      	ldr	r2, [r3, #4]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	697a      	ldr	r2, [r7, #20]
 800f4e2:	621a      	str	r2, [r3, #32]
}
 800f4e4:	bf00      	nop
 800f4e6:	371c      	adds	r7, #28
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr
 800f4f0:	fffeff8f 	.word	0xfffeff8f
 800f4f4:	40010000 	.word	0x40010000
 800f4f8:	40010400 	.word	0x40010400
 800f4fc:	40014000 	.word	0x40014000
 800f500:	40014400 	.word	0x40014400
 800f504:	40014800 	.word	0x40014800

0800f508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f508:	b480      	push	{r7}
 800f50a:	b087      	sub	sp, #28
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6a1b      	ldr	r3, [r3, #32]
 800f516:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6a1b      	ldr	r3, [r3, #32]
 800f51c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	69db      	ldr	r3, [r3, #28]
 800f52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	4b24      	ldr	r3, [pc, #144]	; (800f5c4 <TIM_OC4_SetConfig+0xbc>)
 800f534:	4013      	ands	r3, r2
 800f536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f53e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	021b      	lsls	r3, r3, #8
 800f546:	68fa      	ldr	r2, [r7, #12]
 800f548:	4313      	orrs	r3, r2
 800f54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	689b      	ldr	r3, [r3, #8]
 800f558:	031b      	lsls	r3, r3, #12
 800f55a:	693a      	ldr	r2, [r7, #16]
 800f55c:	4313      	orrs	r3, r2
 800f55e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a19      	ldr	r2, [pc, #100]	; (800f5c8 <TIM_OC4_SetConfig+0xc0>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d00f      	beq.n	800f588 <TIM_OC4_SetConfig+0x80>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a18      	ldr	r2, [pc, #96]	; (800f5cc <TIM_OC4_SetConfig+0xc4>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d00b      	beq.n	800f588 <TIM_OC4_SetConfig+0x80>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a17      	ldr	r2, [pc, #92]	; (800f5d0 <TIM_OC4_SetConfig+0xc8>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d007      	beq.n	800f588 <TIM_OC4_SetConfig+0x80>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4a16      	ldr	r2, [pc, #88]	; (800f5d4 <TIM_OC4_SetConfig+0xcc>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d003      	beq.n	800f588 <TIM_OC4_SetConfig+0x80>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4a15      	ldr	r2, [pc, #84]	; (800f5d8 <TIM_OC4_SetConfig+0xd0>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d109      	bne.n	800f59c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f58e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	695b      	ldr	r3, [r3, #20]
 800f594:	019b      	lsls	r3, r3, #6
 800f596:	697a      	ldr	r2, [r7, #20]
 800f598:	4313      	orrs	r3, r2
 800f59a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	697a      	ldr	r2, [r7, #20]
 800f5a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	68fa      	ldr	r2, [r7, #12]
 800f5a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	685a      	ldr	r2, [r3, #4]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	693a      	ldr	r2, [r7, #16]
 800f5b4:	621a      	str	r2, [r3, #32]
}
 800f5b6:	bf00      	nop
 800f5b8:	371c      	adds	r7, #28
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	feff8fff 	.word	0xfeff8fff
 800f5c8:	40010000 	.word	0x40010000
 800f5cc:	40010400 	.word	0x40010400
 800f5d0:	40014000 	.word	0x40014000
 800f5d4:	40014400 	.word	0x40014400
 800f5d8:	40014800 	.word	0x40014800

0800f5dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b087      	sub	sp, #28
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6a1b      	ldr	r3, [r3, #32]
 800f5ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6a1b      	ldr	r3, [r3, #32]
 800f5f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f604:	68fa      	ldr	r2, [r7, #12]
 800f606:	4b21      	ldr	r3, [pc, #132]	; (800f68c <TIM_OC5_SetConfig+0xb0>)
 800f608:	4013      	ands	r3, r2
 800f60a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68fa      	ldr	r2, [r7, #12]
 800f612:	4313      	orrs	r3, r2
 800f614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f61c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	689b      	ldr	r3, [r3, #8]
 800f622:	041b      	lsls	r3, r3, #16
 800f624:	693a      	ldr	r2, [r7, #16]
 800f626:	4313      	orrs	r3, r2
 800f628:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4a18      	ldr	r2, [pc, #96]	; (800f690 <TIM_OC5_SetConfig+0xb4>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d00f      	beq.n	800f652 <TIM_OC5_SetConfig+0x76>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4a17      	ldr	r2, [pc, #92]	; (800f694 <TIM_OC5_SetConfig+0xb8>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d00b      	beq.n	800f652 <TIM_OC5_SetConfig+0x76>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4a16      	ldr	r2, [pc, #88]	; (800f698 <TIM_OC5_SetConfig+0xbc>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d007      	beq.n	800f652 <TIM_OC5_SetConfig+0x76>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4a15      	ldr	r2, [pc, #84]	; (800f69c <TIM_OC5_SetConfig+0xc0>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d003      	beq.n	800f652 <TIM_OC5_SetConfig+0x76>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4a14      	ldr	r2, [pc, #80]	; (800f6a0 <TIM_OC5_SetConfig+0xc4>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d109      	bne.n	800f666 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f658:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	695b      	ldr	r3, [r3, #20]
 800f65e:	021b      	lsls	r3, r3, #8
 800f660:	697a      	ldr	r2, [r7, #20]
 800f662:	4313      	orrs	r3, r2
 800f664:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	697a      	ldr	r2, [r7, #20]
 800f66a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	685a      	ldr	r2, [r3, #4]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	693a      	ldr	r2, [r7, #16]
 800f67e:	621a      	str	r2, [r3, #32]
}
 800f680:	bf00      	nop
 800f682:	371c      	adds	r7, #28
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr
 800f68c:	fffeff8f 	.word	0xfffeff8f
 800f690:	40010000 	.word	0x40010000
 800f694:	40010400 	.word	0x40010400
 800f698:	40014000 	.word	0x40014000
 800f69c:	40014400 	.word	0x40014400
 800f6a0:	40014800 	.word	0x40014800

0800f6a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b087      	sub	sp, #28
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6a1b      	ldr	r3, [r3, #32]
 800f6b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6a1b      	ldr	r3, [r3, #32]
 800f6b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	4b22      	ldr	r3, [pc, #136]	; (800f758 <TIM_OC6_SetConfig+0xb4>)
 800f6d0:	4013      	ands	r3, r2
 800f6d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	021b      	lsls	r3, r3, #8
 800f6da:	68fa      	ldr	r2, [r7, #12]
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f6e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	689b      	ldr	r3, [r3, #8]
 800f6ec:	051b      	lsls	r3, r3, #20
 800f6ee:	693a      	ldr	r2, [r7, #16]
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a19      	ldr	r2, [pc, #100]	; (800f75c <TIM_OC6_SetConfig+0xb8>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d00f      	beq.n	800f71c <TIM_OC6_SetConfig+0x78>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a18      	ldr	r2, [pc, #96]	; (800f760 <TIM_OC6_SetConfig+0xbc>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d00b      	beq.n	800f71c <TIM_OC6_SetConfig+0x78>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a17      	ldr	r2, [pc, #92]	; (800f764 <TIM_OC6_SetConfig+0xc0>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d007      	beq.n	800f71c <TIM_OC6_SetConfig+0x78>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a16      	ldr	r2, [pc, #88]	; (800f768 <TIM_OC6_SetConfig+0xc4>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d003      	beq.n	800f71c <TIM_OC6_SetConfig+0x78>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4a15      	ldr	r2, [pc, #84]	; (800f76c <TIM_OC6_SetConfig+0xc8>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d109      	bne.n	800f730 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f722:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	695b      	ldr	r3, [r3, #20]
 800f728:	029b      	lsls	r3, r3, #10
 800f72a:	697a      	ldr	r2, [r7, #20]
 800f72c:	4313      	orrs	r3, r2
 800f72e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	697a      	ldr	r2, [r7, #20]
 800f734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	68fa      	ldr	r2, [r7, #12]
 800f73a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	685a      	ldr	r2, [r3, #4]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	693a      	ldr	r2, [r7, #16]
 800f748:	621a      	str	r2, [r3, #32]
}
 800f74a:	bf00      	nop
 800f74c:	371c      	adds	r7, #28
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	feff8fff 	.word	0xfeff8fff
 800f75c:	40010000 	.word	0x40010000
 800f760:	40010400 	.word	0x40010400
 800f764:	40014000 	.word	0x40014000
 800f768:	40014400 	.word	0x40014400
 800f76c:	40014800 	.word	0x40014800

0800f770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f770:	b480      	push	{r7}
 800f772:	b087      	sub	sp, #28
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	6a1b      	ldr	r3, [r3, #32]
 800f780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6a1b      	ldr	r3, [r3, #32]
 800f786:	f023 0201 	bic.w	r2, r3, #1
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	699b      	ldr	r3, [r3, #24]
 800f792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f79a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	011b      	lsls	r3, r3, #4
 800f7a0:	693a      	ldr	r2, [r7, #16]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	f023 030a 	bic.w	r3, r3, #10
 800f7ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f7ae:	697a      	ldr	r2, [r7, #20]
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	693a      	ldr	r2, [r7, #16]
 800f7ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	697a      	ldr	r2, [r7, #20]
 800f7c0:	621a      	str	r2, [r3, #32]
}
 800f7c2:	bf00      	nop
 800f7c4:	371c      	adds	r7, #28
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr

0800f7ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f7ce:	b480      	push	{r7}
 800f7d0:	b087      	sub	sp, #28
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	60f8      	str	r0, [r7, #12]
 800f7d6:	60b9      	str	r1, [r7, #8]
 800f7d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	6a1b      	ldr	r3, [r3, #32]
 800f7de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	6a1b      	ldr	r3, [r3, #32]
 800f7e4:	f023 0210 	bic.w	r2, r3, #16
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	699b      	ldr	r3, [r3, #24]
 800f7f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f7f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	031b      	lsls	r3, r3, #12
 800f7fe:	693a      	ldr	r2, [r7, #16]
 800f800:	4313      	orrs	r3, r2
 800f802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f80a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	011b      	lsls	r3, r3, #4
 800f810:	697a      	ldr	r2, [r7, #20]
 800f812:	4313      	orrs	r3, r2
 800f814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	693a      	ldr	r2, [r7, #16]
 800f81a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	697a      	ldr	r2, [r7, #20]
 800f820:	621a      	str	r2, [r3, #32]
}
 800f822:	bf00      	nop
 800f824:	371c      	adds	r7, #28
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr
	...

0800f830 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	689b      	ldr	r3, [r3, #8]
 800f83e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	4b09      	ldr	r3, [pc, #36]	; (800f868 <TIM_ITRx_SetConfig+0x38>)
 800f844:	4013      	ands	r3, r2
 800f846:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f848:	683a      	ldr	r2, [r7, #0]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	4313      	orrs	r3, r2
 800f84e:	f043 0307 	orr.w	r3, r3, #7
 800f852:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	68fa      	ldr	r2, [r7, #12]
 800f858:	609a      	str	r2, [r3, #8]
}
 800f85a:	bf00      	nop
 800f85c:	3714      	adds	r7, #20
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	ffcfff8f 	.word	0xffcfff8f

0800f86c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b087      	sub	sp, #28
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
 800f878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	689b      	ldr	r3, [r3, #8]
 800f87e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	021a      	lsls	r2, r3, #8
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	431a      	orrs	r2, r3
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	4313      	orrs	r3, r2
 800f894:	697a      	ldr	r2, [r7, #20]
 800f896:	4313      	orrs	r3, r2
 800f898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	697a      	ldr	r2, [r7, #20]
 800f89e:	609a      	str	r2, [r3, #8]
}
 800f8a0:	bf00      	nop
 800f8a2:	371c      	adds	r7, #28
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b087      	sub	sp, #28
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	f003 031f 	and.w	r3, r3, #31
 800f8be:	2201      	movs	r2, #1
 800f8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800f8c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	6a1a      	ldr	r2, [r3, #32]
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	43db      	mvns	r3, r3
 800f8ce:	401a      	ands	r2, r3
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	6a1a      	ldr	r2, [r3, #32]
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	f003 031f 	and.w	r3, r3, #31
 800f8de:	6879      	ldr	r1, [r7, #4]
 800f8e0:	fa01 f303 	lsl.w	r3, r1, r3
 800f8e4:	431a      	orrs	r2, r3
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	621a      	str	r2, [r3, #32]
}
 800f8ea:	bf00      	nop
 800f8ec:	371c      	adds	r7, #28
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
	...

0800f8f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b085      	sub	sp, #20
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f908:	2b01      	cmp	r3, #1
 800f90a:	d101      	bne.n	800f910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f90c:	2302      	movs	r3, #2
 800f90e:	e06d      	b.n	800f9ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2201      	movs	r2, #1
 800f914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2202      	movs	r2, #2
 800f91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	689b      	ldr	r3, [r3, #8]
 800f92e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	4a30      	ldr	r2, [pc, #192]	; (800f9f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f936:	4293      	cmp	r3, r2
 800f938:	d004      	beq.n	800f944 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	4a2f      	ldr	r2, [pc, #188]	; (800f9fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d108      	bne.n	800f956 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f94a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	4313      	orrs	r3, r2
 800f954:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f95c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	68fa      	ldr	r2, [r7, #12]
 800f964:	4313      	orrs	r3, r2
 800f966:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	68fa      	ldr	r2, [r7, #12]
 800f96e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4a20      	ldr	r2, [pc, #128]	; (800f9f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d022      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f982:	d01d      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a1d      	ldr	r2, [pc, #116]	; (800fa00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d018      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4a1c      	ldr	r2, [pc, #112]	; (800fa04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d013      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4a1a      	ldr	r2, [pc, #104]	; (800fa08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d00e      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	4a15      	ldr	r2, [pc, #84]	; (800f9fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d009      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a16      	ldr	r2, [pc, #88]	; (800fa0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d004      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	4a15      	ldr	r2, [pc, #84]	; (800fa10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d10c      	bne.n	800f9da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	68ba      	ldr	r2, [r7, #8]
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3714      	adds	r7, #20
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr
 800f9f8:	40010000 	.word	0x40010000
 800f9fc:	40010400 	.word	0x40010400
 800fa00:	40000400 	.word	0x40000400
 800fa04:	40000800 	.word	0x40000800
 800fa08:	40000c00 	.word	0x40000c00
 800fa0c:	40001800 	.word	0x40001800
 800fa10:	40014000 	.word	0x40014000

0800fa14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b085      	sub	sp, #20
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d101      	bne.n	800fa30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fa2c:	2302      	movs	r3, #2
 800fa2e:	e065      	b.n	800fafc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2201      	movs	r2, #1
 800fa34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	689b      	ldr	r3, [r3, #8]
 800fa50:	4313      	orrs	r3, r2
 800fa52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	4313      	orrs	r3, r2
 800fa60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	691b      	ldr	r3, [r3, #16]
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	695b      	ldr	r3, [r3, #20]
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa96:	4313      	orrs	r3, r2
 800fa98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	699b      	ldr	r3, [r3, #24]
 800faa4:	041b      	lsls	r3, r3, #16
 800faa6:	4313      	orrs	r3, r2
 800faa8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4a16      	ldr	r2, [pc, #88]	; (800fb08 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d004      	beq.n	800fabe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	4a14      	ldr	r2, [pc, #80]	; (800fb0c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d115      	bne.n	800faea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac8:	051b      	lsls	r3, r3, #20
 800faca:	4313      	orrs	r3, r2
 800facc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	69db      	ldr	r3, [r3, #28]
 800fad8:	4313      	orrs	r3, r2
 800fada:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	6a1b      	ldr	r3, [r3, #32]
 800fae6:	4313      	orrs	r3, r2
 800fae8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	68fa      	ldr	r2, [r7, #12]
 800faf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fafa:	2300      	movs	r3, #0
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3714      	adds	r7, #20
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr
 800fb08:	40010000 	.word	0x40010000
 800fb0c:	40010400 	.word	0x40010400

0800fb10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fb18:	bf00      	nop
 800fb1a:	370c      	adds	r7, #12
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fb2c:	bf00      	nop
 800fb2e:	370c      	adds	r7, #12
 800fb30:	46bd      	mov	sp, r7
 800fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb36:	4770      	bx	lr

0800fb38 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fb40:	bf00      	nop
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d101      	bne.n	800fb5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	e042      	b.n	800fbe4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d106      	bne.n	800fb76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f7f3 fc3f 	bl	80033f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2224      	movs	r2, #36	; 0x24
 800fb7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	681a      	ldr	r2, [r3, #0]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	f022 0201 	bic.w	r2, r2, #1
 800fb8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d002      	beq.n	800fb9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f001 fb8c 	bl	80112b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f000 fe21 	bl	80107e4 <UART_SetConfig>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d101      	bne.n	800fbac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	e01b      	b.n	800fbe4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	685a      	ldr	r2, [r3, #4]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fbba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	689a      	ldr	r2, [r3, #8]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fbca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f042 0201 	orr.w	r2, r2, #1
 800fbda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f001 fc0b 	bl	80113f8 <UART_CheckIdleState>
 800fbe2:	4603      	mov	r3, r0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3708      	adds	r7, #8
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b08a      	sub	sp, #40	; 0x28
 800fbf0:	af02      	add	r7, sp, #8
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	603b      	str	r3, [r7, #0]
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc02:	2b20      	cmp	r3, #32
 800fc04:	d17b      	bne.n	800fcfe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d002      	beq.n	800fc12 <HAL_UART_Transmit+0x26>
 800fc0c:	88fb      	ldrh	r3, [r7, #6]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d101      	bne.n	800fc16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fc12:	2301      	movs	r3, #1
 800fc14:	e074      	b.n	800fd00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2221      	movs	r2, #33	; 0x21
 800fc22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fc26:	f7f3 ff63 	bl	8003af0 <HAL_GetTick>
 800fc2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	88fa      	ldrh	r2, [r7, #6]
 800fc30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	88fa      	ldrh	r2, [r7, #6]
 800fc38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	689b      	ldr	r3, [r3, #8]
 800fc40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc44:	d108      	bne.n	800fc58 <HAL_UART_Transmit+0x6c>
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	691b      	ldr	r3, [r3, #16]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d104      	bne.n	800fc58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	61bb      	str	r3, [r7, #24]
 800fc56:	e003      	b.n	800fc60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fc60:	e030      	b.n	800fcc4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	9300      	str	r3, [sp, #0]
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	2180      	movs	r1, #128	; 0x80
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f001 fc6d 	bl	801154c <UART_WaitOnFlagUntilTimeout>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d005      	beq.n	800fc84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2220      	movs	r2, #32
 800fc7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fc80:	2303      	movs	r3, #3
 800fc82:	e03d      	b.n	800fd00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d10b      	bne.n	800fca2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fc8a:	69bb      	ldr	r3, [r7, #24]
 800fc8c:	881b      	ldrh	r3, [r3, #0]
 800fc8e:	461a      	mov	r2, r3
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fc98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	3302      	adds	r3, #2
 800fc9e:	61bb      	str	r3, [r7, #24]
 800fca0:	e007      	b.n	800fcb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fca2:	69fb      	ldr	r3, [r7, #28]
 800fca4:	781a      	ldrb	r2, [r3, #0]
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	3b01      	subs	r3, #1
 800fcbc:	b29a      	uxth	r2, r3
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d1c8      	bne.n	800fc62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	9300      	str	r3, [sp, #0]
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	2140      	movs	r1, #64	; 0x40
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f001 fc36 	bl	801154c <UART_WaitOnFlagUntilTimeout>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d005      	beq.n	800fcf2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2220      	movs	r2, #32
 800fcea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fcee:	2303      	movs	r3, #3
 800fcf0:	e006      	b.n	800fd00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2220      	movs	r2, #32
 800fcf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	e000      	b.n	800fd00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fcfe:	2302      	movs	r3, #2
  }
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3720      	adds	r7, #32
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b08a      	sub	sp, #40	; 0x28
 800fd0c:	af02      	add	r7, sp, #8
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	603b      	str	r3, [r7, #0]
 800fd14:	4613      	mov	r3, r2
 800fd16:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd1e:	2b20      	cmp	r3, #32
 800fd20:	f040 80b5 	bne.w	800fe8e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d002      	beq.n	800fd30 <HAL_UART_Receive+0x28>
 800fd2a:	88fb      	ldrh	r3, [r7, #6]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d101      	bne.n	800fd34 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fd30:	2301      	movs	r3, #1
 800fd32:	e0ad      	b.n	800fe90 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2222      	movs	r2, #34	; 0x22
 800fd40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2200      	movs	r2, #0
 800fd48:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fd4a:	f7f3 fed1 	bl	8003af0 <HAL_GetTick>
 800fd4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	88fa      	ldrh	r2, [r7, #6]
 800fd54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	88fa      	ldrh	r2, [r7, #6]
 800fd5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	689b      	ldr	r3, [r3, #8]
 800fd64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd68:	d10e      	bne.n	800fd88 <HAL_UART_Receive+0x80>
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	691b      	ldr	r3, [r3, #16]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d105      	bne.n	800fd7e <HAL_UART_Receive+0x76>
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fd78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd7c:	e02d      	b.n	800fdda <HAL_UART_Receive+0xd2>
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	22ff      	movs	r2, #255	; 0xff
 800fd82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd86:	e028      	b.n	800fdda <HAL_UART_Receive+0xd2>
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	689b      	ldr	r3, [r3, #8]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d10d      	bne.n	800fdac <HAL_UART_Receive+0xa4>
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	691b      	ldr	r3, [r3, #16]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d104      	bne.n	800fda2 <HAL_UART_Receive+0x9a>
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	22ff      	movs	r2, #255	; 0xff
 800fd9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fda0:	e01b      	b.n	800fdda <HAL_UART_Receive+0xd2>
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	227f      	movs	r2, #127	; 0x7f
 800fda6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fdaa:	e016      	b.n	800fdda <HAL_UART_Receive+0xd2>
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	689b      	ldr	r3, [r3, #8]
 800fdb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fdb4:	d10d      	bne.n	800fdd2 <HAL_UART_Receive+0xca>
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	691b      	ldr	r3, [r3, #16]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d104      	bne.n	800fdc8 <HAL_UART_Receive+0xc0>
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	227f      	movs	r2, #127	; 0x7f
 800fdc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fdc6:	e008      	b.n	800fdda <HAL_UART_Receive+0xd2>
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	223f      	movs	r2, #63	; 0x3f
 800fdcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fdd0:	e003      	b.n	800fdda <HAL_UART_Receive+0xd2>
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fde0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdea:	d108      	bne.n	800fdfe <HAL_UART_Receive+0xf6>
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	691b      	ldr	r3, [r3, #16]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d104      	bne.n	800fdfe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	61bb      	str	r3, [r7, #24]
 800fdfc:	e003      	b.n	800fe06 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fe02:	2300      	movs	r3, #0
 800fe04:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fe06:	e036      	b.n	800fe76 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	2120      	movs	r1, #32
 800fe12:	68f8      	ldr	r0, [r7, #12]
 800fe14:	f001 fb9a 	bl	801154c <UART_WaitOnFlagUntilTimeout>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d005      	beq.n	800fe2a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2220      	movs	r2, #32
 800fe22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800fe26:	2303      	movs	r3, #3
 800fe28:	e032      	b.n	800fe90 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fe2a:	69fb      	ldr	r3, [r7, #28]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d10c      	bne.n	800fe4a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe36:	b29a      	uxth	r2, r3
 800fe38:	8a7b      	ldrh	r3, [r7, #18]
 800fe3a:	4013      	ands	r3, r2
 800fe3c:	b29a      	uxth	r2, r3
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fe42:	69bb      	ldr	r3, [r7, #24]
 800fe44:	3302      	adds	r3, #2
 800fe46:	61bb      	str	r3, [r7, #24]
 800fe48:	e00c      	b.n	800fe64 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe50:	b2da      	uxtb	r2, r3
 800fe52:	8a7b      	ldrh	r3, [r7, #18]
 800fe54:	b2db      	uxtb	r3, r3
 800fe56:	4013      	ands	r3, r2
 800fe58:	b2da      	uxtb	r2, r3
 800fe5a:	69fb      	ldr	r3, [r7, #28]
 800fe5c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fe5e:	69fb      	ldr	r3, [r7, #28]
 800fe60:	3301      	adds	r3, #1
 800fe62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	3b01      	subs	r3, #1
 800fe6e:	b29a      	uxth	r2, r3
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1c2      	bne.n	800fe08 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2220      	movs	r2, #32
 800fe86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	e000      	b.n	800fe90 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800fe8e:	2302      	movs	r3, #2
  }
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3720      	adds	r7, #32
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b08a      	sub	sp, #40	; 0x28
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	4613      	mov	r3, r2
 800fea4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800feac:	2b20      	cmp	r3, #32
 800feae:	d137      	bne.n	800ff20 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d002      	beq.n	800febc <HAL_UART_Receive_IT+0x24>
 800feb6:	88fb      	ldrh	r3, [r7, #6]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d101      	bne.n	800fec0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800febc:	2301      	movs	r3, #1
 800febe:	e030      	b.n	800ff22 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	2200      	movs	r2, #0
 800fec4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a18      	ldr	r2, [pc, #96]	; (800ff2c <HAL_UART_Receive_IT+0x94>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d01f      	beq.n	800ff10 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d018      	beq.n	800ff10 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	e853 3f00 	ldrex	r3, [r3]
 800feea:	613b      	str	r3, [r7, #16]
   return(result);
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fef2:	627b      	str	r3, [r7, #36]	; 0x24
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	461a      	mov	r2, r3
 800fefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fefc:	623b      	str	r3, [r7, #32]
 800fefe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff00:	69f9      	ldr	r1, [r7, #28]
 800ff02:	6a3a      	ldr	r2, [r7, #32]
 800ff04:	e841 2300 	strex	r3, r2, [r1]
 800ff08:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d1e6      	bne.n	800fede <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ff10:	88fb      	ldrh	r3, [r7, #6]
 800ff12:	461a      	mov	r2, r3
 800ff14:	68b9      	ldr	r1, [r7, #8]
 800ff16:	68f8      	ldr	r0, [r7, #12]
 800ff18:	f001 fb86 	bl	8011628 <UART_Start_Receive_IT>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	e000      	b.n	800ff22 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ff20:	2302      	movs	r3, #2
  }
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3728      	adds	r7, #40	; 0x28
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	58000c00 	.word	0x58000c00

0800ff30 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b08a      	sub	sp, #40	; 0x28
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	4613      	mov	r3, r2
 800ff3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff44:	2b20      	cmp	r3, #32
 800ff46:	d167      	bne.n	8010018 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d002      	beq.n	800ff54 <HAL_UART_Transmit_DMA+0x24>
 800ff4e:	88fb      	ldrh	r3, [r7, #6]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d101      	bne.n	800ff58 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ff54:	2301      	movs	r3, #1
 800ff56:	e060      	b.n	801001a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	68ba      	ldr	r2, [r7, #8]
 800ff5c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	88fa      	ldrh	r2, [r7, #6]
 800ff62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	88fa      	ldrh	r2, [r7, #6]
 800ff6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2200      	movs	r2, #0
 800ff72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2221      	movs	r2, #33	; 0x21
 800ff7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d028      	beq.n	800ffd8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff8a:	4a26      	ldr	r2, [pc, #152]	; (8010024 <HAL_UART_Transmit_DMA+0xf4>)
 800ff8c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff92:	4a25      	ldr	r2, [pc, #148]	; (8010028 <HAL_UART_Transmit_DMA+0xf8>)
 800ff94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff9a:	4a24      	ldr	r2, [pc, #144]	; (801002c <HAL_UART_Transmit_DMA+0xfc>)
 800ff9c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffae:	4619      	mov	r1, r3
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	3328      	adds	r3, #40	; 0x28
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	88fb      	ldrh	r3, [r7, #6]
 800ffba:	f7f6 fa1d 	bl	80063f8 <HAL_DMA_Start_IT>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d009      	beq.n	800ffd8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2210      	movs	r2, #16
 800ffc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2220      	movs	r2, #32
 800ffd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	e020      	b.n	801001a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2240      	movs	r2, #64	; 0x40
 800ffde:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	3308      	adds	r3, #8
 800ffe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	e853 3f00 	ldrex	r3, [r3]
 800ffee:	613b      	str	r3, [r7, #16]
   return(result);
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fff6:	627b      	str	r3, [r7, #36]	; 0x24
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	3308      	adds	r3, #8
 800fffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010000:	623a      	str	r2, [r7, #32]
 8010002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010004:	69f9      	ldr	r1, [r7, #28]
 8010006:	6a3a      	ldr	r2, [r7, #32]
 8010008:	e841 2300 	strex	r3, r2, [r1]
 801000c:	61bb      	str	r3, [r7, #24]
   return(result);
 801000e:	69bb      	ldr	r3, [r7, #24]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d1e5      	bne.n	800ffe0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010014:	2300      	movs	r3, #0
 8010016:	e000      	b.n	801001a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010018:	2302      	movs	r3, #2
  }
}
 801001a:	4618      	mov	r0, r3
 801001c:	3728      	adds	r7, #40	; 0x28
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	080119bd 	.word	0x080119bd
 8010028:	08011a53 	.word	0x08011a53
 801002c:	08011a6f 	.word	0x08011a6f

08010030 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b0ba      	sub	sp, #232	; 0xe8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	69db      	ldr	r3, [r3, #28]
 801003e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	689b      	ldr	r3, [r3, #8]
 8010052:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010056:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801005a:	f640 030f 	movw	r3, #2063	; 0x80f
 801005e:	4013      	ands	r3, r2
 8010060:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010064:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010068:	2b00      	cmp	r3, #0
 801006a:	d11b      	bne.n	80100a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801006c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010070:	f003 0320 	and.w	r3, r3, #32
 8010074:	2b00      	cmp	r3, #0
 8010076:	d015      	beq.n	80100a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801007c:	f003 0320 	and.w	r3, r3, #32
 8010080:	2b00      	cmp	r3, #0
 8010082:	d105      	bne.n	8010090 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801008c:	2b00      	cmp	r3, #0
 801008e:	d009      	beq.n	80100a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010094:	2b00      	cmp	r3, #0
 8010096:	f000 8377 	beq.w	8010788 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	4798      	blx	r3
      }
      return;
 80100a2:	e371      	b.n	8010788 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80100a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f000 8123 	beq.w	80102f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80100ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80100b2:	4b8d      	ldr	r3, [pc, #564]	; (80102e8 <HAL_UART_IRQHandler+0x2b8>)
 80100b4:	4013      	ands	r3, r2
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d106      	bne.n	80100c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80100ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80100be:	4b8b      	ldr	r3, [pc, #556]	; (80102ec <HAL_UART_IRQHandler+0x2bc>)
 80100c0:	4013      	ands	r3, r2
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	f000 8116 	beq.w	80102f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80100c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100cc:	f003 0301 	and.w	r3, r3, #1
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d011      	beq.n	80100f8 <HAL_UART_IRQHandler+0xc8>
 80100d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00b      	beq.n	80100f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	2201      	movs	r2, #1
 80100e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100ee:	f043 0201 	orr.w	r2, r3, #1
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100fc:	f003 0302 	and.w	r3, r3, #2
 8010100:	2b00      	cmp	r3, #0
 8010102:	d011      	beq.n	8010128 <HAL_UART_IRQHandler+0xf8>
 8010104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010108:	f003 0301 	and.w	r3, r3, #1
 801010c:	2b00      	cmp	r3, #0
 801010e:	d00b      	beq.n	8010128 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	2202      	movs	r2, #2
 8010116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801011e:	f043 0204 	orr.w	r2, r3, #4
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801012c:	f003 0304 	and.w	r3, r3, #4
 8010130:	2b00      	cmp	r3, #0
 8010132:	d011      	beq.n	8010158 <HAL_UART_IRQHandler+0x128>
 8010134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010138:	f003 0301 	and.w	r3, r3, #1
 801013c:	2b00      	cmp	r3, #0
 801013e:	d00b      	beq.n	8010158 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	2204      	movs	r2, #4
 8010146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801014e:	f043 0202 	orr.w	r2, r3, #2
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801015c:	f003 0308 	and.w	r3, r3, #8
 8010160:	2b00      	cmp	r3, #0
 8010162:	d017      	beq.n	8010194 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010168:	f003 0320 	and.w	r3, r3, #32
 801016c:	2b00      	cmp	r3, #0
 801016e:	d105      	bne.n	801017c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010170:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010174:	4b5c      	ldr	r3, [pc, #368]	; (80102e8 <HAL_UART_IRQHandler+0x2b8>)
 8010176:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010178:	2b00      	cmp	r3, #0
 801017a:	d00b      	beq.n	8010194 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2208      	movs	r2, #8
 8010182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801018a:	f043 0208 	orr.w	r2, r3, #8
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801019c:	2b00      	cmp	r3, #0
 801019e:	d012      	beq.n	80101c6 <HAL_UART_IRQHandler+0x196>
 80101a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d00c      	beq.n	80101c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80101b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101bc:	f043 0220 	orr.w	r2, r3, #32
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f000 82dd 	beq.w	801078c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80101d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101d6:	f003 0320 	and.w	r3, r3, #32
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d013      	beq.n	8010206 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80101de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101e2:	f003 0320 	and.w	r3, r3, #32
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d105      	bne.n	80101f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80101ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80101ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d007      	beq.n	8010206 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d003      	beq.n	8010206 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801020c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	689b      	ldr	r3, [r3, #8]
 8010216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801021a:	2b40      	cmp	r3, #64	; 0x40
 801021c:	d005      	beq.n	801022a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801021e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010222:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010226:	2b00      	cmp	r3, #0
 8010228:	d054      	beq.n	80102d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f001 fb60 	bl	80118f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	689b      	ldr	r3, [r3, #8]
 8010236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801023a:	2b40      	cmp	r3, #64	; 0x40
 801023c:	d146      	bne.n	80102cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	3308      	adds	r3, #8
 8010244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801024c:	e853 3f00 	ldrex	r3, [r3]
 8010250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801025c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	3308      	adds	r3, #8
 8010266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801026a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801026e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801027a:	e841 2300 	strex	r3, r2, [r1]
 801027e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d1d9      	bne.n	801023e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010290:	2b00      	cmp	r3, #0
 8010292:	d017      	beq.n	80102c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801029a:	4a15      	ldr	r2, [pc, #84]	; (80102f0 <HAL_UART_IRQHandler+0x2c0>)
 801029c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7f6 fe2f 	bl	8006f08 <HAL_DMA_Abort_IT>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d019      	beq.n	80102e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80102be:	4610      	mov	r0, r2
 80102c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102c2:	e00f      	b.n	80102e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 fa77 	bl	80107b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102ca:	e00b      	b.n	80102e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f000 fa73 	bl	80107b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102d2:	e007      	b.n	80102e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f000 fa6f 	bl	80107b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2200      	movs	r2, #0
 80102de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80102e2:	e253      	b.n	801078c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102e4:	bf00      	nop
    return;
 80102e6:	e251      	b.n	801078c <HAL_UART_IRQHandler+0x75c>
 80102e8:	10000001 	.word	0x10000001
 80102ec:	04000120 	.word	0x04000120
 80102f0:	08011aef 	.word	0x08011aef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	f040 81e7 	bne.w	80106cc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80102fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010302:	f003 0310 	and.w	r3, r3, #16
 8010306:	2b00      	cmp	r3, #0
 8010308:	f000 81e0 	beq.w	80106cc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801030c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010310:	f003 0310 	and.w	r3, r3, #16
 8010314:	2b00      	cmp	r3, #0
 8010316:	f000 81d9 	beq.w	80106cc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2210      	movs	r2, #16
 8010320:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801032c:	2b40      	cmp	r3, #64	; 0x40
 801032e:	f040 8151 	bne.w	80105d4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a96      	ldr	r2, [pc, #600]	; (8010594 <HAL_UART_IRQHandler+0x564>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d068      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4a93      	ldr	r2, [pc, #588]	; (8010598 <HAL_UART_IRQHandler+0x568>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d061      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4a91      	ldr	r2, [pc, #580]	; (801059c <HAL_UART_IRQHandler+0x56c>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d05a      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4a8e      	ldr	r2, [pc, #568]	; (80105a0 <HAL_UART_IRQHandler+0x570>)
 8010366:	4293      	cmp	r3, r2
 8010368:	d053      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	4a8c      	ldr	r2, [pc, #560]	; (80105a4 <HAL_UART_IRQHandler+0x574>)
 8010374:	4293      	cmp	r3, r2
 8010376:	d04c      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4a89      	ldr	r2, [pc, #548]	; (80105a8 <HAL_UART_IRQHandler+0x578>)
 8010382:	4293      	cmp	r3, r2
 8010384:	d045      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	4a87      	ldr	r2, [pc, #540]	; (80105ac <HAL_UART_IRQHandler+0x57c>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d03e      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4a84      	ldr	r2, [pc, #528]	; (80105b0 <HAL_UART_IRQHandler+0x580>)
 801039e:	4293      	cmp	r3, r2
 80103a0:	d037      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	4a82      	ldr	r2, [pc, #520]	; (80105b4 <HAL_UART_IRQHandler+0x584>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d030      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	4a7f      	ldr	r2, [pc, #508]	; (80105b8 <HAL_UART_IRQHandler+0x588>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d029      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4a7d      	ldr	r2, [pc, #500]	; (80105bc <HAL_UART_IRQHandler+0x58c>)
 80103c8:	4293      	cmp	r3, r2
 80103ca:	d022      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a7a      	ldr	r2, [pc, #488]	; (80105c0 <HAL_UART_IRQHandler+0x590>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d01b      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	4a78      	ldr	r2, [pc, #480]	; (80105c4 <HAL_UART_IRQHandler+0x594>)
 80103e4:	4293      	cmp	r3, r2
 80103e6:	d014      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4a75      	ldr	r2, [pc, #468]	; (80105c8 <HAL_UART_IRQHandler+0x598>)
 80103f2:	4293      	cmp	r3, r2
 80103f4:	d00d      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	4a73      	ldr	r2, [pc, #460]	; (80105cc <HAL_UART_IRQHandler+0x59c>)
 8010400:	4293      	cmp	r3, r2
 8010402:	d006      	beq.n	8010412 <HAL_UART_IRQHandler+0x3e2>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4a70      	ldr	r2, [pc, #448]	; (80105d0 <HAL_UART_IRQHandler+0x5a0>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d106      	bne.n	8010420 <HAL_UART_IRQHandler+0x3f0>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	b29b      	uxth	r3, r3
 801041e:	e005      	b.n	801042c <HAL_UART_IRQHandler+0x3fc>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	b29b      	uxth	r3, r3
 801042c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010430:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010434:	2b00      	cmp	r3, #0
 8010436:	f000 81ab 	beq.w	8010790 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010440:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010444:	429a      	cmp	r2, r3
 8010446:	f080 81a3 	bcs.w	8010790 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010450:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801045a:	69db      	ldr	r3, [r3, #28]
 801045c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010460:	f000 8087 	beq.w	8010572 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801046c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010470:	e853 3f00 	ldrex	r3, [r3]
 8010474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801047c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	461a      	mov	r2, r3
 801048a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801048e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010492:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010496:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801049a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801049e:	e841 2300 	strex	r3, r2, [r1]
 80104a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80104a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d1da      	bne.n	8010464 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	3308      	adds	r3, #8
 80104b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104b8:	e853 3f00 	ldrex	r3, [r3]
 80104bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80104be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104c0:	f023 0301 	bic.w	r3, r3, #1
 80104c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	3308      	adds	r3, #8
 80104ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80104d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80104d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80104da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80104de:	e841 2300 	strex	r3, r2, [r1]
 80104e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80104e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d1e1      	bne.n	80104ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	3308      	adds	r3, #8
 80104f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104f4:	e853 3f00 	ldrex	r3, [r3]
 80104f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80104fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	3308      	adds	r3, #8
 801050a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801050e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010510:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010512:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010514:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010516:	e841 2300 	strex	r3, r2, [r1]
 801051a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801051c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801051e:	2b00      	cmp	r3, #0
 8010520:	d1e3      	bne.n	80104ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2220      	movs	r2, #32
 8010526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2200      	movs	r2, #0
 801052e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010538:	e853 3f00 	ldrex	r3, [r3]
 801053c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801053e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010540:	f023 0310 	bic.w	r3, r3, #16
 8010544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	461a      	mov	r2, r3
 801054e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010552:	65bb      	str	r3, [r7, #88]	; 0x58
 8010554:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010556:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801055a:	e841 2300 	strex	r3, r2, [r1]
 801055e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010562:	2b00      	cmp	r3, #0
 8010564:	d1e4      	bne.n	8010530 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801056c:	4618      	mov	r0, r3
 801056e:	f7f6 f9ad 	bl	80068cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2202      	movs	r2, #2
 8010576:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010584:	b29b      	uxth	r3, r3
 8010586:	1ad3      	subs	r3, r2, r3
 8010588:	b29b      	uxth	r3, r3
 801058a:	4619      	mov	r1, r3
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f000 f91d 	bl	80107cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010592:	e0fd      	b.n	8010790 <HAL_UART_IRQHandler+0x760>
 8010594:	40020010 	.word	0x40020010
 8010598:	40020028 	.word	0x40020028
 801059c:	40020040 	.word	0x40020040
 80105a0:	40020058 	.word	0x40020058
 80105a4:	40020070 	.word	0x40020070
 80105a8:	40020088 	.word	0x40020088
 80105ac:	400200a0 	.word	0x400200a0
 80105b0:	400200b8 	.word	0x400200b8
 80105b4:	40020410 	.word	0x40020410
 80105b8:	40020428 	.word	0x40020428
 80105bc:	40020440 	.word	0x40020440
 80105c0:	40020458 	.word	0x40020458
 80105c4:	40020470 	.word	0x40020470
 80105c8:	40020488 	.word	0x40020488
 80105cc:	400204a0 	.word	0x400204a0
 80105d0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105e0:	b29b      	uxth	r3, r3
 80105e2:	1ad3      	subs	r3, r2, r3
 80105e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105ee:	b29b      	uxth	r3, r3
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	f000 80cf 	beq.w	8010794 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80105f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	f000 80ca 	beq.w	8010794 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010608:	e853 3f00 	ldrex	r3, [r3]
 801060c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801060e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010610:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010614:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	461a      	mov	r2, r3
 801061e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010622:	647b      	str	r3, [r7, #68]	; 0x44
 8010624:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010626:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801062a:	e841 2300 	strex	r3, r2, [r1]
 801062e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010632:	2b00      	cmp	r3, #0
 8010634:	d1e4      	bne.n	8010600 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	3308      	adds	r3, #8
 801063c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010640:	e853 3f00 	ldrex	r3, [r3]
 8010644:	623b      	str	r3, [r7, #32]
   return(result);
 8010646:	6a3a      	ldr	r2, [r7, #32]
 8010648:	4b55      	ldr	r3, [pc, #340]	; (80107a0 <HAL_UART_IRQHandler+0x770>)
 801064a:	4013      	ands	r3, r2
 801064c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	3308      	adds	r3, #8
 8010656:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801065a:	633a      	str	r2, [r7, #48]	; 0x30
 801065c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010662:	e841 2300 	strex	r3, r2, [r1]
 8010666:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1e3      	bne.n	8010636 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2220      	movs	r2, #32
 8010672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2200      	movs	r2, #0
 8010680:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	e853 3f00 	ldrex	r3, [r3]
 801068e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f023 0310 	bic.w	r3, r3, #16
 8010696:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	461a      	mov	r2, r3
 80106a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80106a4:	61fb      	str	r3, [r7, #28]
 80106a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a8:	69b9      	ldr	r1, [r7, #24]
 80106aa:	69fa      	ldr	r2, [r7, #28]
 80106ac:	e841 2300 	strex	r3, r2, [r1]
 80106b0:	617b      	str	r3, [r7, #20]
   return(result);
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d1e4      	bne.n	8010682 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2202      	movs	r2, #2
 80106bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80106be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80106c2:	4619      	mov	r1, r3
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f000 f881 	bl	80107cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80106ca:	e063      	b.n	8010794 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80106cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00e      	beq.n	80106f6 <HAL_UART_IRQHandler+0x6c6>
 80106d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d008      	beq.n	80106f6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80106ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f001 ff5a 	bl	80125a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106f4:	e051      	b.n	801079a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80106f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d014      	beq.n	801072c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801070a:	2b00      	cmp	r3, #0
 801070c:	d105      	bne.n	801071a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801070e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010716:	2b00      	cmp	r3, #0
 8010718:	d008      	beq.n	801072c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801071e:	2b00      	cmp	r3, #0
 8010720:	d03a      	beq.n	8010798 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	4798      	blx	r3
    }
    return;
 801072a:	e035      	b.n	8010798 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801072c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010734:	2b00      	cmp	r3, #0
 8010736:	d009      	beq.n	801074c <HAL_UART_IRQHandler+0x71c>
 8010738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801073c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010740:	2b00      	cmp	r3, #0
 8010742:	d003      	beq.n	801074c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f001 f9e8 	bl	8011b1a <UART_EndTransmit_IT>
    return;
 801074a:	e026      	b.n	801079a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801074c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010754:	2b00      	cmp	r3, #0
 8010756:	d009      	beq.n	801076c <HAL_UART_IRQHandler+0x73c>
 8010758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801075c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010760:	2b00      	cmp	r3, #0
 8010762:	d003      	beq.n	801076c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f001 ff33 	bl	80125d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801076a:	e016      	b.n	801079a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801076c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010774:	2b00      	cmp	r3, #0
 8010776:	d010      	beq.n	801079a <HAL_UART_IRQHandler+0x76a>
 8010778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801077c:	2b00      	cmp	r3, #0
 801077e:	da0c      	bge.n	801079a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f001 ff1b 	bl	80125bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010786:	e008      	b.n	801079a <HAL_UART_IRQHandler+0x76a>
      return;
 8010788:	bf00      	nop
 801078a:	e006      	b.n	801079a <HAL_UART_IRQHandler+0x76a>
    return;
 801078c:	bf00      	nop
 801078e:	e004      	b.n	801079a <HAL_UART_IRQHandler+0x76a>
      return;
 8010790:	bf00      	nop
 8010792:	e002      	b.n	801079a <HAL_UART_IRQHandler+0x76a>
      return;
 8010794:	bf00      	nop
 8010796:	e000      	b.n	801079a <HAL_UART_IRQHandler+0x76a>
    return;
 8010798:	bf00      	nop
  }
}
 801079a:	37e8      	adds	r7, #232	; 0xe8
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	effffffe 	.word	0xeffffffe

080107a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80107ac:	bf00      	nop
 80107ae:	370c      	adds	r7, #12
 80107b0:	46bd      	mov	sp, r7
 80107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b6:	4770      	bx	lr

080107b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b083      	sub	sp, #12
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80107c0:	bf00      	nop
 80107c2:	370c      	adds	r7, #12
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b083      	sub	sp, #12
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	460b      	mov	r3, r1
 80107d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80107d8:	bf00      	nop
 80107da:	370c      	adds	r7, #12
 80107dc:	46bd      	mov	sp, r7
 80107de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e2:	4770      	bx	lr

080107e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107e8:	b092      	sub	sp, #72	; 0x48
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107ee:	2300      	movs	r3, #0
 80107f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	689a      	ldr	r2, [r3, #8]
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	691b      	ldr	r3, [r3, #16]
 80107fc:	431a      	orrs	r2, r3
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	695b      	ldr	r3, [r3, #20]
 8010802:	431a      	orrs	r2, r3
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	69db      	ldr	r3, [r3, #28]
 8010808:	4313      	orrs	r3, r2
 801080a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	4bbe      	ldr	r3, [pc, #760]	; (8010b0c <UART_SetConfig+0x328>)
 8010814:	4013      	ands	r3, r2
 8010816:	697a      	ldr	r2, [r7, #20]
 8010818:	6812      	ldr	r2, [r2, #0]
 801081a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801081c:	430b      	orrs	r3, r1
 801081e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	68da      	ldr	r2, [r3, #12]
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	430a      	orrs	r2, r1
 8010834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	699b      	ldr	r3, [r3, #24]
 801083a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4ab3      	ldr	r2, [pc, #716]	; (8010b10 <UART_SetConfig+0x32c>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d004      	beq.n	8010850 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	6a1b      	ldr	r3, [r3, #32]
 801084a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801084c:	4313      	orrs	r3, r2
 801084e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	689a      	ldr	r2, [r3, #8]
 8010856:	4baf      	ldr	r3, [pc, #700]	; (8010b14 <UART_SetConfig+0x330>)
 8010858:	4013      	ands	r3, r2
 801085a:	697a      	ldr	r2, [r7, #20]
 801085c:	6812      	ldr	r2, [r2, #0]
 801085e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010860:	430b      	orrs	r3, r1
 8010862:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801086a:	f023 010f 	bic.w	r1, r3, #15
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	430a      	orrs	r2, r1
 8010878:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	4aa6      	ldr	r2, [pc, #664]	; (8010b18 <UART_SetConfig+0x334>)
 8010880:	4293      	cmp	r3, r2
 8010882:	d177      	bne.n	8010974 <UART_SetConfig+0x190>
 8010884:	4ba5      	ldr	r3, [pc, #660]	; (8010b1c <UART_SetConfig+0x338>)
 8010886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010888:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801088c:	2b28      	cmp	r3, #40	; 0x28
 801088e:	d86d      	bhi.n	801096c <UART_SetConfig+0x188>
 8010890:	a201      	add	r2, pc, #4	; (adr r2, 8010898 <UART_SetConfig+0xb4>)
 8010892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010896:	bf00      	nop
 8010898:	0801093d 	.word	0x0801093d
 801089c:	0801096d 	.word	0x0801096d
 80108a0:	0801096d 	.word	0x0801096d
 80108a4:	0801096d 	.word	0x0801096d
 80108a8:	0801096d 	.word	0x0801096d
 80108ac:	0801096d 	.word	0x0801096d
 80108b0:	0801096d 	.word	0x0801096d
 80108b4:	0801096d 	.word	0x0801096d
 80108b8:	08010945 	.word	0x08010945
 80108bc:	0801096d 	.word	0x0801096d
 80108c0:	0801096d 	.word	0x0801096d
 80108c4:	0801096d 	.word	0x0801096d
 80108c8:	0801096d 	.word	0x0801096d
 80108cc:	0801096d 	.word	0x0801096d
 80108d0:	0801096d 	.word	0x0801096d
 80108d4:	0801096d 	.word	0x0801096d
 80108d8:	0801094d 	.word	0x0801094d
 80108dc:	0801096d 	.word	0x0801096d
 80108e0:	0801096d 	.word	0x0801096d
 80108e4:	0801096d 	.word	0x0801096d
 80108e8:	0801096d 	.word	0x0801096d
 80108ec:	0801096d 	.word	0x0801096d
 80108f0:	0801096d 	.word	0x0801096d
 80108f4:	0801096d 	.word	0x0801096d
 80108f8:	08010955 	.word	0x08010955
 80108fc:	0801096d 	.word	0x0801096d
 8010900:	0801096d 	.word	0x0801096d
 8010904:	0801096d 	.word	0x0801096d
 8010908:	0801096d 	.word	0x0801096d
 801090c:	0801096d 	.word	0x0801096d
 8010910:	0801096d 	.word	0x0801096d
 8010914:	0801096d 	.word	0x0801096d
 8010918:	0801095d 	.word	0x0801095d
 801091c:	0801096d 	.word	0x0801096d
 8010920:	0801096d 	.word	0x0801096d
 8010924:	0801096d 	.word	0x0801096d
 8010928:	0801096d 	.word	0x0801096d
 801092c:	0801096d 	.word	0x0801096d
 8010930:	0801096d 	.word	0x0801096d
 8010934:	0801096d 	.word	0x0801096d
 8010938:	08010965 	.word	0x08010965
 801093c:	2301      	movs	r3, #1
 801093e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010942:	e222      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010944:	2304      	movs	r3, #4
 8010946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801094a:	e21e      	b.n	8010d8a <UART_SetConfig+0x5a6>
 801094c:	2308      	movs	r3, #8
 801094e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010952:	e21a      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010954:	2310      	movs	r3, #16
 8010956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801095a:	e216      	b.n	8010d8a <UART_SetConfig+0x5a6>
 801095c:	2320      	movs	r3, #32
 801095e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010962:	e212      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010964:	2340      	movs	r3, #64	; 0x40
 8010966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801096a:	e20e      	b.n	8010d8a <UART_SetConfig+0x5a6>
 801096c:	2380      	movs	r3, #128	; 0x80
 801096e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010972:	e20a      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4a69      	ldr	r2, [pc, #420]	; (8010b20 <UART_SetConfig+0x33c>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d130      	bne.n	80109e0 <UART_SetConfig+0x1fc>
 801097e:	4b67      	ldr	r3, [pc, #412]	; (8010b1c <UART_SetConfig+0x338>)
 8010980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010982:	f003 0307 	and.w	r3, r3, #7
 8010986:	2b05      	cmp	r3, #5
 8010988:	d826      	bhi.n	80109d8 <UART_SetConfig+0x1f4>
 801098a:	a201      	add	r2, pc, #4	; (adr r2, 8010990 <UART_SetConfig+0x1ac>)
 801098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010990:	080109a9 	.word	0x080109a9
 8010994:	080109b1 	.word	0x080109b1
 8010998:	080109b9 	.word	0x080109b9
 801099c:	080109c1 	.word	0x080109c1
 80109a0:	080109c9 	.word	0x080109c9
 80109a4:	080109d1 	.word	0x080109d1
 80109a8:	2300      	movs	r3, #0
 80109aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ae:	e1ec      	b.n	8010d8a <UART_SetConfig+0x5a6>
 80109b0:	2304      	movs	r3, #4
 80109b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109b6:	e1e8      	b.n	8010d8a <UART_SetConfig+0x5a6>
 80109b8:	2308      	movs	r3, #8
 80109ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109be:	e1e4      	b.n	8010d8a <UART_SetConfig+0x5a6>
 80109c0:	2310      	movs	r3, #16
 80109c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109c6:	e1e0      	b.n	8010d8a <UART_SetConfig+0x5a6>
 80109c8:	2320      	movs	r3, #32
 80109ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ce:	e1dc      	b.n	8010d8a <UART_SetConfig+0x5a6>
 80109d0:	2340      	movs	r3, #64	; 0x40
 80109d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109d6:	e1d8      	b.n	8010d8a <UART_SetConfig+0x5a6>
 80109d8:	2380      	movs	r3, #128	; 0x80
 80109da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109de:	e1d4      	b.n	8010d8a <UART_SetConfig+0x5a6>
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4a4f      	ldr	r2, [pc, #316]	; (8010b24 <UART_SetConfig+0x340>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d130      	bne.n	8010a4c <UART_SetConfig+0x268>
 80109ea:	4b4c      	ldr	r3, [pc, #304]	; (8010b1c <UART_SetConfig+0x338>)
 80109ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109ee:	f003 0307 	and.w	r3, r3, #7
 80109f2:	2b05      	cmp	r3, #5
 80109f4:	d826      	bhi.n	8010a44 <UART_SetConfig+0x260>
 80109f6:	a201      	add	r2, pc, #4	; (adr r2, 80109fc <UART_SetConfig+0x218>)
 80109f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109fc:	08010a15 	.word	0x08010a15
 8010a00:	08010a1d 	.word	0x08010a1d
 8010a04:	08010a25 	.word	0x08010a25
 8010a08:	08010a2d 	.word	0x08010a2d
 8010a0c:	08010a35 	.word	0x08010a35
 8010a10:	08010a3d 	.word	0x08010a3d
 8010a14:	2300      	movs	r3, #0
 8010a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1a:	e1b6      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010a1c:	2304      	movs	r3, #4
 8010a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a22:	e1b2      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010a24:	2308      	movs	r3, #8
 8010a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2a:	e1ae      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010a2c:	2310      	movs	r3, #16
 8010a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a32:	e1aa      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010a34:	2320      	movs	r3, #32
 8010a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a3a:	e1a6      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010a3c:	2340      	movs	r3, #64	; 0x40
 8010a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a42:	e1a2      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010a44:	2380      	movs	r3, #128	; 0x80
 8010a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a4a:	e19e      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4a35      	ldr	r2, [pc, #212]	; (8010b28 <UART_SetConfig+0x344>)
 8010a52:	4293      	cmp	r3, r2
 8010a54:	d130      	bne.n	8010ab8 <UART_SetConfig+0x2d4>
 8010a56:	4b31      	ldr	r3, [pc, #196]	; (8010b1c <UART_SetConfig+0x338>)
 8010a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a5a:	f003 0307 	and.w	r3, r3, #7
 8010a5e:	2b05      	cmp	r3, #5
 8010a60:	d826      	bhi.n	8010ab0 <UART_SetConfig+0x2cc>
 8010a62:	a201      	add	r2, pc, #4	; (adr r2, 8010a68 <UART_SetConfig+0x284>)
 8010a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a68:	08010a81 	.word	0x08010a81
 8010a6c:	08010a89 	.word	0x08010a89
 8010a70:	08010a91 	.word	0x08010a91
 8010a74:	08010a99 	.word	0x08010a99
 8010a78:	08010aa1 	.word	0x08010aa1
 8010a7c:	08010aa9 	.word	0x08010aa9
 8010a80:	2300      	movs	r3, #0
 8010a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a86:	e180      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010a88:	2304      	movs	r3, #4
 8010a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a8e:	e17c      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010a90:	2308      	movs	r3, #8
 8010a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a96:	e178      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010a98:	2310      	movs	r3, #16
 8010a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a9e:	e174      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010aa0:	2320      	movs	r3, #32
 8010aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aa6:	e170      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010aa8:	2340      	movs	r3, #64	; 0x40
 8010aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aae:	e16c      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010ab0:	2380      	movs	r3, #128	; 0x80
 8010ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ab6:	e168      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4a1b      	ldr	r2, [pc, #108]	; (8010b2c <UART_SetConfig+0x348>)
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d142      	bne.n	8010b48 <UART_SetConfig+0x364>
 8010ac2:	4b16      	ldr	r3, [pc, #88]	; (8010b1c <UART_SetConfig+0x338>)
 8010ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ac6:	f003 0307 	and.w	r3, r3, #7
 8010aca:	2b05      	cmp	r3, #5
 8010acc:	d838      	bhi.n	8010b40 <UART_SetConfig+0x35c>
 8010ace:	a201      	add	r2, pc, #4	; (adr r2, 8010ad4 <UART_SetConfig+0x2f0>)
 8010ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ad4:	08010aed 	.word	0x08010aed
 8010ad8:	08010af5 	.word	0x08010af5
 8010adc:	08010afd 	.word	0x08010afd
 8010ae0:	08010b05 	.word	0x08010b05
 8010ae4:	08010b31 	.word	0x08010b31
 8010ae8:	08010b39 	.word	0x08010b39
 8010aec:	2300      	movs	r3, #0
 8010aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010af2:	e14a      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010af4:	2304      	movs	r3, #4
 8010af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010afa:	e146      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010afc:	2308      	movs	r3, #8
 8010afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b02:	e142      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010b04:	2310      	movs	r3, #16
 8010b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0a:	e13e      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010b0c:	cfff69f3 	.word	0xcfff69f3
 8010b10:	58000c00 	.word	0x58000c00
 8010b14:	11fff4ff 	.word	0x11fff4ff
 8010b18:	40011000 	.word	0x40011000
 8010b1c:	58024400 	.word	0x58024400
 8010b20:	40004400 	.word	0x40004400
 8010b24:	40004800 	.word	0x40004800
 8010b28:	40004c00 	.word	0x40004c00
 8010b2c:	40005000 	.word	0x40005000
 8010b30:	2320      	movs	r3, #32
 8010b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b36:	e128      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010b38:	2340      	movs	r3, #64	; 0x40
 8010b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b3e:	e124      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010b40:	2380      	movs	r3, #128	; 0x80
 8010b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b46:	e120      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	4acb      	ldr	r2, [pc, #812]	; (8010e7c <UART_SetConfig+0x698>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d176      	bne.n	8010c40 <UART_SetConfig+0x45c>
 8010b52:	4bcb      	ldr	r3, [pc, #812]	; (8010e80 <UART_SetConfig+0x69c>)
 8010b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010b5a:	2b28      	cmp	r3, #40	; 0x28
 8010b5c:	d86c      	bhi.n	8010c38 <UART_SetConfig+0x454>
 8010b5e:	a201      	add	r2, pc, #4	; (adr r2, 8010b64 <UART_SetConfig+0x380>)
 8010b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b64:	08010c09 	.word	0x08010c09
 8010b68:	08010c39 	.word	0x08010c39
 8010b6c:	08010c39 	.word	0x08010c39
 8010b70:	08010c39 	.word	0x08010c39
 8010b74:	08010c39 	.word	0x08010c39
 8010b78:	08010c39 	.word	0x08010c39
 8010b7c:	08010c39 	.word	0x08010c39
 8010b80:	08010c39 	.word	0x08010c39
 8010b84:	08010c11 	.word	0x08010c11
 8010b88:	08010c39 	.word	0x08010c39
 8010b8c:	08010c39 	.word	0x08010c39
 8010b90:	08010c39 	.word	0x08010c39
 8010b94:	08010c39 	.word	0x08010c39
 8010b98:	08010c39 	.word	0x08010c39
 8010b9c:	08010c39 	.word	0x08010c39
 8010ba0:	08010c39 	.word	0x08010c39
 8010ba4:	08010c19 	.word	0x08010c19
 8010ba8:	08010c39 	.word	0x08010c39
 8010bac:	08010c39 	.word	0x08010c39
 8010bb0:	08010c39 	.word	0x08010c39
 8010bb4:	08010c39 	.word	0x08010c39
 8010bb8:	08010c39 	.word	0x08010c39
 8010bbc:	08010c39 	.word	0x08010c39
 8010bc0:	08010c39 	.word	0x08010c39
 8010bc4:	08010c21 	.word	0x08010c21
 8010bc8:	08010c39 	.word	0x08010c39
 8010bcc:	08010c39 	.word	0x08010c39
 8010bd0:	08010c39 	.word	0x08010c39
 8010bd4:	08010c39 	.word	0x08010c39
 8010bd8:	08010c39 	.word	0x08010c39
 8010bdc:	08010c39 	.word	0x08010c39
 8010be0:	08010c39 	.word	0x08010c39
 8010be4:	08010c29 	.word	0x08010c29
 8010be8:	08010c39 	.word	0x08010c39
 8010bec:	08010c39 	.word	0x08010c39
 8010bf0:	08010c39 	.word	0x08010c39
 8010bf4:	08010c39 	.word	0x08010c39
 8010bf8:	08010c39 	.word	0x08010c39
 8010bfc:	08010c39 	.word	0x08010c39
 8010c00:	08010c39 	.word	0x08010c39
 8010c04:	08010c31 	.word	0x08010c31
 8010c08:	2301      	movs	r3, #1
 8010c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0e:	e0bc      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010c10:	2304      	movs	r3, #4
 8010c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c16:	e0b8      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010c18:	2308      	movs	r3, #8
 8010c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c1e:	e0b4      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010c20:	2310      	movs	r3, #16
 8010c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c26:	e0b0      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010c28:	2320      	movs	r3, #32
 8010c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c2e:	e0ac      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010c30:	2340      	movs	r3, #64	; 0x40
 8010c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c36:	e0a8      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010c38:	2380      	movs	r3, #128	; 0x80
 8010c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c3e:	e0a4      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	4a8f      	ldr	r2, [pc, #572]	; (8010e84 <UART_SetConfig+0x6a0>)
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d130      	bne.n	8010cac <UART_SetConfig+0x4c8>
 8010c4a:	4b8d      	ldr	r3, [pc, #564]	; (8010e80 <UART_SetConfig+0x69c>)
 8010c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c4e:	f003 0307 	and.w	r3, r3, #7
 8010c52:	2b05      	cmp	r3, #5
 8010c54:	d826      	bhi.n	8010ca4 <UART_SetConfig+0x4c0>
 8010c56:	a201      	add	r2, pc, #4	; (adr r2, 8010c5c <UART_SetConfig+0x478>)
 8010c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c5c:	08010c75 	.word	0x08010c75
 8010c60:	08010c7d 	.word	0x08010c7d
 8010c64:	08010c85 	.word	0x08010c85
 8010c68:	08010c8d 	.word	0x08010c8d
 8010c6c:	08010c95 	.word	0x08010c95
 8010c70:	08010c9d 	.word	0x08010c9d
 8010c74:	2300      	movs	r3, #0
 8010c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7a:	e086      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010c7c:	2304      	movs	r3, #4
 8010c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c82:	e082      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010c84:	2308      	movs	r3, #8
 8010c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8a:	e07e      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010c8c:	2310      	movs	r3, #16
 8010c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c92:	e07a      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010c94:	2320      	movs	r3, #32
 8010c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9a:	e076      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010c9c:	2340      	movs	r3, #64	; 0x40
 8010c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca2:	e072      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010ca4:	2380      	movs	r3, #128	; 0x80
 8010ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010caa:	e06e      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	4a75      	ldr	r2, [pc, #468]	; (8010e88 <UART_SetConfig+0x6a4>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d130      	bne.n	8010d18 <UART_SetConfig+0x534>
 8010cb6:	4b72      	ldr	r3, [pc, #456]	; (8010e80 <UART_SetConfig+0x69c>)
 8010cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cba:	f003 0307 	and.w	r3, r3, #7
 8010cbe:	2b05      	cmp	r3, #5
 8010cc0:	d826      	bhi.n	8010d10 <UART_SetConfig+0x52c>
 8010cc2:	a201      	add	r2, pc, #4	; (adr r2, 8010cc8 <UART_SetConfig+0x4e4>)
 8010cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc8:	08010ce1 	.word	0x08010ce1
 8010ccc:	08010ce9 	.word	0x08010ce9
 8010cd0:	08010cf1 	.word	0x08010cf1
 8010cd4:	08010cf9 	.word	0x08010cf9
 8010cd8:	08010d01 	.word	0x08010d01
 8010cdc:	08010d09 	.word	0x08010d09
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce6:	e050      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010ce8:	2304      	movs	r3, #4
 8010cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cee:	e04c      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010cf0:	2308      	movs	r3, #8
 8010cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf6:	e048      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010cf8:	2310      	movs	r3, #16
 8010cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfe:	e044      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010d00:	2320      	movs	r3, #32
 8010d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d06:	e040      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010d08:	2340      	movs	r3, #64	; 0x40
 8010d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0e:	e03c      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010d10:	2380      	movs	r3, #128	; 0x80
 8010d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d16:	e038      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4a5b      	ldr	r2, [pc, #364]	; (8010e8c <UART_SetConfig+0x6a8>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d130      	bne.n	8010d84 <UART_SetConfig+0x5a0>
 8010d22:	4b57      	ldr	r3, [pc, #348]	; (8010e80 <UART_SetConfig+0x69c>)
 8010d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d26:	f003 0307 	and.w	r3, r3, #7
 8010d2a:	2b05      	cmp	r3, #5
 8010d2c:	d826      	bhi.n	8010d7c <UART_SetConfig+0x598>
 8010d2e:	a201      	add	r2, pc, #4	; (adr r2, 8010d34 <UART_SetConfig+0x550>)
 8010d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d34:	08010d4d 	.word	0x08010d4d
 8010d38:	08010d55 	.word	0x08010d55
 8010d3c:	08010d5d 	.word	0x08010d5d
 8010d40:	08010d65 	.word	0x08010d65
 8010d44:	08010d6d 	.word	0x08010d6d
 8010d48:	08010d75 	.word	0x08010d75
 8010d4c:	2302      	movs	r3, #2
 8010d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d52:	e01a      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010d54:	2304      	movs	r3, #4
 8010d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d5a:	e016      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010d5c:	2308      	movs	r3, #8
 8010d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d62:	e012      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010d64:	2310      	movs	r3, #16
 8010d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6a:	e00e      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010d6c:	2320      	movs	r3, #32
 8010d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d72:	e00a      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010d74:	2340      	movs	r3, #64	; 0x40
 8010d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7a:	e006      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010d7c:	2380      	movs	r3, #128	; 0x80
 8010d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d82:	e002      	b.n	8010d8a <UART_SetConfig+0x5a6>
 8010d84:	2380      	movs	r3, #128	; 0x80
 8010d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	4a3f      	ldr	r2, [pc, #252]	; (8010e8c <UART_SetConfig+0x6a8>)
 8010d90:	4293      	cmp	r3, r2
 8010d92:	f040 80f8 	bne.w	8010f86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010d96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010d9a:	2b20      	cmp	r3, #32
 8010d9c:	dc46      	bgt.n	8010e2c <UART_SetConfig+0x648>
 8010d9e:	2b02      	cmp	r3, #2
 8010da0:	f2c0 8082 	blt.w	8010ea8 <UART_SetConfig+0x6c4>
 8010da4:	3b02      	subs	r3, #2
 8010da6:	2b1e      	cmp	r3, #30
 8010da8:	d87e      	bhi.n	8010ea8 <UART_SetConfig+0x6c4>
 8010daa:	a201      	add	r2, pc, #4	; (adr r2, 8010db0 <UART_SetConfig+0x5cc>)
 8010dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010db0:	08010e33 	.word	0x08010e33
 8010db4:	08010ea9 	.word	0x08010ea9
 8010db8:	08010e3b 	.word	0x08010e3b
 8010dbc:	08010ea9 	.word	0x08010ea9
 8010dc0:	08010ea9 	.word	0x08010ea9
 8010dc4:	08010ea9 	.word	0x08010ea9
 8010dc8:	08010e4b 	.word	0x08010e4b
 8010dcc:	08010ea9 	.word	0x08010ea9
 8010dd0:	08010ea9 	.word	0x08010ea9
 8010dd4:	08010ea9 	.word	0x08010ea9
 8010dd8:	08010ea9 	.word	0x08010ea9
 8010ddc:	08010ea9 	.word	0x08010ea9
 8010de0:	08010ea9 	.word	0x08010ea9
 8010de4:	08010ea9 	.word	0x08010ea9
 8010de8:	08010e5b 	.word	0x08010e5b
 8010dec:	08010ea9 	.word	0x08010ea9
 8010df0:	08010ea9 	.word	0x08010ea9
 8010df4:	08010ea9 	.word	0x08010ea9
 8010df8:	08010ea9 	.word	0x08010ea9
 8010dfc:	08010ea9 	.word	0x08010ea9
 8010e00:	08010ea9 	.word	0x08010ea9
 8010e04:	08010ea9 	.word	0x08010ea9
 8010e08:	08010ea9 	.word	0x08010ea9
 8010e0c:	08010ea9 	.word	0x08010ea9
 8010e10:	08010ea9 	.word	0x08010ea9
 8010e14:	08010ea9 	.word	0x08010ea9
 8010e18:	08010ea9 	.word	0x08010ea9
 8010e1c:	08010ea9 	.word	0x08010ea9
 8010e20:	08010ea9 	.word	0x08010ea9
 8010e24:	08010ea9 	.word	0x08010ea9
 8010e28:	08010e9b 	.word	0x08010e9b
 8010e2c:	2b40      	cmp	r3, #64	; 0x40
 8010e2e:	d037      	beq.n	8010ea0 <UART_SetConfig+0x6bc>
 8010e30:	e03a      	b.n	8010ea8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010e32:	f7fb fd9b 	bl	800c96c <HAL_RCCEx_GetD3PCLK1Freq>
 8010e36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010e38:	e03c      	b.n	8010eb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7fb fdaa 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e48:	e034      	b.n	8010eb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e4a:	f107 0318 	add.w	r3, r7, #24
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7fb fef6 	bl	800cc40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010e54:	69fb      	ldr	r3, [r7, #28]
 8010e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e58:	e02c      	b.n	8010eb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e5a:	4b09      	ldr	r3, [pc, #36]	; (8010e80 <UART_SetConfig+0x69c>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f003 0320 	and.w	r3, r3, #32
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d016      	beq.n	8010e94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010e66:	4b06      	ldr	r3, [pc, #24]	; (8010e80 <UART_SetConfig+0x69c>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	08db      	lsrs	r3, r3, #3
 8010e6c:	f003 0303 	and.w	r3, r3, #3
 8010e70:	4a07      	ldr	r2, [pc, #28]	; (8010e90 <UART_SetConfig+0x6ac>)
 8010e72:	fa22 f303 	lsr.w	r3, r2, r3
 8010e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010e78:	e01c      	b.n	8010eb4 <UART_SetConfig+0x6d0>
 8010e7a:	bf00      	nop
 8010e7c:	40011400 	.word	0x40011400
 8010e80:	58024400 	.word	0x58024400
 8010e84:	40007800 	.word	0x40007800
 8010e88:	40007c00 	.word	0x40007c00
 8010e8c:	58000c00 	.word	0x58000c00
 8010e90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010e94:	4b9d      	ldr	r3, [pc, #628]	; (801110c <UART_SetConfig+0x928>)
 8010e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e98:	e00c      	b.n	8010eb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010e9a:	4b9d      	ldr	r3, [pc, #628]	; (8011110 <UART_SetConfig+0x92c>)
 8010e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e9e:	e009      	b.n	8010eb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ea6:	e005      	b.n	8010eb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010eac:	2301      	movs	r3, #1
 8010eae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010eb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	f000 81de 	beq.w	8011278 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ec0:	4a94      	ldr	r2, [pc, #592]	; (8011114 <UART_SetConfig+0x930>)
 8010ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ece:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	685a      	ldr	r2, [r3, #4]
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	005b      	lsls	r3, r3, #1
 8010ed8:	4413      	add	r3, r2
 8010eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d305      	bcc.n	8010eec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d903      	bls.n	8010ef4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010eec:	2301      	movs	r3, #1
 8010eee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010ef2:	e1c1      	b.n	8011278 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	60bb      	str	r3, [r7, #8]
 8010efa:	60fa      	str	r2, [r7, #12]
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f00:	4a84      	ldr	r2, [pc, #528]	; (8011114 <UART_SetConfig+0x930>)
 8010f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	2200      	movs	r2, #0
 8010f0a:	603b      	str	r3, [r7, #0]
 8010f0c:	607a      	str	r2, [r7, #4]
 8010f0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010f16:	f7ef f9e3 	bl	80002e0 <__aeabi_uldivmod>
 8010f1a:	4602      	mov	r2, r0
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	4610      	mov	r0, r2
 8010f20:	4619      	mov	r1, r3
 8010f22:	f04f 0200 	mov.w	r2, #0
 8010f26:	f04f 0300 	mov.w	r3, #0
 8010f2a:	020b      	lsls	r3, r1, #8
 8010f2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010f30:	0202      	lsls	r2, r0, #8
 8010f32:	6979      	ldr	r1, [r7, #20]
 8010f34:	6849      	ldr	r1, [r1, #4]
 8010f36:	0849      	lsrs	r1, r1, #1
 8010f38:	2000      	movs	r0, #0
 8010f3a:	460c      	mov	r4, r1
 8010f3c:	4605      	mov	r5, r0
 8010f3e:	eb12 0804 	adds.w	r8, r2, r4
 8010f42:	eb43 0905 	adc.w	r9, r3, r5
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	685b      	ldr	r3, [r3, #4]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	469a      	mov	sl, r3
 8010f4e:	4693      	mov	fp, r2
 8010f50:	4652      	mov	r2, sl
 8010f52:	465b      	mov	r3, fp
 8010f54:	4640      	mov	r0, r8
 8010f56:	4649      	mov	r1, r9
 8010f58:	f7ef f9c2 	bl	80002e0 <__aeabi_uldivmod>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	460b      	mov	r3, r1
 8010f60:	4613      	mov	r3, r2
 8010f62:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010f6a:	d308      	bcc.n	8010f7e <UART_SetConfig+0x79a>
 8010f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010f72:	d204      	bcs.n	8010f7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f7a:	60da      	str	r2, [r3, #12]
 8010f7c:	e17c      	b.n	8011278 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010f7e:	2301      	movs	r3, #1
 8010f80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010f84:	e178      	b.n	8011278 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	69db      	ldr	r3, [r3, #28]
 8010f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f8e:	f040 80c5 	bne.w	801111c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010f92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f96:	2b20      	cmp	r3, #32
 8010f98:	dc48      	bgt.n	801102c <UART_SetConfig+0x848>
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	db7b      	blt.n	8011096 <UART_SetConfig+0x8b2>
 8010f9e:	2b20      	cmp	r3, #32
 8010fa0:	d879      	bhi.n	8011096 <UART_SetConfig+0x8b2>
 8010fa2:	a201      	add	r2, pc, #4	; (adr r2, 8010fa8 <UART_SetConfig+0x7c4>)
 8010fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fa8:	08011033 	.word	0x08011033
 8010fac:	0801103b 	.word	0x0801103b
 8010fb0:	08011097 	.word	0x08011097
 8010fb4:	08011097 	.word	0x08011097
 8010fb8:	08011043 	.word	0x08011043
 8010fbc:	08011097 	.word	0x08011097
 8010fc0:	08011097 	.word	0x08011097
 8010fc4:	08011097 	.word	0x08011097
 8010fc8:	08011053 	.word	0x08011053
 8010fcc:	08011097 	.word	0x08011097
 8010fd0:	08011097 	.word	0x08011097
 8010fd4:	08011097 	.word	0x08011097
 8010fd8:	08011097 	.word	0x08011097
 8010fdc:	08011097 	.word	0x08011097
 8010fe0:	08011097 	.word	0x08011097
 8010fe4:	08011097 	.word	0x08011097
 8010fe8:	08011063 	.word	0x08011063
 8010fec:	08011097 	.word	0x08011097
 8010ff0:	08011097 	.word	0x08011097
 8010ff4:	08011097 	.word	0x08011097
 8010ff8:	08011097 	.word	0x08011097
 8010ffc:	08011097 	.word	0x08011097
 8011000:	08011097 	.word	0x08011097
 8011004:	08011097 	.word	0x08011097
 8011008:	08011097 	.word	0x08011097
 801100c:	08011097 	.word	0x08011097
 8011010:	08011097 	.word	0x08011097
 8011014:	08011097 	.word	0x08011097
 8011018:	08011097 	.word	0x08011097
 801101c:	08011097 	.word	0x08011097
 8011020:	08011097 	.word	0x08011097
 8011024:	08011097 	.word	0x08011097
 8011028:	08011089 	.word	0x08011089
 801102c:	2b40      	cmp	r3, #64	; 0x40
 801102e:	d02e      	beq.n	801108e <UART_SetConfig+0x8aa>
 8011030:	e031      	b.n	8011096 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011032:	f7f9 fca3 	bl	800a97c <HAL_RCC_GetPCLK1Freq>
 8011036:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011038:	e033      	b.n	80110a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801103a:	f7f9 fcb5 	bl	800a9a8 <HAL_RCC_GetPCLK2Freq>
 801103e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011040:	e02f      	b.n	80110a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011046:	4618      	mov	r0, r3
 8011048:	f7fb fca6 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011050:	e027      	b.n	80110a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011052:	f107 0318 	add.w	r3, r7, #24
 8011056:	4618      	mov	r0, r3
 8011058:	f7fb fdf2 	bl	800cc40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801105c:	69fb      	ldr	r3, [r7, #28]
 801105e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011060:	e01f      	b.n	80110a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011062:	4b2d      	ldr	r3, [pc, #180]	; (8011118 <UART_SetConfig+0x934>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f003 0320 	and.w	r3, r3, #32
 801106a:	2b00      	cmp	r3, #0
 801106c:	d009      	beq.n	8011082 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801106e:	4b2a      	ldr	r3, [pc, #168]	; (8011118 <UART_SetConfig+0x934>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	08db      	lsrs	r3, r3, #3
 8011074:	f003 0303 	and.w	r3, r3, #3
 8011078:	4a24      	ldr	r2, [pc, #144]	; (801110c <UART_SetConfig+0x928>)
 801107a:	fa22 f303 	lsr.w	r3, r2, r3
 801107e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011080:	e00f      	b.n	80110a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011082:	4b22      	ldr	r3, [pc, #136]	; (801110c <UART_SetConfig+0x928>)
 8011084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011086:	e00c      	b.n	80110a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011088:	4b21      	ldr	r3, [pc, #132]	; (8011110 <UART_SetConfig+0x92c>)
 801108a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801108c:	e009      	b.n	80110a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801108e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011094:	e005      	b.n	80110a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011096:	2300      	movs	r3, #0
 8011098:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801109a:	2301      	movs	r3, #1
 801109c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80110a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80110a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f000 80e7 	beq.w	8011278 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110ae:	4a19      	ldr	r2, [pc, #100]	; (8011114 <UART_SetConfig+0x930>)
 80110b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110b4:	461a      	mov	r2, r3
 80110b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80110bc:	005a      	lsls	r2, r3, #1
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	085b      	lsrs	r3, r3, #1
 80110c4:	441a      	add	r2, r3
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80110ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80110d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d2:	2b0f      	cmp	r3, #15
 80110d4:	d916      	bls.n	8011104 <UART_SetConfig+0x920>
 80110d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110dc:	d212      	bcs.n	8011104 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80110de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	f023 030f 	bic.w	r3, r3, #15
 80110e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80110e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ea:	085b      	lsrs	r3, r3, #1
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	f003 0307 	and.w	r3, r3, #7
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80110f6:	4313      	orrs	r3, r2
 80110f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011100:	60da      	str	r2, [r3, #12]
 8011102:	e0b9      	b.n	8011278 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011104:	2301      	movs	r3, #1
 8011106:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801110a:	e0b5      	b.n	8011278 <UART_SetConfig+0xa94>
 801110c:	03d09000 	.word	0x03d09000
 8011110:	003d0900 	.word	0x003d0900
 8011114:	0801706c 	.word	0x0801706c
 8011118:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801111c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011120:	2b20      	cmp	r3, #32
 8011122:	dc49      	bgt.n	80111b8 <UART_SetConfig+0x9d4>
 8011124:	2b00      	cmp	r3, #0
 8011126:	db7c      	blt.n	8011222 <UART_SetConfig+0xa3e>
 8011128:	2b20      	cmp	r3, #32
 801112a:	d87a      	bhi.n	8011222 <UART_SetConfig+0xa3e>
 801112c:	a201      	add	r2, pc, #4	; (adr r2, 8011134 <UART_SetConfig+0x950>)
 801112e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011132:	bf00      	nop
 8011134:	080111bf 	.word	0x080111bf
 8011138:	080111c7 	.word	0x080111c7
 801113c:	08011223 	.word	0x08011223
 8011140:	08011223 	.word	0x08011223
 8011144:	080111cf 	.word	0x080111cf
 8011148:	08011223 	.word	0x08011223
 801114c:	08011223 	.word	0x08011223
 8011150:	08011223 	.word	0x08011223
 8011154:	080111df 	.word	0x080111df
 8011158:	08011223 	.word	0x08011223
 801115c:	08011223 	.word	0x08011223
 8011160:	08011223 	.word	0x08011223
 8011164:	08011223 	.word	0x08011223
 8011168:	08011223 	.word	0x08011223
 801116c:	08011223 	.word	0x08011223
 8011170:	08011223 	.word	0x08011223
 8011174:	080111ef 	.word	0x080111ef
 8011178:	08011223 	.word	0x08011223
 801117c:	08011223 	.word	0x08011223
 8011180:	08011223 	.word	0x08011223
 8011184:	08011223 	.word	0x08011223
 8011188:	08011223 	.word	0x08011223
 801118c:	08011223 	.word	0x08011223
 8011190:	08011223 	.word	0x08011223
 8011194:	08011223 	.word	0x08011223
 8011198:	08011223 	.word	0x08011223
 801119c:	08011223 	.word	0x08011223
 80111a0:	08011223 	.word	0x08011223
 80111a4:	08011223 	.word	0x08011223
 80111a8:	08011223 	.word	0x08011223
 80111ac:	08011223 	.word	0x08011223
 80111b0:	08011223 	.word	0x08011223
 80111b4:	08011215 	.word	0x08011215
 80111b8:	2b40      	cmp	r3, #64	; 0x40
 80111ba:	d02e      	beq.n	801121a <UART_SetConfig+0xa36>
 80111bc:	e031      	b.n	8011222 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80111be:	f7f9 fbdd 	bl	800a97c <HAL_RCC_GetPCLK1Freq>
 80111c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80111c4:	e033      	b.n	801122e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80111c6:	f7f9 fbef 	bl	800a9a8 <HAL_RCC_GetPCLK2Freq>
 80111ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80111cc:	e02f      	b.n	801122e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80111ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fb fbe0 	bl	800c998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80111d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111dc:	e027      	b.n	801122e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80111de:	f107 0318 	add.w	r3, r7, #24
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7fb fd2c 	bl	800cc40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111ec:	e01f      	b.n	801122e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80111ee:	4b2d      	ldr	r3, [pc, #180]	; (80112a4 <UART_SetConfig+0xac0>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	f003 0320 	and.w	r3, r3, #32
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d009      	beq.n	801120e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80111fa:	4b2a      	ldr	r3, [pc, #168]	; (80112a4 <UART_SetConfig+0xac0>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	08db      	lsrs	r3, r3, #3
 8011200:	f003 0303 	and.w	r3, r3, #3
 8011204:	4a28      	ldr	r2, [pc, #160]	; (80112a8 <UART_SetConfig+0xac4>)
 8011206:	fa22 f303 	lsr.w	r3, r2, r3
 801120a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801120c:	e00f      	b.n	801122e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801120e:	4b26      	ldr	r3, [pc, #152]	; (80112a8 <UART_SetConfig+0xac4>)
 8011210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011212:	e00c      	b.n	801122e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011214:	4b25      	ldr	r3, [pc, #148]	; (80112ac <UART_SetConfig+0xac8>)
 8011216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011218:	e009      	b.n	801122e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801121a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801121e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011220:	e005      	b.n	801122e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011222:	2300      	movs	r3, #0
 8011224:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011226:	2301      	movs	r3, #1
 8011228:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801122c:	bf00      	nop
    }

    if (pclk != 0U)
 801122e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011230:	2b00      	cmp	r3, #0
 8011232:	d021      	beq.n	8011278 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011238:	4a1d      	ldr	r2, [pc, #116]	; (80112b0 <UART_SetConfig+0xacc>)
 801123a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801123e:	461a      	mov	r2, r3
 8011240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011242:	fbb3 f2f2 	udiv	r2, r3, r2
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	685b      	ldr	r3, [r3, #4]
 801124a:	085b      	lsrs	r3, r3, #1
 801124c:	441a      	add	r2, r3
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	fbb2 f3f3 	udiv	r3, r2, r3
 8011256:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125a:	2b0f      	cmp	r3, #15
 801125c:	d909      	bls.n	8011272 <UART_SetConfig+0xa8e>
 801125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011264:	d205      	bcs.n	8011272 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011268:	b29a      	uxth	r2, r3
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	60da      	str	r2, [r3, #12]
 8011270:	e002      	b.n	8011278 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011272:	2301      	movs	r3, #1
 8011274:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	2201      	movs	r2, #1
 801127c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	2201      	movs	r2, #1
 8011284:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	2200      	movs	r2, #0
 801128c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	2200      	movs	r2, #0
 8011292:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011294:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011298:	4618      	mov	r0, r3
 801129a:	3748      	adds	r7, #72	; 0x48
 801129c:	46bd      	mov	sp, r7
 801129e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80112a2:	bf00      	nop
 80112a4:	58024400 	.word	0x58024400
 80112a8:	03d09000 	.word	0x03d09000
 80112ac:	003d0900 	.word	0x003d0900
 80112b0:	0801706c 	.word	0x0801706c

080112b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80112b4:	b480      	push	{r7}
 80112b6:	b083      	sub	sp, #12
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c0:	f003 0308 	and.w	r3, r3, #8
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d00a      	beq.n	80112de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	685b      	ldr	r3, [r3, #4]
 80112ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	430a      	orrs	r2, r1
 80112dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112e2:	f003 0301 	and.w	r3, r3, #1
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d00a      	beq.n	8011300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	430a      	orrs	r2, r1
 80112fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011304:	f003 0302 	and.w	r3, r3, #2
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00a      	beq.n	8011322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	430a      	orrs	r2, r1
 8011320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011326:	f003 0304 	and.w	r3, r3, #4
 801132a:	2b00      	cmp	r3, #0
 801132c:	d00a      	beq.n	8011344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	430a      	orrs	r2, r1
 8011342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011348:	f003 0310 	and.w	r3, r3, #16
 801134c:	2b00      	cmp	r3, #0
 801134e:	d00a      	beq.n	8011366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	689b      	ldr	r3, [r3, #8]
 8011356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	430a      	orrs	r2, r1
 8011364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801136a:	f003 0320 	and.w	r3, r3, #32
 801136e:	2b00      	cmp	r3, #0
 8011370:	d00a      	beq.n	8011388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	689b      	ldr	r3, [r3, #8]
 8011378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	430a      	orrs	r2, r1
 8011386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801138c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011390:	2b00      	cmp	r3, #0
 8011392:	d01a      	beq.n	80113ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	430a      	orrs	r2, r1
 80113a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80113b2:	d10a      	bne.n	80113ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	430a      	orrs	r2, r1
 80113c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d00a      	beq.n	80113ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	430a      	orrs	r2, r1
 80113ea:	605a      	str	r2, [r3, #4]
  }
}
 80113ec:	bf00      	nop
 80113ee:	370c      	adds	r7, #12
 80113f0:	46bd      	mov	sp, r7
 80113f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f6:	4770      	bx	lr

080113f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b098      	sub	sp, #96	; 0x60
 80113fc:	af02      	add	r7, sp, #8
 80113fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2200      	movs	r2, #0
 8011404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011408:	f7f2 fb72 	bl	8003af0 <HAL_GetTick>
 801140c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f003 0308 	and.w	r3, r3, #8
 8011418:	2b08      	cmp	r3, #8
 801141a:	d12f      	bne.n	801147c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801141c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011420:	9300      	str	r3, [sp, #0]
 8011422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011424:	2200      	movs	r2, #0
 8011426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f000 f88e 	bl	801154c <UART_WaitOnFlagUntilTimeout>
 8011430:	4603      	mov	r3, r0
 8011432:	2b00      	cmp	r3, #0
 8011434:	d022      	beq.n	801147c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801143c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801143e:	e853 3f00 	ldrex	r3, [r3]
 8011442:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801144a:	653b      	str	r3, [r7, #80]	; 0x50
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	461a      	mov	r2, r3
 8011452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011454:	647b      	str	r3, [r7, #68]	; 0x44
 8011456:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801145a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801145c:	e841 2300 	strex	r3, r2, [r1]
 8011460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011464:	2b00      	cmp	r3, #0
 8011466:	d1e6      	bne.n	8011436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2220      	movs	r2, #32
 801146c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2200      	movs	r2, #0
 8011474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011478:	2303      	movs	r3, #3
 801147a:	e063      	b.n	8011544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	f003 0304 	and.w	r3, r3, #4
 8011486:	2b04      	cmp	r3, #4
 8011488:	d149      	bne.n	801151e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801148a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801148e:	9300      	str	r3, [sp, #0]
 8011490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011492:	2200      	movs	r2, #0
 8011494:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f000 f857 	bl	801154c <UART_WaitOnFlagUntilTimeout>
 801149e:	4603      	mov	r3, r0
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d03c      	beq.n	801151e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ac:	e853 3f00 	ldrex	r3, [r3]
 80114b0:	623b      	str	r3, [r7, #32]
   return(result);
 80114b2:	6a3b      	ldr	r3, [r7, #32]
 80114b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80114b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	461a      	mov	r2, r3
 80114c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114c2:	633b      	str	r3, [r7, #48]	; 0x30
 80114c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80114c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114ca:	e841 2300 	strex	r3, r2, [r1]
 80114ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80114d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d1e6      	bne.n	80114a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	3308      	adds	r3, #8
 80114dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	e853 3f00 	ldrex	r3, [r3]
 80114e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	f023 0301 	bic.w	r3, r3, #1
 80114ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	3308      	adds	r3, #8
 80114f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114f6:	61fa      	str	r2, [r7, #28]
 80114f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114fa:	69b9      	ldr	r1, [r7, #24]
 80114fc:	69fa      	ldr	r2, [r7, #28]
 80114fe:	e841 2300 	strex	r3, r2, [r1]
 8011502:	617b      	str	r3, [r7, #20]
   return(result);
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d1e5      	bne.n	80114d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2220      	movs	r2, #32
 801150e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2200      	movs	r2, #0
 8011516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801151a:	2303      	movs	r3, #3
 801151c:	e012      	b.n	8011544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2220      	movs	r2, #32
 8011522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2220      	movs	r2, #32
 801152a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2200      	movs	r2, #0
 8011532:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2200      	movs	r2, #0
 801153e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011542:	2300      	movs	r3, #0
}
 8011544:	4618      	mov	r0, r3
 8011546:	3758      	adds	r7, #88	; 0x58
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}

0801154c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b084      	sub	sp, #16
 8011550:	af00      	add	r7, sp, #0
 8011552:	60f8      	str	r0, [r7, #12]
 8011554:	60b9      	str	r1, [r7, #8]
 8011556:	603b      	str	r3, [r7, #0]
 8011558:	4613      	mov	r3, r2
 801155a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801155c:	e04f      	b.n	80115fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011564:	d04b      	beq.n	80115fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011566:	f7f2 fac3 	bl	8003af0 <HAL_GetTick>
 801156a:	4602      	mov	r2, r0
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	1ad3      	subs	r3, r2, r3
 8011570:	69ba      	ldr	r2, [r7, #24]
 8011572:	429a      	cmp	r2, r3
 8011574:	d302      	bcc.n	801157c <UART_WaitOnFlagUntilTimeout+0x30>
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d101      	bne.n	8011580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801157c:	2303      	movs	r3, #3
 801157e:	e04e      	b.n	801161e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	f003 0304 	and.w	r3, r3, #4
 801158a:	2b00      	cmp	r3, #0
 801158c:	d037      	beq.n	80115fe <UART_WaitOnFlagUntilTimeout+0xb2>
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	2b80      	cmp	r3, #128	; 0x80
 8011592:	d034      	beq.n	80115fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	2b40      	cmp	r3, #64	; 0x40
 8011598:	d031      	beq.n	80115fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	69db      	ldr	r3, [r3, #28]
 80115a0:	f003 0308 	and.w	r3, r3, #8
 80115a4:	2b08      	cmp	r3, #8
 80115a6:	d110      	bne.n	80115ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	2208      	movs	r2, #8
 80115ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80115b0:	68f8      	ldr	r0, [r7, #12]
 80115b2:	f000 f99d 	bl	80118f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	2208      	movs	r2, #8
 80115ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	2200      	movs	r2, #0
 80115c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80115c6:	2301      	movs	r3, #1
 80115c8:	e029      	b.n	801161e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	69db      	ldr	r3, [r3, #28]
 80115d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80115d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80115d8:	d111      	bne.n	80115fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80115e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80115e4:	68f8      	ldr	r0, [r7, #12]
 80115e6:	f000 f983 	bl	80118f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	2220      	movs	r2, #32
 80115ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2200      	movs	r2, #0
 80115f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80115fa:	2303      	movs	r3, #3
 80115fc:	e00f      	b.n	801161e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	69da      	ldr	r2, [r3, #28]
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	4013      	ands	r3, r2
 8011608:	68ba      	ldr	r2, [r7, #8]
 801160a:	429a      	cmp	r2, r3
 801160c:	bf0c      	ite	eq
 801160e:	2301      	moveq	r3, #1
 8011610:	2300      	movne	r3, #0
 8011612:	b2db      	uxtb	r3, r3
 8011614:	461a      	mov	r2, r3
 8011616:	79fb      	ldrb	r3, [r7, #7]
 8011618:	429a      	cmp	r2, r3
 801161a:	d0a0      	beq.n	801155e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801161c:	2300      	movs	r3, #0
}
 801161e:	4618      	mov	r0, r3
 8011620:	3710      	adds	r7, #16
 8011622:	46bd      	mov	sp, r7
 8011624:	bd80      	pop	{r7, pc}
	...

08011628 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011628:	b480      	push	{r7}
 801162a:	b0a3      	sub	sp, #140	; 0x8c
 801162c:	af00      	add	r7, sp, #0
 801162e:	60f8      	str	r0, [r7, #12]
 8011630:	60b9      	str	r1, [r7, #8]
 8011632:	4613      	mov	r3, r2
 8011634:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	68ba      	ldr	r2, [r7, #8]
 801163a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	88fa      	ldrh	r2, [r7, #6]
 8011640:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	88fa      	ldrh	r2, [r7, #6]
 8011648:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2200      	movs	r2, #0
 8011650:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	689b      	ldr	r3, [r3, #8]
 8011656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801165a:	d10e      	bne.n	801167a <UART_Start_Receive_IT+0x52>
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	691b      	ldr	r3, [r3, #16]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d105      	bne.n	8011670 <UART_Start_Receive_IT+0x48>
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f240 12ff 	movw	r2, #511	; 0x1ff
 801166a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801166e:	e02d      	b.n	80116cc <UART_Start_Receive_IT+0xa4>
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	22ff      	movs	r2, #255	; 0xff
 8011674:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011678:	e028      	b.n	80116cc <UART_Start_Receive_IT+0xa4>
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	689b      	ldr	r3, [r3, #8]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d10d      	bne.n	801169e <UART_Start_Receive_IT+0x76>
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	691b      	ldr	r3, [r3, #16]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d104      	bne.n	8011694 <UART_Start_Receive_IT+0x6c>
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	22ff      	movs	r2, #255	; 0xff
 801168e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011692:	e01b      	b.n	80116cc <UART_Start_Receive_IT+0xa4>
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	227f      	movs	r2, #127	; 0x7f
 8011698:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801169c:	e016      	b.n	80116cc <UART_Start_Receive_IT+0xa4>
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	689b      	ldr	r3, [r3, #8]
 80116a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80116a6:	d10d      	bne.n	80116c4 <UART_Start_Receive_IT+0x9c>
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	691b      	ldr	r3, [r3, #16]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d104      	bne.n	80116ba <UART_Start_Receive_IT+0x92>
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	227f      	movs	r2, #127	; 0x7f
 80116b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80116b8:	e008      	b.n	80116cc <UART_Start_Receive_IT+0xa4>
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	223f      	movs	r2, #63	; 0x3f
 80116be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80116c2:	e003      	b.n	80116cc <UART_Start_Receive_IT+0xa4>
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2200      	movs	r2, #0
 80116c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	2200      	movs	r2, #0
 80116d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2222      	movs	r2, #34	; 0x22
 80116d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	3308      	adds	r3, #8
 80116e2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80116e6:	e853 3f00 	ldrex	r3, [r3]
 80116ea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80116ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116ee:	f043 0301 	orr.w	r3, r3, #1
 80116f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	3308      	adds	r3, #8
 80116fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011700:	673a      	str	r2, [r7, #112]	; 0x70
 8011702:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011704:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011706:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011708:	e841 2300 	strex	r3, r2, [r1]
 801170c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801170e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011710:	2b00      	cmp	r3, #0
 8011712:	d1e3      	bne.n	80116dc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801171c:	d14f      	bne.n	80117be <UART_Start_Receive_IT+0x196>
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011724:	88fa      	ldrh	r2, [r7, #6]
 8011726:	429a      	cmp	r2, r3
 8011728:	d349      	bcc.n	80117be <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	689b      	ldr	r3, [r3, #8]
 801172e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011732:	d107      	bne.n	8011744 <UART_Start_Receive_IT+0x11c>
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	691b      	ldr	r3, [r3, #16]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d103      	bne.n	8011744 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	4a47      	ldr	r2, [pc, #284]	; (801185c <UART_Start_Receive_IT+0x234>)
 8011740:	675a      	str	r2, [r3, #116]	; 0x74
 8011742:	e002      	b.n	801174a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	4a46      	ldr	r2, [pc, #280]	; (8011860 <UART_Start_Receive_IT+0x238>)
 8011748:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	691b      	ldr	r3, [r3, #16]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d01a      	beq.n	8011788 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801175a:	e853 3f00 	ldrex	r3, [r3]
 801175e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011766:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	461a      	mov	r2, r3
 8011770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011774:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011776:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011778:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801177a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801177c:	e841 2300 	strex	r3, r2, [r1]
 8011780:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011784:	2b00      	cmp	r3, #0
 8011786:	d1e4      	bne.n	8011752 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	3308      	adds	r3, #8
 801178e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011792:	e853 3f00 	ldrex	r3, [r3]
 8011796:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801179e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	3308      	adds	r3, #8
 80117a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80117a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80117aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80117ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80117b0:	e841 2300 	strex	r3, r2, [r1]
 80117b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80117b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d1e5      	bne.n	8011788 <UART_Start_Receive_IT+0x160>
 80117bc:	e046      	b.n	801184c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	689b      	ldr	r3, [r3, #8]
 80117c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117c6:	d107      	bne.n	80117d8 <UART_Start_Receive_IT+0x1b0>
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	691b      	ldr	r3, [r3, #16]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d103      	bne.n	80117d8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	4a24      	ldr	r2, [pc, #144]	; (8011864 <UART_Start_Receive_IT+0x23c>)
 80117d4:	675a      	str	r2, [r3, #116]	; 0x74
 80117d6:	e002      	b.n	80117de <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	4a23      	ldr	r2, [pc, #140]	; (8011868 <UART_Start_Receive_IT+0x240>)
 80117dc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	691b      	ldr	r3, [r3, #16]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d019      	beq.n	801181a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ee:	e853 3f00 	ldrex	r3, [r3]
 80117f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80117f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80117fa:	677b      	str	r3, [r7, #116]	; 0x74
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	461a      	mov	r2, r3
 8011802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011804:	637b      	str	r3, [r7, #52]	; 0x34
 8011806:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011808:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801180a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801180c:	e841 2300 	strex	r3, r2, [r1]
 8011810:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011814:	2b00      	cmp	r3, #0
 8011816:	d1e6      	bne.n	80117e6 <UART_Start_Receive_IT+0x1be>
 8011818:	e018      	b.n	801184c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	e853 3f00 	ldrex	r3, [r3]
 8011826:	613b      	str	r3, [r7, #16]
   return(result);
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	f043 0320 	orr.w	r3, r3, #32
 801182e:	67bb      	str	r3, [r7, #120]	; 0x78
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	461a      	mov	r2, r3
 8011836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011838:	623b      	str	r3, [r7, #32]
 801183a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801183c:	69f9      	ldr	r1, [r7, #28]
 801183e:	6a3a      	ldr	r2, [r7, #32]
 8011840:	e841 2300 	strex	r3, r2, [r1]
 8011844:	61bb      	str	r3, [r7, #24]
   return(result);
 8011846:	69bb      	ldr	r3, [r7, #24]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d1e6      	bne.n	801181a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801184c:	2300      	movs	r3, #0
}
 801184e:	4618      	mov	r0, r3
 8011850:	378c      	adds	r7, #140	; 0x8c
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr
 801185a:	bf00      	nop
 801185c:	08012241 	.word	0x08012241
 8011860:	08011ee1 	.word	0x08011ee1
 8011864:	08011d29 	.word	0x08011d29
 8011868:	08011b71 	.word	0x08011b71

0801186c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801186c:	b480      	push	{r7}
 801186e:	b08f      	sub	sp, #60	; 0x3c
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801187a:	6a3b      	ldr	r3, [r7, #32]
 801187c:	e853 3f00 	ldrex	r3, [r3]
 8011880:	61fb      	str	r3, [r7, #28]
   return(result);
 8011882:	69fb      	ldr	r3, [r7, #28]
 8011884:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011888:	637b      	str	r3, [r7, #52]	; 0x34
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	461a      	mov	r2, r3
 8011890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011894:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801189a:	e841 2300 	strex	r3, r2, [r1]
 801189e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80118a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d1e6      	bne.n	8011874 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	3308      	adds	r3, #8
 80118ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	e853 3f00 	ldrex	r3, [r3]
 80118b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80118bc:	633b      	str	r3, [r7, #48]	; 0x30
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	3308      	adds	r3, #8
 80118c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118c6:	61ba      	str	r2, [r7, #24]
 80118c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118ca:	6979      	ldr	r1, [r7, #20]
 80118cc:	69ba      	ldr	r2, [r7, #24]
 80118ce:	e841 2300 	strex	r3, r2, [r1]
 80118d2:	613b      	str	r3, [r7, #16]
   return(result);
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d1e5      	bne.n	80118a6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2220      	movs	r2, #32
 80118de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80118e2:	bf00      	nop
 80118e4:	373c      	adds	r7, #60	; 0x3c
 80118e6:	46bd      	mov	sp, r7
 80118e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ec:	4770      	bx	lr
	...

080118f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b095      	sub	sp, #84	; 0x54
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011900:	e853 3f00 	ldrex	r3, [r3]
 8011904:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801190c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	461a      	mov	r2, r3
 8011914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011916:	643b      	str	r3, [r7, #64]	; 0x40
 8011918:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801191a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801191c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801191e:	e841 2300 	strex	r3, r2, [r1]
 8011922:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011926:	2b00      	cmp	r3, #0
 8011928:	d1e6      	bne.n	80118f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	3308      	adds	r3, #8
 8011930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011932:	6a3b      	ldr	r3, [r7, #32]
 8011934:	e853 3f00 	ldrex	r3, [r3]
 8011938:	61fb      	str	r3, [r7, #28]
   return(result);
 801193a:	69fa      	ldr	r2, [r7, #28]
 801193c:	4b1e      	ldr	r3, [pc, #120]	; (80119b8 <UART_EndRxTransfer+0xc8>)
 801193e:	4013      	ands	r3, r2
 8011940:	64bb      	str	r3, [r7, #72]	; 0x48
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	3308      	adds	r3, #8
 8011948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801194a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801194c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801194e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011952:	e841 2300 	strex	r3, r2, [r1]
 8011956:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801195a:	2b00      	cmp	r3, #0
 801195c:	d1e5      	bne.n	801192a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011962:	2b01      	cmp	r3, #1
 8011964:	d118      	bne.n	8011998 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	e853 3f00 	ldrex	r3, [r3]
 8011972:	60bb      	str	r3, [r7, #8]
   return(result);
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	f023 0310 	bic.w	r3, r3, #16
 801197a:	647b      	str	r3, [r7, #68]	; 0x44
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	461a      	mov	r2, r3
 8011982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011984:	61bb      	str	r3, [r7, #24]
 8011986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011988:	6979      	ldr	r1, [r7, #20]
 801198a:	69ba      	ldr	r2, [r7, #24]
 801198c:	e841 2300 	strex	r3, r2, [r1]
 8011990:	613b      	str	r3, [r7, #16]
   return(result);
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d1e6      	bne.n	8011966 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2220      	movs	r2, #32
 801199c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2200      	movs	r2, #0
 80119a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	675a      	str	r2, [r3, #116]	; 0x74
}
 80119ac:	bf00      	nop
 80119ae:	3754      	adds	r7, #84	; 0x54
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr
 80119b8:	effffffe 	.word	0xeffffffe

080119bc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b090      	sub	sp, #64	; 0x40
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	69db      	ldr	r3, [r3, #28]
 80119ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119d2:	d037      	beq.n	8011a44 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80119d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119d6:	2200      	movs	r2, #0
 80119d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80119dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	3308      	adds	r3, #8
 80119e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e6:	e853 3f00 	ldrex	r3, [r3]
 80119ea:	623b      	str	r3, [r7, #32]
   return(result);
 80119ec:	6a3b      	ldr	r3, [r7, #32]
 80119ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80119f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80119f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	3308      	adds	r3, #8
 80119fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119fc:	633a      	str	r2, [r7, #48]	; 0x30
 80119fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a04:	e841 2300 	strex	r3, r2, [r1]
 8011a08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d1e5      	bne.n	80119dc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	e853 3f00 	ldrex	r3, [r3]
 8011a1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a24:	637b      	str	r3, [r7, #52]	; 0x34
 8011a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	461a      	mov	r2, r3
 8011a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a2e:	61fb      	str	r3, [r7, #28]
 8011a30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a32:	69b9      	ldr	r1, [r7, #24]
 8011a34:	69fa      	ldr	r2, [r7, #28]
 8011a36:	e841 2300 	strex	r3, r2, [r1]
 8011a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d1e6      	bne.n	8011a10 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011a42:	e002      	b.n	8011a4a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011a44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011a46:	f7f0 fa6b 	bl	8001f20 <HAL_UART_TxCpltCallback>
}
 8011a4a:	bf00      	nop
 8011a4c:	3740      	adds	r7, #64	; 0x40
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b084      	sub	sp, #16
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011a60:	68f8      	ldr	r0, [r7, #12]
 8011a62:	f7fe fe9f 	bl	80107a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a66:	bf00      	nop
 8011a68:	3710      	adds	r7, #16
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}

08011a6e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011a6e:	b580      	push	{r7, lr}
 8011a70:	b086      	sub	sp, #24
 8011a72:	af00      	add	r7, sp, #0
 8011a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a7a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a82:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a8a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	689b      	ldr	r3, [r3, #8]
 8011a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a96:	2b80      	cmp	r3, #128	; 0x80
 8011a98:	d109      	bne.n	8011aae <UART_DMAError+0x40>
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	2b21      	cmp	r3, #33	; 0x21
 8011a9e:	d106      	bne.n	8011aae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011aa8:	6978      	ldr	r0, [r7, #20]
 8011aaa:	f7ff fedf 	bl	801186c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	689b      	ldr	r3, [r3, #8]
 8011ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ab8:	2b40      	cmp	r3, #64	; 0x40
 8011aba:	d109      	bne.n	8011ad0 <UART_DMAError+0x62>
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	2b22      	cmp	r3, #34	; 0x22
 8011ac0:	d106      	bne.n	8011ad0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011aca:	6978      	ldr	r0, [r7, #20]
 8011acc:	f7ff ff10 	bl	80118f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ad6:	f043 0210 	orr.w	r2, r3, #16
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011ae0:	6978      	ldr	r0, [r7, #20]
 8011ae2:	f7fe fe69 	bl	80107b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ae6:	bf00      	nop
 8011ae8:	3718      	adds	r7, #24
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}

08011aee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b084      	sub	sp, #16
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011afa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2200      	movs	r2, #0
 8011b00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	2200      	movs	r2, #0
 8011b08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011b0c:	68f8      	ldr	r0, [r7, #12]
 8011b0e:	f7fe fe53 	bl	80107b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b12:	bf00      	nop
 8011b14:	3710      	adds	r7, #16
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}

08011b1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b088      	sub	sp, #32
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	e853 3f00 	ldrex	r3, [r3]
 8011b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b36:	61fb      	str	r3, [r7, #28]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	461a      	mov	r2, r3
 8011b3e:	69fb      	ldr	r3, [r7, #28]
 8011b40:	61bb      	str	r3, [r7, #24]
 8011b42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b44:	6979      	ldr	r1, [r7, #20]
 8011b46:	69ba      	ldr	r2, [r7, #24]
 8011b48:	e841 2300 	strex	r3, r2, [r1]
 8011b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d1e6      	bne.n	8011b22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2220      	movs	r2, #32
 8011b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f7f0 f9dc 	bl	8001f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b68:	bf00      	nop
 8011b6a:	3720      	adds	r7, #32
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b09c      	sub	sp, #112	; 0x70
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b88:	2b22      	cmp	r3, #34	; 0x22
 8011b8a:	f040 80be 	bne.w	8011d0a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011b98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011b9c:	b2d9      	uxtb	r1, r3
 8011b9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011ba2:	b2da      	uxtb	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ba8:	400a      	ands	r2, r1
 8011baa:	b2d2      	uxtb	r2, r2
 8011bac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bb2:	1c5a      	adds	r2, r3, #1
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	3b01      	subs	r3, #1
 8011bc2:	b29a      	uxth	r2, r3
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011bd0:	b29b      	uxth	r3, r3
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	f040 80a1 	bne.w	8011d1a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011be0:	e853 3f00 	ldrex	r3, [r3]
 8011be4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011be8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	461a      	mov	r2, r3
 8011bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011bf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8011bf8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011bfe:	e841 2300 	strex	r3, r2, [r1]
 8011c02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d1e6      	bne.n	8011bd8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	3308      	adds	r3, #8
 8011c10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c14:	e853 3f00 	ldrex	r3, [r3]
 8011c18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1c:	f023 0301 	bic.w	r3, r3, #1
 8011c20:	667b      	str	r3, [r7, #100]	; 0x64
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	3308      	adds	r3, #8
 8011c28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011c2a:	647a      	str	r2, [r7, #68]	; 0x44
 8011c2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c32:	e841 2300 	strex	r3, r2, [r1]
 8011c36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d1e5      	bne.n	8011c0a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2220      	movs	r2, #32
 8011c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	4a33      	ldr	r2, [pc, #204]	; (8011d24 <UART_RxISR_8BIT+0x1b4>)
 8011c58:	4293      	cmp	r3, r2
 8011c5a:	d01f      	beq.n	8011c9c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d018      	beq.n	8011c9c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c72:	e853 3f00 	ldrex	r3, [r3]
 8011c76:	623b      	str	r3, [r7, #32]
   return(result);
 8011c78:	6a3b      	ldr	r3, [r7, #32]
 8011c7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011c7e:	663b      	str	r3, [r7, #96]	; 0x60
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	461a      	mov	r2, r3
 8011c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c88:	633b      	str	r3, [r7, #48]	; 0x30
 8011c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c90:	e841 2300 	strex	r3, r2, [r1]
 8011c94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d1e6      	bne.n	8011c6a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d12e      	bne.n	8011d02 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	e853 3f00 	ldrex	r3, [r3]
 8011cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	f023 0310 	bic.w	r3, r3, #16
 8011cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	461a      	mov	r2, r3
 8011cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cc8:	61fb      	str	r3, [r7, #28]
 8011cca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ccc:	69b9      	ldr	r1, [r7, #24]
 8011cce:	69fa      	ldr	r2, [r7, #28]
 8011cd0:	e841 2300 	strex	r3, r2, [r1]
 8011cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d1e6      	bne.n	8011caa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	69db      	ldr	r3, [r3, #28]
 8011ce2:	f003 0310 	and.w	r3, r3, #16
 8011ce6:	2b10      	cmp	r3, #16
 8011ce8:	d103      	bne.n	8011cf2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	2210      	movs	r2, #16
 8011cf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f7fe fd66 	bl	80107cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011d00:	e00b      	b.n	8011d1a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f7ee fcc0 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8011d08:	e007      	b.n	8011d1a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	699a      	ldr	r2, [r3, #24]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f042 0208 	orr.w	r2, r2, #8
 8011d18:	619a      	str	r2, [r3, #24]
}
 8011d1a:	bf00      	nop
 8011d1c:	3770      	adds	r7, #112	; 0x70
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
 8011d22:	bf00      	nop
 8011d24:	58000c00 	.word	0x58000c00

08011d28 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b09c      	sub	sp, #112	; 0x70
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d36:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d40:	2b22      	cmp	r3, #34	; 0x22
 8011d42:	f040 80be 	bne.w	8011ec2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d4c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d54:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011d56:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011d5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011d5e:	4013      	ands	r3, r2
 8011d60:	b29a      	uxth	r2, r3
 8011d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d64:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d6a:	1c9a      	adds	r2, r3, #2
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	b29a      	uxth	r2, r3
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	f040 80a1 	bne.w	8011ed2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d98:	e853 3f00 	ldrex	r3, [r3]
 8011d9c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011da4:	667b      	str	r3, [r7, #100]	; 0x64
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	461a      	mov	r2, r3
 8011dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011dae:	657b      	str	r3, [r7, #84]	; 0x54
 8011db0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011db4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011db6:	e841 2300 	strex	r3, r2, [r1]
 8011dba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d1e6      	bne.n	8011d90 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	3308      	adds	r3, #8
 8011dc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dcc:	e853 3f00 	ldrex	r3, [r3]
 8011dd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd4:	f023 0301 	bic.w	r3, r3, #1
 8011dd8:	663b      	str	r3, [r7, #96]	; 0x60
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	3308      	adds	r3, #8
 8011de0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011de2:	643a      	str	r2, [r7, #64]	; 0x40
 8011de4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011de6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011de8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011dea:	e841 2300 	strex	r3, r2, [r1]
 8011dee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d1e5      	bne.n	8011dc2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2220      	movs	r2, #32
 8011dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2200      	movs	r2, #0
 8011e02:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2200      	movs	r2, #0
 8011e08:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	4a33      	ldr	r2, [pc, #204]	; (8011edc <UART_RxISR_16BIT+0x1b4>)
 8011e10:	4293      	cmp	r3, r2
 8011e12:	d01f      	beq.n	8011e54 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d018      	beq.n	8011e54 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e28:	6a3b      	ldr	r3, [r7, #32]
 8011e2a:	e853 3f00 	ldrex	r3, [r3]
 8011e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e30:	69fb      	ldr	r3, [r7, #28]
 8011e32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	461a      	mov	r2, r3
 8011e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e42:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e48:	e841 2300 	strex	r3, r2, [r1]
 8011e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d1e6      	bne.n	8011e22 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e58:	2b01      	cmp	r3, #1
 8011e5a:	d12e      	bne.n	8011eba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	e853 3f00 	ldrex	r3, [r3]
 8011e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	f023 0310 	bic.w	r3, r3, #16
 8011e76:	65bb      	str	r3, [r7, #88]	; 0x58
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e80:	61bb      	str	r3, [r7, #24]
 8011e82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e84:	6979      	ldr	r1, [r7, #20]
 8011e86:	69ba      	ldr	r2, [r7, #24]
 8011e88:	e841 2300 	strex	r3, r2, [r1]
 8011e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d1e6      	bne.n	8011e62 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	69db      	ldr	r3, [r3, #28]
 8011e9a:	f003 0310 	and.w	r3, r3, #16
 8011e9e:	2b10      	cmp	r3, #16
 8011ea0:	d103      	bne.n	8011eaa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2210      	movs	r2, #16
 8011ea8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011eb0:	4619      	mov	r1, r3
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f7fe fc8a 	bl	80107cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011eb8:	e00b      	b.n	8011ed2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f7ee fbe4 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8011ec0:	e007      	b.n	8011ed2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	699a      	ldr	r2, [r3, #24]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f042 0208 	orr.w	r2, r2, #8
 8011ed0:	619a      	str	r2, [r3, #24]
}
 8011ed2:	bf00      	nop
 8011ed4:	3770      	adds	r7, #112	; 0x70
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	58000c00 	.word	0x58000c00

08011ee0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b0ac      	sub	sp, #176	; 0xb0
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011eee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	69db      	ldr	r3, [r3, #28]
 8011ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	689b      	ldr	r3, [r3, #8]
 8011f0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f16:	2b22      	cmp	r3, #34	; 0x22
 8011f18:	f040 8180 	bne.w	801221c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011f22:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011f26:	e123      	b.n	8012170 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f2e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011f32:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011f36:	b2d9      	uxtb	r1, r3
 8011f38:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011f3c:	b2da      	uxtb	r2, r3
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f42:	400a      	ands	r2, r1
 8011f44:	b2d2      	uxtb	r2, r2
 8011f46:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f4c:	1c5a      	adds	r2, r3, #1
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	3b01      	subs	r3, #1
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	69db      	ldr	r3, [r3, #28]
 8011f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f72:	f003 0307 	and.w	r3, r3, #7
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d053      	beq.n	8012022 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f7e:	f003 0301 	and.w	r3, r3, #1
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d011      	beq.n	8011faa <UART_RxISR_8BIT_FIFOEN+0xca>
 8011f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d00b      	beq.n	8011faa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	2201      	movs	r2, #1
 8011f98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fa0:	f043 0201 	orr.w	r2, r3, #1
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011fae:	f003 0302 	and.w	r3, r3, #2
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d011      	beq.n	8011fda <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011fba:	f003 0301 	and.w	r3, r3, #1
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d00b      	beq.n	8011fda <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2202      	movs	r2, #2
 8011fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fd0:	f043 0204 	orr.w	r2, r3, #4
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011fde:	f003 0304 	and.w	r3, r3, #4
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d011      	beq.n	801200a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011fe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011fea:	f003 0301 	and.w	r3, r3, #1
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00b      	beq.n	801200a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	2204      	movs	r2, #4
 8011ff8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012000:	f043 0202 	orr.w	r2, r3, #2
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012010:	2b00      	cmp	r3, #0
 8012012:	d006      	beq.n	8012022 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f7fe fbcf 	bl	80107b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2200      	movs	r2, #0
 801201e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012028:	b29b      	uxth	r3, r3
 801202a:	2b00      	cmp	r3, #0
 801202c:	f040 80a0 	bne.w	8012170 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012038:	e853 3f00 	ldrex	r3, [r3]
 801203c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801203e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	461a      	mov	r2, r3
 801204e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012052:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012054:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012056:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012058:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801205a:	e841 2300 	strex	r3, r2, [r1]
 801205e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012062:	2b00      	cmp	r3, #0
 8012064:	d1e4      	bne.n	8012030 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	3308      	adds	r3, #8
 801206c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801206e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012070:	e853 3f00 	ldrex	r3, [r3]
 8012074:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012076:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012078:	4b6e      	ldr	r3, [pc, #440]	; (8012234 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801207a:	4013      	ands	r3, r2
 801207c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	3308      	adds	r3, #8
 8012086:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801208a:	66ba      	str	r2, [r7, #104]	; 0x68
 801208c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801208e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012090:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012092:	e841 2300 	strex	r3, r2, [r1]
 8012096:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801209a:	2b00      	cmp	r3, #0
 801209c:	d1e3      	bne.n	8012066 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2220      	movs	r2, #32
 80120a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2200      	movs	r2, #0
 80120aa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2200      	movs	r2, #0
 80120b0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	4a60      	ldr	r2, [pc, #384]	; (8012238 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80120b8:	4293      	cmp	r3, r2
 80120ba:	d021      	beq.n	8012100 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	685b      	ldr	r3, [r3, #4]
 80120c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d01a      	beq.n	8012100 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120d2:	e853 3f00 	ldrex	r3, [r3]
 80120d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80120d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80120de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	461a      	mov	r2, r3
 80120e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80120ec:	657b      	str	r3, [r7, #84]	; 0x54
 80120ee:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80120f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80120f4:	e841 2300 	strex	r3, r2, [r1]
 80120f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80120fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d1e4      	bne.n	80120ca <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012104:	2b01      	cmp	r3, #1
 8012106:	d130      	bne.n	801216a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2200      	movs	r2, #0
 801210c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012116:	e853 3f00 	ldrex	r3, [r3]
 801211a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801211e:	f023 0310 	bic.w	r3, r3, #16
 8012122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	461a      	mov	r2, r3
 801212c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012130:	643b      	str	r3, [r7, #64]	; 0x40
 8012132:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012138:	e841 2300 	strex	r3, r2, [r1]
 801213c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801213e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012140:	2b00      	cmp	r3, #0
 8012142:	d1e4      	bne.n	801210e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	69db      	ldr	r3, [r3, #28]
 801214a:	f003 0310 	and.w	r3, r3, #16
 801214e:	2b10      	cmp	r3, #16
 8012150:	d103      	bne.n	801215a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	2210      	movs	r2, #16
 8012158:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012160:	4619      	mov	r1, r3
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f7fe fb32 	bl	80107cc <HAL_UARTEx_RxEventCallback>
 8012168:	e002      	b.n	8012170 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	f7ee fa8c 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012170:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012174:	2b00      	cmp	r3, #0
 8012176:	d006      	beq.n	8012186 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801217c:	f003 0320 	and.w	r3, r3, #32
 8012180:	2b00      	cmp	r3, #0
 8012182:	f47f aed1 	bne.w	8011f28 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801218c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012190:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012194:	2b00      	cmp	r3, #0
 8012196:	d049      	beq.n	801222c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801219e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d242      	bcs.n	801222c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	3308      	adds	r3, #8
 80121ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121ae:	6a3b      	ldr	r3, [r7, #32]
 80121b0:	e853 3f00 	ldrex	r3, [r3]
 80121b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80121b6:	69fb      	ldr	r3, [r7, #28]
 80121b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80121bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	3308      	adds	r3, #8
 80121c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80121ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80121cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121d2:	e841 2300 	strex	r3, r2, [r1]
 80121d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80121d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d1e3      	bne.n	80121a6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	4a16      	ldr	r2, [pc, #88]	; (801223c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80121e2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	e853 3f00 	ldrex	r3, [r3]
 80121f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	f043 0320 	orr.w	r3, r3, #32
 80121f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	461a      	mov	r2, r3
 8012202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012206:	61bb      	str	r3, [r7, #24]
 8012208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801220a:	6979      	ldr	r1, [r7, #20]
 801220c:	69ba      	ldr	r2, [r7, #24]
 801220e:	e841 2300 	strex	r3, r2, [r1]
 8012212:	613b      	str	r3, [r7, #16]
   return(result);
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d1e4      	bne.n	80121e4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801221a:	e007      	b.n	801222c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	699a      	ldr	r2, [r3, #24]
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f042 0208 	orr.w	r2, r2, #8
 801222a:	619a      	str	r2, [r3, #24]
}
 801222c:	bf00      	nop
 801222e:	37b0      	adds	r7, #176	; 0xb0
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	effffffe 	.word	0xeffffffe
 8012238:	58000c00 	.word	0x58000c00
 801223c:	08011b71 	.word	0x08011b71

08012240 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b0ae      	sub	sp, #184	; 0xb8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801224e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	69db      	ldr	r3, [r3, #28]
 8012258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	689b      	ldr	r3, [r3, #8]
 801226c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012276:	2b22      	cmp	r3, #34	; 0x22
 8012278:	f040 8184 	bne.w	8012584 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012282:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012286:	e127      	b.n	80124d8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801228e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801229a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801229e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80122a2:	4013      	ands	r3, r2
 80122a4:	b29a      	uxth	r2, r3
 80122a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80122aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122b0:	1c9a      	adds	r2, r3, #2
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122bc:	b29b      	uxth	r3, r3
 80122be:	3b01      	subs	r3, #1
 80122c0:	b29a      	uxth	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	69db      	ldr	r3, [r3, #28]
 80122ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80122d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80122d6:	f003 0307 	and.w	r3, r3, #7
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d053      	beq.n	8012386 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80122de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80122e2:	f003 0301 	and.w	r3, r3, #1
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d011      	beq.n	801230e <UART_RxISR_16BIT_FIFOEN+0xce>
 80122ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80122ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d00b      	beq.n	801230e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	2201      	movs	r2, #1
 80122fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012304:	f043 0201 	orr.w	r2, r3, #1
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801230e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012312:	f003 0302 	and.w	r3, r3, #2
 8012316:	2b00      	cmp	r3, #0
 8012318:	d011      	beq.n	801233e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801231a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801231e:	f003 0301 	and.w	r3, r3, #1
 8012322:	2b00      	cmp	r3, #0
 8012324:	d00b      	beq.n	801233e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	2202      	movs	r2, #2
 801232c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012334:	f043 0204 	orr.w	r2, r3, #4
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801233e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012342:	f003 0304 	and.w	r3, r3, #4
 8012346:	2b00      	cmp	r3, #0
 8012348:	d011      	beq.n	801236e <UART_RxISR_16BIT_FIFOEN+0x12e>
 801234a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801234e:	f003 0301 	and.w	r3, r3, #1
 8012352:	2b00      	cmp	r3, #0
 8012354:	d00b      	beq.n	801236e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	2204      	movs	r2, #4
 801235c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012364:	f043 0202 	orr.w	r2, r3, #2
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012374:	2b00      	cmp	r3, #0
 8012376:	d006      	beq.n	8012386 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f7fe fa1d 	bl	80107b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2200      	movs	r2, #0
 8012382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801238c:	b29b      	uxth	r3, r3
 801238e:	2b00      	cmp	r3, #0
 8012390:	f040 80a2 	bne.w	80124d8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801239a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801239c:	e853 3f00 	ldrex	r3, [r3]
 80123a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80123a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80123a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80123a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	461a      	mov	r2, r3
 80123b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80123b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80123ba:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80123be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80123c2:	e841 2300 	strex	r3, r2, [r1]
 80123c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80123c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d1e2      	bne.n	8012394 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	3308      	adds	r3, #8
 80123d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80123d8:	e853 3f00 	ldrex	r3, [r3]
 80123dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80123de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80123e0:	4b6e      	ldr	r3, [pc, #440]	; (801259c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80123e2:	4013      	ands	r3, r2
 80123e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	3308      	adds	r3, #8
 80123ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80123f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80123f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80123f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80123fa:	e841 2300 	strex	r3, r2, [r1]
 80123fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012402:	2b00      	cmp	r3, #0
 8012404:	d1e3      	bne.n	80123ce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2220      	movs	r2, #32
 801240a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2200      	movs	r2, #0
 8012412:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	4a60      	ldr	r2, [pc, #384]	; (80125a0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012420:	4293      	cmp	r3, r2
 8012422:	d021      	beq.n	8012468 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801242e:	2b00      	cmp	r3, #0
 8012430:	d01a      	beq.n	8012468 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801243a:	e853 3f00 	ldrex	r3, [r3]
 801243e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012442:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012446:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	461a      	mov	r2, r3
 8012450:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012454:	65bb      	str	r3, [r7, #88]	; 0x58
 8012456:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801245a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801245c:	e841 2300 	strex	r3, r2, [r1]
 8012460:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012464:	2b00      	cmp	r3, #0
 8012466:	d1e4      	bne.n	8012432 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801246c:	2b01      	cmp	r3, #1
 801246e:	d130      	bne.n	80124d2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801247e:	e853 3f00 	ldrex	r3, [r3]
 8012482:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012486:	f023 0310 	bic.w	r3, r3, #16
 801248a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	461a      	mov	r2, r3
 8012494:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012498:	647b      	str	r3, [r7, #68]	; 0x44
 801249a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801249c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801249e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80124a0:	e841 2300 	strex	r3, r2, [r1]
 80124a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80124a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d1e4      	bne.n	8012476 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	69db      	ldr	r3, [r3, #28]
 80124b2:	f003 0310 	and.w	r3, r3, #16
 80124b6:	2b10      	cmp	r3, #16
 80124b8:	d103      	bne.n	80124c2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	2210      	movs	r2, #16
 80124c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80124c8:	4619      	mov	r1, r3
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f7fe f97e 	bl	80107cc <HAL_UARTEx_RxEventCallback>
 80124d0:	e002      	b.n	80124d8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f7ee f8d8 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80124d8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d006      	beq.n	80124ee <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80124e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80124e4:	f003 0320 	and.w	r3, r3, #32
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	f47f aecd 	bne.w	8012288 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80124f8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d049      	beq.n	8012594 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012506:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801250a:	429a      	cmp	r2, r3
 801250c:	d242      	bcs.n	8012594 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	3308      	adds	r3, #8
 8012514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012518:	e853 3f00 	ldrex	r3, [r3]
 801251c:	623b      	str	r3, [r7, #32]
   return(result);
 801251e:	6a3b      	ldr	r3, [r7, #32]
 8012520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	3308      	adds	r3, #8
 801252e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012532:	633a      	str	r2, [r7, #48]	; 0x30
 8012534:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801253a:	e841 2300 	strex	r3, r2, [r1]
 801253e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012542:	2b00      	cmp	r3, #0
 8012544:	d1e3      	bne.n	801250e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	4a16      	ldr	r2, [pc, #88]	; (80125a4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801254a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	e853 3f00 	ldrex	r3, [r3]
 8012558:	60fb      	str	r3, [r7, #12]
   return(result);
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f043 0320 	orr.w	r3, r3, #32
 8012560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	461a      	mov	r2, r3
 801256a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801256e:	61fb      	str	r3, [r7, #28]
 8012570:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012572:	69b9      	ldr	r1, [r7, #24]
 8012574:	69fa      	ldr	r2, [r7, #28]
 8012576:	e841 2300 	strex	r3, r2, [r1]
 801257a:	617b      	str	r3, [r7, #20]
   return(result);
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d1e4      	bne.n	801254c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012582:	e007      	b.n	8012594 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	699a      	ldr	r2, [r3, #24]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f042 0208 	orr.w	r2, r2, #8
 8012592:	619a      	str	r2, [r3, #24]
}
 8012594:	bf00      	nop
 8012596:	37b8      	adds	r7, #184	; 0xb8
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}
 801259c:	effffffe 	.word	0xeffffffe
 80125a0:	58000c00 	.word	0x58000c00
 80125a4:	08011d29 	.word	0x08011d29

080125a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80125b0:	bf00      	nop
 80125b2:	370c      	adds	r7, #12
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr

080125bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80125bc:	b480      	push	{r7}
 80125be:	b083      	sub	sp, #12
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80125c4:	bf00      	nop
 80125c6:	370c      	adds	r7, #12
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr

080125d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80125d0:	b480      	push	{r7}
 80125d2:	b083      	sub	sp, #12
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80125d8:	bf00      	nop
 80125da:	370c      	adds	r7, #12
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80125e4:	b480      	push	{r7}
 80125e6:	b085      	sub	sp, #20
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80125f2:	2b01      	cmp	r3, #1
 80125f4:	d101      	bne.n	80125fa <HAL_UARTEx_DisableFifoMode+0x16>
 80125f6:	2302      	movs	r3, #2
 80125f8:	e027      	b.n	801264a <HAL_UARTEx_DisableFifoMode+0x66>
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2201      	movs	r2, #1
 80125fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2224      	movs	r2, #36	; 0x24
 8012606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	681a      	ldr	r2, [r3, #0]
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	f022 0201 	bic.w	r2, r2, #1
 8012620:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012628:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2200      	movs	r2, #0
 801262e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	68fa      	ldr	r2, [r7, #12]
 8012636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2220      	movs	r2, #32
 801263c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012648:	2300      	movs	r3, #0
}
 801264a:	4618      	mov	r0, r3
 801264c:	3714      	adds	r7, #20
 801264e:	46bd      	mov	sp, r7
 8012650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012654:	4770      	bx	lr

08012656 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012656:	b580      	push	{r7, lr}
 8012658:	b084      	sub	sp, #16
 801265a:	af00      	add	r7, sp, #0
 801265c:	6078      	str	r0, [r7, #4]
 801265e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012666:	2b01      	cmp	r3, #1
 8012668:	d101      	bne.n	801266e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801266a:	2302      	movs	r3, #2
 801266c:	e02d      	b.n	80126ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2201      	movs	r2, #1
 8012672:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2224      	movs	r2, #36	; 0x24
 801267a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	681a      	ldr	r2, [r3, #0]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	f022 0201 	bic.w	r2, r2, #1
 8012694:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	689b      	ldr	r3, [r3, #8]
 801269c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	683a      	ldr	r2, [r7, #0]
 80126a6:	430a      	orrs	r2, r1
 80126a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f000 f850 	bl	8012750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	68fa      	ldr	r2, [r7, #12]
 80126b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2220      	movs	r2, #32
 80126bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2200      	movs	r2, #0
 80126c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80126c8:	2300      	movs	r3, #0
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3710      	adds	r7, #16
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}

080126d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80126d2:	b580      	push	{r7, lr}
 80126d4:	b084      	sub	sp, #16
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	6078      	str	r0, [r7, #4]
 80126da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80126e2:	2b01      	cmp	r3, #1
 80126e4:	d101      	bne.n	80126ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80126e6:	2302      	movs	r3, #2
 80126e8:	e02d      	b.n	8012746 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	2201      	movs	r2, #1
 80126ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2224      	movs	r2, #36	; 0x24
 80126f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	681a      	ldr	r2, [r3, #0]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f022 0201 	bic.w	r2, r2, #1
 8012710:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	689b      	ldr	r3, [r3, #8]
 8012718:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	683a      	ldr	r2, [r7, #0]
 8012722:	430a      	orrs	r2, r1
 8012724:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f000 f812 	bl	8012750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	68fa      	ldr	r2, [r7, #12]
 8012732:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2220      	movs	r2, #32
 8012738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2200      	movs	r2, #0
 8012740:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012744:	2300      	movs	r3, #0
}
 8012746:	4618      	mov	r0, r3
 8012748:	3710      	adds	r7, #16
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
	...

08012750 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012750:	b480      	push	{r7}
 8012752:	b085      	sub	sp, #20
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801275c:	2b00      	cmp	r3, #0
 801275e:	d108      	bne.n	8012772 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2201      	movs	r2, #1
 8012764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2201      	movs	r2, #1
 801276c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012770:	e031      	b.n	80127d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012772:	2310      	movs	r3, #16
 8012774:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012776:	2310      	movs	r3, #16
 8012778:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	689b      	ldr	r3, [r3, #8]
 8012780:	0e5b      	lsrs	r3, r3, #25
 8012782:	b2db      	uxtb	r3, r3
 8012784:	f003 0307 	and.w	r3, r3, #7
 8012788:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	689b      	ldr	r3, [r3, #8]
 8012790:	0f5b      	lsrs	r3, r3, #29
 8012792:	b2db      	uxtb	r3, r3
 8012794:	f003 0307 	and.w	r3, r3, #7
 8012798:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801279a:	7bbb      	ldrb	r3, [r7, #14]
 801279c:	7b3a      	ldrb	r2, [r7, #12]
 801279e:	4911      	ldr	r1, [pc, #68]	; (80127e4 <UARTEx_SetNbDataToProcess+0x94>)
 80127a0:	5c8a      	ldrb	r2, [r1, r2]
 80127a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80127a6:	7b3a      	ldrb	r2, [r7, #12]
 80127a8:	490f      	ldr	r1, [pc, #60]	; (80127e8 <UARTEx_SetNbDataToProcess+0x98>)
 80127aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80127ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80127b0:	b29a      	uxth	r2, r3
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80127b8:	7bfb      	ldrb	r3, [r7, #15]
 80127ba:	7b7a      	ldrb	r2, [r7, #13]
 80127bc:	4909      	ldr	r1, [pc, #36]	; (80127e4 <UARTEx_SetNbDataToProcess+0x94>)
 80127be:	5c8a      	ldrb	r2, [r1, r2]
 80127c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80127c4:	7b7a      	ldrb	r2, [r7, #13]
 80127c6:	4908      	ldr	r1, [pc, #32]	; (80127e8 <UARTEx_SetNbDataToProcess+0x98>)
 80127c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80127ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80127ce:	b29a      	uxth	r2, r3
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80127d6:	bf00      	nop
 80127d8:	3714      	adds	r7, #20
 80127da:	46bd      	mov	sp, r7
 80127dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e0:	4770      	bx	lr
 80127e2:	bf00      	nop
 80127e4:	08017084 	.word	0x08017084
 80127e8:	0801708c 	.word	0x0801708c

080127ec <__NVIC_SetPriority>:
{
 80127ec:	b480      	push	{r7}
 80127ee:	b083      	sub	sp, #12
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	4603      	mov	r3, r0
 80127f4:	6039      	str	r1, [r7, #0]
 80127f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80127f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	db0a      	blt.n	8012816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	b2da      	uxtb	r2, r3
 8012804:	490c      	ldr	r1, [pc, #48]	; (8012838 <__NVIC_SetPriority+0x4c>)
 8012806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801280a:	0112      	lsls	r2, r2, #4
 801280c:	b2d2      	uxtb	r2, r2
 801280e:	440b      	add	r3, r1
 8012810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012814:	e00a      	b.n	801282c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	b2da      	uxtb	r2, r3
 801281a:	4908      	ldr	r1, [pc, #32]	; (801283c <__NVIC_SetPriority+0x50>)
 801281c:	88fb      	ldrh	r3, [r7, #6]
 801281e:	f003 030f 	and.w	r3, r3, #15
 8012822:	3b04      	subs	r3, #4
 8012824:	0112      	lsls	r2, r2, #4
 8012826:	b2d2      	uxtb	r2, r2
 8012828:	440b      	add	r3, r1
 801282a:	761a      	strb	r2, [r3, #24]
}
 801282c:	bf00      	nop
 801282e:	370c      	adds	r7, #12
 8012830:	46bd      	mov	sp, r7
 8012832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012836:	4770      	bx	lr
 8012838:	e000e100 	.word	0xe000e100
 801283c:	e000ed00 	.word	0xe000ed00

08012840 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012840:	b580      	push	{r7, lr}
 8012842:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012844:	4b05      	ldr	r3, [pc, #20]	; (801285c <SysTick_Handler+0x1c>)
 8012846:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012848:	f002 fc3a 	bl	80150c0 <xTaskGetSchedulerState>
 801284c:	4603      	mov	r3, r0
 801284e:	2b01      	cmp	r3, #1
 8012850:	d001      	beq.n	8012856 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012852:	f003 fa59 	bl	8015d08 <xPortSysTickHandler>
  }
}
 8012856:	bf00      	nop
 8012858:	bd80      	pop	{r7, pc}
 801285a:	bf00      	nop
 801285c:	e000e010 	.word	0xe000e010

08012860 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012860:	b580      	push	{r7, lr}
 8012862:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012864:	2100      	movs	r1, #0
 8012866:	f06f 0004 	mvn.w	r0, #4
 801286a:	f7ff ffbf 	bl	80127ec <__NVIC_SetPriority>
#endif
}
 801286e:	bf00      	nop
 8012870:	bd80      	pop	{r7, pc}
	...

08012874 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012874:	b480      	push	{r7}
 8012876:	b083      	sub	sp, #12
 8012878:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801287a:	f3ef 8305 	mrs	r3, IPSR
 801287e:	603b      	str	r3, [r7, #0]
  return(result);
 8012880:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012882:	2b00      	cmp	r3, #0
 8012884:	d003      	beq.n	801288e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012886:	f06f 0305 	mvn.w	r3, #5
 801288a:	607b      	str	r3, [r7, #4]
 801288c:	e00c      	b.n	80128a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801288e:	4b0a      	ldr	r3, [pc, #40]	; (80128b8 <osKernelInitialize+0x44>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d105      	bne.n	80128a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012896:	4b08      	ldr	r3, [pc, #32]	; (80128b8 <osKernelInitialize+0x44>)
 8012898:	2201      	movs	r2, #1
 801289a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801289c:	2300      	movs	r3, #0
 801289e:	607b      	str	r3, [r7, #4]
 80128a0:	e002      	b.n	80128a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80128a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80128a8:	687b      	ldr	r3, [r7, #4]
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	370c      	adds	r7, #12
 80128ae:	46bd      	mov	sp, r7
 80128b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b4:	4770      	bx	lr
 80128b6:	bf00      	nop
 80128b8:	2400110c 	.word	0x2400110c

080128bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80128c2:	f3ef 8305 	mrs	r3, IPSR
 80128c6:	603b      	str	r3, [r7, #0]
  return(result);
 80128c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d003      	beq.n	80128d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80128ce:	f06f 0305 	mvn.w	r3, #5
 80128d2:	607b      	str	r3, [r7, #4]
 80128d4:	e010      	b.n	80128f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80128d6:	4b0b      	ldr	r3, [pc, #44]	; (8012904 <osKernelStart+0x48>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d109      	bne.n	80128f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80128de:	f7ff ffbf 	bl	8012860 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80128e2:	4b08      	ldr	r3, [pc, #32]	; (8012904 <osKernelStart+0x48>)
 80128e4:	2202      	movs	r2, #2
 80128e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80128e8:	f001 fefc 	bl	80146e4 <vTaskStartScheduler>
      stat = osOK;
 80128ec:	2300      	movs	r3, #0
 80128ee:	607b      	str	r3, [r7, #4]
 80128f0:	e002      	b.n	80128f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80128f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80128f8:	687b      	ldr	r3, [r7, #4]
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3708      	adds	r7, #8
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	2400110c 	.word	0x2400110c

08012908 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012908:	b580      	push	{r7, lr}
 801290a:	b08e      	sub	sp, #56	; 0x38
 801290c:	af04      	add	r7, sp, #16
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	60b9      	str	r1, [r7, #8]
 8012912:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012914:	2300      	movs	r3, #0
 8012916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012918:	f3ef 8305 	mrs	r3, IPSR
 801291c:	617b      	str	r3, [r7, #20]
  return(result);
 801291e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012920:	2b00      	cmp	r3, #0
 8012922:	d17e      	bne.n	8012a22 <osThreadNew+0x11a>
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d07b      	beq.n	8012a22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801292a:	2380      	movs	r3, #128	; 0x80
 801292c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801292e:	2318      	movs	r3, #24
 8012930:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012932:	2300      	movs	r3, #0
 8012934:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801293a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d045      	beq.n	80129ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d002      	beq.n	8012950 <osThreadNew+0x48>
        name = attr->name;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	699b      	ldr	r3, [r3, #24]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d002      	beq.n	801295e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	699b      	ldr	r3, [r3, #24]
 801295c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801295e:	69fb      	ldr	r3, [r7, #28]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d008      	beq.n	8012976 <osThreadNew+0x6e>
 8012964:	69fb      	ldr	r3, [r7, #28]
 8012966:	2b38      	cmp	r3, #56	; 0x38
 8012968:	d805      	bhi.n	8012976 <osThreadNew+0x6e>
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	f003 0301 	and.w	r3, r3, #1
 8012972:	2b00      	cmp	r3, #0
 8012974:	d001      	beq.n	801297a <osThreadNew+0x72>
        return (NULL);
 8012976:	2300      	movs	r3, #0
 8012978:	e054      	b.n	8012a24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	695b      	ldr	r3, [r3, #20]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d003      	beq.n	801298a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	695b      	ldr	r3, [r3, #20]
 8012986:	089b      	lsrs	r3, r3, #2
 8012988:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	689b      	ldr	r3, [r3, #8]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d00e      	beq.n	80129b0 <osThreadNew+0xa8>
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	2b5b      	cmp	r3, #91	; 0x5b
 8012998:	d90a      	bls.n	80129b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d006      	beq.n	80129b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	695b      	ldr	r3, [r3, #20]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d002      	beq.n	80129b0 <osThreadNew+0xa8>
        mem = 1;
 80129aa:	2301      	movs	r3, #1
 80129ac:	61bb      	str	r3, [r7, #24]
 80129ae:	e010      	b.n	80129d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	689b      	ldr	r3, [r3, #8]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d10c      	bne.n	80129d2 <osThreadNew+0xca>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	68db      	ldr	r3, [r3, #12]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d108      	bne.n	80129d2 <osThreadNew+0xca>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	691b      	ldr	r3, [r3, #16]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d104      	bne.n	80129d2 <osThreadNew+0xca>
          mem = 0;
 80129c8:	2300      	movs	r3, #0
 80129ca:	61bb      	str	r3, [r7, #24]
 80129cc:	e001      	b.n	80129d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80129ce:	2300      	movs	r3, #0
 80129d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80129d2:	69bb      	ldr	r3, [r7, #24]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d110      	bne.n	80129fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80129dc:	687a      	ldr	r2, [r7, #4]
 80129de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80129e0:	9202      	str	r2, [sp, #8]
 80129e2:	9301      	str	r3, [sp, #4]
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	9300      	str	r3, [sp, #0]
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	6a3a      	ldr	r2, [r7, #32]
 80129ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80129ee:	68f8      	ldr	r0, [r7, #12]
 80129f0:	f001 fb16 	bl	8014020 <xTaskCreateStatic>
 80129f4:	4603      	mov	r3, r0
 80129f6:	613b      	str	r3, [r7, #16]
 80129f8:	e013      	b.n	8012a22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80129fa:	69bb      	ldr	r3, [r7, #24]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d110      	bne.n	8012a22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012a00:	6a3b      	ldr	r3, [r7, #32]
 8012a02:	b29a      	uxth	r2, r3
 8012a04:	f107 0310 	add.w	r3, r7, #16
 8012a08:	9301      	str	r3, [sp, #4]
 8012a0a:	69fb      	ldr	r3, [r7, #28]
 8012a0c:	9300      	str	r3, [sp, #0]
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012a12:	68f8      	ldr	r0, [r7, #12]
 8012a14:	f001 fb61 	bl	80140da <xTaskCreate>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	2b01      	cmp	r3, #1
 8012a1c:	d001      	beq.n	8012a22 <osThreadNew+0x11a>
            hTask = NULL;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012a22:	693b      	ldr	r3, [r7, #16]
}
 8012a24:	4618      	mov	r0, r3
 8012a26:	3728      	adds	r7, #40	; 0x28
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}

08012a2c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012a2c:	b480      	push	{r7}
 8012a2e:	b083      	sub	sp, #12
 8012a30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a32:	f3ef 8305 	mrs	r3, IPSR
 8012a36:	603b      	str	r3, [r7, #0]
  return(result);
 8012a38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d003      	beq.n	8012a46 <osThreadYield+0x1a>
    stat = osErrorISR;
 8012a3e:	f06f 0305 	mvn.w	r3, #5
 8012a42:	607b      	str	r3, [r7, #4]
 8012a44:	e009      	b.n	8012a5a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012a4a:	4b07      	ldr	r3, [pc, #28]	; (8012a68 <osThreadYield+0x3c>)
 8012a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a50:	601a      	str	r2, [r3, #0]
 8012a52:	f3bf 8f4f 	dsb	sy
 8012a56:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8012a5a:	687b      	ldr	r3, [r7, #4]
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	370c      	adds	r7, #12
 8012a60:	46bd      	mov	sp, r7
 8012a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a66:	4770      	bx	lr
 8012a68:	e000ed04 	.word	0xe000ed04

08012a6c <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b086      	sub	sp, #24
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a78:	f3ef 8305 	mrs	r3, IPSR
 8012a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a7e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d003      	beq.n	8012a8c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012a84:	f06f 0305 	mvn.w	r3, #5
 8012a88:	617b      	str	r3, [r7, #20]
 8012a8a:	e00b      	b.n	8012aa4 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d103      	bne.n	8012a9a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8012a92:	f06f 0303 	mvn.w	r3, #3
 8012a96:	617b      	str	r3, [r7, #20]
 8012a98:	e004      	b.n	8012aa4 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012a9e:	6938      	ldr	r0, [r7, #16]
 8012aa0:	f001 fd06 	bl	80144b0 <vTaskSuspend>
  }

  return (stat);
 8012aa4:	697b      	ldr	r3, [r7, #20]
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3718      	adds	r7, #24
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}

08012aae <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8012aae:	b580      	push	{r7, lr}
 8012ab0:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8012ab2:	2000      	movs	r0, #0
 8012ab4:	f001 fc56 	bl	8014364 <vTaskDelete>
#endif
  for (;;);
 8012ab8:	e7fe      	b.n	8012ab8 <osThreadExit+0xa>

08012aba <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012aba:	b580      	push	{r7, lr}
 8012abc:	b084      	sub	sp, #16
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ac2:	f3ef 8305 	mrs	r3, IPSR
 8012ac6:	60bb      	str	r3, [r7, #8]
  return(result);
 8012ac8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d003      	beq.n	8012ad6 <osDelay+0x1c>
    stat = osErrorISR;
 8012ace:	f06f 0305 	mvn.w	r3, #5
 8012ad2:	60fb      	str	r3, [r7, #12]
 8012ad4:	e007      	b.n	8012ae6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d002      	beq.n	8012ae6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f001 fcb1 	bl	8014448 <vTaskDelay>
    }
  }

  return (stat);
 8012ae6:	68fb      	ldr	r3, [r7, #12]
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3710      	adds	r7, #16
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b086      	sub	sp, #24
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012af8:	2300      	movs	r3, #0
 8012afa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012afc:	f3ef 8305 	mrs	r3, IPSR
 8012b00:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b02:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d12d      	bne.n	8012b64 <osEventFlagsNew+0x74>
    mem = -1;
 8012b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b0c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d015      	beq.n	8012b40 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	689b      	ldr	r3, [r3, #8]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d006      	beq.n	8012b2a <osEventFlagsNew+0x3a>
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	68db      	ldr	r3, [r3, #12]
 8012b20:	2b1f      	cmp	r3, #31
 8012b22:	d902      	bls.n	8012b2a <osEventFlagsNew+0x3a>
        mem = 1;
 8012b24:	2301      	movs	r3, #1
 8012b26:	613b      	str	r3, [r7, #16]
 8012b28:	e00c      	b.n	8012b44 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	689b      	ldr	r3, [r3, #8]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d108      	bne.n	8012b44 <osEventFlagsNew+0x54>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d104      	bne.n	8012b44 <osEventFlagsNew+0x54>
          mem = 0;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	613b      	str	r3, [r7, #16]
 8012b3e:	e001      	b.n	8012b44 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012b40:	2300      	movs	r3, #0
 8012b42:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	2b01      	cmp	r3, #1
 8012b48:	d106      	bne.n	8012b58 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	689b      	ldr	r3, [r3, #8]
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f000 fa1e 	bl	8012f90 <xEventGroupCreateStatic>
 8012b54:	6178      	str	r0, [r7, #20]
 8012b56:	e005      	b.n	8012b64 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d102      	bne.n	8012b64 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012b5e:	f000 fa4e 	bl	8012ffe <xEventGroupCreate>
 8012b62:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012b64:	697b      	ldr	r3, [r7, #20]
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3718      	adds	r7, #24
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
	...

08012b70 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b086      	sub	sp, #24
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d004      	beq.n	8012b8e <osEventFlagsSet+0x1e>
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d003      	beq.n	8012b96 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012b8e:	f06f 0303 	mvn.w	r3, #3
 8012b92:	617b      	str	r3, [r7, #20]
 8012b94:	e028      	b.n	8012be8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b96:	f3ef 8305 	mrs	r3, IPSR
 8012b9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b9c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d01d      	beq.n	8012bde <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012ba6:	f107 0308 	add.w	r3, r7, #8
 8012baa:	461a      	mov	r2, r3
 8012bac:	6839      	ldr	r1, [r7, #0]
 8012bae:	6938      	ldr	r0, [r7, #16]
 8012bb0:	f000 fbc8 	bl	8013344 <xEventGroupSetBitsFromISR>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d103      	bne.n	8012bc2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012bba:	f06f 0302 	mvn.w	r3, #2
 8012bbe:	617b      	str	r3, [r7, #20]
 8012bc0:	e012      	b.n	8012be8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d00d      	beq.n	8012be8 <osEventFlagsSet+0x78>
 8012bcc:	4b09      	ldr	r3, [pc, #36]	; (8012bf4 <osEventFlagsSet+0x84>)
 8012bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bd2:	601a      	str	r2, [r3, #0]
 8012bd4:	f3bf 8f4f 	dsb	sy
 8012bd8:	f3bf 8f6f 	isb	sy
 8012bdc:	e004      	b.n	8012be8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012bde:	6839      	ldr	r1, [r7, #0]
 8012be0:	6938      	ldr	r0, [r7, #16]
 8012be2:	f000 faf5 	bl	80131d0 <xEventGroupSetBits>
 8012be6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012be8:	697b      	ldr	r3, [r7, #20]
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3718      	adds	r7, #24
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	e000ed04 	.word	0xe000ed04

08012bf8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b08c      	sub	sp, #48	; 0x30
 8012bfc:	af02      	add	r7, sp, #8
 8012bfe:	60f8      	str	r0, [r7, #12]
 8012c00:	60b9      	str	r1, [r7, #8]
 8012c02:	607a      	str	r2, [r7, #4]
 8012c04:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012c0a:	69bb      	ldr	r3, [r7, #24]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d004      	beq.n	8012c1a <osEventFlagsWait+0x22>
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d003      	beq.n	8012c22 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012c1a:	f06f 0303 	mvn.w	r3, #3
 8012c1e:	61fb      	str	r3, [r7, #28]
 8012c20:	e04b      	b.n	8012cba <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c22:	f3ef 8305 	mrs	r3, IPSR
 8012c26:	617b      	str	r3, [r7, #20]
  return(result);
 8012c28:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d003      	beq.n	8012c36 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012c2e:	f06f 0305 	mvn.w	r3, #5
 8012c32:	61fb      	str	r3, [r7, #28]
 8012c34:	e041      	b.n	8012cba <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f003 0301 	and.w	r3, r3, #1
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d002      	beq.n	8012c46 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012c40:	2301      	movs	r3, #1
 8012c42:	627b      	str	r3, [r7, #36]	; 0x24
 8012c44:	e001      	b.n	8012c4a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012c46:	2300      	movs	r3, #0
 8012c48:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f003 0302 	and.w	r3, r3, #2
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d002      	beq.n	8012c5a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012c54:	2300      	movs	r3, #0
 8012c56:	623b      	str	r3, [r7, #32]
 8012c58:	e001      	b.n	8012c5e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012c5e:	683b      	ldr	r3, [r7, #0]
 8012c60:	9300      	str	r3, [sp, #0]
 8012c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c64:	6a3a      	ldr	r2, [r7, #32]
 8012c66:	68b9      	ldr	r1, [r7, #8]
 8012c68:	69b8      	ldr	r0, [r7, #24]
 8012c6a:	f000 f9e3 	bl	8013034 <xEventGroupWaitBits>
 8012c6e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f003 0301 	and.w	r3, r3, #1
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d010      	beq.n	8012c9c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012c7a:	68ba      	ldr	r2, [r7, #8]
 8012c7c:	69fb      	ldr	r3, [r7, #28]
 8012c7e:	4013      	ands	r3, r2
 8012c80:	68ba      	ldr	r2, [r7, #8]
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d019      	beq.n	8012cba <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d003      	beq.n	8012c94 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012c8c:	f06f 0301 	mvn.w	r3, #1
 8012c90:	61fb      	str	r3, [r7, #28]
 8012c92:	e012      	b.n	8012cba <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012c94:	f06f 0302 	mvn.w	r3, #2
 8012c98:	61fb      	str	r3, [r7, #28]
 8012c9a:	e00e      	b.n	8012cba <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012c9c:	68ba      	ldr	r2, [r7, #8]
 8012c9e:	69fb      	ldr	r3, [r7, #28]
 8012ca0:	4013      	ands	r3, r2
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d109      	bne.n	8012cba <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d003      	beq.n	8012cb4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012cac:	f06f 0301 	mvn.w	r3, #1
 8012cb0:	61fb      	str	r3, [r7, #28]
 8012cb2:	e002      	b.n	8012cba <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012cb4:	f06f 0302 	mvn.w	r3, #2
 8012cb8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012cba:	69fb      	ldr	r3, [r7, #28]
}
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	3728      	adds	r7, #40	; 0x28
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}

08012cc4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b08a      	sub	sp, #40	; 0x28
 8012cc8:	af02      	add	r7, sp, #8
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cd4:	f3ef 8305 	mrs	r3, IPSR
 8012cd8:	613b      	str	r3, [r7, #16]
  return(result);
 8012cda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d15f      	bne.n	8012da0 <osMessageQueueNew+0xdc>
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d05c      	beq.n	8012da0 <osMessageQueueNew+0xdc>
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d059      	beq.n	8012da0 <osMessageQueueNew+0xdc>
    mem = -1;
 8012cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cf0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d029      	beq.n	8012d4c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	689b      	ldr	r3, [r3, #8]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d012      	beq.n	8012d26 <osMessageQueueNew+0x62>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	68db      	ldr	r3, [r3, #12]
 8012d04:	2b4f      	cmp	r3, #79	; 0x4f
 8012d06:	d90e      	bls.n	8012d26 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d00a      	beq.n	8012d26 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	695a      	ldr	r2, [r3, #20]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	68b9      	ldr	r1, [r7, #8]
 8012d18:	fb01 f303 	mul.w	r3, r1, r3
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d302      	bcc.n	8012d26 <osMessageQueueNew+0x62>
        mem = 1;
 8012d20:	2301      	movs	r3, #1
 8012d22:	61bb      	str	r3, [r7, #24]
 8012d24:	e014      	b.n	8012d50 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	689b      	ldr	r3, [r3, #8]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d110      	bne.n	8012d50 <osMessageQueueNew+0x8c>
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	68db      	ldr	r3, [r3, #12]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d10c      	bne.n	8012d50 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d108      	bne.n	8012d50 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	695b      	ldr	r3, [r3, #20]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d104      	bne.n	8012d50 <osMessageQueueNew+0x8c>
          mem = 0;
 8012d46:	2300      	movs	r3, #0
 8012d48:	61bb      	str	r3, [r7, #24]
 8012d4a:	e001      	b.n	8012d50 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012d50:	69bb      	ldr	r3, [r7, #24]
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d10b      	bne.n	8012d6e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	691a      	ldr	r2, [r3, #16]
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	689b      	ldr	r3, [r3, #8]
 8012d5e:	2100      	movs	r1, #0
 8012d60:	9100      	str	r1, [sp, #0]
 8012d62:	68b9      	ldr	r1, [r7, #8]
 8012d64:	68f8      	ldr	r0, [r7, #12]
 8012d66:	f000 fc1d 	bl	80135a4 <xQueueGenericCreateStatic>
 8012d6a:	61f8      	str	r0, [r7, #28]
 8012d6c:	e008      	b.n	8012d80 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012d6e:	69bb      	ldr	r3, [r7, #24]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d105      	bne.n	8012d80 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012d74:	2200      	movs	r2, #0
 8012d76:	68b9      	ldr	r1, [r7, #8]
 8012d78:	68f8      	ldr	r0, [r7, #12]
 8012d7a:	f000 fc8b 	bl	8013694 <xQueueGenericCreate>
 8012d7e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012d80:	69fb      	ldr	r3, [r7, #28]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d00c      	beq.n	8012da0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d003      	beq.n	8012d94 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	617b      	str	r3, [r7, #20]
 8012d92:	e001      	b.n	8012d98 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012d94:	2300      	movs	r3, #0
 8012d96:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012d98:	6979      	ldr	r1, [r7, #20]
 8012d9a:	69f8      	ldr	r0, [r7, #28]
 8012d9c:	f001 f8e2 	bl	8013f64 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012da0:	69fb      	ldr	r3, [r7, #28]
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3720      	adds	r7, #32
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
	...

08012dac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b088      	sub	sp, #32
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	60f8      	str	r0, [r7, #12]
 8012db4:	60b9      	str	r1, [r7, #8]
 8012db6:	603b      	str	r3, [r7, #0]
 8012db8:	4613      	mov	r3, r2
 8012dba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012dc4:	f3ef 8305 	mrs	r3, IPSR
 8012dc8:	617b      	str	r3, [r7, #20]
  return(result);
 8012dca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d028      	beq.n	8012e22 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012dd0:	69bb      	ldr	r3, [r7, #24]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d005      	beq.n	8012de2 <osMessageQueuePut+0x36>
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d002      	beq.n	8012de2 <osMessageQueuePut+0x36>
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d003      	beq.n	8012dea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012de2:	f06f 0303 	mvn.w	r3, #3
 8012de6:	61fb      	str	r3, [r7, #28]
 8012de8:	e038      	b.n	8012e5c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012dea:	2300      	movs	r3, #0
 8012dec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012dee:	f107 0210 	add.w	r2, r7, #16
 8012df2:	2300      	movs	r3, #0
 8012df4:	68b9      	ldr	r1, [r7, #8]
 8012df6:	69b8      	ldr	r0, [r7, #24]
 8012df8:	f000 fda8 	bl	801394c <xQueueGenericSendFromISR>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	d003      	beq.n	8012e0a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012e02:	f06f 0302 	mvn.w	r3, #2
 8012e06:	61fb      	str	r3, [r7, #28]
 8012e08:	e028      	b.n	8012e5c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d025      	beq.n	8012e5c <osMessageQueuePut+0xb0>
 8012e10:	4b15      	ldr	r3, [pc, #84]	; (8012e68 <osMessageQueuePut+0xbc>)
 8012e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e16:	601a      	str	r2, [r3, #0]
 8012e18:	f3bf 8f4f 	dsb	sy
 8012e1c:	f3bf 8f6f 	isb	sy
 8012e20:	e01c      	b.n	8012e5c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012e22:	69bb      	ldr	r3, [r7, #24]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d002      	beq.n	8012e2e <osMessageQueuePut+0x82>
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d103      	bne.n	8012e36 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012e2e:	f06f 0303 	mvn.w	r3, #3
 8012e32:	61fb      	str	r3, [r7, #28]
 8012e34:	e012      	b.n	8012e5c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012e36:	2300      	movs	r3, #0
 8012e38:	683a      	ldr	r2, [r7, #0]
 8012e3a:	68b9      	ldr	r1, [r7, #8]
 8012e3c:	69b8      	ldr	r0, [r7, #24]
 8012e3e:	f000 fc87 	bl	8013750 <xQueueGenericSend>
 8012e42:	4603      	mov	r3, r0
 8012e44:	2b01      	cmp	r3, #1
 8012e46:	d009      	beq.n	8012e5c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d003      	beq.n	8012e56 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012e4e:	f06f 0301 	mvn.w	r3, #1
 8012e52:	61fb      	str	r3, [r7, #28]
 8012e54:	e002      	b.n	8012e5c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012e56:	f06f 0302 	mvn.w	r3, #2
 8012e5a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012e5c:	69fb      	ldr	r3, [r7, #28]
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	3720      	adds	r7, #32
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd80      	pop	{r7, pc}
 8012e66:	bf00      	nop
 8012e68:	e000ed04 	.word	0xe000ed04

08012e6c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b088      	sub	sp, #32
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	607a      	str	r2, [r7, #4]
 8012e78:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e82:	f3ef 8305 	mrs	r3, IPSR
 8012e86:	617b      	str	r3, [r7, #20]
  return(result);
 8012e88:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d028      	beq.n	8012ee0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e8e:	69bb      	ldr	r3, [r7, #24]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d005      	beq.n	8012ea0 <osMessageQueueGet+0x34>
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d002      	beq.n	8012ea0 <osMessageQueueGet+0x34>
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d003      	beq.n	8012ea8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012ea0:	f06f 0303 	mvn.w	r3, #3
 8012ea4:	61fb      	str	r3, [r7, #28]
 8012ea6:	e037      	b.n	8012f18 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012eac:	f107 0310 	add.w	r3, r7, #16
 8012eb0:	461a      	mov	r2, r3
 8012eb2:	68b9      	ldr	r1, [r7, #8]
 8012eb4:	69b8      	ldr	r0, [r7, #24]
 8012eb6:	f000 fec5 	bl	8013c44 <xQueueReceiveFromISR>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	2b01      	cmp	r3, #1
 8012ebe:	d003      	beq.n	8012ec8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012ec0:	f06f 0302 	mvn.w	r3, #2
 8012ec4:	61fb      	str	r3, [r7, #28]
 8012ec6:	e027      	b.n	8012f18 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d024      	beq.n	8012f18 <osMessageQueueGet+0xac>
 8012ece:	4b15      	ldr	r3, [pc, #84]	; (8012f24 <osMessageQueueGet+0xb8>)
 8012ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ed4:	601a      	str	r2, [r3, #0]
 8012ed6:	f3bf 8f4f 	dsb	sy
 8012eda:	f3bf 8f6f 	isb	sy
 8012ede:	e01b      	b.n	8012f18 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d002      	beq.n	8012eec <osMessageQueueGet+0x80>
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d103      	bne.n	8012ef4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012eec:	f06f 0303 	mvn.w	r3, #3
 8012ef0:	61fb      	str	r3, [r7, #28]
 8012ef2:	e011      	b.n	8012f18 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012ef4:	683a      	ldr	r2, [r7, #0]
 8012ef6:	68b9      	ldr	r1, [r7, #8]
 8012ef8:	69b8      	ldr	r0, [r7, #24]
 8012efa:	f000 fdc3 	bl	8013a84 <xQueueReceive>
 8012efe:	4603      	mov	r3, r0
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d009      	beq.n	8012f18 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d003      	beq.n	8012f12 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012f0a:	f06f 0301 	mvn.w	r3, #1
 8012f0e:	61fb      	str	r3, [r7, #28]
 8012f10:	e002      	b.n	8012f18 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012f12:	f06f 0302 	mvn.w	r3, #2
 8012f16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012f18:	69fb      	ldr	r3, [r7, #28]
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3720      	adds	r7, #32
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	bf00      	nop
 8012f24:	e000ed04 	.word	0xe000ed04

08012f28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012f28:	b480      	push	{r7}
 8012f2a:	b085      	sub	sp, #20
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	60f8      	str	r0, [r7, #12]
 8012f30:	60b9      	str	r1, [r7, #8]
 8012f32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	4a07      	ldr	r2, [pc, #28]	; (8012f54 <vApplicationGetIdleTaskMemory+0x2c>)
 8012f38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	4a06      	ldr	r2, [pc, #24]	; (8012f58 <vApplicationGetIdleTaskMemory+0x30>)
 8012f3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2280      	movs	r2, #128	; 0x80
 8012f44:	601a      	str	r2, [r3, #0]
}
 8012f46:	bf00      	nop
 8012f48:	3714      	adds	r7, #20
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f50:	4770      	bx	lr
 8012f52:	bf00      	nop
 8012f54:	24001110 	.word	0x24001110
 8012f58:	2400116c 	.word	0x2400116c

08012f5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012f5c:	b480      	push	{r7}
 8012f5e:	b085      	sub	sp, #20
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	60f8      	str	r0, [r7, #12]
 8012f64:	60b9      	str	r1, [r7, #8]
 8012f66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	4a07      	ldr	r2, [pc, #28]	; (8012f88 <vApplicationGetTimerTaskMemory+0x2c>)
 8012f6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	4a06      	ldr	r2, [pc, #24]	; (8012f8c <vApplicationGetTimerTaskMemory+0x30>)
 8012f72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012f7a:	601a      	str	r2, [r3, #0]
}
 8012f7c:	bf00      	nop
 8012f7e:	3714      	adds	r7, #20
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr
 8012f88:	2400136c 	.word	0x2400136c
 8012f8c:	240013c8 	.word	0x240013c8

08012f90 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b086      	sub	sp, #24
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d10a      	bne.n	8012fb4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa2:	f383 8811 	msr	BASEPRI, r3
 8012fa6:	f3bf 8f6f 	isb	sy
 8012faa:	f3bf 8f4f 	dsb	sy
 8012fae:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012fb0:	bf00      	nop
 8012fb2:	e7fe      	b.n	8012fb2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8012fb4:	2320      	movs	r3, #32
 8012fb6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8012fb8:	68bb      	ldr	r3, [r7, #8]
 8012fba:	2b20      	cmp	r3, #32
 8012fbc:	d00a      	beq.n	8012fd4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8012fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc2:	f383 8811 	msr	BASEPRI, r3
 8012fc6:	f3bf 8f6f 	isb	sy
 8012fca:	f3bf 8f4f 	dsb	sy
 8012fce:	60fb      	str	r3, [r7, #12]
}
 8012fd0:	bf00      	nop
 8012fd2:	e7fe      	b.n	8012fd2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d00a      	beq.n	8012ff4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	3304      	adds	r3, #4
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f000 f9bf 	bl	801336c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8012ff4:	697b      	ldr	r3, [r7, #20]
	}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3718      	adds	r7, #24
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012ffe:	b580      	push	{r7, lr}
 8013000:	b082      	sub	sp, #8
 8013002:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013004:	2020      	movs	r0, #32
 8013006:	f002 ff0f 	bl	8015e28 <pvPortMalloc>
 801300a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d00a      	beq.n	8013028 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2200      	movs	r2, #0
 8013016:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	3304      	adds	r3, #4
 801301c:	4618      	mov	r0, r3
 801301e:	f000 f9a5 	bl	801336c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	2200      	movs	r2, #0
 8013026:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013028:	687b      	ldr	r3, [r7, #4]
	}
 801302a:	4618      	mov	r0, r3
 801302c:	3708      	adds	r7, #8
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}
	...

08013034 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b090      	sub	sp, #64	; 0x40
 8013038:	af00      	add	r7, sp, #0
 801303a:	60f8      	str	r0, [r7, #12]
 801303c:	60b9      	str	r1, [r7, #8]
 801303e:	607a      	str	r2, [r7, #4]
 8013040:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013046:	2300      	movs	r3, #0
 8013048:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801304a:	2300      	movs	r3, #0
 801304c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d10a      	bne.n	801306a <xEventGroupWaitBits+0x36>
	__asm volatile
 8013054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013058:	f383 8811 	msr	BASEPRI, r3
 801305c:	f3bf 8f6f 	isb	sy
 8013060:	f3bf 8f4f 	dsb	sy
 8013064:	623b      	str	r3, [r7, #32]
}
 8013066:	bf00      	nop
 8013068:	e7fe      	b.n	8013068 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013070:	2b00      	cmp	r3, #0
 8013072:	d00a      	beq.n	801308a <xEventGroupWaitBits+0x56>
	__asm volatile
 8013074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013078:	f383 8811 	msr	BASEPRI, r3
 801307c:	f3bf 8f6f 	isb	sy
 8013080:	f3bf 8f4f 	dsb	sy
 8013084:	61fb      	str	r3, [r7, #28]
}
 8013086:	bf00      	nop
 8013088:	e7fe      	b.n	8013088 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d10a      	bne.n	80130a6 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013094:	f383 8811 	msr	BASEPRI, r3
 8013098:	f3bf 8f6f 	isb	sy
 801309c:	f3bf 8f4f 	dsb	sy
 80130a0:	61bb      	str	r3, [r7, #24]
}
 80130a2:	bf00      	nop
 80130a4:	e7fe      	b.n	80130a4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80130a6:	f002 f80b 	bl	80150c0 <xTaskGetSchedulerState>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d102      	bne.n	80130b6 <xEventGroupWaitBits+0x82>
 80130b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d101      	bne.n	80130ba <xEventGroupWaitBits+0x86>
 80130b6:	2301      	movs	r3, #1
 80130b8:	e000      	b.n	80130bc <xEventGroupWaitBits+0x88>
 80130ba:	2300      	movs	r3, #0
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d10a      	bne.n	80130d6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80130c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c4:	f383 8811 	msr	BASEPRI, r3
 80130c8:	f3bf 8f6f 	isb	sy
 80130cc:	f3bf 8f4f 	dsb	sy
 80130d0:	617b      	str	r3, [r7, #20]
}
 80130d2:	bf00      	nop
 80130d4:	e7fe      	b.n	80130d4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80130d6:	f001 fb6b 	bl	80147b0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80130da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80130e0:	683a      	ldr	r2, [r7, #0]
 80130e2:	68b9      	ldr	r1, [r7, #8]
 80130e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130e6:	f000 f90b 	bl	8013300 <prvTestWaitCondition>
 80130ea:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80130ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d00e      	beq.n	8013110 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80130f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80130f6:	2300      	movs	r3, #0
 80130f8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d028      	beq.n	8013152 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	43db      	mvns	r3, r3
 8013108:	401a      	ands	r2, r3
 801310a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801310c:	601a      	str	r2, [r3, #0]
 801310e:	e020      	b.n	8013152 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013112:	2b00      	cmp	r3, #0
 8013114:	d104      	bne.n	8013120 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013118:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801311a:	2301      	movs	r3, #1
 801311c:	633b      	str	r3, [r7, #48]	; 0x30
 801311e:	e018      	b.n	8013152 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d003      	beq.n	801312e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013128:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801312c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d003      	beq.n	801313c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801313a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801313c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801313e:	1d18      	adds	r0, r3, #4
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013144:	4313      	orrs	r3, r2
 8013146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013148:	4619      	mov	r1, r3
 801314a:	f001 fd31 	bl	8014bb0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801314e:	2300      	movs	r3, #0
 8013150:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013152:	f001 fb3b 	bl	80147cc <xTaskResumeAll>
 8013156:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801315a:	2b00      	cmp	r3, #0
 801315c:	d031      	beq.n	80131c2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013160:	2b00      	cmp	r3, #0
 8013162:	d107      	bne.n	8013174 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013164:	4b19      	ldr	r3, [pc, #100]	; (80131cc <xEventGroupWaitBits+0x198>)
 8013166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801316a:	601a      	str	r2, [r3, #0]
 801316c:	f3bf 8f4f 	dsb	sy
 8013170:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013174:	f002 f830 	bl	80151d8 <uxTaskResetEventItemValue>
 8013178:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801317a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801317c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013180:	2b00      	cmp	r3, #0
 8013182:	d11a      	bne.n	80131ba <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013184:	f002 fd2e 	bl	8015be4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801318e:	683a      	ldr	r2, [r7, #0]
 8013190:	68b9      	ldr	r1, [r7, #8]
 8013192:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013194:	f000 f8b4 	bl	8013300 <prvTestWaitCondition>
 8013198:	4603      	mov	r3, r0
 801319a:	2b00      	cmp	r3, #0
 801319c:	d009      	beq.n	80131b2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d006      	beq.n	80131b2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80131a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131a6:	681a      	ldr	r2, [r3, #0]
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	43db      	mvns	r3, r3
 80131ac:	401a      	ands	r2, r3
 80131ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131b0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80131b2:	2301      	movs	r3, #1
 80131b4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80131b6:	f002 fd45 	bl	8015c44 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80131ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80131c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80131c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3740      	adds	r7, #64	; 0x40
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}
 80131cc:	e000ed04 	.word	0xe000ed04

080131d0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b08e      	sub	sp, #56	; 0x38
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
 80131d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80131da:	2300      	movs	r3, #0
 80131dc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80131e2:	2300      	movs	r3, #0
 80131e4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d10a      	bne.n	8013202 <xEventGroupSetBits+0x32>
	__asm volatile
 80131ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f0:	f383 8811 	msr	BASEPRI, r3
 80131f4:	f3bf 8f6f 	isb	sy
 80131f8:	f3bf 8f4f 	dsb	sy
 80131fc:	613b      	str	r3, [r7, #16]
}
 80131fe:	bf00      	nop
 8013200:	e7fe      	b.n	8013200 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013208:	2b00      	cmp	r3, #0
 801320a:	d00a      	beq.n	8013222 <xEventGroupSetBits+0x52>
	__asm volatile
 801320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013210:	f383 8811 	msr	BASEPRI, r3
 8013214:	f3bf 8f6f 	isb	sy
 8013218:	f3bf 8f4f 	dsb	sy
 801321c:	60fb      	str	r3, [r7, #12]
}
 801321e:	bf00      	nop
 8013220:	e7fe      	b.n	8013220 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013224:	3304      	adds	r3, #4
 8013226:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801322a:	3308      	adds	r3, #8
 801322c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801322e:	f001 fabf 	bl	80147b0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801323a:	681a      	ldr	r2, [r3, #0]
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	431a      	orrs	r2, r3
 8013240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013242:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013244:	e03c      	b.n	80132c0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801324c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013252:	2300      	movs	r3, #0
 8013254:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013256:	69bb      	ldr	r3, [r7, #24]
 8013258:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801325c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801325e:	69bb      	ldr	r3, [r7, #24]
 8013260:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013264:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801326c:	2b00      	cmp	r3, #0
 801326e:	d108      	bne.n	8013282 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013272:	681a      	ldr	r2, [r3, #0]
 8013274:	69bb      	ldr	r3, [r7, #24]
 8013276:	4013      	ands	r3, r2
 8013278:	2b00      	cmp	r3, #0
 801327a:	d00b      	beq.n	8013294 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 801327c:	2301      	movs	r3, #1
 801327e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013280:	e008      	b.n	8013294 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013284:	681a      	ldr	r2, [r3, #0]
 8013286:	69bb      	ldr	r3, [r7, #24]
 8013288:	4013      	ands	r3, r2
 801328a:	69ba      	ldr	r2, [r7, #24]
 801328c:	429a      	cmp	r2, r3
 801328e:	d101      	bne.n	8013294 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013290:	2301      	movs	r3, #1
 8013292:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013296:	2b00      	cmp	r3, #0
 8013298:	d010      	beq.n	80132bc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801329a:	697b      	ldr	r3, [r7, #20]
 801329c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d003      	beq.n	80132ac <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80132a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	4313      	orrs	r3, r2
 80132aa:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80132ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80132b4:	4619      	mov	r1, r3
 80132b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80132b8:	f001 fd46 	bl	8014d48 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80132bc:	69fb      	ldr	r3, [r7, #28]
 80132be:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80132c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132c2:	6a3b      	ldr	r3, [r7, #32]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d1be      	bne.n	8013246 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80132c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ce:	43db      	mvns	r3, r3
 80132d0:	401a      	ands	r2, r3
 80132d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80132d6:	f001 fa79 	bl	80147cc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80132da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132dc:	681b      	ldr	r3, [r3, #0]
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3738      	adds	r7, #56	; 0x38
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}

080132e6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80132e6:	b580      	push	{r7, lr}
 80132e8:	b082      	sub	sp, #8
 80132ea:	af00      	add	r7, sp, #0
 80132ec:	6078      	str	r0, [r7, #4]
 80132ee:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80132f0:	6839      	ldr	r1, [r7, #0]
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f7ff ff6c 	bl	80131d0 <xEventGroupSetBits>
}
 80132f8:	bf00      	nop
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013300:	b480      	push	{r7}
 8013302:	b087      	sub	sp, #28
 8013304:	af00      	add	r7, sp, #0
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	60b9      	str	r1, [r7, #8]
 801330a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801330c:	2300      	movs	r3, #0
 801330e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d107      	bne.n	8013326 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013316:	68fa      	ldr	r2, [r7, #12]
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	4013      	ands	r3, r2
 801331c:	2b00      	cmp	r3, #0
 801331e:	d00a      	beq.n	8013336 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013320:	2301      	movs	r3, #1
 8013322:	617b      	str	r3, [r7, #20]
 8013324:	e007      	b.n	8013336 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013326:	68fa      	ldr	r2, [r7, #12]
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	4013      	ands	r3, r2
 801332c:	68ba      	ldr	r2, [r7, #8]
 801332e:	429a      	cmp	r2, r3
 8013330:	d101      	bne.n	8013336 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013332:	2301      	movs	r3, #1
 8013334:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013336:	697b      	ldr	r3, [r7, #20]
}
 8013338:	4618      	mov	r0, r3
 801333a:	371c      	adds	r7, #28
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr

08013344 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013344:	b580      	push	{r7, lr}
 8013346:	b086      	sub	sp, #24
 8013348:	af00      	add	r7, sp, #0
 801334a:	60f8      	str	r0, [r7, #12]
 801334c:	60b9      	str	r1, [r7, #8]
 801334e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	68ba      	ldr	r2, [r7, #8]
 8013354:	68f9      	ldr	r1, [r7, #12]
 8013356:	4804      	ldr	r0, [pc, #16]	; (8013368 <xEventGroupSetBitsFromISR+0x24>)
 8013358:	f002 faf8 	bl	801594c <xTimerPendFunctionCallFromISR>
 801335c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801335e:	697b      	ldr	r3, [r7, #20]
	}
 8013360:	4618      	mov	r0, r3
 8013362:	3718      	adds	r7, #24
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}
 8013368:	080132e7 	.word	0x080132e7

0801336c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801336c:	b480      	push	{r7}
 801336e:	b083      	sub	sp, #12
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f103 0208 	add.w	r2, r3, #8
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013384:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f103 0208 	add.w	r2, r3, #8
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f103 0208 	add.w	r2, r3, #8
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2200      	movs	r2, #0
 801339e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80133a0:	bf00      	nop
 80133a2:	370c      	adds	r7, #12
 80133a4:	46bd      	mov	sp, r7
 80133a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133aa:	4770      	bx	lr

080133ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80133ac:	b480      	push	{r7}
 80133ae:	b083      	sub	sp, #12
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2200      	movs	r2, #0
 80133b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80133ba:	bf00      	nop
 80133bc:	370c      	adds	r7, #12
 80133be:	46bd      	mov	sp, r7
 80133c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c4:	4770      	bx	lr

080133c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80133c6:	b480      	push	{r7}
 80133c8:	b085      	sub	sp, #20
 80133ca:	af00      	add	r7, sp, #0
 80133cc:	6078      	str	r0, [r7, #4]
 80133ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	685b      	ldr	r3, [r3, #4]
 80133d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	68fa      	ldr	r2, [r7, #12]
 80133da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	689a      	ldr	r2, [r3, #8]
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	689b      	ldr	r3, [r3, #8]
 80133e8:	683a      	ldr	r2, [r7, #0]
 80133ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	683a      	ldr	r2, [r7, #0]
 80133f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	687a      	ldr	r2, [r7, #4]
 80133f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	1c5a      	adds	r2, r3, #1
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	601a      	str	r2, [r3, #0]
}
 8013402:	bf00      	nop
 8013404:	3714      	adds	r7, #20
 8013406:	46bd      	mov	sp, r7
 8013408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340c:	4770      	bx	lr

0801340e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801340e:	b480      	push	{r7}
 8013410:	b085      	sub	sp, #20
 8013412:	af00      	add	r7, sp, #0
 8013414:	6078      	str	r0, [r7, #4]
 8013416:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013424:	d103      	bne.n	801342e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	691b      	ldr	r3, [r3, #16]
 801342a:	60fb      	str	r3, [r7, #12]
 801342c:	e00c      	b.n	8013448 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	3308      	adds	r3, #8
 8013432:	60fb      	str	r3, [r7, #12]
 8013434:	e002      	b.n	801343c <vListInsert+0x2e>
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	685b      	ldr	r3, [r3, #4]
 801343a:	60fb      	str	r3, [r7, #12]
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	685b      	ldr	r3, [r3, #4]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	68ba      	ldr	r2, [r7, #8]
 8013444:	429a      	cmp	r2, r3
 8013446:	d2f6      	bcs.n	8013436 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	685a      	ldr	r2, [r3, #4]
 801344c:	683b      	ldr	r3, [r7, #0]
 801344e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	683a      	ldr	r2, [r7, #0]
 8013456:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	68fa      	ldr	r2, [r7, #12]
 801345c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	683a      	ldr	r2, [r7, #0]
 8013462:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	687a      	ldr	r2, [r7, #4]
 8013468:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	1c5a      	adds	r2, r3, #1
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	601a      	str	r2, [r3, #0]
}
 8013474:	bf00      	nop
 8013476:	3714      	adds	r7, #20
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr

08013480 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013480:	b480      	push	{r7}
 8013482:	b085      	sub	sp, #20
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	691b      	ldr	r3, [r3, #16]
 801348c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	685b      	ldr	r3, [r3, #4]
 8013492:	687a      	ldr	r2, [r7, #4]
 8013494:	6892      	ldr	r2, [r2, #8]
 8013496:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	689b      	ldr	r3, [r3, #8]
 801349c:	687a      	ldr	r2, [r7, #4]
 801349e:	6852      	ldr	r2, [r2, #4]
 80134a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	685b      	ldr	r3, [r3, #4]
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d103      	bne.n	80134b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	689a      	ldr	r2, [r3, #8]
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2200      	movs	r2, #0
 80134b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	1e5a      	subs	r2, r3, #1
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	681b      	ldr	r3, [r3, #0]
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3714      	adds	r7, #20
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr

080134d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b084      	sub	sp, #16
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d10a      	bne.n	80134fe <xQueueGenericReset+0x2a>
	__asm volatile
 80134e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ec:	f383 8811 	msr	BASEPRI, r3
 80134f0:	f3bf 8f6f 	isb	sy
 80134f4:	f3bf 8f4f 	dsb	sy
 80134f8:	60bb      	str	r3, [r7, #8]
}
 80134fa:	bf00      	nop
 80134fc:	e7fe      	b.n	80134fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80134fe:	f002 fb71 	bl	8015be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	681a      	ldr	r2, [r3, #0]
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801350a:	68f9      	ldr	r1, [r7, #12]
 801350c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801350e:	fb01 f303 	mul.w	r3, r1, r3
 8013512:	441a      	add	r2, r3
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2200      	movs	r2, #0
 801351c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	681a      	ldr	r2, [r3, #0]
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	681a      	ldr	r2, [r3, #0]
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801352e:	3b01      	subs	r3, #1
 8013530:	68f9      	ldr	r1, [r7, #12]
 8013532:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013534:	fb01 f303 	mul.w	r3, r1, r3
 8013538:	441a      	add	r2, r3
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	22ff      	movs	r2, #255	; 0xff
 8013542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	22ff      	movs	r2, #255	; 0xff
 801354a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d114      	bne.n	801357e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	691b      	ldr	r3, [r3, #16]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d01a      	beq.n	8013592 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	3310      	adds	r3, #16
 8013560:	4618      	mov	r0, r3
 8013562:	f001 fb8d 	bl	8014c80 <xTaskRemoveFromEventList>
 8013566:	4603      	mov	r3, r0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d012      	beq.n	8013592 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801356c:	4b0c      	ldr	r3, [pc, #48]	; (80135a0 <xQueueGenericReset+0xcc>)
 801356e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013572:	601a      	str	r2, [r3, #0]
 8013574:	f3bf 8f4f 	dsb	sy
 8013578:	f3bf 8f6f 	isb	sy
 801357c:	e009      	b.n	8013592 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	3310      	adds	r3, #16
 8013582:	4618      	mov	r0, r3
 8013584:	f7ff fef2 	bl	801336c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	3324      	adds	r3, #36	; 0x24
 801358c:	4618      	mov	r0, r3
 801358e:	f7ff feed 	bl	801336c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013592:	f002 fb57 	bl	8015c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013596:	2301      	movs	r3, #1
}
 8013598:	4618      	mov	r0, r3
 801359a:	3710      	adds	r7, #16
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}
 80135a0:	e000ed04 	.word	0xe000ed04

080135a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b08e      	sub	sp, #56	; 0x38
 80135a8:	af02      	add	r7, sp, #8
 80135aa:	60f8      	str	r0, [r7, #12]
 80135ac:	60b9      	str	r1, [r7, #8]
 80135ae:	607a      	str	r2, [r7, #4]
 80135b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d10a      	bne.n	80135ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80135b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135bc:	f383 8811 	msr	BASEPRI, r3
 80135c0:	f3bf 8f6f 	isb	sy
 80135c4:	f3bf 8f4f 	dsb	sy
 80135c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80135ca:	bf00      	nop
 80135cc:	e7fe      	b.n	80135cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d10a      	bne.n	80135ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80135d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d8:	f383 8811 	msr	BASEPRI, r3
 80135dc:	f3bf 8f6f 	isb	sy
 80135e0:	f3bf 8f4f 	dsb	sy
 80135e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80135e6:	bf00      	nop
 80135e8:	e7fe      	b.n	80135e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d002      	beq.n	80135f6 <xQueueGenericCreateStatic+0x52>
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d001      	beq.n	80135fa <xQueueGenericCreateStatic+0x56>
 80135f6:	2301      	movs	r3, #1
 80135f8:	e000      	b.n	80135fc <xQueueGenericCreateStatic+0x58>
 80135fa:	2300      	movs	r3, #0
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d10a      	bne.n	8013616 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013604:	f383 8811 	msr	BASEPRI, r3
 8013608:	f3bf 8f6f 	isb	sy
 801360c:	f3bf 8f4f 	dsb	sy
 8013610:	623b      	str	r3, [r7, #32]
}
 8013612:	bf00      	nop
 8013614:	e7fe      	b.n	8013614 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d102      	bne.n	8013622 <xQueueGenericCreateStatic+0x7e>
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d101      	bne.n	8013626 <xQueueGenericCreateStatic+0x82>
 8013622:	2301      	movs	r3, #1
 8013624:	e000      	b.n	8013628 <xQueueGenericCreateStatic+0x84>
 8013626:	2300      	movs	r3, #0
 8013628:	2b00      	cmp	r3, #0
 801362a:	d10a      	bne.n	8013642 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013630:	f383 8811 	msr	BASEPRI, r3
 8013634:	f3bf 8f6f 	isb	sy
 8013638:	f3bf 8f4f 	dsb	sy
 801363c:	61fb      	str	r3, [r7, #28]
}
 801363e:	bf00      	nop
 8013640:	e7fe      	b.n	8013640 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013642:	2350      	movs	r3, #80	; 0x50
 8013644:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	2b50      	cmp	r3, #80	; 0x50
 801364a:	d00a      	beq.n	8013662 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013650:	f383 8811 	msr	BASEPRI, r3
 8013654:	f3bf 8f6f 	isb	sy
 8013658:	f3bf 8f4f 	dsb	sy
 801365c:	61bb      	str	r3, [r7, #24]
}
 801365e:	bf00      	nop
 8013660:	e7fe      	b.n	8013660 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013662:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801366a:	2b00      	cmp	r3, #0
 801366c:	d00d      	beq.n	801368a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013670:	2201      	movs	r2, #1
 8013672:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013676:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801367c:	9300      	str	r3, [sp, #0]
 801367e:	4613      	mov	r3, r2
 8013680:	687a      	ldr	r2, [r7, #4]
 8013682:	68b9      	ldr	r1, [r7, #8]
 8013684:	68f8      	ldr	r0, [r7, #12]
 8013686:	f000 f83f 	bl	8013708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801368c:	4618      	mov	r0, r3
 801368e:	3730      	adds	r7, #48	; 0x30
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}

08013694 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013694:	b580      	push	{r7, lr}
 8013696:	b08a      	sub	sp, #40	; 0x28
 8013698:	af02      	add	r7, sp, #8
 801369a:	60f8      	str	r0, [r7, #12]
 801369c:	60b9      	str	r1, [r7, #8]
 801369e:	4613      	mov	r3, r2
 80136a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d10a      	bne.n	80136be <xQueueGenericCreate+0x2a>
	__asm volatile
 80136a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ac:	f383 8811 	msr	BASEPRI, r3
 80136b0:	f3bf 8f6f 	isb	sy
 80136b4:	f3bf 8f4f 	dsb	sy
 80136b8:	613b      	str	r3, [r7, #16]
}
 80136ba:	bf00      	nop
 80136bc:	e7fe      	b.n	80136bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	68ba      	ldr	r2, [r7, #8]
 80136c2:	fb02 f303 	mul.w	r3, r2, r3
 80136c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80136c8:	69fb      	ldr	r3, [r7, #28]
 80136ca:	3350      	adds	r3, #80	; 0x50
 80136cc:	4618      	mov	r0, r3
 80136ce:	f002 fbab 	bl	8015e28 <pvPortMalloc>
 80136d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80136d4:	69bb      	ldr	r3, [r7, #24]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d011      	beq.n	80136fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80136da:	69bb      	ldr	r3, [r7, #24]
 80136dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	3350      	adds	r3, #80	; 0x50
 80136e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80136e4:	69bb      	ldr	r3, [r7, #24]
 80136e6:	2200      	movs	r2, #0
 80136e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80136ec:	79fa      	ldrb	r2, [r7, #7]
 80136ee:	69bb      	ldr	r3, [r7, #24]
 80136f0:	9300      	str	r3, [sp, #0]
 80136f2:	4613      	mov	r3, r2
 80136f4:	697a      	ldr	r2, [r7, #20]
 80136f6:	68b9      	ldr	r1, [r7, #8]
 80136f8:	68f8      	ldr	r0, [r7, #12]
 80136fa:	f000 f805 	bl	8013708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80136fe:	69bb      	ldr	r3, [r7, #24]
	}
 8013700:	4618      	mov	r0, r3
 8013702:	3720      	adds	r7, #32
 8013704:	46bd      	mov	sp, r7
 8013706:	bd80      	pop	{r7, pc}

08013708 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b084      	sub	sp, #16
 801370c:	af00      	add	r7, sp, #0
 801370e:	60f8      	str	r0, [r7, #12]
 8013710:	60b9      	str	r1, [r7, #8]
 8013712:	607a      	str	r2, [r7, #4]
 8013714:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d103      	bne.n	8013724 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801371c:	69bb      	ldr	r3, [r7, #24]
 801371e:	69ba      	ldr	r2, [r7, #24]
 8013720:	601a      	str	r2, [r3, #0]
 8013722:	e002      	b.n	801372a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013724:	69bb      	ldr	r3, [r7, #24]
 8013726:	687a      	ldr	r2, [r7, #4]
 8013728:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801372a:	69bb      	ldr	r3, [r7, #24]
 801372c:	68fa      	ldr	r2, [r7, #12]
 801372e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013730:	69bb      	ldr	r3, [r7, #24]
 8013732:	68ba      	ldr	r2, [r7, #8]
 8013734:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013736:	2101      	movs	r1, #1
 8013738:	69b8      	ldr	r0, [r7, #24]
 801373a:	f7ff fecb 	bl	80134d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	78fa      	ldrb	r2, [r7, #3]
 8013742:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013746:	bf00      	nop
 8013748:	3710      	adds	r7, #16
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}
	...

08013750 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b08e      	sub	sp, #56	; 0x38
 8013754:	af00      	add	r7, sp, #0
 8013756:	60f8      	str	r0, [r7, #12]
 8013758:	60b9      	str	r1, [r7, #8]
 801375a:	607a      	str	r2, [r7, #4]
 801375c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801375e:	2300      	movs	r3, #0
 8013760:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013768:	2b00      	cmp	r3, #0
 801376a:	d10a      	bne.n	8013782 <xQueueGenericSend+0x32>
	__asm volatile
 801376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013770:	f383 8811 	msr	BASEPRI, r3
 8013774:	f3bf 8f6f 	isb	sy
 8013778:	f3bf 8f4f 	dsb	sy
 801377c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801377e:	bf00      	nop
 8013780:	e7fe      	b.n	8013780 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d103      	bne.n	8013790 <xQueueGenericSend+0x40>
 8013788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801378c:	2b00      	cmp	r3, #0
 801378e:	d101      	bne.n	8013794 <xQueueGenericSend+0x44>
 8013790:	2301      	movs	r3, #1
 8013792:	e000      	b.n	8013796 <xQueueGenericSend+0x46>
 8013794:	2300      	movs	r3, #0
 8013796:	2b00      	cmp	r3, #0
 8013798:	d10a      	bne.n	80137b0 <xQueueGenericSend+0x60>
	__asm volatile
 801379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801379e:	f383 8811 	msr	BASEPRI, r3
 80137a2:	f3bf 8f6f 	isb	sy
 80137a6:	f3bf 8f4f 	dsb	sy
 80137aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80137ac:	bf00      	nop
 80137ae:	e7fe      	b.n	80137ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	2b02      	cmp	r3, #2
 80137b4:	d103      	bne.n	80137be <xQueueGenericSend+0x6e>
 80137b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137ba:	2b01      	cmp	r3, #1
 80137bc:	d101      	bne.n	80137c2 <xQueueGenericSend+0x72>
 80137be:	2301      	movs	r3, #1
 80137c0:	e000      	b.n	80137c4 <xQueueGenericSend+0x74>
 80137c2:	2300      	movs	r3, #0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d10a      	bne.n	80137de <xQueueGenericSend+0x8e>
	__asm volatile
 80137c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137cc:	f383 8811 	msr	BASEPRI, r3
 80137d0:	f3bf 8f6f 	isb	sy
 80137d4:	f3bf 8f4f 	dsb	sy
 80137d8:	623b      	str	r3, [r7, #32]
}
 80137da:	bf00      	nop
 80137dc:	e7fe      	b.n	80137dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80137de:	f001 fc6f 	bl	80150c0 <xTaskGetSchedulerState>
 80137e2:	4603      	mov	r3, r0
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d102      	bne.n	80137ee <xQueueGenericSend+0x9e>
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d101      	bne.n	80137f2 <xQueueGenericSend+0xa2>
 80137ee:	2301      	movs	r3, #1
 80137f0:	e000      	b.n	80137f4 <xQueueGenericSend+0xa4>
 80137f2:	2300      	movs	r3, #0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d10a      	bne.n	801380e <xQueueGenericSend+0xbe>
	__asm volatile
 80137f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137fc:	f383 8811 	msr	BASEPRI, r3
 8013800:	f3bf 8f6f 	isb	sy
 8013804:	f3bf 8f4f 	dsb	sy
 8013808:	61fb      	str	r3, [r7, #28]
}
 801380a:	bf00      	nop
 801380c:	e7fe      	b.n	801380c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801380e:	f002 f9e9 	bl	8015be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801381a:	429a      	cmp	r2, r3
 801381c:	d302      	bcc.n	8013824 <xQueueGenericSend+0xd4>
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	2b02      	cmp	r3, #2
 8013822:	d129      	bne.n	8013878 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013824:	683a      	ldr	r2, [r7, #0]
 8013826:	68b9      	ldr	r1, [r7, #8]
 8013828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801382a:	f000 fa8b 	bl	8013d44 <prvCopyDataToQueue>
 801382e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013834:	2b00      	cmp	r3, #0
 8013836:	d010      	beq.n	801385a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383a:	3324      	adds	r3, #36	; 0x24
 801383c:	4618      	mov	r0, r3
 801383e:	f001 fa1f 	bl	8014c80 <xTaskRemoveFromEventList>
 8013842:	4603      	mov	r3, r0
 8013844:	2b00      	cmp	r3, #0
 8013846:	d013      	beq.n	8013870 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013848:	4b3f      	ldr	r3, [pc, #252]	; (8013948 <xQueueGenericSend+0x1f8>)
 801384a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801384e:	601a      	str	r2, [r3, #0]
 8013850:	f3bf 8f4f 	dsb	sy
 8013854:	f3bf 8f6f 	isb	sy
 8013858:	e00a      	b.n	8013870 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385c:	2b00      	cmp	r3, #0
 801385e:	d007      	beq.n	8013870 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013860:	4b39      	ldr	r3, [pc, #228]	; (8013948 <xQueueGenericSend+0x1f8>)
 8013862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013866:	601a      	str	r2, [r3, #0]
 8013868:	f3bf 8f4f 	dsb	sy
 801386c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013870:	f002 f9e8 	bl	8015c44 <vPortExitCritical>
				return pdPASS;
 8013874:	2301      	movs	r3, #1
 8013876:	e063      	b.n	8013940 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d103      	bne.n	8013886 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801387e:	f002 f9e1 	bl	8015c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013882:	2300      	movs	r3, #0
 8013884:	e05c      	b.n	8013940 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013888:	2b00      	cmp	r3, #0
 801388a:	d106      	bne.n	801389a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801388c:	f107 0314 	add.w	r3, r7, #20
 8013890:	4618      	mov	r0, r3
 8013892:	f001 fabb 	bl	8014e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013896:	2301      	movs	r3, #1
 8013898:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801389a:	f002 f9d3 	bl	8015c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801389e:	f000 ff87 	bl	80147b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80138a2:	f002 f99f 	bl	8015be4 <vPortEnterCritical>
 80138a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80138ac:	b25b      	sxtb	r3, r3
 80138ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138b2:	d103      	bne.n	80138bc <xQueueGenericSend+0x16c>
 80138b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b6:	2200      	movs	r2, #0
 80138b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80138bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80138c2:	b25b      	sxtb	r3, r3
 80138c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138c8:	d103      	bne.n	80138d2 <xQueueGenericSend+0x182>
 80138ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138cc:	2200      	movs	r2, #0
 80138ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80138d2:	f002 f9b7 	bl	8015c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80138d6:	1d3a      	adds	r2, r7, #4
 80138d8:	f107 0314 	add.w	r3, r7, #20
 80138dc:	4611      	mov	r1, r2
 80138de:	4618      	mov	r0, r3
 80138e0:	f001 faaa 	bl	8014e38 <xTaskCheckForTimeOut>
 80138e4:	4603      	mov	r3, r0
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d124      	bne.n	8013934 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80138ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138ec:	f000 fb22 	bl	8013f34 <prvIsQueueFull>
 80138f0:	4603      	mov	r3, r0
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d018      	beq.n	8013928 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80138f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f8:	3310      	adds	r3, #16
 80138fa:	687a      	ldr	r2, [r7, #4]
 80138fc:	4611      	mov	r1, r2
 80138fe:	4618      	mov	r0, r3
 8013900:	f001 f932 	bl	8014b68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013906:	f000 faad 	bl	8013e64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801390a:	f000 ff5f 	bl	80147cc <xTaskResumeAll>
 801390e:	4603      	mov	r3, r0
 8013910:	2b00      	cmp	r3, #0
 8013912:	f47f af7c 	bne.w	801380e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013916:	4b0c      	ldr	r3, [pc, #48]	; (8013948 <xQueueGenericSend+0x1f8>)
 8013918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801391c:	601a      	str	r2, [r3, #0]
 801391e:	f3bf 8f4f 	dsb	sy
 8013922:	f3bf 8f6f 	isb	sy
 8013926:	e772      	b.n	801380e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801392a:	f000 fa9b 	bl	8013e64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801392e:	f000 ff4d 	bl	80147cc <xTaskResumeAll>
 8013932:	e76c      	b.n	801380e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013936:	f000 fa95 	bl	8013e64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801393a:	f000 ff47 	bl	80147cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801393e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013940:	4618      	mov	r0, r3
 8013942:	3738      	adds	r7, #56	; 0x38
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	e000ed04 	.word	0xe000ed04

0801394c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b090      	sub	sp, #64	; 0x40
 8013950:	af00      	add	r7, sp, #0
 8013952:	60f8      	str	r0, [r7, #12]
 8013954:	60b9      	str	r1, [r7, #8]
 8013956:	607a      	str	r2, [r7, #4]
 8013958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013960:	2b00      	cmp	r3, #0
 8013962:	d10a      	bne.n	801397a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013968:	f383 8811 	msr	BASEPRI, r3
 801396c:	f3bf 8f6f 	isb	sy
 8013970:	f3bf 8f4f 	dsb	sy
 8013974:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013976:	bf00      	nop
 8013978:	e7fe      	b.n	8013978 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d103      	bne.n	8013988 <xQueueGenericSendFromISR+0x3c>
 8013980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013984:	2b00      	cmp	r3, #0
 8013986:	d101      	bne.n	801398c <xQueueGenericSendFromISR+0x40>
 8013988:	2301      	movs	r3, #1
 801398a:	e000      	b.n	801398e <xQueueGenericSendFromISR+0x42>
 801398c:	2300      	movs	r3, #0
 801398e:	2b00      	cmp	r3, #0
 8013990:	d10a      	bne.n	80139a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013996:	f383 8811 	msr	BASEPRI, r3
 801399a:	f3bf 8f6f 	isb	sy
 801399e:	f3bf 8f4f 	dsb	sy
 80139a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80139a4:	bf00      	nop
 80139a6:	e7fe      	b.n	80139a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	2b02      	cmp	r3, #2
 80139ac:	d103      	bne.n	80139b6 <xQueueGenericSendFromISR+0x6a>
 80139ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139b2:	2b01      	cmp	r3, #1
 80139b4:	d101      	bne.n	80139ba <xQueueGenericSendFromISR+0x6e>
 80139b6:	2301      	movs	r3, #1
 80139b8:	e000      	b.n	80139bc <xQueueGenericSendFromISR+0x70>
 80139ba:	2300      	movs	r3, #0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d10a      	bne.n	80139d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80139c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139c4:	f383 8811 	msr	BASEPRI, r3
 80139c8:	f3bf 8f6f 	isb	sy
 80139cc:	f3bf 8f4f 	dsb	sy
 80139d0:	623b      	str	r3, [r7, #32]
}
 80139d2:	bf00      	nop
 80139d4:	e7fe      	b.n	80139d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80139d6:	f002 f9e7 	bl	8015da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80139da:	f3ef 8211 	mrs	r2, BASEPRI
 80139de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e2:	f383 8811 	msr	BASEPRI, r3
 80139e6:	f3bf 8f6f 	isb	sy
 80139ea:	f3bf 8f4f 	dsb	sy
 80139ee:	61fa      	str	r2, [r7, #28]
 80139f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80139f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80139f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80139f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80139fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d302      	bcc.n	8013a08 <xQueueGenericSendFromISR+0xbc>
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	2b02      	cmp	r3, #2
 8013a06:	d12f      	bne.n	8013a68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013a18:	683a      	ldr	r2, [r7, #0]
 8013a1a:	68b9      	ldr	r1, [r7, #8]
 8013a1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013a1e:	f000 f991 	bl	8013d44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013a22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a2a:	d112      	bne.n	8013a52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d016      	beq.n	8013a62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a36:	3324      	adds	r3, #36	; 0x24
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f001 f921 	bl	8014c80 <xTaskRemoveFromEventList>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d00e      	beq.n	8013a62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d00b      	beq.n	8013a62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2201      	movs	r2, #1
 8013a4e:	601a      	str	r2, [r3, #0]
 8013a50:	e007      	b.n	8013a62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013a52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013a56:	3301      	adds	r3, #1
 8013a58:	b2db      	uxtb	r3, r3
 8013a5a:	b25a      	sxtb	r2, r3
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013a62:	2301      	movs	r3, #1
 8013a64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013a66:	e001      	b.n	8013a6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013a68:	2300      	movs	r3, #0
 8013a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a6e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013a76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3740      	adds	r7, #64	; 0x40
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
	...

08013a84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b08c      	sub	sp, #48	; 0x30
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	60f8      	str	r0, [r7, #12]
 8013a8c:	60b9      	str	r1, [r7, #8]
 8013a8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013a90:	2300      	movs	r3, #0
 8013a92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d10a      	bne.n	8013ab4 <xQueueReceive+0x30>
	__asm volatile
 8013a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa2:	f383 8811 	msr	BASEPRI, r3
 8013aa6:	f3bf 8f6f 	isb	sy
 8013aaa:	f3bf 8f4f 	dsb	sy
 8013aae:	623b      	str	r3, [r7, #32]
}
 8013ab0:	bf00      	nop
 8013ab2:	e7fe      	b.n	8013ab2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d103      	bne.n	8013ac2 <xQueueReceive+0x3e>
 8013aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d101      	bne.n	8013ac6 <xQueueReceive+0x42>
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	e000      	b.n	8013ac8 <xQueueReceive+0x44>
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d10a      	bne.n	8013ae2 <xQueueReceive+0x5e>
	__asm volatile
 8013acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad0:	f383 8811 	msr	BASEPRI, r3
 8013ad4:	f3bf 8f6f 	isb	sy
 8013ad8:	f3bf 8f4f 	dsb	sy
 8013adc:	61fb      	str	r3, [r7, #28]
}
 8013ade:	bf00      	nop
 8013ae0:	e7fe      	b.n	8013ae0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013ae2:	f001 faed 	bl	80150c0 <xTaskGetSchedulerState>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d102      	bne.n	8013af2 <xQueueReceive+0x6e>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d101      	bne.n	8013af6 <xQueueReceive+0x72>
 8013af2:	2301      	movs	r3, #1
 8013af4:	e000      	b.n	8013af8 <xQueueReceive+0x74>
 8013af6:	2300      	movs	r3, #0
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d10a      	bne.n	8013b12 <xQueueReceive+0x8e>
	__asm volatile
 8013afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b00:	f383 8811 	msr	BASEPRI, r3
 8013b04:	f3bf 8f6f 	isb	sy
 8013b08:	f3bf 8f4f 	dsb	sy
 8013b0c:	61bb      	str	r3, [r7, #24]
}
 8013b0e:	bf00      	nop
 8013b10:	e7fe      	b.n	8013b10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013b12:	f002 f867 	bl	8015be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d01f      	beq.n	8013b62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013b22:	68b9      	ldr	r1, [r7, #8]
 8013b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b26:	f000 f977 	bl	8013e18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2c:	1e5a      	subs	r2, r3, #1
 8013b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b34:	691b      	ldr	r3, [r3, #16]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d00f      	beq.n	8013b5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3c:	3310      	adds	r3, #16
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f001 f89e 	bl	8014c80 <xTaskRemoveFromEventList>
 8013b44:	4603      	mov	r3, r0
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d007      	beq.n	8013b5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013b4a:	4b3d      	ldr	r3, [pc, #244]	; (8013c40 <xQueueReceive+0x1bc>)
 8013b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b50:	601a      	str	r2, [r3, #0]
 8013b52:	f3bf 8f4f 	dsb	sy
 8013b56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013b5a:	f002 f873 	bl	8015c44 <vPortExitCritical>
				return pdPASS;
 8013b5e:	2301      	movs	r3, #1
 8013b60:	e069      	b.n	8013c36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d103      	bne.n	8013b70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013b68:	f002 f86c 	bl	8015c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	e062      	b.n	8013c36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d106      	bne.n	8013b84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013b76:	f107 0310 	add.w	r3, r7, #16
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f001 f946 	bl	8014e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013b80:	2301      	movs	r3, #1
 8013b82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013b84:	f002 f85e 	bl	8015c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013b88:	f000 fe12 	bl	80147b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013b8c:	f002 f82a 	bl	8015be4 <vPortEnterCritical>
 8013b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013b96:	b25b      	sxtb	r3, r3
 8013b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b9c:	d103      	bne.n	8013ba6 <xQueueReceive+0x122>
 8013b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013bac:	b25b      	sxtb	r3, r3
 8013bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bb2:	d103      	bne.n	8013bbc <xQueueReceive+0x138>
 8013bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013bbc:	f002 f842 	bl	8015c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013bc0:	1d3a      	adds	r2, r7, #4
 8013bc2:	f107 0310 	add.w	r3, r7, #16
 8013bc6:	4611      	mov	r1, r2
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f001 f935 	bl	8014e38 <xTaskCheckForTimeOut>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d123      	bne.n	8013c1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bd6:	f000 f997 	bl	8013f08 <prvIsQueueEmpty>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d017      	beq.n	8013c10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be2:	3324      	adds	r3, #36	; 0x24
 8013be4:	687a      	ldr	r2, [r7, #4]
 8013be6:	4611      	mov	r1, r2
 8013be8:	4618      	mov	r0, r3
 8013bea:	f000 ffbd 	bl	8014b68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bf0:	f000 f938 	bl	8013e64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013bf4:	f000 fdea 	bl	80147cc <xTaskResumeAll>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d189      	bne.n	8013b12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013bfe:	4b10      	ldr	r3, [pc, #64]	; (8013c40 <xQueueReceive+0x1bc>)
 8013c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c04:	601a      	str	r2, [r3, #0]
 8013c06:	f3bf 8f4f 	dsb	sy
 8013c0a:	f3bf 8f6f 	isb	sy
 8013c0e:	e780      	b.n	8013b12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c12:	f000 f927 	bl	8013e64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013c16:	f000 fdd9 	bl	80147cc <xTaskResumeAll>
 8013c1a:	e77a      	b.n	8013b12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c1e:	f000 f921 	bl	8013e64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013c22:	f000 fdd3 	bl	80147cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c28:	f000 f96e 	bl	8013f08 <prvIsQueueEmpty>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	f43f af6f 	beq.w	8013b12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013c34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	3730      	adds	r7, #48	; 0x30
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd80      	pop	{r7, pc}
 8013c3e:	bf00      	nop
 8013c40:	e000ed04 	.word	0xe000ed04

08013c44 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b08e      	sub	sp, #56	; 0x38
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	60f8      	str	r0, [r7, #12]
 8013c4c:	60b9      	str	r1, [r7, #8]
 8013c4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d10a      	bne.n	8013c70 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c5e:	f383 8811 	msr	BASEPRI, r3
 8013c62:	f3bf 8f6f 	isb	sy
 8013c66:	f3bf 8f4f 	dsb	sy
 8013c6a:	623b      	str	r3, [r7, #32]
}
 8013c6c:	bf00      	nop
 8013c6e:	e7fe      	b.n	8013c6e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d103      	bne.n	8013c7e <xQueueReceiveFromISR+0x3a>
 8013c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d101      	bne.n	8013c82 <xQueueReceiveFromISR+0x3e>
 8013c7e:	2301      	movs	r3, #1
 8013c80:	e000      	b.n	8013c84 <xQueueReceiveFromISR+0x40>
 8013c82:	2300      	movs	r3, #0
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d10a      	bne.n	8013c9e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c8c:	f383 8811 	msr	BASEPRI, r3
 8013c90:	f3bf 8f6f 	isb	sy
 8013c94:	f3bf 8f4f 	dsb	sy
 8013c98:	61fb      	str	r3, [r7, #28]
}
 8013c9a:	bf00      	nop
 8013c9c:	e7fe      	b.n	8013c9c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013c9e:	f002 f883 	bl	8015da8 <vPortValidateInterruptPriority>
	__asm volatile
 8013ca2:	f3ef 8211 	mrs	r2, BASEPRI
 8013ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013caa:	f383 8811 	msr	BASEPRI, r3
 8013cae:	f3bf 8f6f 	isb	sy
 8013cb2:	f3bf 8f4f 	dsb	sy
 8013cb6:	61ba      	str	r2, [r7, #24]
 8013cb8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013cba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d02f      	beq.n	8013d2a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013cd4:	68b9      	ldr	r1, [r7, #8]
 8013cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013cd8:	f000 f89e 	bl	8013e18 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cde:	1e5a      	subs	r2, r3, #1
 8013ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013ce4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cec:	d112      	bne.n	8013d14 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf0:	691b      	ldr	r3, [r3, #16]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d016      	beq.n	8013d24 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf8:	3310      	adds	r3, #16
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f000 ffc0 	bl	8014c80 <xTaskRemoveFromEventList>
 8013d00:	4603      	mov	r3, r0
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d00e      	beq.n	8013d24 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d00b      	beq.n	8013d24 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2201      	movs	r2, #1
 8013d10:	601a      	str	r2, [r3, #0]
 8013d12:	e007      	b.n	8013d24 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d18:	3301      	adds	r3, #1
 8013d1a:	b2db      	uxtb	r3, r3
 8013d1c:	b25a      	sxtb	r2, r3
 8013d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013d24:	2301      	movs	r3, #1
 8013d26:	637b      	str	r3, [r7, #52]	; 0x34
 8013d28:	e001      	b.n	8013d2e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8013d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013d32:	693b      	ldr	r3, [r7, #16]
 8013d34:	f383 8811 	msr	BASEPRI, r3
}
 8013d38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3738      	adds	r7, #56	; 0x38
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}

08013d44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b086      	sub	sp, #24
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	60f8      	str	r0, [r7, #12]
 8013d4c:	60b9      	str	r1, [r7, #8]
 8013d4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013d50:	2300      	movs	r3, #0
 8013d52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d10d      	bne.n	8013d7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d14d      	bne.n	8013e06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	689b      	ldr	r3, [r3, #8]
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f001 f9c4 	bl	80150fc <xTaskPriorityDisinherit>
 8013d74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	2200      	movs	r2, #0
 8013d7a:	609a      	str	r2, [r3, #8]
 8013d7c:	e043      	b.n	8013e06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d119      	bne.n	8013db8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	6858      	ldr	r0, [r3, #4]
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d8c:	461a      	mov	r2, r3
 8013d8e:	68b9      	ldr	r1, [r7, #8]
 8013d90:	f002 fa6e 	bl	8016270 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	685a      	ldr	r2, [r3, #4]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d9c:	441a      	add	r2, r3
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	685a      	ldr	r2, [r3, #4]
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	689b      	ldr	r3, [r3, #8]
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d32b      	bcc.n	8013e06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	681a      	ldr	r2, [r3, #0]
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	605a      	str	r2, [r3, #4]
 8013db6:	e026      	b.n	8013e06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	68d8      	ldr	r0, [r3, #12]
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dc0:	461a      	mov	r2, r3
 8013dc2:	68b9      	ldr	r1, [r7, #8]
 8013dc4:	f002 fa54 	bl	8016270 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	68da      	ldr	r2, [r3, #12]
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dd0:	425b      	negs	r3, r3
 8013dd2:	441a      	add	r2, r3
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	68da      	ldr	r2, [r3, #12]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d207      	bcs.n	8013df4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	689a      	ldr	r2, [r3, #8]
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dec:	425b      	negs	r3, r3
 8013dee:	441a      	add	r2, r3
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	2b02      	cmp	r3, #2
 8013df8:	d105      	bne.n	8013e06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013dfa:	693b      	ldr	r3, [r7, #16]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d002      	beq.n	8013e06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013e00:	693b      	ldr	r3, [r7, #16]
 8013e02:	3b01      	subs	r3, #1
 8013e04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	1c5a      	adds	r2, r3, #1
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013e0e:	697b      	ldr	r3, [r7, #20]
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3718      	adds	r7, #24
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}

08013e18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b082      	sub	sp, #8
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
 8013e20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d018      	beq.n	8013e5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	68da      	ldr	r2, [r3, #12]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e32:	441a      	add	r2, r3
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	68da      	ldr	r2, [r3, #12]
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	689b      	ldr	r3, [r3, #8]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d303      	bcc.n	8013e4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	68d9      	ldr	r1, [r3, #12]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e54:	461a      	mov	r2, r3
 8013e56:	6838      	ldr	r0, [r7, #0]
 8013e58:	f002 fa0a 	bl	8016270 <memcpy>
	}
}
 8013e5c:	bf00      	nop
 8013e5e:	3708      	adds	r7, #8
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b084      	sub	sp, #16
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013e6c:	f001 feba 	bl	8015be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013e76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013e78:	e011      	b.n	8013e9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d012      	beq.n	8013ea8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	3324      	adds	r3, #36	; 0x24
 8013e86:	4618      	mov	r0, r3
 8013e88:	f000 fefa 	bl	8014c80 <xTaskRemoveFromEventList>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d001      	beq.n	8013e96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013e92:	f001 f833 	bl	8014efc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013e96:	7bfb      	ldrb	r3, [r7, #15]
 8013e98:	3b01      	subs	r3, #1
 8013e9a:	b2db      	uxtb	r3, r3
 8013e9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	dce9      	bgt.n	8013e7a <prvUnlockQueue+0x16>
 8013ea6:	e000      	b.n	8013eaa <prvUnlockQueue+0x46>
					break;
 8013ea8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	22ff      	movs	r2, #255	; 0xff
 8013eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013eb2:	f001 fec7 	bl	8015c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013eb6:	f001 fe95 	bl	8015be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013ec0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013ec2:	e011      	b.n	8013ee8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	691b      	ldr	r3, [r3, #16]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d012      	beq.n	8013ef2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	3310      	adds	r3, #16
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f000 fed5 	bl	8014c80 <xTaskRemoveFromEventList>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d001      	beq.n	8013ee0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013edc:	f001 f80e 	bl	8014efc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013ee0:	7bbb      	ldrb	r3, [r7, #14]
 8013ee2:	3b01      	subs	r3, #1
 8013ee4:	b2db      	uxtb	r3, r3
 8013ee6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	dce9      	bgt.n	8013ec4 <prvUnlockQueue+0x60>
 8013ef0:	e000      	b.n	8013ef4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013ef2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	22ff      	movs	r2, #255	; 0xff
 8013ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013efc:	f001 fea2 	bl	8015c44 <vPortExitCritical>
}
 8013f00:	bf00      	nop
 8013f02:	3710      	adds	r7, #16
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b084      	sub	sp, #16
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013f10:	f001 fe68 	bl	8015be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d102      	bne.n	8013f22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	60fb      	str	r3, [r7, #12]
 8013f20:	e001      	b.n	8013f26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013f22:	2300      	movs	r3, #0
 8013f24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013f26:	f001 fe8d 	bl	8015c44 <vPortExitCritical>

	return xReturn;
 8013f2a:	68fb      	ldr	r3, [r7, #12]
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3710      	adds	r7, #16
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}

08013f34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b084      	sub	sp, #16
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013f3c:	f001 fe52 	bl	8015be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d102      	bne.n	8013f52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	60fb      	str	r3, [r7, #12]
 8013f50:	e001      	b.n	8013f56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013f52:	2300      	movs	r3, #0
 8013f54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013f56:	f001 fe75 	bl	8015c44 <vPortExitCritical>

	return xReturn;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3710      	adds	r7, #16
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}

08013f64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013f64:	b480      	push	{r7}
 8013f66:	b085      	sub	sp, #20
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f6e:	2300      	movs	r3, #0
 8013f70:	60fb      	str	r3, [r7, #12]
 8013f72:	e014      	b.n	8013f9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013f74:	4a0f      	ldr	r2, [pc, #60]	; (8013fb4 <vQueueAddToRegistry+0x50>)
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d10b      	bne.n	8013f98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013f80:	490c      	ldr	r1, [pc, #48]	; (8013fb4 <vQueueAddToRegistry+0x50>)
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	683a      	ldr	r2, [r7, #0]
 8013f86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013f8a:	4a0a      	ldr	r2, [pc, #40]	; (8013fb4 <vQueueAddToRegistry+0x50>)
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	00db      	lsls	r3, r3, #3
 8013f90:	4413      	add	r3, r2
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013f96:	e006      	b.n	8013fa6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	60fb      	str	r3, [r7, #12]
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	2b07      	cmp	r3, #7
 8013fa2:	d9e7      	bls.n	8013f74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013fa4:	bf00      	nop
 8013fa6:	bf00      	nop
 8013fa8:	3714      	adds	r7, #20
 8013faa:	46bd      	mov	sp, r7
 8013fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb0:	4770      	bx	lr
 8013fb2:	bf00      	nop
 8013fb4:	240017c8 	.word	0x240017c8

08013fb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b086      	sub	sp, #24
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	60f8      	str	r0, [r7, #12]
 8013fc0:	60b9      	str	r1, [r7, #8]
 8013fc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013fc8:	f001 fe0c 	bl	8015be4 <vPortEnterCritical>
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013fd2:	b25b      	sxtb	r3, r3
 8013fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fd8:	d103      	bne.n	8013fe2 <vQueueWaitForMessageRestricted+0x2a>
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	2200      	movs	r2, #0
 8013fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013fe8:	b25b      	sxtb	r3, r3
 8013fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fee:	d103      	bne.n	8013ff8 <vQueueWaitForMessageRestricted+0x40>
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013ff8:	f001 fe24 	bl	8015c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014000:	2b00      	cmp	r3, #0
 8014002:	d106      	bne.n	8014012 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	3324      	adds	r3, #36	; 0x24
 8014008:	687a      	ldr	r2, [r7, #4]
 801400a:	68b9      	ldr	r1, [r7, #8]
 801400c:	4618      	mov	r0, r3
 801400e:	f000 fe0b 	bl	8014c28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014012:	6978      	ldr	r0, [r7, #20]
 8014014:	f7ff ff26 	bl	8013e64 <prvUnlockQueue>
	}
 8014018:	bf00      	nop
 801401a:	3718      	adds	r7, #24
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014020:	b580      	push	{r7, lr}
 8014022:	b08e      	sub	sp, #56	; 0x38
 8014024:	af04      	add	r7, sp, #16
 8014026:	60f8      	str	r0, [r7, #12]
 8014028:	60b9      	str	r1, [r7, #8]
 801402a:	607a      	str	r2, [r7, #4]
 801402c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014030:	2b00      	cmp	r3, #0
 8014032:	d10a      	bne.n	801404a <xTaskCreateStatic+0x2a>
	__asm volatile
 8014034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014038:	f383 8811 	msr	BASEPRI, r3
 801403c:	f3bf 8f6f 	isb	sy
 8014040:	f3bf 8f4f 	dsb	sy
 8014044:	623b      	str	r3, [r7, #32]
}
 8014046:	bf00      	nop
 8014048:	e7fe      	b.n	8014048 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404c:	2b00      	cmp	r3, #0
 801404e:	d10a      	bne.n	8014066 <xTaskCreateStatic+0x46>
	__asm volatile
 8014050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014054:	f383 8811 	msr	BASEPRI, r3
 8014058:	f3bf 8f6f 	isb	sy
 801405c:	f3bf 8f4f 	dsb	sy
 8014060:	61fb      	str	r3, [r7, #28]
}
 8014062:	bf00      	nop
 8014064:	e7fe      	b.n	8014064 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014066:	235c      	movs	r3, #92	; 0x5c
 8014068:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	2b5c      	cmp	r3, #92	; 0x5c
 801406e:	d00a      	beq.n	8014086 <xTaskCreateStatic+0x66>
	__asm volatile
 8014070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014074:	f383 8811 	msr	BASEPRI, r3
 8014078:	f3bf 8f6f 	isb	sy
 801407c:	f3bf 8f4f 	dsb	sy
 8014080:	61bb      	str	r3, [r7, #24]
}
 8014082:	bf00      	nop
 8014084:	e7fe      	b.n	8014084 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014086:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801408a:	2b00      	cmp	r3, #0
 801408c:	d01e      	beq.n	80140cc <xTaskCreateStatic+0xac>
 801408e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014090:	2b00      	cmp	r3, #0
 8014092:	d01b      	beq.n	80140cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014096:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801409c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a0:	2202      	movs	r2, #2
 80140a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80140a6:	2300      	movs	r3, #0
 80140a8:	9303      	str	r3, [sp, #12]
 80140aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ac:	9302      	str	r3, [sp, #8]
 80140ae:	f107 0314 	add.w	r3, r7, #20
 80140b2:	9301      	str	r3, [sp, #4]
 80140b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b6:	9300      	str	r3, [sp, #0]
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	687a      	ldr	r2, [r7, #4]
 80140bc:	68b9      	ldr	r1, [r7, #8]
 80140be:	68f8      	ldr	r0, [r7, #12]
 80140c0:	f000 f850 	bl	8014164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80140c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80140c6:	f000 f8dd 	bl	8014284 <prvAddNewTaskToReadyList>
 80140ca:	e001      	b.n	80140d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80140cc:	2300      	movs	r3, #0
 80140ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80140d0:	697b      	ldr	r3, [r7, #20]
	}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3728      	adds	r7, #40	; 0x28
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}

080140da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80140da:	b580      	push	{r7, lr}
 80140dc:	b08c      	sub	sp, #48	; 0x30
 80140de:	af04      	add	r7, sp, #16
 80140e0:	60f8      	str	r0, [r7, #12]
 80140e2:	60b9      	str	r1, [r7, #8]
 80140e4:	603b      	str	r3, [r7, #0]
 80140e6:	4613      	mov	r3, r2
 80140e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80140ea:	88fb      	ldrh	r3, [r7, #6]
 80140ec:	009b      	lsls	r3, r3, #2
 80140ee:	4618      	mov	r0, r3
 80140f0:	f001 fe9a 	bl	8015e28 <pvPortMalloc>
 80140f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d00e      	beq.n	801411a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80140fc:	205c      	movs	r0, #92	; 0x5c
 80140fe:	f001 fe93 	bl	8015e28 <pvPortMalloc>
 8014102:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014104:	69fb      	ldr	r3, [r7, #28]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d003      	beq.n	8014112 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	697a      	ldr	r2, [r7, #20]
 801410e:	631a      	str	r2, [r3, #48]	; 0x30
 8014110:	e005      	b.n	801411e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014112:	6978      	ldr	r0, [r7, #20]
 8014114:	f001 ff54 	bl	8015fc0 <vPortFree>
 8014118:	e001      	b.n	801411e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801411a:	2300      	movs	r3, #0
 801411c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d017      	beq.n	8014154 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014124:	69fb      	ldr	r3, [r7, #28]
 8014126:	2200      	movs	r2, #0
 8014128:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801412c:	88fa      	ldrh	r2, [r7, #6]
 801412e:	2300      	movs	r3, #0
 8014130:	9303      	str	r3, [sp, #12]
 8014132:	69fb      	ldr	r3, [r7, #28]
 8014134:	9302      	str	r3, [sp, #8]
 8014136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014138:	9301      	str	r3, [sp, #4]
 801413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801413c:	9300      	str	r3, [sp, #0]
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	68b9      	ldr	r1, [r7, #8]
 8014142:	68f8      	ldr	r0, [r7, #12]
 8014144:	f000 f80e 	bl	8014164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014148:	69f8      	ldr	r0, [r7, #28]
 801414a:	f000 f89b 	bl	8014284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801414e:	2301      	movs	r3, #1
 8014150:	61bb      	str	r3, [r7, #24]
 8014152:	e002      	b.n	801415a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014158:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801415a:	69bb      	ldr	r3, [r7, #24]
	}
 801415c:	4618      	mov	r0, r3
 801415e:	3720      	adds	r7, #32
 8014160:	46bd      	mov	sp, r7
 8014162:	bd80      	pop	{r7, pc}

08014164 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b088      	sub	sp, #32
 8014168:	af00      	add	r7, sp, #0
 801416a:	60f8      	str	r0, [r7, #12]
 801416c:	60b9      	str	r1, [r7, #8]
 801416e:	607a      	str	r2, [r7, #4]
 8014170:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014174:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	009b      	lsls	r3, r3, #2
 801417a:	461a      	mov	r2, r3
 801417c:	21a5      	movs	r1, #165	; 0xa5
 801417e:	f002 f885 	bl	801628c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014186:	6879      	ldr	r1, [r7, #4]
 8014188:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801418c:	440b      	add	r3, r1
 801418e:	009b      	lsls	r3, r3, #2
 8014190:	4413      	add	r3, r2
 8014192:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014194:	69bb      	ldr	r3, [r7, #24]
 8014196:	f023 0307 	bic.w	r3, r3, #7
 801419a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801419c:	69bb      	ldr	r3, [r7, #24]
 801419e:	f003 0307 	and.w	r3, r3, #7
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d00a      	beq.n	80141bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80141a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141aa:	f383 8811 	msr	BASEPRI, r3
 80141ae:	f3bf 8f6f 	isb	sy
 80141b2:	f3bf 8f4f 	dsb	sy
 80141b6:	617b      	str	r3, [r7, #20]
}
 80141b8:	bf00      	nop
 80141ba:	e7fe      	b.n	80141ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d01f      	beq.n	8014202 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80141c2:	2300      	movs	r3, #0
 80141c4:	61fb      	str	r3, [r7, #28]
 80141c6:	e012      	b.n	80141ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80141c8:	68ba      	ldr	r2, [r7, #8]
 80141ca:	69fb      	ldr	r3, [r7, #28]
 80141cc:	4413      	add	r3, r2
 80141ce:	7819      	ldrb	r1, [r3, #0]
 80141d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141d2:	69fb      	ldr	r3, [r7, #28]
 80141d4:	4413      	add	r3, r2
 80141d6:	3334      	adds	r3, #52	; 0x34
 80141d8:	460a      	mov	r2, r1
 80141da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80141dc:	68ba      	ldr	r2, [r7, #8]
 80141de:	69fb      	ldr	r3, [r7, #28]
 80141e0:	4413      	add	r3, r2
 80141e2:	781b      	ldrb	r3, [r3, #0]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d006      	beq.n	80141f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80141e8:	69fb      	ldr	r3, [r7, #28]
 80141ea:	3301      	adds	r3, #1
 80141ec:	61fb      	str	r3, [r7, #28]
 80141ee:	69fb      	ldr	r3, [r7, #28]
 80141f0:	2b0f      	cmp	r3, #15
 80141f2:	d9e9      	bls.n	80141c8 <prvInitialiseNewTask+0x64>
 80141f4:	e000      	b.n	80141f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80141f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80141f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141fa:	2200      	movs	r2, #0
 80141fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014200:	e003      	b.n	801420a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014204:	2200      	movs	r2, #0
 8014206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420c:	2b37      	cmp	r3, #55	; 0x37
 801420e:	d901      	bls.n	8014214 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014210:	2337      	movs	r3, #55	; 0x37
 8014212:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014218:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801421c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801421e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014222:	2200      	movs	r2, #0
 8014224:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014228:	3304      	adds	r3, #4
 801422a:	4618      	mov	r0, r3
 801422c:	f7ff f8be 	bl	80133ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014232:	3318      	adds	r3, #24
 8014234:	4618      	mov	r0, r3
 8014236:	f7ff f8b9 	bl	80133ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801423c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801423e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014242:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014248:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801424c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801424e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014252:	2200      	movs	r2, #0
 8014254:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014258:	2200      	movs	r2, #0
 801425a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801425e:	683a      	ldr	r2, [r7, #0]
 8014260:	68f9      	ldr	r1, [r7, #12]
 8014262:	69b8      	ldr	r0, [r7, #24]
 8014264:	f001 fb92 	bl	801598c <pxPortInitialiseStack>
 8014268:	4602      	mov	r2, r0
 801426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014270:	2b00      	cmp	r3, #0
 8014272:	d002      	beq.n	801427a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801427a:	bf00      	nop
 801427c:	3720      	adds	r7, #32
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}
	...

08014284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b082      	sub	sp, #8
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801428c:	f001 fcaa 	bl	8015be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014290:	4b2d      	ldr	r3, [pc, #180]	; (8014348 <prvAddNewTaskToReadyList+0xc4>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	3301      	adds	r3, #1
 8014296:	4a2c      	ldr	r2, [pc, #176]	; (8014348 <prvAddNewTaskToReadyList+0xc4>)
 8014298:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801429a:	4b2c      	ldr	r3, [pc, #176]	; (801434c <prvAddNewTaskToReadyList+0xc8>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d109      	bne.n	80142b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80142a2:	4a2a      	ldr	r2, [pc, #168]	; (801434c <prvAddNewTaskToReadyList+0xc8>)
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80142a8:	4b27      	ldr	r3, [pc, #156]	; (8014348 <prvAddNewTaskToReadyList+0xc4>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	2b01      	cmp	r3, #1
 80142ae:	d110      	bne.n	80142d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80142b0:	f000 fe48 	bl	8014f44 <prvInitialiseTaskLists>
 80142b4:	e00d      	b.n	80142d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80142b6:	4b26      	ldr	r3, [pc, #152]	; (8014350 <prvAddNewTaskToReadyList+0xcc>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d109      	bne.n	80142d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80142be:	4b23      	ldr	r3, [pc, #140]	; (801434c <prvAddNewTaskToReadyList+0xc8>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c8:	429a      	cmp	r2, r3
 80142ca:	d802      	bhi.n	80142d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80142cc:	4a1f      	ldr	r2, [pc, #124]	; (801434c <prvAddNewTaskToReadyList+0xc8>)
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80142d2:	4b20      	ldr	r3, [pc, #128]	; (8014354 <prvAddNewTaskToReadyList+0xd0>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	3301      	adds	r3, #1
 80142d8:	4a1e      	ldr	r2, [pc, #120]	; (8014354 <prvAddNewTaskToReadyList+0xd0>)
 80142da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80142dc:	4b1d      	ldr	r3, [pc, #116]	; (8014354 <prvAddNewTaskToReadyList+0xd0>)
 80142de:	681a      	ldr	r2, [r3, #0]
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142e8:	4b1b      	ldr	r3, [pc, #108]	; (8014358 <prvAddNewTaskToReadyList+0xd4>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	429a      	cmp	r2, r3
 80142ee:	d903      	bls.n	80142f8 <prvAddNewTaskToReadyList+0x74>
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142f4:	4a18      	ldr	r2, [pc, #96]	; (8014358 <prvAddNewTaskToReadyList+0xd4>)
 80142f6:	6013      	str	r3, [r2, #0]
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142fc:	4613      	mov	r3, r2
 80142fe:	009b      	lsls	r3, r3, #2
 8014300:	4413      	add	r3, r2
 8014302:	009b      	lsls	r3, r3, #2
 8014304:	4a15      	ldr	r2, [pc, #84]	; (801435c <prvAddNewTaskToReadyList+0xd8>)
 8014306:	441a      	add	r2, r3
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	3304      	adds	r3, #4
 801430c:	4619      	mov	r1, r3
 801430e:	4610      	mov	r0, r2
 8014310:	f7ff f859 	bl	80133c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014314:	f001 fc96 	bl	8015c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014318:	4b0d      	ldr	r3, [pc, #52]	; (8014350 <prvAddNewTaskToReadyList+0xcc>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d00e      	beq.n	801433e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014320:	4b0a      	ldr	r3, [pc, #40]	; (801434c <prvAddNewTaskToReadyList+0xc8>)
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801432a:	429a      	cmp	r2, r3
 801432c:	d207      	bcs.n	801433e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801432e:	4b0c      	ldr	r3, [pc, #48]	; (8014360 <prvAddNewTaskToReadyList+0xdc>)
 8014330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014334:	601a      	str	r2, [r3, #0]
 8014336:	f3bf 8f4f 	dsb	sy
 801433a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801433e:	bf00      	nop
 8014340:	3708      	adds	r7, #8
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}
 8014346:	bf00      	nop
 8014348:	24001cdc 	.word	0x24001cdc
 801434c:	24001808 	.word	0x24001808
 8014350:	24001ce8 	.word	0x24001ce8
 8014354:	24001cf8 	.word	0x24001cf8
 8014358:	24001ce4 	.word	0x24001ce4
 801435c:	2400180c 	.word	0x2400180c
 8014360:	e000ed04 	.word	0xe000ed04

08014364 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8014364:	b580      	push	{r7, lr}
 8014366:	b084      	sub	sp, #16
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801436c:	f001 fc3a 	bl	8015be4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d102      	bne.n	801437c <vTaskDelete+0x18>
 8014376:	4b2c      	ldr	r3, [pc, #176]	; (8014428 <vTaskDelete+0xc4>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	e000      	b.n	801437e <vTaskDelete+0x1a>
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	3304      	adds	r3, #4
 8014384:	4618      	mov	r0, r3
 8014386:	f7ff f87b 	bl	8013480 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801438e:	2b00      	cmp	r3, #0
 8014390:	d004      	beq.n	801439c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	3318      	adds	r3, #24
 8014396:	4618      	mov	r0, r3
 8014398:	f7ff f872 	bl	8013480 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801439c:	4b23      	ldr	r3, [pc, #140]	; (801442c <vTaskDelete+0xc8>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	3301      	adds	r3, #1
 80143a2:	4a22      	ldr	r2, [pc, #136]	; (801442c <vTaskDelete+0xc8>)
 80143a4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80143a6:	4b20      	ldr	r3, [pc, #128]	; (8014428 <vTaskDelete+0xc4>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	68fa      	ldr	r2, [r7, #12]
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d10b      	bne.n	80143c8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	3304      	adds	r3, #4
 80143b4:	4619      	mov	r1, r3
 80143b6:	481e      	ldr	r0, [pc, #120]	; (8014430 <vTaskDelete+0xcc>)
 80143b8:	f7ff f805 	bl	80133c6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80143bc:	4b1d      	ldr	r3, [pc, #116]	; (8014434 <vTaskDelete+0xd0>)
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	3301      	adds	r3, #1
 80143c2:	4a1c      	ldr	r2, [pc, #112]	; (8014434 <vTaskDelete+0xd0>)
 80143c4:	6013      	str	r3, [r2, #0]
 80143c6:	e009      	b.n	80143dc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80143c8:	4b1b      	ldr	r3, [pc, #108]	; (8014438 <vTaskDelete+0xd4>)
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	3b01      	subs	r3, #1
 80143ce:	4a1a      	ldr	r2, [pc, #104]	; (8014438 <vTaskDelete+0xd4>)
 80143d0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80143d2:	68f8      	ldr	r0, [r7, #12]
 80143d4:	f000 fe24 	bl	8015020 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80143d8:	f000 fe52 	bl	8015080 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80143dc:	f001 fc32 	bl	8015c44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80143e0:	4b16      	ldr	r3, [pc, #88]	; (801443c <vTaskDelete+0xd8>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d01b      	beq.n	8014420 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80143e8:	4b0f      	ldr	r3, [pc, #60]	; (8014428 <vTaskDelete+0xc4>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	68fa      	ldr	r2, [r7, #12]
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d116      	bne.n	8014420 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80143f2:	4b13      	ldr	r3, [pc, #76]	; (8014440 <vTaskDelete+0xdc>)
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d00a      	beq.n	8014410 <vTaskDelete+0xac>
	__asm volatile
 80143fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143fe:	f383 8811 	msr	BASEPRI, r3
 8014402:	f3bf 8f6f 	isb	sy
 8014406:	f3bf 8f4f 	dsb	sy
 801440a:	60bb      	str	r3, [r7, #8]
}
 801440c:	bf00      	nop
 801440e:	e7fe      	b.n	801440e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8014410:	4b0c      	ldr	r3, [pc, #48]	; (8014444 <vTaskDelete+0xe0>)
 8014412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014416:	601a      	str	r2, [r3, #0]
 8014418:	f3bf 8f4f 	dsb	sy
 801441c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014420:	bf00      	nop
 8014422:	3710      	adds	r7, #16
 8014424:	46bd      	mov	sp, r7
 8014426:	bd80      	pop	{r7, pc}
 8014428:	24001808 	.word	0x24001808
 801442c:	24001cf8 	.word	0x24001cf8
 8014430:	24001cb0 	.word	0x24001cb0
 8014434:	24001cc4 	.word	0x24001cc4
 8014438:	24001cdc 	.word	0x24001cdc
 801443c:	24001ce8 	.word	0x24001ce8
 8014440:	24001d04 	.word	0x24001d04
 8014444:	e000ed04 	.word	0xe000ed04

08014448 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014448:	b580      	push	{r7, lr}
 801444a:	b084      	sub	sp, #16
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014450:	2300      	movs	r3, #0
 8014452:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d017      	beq.n	801448a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801445a:	4b13      	ldr	r3, [pc, #76]	; (80144a8 <vTaskDelay+0x60>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d00a      	beq.n	8014478 <vTaskDelay+0x30>
	__asm volatile
 8014462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014466:	f383 8811 	msr	BASEPRI, r3
 801446a:	f3bf 8f6f 	isb	sy
 801446e:	f3bf 8f4f 	dsb	sy
 8014472:	60bb      	str	r3, [r7, #8]
}
 8014474:	bf00      	nop
 8014476:	e7fe      	b.n	8014476 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014478:	f000 f99a 	bl	80147b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801447c:	2100      	movs	r1, #0
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f000 fec2 	bl	8015208 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014484:	f000 f9a2 	bl	80147cc <xTaskResumeAll>
 8014488:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d107      	bne.n	80144a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014490:	4b06      	ldr	r3, [pc, #24]	; (80144ac <vTaskDelay+0x64>)
 8014492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014496:	601a      	str	r2, [r3, #0]
 8014498:	f3bf 8f4f 	dsb	sy
 801449c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80144a0:	bf00      	nop
 80144a2:	3710      	adds	r7, #16
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	24001d04 	.word	0x24001d04
 80144ac:	e000ed04 	.word	0xe000ed04

080144b0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b084      	sub	sp, #16
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80144b8:	f001 fb94 	bl	8015be4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d102      	bne.n	80144c8 <vTaskSuspend+0x18>
 80144c2:	4b30      	ldr	r3, [pc, #192]	; (8014584 <vTaskSuspend+0xd4>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	e000      	b.n	80144ca <vTaskSuspend+0x1a>
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	3304      	adds	r3, #4
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7fe ffd5 	bl	8013480 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d004      	beq.n	80144e8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	3318      	adds	r3, #24
 80144e2:	4618      	mov	r0, r3
 80144e4:	f7fe ffcc 	bl	8013480 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	3304      	adds	r3, #4
 80144ec:	4619      	mov	r1, r3
 80144ee:	4826      	ldr	r0, [pc, #152]	; (8014588 <vTaskSuspend+0xd8>)
 80144f0:	f7fe ff69 	bl	80133c6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80144fa:	b2db      	uxtb	r3, r3
 80144fc:	2b01      	cmp	r3, #1
 80144fe:	d103      	bne.n	8014508 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	2200      	movs	r2, #0
 8014504:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014508:	f001 fb9c 	bl	8015c44 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801450c:	4b1f      	ldr	r3, [pc, #124]	; (801458c <vTaskSuspend+0xdc>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d005      	beq.n	8014520 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014514:	f001 fb66 	bl	8015be4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014518:	f000 fdb2 	bl	8015080 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801451c:	f001 fb92 	bl	8015c44 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014520:	4b18      	ldr	r3, [pc, #96]	; (8014584 <vTaskSuspend+0xd4>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	68fa      	ldr	r2, [r7, #12]
 8014526:	429a      	cmp	r2, r3
 8014528:	d127      	bne.n	801457a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 801452a:	4b18      	ldr	r3, [pc, #96]	; (801458c <vTaskSuspend+0xdc>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d017      	beq.n	8014562 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014532:	4b17      	ldr	r3, [pc, #92]	; (8014590 <vTaskSuspend+0xe0>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d00a      	beq.n	8014550 <vTaskSuspend+0xa0>
	__asm volatile
 801453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801453e:	f383 8811 	msr	BASEPRI, r3
 8014542:	f3bf 8f6f 	isb	sy
 8014546:	f3bf 8f4f 	dsb	sy
 801454a:	60bb      	str	r3, [r7, #8]
}
 801454c:	bf00      	nop
 801454e:	e7fe      	b.n	801454e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014550:	4b10      	ldr	r3, [pc, #64]	; (8014594 <vTaskSuspend+0xe4>)
 8014552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014556:	601a      	str	r2, [r3, #0]
 8014558:	f3bf 8f4f 	dsb	sy
 801455c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014560:	e00b      	b.n	801457a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014562:	4b09      	ldr	r3, [pc, #36]	; (8014588 <vTaskSuspend+0xd8>)
 8014564:	681a      	ldr	r2, [r3, #0]
 8014566:	4b0c      	ldr	r3, [pc, #48]	; (8014598 <vTaskSuspend+0xe8>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	429a      	cmp	r2, r3
 801456c:	d103      	bne.n	8014576 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 801456e:	4b05      	ldr	r3, [pc, #20]	; (8014584 <vTaskSuspend+0xd4>)
 8014570:	2200      	movs	r2, #0
 8014572:	601a      	str	r2, [r3, #0]
	}
 8014574:	e001      	b.n	801457a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014576:	f000 fa99 	bl	8014aac <vTaskSwitchContext>
	}
 801457a:	bf00      	nop
 801457c:	3710      	adds	r7, #16
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}
 8014582:	bf00      	nop
 8014584:	24001808 	.word	0x24001808
 8014588:	24001cc8 	.word	0x24001cc8
 801458c:	24001ce8 	.word	0x24001ce8
 8014590:	24001d04 	.word	0x24001d04
 8014594:	e000ed04 	.word	0xe000ed04
 8014598:	24001cdc 	.word	0x24001cdc

0801459c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801459c:	b480      	push	{r7}
 801459e:	b087      	sub	sp, #28
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80145a4:	2300      	movs	r3, #0
 80145a6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d10a      	bne.n	80145c8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80145b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b6:	f383 8811 	msr	BASEPRI, r3
 80145ba:	f3bf 8f6f 	isb	sy
 80145be:	f3bf 8f4f 	dsb	sy
 80145c2:	60fb      	str	r3, [r7, #12]
}
 80145c4:	bf00      	nop
 80145c6:	e7fe      	b.n	80145c6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80145c8:	693b      	ldr	r3, [r7, #16]
 80145ca:	695b      	ldr	r3, [r3, #20]
 80145cc:	4a0a      	ldr	r2, [pc, #40]	; (80145f8 <prvTaskIsTaskSuspended+0x5c>)
 80145ce:	4293      	cmp	r3, r2
 80145d0:	d10a      	bne.n	80145e8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145d6:	4a09      	ldr	r2, [pc, #36]	; (80145fc <prvTaskIsTaskSuspended+0x60>)
 80145d8:	4293      	cmp	r3, r2
 80145da:	d005      	beq.n	80145e8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d101      	bne.n	80145e8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80145e4:	2301      	movs	r3, #1
 80145e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80145e8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80145ea:	4618      	mov	r0, r3
 80145ec:	371c      	adds	r7, #28
 80145ee:	46bd      	mov	sp, r7
 80145f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f4:	4770      	bx	lr
 80145f6:	bf00      	nop
 80145f8:	24001cc8 	.word	0x24001cc8
 80145fc:	24001c9c 	.word	0x24001c9c

08014600 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014600:	b580      	push	{r7, lr}
 8014602:	b08a      	sub	sp, #40	; 0x28
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014608:	2300      	movs	r3, #0
 801460a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d10a      	bne.n	801462c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801461a:	f383 8811 	msr	BASEPRI, r3
 801461e:	f3bf 8f6f 	isb	sy
 8014622:	f3bf 8f4f 	dsb	sy
 8014626:	61bb      	str	r3, [r7, #24]
}
 8014628:	bf00      	nop
 801462a:	e7fe      	b.n	801462a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801462c:	f001 fbbc 	bl	8015da8 <vPortValidateInterruptPriority>
	__asm volatile
 8014630:	f3ef 8211 	mrs	r2, BASEPRI
 8014634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014638:	f383 8811 	msr	BASEPRI, r3
 801463c:	f3bf 8f6f 	isb	sy
 8014640:	f3bf 8f4f 	dsb	sy
 8014644:	617a      	str	r2, [r7, #20]
 8014646:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014648:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801464a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801464c:	6a38      	ldr	r0, [r7, #32]
 801464e:	f7ff ffa5 	bl	801459c <prvTaskIsTaskSuspended>
 8014652:	4603      	mov	r3, r0
 8014654:	2b00      	cmp	r3, #0
 8014656:	d030      	beq.n	80146ba <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014658:	4b1d      	ldr	r3, [pc, #116]	; (80146d0 <xTaskResumeFromISR+0xd0>)
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d126      	bne.n	80146ae <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014660:	6a3b      	ldr	r3, [r7, #32]
 8014662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014664:	4b1b      	ldr	r3, [pc, #108]	; (80146d4 <xTaskResumeFromISR+0xd4>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801466a:	429a      	cmp	r2, r3
 801466c:	d301      	bcc.n	8014672 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 801466e:	2301      	movs	r3, #1
 8014670:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014672:	6a3b      	ldr	r3, [r7, #32]
 8014674:	3304      	adds	r3, #4
 8014676:	4618      	mov	r0, r3
 8014678:	f7fe ff02 	bl	8013480 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801467c:	6a3b      	ldr	r3, [r7, #32]
 801467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014680:	4b15      	ldr	r3, [pc, #84]	; (80146d8 <xTaskResumeFromISR+0xd8>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	429a      	cmp	r2, r3
 8014686:	d903      	bls.n	8014690 <xTaskResumeFromISR+0x90>
 8014688:	6a3b      	ldr	r3, [r7, #32]
 801468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801468c:	4a12      	ldr	r2, [pc, #72]	; (80146d8 <xTaskResumeFromISR+0xd8>)
 801468e:	6013      	str	r3, [r2, #0]
 8014690:	6a3b      	ldr	r3, [r7, #32]
 8014692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014694:	4613      	mov	r3, r2
 8014696:	009b      	lsls	r3, r3, #2
 8014698:	4413      	add	r3, r2
 801469a:	009b      	lsls	r3, r3, #2
 801469c:	4a0f      	ldr	r2, [pc, #60]	; (80146dc <xTaskResumeFromISR+0xdc>)
 801469e:	441a      	add	r2, r3
 80146a0:	6a3b      	ldr	r3, [r7, #32]
 80146a2:	3304      	adds	r3, #4
 80146a4:	4619      	mov	r1, r3
 80146a6:	4610      	mov	r0, r2
 80146a8:	f7fe fe8d 	bl	80133c6 <vListInsertEnd>
 80146ac:	e005      	b.n	80146ba <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80146ae:	6a3b      	ldr	r3, [r7, #32]
 80146b0:	3318      	adds	r3, #24
 80146b2:	4619      	mov	r1, r3
 80146b4:	480a      	ldr	r0, [pc, #40]	; (80146e0 <xTaskResumeFromISR+0xe0>)
 80146b6:	f7fe fe86 	bl	80133c6 <vListInsertEnd>
 80146ba:	69fb      	ldr	r3, [r7, #28]
 80146bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	f383 8811 	msr	BASEPRI, r3
}
 80146c4:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80146c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80146c8:	4618      	mov	r0, r3
 80146ca:	3728      	adds	r7, #40	; 0x28
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	24001d04 	.word	0x24001d04
 80146d4:	24001808 	.word	0x24001808
 80146d8:	24001ce4 	.word	0x24001ce4
 80146dc:	2400180c 	.word	0x2400180c
 80146e0:	24001c9c 	.word	0x24001c9c

080146e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b08a      	sub	sp, #40	; 0x28
 80146e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80146ea:	2300      	movs	r3, #0
 80146ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80146ee:	2300      	movs	r3, #0
 80146f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80146f2:	463a      	mov	r2, r7
 80146f4:	1d39      	adds	r1, r7, #4
 80146f6:	f107 0308 	add.w	r3, r7, #8
 80146fa:	4618      	mov	r0, r3
 80146fc:	f7fe fc14 	bl	8012f28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014700:	6839      	ldr	r1, [r7, #0]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	68ba      	ldr	r2, [r7, #8]
 8014706:	9202      	str	r2, [sp, #8]
 8014708:	9301      	str	r3, [sp, #4]
 801470a:	2300      	movs	r3, #0
 801470c:	9300      	str	r3, [sp, #0]
 801470e:	2300      	movs	r3, #0
 8014710:	460a      	mov	r2, r1
 8014712:	4921      	ldr	r1, [pc, #132]	; (8014798 <vTaskStartScheduler+0xb4>)
 8014714:	4821      	ldr	r0, [pc, #132]	; (801479c <vTaskStartScheduler+0xb8>)
 8014716:	f7ff fc83 	bl	8014020 <xTaskCreateStatic>
 801471a:	4603      	mov	r3, r0
 801471c:	4a20      	ldr	r2, [pc, #128]	; (80147a0 <vTaskStartScheduler+0xbc>)
 801471e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014720:	4b1f      	ldr	r3, [pc, #124]	; (80147a0 <vTaskStartScheduler+0xbc>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d002      	beq.n	801472e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014728:	2301      	movs	r3, #1
 801472a:	617b      	str	r3, [r7, #20]
 801472c:	e001      	b.n	8014732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801472e:	2300      	movs	r3, #0
 8014730:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	2b01      	cmp	r3, #1
 8014736:	d102      	bne.n	801473e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014738:	f000 fdba 	bl	80152b0 <xTimerCreateTimerTask>
 801473c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801473e:	697b      	ldr	r3, [r7, #20]
 8014740:	2b01      	cmp	r3, #1
 8014742:	d116      	bne.n	8014772 <vTaskStartScheduler+0x8e>
	__asm volatile
 8014744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014748:	f383 8811 	msr	BASEPRI, r3
 801474c:	f3bf 8f6f 	isb	sy
 8014750:	f3bf 8f4f 	dsb	sy
 8014754:	613b      	str	r3, [r7, #16]
}
 8014756:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014758:	4b12      	ldr	r3, [pc, #72]	; (80147a4 <vTaskStartScheduler+0xc0>)
 801475a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801475e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014760:	4b11      	ldr	r3, [pc, #68]	; (80147a8 <vTaskStartScheduler+0xc4>)
 8014762:	2201      	movs	r2, #1
 8014764:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014766:	4b11      	ldr	r3, [pc, #68]	; (80147ac <vTaskStartScheduler+0xc8>)
 8014768:	2200      	movs	r2, #0
 801476a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801476c:	f001 f998 	bl	8015aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014770:	e00e      	b.n	8014790 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014772:	697b      	ldr	r3, [r7, #20]
 8014774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014778:	d10a      	bne.n	8014790 <vTaskStartScheduler+0xac>
	__asm volatile
 801477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801477e:	f383 8811 	msr	BASEPRI, r3
 8014782:	f3bf 8f6f 	isb	sy
 8014786:	f3bf 8f4f 	dsb	sy
 801478a:	60fb      	str	r3, [r7, #12]
}
 801478c:	bf00      	nop
 801478e:	e7fe      	b.n	801478e <vTaskStartScheduler+0xaa>
}
 8014790:	bf00      	nop
 8014792:	3718      	adds	r7, #24
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}
 8014798:	08016f1c 	.word	0x08016f1c
 801479c:	08014f15 	.word	0x08014f15
 80147a0:	24001d00 	.word	0x24001d00
 80147a4:	24001cfc 	.word	0x24001cfc
 80147a8:	24001ce8 	.word	0x24001ce8
 80147ac:	24001ce0 	.word	0x24001ce0

080147b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80147b0:	b480      	push	{r7}
 80147b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80147b4:	4b04      	ldr	r3, [pc, #16]	; (80147c8 <vTaskSuspendAll+0x18>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	3301      	adds	r3, #1
 80147ba:	4a03      	ldr	r2, [pc, #12]	; (80147c8 <vTaskSuspendAll+0x18>)
 80147bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80147be:	bf00      	nop
 80147c0:	46bd      	mov	sp, r7
 80147c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c6:	4770      	bx	lr
 80147c8:	24001d04 	.word	0x24001d04

080147cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b084      	sub	sp, #16
 80147d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80147d2:	2300      	movs	r3, #0
 80147d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80147d6:	2300      	movs	r3, #0
 80147d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80147da:	4b42      	ldr	r3, [pc, #264]	; (80148e4 <xTaskResumeAll+0x118>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d10a      	bne.n	80147f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80147e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e6:	f383 8811 	msr	BASEPRI, r3
 80147ea:	f3bf 8f6f 	isb	sy
 80147ee:	f3bf 8f4f 	dsb	sy
 80147f2:	603b      	str	r3, [r7, #0]
}
 80147f4:	bf00      	nop
 80147f6:	e7fe      	b.n	80147f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80147f8:	f001 f9f4 	bl	8015be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80147fc:	4b39      	ldr	r3, [pc, #228]	; (80148e4 <xTaskResumeAll+0x118>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	3b01      	subs	r3, #1
 8014802:	4a38      	ldr	r2, [pc, #224]	; (80148e4 <xTaskResumeAll+0x118>)
 8014804:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014806:	4b37      	ldr	r3, [pc, #220]	; (80148e4 <xTaskResumeAll+0x118>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d162      	bne.n	80148d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801480e:	4b36      	ldr	r3, [pc, #216]	; (80148e8 <xTaskResumeAll+0x11c>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d05e      	beq.n	80148d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014816:	e02f      	b.n	8014878 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014818:	4b34      	ldr	r3, [pc, #208]	; (80148ec <xTaskResumeAll+0x120>)
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	68db      	ldr	r3, [r3, #12]
 801481e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	3318      	adds	r3, #24
 8014824:	4618      	mov	r0, r3
 8014826:	f7fe fe2b 	bl	8013480 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	3304      	adds	r3, #4
 801482e:	4618      	mov	r0, r3
 8014830:	f7fe fe26 	bl	8013480 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014838:	4b2d      	ldr	r3, [pc, #180]	; (80148f0 <xTaskResumeAll+0x124>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	429a      	cmp	r2, r3
 801483e:	d903      	bls.n	8014848 <xTaskResumeAll+0x7c>
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014844:	4a2a      	ldr	r2, [pc, #168]	; (80148f0 <xTaskResumeAll+0x124>)
 8014846:	6013      	str	r3, [r2, #0]
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801484c:	4613      	mov	r3, r2
 801484e:	009b      	lsls	r3, r3, #2
 8014850:	4413      	add	r3, r2
 8014852:	009b      	lsls	r3, r3, #2
 8014854:	4a27      	ldr	r2, [pc, #156]	; (80148f4 <xTaskResumeAll+0x128>)
 8014856:	441a      	add	r2, r3
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	3304      	adds	r3, #4
 801485c:	4619      	mov	r1, r3
 801485e:	4610      	mov	r0, r2
 8014860:	f7fe fdb1 	bl	80133c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014868:	4b23      	ldr	r3, [pc, #140]	; (80148f8 <xTaskResumeAll+0x12c>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801486e:	429a      	cmp	r2, r3
 8014870:	d302      	bcc.n	8014878 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014872:	4b22      	ldr	r3, [pc, #136]	; (80148fc <xTaskResumeAll+0x130>)
 8014874:	2201      	movs	r2, #1
 8014876:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014878:	4b1c      	ldr	r3, [pc, #112]	; (80148ec <xTaskResumeAll+0x120>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d1cb      	bne.n	8014818 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d001      	beq.n	801488a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014886:	f000 fbfb 	bl	8015080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801488a:	4b1d      	ldr	r3, [pc, #116]	; (8014900 <xTaskResumeAll+0x134>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d010      	beq.n	80148b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014896:	f000 f847 	bl	8014928 <xTaskIncrementTick>
 801489a:	4603      	mov	r3, r0
 801489c:	2b00      	cmp	r3, #0
 801489e:	d002      	beq.n	80148a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80148a0:	4b16      	ldr	r3, [pc, #88]	; (80148fc <xTaskResumeAll+0x130>)
 80148a2:	2201      	movs	r2, #1
 80148a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	3b01      	subs	r3, #1
 80148aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d1f1      	bne.n	8014896 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80148b2:	4b13      	ldr	r3, [pc, #76]	; (8014900 <xTaskResumeAll+0x134>)
 80148b4:	2200      	movs	r2, #0
 80148b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80148b8:	4b10      	ldr	r3, [pc, #64]	; (80148fc <xTaskResumeAll+0x130>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d009      	beq.n	80148d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80148c0:	2301      	movs	r3, #1
 80148c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80148c4:	4b0f      	ldr	r3, [pc, #60]	; (8014904 <xTaskResumeAll+0x138>)
 80148c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148ca:	601a      	str	r2, [r3, #0]
 80148cc:	f3bf 8f4f 	dsb	sy
 80148d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80148d4:	f001 f9b6 	bl	8015c44 <vPortExitCritical>

	return xAlreadyYielded;
 80148d8:	68bb      	ldr	r3, [r7, #8]
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3710      	adds	r7, #16
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	24001d04 	.word	0x24001d04
 80148e8:	24001cdc 	.word	0x24001cdc
 80148ec:	24001c9c 	.word	0x24001c9c
 80148f0:	24001ce4 	.word	0x24001ce4
 80148f4:	2400180c 	.word	0x2400180c
 80148f8:	24001808 	.word	0x24001808
 80148fc:	24001cf0 	.word	0x24001cf0
 8014900:	24001cec 	.word	0x24001cec
 8014904:	e000ed04 	.word	0xe000ed04

08014908 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014908:	b480      	push	{r7}
 801490a:	b083      	sub	sp, #12
 801490c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801490e:	4b05      	ldr	r3, [pc, #20]	; (8014924 <xTaskGetTickCount+0x1c>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014914:	687b      	ldr	r3, [r7, #4]
}
 8014916:	4618      	mov	r0, r3
 8014918:	370c      	adds	r7, #12
 801491a:	46bd      	mov	sp, r7
 801491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014920:	4770      	bx	lr
 8014922:	bf00      	nop
 8014924:	24001ce0 	.word	0x24001ce0

08014928 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b086      	sub	sp, #24
 801492c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801492e:	2300      	movs	r3, #0
 8014930:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014932:	4b53      	ldr	r3, [pc, #332]	; (8014a80 <xTaskIncrementTick+0x158>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	f040 8095 	bne.w	8014a66 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801493c:	4b51      	ldr	r3, [pc, #324]	; (8014a84 <xTaskIncrementTick+0x15c>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	3301      	adds	r3, #1
 8014942:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014944:	4a4f      	ldr	r2, [pc, #316]	; (8014a84 <xTaskIncrementTick+0x15c>)
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801494a:	693b      	ldr	r3, [r7, #16]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d120      	bne.n	8014992 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014950:	4b4d      	ldr	r3, [pc, #308]	; (8014a88 <xTaskIncrementTick+0x160>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d00a      	beq.n	8014970 <xTaskIncrementTick+0x48>
	__asm volatile
 801495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801495e:	f383 8811 	msr	BASEPRI, r3
 8014962:	f3bf 8f6f 	isb	sy
 8014966:	f3bf 8f4f 	dsb	sy
 801496a:	603b      	str	r3, [r7, #0]
}
 801496c:	bf00      	nop
 801496e:	e7fe      	b.n	801496e <xTaskIncrementTick+0x46>
 8014970:	4b45      	ldr	r3, [pc, #276]	; (8014a88 <xTaskIncrementTick+0x160>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	60fb      	str	r3, [r7, #12]
 8014976:	4b45      	ldr	r3, [pc, #276]	; (8014a8c <xTaskIncrementTick+0x164>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	4a43      	ldr	r2, [pc, #268]	; (8014a88 <xTaskIncrementTick+0x160>)
 801497c:	6013      	str	r3, [r2, #0]
 801497e:	4a43      	ldr	r2, [pc, #268]	; (8014a8c <xTaskIncrementTick+0x164>)
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	6013      	str	r3, [r2, #0]
 8014984:	4b42      	ldr	r3, [pc, #264]	; (8014a90 <xTaskIncrementTick+0x168>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	3301      	adds	r3, #1
 801498a:	4a41      	ldr	r2, [pc, #260]	; (8014a90 <xTaskIncrementTick+0x168>)
 801498c:	6013      	str	r3, [r2, #0]
 801498e:	f000 fb77 	bl	8015080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014992:	4b40      	ldr	r3, [pc, #256]	; (8014a94 <xTaskIncrementTick+0x16c>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	693a      	ldr	r2, [r7, #16]
 8014998:	429a      	cmp	r2, r3
 801499a:	d349      	bcc.n	8014a30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801499c:	4b3a      	ldr	r3, [pc, #232]	; (8014a88 <xTaskIncrementTick+0x160>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d104      	bne.n	80149b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149a6:	4b3b      	ldr	r3, [pc, #236]	; (8014a94 <xTaskIncrementTick+0x16c>)
 80149a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149ac:	601a      	str	r2, [r3, #0]
					break;
 80149ae:	e03f      	b.n	8014a30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149b0:	4b35      	ldr	r3, [pc, #212]	; (8014a88 <xTaskIncrementTick+0x160>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	68db      	ldr	r3, [r3, #12]
 80149b6:	68db      	ldr	r3, [r3, #12]
 80149b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	685b      	ldr	r3, [r3, #4]
 80149be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80149c0:	693a      	ldr	r2, [r7, #16]
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d203      	bcs.n	80149d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80149c8:	4a32      	ldr	r2, [pc, #200]	; (8014a94 <xTaskIncrementTick+0x16c>)
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80149ce:	e02f      	b.n	8014a30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	3304      	adds	r3, #4
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7fe fd53 	bl	8013480 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d004      	beq.n	80149ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	3318      	adds	r3, #24
 80149e6:	4618      	mov	r0, r3
 80149e8:	f7fe fd4a 	bl	8013480 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149f0:	4b29      	ldr	r3, [pc, #164]	; (8014a98 <xTaskIncrementTick+0x170>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	429a      	cmp	r2, r3
 80149f6:	d903      	bls.n	8014a00 <xTaskIncrementTick+0xd8>
 80149f8:	68bb      	ldr	r3, [r7, #8]
 80149fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149fc:	4a26      	ldr	r2, [pc, #152]	; (8014a98 <xTaskIncrementTick+0x170>)
 80149fe:	6013      	str	r3, [r2, #0]
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a04:	4613      	mov	r3, r2
 8014a06:	009b      	lsls	r3, r3, #2
 8014a08:	4413      	add	r3, r2
 8014a0a:	009b      	lsls	r3, r3, #2
 8014a0c:	4a23      	ldr	r2, [pc, #140]	; (8014a9c <xTaskIncrementTick+0x174>)
 8014a0e:	441a      	add	r2, r3
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	3304      	adds	r3, #4
 8014a14:	4619      	mov	r1, r3
 8014a16:	4610      	mov	r0, r2
 8014a18:	f7fe fcd5 	bl	80133c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a20:	4b1f      	ldr	r3, [pc, #124]	; (8014aa0 <xTaskIncrementTick+0x178>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a26:	429a      	cmp	r2, r3
 8014a28:	d3b8      	bcc.n	801499c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a2e:	e7b5      	b.n	801499c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a30:	4b1b      	ldr	r3, [pc, #108]	; (8014aa0 <xTaskIncrementTick+0x178>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a36:	4919      	ldr	r1, [pc, #100]	; (8014a9c <xTaskIncrementTick+0x174>)
 8014a38:	4613      	mov	r3, r2
 8014a3a:	009b      	lsls	r3, r3, #2
 8014a3c:	4413      	add	r3, r2
 8014a3e:	009b      	lsls	r3, r3, #2
 8014a40:	440b      	add	r3, r1
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	2b01      	cmp	r3, #1
 8014a46:	d901      	bls.n	8014a4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014a48:	2301      	movs	r3, #1
 8014a4a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8014a4c:	4b15      	ldr	r3, [pc, #84]	; (8014aa4 <xTaskIncrementTick+0x17c>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d101      	bne.n	8014a58 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8014a54:	f7eb fdc6 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014a58:	4b13      	ldr	r3, [pc, #76]	; (8014aa8 <xTaskIncrementTick+0x180>)
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d009      	beq.n	8014a74 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8014a60:	2301      	movs	r3, #1
 8014a62:	617b      	str	r3, [r7, #20]
 8014a64:	e006      	b.n	8014a74 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014a66:	4b0f      	ldr	r3, [pc, #60]	; (8014aa4 <xTaskIncrementTick+0x17c>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	4a0d      	ldr	r2, [pc, #52]	; (8014aa4 <xTaskIncrementTick+0x17c>)
 8014a6e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014a70:	f7eb fdb8 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8014a74:	697b      	ldr	r3, [r7, #20]
}
 8014a76:	4618      	mov	r0, r3
 8014a78:	3718      	adds	r7, #24
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}
 8014a7e:	bf00      	nop
 8014a80:	24001d04 	.word	0x24001d04
 8014a84:	24001ce0 	.word	0x24001ce0
 8014a88:	24001c94 	.word	0x24001c94
 8014a8c:	24001c98 	.word	0x24001c98
 8014a90:	24001cf4 	.word	0x24001cf4
 8014a94:	24001cfc 	.word	0x24001cfc
 8014a98:	24001ce4 	.word	0x24001ce4
 8014a9c:	2400180c 	.word	0x2400180c
 8014aa0:	24001808 	.word	0x24001808
 8014aa4:	24001cec 	.word	0x24001cec
 8014aa8:	24001cf0 	.word	0x24001cf0

08014aac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014aac:	b480      	push	{r7}
 8014aae:	b085      	sub	sp, #20
 8014ab0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014ab2:	4b28      	ldr	r3, [pc, #160]	; (8014b54 <vTaskSwitchContext+0xa8>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d003      	beq.n	8014ac2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014aba:	4b27      	ldr	r3, [pc, #156]	; (8014b58 <vTaskSwitchContext+0xac>)
 8014abc:	2201      	movs	r2, #1
 8014abe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014ac0:	e041      	b.n	8014b46 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014ac2:	4b25      	ldr	r3, [pc, #148]	; (8014b58 <vTaskSwitchContext+0xac>)
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ac8:	4b24      	ldr	r3, [pc, #144]	; (8014b5c <vTaskSwitchContext+0xb0>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	60fb      	str	r3, [r7, #12]
 8014ace:	e010      	b.n	8014af2 <vTaskSwitchContext+0x46>
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d10a      	bne.n	8014aec <vTaskSwitchContext+0x40>
	__asm volatile
 8014ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ada:	f383 8811 	msr	BASEPRI, r3
 8014ade:	f3bf 8f6f 	isb	sy
 8014ae2:	f3bf 8f4f 	dsb	sy
 8014ae6:	607b      	str	r3, [r7, #4]
}
 8014ae8:	bf00      	nop
 8014aea:	e7fe      	b.n	8014aea <vTaskSwitchContext+0x3e>
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	3b01      	subs	r3, #1
 8014af0:	60fb      	str	r3, [r7, #12]
 8014af2:	491b      	ldr	r1, [pc, #108]	; (8014b60 <vTaskSwitchContext+0xb4>)
 8014af4:	68fa      	ldr	r2, [r7, #12]
 8014af6:	4613      	mov	r3, r2
 8014af8:	009b      	lsls	r3, r3, #2
 8014afa:	4413      	add	r3, r2
 8014afc:	009b      	lsls	r3, r3, #2
 8014afe:	440b      	add	r3, r1
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d0e4      	beq.n	8014ad0 <vTaskSwitchContext+0x24>
 8014b06:	68fa      	ldr	r2, [r7, #12]
 8014b08:	4613      	mov	r3, r2
 8014b0a:	009b      	lsls	r3, r3, #2
 8014b0c:	4413      	add	r3, r2
 8014b0e:	009b      	lsls	r3, r3, #2
 8014b10:	4a13      	ldr	r2, [pc, #76]	; (8014b60 <vTaskSwitchContext+0xb4>)
 8014b12:	4413      	add	r3, r2
 8014b14:	60bb      	str	r3, [r7, #8]
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	685b      	ldr	r3, [r3, #4]
 8014b1a:	685a      	ldr	r2, [r3, #4]
 8014b1c:	68bb      	ldr	r3, [r7, #8]
 8014b1e:	605a      	str	r2, [r3, #4]
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	685a      	ldr	r2, [r3, #4]
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	3308      	adds	r3, #8
 8014b28:	429a      	cmp	r2, r3
 8014b2a:	d104      	bne.n	8014b36 <vTaskSwitchContext+0x8a>
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	685b      	ldr	r3, [r3, #4]
 8014b30:	685a      	ldr	r2, [r3, #4]
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	605a      	str	r2, [r3, #4]
 8014b36:	68bb      	ldr	r3, [r7, #8]
 8014b38:	685b      	ldr	r3, [r3, #4]
 8014b3a:	68db      	ldr	r3, [r3, #12]
 8014b3c:	4a09      	ldr	r2, [pc, #36]	; (8014b64 <vTaskSwitchContext+0xb8>)
 8014b3e:	6013      	str	r3, [r2, #0]
 8014b40:	4a06      	ldr	r2, [pc, #24]	; (8014b5c <vTaskSwitchContext+0xb0>)
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	6013      	str	r3, [r2, #0]
}
 8014b46:	bf00      	nop
 8014b48:	3714      	adds	r7, #20
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b50:	4770      	bx	lr
 8014b52:	bf00      	nop
 8014b54:	24001d04 	.word	0x24001d04
 8014b58:	24001cf0 	.word	0x24001cf0
 8014b5c:	24001ce4 	.word	0x24001ce4
 8014b60:	2400180c 	.word	0x2400180c
 8014b64:	24001808 	.word	0x24001808

08014b68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b084      	sub	sp, #16
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d10a      	bne.n	8014b8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b7c:	f383 8811 	msr	BASEPRI, r3
 8014b80:	f3bf 8f6f 	isb	sy
 8014b84:	f3bf 8f4f 	dsb	sy
 8014b88:	60fb      	str	r3, [r7, #12]
}
 8014b8a:	bf00      	nop
 8014b8c:	e7fe      	b.n	8014b8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014b8e:	4b07      	ldr	r3, [pc, #28]	; (8014bac <vTaskPlaceOnEventList+0x44>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	3318      	adds	r3, #24
 8014b94:	4619      	mov	r1, r3
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f7fe fc39 	bl	801340e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014b9c:	2101      	movs	r1, #1
 8014b9e:	6838      	ldr	r0, [r7, #0]
 8014ba0:	f000 fb32 	bl	8015208 <prvAddCurrentTaskToDelayedList>
}
 8014ba4:	bf00      	nop
 8014ba6:	3710      	adds	r7, #16
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}
 8014bac:	24001808 	.word	0x24001808

08014bb0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b086      	sub	sp, #24
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	60f8      	str	r0, [r7, #12]
 8014bb8:	60b9      	str	r1, [r7, #8]
 8014bba:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d10a      	bne.n	8014bd8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bc6:	f383 8811 	msr	BASEPRI, r3
 8014bca:	f3bf 8f6f 	isb	sy
 8014bce:	f3bf 8f4f 	dsb	sy
 8014bd2:	617b      	str	r3, [r7, #20]
}
 8014bd4:	bf00      	nop
 8014bd6:	e7fe      	b.n	8014bd6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014bd8:	4b11      	ldr	r3, [pc, #68]	; (8014c20 <vTaskPlaceOnUnorderedEventList+0x70>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d10a      	bne.n	8014bf6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014be4:	f383 8811 	msr	BASEPRI, r3
 8014be8:	f3bf 8f6f 	isb	sy
 8014bec:	f3bf 8f4f 	dsb	sy
 8014bf0:	613b      	str	r3, [r7, #16]
}
 8014bf2:	bf00      	nop
 8014bf4:	e7fe      	b.n	8014bf4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014bf6:	4b0b      	ldr	r3, [pc, #44]	; (8014c24 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	68ba      	ldr	r2, [r7, #8]
 8014bfc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014c00:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c02:	4b08      	ldr	r3, [pc, #32]	; (8014c24 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	3318      	adds	r3, #24
 8014c08:	4619      	mov	r1, r3
 8014c0a:	68f8      	ldr	r0, [r7, #12]
 8014c0c:	f7fe fbdb 	bl	80133c6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c10:	2101      	movs	r1, #1
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	f000 faf8 	bl	8015208 <prvAddCurrentTaskToDelayedList>
}
 8014c18:	bf00      	nop
 8014c1a:	3718      	adds	r7, #24
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	24001d04 	.word	0x24001d04
 8014c24:	24001808 	.word	0x24001808

08014c28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b086      	sub	sp, #24
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	60f8      	str	r0, [r7, #12]
 8014c30:	60b9      	str	r1, [r7, #8]
 8014c32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d10a      	bne.n	8014c50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c3e:	f383 8811 	msr	BASEPRI, r3
 8014c42:	f3bf 8f6f 	isb	sy
 8014c46:	f3bf 8f4f 	dsb	sy
 8014c4a:	617b      	str	r3, [r7, #20]
}
 8014c4c:	bf00      	nop
 8014c4e:	e7fe      	b.n	8014c4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c50:	4b0a      	ldr	r3, [pc, #40]	; (8014c7c <vTaskPlaceOnEventListRestricted+0x54>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	3318      	adds	r3, #24
 8014c56:	4619      	mov	r1, r3
 8014c58:	68f8      	ldr	r0, [r7, #12]
 8014c5a:	f7fe fbb4 	bl	80133c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d002      	beq.n	8014c6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014c6a:	6879      	ldr	r1, [r7, #4]
 8014c6c:	68b8      	ldr	r0, [r7, #8]
 8014c6e:	f000 facb 	bl	8015208 <prvAddCurrentTaskToDelayedList>
	}
 8014c72:	bf00      	nop
 8014c74:	3718      	adds	r7, #24
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	24001808 	.word	0x24001808

08014c80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b086      	sub	sp, #24
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	68db      	ldr	r3, [r3, #12]
 8014c8c:	68db      	ldr	r3, [r3, #12]
 8014c8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014c90:	693b      	ldr	r3, [r7, #16]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d10a      	bne.n	8014cac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c9a:	f383 8811 	msr	BASEPRI, r3
 8014c9e:	f3bf 8f6f 	isb	sy
 8014ca2:	f3bf 8f4f 	dsb	sy
 8014ca6:	60fb      	str	r3, [r7, #12]
}
 8014ca8:	bf00      	nop
 8014caa:	e7fe      	b.n	8014caa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014cac:	693b      	ldr	r3, [r7, #16]
 8014cae:	3318      	adds	r3, #24
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fe fbe5 	bl	8013480 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cb6:	4b1e      	ldr	r3, [pc, #120]	; (8014d30 <xTaskRemoveFromEventList+0xb0>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d11d      	bne.n	8014cfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	3304      	adds	r3, #4
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7fe fbdc 	bl	8013480 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014cc8:	693b      	ldr	r3, [r7, #16]
 8014cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ccc:	4b19      	ldr	r3, [pc, #100]	; (8014d34 <xTaskRemoveFromEventList+0xb4>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	d903      	bls.n	8014cdc <xTaskRemoveFromEventList+0x5c>
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cd8:	4a16      	ldr	r2, [pc, #88]	; (8014d34 <xTaskRemoveFromEventList+0xb4>)
 8014cda:	6013      	str	r3, [r2, #0]
 8014cdc:	693b      	ldr	r3, [r7, #16]
 8014cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ce0:	4613      	mov	r3, r2
 8014ce2:	009b      	lsls	r3, r3, #2
 8014ce4:	4413      	add	r3, r2
 8014ce6:	009b      	lsls	r3, r3, #2
 8014ce8:	4a13      	ldr	r2, [pc, #76]	; (8014d38 <xTaskRemoveFromEventList+0xb8>)
 8014cea:	441a      	add	r2, r3
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	3304      	adds	r3, #4
 8014cf0:	4619      	mov	r1, r3
 8014cf2:	4610      	mov	r0, r2
 8014cf4:	f7fe fb67 	bl	80133c6 <vListInsertEnd>
 8014cf8:	e005      	b.n	8014d06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	3318      	adds	r3, #24
 8014cfe:	4619      	mov	r1, r3
 8014d00:	480e      	ldr	r0, [pc, #56]	; (8014d3c <xTaskRemoveFromEventList+0xbc>)
 8014d02:	f7fe fb60 	bl	80133c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d06:	693b      	ldr	r3, [r7, #16]
 8014d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d0a:	4b0d      	ldr	r3, [pc, #52]	; (8014d40 <xTaskRemoveFromEventList+0xc0>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d905      	bls.n	8014d20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014d14:	2301      	movs	r3, #1
 8014d16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014d18:	4b0a      	ldr	r3, [pc, #40]	; (8014d44 <xTaskRemoveFromEventList+0xc4>)
 8014d1a:	2201      	movs	r2, #1
 8014d1c:	601a      	str	r2, [r3, #0]
 8014d1e:	e001      	b.n	8014d24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014d20:	2300      	movs	r3, #0
 8014d22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014d24:	697b      	ldr	r3, [r7, #20]
}
 8014d26:	4618      	mov	r0, r3
 8014d28:	3718      	adds	r7, #24
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	bd80      	pop	{r7, pc}
 8014d2e:	bf00      	nop
 8014d30:	24001d04 	.word	0x24001d04
 8014d34:	24001ce4 	.word	0x24001ce4
 8014d38:	2400180c 	.word	0x2400180c
 8014d3c:	24001c9c 	.word	0x24001c9c
 8014d40:	24001808 	.word	0x24001808
 8014d44:	24001cf0 	.word	0x24001cf0

08014d48 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b086      	sub	sp, #24
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014d52:	4b29      	ldr	r3, [pc, #164]	; (8014df8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d10a      	bne.n	8014d70 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d5e:	f383 8811 	msr	BASEPRI, r3
 8014d62:	f3bf 8f6f 	isb	sy
 8014d66:	f3bf 8f4f 	dsb	sy
 8014d6a:	613b      	str	r3, [r7, #16]
}
 8014d6c:	bf00      	nop
 8014d6e:	e7fe      	b.n	8014d6e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014d70:	683b      	ldr	r3, [r7, #0]
 8014d72:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	68db      	ldr	r3, [r3, #12]
 8014d7e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d10a      	bne.n	8014d9c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d8a:	f383 8811 	msr	BASEPRI, r3
 8014d8e:	f3bf 8f6f 	isb	sy
 8014d92:	f3bf 8f4f 	dsb	sy
 8014d96:	60fb      	str	r3, [r7, #12]
}
 8014d98:	bf00      	nop
 8014d9a:	e7fe      	b.n	8014d9a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f7fe fb6f 	bl	8013480 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	3304      	adds	r3, #4
 8014da6:	4618      	mov	r0, r3
 8014da8:	f7fe fb6a 	bl	8013480 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014db0:	4b12      	ldr	r3, [pc, #72]	; (8014dfc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d903      	bls.n	8014dc0 <vTaskRemoveFromUnorderedEventList+0x78>
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dbc:	4a0f      	ldr	r2, [pc, #60]	; (8014dfc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014dbe:	6013      	str	r3, [r2, #0]
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dc4:	4613      	mov	r3, r2
 8014dc6:	009b      	lsls	r3, r3, #2
 8014dc8:	4413      	add	r3, r2
 8014dca:	009b      	lsls	r3, r3, #2
 8014dcc:	4a0c      	ldr	r2, [pc, #48]	; (8014e00 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014dce:	441a      	add	r2, r3
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	3304      	adds	r3, #4
 8014dd4:	4619      	mov	r1, r3
 8014dd6:	4610      	mov	r0, r2
 8014dd8:	f7fe faf5 	bl	80133c6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014de0:	4b08      	ldr	r3, [pc, #32]	; (8014e04 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d902      	bls.n	8014df0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014dea:	4b07      	ldr	r3, [pc, #28]	; (8014e08 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014dec:	2201      	movs	r2, #1
 8014dee:	601a      	str	r2, [r3, #0]
	}
}
 8014df0:	bf00      	nop
 8014df2:	3718      	adds	r7, #24
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}
 8014df8:	24001d04 	.word	0x24001d04
 8014dfc:	24001ce4 	.word	0x24001ce4
 8014e00:	2400180c 	.word	0x2400180c
 8014e04:	24001808 	.word	0x24001808
 8014e08:	24001cf0 	.word	0x24001cf0

08014e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014e0c:	b480      	push	{r7}
 8014e0e:	b083      	sub	sp, #12
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014e14:	4b06      	ldr	r3, [pc, #24]	; (8014e30 <vTaskInternalSetTimeOutState+0x24>)
 8014e16:	681a      	ldr	r2, [r3, #0]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014e1c:	4b05      	ldr	r3, [pc, #20]	; (8014e34 <vTaskInternalSetTimeOutState+0x28>)
 8014e1e:	681a      	ldr	r2, [r3, #0]
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	605a      	str	r2, [r3, #4]
}
 8014e24:	bf00      	nop
 8014e26:	370c      	adds	r7, #12
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2e:	4770      	bx	lr
 8014e30:	24001cf4 	.word	0x24001cf4
 8014e34:	24001ce0 	.word	0x24001ce0

08014e38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b088      	sub	sp, #32
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d10a      	bne.n	8014e5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e4c:	f383 8811 	msr	BASEPRI, r3
 8014e50:	f3bf 8f6f 	isb	sy
 8014e54:	f3bf 8f4f 	dsb	sy
 8014e58:	613b      	str	r3, [r7, #16]
}
 8014e5a:	bf00      	nop
 8014e5c:	e7fe      	b.n	8014e5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d10a      	bne.n	8014e7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e68:	f383 8811 	msr	BASEPRI, r3
 8014e6c:	f3bf 8f6f 	isb	sy
 8014e70:	f3bf 8f4f 	dsb	sy
 8014e74:	60fb      	str	r3, [r7, #12]
}
 8014e76:	bf00      	nop
 8014e78:	e7fe      	b.n	8014e78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014e7a:	f000 feb3 	bl	8015be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014e7e:	4b1d      	ldr	r3, [pc, #116]	; (8014ef4 <xTaskCheckForTimeOut+0xbc>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	685b      	ldr	r3, [r3, #4]
 8014e88:	69ba      	ldr	r2, [r7, #24]
 8014e8a:	1ad3      	subs	r3, r2, r3
 8014e8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e96:	d102      	bne.n	8014e9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	61fb      	str	r3, [r7, #28]
 8014e9c:	e023      	b.n	8014ee6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	681a      	ldr	r2, [r3, #0]
 8014ea2:	4b15      	ldr	r3, [pc, #84]	; (8014ef8 <xTaskCheckForTimeOut+0xc0>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d007      	beq.n	8014eba <xTaskCheckForTimeOut+0x82>
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	69ba      	ldr	r2, [r7, #24]
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	d302      	bcc.n	8014eba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014eb4:	2301      	movs	r3, #1
 8014eb6:	61fb      	str	r3, [r7, #28]
 8014eb8:	e015      	b.n	8014ee6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	697a      	ldr	r2, [r7, #20]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d20b      	bcs.n	8014edc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	681a      	ldr	r2, [r3, #0]
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	1ad2      	subs	r2, r2, r3
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	f7ff ff9b 	bl	8014e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	61fb      	str	r3, [r7, #28]
 8014eda:	e004      	b.n	8014ee6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	2200      	movs	r2, #0
 8014ee0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014ee6:	f000 fead 	bl	8015c44 <vPortExitCritical>

	return xReturn;
 8014eea:	69fb      	ldr	r3, [r7, #28]
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	3720      	adds	r7, #32
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd80      	pop	{r7, pc}
 8014ef4:	24001ce0 	.word	0x24001ce0
 8014ef8:	24001cf4 	.word	0x24001cf4

08014efc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014efc:	b480      	push	{r7}
 8014efe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014f00:	4b03      	ldr	r3, [pc, #12]	; (8014f10 <vTaskMissedYield+0x14>)
 8014f02:	2201      	movs	r2, #1
 8014f04:	601a      	str	r2, [r3, #0]
}
 8014f06:	bf00      	nop
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0e:	4770      	bx	lr
 8014f10:	24001cf0 	.word	0x24001cf0

08014f14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b082      	sub	sp, #8
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014f1c:	f000 f852 	bl	8014fc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014f20:	4b06      	ldr	r3, [pc, #24]	; (8014f3c <prvIdleTask+0x28>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	2b01      	cmp	r3, #1
 8014f26:	d9f9      	bls.n	8014f1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014f28:	4b05      	ldr	r3, [pc, #20]	; (8014f40 <prvIdleTask+0x2c>)
 8014f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f2e:	601a      	str	r2, [r3, #0]
 8014f30:	f3bf 8f4f 	dsb	sy
 8014f34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014f38:	e7f0      	b.n	8014f1c <prvIdleTask+0x8>
 8014f3a:	bf00      	nop
 8014f3c:	2400180c 	.word	0x2400180c
 8014f40:	e000ed04 	.word	0xe000ed04

08014f44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b082      	sub	sp, #8
 8014f48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	607b      	str	r3, [r7, #4]
 8014f4e:	e00c      	b.n	8014f6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014f50:	687a      	ldr	r2, [r7, #4]
 8014f52:	4613      	mov	r3, r2
 8014f54:	009b      	lsls	r3, r3, #2
 8014f56:	4413      	add	r3, r2
 8014f58:	009b      	lsls	r3, r3, #2
 8014f5a:	4a12      	ldr	r2, [pc, #72]	; (8014fa4 <prvInitialiseTaskLists+0x60>)
 8014f5c:	4413      	add	r3, r2
 8014f5e:	4618      	mov	r0, r3
 8014f60:	f7fe fa04 	bl	801336c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	3301      	adds	r3, #1
 8014f68:	607b      	str	r3, [r7, #4]
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2b37      	cmp	r3, #55	; 0x37
 8014f6e:	d9ef      	bls.n	8014f50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014f70:	480d      	ldr	r0, [pc, #52]	; (8014fa8 <prvInitialiseTaskLists+0x64>)
 8014f72:	f7fe f9fb 	bl	801336c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014f76:	480d      	ldr	r0, [pc, #52]	; (8014fac <prvInitialiseTaskLists+0x68>)
 8014f78:	f7fe f9f8 	bl	801336c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014f7c:	480c      	ldr	r0, [pc, #48]	; (8014fb0 <prvInitialiseTaskLists+0x6c>)
 8014f7e:	f7fe f9f5 	bl	801336c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014f82:	480c      	ldr	r0, [pc, #48]	; (8014fb4 <prvInitialiseTaskLists+0x70>)
 8014f84:	f7fe f9f2 	bl	801336c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014f88:	480b      	ldr	r0, [pc, #44]	; (8014fb8 <prvInitialiseTaskLists+0x74>)
 8014f8a:	f7fe f9ef 	bl	801336c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014f8e:	4b0b      	ldr	r3, [pc, #44]	; (8014fbc <prvInitialiseTaskLists+0x78>)
 8014f90:	4a05      	ldr	r2, [pc, #20]	; (8014fa8 <prvInitialiseTaskLists+0x64>)
 8014f92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014f94:	4b0a      	ldr	r3, [pc, #40]	; (8014fc0 <prvInitialiseTaskLists+0x7c>)
 8014f96:	4a05      	ldr	r2, [pc, #20]	; (8014fac <prvInitialiseTaskLists+0x68>)
 8014f98:	601a      	str	r2, [r3, #0]
}
 8014f9a:	bf00      	nop
 8014f9c:	3708      	adds	r7, #8
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}
 8014fa2:	bf00      	nop
 8014fa4:	2400180c 	.word	0x2400180c
 8014fa8:	24001c6c 	.word	0x24001c6c
 8014fac:	24001c80 	.word	0x24001c80
 8014fb0:	24001c9c 	.word	0x24001c9c
 8014fb4:	24001cb0 	.word	0x24001cb0
 8014fb8:	24001cc8 	.word	0x24001cc8
 8014fbc:	24001c94 	.word	0x24001c94
 8014fc0:	24001c98 	.word	0x24001c98

08014fc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014fca:	e019      	b.n	8015000 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014fcc:	f000 fe0a 	bl	8015be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fd0:	4b10      	ldr	r3, [pc, #64]	; (8015014 <prvCheckTasksWaitingTermination+0x50>)
 8014fd2:	68db      	ldr	r3, [r3, #12]
 8014fd4:	68db      	ldr	r3, [r3, #12]
 8014fd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	3304      	adds	r3, #4
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7fe fa4f 	bl	8013480 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014fe2:	4b0d      	ldr	r3, [pc, #52]	; (8015018 <prvCheckTasksWaitingTermination+0x54>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	3b01      	subs	r3, #1
 8014fe8:	4a0b      	ldr	r2, [pc, #44]	; (8015018 <prvCheckTasksWaitingTermination+0x54>)
 8014fea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014fec:	4b0b      	ldr	r3, [pc, #44]	; (801501c <prvCheckTasksWaitingTermination+0x58>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	3b01      	subs	r3, #1
 8014ff2:	4a0a      	ldr	r2, [pc, #40]	; (801501c <prvCheckTasksWaitingTermination+0x58>)
 8014ff4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014ff6:	f000 fe25 	bl	8015c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f000 f810 	bl	8015020 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015000:	4b06      	ldr	r3, [pc, #24]	; (801501c <prvCheckTasksWaitingTermination+0x58>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d1e1      	bne.n	8014fcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015008:	bf00      	nop
 801500a:	bf00      	nop
 801500c:	3708      	adds	r7, #8
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
 8015012:	bf00      	nop
 8015014:	24001cb0 	.word	0x24001cb0
 8015018:	24001cdc 	.word	0x24001cdc
 801501c:	24001cc4 	.word	0x24001cc4

08015020 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015020:	b580      	push	{r7, lr}
 8015022:	b084      	sub	sp, #16
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801502e:	2b00      	cmp	r3, #0
 8015030:	d108      	bne.n	8015044 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015036:	4618      	mov	r0, r3
 8015038:	f000 ffc2 	bl	8015fc0 <vPortFree>
				vPortFree( pxTCB );
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f000 ffbf 	bl	8015fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015042:	e018      	b.n	8015076 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801504a:	2b01      	cmp	r3, #1
 801504c:	d103      	bne.n	8015056 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801504e:	6878      	ldr	r0, [r7, #4]
 8015050:	f000 ffb6 	bl	8015fc0 <vPortFree>
	}
 8015054:	e00f      	b.n	8015076 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801505c:	2b02      	cmp	r3, #2
 801505e:	d00a      	beq.n	8015076 <prvDeleteTCB+0x56>
	__asm volatile
 8015060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015064:	f383 8811 	msr	BASEPRI, r3
 8015068:	f3bf 8f6f 	isb	sy
 801506c:	f3bf 8f4f 	dsb	sy
 8015070:	60fb      	str	r3, [r7, #12]
}
 8015072:	bf00      	nop
 8015074:	e7fe      	b.n	8015074 <prvDeleteTCB+0x54>
	}
 8015076:	bf00      	nop
 8015078:	3710      	adds	r7, #16
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}
	...

08015080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015080:	b480      	push	{r7}
 8015082:	b083      	sub	sp, #12
 8015084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015086:	4b0c      	ldr	r3, [pc, #48]	; (80150b8 <prvResetNextTaskUnblockTime+0x38>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d104      	bne.n	801509a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015090:	4b0a      	ldr	r3, [pc, #40]	; (80150bc <prvResetNextTaskUnblockTime+0x3c>)
 8015092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015098:	e008      	b.n	80150ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801509a:	4b07      	ldr	r3, [pc, #28]	; (80150b8 <prvResetNextTaskUnblockTime+0x38>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	68db      	ldr	r3, [r3, #12]
 80150a0:	68db      	ldr	r3, [r3, #12]
 80150a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	685b      	ldr	r3, [r3, #4]
 80150a8:	4a04      	ldr	r2, [pc, #16]	; (80150bc <prvResetNextTaskUnblockTime+0x3c>)
 80150aa:	6013      	str	r3, [r2, #0]
}
 80150ac:	bf00      	nop
 80150ae:	370c      	adds	r7, #12
 80150b0:	46bd      	mov	sp, r7
 80150b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b6:	4770      	bx	lr
 80150b8:	24001c94 	.word	0x24001c94
 80150bc:	24001cfc 	.word	0x24001cfc

080150c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80150c0:	b480      	push	{r7}
 80150c2:	b083      	sub	sp, #12
 80150c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80150c6:	4b0b      	ldr	r3, [pc, #44]	; (80150f4 <xTaskGetSchedulerState+0x34>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d102      	bne.n	80150d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80150ce:	2301      	movs	r3, #1
 80150d0:	607b      	str	r3, [r7, #4]
 80150d2:	e008      	b.n	80150e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150d4:	4b08      	ldr	r3, [pc, #32]	; (80150f8 <xTaskGetSchedulerState+0x38>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d102      	bne.n	80150e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80150dc:	2302      	movs	r3, #2
 80150de:	607b      	str	r3, [r7, #4]
 80150e0:	e001      	b.n	80150e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80150e2:	2300      	movs	r3, #0
 80150e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80150e6:	687b      	ldr	r3, [r7, #4]
	}
 80150e8:	4618      	mov	r0, r3
 80150ea:	370c      	adds	r7, #12
 80150ec:	46bd      	mov	sp, r7
 80150ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f2:	4770      	bx	lr
 80150f4:	24001ce8 	.word	0x24001ce8
 80150f8:	24001d04 	.word	0x24001d04

080150fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b086      	sub	sp, #24
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015108:	2300      	movs	r3, #0
 801510a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d056      	beq.n	80151c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015112:	4b2e      	ldr	r3, [pc, #184]	; (80151cc <xTaskPriorityDisinherit+0xd0>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	693a      	ldr	r2, [r7, #16]
 8015118:	429a      	cmp	r2, r3
 801511a:	d00a      	beq.n	8015132 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015120:	f383 8811 	msr	BASEPRI, r3
 8015124:	f3bf 8f6f 	isb	sy
 8015128:	f3bf 8f4f 	dsb	sy
 801512c:	60fb      	str	r3, [r7, #12]
}
 801512e:	bf00      	nop
 8015130:	e7fe      	b.n	8015130 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015136:	2b00      	cmp	r3, #0
 8015138:	d10a      	bne.n	8015150 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801513e:	f383 8811 	msr	BASEPRI, r3
 8015142:	f3bf 8f6f 	isb	sy
 8015146:	f3bf 8f4f 	dsb	sy
 801514a:	60bb      	str	r3, [r7, #8]
}
 801514c:	bf00      	nop
 801514e:	e7fe      	b.n	801514e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015150:	693b      	ldr	r3, [r7, #16]
 8015152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015154:	1e5a      	subs	r2, r3, #1
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801515a:	693b      	ldr	r3, [r7, #16]
 801515c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015162:	429a      	cmp	r2, r3
 8015164:	d02c      	beq.n	80151c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015166:	693b      	ldr	r3, [r7, #16]
 8015168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801516a:	2b00      	cmp	r3, #0
 801516c:	d128      	bne.n	80151c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801516e:	693b      	ldr	r3, [r7, #16]
 8015170:	3304      	adds	r3, #4
 8015172:	4618      	mov	r0, r3
 8015174:	f7fe f984 	bl	8013480 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015178:	693b      	ldr	r3, [r7, #16]
 801517a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801517c:	693b      	ldr	r3, [r7, #16]
 801517e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015184:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015190:	4b0f      	ldr	r3, [pc, #60]	; (80151d0 <xTaskPriorityDisinherit+0xd4>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	429a      	cmp	r2, r3
 8015196:	d903      	bls.n	80151a0 <xTaskPriorityDisinherit+0xa4>
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801519c:	4a0c      	ldr	r2, [pc, #48]	; (80151d0 <xTaskPriorityDisinherit+0xd4>)
 801519e:	6013      	str	r3, [r2, #0]
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151a4:	4613      	mov	r3, r2
 80151a6:	009b      	lsls	r3, r3, #2
 80151a8:	4413      	add	r3, r2
 80151aa:	009b      	lsls	r3, r3, #2
 80151ac:	4a09      	ldr	r2, [pc, #36]	; (80151d4 <xTaskPriorityDisinherit+0xd8>)
 80151ae:	441a      	add	r2, r3
 80151b0:	693b      	ldr	r3, [r7, #16]
 80151b2:	3304      	adds	r3, #4
 80151b4:	4619      	mov	r1, r3
 80151b6:	4610      	mov	r0, r2
 80151b8:	f7fe f905 	bl	80133c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80151bc:	2301      	movs	r3, #1
 80151be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80151c0:	697b      	ldr	r3, [r7, #20]
	}
 80151c2:	4618      	mov	r0, r3
 80151c4:	3718      	adds	r7, #24
 80151c6:	46bd      	mov	sp, r7
 80151c8:	bd80      	pop	{r7, pc}
 80151ca:	bf00      	nop
 80151cc:	24001808 	.word	0x24001808
 80151d0:	24001ce4 	.word	0x24001ce4
 80151d4:	2400180c 	.word	0x2400180c

080151d8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80151d8:	b480      	push	{r7}
 80151da:	b083      	sub	sp, #12
 80151dc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80151de:	4b09      	ldr	r3, [pc, #36]	; (8015204 <uxTaskResetEventItemValue+0x2c>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	699b      	ldr	r3, [r3, #24]
 80151e4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151e6:	4b07      	ldr	r3, [pc, #28]	; (8015204 <uxTaskResetEventItemValue+0x2c>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151ec:	4b05      	ldr	r3, [pc, #20]	; (8015204 <uxTaskResetEventItemValue+0x2c>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80151f4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80151f6:	687b      	ldr	r3, [r7, #4]
}
 80151f8:	4618      	mov	r0, r3
 80151fa:	370c      	adds	r7, #12
 80151fc:	46bd      	mov	sp, r7
 80151fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015202:	4770      	bx	lr
 8015204:	24001808 	.word	0x24001808

08015208 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b084      	sub	sp, #16
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
 8015210:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015212:	4b21      	ldr	r3, [pc, #132]	; (8015298 <prvAddCurrentTaskToDelayedList+0x90>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015218:	4b20      	ldr	r3, [pc, #128]	; (801529c <prvAddCurrentTaskToDelayedList+0x94>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	3304      	adds	r3, #4
 801521e:	4618      	mov	r0, r3
 8015220:	f7fe f92e 	bl	8013480 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801522a:	d10a      	bne.n	8015242 <prvAddCurrentTaskToDelayedList+0x3a>
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d007      	beq.n	8015242 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015232:	4b1a      	ldr	r3, [pc, #104]	; (801529c <prvAddCurrentTaskToDelayedList+0x94>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	3304      	adds	r3, #4
 8015238:	4619      	mov	r1, r3
 801523a:	4819      	ldr	r0, [pc, #100]	; (80152a0 <prvAddCurrentTaskToDelayedList+0x98>)
 801523c:	f7fe f8c3 	bl	80133c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015240:	e026      	b.n	8015290 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015242:	68fa      	ldr	r2, [r7, #12]
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	4413      	add	r3, r2
 8015248:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801524a:	4b14      	ldr	r3, [pc, #80]	; (801529c <prvAddCurrentTaskToDelayedList+0x94>)
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	68ba      	ldr	r2, [r7, #8]
 8015250:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015252:	68ba      	ldr	r2, [r7, #8]
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	429a      	cmp	r2, r3
 8015258:	d209      	bcs.n	801526e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801525a:	4b12      	ldr	r3, [pc, #72]	; (80152a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801525c:	681a      	ldr	r2, [r3, #0]
 801525e:	4b0f      	ldr	r3, [pc, #60]	; (801529c <prvAddCurrentTaskToDelayedList+0x94>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	3304      	adds	r3, #4
 8015264:	4619      	mov	r1, r3
 8015266:	4610      	mov	r0, r2
 8015268:	f7fe f8d1 	bl	801340e <vListInsert>
}
 801526c:	e010      	b.n	8015290 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801526e:	4b0e      	ldr	r3, [pc, #56]	; (80152a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015270:	681a      	ldr	r2, [r3, #0]
 8015272:	4b0a      	ldr	r3, [pc, #40]	; (801529c <prvAddCurrentTaskToDelayedList+0x94>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	3304      	adds	r3, #4
 8015278:	4619      	mov	r1, r3
 801527a:	4610      	mov	r0, r2
 801527c:	f7fe f8c7 	bl	801340e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015280:	4b0a      	ldr	r3, [pc, #40]	; (80152ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	68ba      	ldr	r2, [r7, #8]
 8015286:	429a      	cmp	r2, r3
 8015288:	d202      	bcs.n	8015290 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801528a:	4a08      	ldr	r2, [pc, #32]	; (80152ac <prvAddCurrentTaskToDelayedList+0xa4>)
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	6013      	str	r3, [r2, #0]
}
 8015290:	bf00      	nop
 8015292:	3710      	adds	r7, #16
 8015294:	46bd      	mov	sp, r7
 8015296:	bd80      	pop	{r7, pc}
 8015298:	24001ce0 	.word	0x24001ce0
 801529c:	24001808 	.word	0x24001808
 80152a0:	24001cc8 	.word	0x24001cc8
 80152a4:	24001c98 	.word	0x24001c98
 80152a8:	24001c94 	.word	0x24001c94
 80152ac:	24001cfc 	.word	0x24001cfc

080152b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b08a      	sub	sp, #40	; 0x28
 80152b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80152b6:	2300      	movs	r3, #0
 80152b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80152ba:	f000 fb07 	bl	80158cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80152be:	4b1c      	ldr	r3, [pc, #112]	; (8015330 <xTimerCreateTimerTask+0x80>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d021      	beq.n	801530a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80152c6:	2300      	movs	r3, #0
 80152c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80152ca:	2300      	movs	r3, #0
 80152cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80152ce:	1d3a      	adds	r2, r7, #4
 80152d0:	f107 0108 	add.w	r1, r7, #8
 80152d4:	f107 030c 	add.w	r3, r7, #12
 80152d8:	4618      	mov	r0, r3
 80152da:	f7fd fe3f 	bl	8012f5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80152de:	6879      	ldr	r1, [r7, #4]
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	68fa      	ldr	r2, [r7, #12]
 80152e4:	9202      	str	r2, [sp, #8]
 80152e6:	9301      	str	r3, [sp, #4]
 80152e8:	2302      	movs	r3, #2
 80152ea:	9300      	str	r3, [sp, #0]
 80152ec:	2300      	movs	r3, #0
 80152ee:	460a      	mov	r2, r1
 80152f0:	4910      	ldr	r1, [pc, #64]	; (8015334 <xTimerCreateTimerTask+0x84>)
 80152f2:	4811      	ldr	r0, [pc, #68]	; (8015338 <xTimerCreateTimerTask+0x88>)
 80152f4:	f7fe fe94 	bl	8014020 <xTaskCreateStatic>
 80152f8:	4603      	mov	r3, r0
 80152fa:	4a10      	ldr	r2, [pc, #64]	; (801533c <xTimerCreateTimerTask+0x8c>)
 80152fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80152fe:	4b0f      	ldr	r3, [pc, #60]	; (801533c <xTimerCreateTimerTask+0x8c>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d001      	beq.n	801530a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015306:	2301      	movs	r3, #1
 8015308:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801530a:	697b      	ldr	r3, [r7, #20]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d10a      	bne.n	8015326 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015314:	f383 8811 	msr	BASEPRI, r3
 8015318:	f3bf 8f6f 	isb	sy
 801531c:	f3bf 8f4f 	dsb	sy
 8015320:	613b      	str	r3, [r7, #16]
}
 8015322:	bf00      	nop
 8015324:	e7fe      	b.n	8015324 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015326:	697b      	ldr	r3, [r7, #20]
}
 8015328:	4618      	mov	r0, r3
 801532a:	3718      	adds	r7, #24
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}
 8015330:	24001d38 	.word	0x24001d38
 8015334:	08016f24 	.word	0x08016f24
 8015338:	08015475 	.word	0x08015475
 801533c:	24001d3c 	.word	0x24001d3c

08015340 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b08a      	sub	sp, #40	; 0x28
 8015344:	af00      	add	r7, sp, #0
 8015346:	60f8      	str	r0, [r7, #12]
 8015348:	60b9      	str	r1, [r7, #8]
 801534a:	607a      	str	r2, [r7, #4]
 801534c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801534e:	2300      	movs	r3, #0
 8015350:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d10a      	bne.n	801536e <xTimerGenericCommand+0x2e>
	__asm volatile
 8015358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801535c:	f383 8811 	msr	BASEPRI, r3
 8015360:	f3bf 8f6f 	isb	sy
 8015364:	f3bf 8f4f 	dsb	sy
 8015368:	623b      	str	r3, [r7, #32]
}
 801536a:	bf00      	nop
 801536c:	e7fe      	b.n	801536c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801536e:	4b1a      	ldr	r3, [pc, #104]	; (80153d8 <xTimerGenericCommand+0x98>)
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d02a      	beq.n	80153cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015376:	68bb      	ldr	r3, [r7, #8]
 8015378:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	2b05      	cmp	r3, #5
 8015386:	dc18      	bgt.n	80153ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015388:	f7ff fe9a 	bl	80150c0 <xTaskGetSchedulerState>
 801538c:	4603      	mov	r3, r0
 801538e:	2b02      	cmp	r3, #2
 8015390:	d109      	bne.n	80153a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015392:	4b11      	ldr	r3, [pc, #68]	; (80153d8 <xTimerGenericCommand+0x98>)
 8015394:	6818      	ldr	r0, [r3, #0]
 8015396:	f107 0110 	add.w	r1, r7, #16
 801539a:	2300      	movs	r3, #0
 801539c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801539e:	f7fe f9d7 	bl	8013750 <xQueueGenericSend>
 80153a2:	6278      	str	r0, [r7, #36]	; 0x24
 80153a4:	e012      	b.n	80153cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80153a6:	4b0c      	ldr	r3, [pc, #48]	; (80153d8 <xTimerGenericCommand+0x98>)
 80153a8:	6818      	ldr	r0, [r3, #0]
 80153aa:	f107 0110 	add.w	r1, r7, #16
 80153ae:	2300      	movs	r3, #0
 80153b0:	2200      	movs	r2, #0
 80153b2:	f7fe f9cd 	bl	8013750 <xQueueGenericSend>
 80153b6:	6278      	str	r0, [r7, #36]	; 0x24
 80153b8:	e008      	b.n	80153cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80153ba:	4b07      	ldr	r3, [pc, #28]	; (80153d8 <xTimerGenericCommand+0x98>)
 80153bc:	6818      	ldr	r0, [r3, #0]
 80153be:	f107 0110 	add.w	r1, r7, #16
 80153c2:	2300      	movs	r3, #0
 80153c4:	683a      	ldr	r2, [r7, #0]
 80153c6:	f7fe fac1 	bl	801394c <xQueueGenericSendFromISR>
 80153ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80153cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3728      	adds	r7, #40	; 0x28
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	24001d38 	.word	0x24001d38

080153dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b088      	sub	sp, #32
 80153e0:	af02      	add	r7, sp, #8
 80153e2:	6078      	str	r0, [r7, #4]
 80153e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80153e6:	4b22      	ldr	r3, [pc, #136]	; (8015470 <prvProcessExpiredTimer+0x94>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	68db      	ldr	r3, [r3, #12]
 80153ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80153f0:	697b      	ldr	r3, [r7, #20]
 80153f2:	3304      	adds	r3, #4
 80153f4:	4618      	mov	r0, r3
 80153f6:	f7fe f843 	bl	8013480 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80153fa:	697b      	ldr	r3, [r7, #20]
 80153fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015400:	f003 0304 	and.w	r3, r3, #4
 8015404:	2b00      	cmp	r3, #0
 8015406:	d022      	beq.n	801544e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015408:	697b      	ldr	r3, [r7, #20]
 801540a:	699a      	ldr	r2, [r3, #24]
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	18d1      	adds	r1, r2, r3
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	683a      	ldr	r2, [r7, #0]
 8015414:	6978      	ldr	r0, [r7, #20]
 8015416:	f000 f8d1 	bl	80155bc <prvInsertTimerInActiveList>
 801541a:	4603      	mov	r3, r0
 801541c:	2b00      	cmp	r3, #0
 801541e:	d01f      	beq.n	8015460 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015420:	2300      	movs	r3, #0
 8015422:	9300      	str	r3, [sp, #0]
 8015424:	2300      	movs	r3, #0
 8015426:	687a      	ldr	r2, [r7, #4]
 8015428:	2100      	movs	r1, #0
 801542a:	6978      	ldr	r0, [r7, #20]
 801542c:	f7ff ff88 	bl	8015340 <xTimerGenericCommand>
 8015430:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015432:	693b      	ldr	r3, [r7, #16]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d113      	bne.n	8015460 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801543c:	f383 8811 	msr	BASEPRI, r3
 8015440:	f3bf 8f6f 	isb	sy
 8015444:	f3bf 8f4f 	dsb	sy
 8015448:	60fb      	str	r3, [r7, #12]
}
 801544a:	bf00      	nop
 801544c:	e7fe      	b.n	801544c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015454:	f023 0301 	bic.w	r3, r3, #1
 8015458:	b2da      	uxtb	r2, r3
 801545a:	697b      	ldr	r3, [r7, #20]
 801545c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	6a1b      	ldr	r3, [r3, #32]
 8015464:	6978      	ldr	r0, [r7, #20]
 8015466:	4798      	blx	r3
}
 8015468:	bf00      	nop
 801546a:	3718      	adds	r7, #24
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}
 8015470:	24001d30 	.word	0x24001d30

08015474 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b084      	sub	sp, #16
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801547c:	f107 0308 	add.w	r3, r7, #8
 8015480:	4618      	mov	r0, r3
 8015482:	f000 f857 	bl	8015534 <prvGetNextExpireTime>
 8015486:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	4619      	mov	r1, r3
 801548c:	68f8      	ldr	r0, [r7, #12]
 801548e:	f000 f803 	bl	8015498 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015492:	f000 f8d5 	bl	8015640 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015496:	e7f1      	b.n	801547c <prvTimerTask+0x8>

08015498 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b084      	sub	sp, #16
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
 80154a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80154a2:	f7ff f985 	bl	80147b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80154a6:	f107 0308 	add.w	r3, r7, #8
 80154aa:	4618      	mov	r0, r3
 80154ac:	f000 f866 	bl	801557c <prvSampleTimeNow>
 80154b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80154b2:	68bb      	ldr	r3, [r7, #8]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d130      	bne.n	801551a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d10a      	bne.n	80154d4 <prvProcessTimerOrBlockTask+0x3c>
 80154be:	687a      	ldr	r2, [r7, #4]
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d806      	bhi.n	80154d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80154c6:	f7ff f981 	bl	80147cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80154ca:	68f9      	ldr	r1, [r7, #12]
 80154cc:	6878      	ldr	r0, [r7, #4]
 80154ce:	f7ff ff85 	bl	80153dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80154d2:	e024      	b.n	801551e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80154d4:	683b      	ldr	r3, [r7, #0]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d008      	beq.n	80154ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80154da:	4b13      	ldr	r3, [pc, #76]	; (8015528 <prvProcessTimerOrBlockTask+0x90>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d101      	bne.n	80154e8 <prvProcessTimerOrBlockTask+0x50>
 80154e4:	2301      	movs	r3, #1
 80154e6:	e000      	b.n	80154ea <prvProcessTimerOrBlockTask+0x52>
 80154e8:	2300      	movs	r3, #0
 80154ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80154ec:	4b0f      	ldr	r3, [pc, #60]	; (801552c <prvProcessTimerOrBlockTask+0x94>)
 80154ee:	6818      	ldr	r0, [r3, #0]
 80154f0:	687a      	ldr	r2, [r7, #4]
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	1ad3      	subs	r3, r2, r3
 80154f6:	683a      	ldr	r2, [r7, #0]
 80154f8:	4619      	mov	r1, r3
 80154fa:	f7fe fd5d 	bl	8013fb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80154fe:	f7ff f965 	bl	80147cc <xTaskResumeAll>
 8015502:	4603      	mov	r3, r0
 8015504:	2b00      	cmp	r3, #0
 8015506:	d10a      	bne.n	801551e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015508:	4b09      	ldr	r3, [pc, #36]	; (8015530 <prvProcessTimerOrBlockTask+0x98>)
 801550a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801550e:	601a      	str	r2, [r3, #0]
 8015510:	f3bf 8f4f 	dsb	sy
 8015514:	f3bf 8f6f 	isb	sy
}
 8015518:	e001      	b.n	801551e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801551a:	f7ff f957 	bl	80147cc <xTaskResumeAll>
}
 801551e:	bf00      	nop
 8015520:	3710      	adds	r7, #16
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}
 8015526:	bf00      	nop
 8015528:	24001d34 	.word	0x24001d34
 801552c:	24001d38 	.word	0x24001d38
 8015530:	e000ed04 	.word	0xe000ed04

08015534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015534:	b480      	push	{r7}
 8015536:	b085      	sub	sp, #20
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801553c:	4b0e      	ldr	r3, [pc, #56]	; (8015578 <prvGetNextExpireTime+0x44>)
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d101      	bne.n	801554a <prvGetNextExpireTime+0x16>
 8015546:	2201      	movs	r2, #1
 8015548:	e000      	b.n	801554c <prvGetNextExpireTime+0x18>
 801554a:	2200      	movs	r2, #0
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d105      	bne.n	8015564 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015558:	4b07      	ldr	r3, [pc, #28]	; (8015578 <prvGetNextExpireTime+0x44>)
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	68db      	ldr	r3, [r3, #12]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	60fb      	str	r3, [r7, #12]
 8015562:	e001      	b.n	8015568 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015564:	2300      	movs	r3, #0
 8015566:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015568:	68fb      	ldr	r3, [r7, #12]
}
 801556a:	4618      	mov	r0, r3
 801556c:	3714      	adds	r7, #20
 801556e:	46bd      	mov	sp, r7
 8015570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015574:	4770      	bx	lr
 8015576:	bf00      	nop
 8015578:	24001d30 	.word	0x24001d30

0801557c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b084      	sub	sp, #16
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015584:	f7ff f9c0 	bl	8014908 <xTaskGetTickCount>
 8015588:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801558a:	4b0b      	ldr	r3, [pc, #44]	; (80155b8 <prvSampleTimeNow+0x3c>)
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	68fa      	ldr	r2, [r7, #12]
 8015590:	429a      	cmp	r2, r3
 8015592:	d205      	bcs.n	80155a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015594:	f000 f936 	bl	8015804 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	2201      	movs	r2, #1
 801559c:	601a      	str	r2, [r3, #0]
 801559e:	e002      	b.n	80155a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2200      	movs	r2, #0
 80155a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80155a6:	4a04      	ldr	r2, [pc, #16]	; (80155b8 <prvSampleTimeNow+0x3c>)
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80155ac:	68fb      	ldr	r3, [r7, #12]
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	3710      	adds	r7, #16
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}
 80155b6:	bf00      	nop
 80155b8:	24001d40 	.word	0x24001d40

080155bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b086      	sub	sp, #24
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	60f8      	str	r0, [r7, #12]
 80155c4:	60b9      	str	r1, [r7, #8]
 80155c6:	607a      	str	r2, [r7, #4]
 80155c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80155ca:	2300      	movs	r3, #0
 80155cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	68ba      	ldr	r2, [r7, #8]
 80155d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	68fa      	ldr	r2, [r7, #12]
 80155d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80155da:	68ba      	ldr	r2, [r7, #8]
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	429a      	cmp	r2, r3
 80155e0:	d812      	bhi.n	8015608 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155e2:	687a      	ldr	r2, [r7, #4]
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	1ad2      	subs	r2, r2, r3
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	699b      	ldr	r3, [r3, #24]
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d302      	bcc.n	80155f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80155f0:	2301      	movs	r3, #1
 80155f2:	617b      	str	r3, [r7, #20]
 80155f4:	e01b      	b.n	801562e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80155f6:	4b10      	ldr	r3, [pc, #64]	; (8015638 <prvInsertTimerInActiveList+0x7c>)
 80155f8:	681a      	ldr	r2, [r3, #0]
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	3304      	adds	r3, #4
 80155fe:	4619      	mov	r1, r3
 8015600:	4610      	mov	r0, r2
 8015602:	f7fd ff04 	bl	801340e <vListInsert>
 8015606:	e012      	b.n	801562e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015608:	687a      	ldr	r2, [r7, #4]
 801560a:	683b      	ldr	r3, [r7, #0]
 801560c:	429a      	cmp	r2, r3
 801560e:	d206      	bcs.n	801561e <prvInsertTimerInActiveList+0x62>
 8015610:	68ba      	ldr	r2, [r7, #8]
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	429a      	cmp	r2, r3
 8015616:	d302      	bcc.n	801561e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015618:	2301      	movs	r3, #1
 801561a:	617b      	str	r3, [r7, #20]
 801561c:	e007      	b.n	801562e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801561e:	4b07      	ldr	r3, [pc, #28]	; (801563c <prvInsertTimerInActiveList+0x80>)
 8015620:	681a      	ldr	r2, [r3, #0]
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	3304      	adds	r3, #4
 8015626:	4619      	mov	r1, r3
 8015628:	4610      	mov	r0, r2
 801562a:	f7fd fef0 	bl	801340e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801562e:	697b      	ldr	r3, [r7, #20]
}
 8015630:	4618      	mov	r0, r3
 8015632:	3718      	adds	r7, #24
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}
 8015638:	24001d34 	.word	0x24001d34
 801563c:	24001d30 	.word	0x24001d30

08015640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b08e      	sub	sp, #56	; 0x38
 8015644:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015646:	e0ca      	b.n	80157de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	2b00      	cmp	r3, #0
 801564c:	da18      	bge.n	8015680 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801564e:	1d3b      	adds	r3, r7, #4
 8015650:	3304      	adds	r3, #4
 8015652:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015656:	2b00      	cmp	r3, #0
 8015658:	d10a      	bne.n	8015670 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801565e:	f383 8811 	msr	BASEPRI, r3
 8015662:	f3bf 8f6f 	isb	sy
 8015666:	f3bf 8f4f 	dsb	sy
 801566a:	61fb      	str	r3, [r7, #28]
}
 801566c:	bf00      	nop
 801566e:	e7fe      	b.n	801566e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015676:	6850      	ldr	r0, [r2, #4]
 8015678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801567a:	6892      	ldr	r2, [r2, #8]
 801567c:	4611      	mov	r1, r2
 801567e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2b00      	cmp	r3, #0
 8015684:	f2c0 80aa 	blt.w	80157dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801568e:	695b      	ldr	r3, [r3, #20]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d004      	beq.n	801569e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015696:	3304      	adds	r3, #4
 8015698:	4618      	mov	r0, r3
 801569a:	f7fd fef1 	bl	8013480 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801569e:	463b      	mov	r3, r7
 80156a0:	4618      	mov	r0, r3
 80156a2:	f7ff ff6b 	bl	801557c <prvSampleTimeNow>
 80156a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	2b09      	cmp	r3, #9
 80156ac:	f200 8097 	bhi.w	80157de <prvProcessReceivedCommands+0x19e>
 80156b0:	a201      	add	r2, pc, #4	; (adr r2, 80156b8 <prvProcessReceivedCommands+0x78>)
 80156b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156b6:	bf00      	nop
 80156b8:	080156e1 	.word	0x080156e1
 80156bc:	080156e1 	.word	0x080156e1
 80156c0:	080156e1 	.word	0x080156e1
 80156c4:	08015755 	.word	0x08015755
 80156c8:	08015769 	.word	0x08015769
 80156cc:	080157b3 	.word	0x080157b3
 80156d0:	080156e1 	.word	0x080156e1
 80156d4:	080156e1 	.word	0x080156e1
 80156d8:	08015755 	.word	0x08015755
 80156dc:	08015769 	.word	0x08015769
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80156e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156e6:	f043 0301 	orr.w	r3, r3, #1
 80156ea:	b2da      	uxtb	r2, r3
 80156ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80156f2:	68ba      	ldr	r2, [r7, #8]
 80156f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156f6:	699b      	ldr	r3, [r3, #24]
 80156f8:	18d1      	adds	r1, r2, r3
 80156fa:	68bb      	ldr	r3, [r7, #8]
 80156fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015700:	f7ff ff5c 	bl	80155bc <prvInsertTimerInActiveList>
 8015704:	4603      	mov	r3, r0
 8015706:	2b00      	cmp	r3, #0
 8015708:	d069      	beq.n	80157de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801570c:	6a1b      	ldr	r3, [r3, #32]
 801570e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015710:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015718:	f003 0304 	and.w	r3, r3, #4
 801571c:	2b00      	cmp	r3, #0
 801571e:	d05e      	beq.n	80157de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015720:	68ba      	ldr	r2, [r7, #8]
 8015722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015724:	699b      	ldr	r3, [r3, #24]
 8015726:	441a      	add	r2, r3
 8015728:	2300      	movs	r3, #0
 801572a:	9300      	str	r3, [sp, #0]
 801572c:	2300      	movs	r3, #0
 801572e:	2100      	movs	r1, #0
 8015730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015732:	f7ff fe05 	bl	8015340 <xTimerGenericCommand>
 8015736:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015738:	6a3b      	ldr	r3, [r7, #32]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d14f      	bne.n	80157de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015742:	f383 8811 	msr	BASEPRI, r3
 8015746:	f3bf 8f6f 	isb	sy
 801574a:	f3bf 8f4f 	dsb	sy
 801574e:	61bb      	str	r3, [r7, #24]
}
 8015750:	bf00      	nop
 8015752:	e7fe      	b.n	8015752 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015756:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801575a:	f023 0301 	bic.w	r3, r3, #1
 801575e:	b2da      	uxtb	r2, r3
 8015760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015762:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015766:	e03a      	b.n	80157de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801576a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801576e:	f043 0301 	orr.w	r3, r3, #1
 8015772:	b2da      	uxtb	r2, r3
 8015774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801577a:	68ba      	ldr	r2, [r7, #8]
 801577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015782:	699b      	ldr	r3, [r3, #24]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d10a      	bne.n	801579e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801578c:	f383 8811 	msr	BASEPRI, r3
 8015790:	f3bf 8f6f 	isb	sy
 8015794:	f3bf 8f4f 	dsb	sy
 8015798:	617b      	str	r3, [r7, #20]
}
 801579a:	bf00      	nop
 801579c:	e7fe      	b.n	801579c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a0:	699a      	ldr	r2, [r3, #24]
 80157a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157a4:	18d1      	adds	r1, r2, r3
 80157a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157ac:	f7ff ff06 	bl	80155bc <prvInsertTimerInActiveList>
					break;
 80157b0:	e015      	b.n	80157de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80157b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157b8:	f003 0302 	and.w	r3, r3, #2
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d103      	bne.n	80157c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80157c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157c2:	f000 fbfd 	bl	8015fc0 <vPortFree>
 80157c6:	e00a      	b.n	80157de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80157c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157ce:	f023 0301 	bic.w	r3, r3, #1
 80157d2:	b2da      	uxtb	r2, r3
 80157d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80157da:	e000      	b.n	80157de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80157dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80157de:	4b08      	ldr	r3, [pc, #32]	; (8015800 <prvProcessReceivedCommands+0x1c0>)
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	1d39      	adds	r1, r7, #4
 80157e4:	2200      	movs	r2, #0
 80157e6:	4618      	mov	r0, r3
 80157e8:	f7fe f94c 	bl	8013a84 <xQueueReceive>
 80157ec:	4603      	mov	r3, r0
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	f47f af2a 	bne.w	8015648 <prvProcessReceivedCommands+0x8>
	}
}
 80157f4:	bf00      	nop
 80157f6:	bf00      	nop
 80157f8:	3730      	adds	r7, #48	; 0x30
 80157fa:	46bd      	mov	sp, r7
 80157fc:	bd80      	pop	{r7, pc}
 80157fe:	bf00      	nop
 8015800:	24001d38 	.word	0x24001d38

08015804 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b088      	sub	sp, #32
 8015808:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801580a:	e048      	b.n	801589e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801580c:	4b2d      	ldr	r3, [pc, #180]	; (80158c4 <prvSwitchTimerLists+0xc0>)
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	68db      	ldr	r3, [r3, #12]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015816:	4b2b      	ldr	r3, [pc, #172]	; (80158c4 <prvSwitchTimerLists+0xc0>)
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	68db      	ldr	r3, [r3, #12]
 801581c:	68db      	ldr	r3, [r3, #12]
 801581e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	3304      	adds	r3, #4
 8015824:	4618      	mov	r0, r3
 8015826:	f7fd fe2b 	bl	8013480 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	6a1b      	ldr	r3, [r3, #32]
 801582e:	68f8      	ldr	r0, [r7, #12]
 8015830:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015838:	f003 0304 	and.w	r3, r3, #4
 801583c:	2b00      	cmp	r3, #0
 801583e:	d02e      	beq.n	801589e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	699b      	ldr	r3, [r3, #24]
 8015844:	693a      	ldr	r2, [r7, #16]
 8015846:	4413      	add	r3, r2
 8015848:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801584a:	68ba      	ldr	r2, [r7, #8]
 801584c:	693b      	ldr	r3, [r7, #16]
 801584e:	429a      	cmp	r2, r3
 8015850:	d90e      	bls.n	8015870 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	68ba      	ldr	r2, [r7, #8]
 8015856:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	68fa      	ldr	r2, [r7, #12]
 801585c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801585e:	4b19      	ldr	r3, [pc, #100]	; (80158c4 <prvSwitchTimerLists+0xc0>)
 8015860:	681a      	ldr	r2, [r3, #0]
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	3304      	adds	r3, #4
 8015866:	4619      	mov	r1, r3
 8015868:	4610      	mov	r0, r2
 801586a:	f7fd fdd0 	bl	801340e <vListInsert>
 801586e:	e016      	b.n	801589e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015870:	2300      	movs	r3, #0
 8015872:	9300      	str	r3, [sp, #0]
 8015874:	2300      	movs	r3, #0
 8015876:	693a      	ldr	r2, [r7, #16]
 8015878:	2100      	movs	r1, #0
 801587a:	68f8      	ldr	r0, [r7, #12]
 801587c:	f7ff fd60 	bl	8015340 <xTimerGenericCommand>
 8015880:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d10a      	bne.n	801589e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801588c:	f383 8811 	msr	BASEPRI, r3
 8015890:	f3bf 8f6f 	isb	sy
 8015894:	f3bf 8f4f 	dsb	sy
 8015898:	603b      	str	r3, [r7, #0]
}
 801589a:	bf00      	nop
 801589c:	e7fe      	b.n	801589c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801589e:	4b09      	ldr	r3, [pc, #36]	; (80158c4 <prvSwitchTimerLists+0xc0>)
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d1b1      	bne.n	801580c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80158a8:	4b06      	ldr	r3, [pc, #24]	; (80158c4 <prvSwitchTimerLists+0xc0>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80158ae:	4b06      	ldr	r3, [pc, #24]	; (80158c8 <prvSwitchTimerLists+0xc4>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	4a04      	ldr	r2, [pc, #16]	; (80158c4 <prvSwitchTimerLists+0xc0>)
 80158b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80158b6:	4a04      	ldr	r2, [pc, #16]	; (80158c8 <prvSwitchTimerLists+0xc4>)
 80158b8:	697b      	ldr	r3, [r7, #20]
 80158ba:	6013      	str	r3, [r2, #0]
}
 80158bc:	bf00      	nop
 80158be:	3718      	adds	r7, #24
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}
 80158c4:	24001d30 	.word	0x24001d30
 80158c8:	24001d34 	.word	0x24001d34

080158cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b082      	sub	sp, #8
 80158d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80158d2:	f000 f987 	bl	8015be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80158d6:	4b15      	ldr	r3, [pc, #84]	; (801592c <prvCheckForValidListAndQueue+0x60>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d120      	bne.n	8015920 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80158de:	4814      	ldr	r0, [pc, #80]	; (8015930 <prvCheckForValidListAndQueue+0x64>)
 80158e0:	f7fd fd44 	bl	801336c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80158e4:	4813      	ldr	r0, [pc, #76]	; (8015934 <prvCheckForValidListAndQueue+0x68>)
 80158e6:	f7fd fd41 	bl	801336c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80158ea:	4b13      	ldr	r3, [pc, #76]	; (8015938 <prvCheckForValidListAndQueue+0x6c>)
 80158ec:	4a10      	ldr	r2, [pc, #64]	; (8015930 <prvCheckForValidListAndQueue+0x64>)
 80158ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80158f0:	4b12      	ldr	r3, [pc, #72]	; (801593c <prvCheckForValidListAndQueue+0x70>)
 80158f2:	4a10      	ldr	r2, [pc, #64]	; (8015934 <prvCheckForValidListAndQueue+0x68>)
 80158f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80158f6:	2300      	movs	r3, #0
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	4b11      	ldr	r3, [pc, #68]	; (8015940 <prvCheckForValidListAndQueue+0x74>)
 80158fc:	4a11      	ldr	r2, [pc, #68]	; (8015944 <prvCheckForValidListAndQueue+0x78>)
 80158fe:	2110      	movs	r1, #16
 8015900:	200a      	movs	r0, #10
 8015902:	f7fd fe4f 	bl	80135a4 <xQueueGenericCreateStatic>
 8015906:	4603      	mov	r3, r0
 8015908:	4a08      	ldr	r2, [pc, #32]	; (801592c <prvCheckForValidListAndQueue+0x60>)
 801590a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801590c:	4b07      	ldr	r3, [pc, #28]	; (801592c <prvCheckForValidListAndQueue+0x60>)
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d005      	beq.n	8015920 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015914:	4b05      	ldr	r3, [pc, #20]	; (801592c <prvCheckForValidListAndQueue+0x60>)
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	490b      	ldr	r1, [pc, #44]	; (8015948 <prvCheckForValidListAndQueue+0x7c>)
 801591a:	4618      	mov	r0, r3
 801591c:	f7fe fb22 	bl	8013f64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015920:	f000 f990 	bl	8015c44 <vPortExitCritical>
}
 8015924:	bf00      	nop
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}
 801592a:	bf00      	nop
 801592c:	24001d38 	.word	0x24001d38
 8015930:	24001d08 	.word	0x24001d08
 8015934:	24001d1c 	.word	0x24001d1c
 8015938:	24001d30 	.word	0x24001d30
 801593c:	24001d34 	.word	0x24001d34
 8015940:	24001de4 	.word	0x24001de4
 8015944:	24001d44 	.word	0x24001d44
 8015948:	08016f2c 	.word	0x08016f2c

0801594c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801594c:	b580      	push	{r7, lr}
 801594e:	b08a      	sub	sp, #40	; 0x28
 8015950:	af00      	add	r7, sp, #0
 8015952:	60f8      	str	r0, [r7, #12]
 8015954:	60b9      	str	r1, [r7, #8]
 8015956:	607a      	str	r2, [r7, #4]
 8015958:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801595a:	f06f 0301 	mvn.w	r3, #1
 801595e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015964:	68bb      	ldr	r3, [r7, #8]
 8015966:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801596c:	4b06      	ldr	r3, [pc, #24]	; (8015988 <xTimerPendFunctionCallFromISR+0x3c>)
 801596e:	6818      	ldr	r0, [r3, #0]
 8015970:	f107 0114 	add.w	r1, r7, #20
 8015974:	2300      	movs	r3, #0
 8015976:	683a      	ldr	r2, [r7, #0]
 8015978:	f7fd ffe8 	bl	801394c <xQueueGenericSendFromISR>
 801597c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015980:	4618      	mov	r0, r3
 8015982:	3728      	adds	r7, #40	; 0x28
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}
 8015988:	24001d38 	.word	0x24001d38

0801598c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801598c:	b480      	push	{r7}
 801598e:	b085      	sub	sp, #20
 8015990:	af00      	add	r7, sp, #0
 8015992:	60f8      	str	r0, [r7, #12]
 8015994:	60b9      	str	r1, [r7, #8]
 8015996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	3b04      	subs	r3, #4
 801599c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80159a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	3b04      	subs	r3, #4
 80159aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80159ac:	68bb      	ldr	r3, [r7, #8]
 80159ae:	f023 0201 	bic.w	r2, r3, #1
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	3b04      	subs	r3, #4
 80159ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80159bc:	4a0c      	ldr	r2, [pc, #48]	; (80159f0 <pxPortInitialiseStack+0x64>)
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	3b14      	subs	r3, #20
 80159c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80159c8:	687a      	ldr	r2, [r7, #4]
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	3b04      	subs	r3, #4
 80159d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	f06f 0202 	mvn.w	r2, #2
 80159da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	3b20      	subs	r3, #32
 80159e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80159e2:	68fb      	ldr	r3, [r7, #12]
}
 80159e4:	4618      	mov	r0, r3
 80159e6:	3714      	adds	r7, #20
 80159e8:	46bd      	mov	sp, r7
 80159ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ee:	4770      	bx	lr
 80159f0:	080159f5 	.word	0x080159f5

080159f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80159f4:	b480      	push	{r7}
 80159f6:	b085      	sub	sp, #20
 80159f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80159fa:	2300      	movs	r3, #0
 80159fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80159fe:	4b12      	ldr	r3, [pc, #72]	; (8015a48 <prvTaskExitError+0x54>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a06:	d00a      	beq.n	8015a1e <prvTaskExitError+0x2a>
	__asm volatile
 8015a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a0c:	f383 8811 	msr	BASEPRI, r3
 8015a10:	f3bf 8f6f 	isb	sy
 8015a14:	f3bf 8f4f 	dsb	sy
 8015a18:	60fb      	str	r3, [r7, #12]
}
 8015a1a:	bf00      	nop
 8015a1c:	e7fe      	b.n	8015a1c <prvTaskExitError+0x28>
	__asm volatile
 8015a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a22:	f383 8811 	msr	BASEPRI, r3
 8015a26:	f3bf 8f6f 	isb	sy
 8015a2a:	f3bf 8f4f 	dsb	sy
 8015a2e:	60bb      	str	r3, [r7, #8]
}
 8015a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015a32:	bf00      	nop
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d0fc      	beq.n	8015a34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015a3a:	bf00      	nop
 8015a3c:	bf00      	nop
 8015a3e:	3714      	adds	r7, #20
 8015a40:	46bd      	mov	sp, r7
 8015a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a46:	4770      	bx	lr
 8015a48:	240000a0 	.word	0x240000a0
 8015a4c:	00000000 	.word	0x00000000

08015a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015a50:	4b07      	ldr	r3, [pc, #28]	; (8015a70 <pxCurrentTCBConst2>)
 8015a52:	6819      	ldr	r1, [r3, #0]
 8015a54:	6808      	ldr	r0, [r1, #0]
 8015a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a5a:	f380 8809 	msr	PSP, r0
 8015a5e:	f3bf 8f6f 	isb	sy
 8015a62:	f04f 0000 	mov.w	r0, #0
 8015a66:	f380 8811 	msr	BASEPRI, r0
 8015a6a:	4770      	bx	lr
 8015a6c:	f3af 8000 	nop.w

08015a70 <pxCurrentTCBConst2>:
 8015a70:	24001808 	.word	0x24001808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015a74:	bf00      	nop
 8015a76:	bf00      	nop

08015a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015a78:	4808      	ldr	r0, [pc, #32]	; (8015a9c <prvPortStartFirstTask+0x24>)
 8015a7a:	6800      	ldr	r0, [r0, #0]
 8015a7c:	6800      	ldr	r0, [r0, #0]
 8015a7e:	f380 8808 	msr	MSP, r0
 8015a82:	f04f 0000 	mov.w	r0, #0
 8015a86:	f380 8814 	msr	CONTROL, r0
 8015a8a:	b662      	cpsie	i
 8015a8c:	b661      	cpsie	f
 8015a8e:	f3bf 8f4f 	dsb	sy
 8015a92:	f3bf 8f6f 	isb	sy
 8015a96:	df00      	svc	0
 8015a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015a9a:	bf00      	nop
 8015a9c:	e000ed08 	.word	0xe000ed08

08015aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b086      	sub	sp, #24
 8015aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015aa6:	4b46      	ldr	r3, [pc, #280]	; (8015bc0 <xPortStartScheduler+0x120>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	4a46      	ldr	r2, [pc, #280]	; (8015bc4 <xPortStartScheduler+0x124>)
 8015aac:	4293      	cmp	r3, r2
 8015aae:	d10a      	bne.n	8015ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8015ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ab4:	f383 8811 	msr	BASEPRI, r3
 8015ab8:	f3bf 8f6f 	isb	sy
 8015abc:	f3bf 8f4f 	dsb	sy
 8015ac0:	613b      	str	r3, [r7, #16]
}
 8015ac2:	bf00      	nop
 8015ac4:	e7fe      	b.n	8015ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015ac6:	4b3e      	ldr	r3, [pc, #248]	; (8015bc0 <xPortStartScheduler+0x120>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	4a3f      	ldr	r2, [pc, #252]	; (8015bc8 <xPortStartScheduler+0x128>)
 8015acc:	4293      	cmp	r3, r2
 8015ace:	d10a      	bne.n	8015ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8015ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ad4:	f383 8811 	msr	BASEPRI, r3
 8015ad8:	f3bf 8f6f 	isb	sy
 8015adc:	f3bf 8f4f 	dsb	sy
 8015ae0:	60fb      	str	r3, [r7, #12]
}
 8015ae2:	bf00      	nop
 8015ae4:	e7fe      	b.n	8015ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015ae6:	4b39      	ldr	r3, [pc, #228]	; (8015bcc <xPortStartScheduler+0x12c>)
 8015ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015aea:	697b      	ldr	r3, [r7, #20]
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	b2db      	uxtb	r3, r3
 8015af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015af2:	697b      	ldr	r3, [r7, #20]
 8015af4:	22ff      	movs	r2, #255	; 0xff
 8015af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	b2db      	uxtb	r3, r3
 8015afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015b00:	78fb      	ldrb	r3, [r7, #3]
 8015b02:	b2db      	uxtb	r3, r3
 8015b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015b08:	b2da      	uxtb	r2, r3
 8015b0a:	4b31      	ldr	r3, [pc, #196]	; (8015bd0 <xPortStartScheduler+0x130>)
 8015b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015b0e:	4b31      	ldr	r3, [pc, #196]	; (8015bd4 <xPortStartScheduler+0x134>)
 8015b10:	2207      	movs	r2, #7
 8015b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b14:	e009      	b.n	8015b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015b16:	4b2f      	ldr	r3, [pc, #188]	; (8015bd4 <xPortStartScheduler+0x134>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	3b01      	subs	r3, #1
 8015b1c:	4a2d      	ldr	r2, [pc, #180]	; (8015bd4 <xPortStartScheduler+0x134>)
 8015b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015b20:	78fb      	ldrb	r3, [r7, #3]
 8015b22:	b2db      	uxtb	r3, r3
 8015b24:	005b      	lsls	r3, r3, #1
 8015b26:	b2db      	uxtb	r3, r3
 8015b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b2a:	78fb      	ldrb	r3, [r7, #3]
 8015b2c:	b2db      	uxtb	r3, r3
 8015b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b32:	2b80      	cmp	r3, #128	; 0x80
 8015b34:	d0ef      	beq.n	8015b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015b36:	4b27      	ldr	r3, [pc, #156]	; (8015bd4 <xPortStartScheduler+0x134>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	f1c3 0307 	rsb	r3, r3, #7
 8015b3e:	2b04      	cmp	r3, #4
 8015b40:	d00a      	beq.n	8015b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8015b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b46:	f383 8811 	msr	BASEPRI, r3
 8015b4a:	f3bf 8f6f 	isb	sy
 8015b4e:	f3bf 8f4f 	dsb	sy
 8015b52:	60bb      	str	r3, [r7, #8]
}
 8015b54:	bf00      	nop
 8015b56:	e7fe      	b.n	8015b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015b58:	4b1e      	ldr	r3, [pc, #120]	; (8015bd4 <xPortStartScheduler+0x134>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	021b      	lsls	r3, r3, #8
 8015b5e:	4a1d      	ldr	r2, [pc, #116]	; (8015bd4 <xPortStartScheduler+0x134>)
 8015b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015b62:	4b1c      	ldr	r3, [pc, #112]	; (8015bd4 <xPortStartScheduler+0x134>)
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015b6a:	4a1a      	ldr	r2, [pc, #104]	; (8015bd4 <xPortStartScheduler+0x134>)
 8015b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	b2da      	uxtb	r2, r3
 8015b72:	697b      	ldr	r3, [r7, #20]
 8015b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015b76:	4b18      	ldr	r3, [pc, #96]	; (8015bd8 <xPortStartScheduler+0x138>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	4a17      	ldr	r2, [pc, #92]	; (8015bd8 <xPortStartScheduler+0x138>)
 8015b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015b82:	4b15      	ldr	r3, [pc, #84]	; (8015bd8 <xPortStartScheduler+0x138>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	4a14      	ldr	r2, [pc, #80]	; (8015bd8 <xPortStartScheduler+0x138>)
 8015b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015b8e:	f000 f8dd 	bl	8015d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015b92:	4b12      	ldr	r3, [pc, #72]	; (8015bdc <xPortStartScheduler+0x13c>)
 8015b94:	2200      	movs	r2, #0
 8015b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015b98:	f000 f8fc 	bl	8015d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015b9c:	4b10      	ldr	r3, [pc, #64]	; (8015be0 <xPortStartScheduler+0x140>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	4a0f      	ldr	r2, [pc, #60]	; (8015be0 <xPortStartScheduler+0x140>)
 8015ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015ba8:	f7ff ff66 	bl	8015a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015bac:	f7fe ff7e 	bl	8014aac <vTaskSwitchContext>
	prvTaskExitError();
 8015bb0:	f7ff ff20 	bl	80159f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015bb4:	2300      	movs	r3, #0
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	3718      	adds	r7, #24
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}
 8015bbe:	bf00      	nop
 8015bc0:	e000ed00 	.word	0xe000ed00
 8015bc4:	410fc271 	.word	0x410fc271
 8015bc8:	410fc270 	.word	0x410fc270
 8015bcc:	e000e400 	.word	0xe000e400
 8015bd0:	24001e34 	.word	0x24001e34
 8015bd4:	24001e38 	.word	0x24001e38
 8015bd8:	e000ed20 	.word	0xe000ed20
 8015bdc:	240000a0 	.word	0x240000a0
 8015be0:	e000ef34 	.word	0xe000ef34

08015be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015be4:	b480      	push	{r7}
 8015be6:	b083      	sub	sp, #12
 8015be8:	af00      	add	r7, sp, #0
	__asm volatile
 8015bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bee:	f383 8811 	msr	BASEPRI, r3
 8015bf2:	f3bf 8f6f 	isb	sy
 8015bf6:	f3bf 8f4f 	dsb	sy
 8015bfa:	607b      	str	r3, [r7, #4]
}
 8015bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015bfe:	4b0f      	ldr	r3, [pc, #60]	; (8015c3c <vPortEnterCritical+0x58>)
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	3301      	adds	r3, #1
 8015c04:	4a0d      	ldr	r2, [pc, #52]	; (8015c3c <vPortEnterCritical+0x58>)
 8015c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015c08:	4b0c      	ldr	r3, [pc, #48]	; (8015c3c <vPortEnterCritical+0x58>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	2b01      	cmp	r3, #1
 8015c0e:	d10f      	bne.n	8015c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015c10:	4b0b      	ldr	r3, [pc, #44]	; (8015c40 <vPortEnterCritical+0x5c>)
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	b2db      	uxtb	r3, r3
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d00a      	beq.n	8015c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8015c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c1e:	f383 8811 	msr	BASEPRI, r3
 8015c22:	f3bf 8f6f 	isb	sy
 8015c26:	f3bf 8f4f 	dsb	sy
 8015c2a:	603b      	str	r3, [r7, #0]
}
 8015c2c:	bf00      	nop
 8015c2e:	e7fe      	b.n	8015c2e <vPortEnterCritical+0x4a>
	}
}
 8015c30:	bf00      	nop
 8015c32:	370c      	adds	r7, #12
 8015c34:	46bd      	mov	sp, r7
 8015c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3a:	4770      	bx	lr
 8015c3c:	240000a0 	.word	0x240000a0
 8015c40:	e000ed04 	.word	0xe000ed04

08015c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015c44:	b480      	push	{r7}
 8015c46:	b083      	sub	sp, #12
 8015c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015c4a:	4b12      	ldr	r3, [pc, #72]	; (8015c94 <vPortExitCritical+0x50>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d10a      	bne.n	8015c68 <vPortExitCritical+0x24>
	__asm volatile
 8015c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c56:	f383 8811 	msr	BASEPRI, r3
 8015c5a:	f3bf 8f6f 	isb	sy
 8015c5e:	f3bf 8f4f 	dsb	sy
 8015c62:	607b      	str	r3, [r7, #4]
}
 8015c64:	bf00      	nop
 8015c66:	e7fe      	b.n	8015c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015c68:	4b0a      	ldr	r3, [pc, #40]	; (8015c94 <vPortExitCritical+0x50>)
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	3b01      	subs	r3, #1
 8015c6e:	4a09      	ldr	r2, [pc, #36]	; (8015c94 <vPortExitCritical+0x50>)
 8015c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015c72:	4b08      	ldr	r3, [pc, #32]	; (8015c94 <vPortExitCritical+0x50>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d105      	bne.n	8015c86 <vPortExitCritical+0x42>
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	f383 8811 	msr	BASEPRI, r3
}
 8015c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015c86:	bf00      	nop
 8015c88:	370c      	adds	r7, #12
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c90:	4770      	bx	lr
 8015c92:	bf00      	nop
 8015c94:	240000a0 	.word	0x240000a0
	...

08015ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015ca0:	f3ef 8009 	mrs	r0, PSP
 8015ca4:	f3bf 8f6f 	isb	sy
 8015ca8:	4b15      	ldr	r3, [pc, #84]	; (8015d00 <pxCurrentTCBConst>)
 8015caa:	681a      	ldr	r2, [r3, #0]
 8015cac:	f01e 0f10 	tst.w	lr, #16
 8015cb0:	bf08      	it	eq
 8015cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cba:	6010      	str	r0, [r2, #0]
 8015cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015cc4:	f380 8811 	msr	BASEPRI, r0
 8015cc8:	f3bf 8f4f 	dsb	sy
 8015ccc:	f3bf 8f6f 	isb	sy
 8015cd0:	f7fe feec 	bl	8014aac <vTaskSwitchContext>
 8015cd4:	f04f 0000 	mov.w	r0, #0
 8015cd8:	f380 8811 	msr	BASEPRI, r0
 8015cdc:	bc09      	pop	{r0, r3}
 8015cde:	6819      	ldr	r1, [r3, #0]
 8015ce0:	6808      	ldr	r0, [r1, #0]
 8015ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce6:	f01e 0f10 	tst.w	lr, #16
 8015cea:	bf08      	it	eq
 8015cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015cf0:	f380 8809 	msr	PSP, r0
 8015cf4:	f3bf 8f6f 	isb	sy
 8015cf8:	4770      	bx	lr
 8015cfa:	bf00      	nop
 8015cfc:	f3af 8000 	nop.w

08015d00 <pxCurrentTCBConst>:
 8015d00:	24001808 	.word	0x24001808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015d04:	bf00      	nop
 8015d06:	bf00      	nop

08015d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b082      	sub	sp, #8
 8015d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8015d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d12:	f383 8811 	msr	BASEPRI, r3
 8015d16:	f3bf 8f6f 	isb	sy
 8015d1a:	f3bf 8f4f 	dsb	sy
 8015d1e:	607b      	str	r3, [r7, #4]
}
 8015d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015d22:	f7fe fe01 	bl	8014928 <xTaskIncrementTick>
 8015d26:	4603      	mov	r3, r0
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d003      	beq.n	8015d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015d2c:	4b06      	ldr	r3, [pc, #24]	; (8015d48 <xPortSysTickHandler+0x40>)
 8015d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d32:	601a      	str	r2, [r3, #0]
 8015d34:	2300      	movs	r3, #0
 8015d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d38:	683b      	ldr	r3, [r7, #0]
 8015d3a:	f383 8811 	msr	BASEPRI, r3
}
 8015d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015d40:	bf00      	nop
 8015d42:	3708      	adds	r7, #8
 8015d44:	46bd      	mov	sp, r7
 8015d46:	bd80      	pop	{r7, pc}
 8015d48:	e000ed04 	.word	0xe000ed04

08015d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015d4c:	b480      	push	{r7}
 8015d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015d50:	4b0b      	ldr	r3, [pc, #44]	; (8015d80 <vPortSetupTimerInterrupt+0x34>)
 8015d52:	2200      	movs	r2, #0
 8015d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015d56:	4b0b      	ldr	r3, [pc, #44]	; (8015d84 <vPortSetupTimerInterrupt+0x38>)
 8015d58:	2200      	movs	r2, #0
 8015d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015d5c:	4b0a      	ldr	r3, [pc, #40]	; (8015d88 <vPortSetupTimerInterrupt+0x3c>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	4a0a      	ldr	r2, [pc, #40]	; (8015d8c <vPortSetupTimerInterrupt+0x40>)
 8015d62:	fba2 2303 	umull	r2, r3, r2, r3
 8015d66:	099b      	lsrs	r3, r3, #6
 8015d68:	4a09      	ldr	r2, [pc, #36]	; (8015d90 <vPortSetupTimerInterrupt+0x44>)
 8015d6a:	3b01      	subs	r3, #1
 8015d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015d6e:	4b04      	ldr	r3, [pc, #16]	; (8015d80 <vPortSetupTimerInterrupt+0x34>)
 8015d70:	2207      	movs	r2, #7
 8015d72:	601a      	str	r2, [r3, #0]
}
 8015d74:	bf00      	nop
 8015d76:	46bd      	mov	sp, r7
 8015d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d7c:	4770      	bx	lr
 8015d7e:	bf00      	nop
 8015d80:	e000e010 	.word	0xe000e010
 8015d84:	e000e018 	.word	0xe000e018
 8015d88:	24000090 	.word	0x24000090
 8015d8c:	10624dd3 	.word	0x10624dd3
 8015d90:	e000e014 	.word	0xe000e014

08015d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015da4 <vPortEnableVFP+0x10>
 8015d98:	6801      	ldr	r1, [r0, #0]
 8015d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015d9e:	6001      	str	r1, [r0, #0]
 8015da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015da2:	bf00      	nop
 8015da4:	e000ed88 	.word	0xe000ed88

08015da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015da8:	b480      	push	{r7}
 8015daa:	b085      	sub	sp, #20
 8015dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015dae:	f3ef 8305 	mrs	r3, IPSR
 8015db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	2b0f      	cmp	r3, #15
 8015db8:	d914      	bls.n	8015de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015dba:	4a17      	ldr	r2, [pc, #92]	; (8015e18 <vPortValidateInterruptPriority+0x70>)
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	4413      	add	r3, r2
 8015dc0:	781b      	ldrb	r3, [r3, #0]
 8015dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015dc4:	4b15      	ldr	r3, [pc, #84]	; (8015e1c <vPortValidateInterruptPriority+0x74>)
 8015dc6:	781b      	ldrb	r3, [r3, #0]
 8015dc8:	7afa      	ldrb	r2, [r7, #11]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d20a      	bcs.n	8015de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dd2:	f383 8811 	msr	BASEPRI, r3
 8015dd6:	f3bf 8f6f 	isb	sy
 8015dda:	f3bf 8f4f 	dsb	sy
 8015dde:	607b      	str	r3, [r7, #4]
}
 8015de0:	bf00      	nop
 8015de2:	e7fe      	b.n	8015de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015de4:	4b0e      	ldr	r3, [pc, #56]	; (8015e20 <vPortValidateInterruptPriority+0x78>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015dec:	4b0d      	ldr	r3, [pc, #52]	; (8015e24 <vPortValidateInterruptPriority+0x7c>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	429a      	cmp	r2, r3
 8015df2:	d90a      	bls.n	8015e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df8:	f383 8811 	msr	BASEPRI, r3
 8015dfc:	f3bf 8f6f 	isb	sy
 8015e00:	f3bf 8f4f 	dsb	sy
 8015e04:	603b      	str	r3, [r7, #0]
}
 8015e06:	bf00      	nop
 8015e08:	e7fe      	b.n	8015e08 <vPortValidateInterruptPriority+0x60>
	}
 8015e0a:	bf00      	nop
 8015e0c:	3714      	adds	r7, #20
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e14:	4770      	bx	lr
 8015e16:	bf00      	nop
 8015e18:	e000e3f0 	.word	0xe000e3f0
 8015e1c:	24001e34 	.word	0x24001e34
 8015e20:	e000ed0c 	.word	0xe000ed0c
 8015e24:	24001e38 	.word	0x24001e38

08015e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b08a      	sub	sp, #40	; 0x28
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015e30:	2300      	movs	r3, #0
 8015e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015e34:	f7fe fcbc 	bl	80147b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015e38:	4b5b      	ldr	r3, [pc, #364]	; (8015fa8 <pvPortMalloc+0x180>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d101      	bne.n	8015e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015e40:	f000 f920 	bl	8016084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015e44:	4b59      	ldr	r3, [pc, #356]	; (8015fac <pvPortMalloc+0x184>)
 8015e46:	681a      	ldr	r2, [r3, #0]
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	4013      	ands	r3, r2
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	f040 8093 	bne.w	8015f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d01d      	beq.n	8015e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015e58:	2208      	movs	r2, #8
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	4413      	add	r3, r2
 8015e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f003 0307 	and.w	r3, r3, #7
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d014      	beq.n	8015e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f023 0307 	bic.w	r3, r3, #7
 8015e70:	3308      	adds	r3, #8
 8015e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f003 0307 	and.w	r3, r3, #7
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d00a      	beq.n	8015e94 <pvPortMalloc+0x6c>
	__asm volatile
 8015e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e82:	f383 8811 	msr	BASEPRI, r3
 8015e86:	f3bf 8f6f 	isb	sy
 8015e8a:	f3bf 8f4f 	dsb	sy
 8015e8e:	617b      	str	r3, [r7, #20]
}
 8015e90:	bf00      	nop
 8015e92:	e7fe      	b.n	8015e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d06e      	beq.n	8015f78 <pvPortMalloc+0x150>
 8015e9a:	4b45      	ldr	r3, [pc, #276]	; (8015fb0 <pvPortMalloc+0x188>)
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	687a      	ldr	r2, [r7, #4]
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d869      	bhi.n	8015f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015ea4:	4b43      	ldr	r3, [pc, #268]	; (8015fb4 <pvPortMalloc+0x18c>)
 8015ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015ea8:	4b42      	ldr	r3, [pc, #264]	; (8015fb4 <pvPortMalloc+0x18c>)
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015eae:	e004      	b.n	8015eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ebc:	685b      	ldr	r3, [r3, #4]
 8015ebe:	687a      	ldr	r2, [r7, #4]
 8015ec0:	429a      	cmp	r2, r3
 8015ec2:	d903      	bls.n	8015ecc <pvPortMalloc+0xa4>
 8015ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d1f1      	bne.n	8015eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015ecc:	4b36      	ldr	r3, [pc, #216]	; (8015fa8 <pvPortMalloc+0x180>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ed2:	429a      	cmp	r2, r3
 8015ed4:	d050      	beq.n	8015f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015ed6:	6a3b      	ldr	r3, [r7, #32]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	2208      	movs	r2, #8
 8015edc:	4413      	add	r3, r2
 8015ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee2:	681a      	ldr	r2, [r3, #0]
 8015ee4:	6a3b      	ldr	r3, [r7, #32]
 8015ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eea:	685a      	ldr	r2, [r3, #4]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	1ad2      	subs	r2, r2, r3
 8015ef0:	2308      	movs	r3, #8
 8015ef2:	005b      	lsls	r3, r3, #1
 8015ef4:	429a      	cmp	r2, r3
 8015ef6:	d91f      	bls.n	8015f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	4413      	add	r3, r2
 8015efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f00:	69bb      	ldr	r3, [r7, #24]
 8015f02:	f003 0307 	and.w	r3, r3, #7
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d00a      	beq.n	8015f20 <pvPortMalloc+0xf8>
	__asm volatile
 8015f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f0e:	f383 8811 	msr	BASEPRI, r3
 8015f12:	f3bf 8f6f 	isb	sy
 8015f16:	f3bf 8f4f 	dsb	sy
 8015f1a:	613b      	str	r3, [r7, #16]
}
 8015f1c:	bf00      	nop
 8015f1e:	e7fe      	b.n	8015f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f22:	685a      	ldr	r2, [r3, #4]
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	1ad2      	subs	r2, r2, r3
 8015f28:	69bb      	ldr	r3, [r7, #24]
 8015f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f2e:	687a      	ldr	r2, [r7, #4]
 8015f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015f32:	69b8      	ldr	r0, [r7, #24]
 8015f34:	f000 f908 	bl	8016148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015f38:	4b1d      	ldr	r3, [pc, #116]	; (8015fb0 <pvPortMalloc+0x188>)
 8015f3a:	681a      	ldr	r2, [r3, #0]
 8015f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f3e:	685b      	ldr	r3, [r3, #4]
 8015f40:	1ad3      	subs	r3, r2, r3
 8015f42:	4a1b      	ldr	r2, [pc, #108]	; (8015fb0 <pvPortMalloc+0x188>)
 8015f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015f46:	4b1a      	ldr	r3, [pc, #104]	; (8015fb0 <pvPortMalloc+0x188>)
 8015f48:	681a      	ldr	r2, [r3, #0]
 8015f4a:	4b1b      	ldr	r3, [pc, #108]	; (8015fb8 <pvPortMalloc+0x190>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	429a      	cmp	r2, r3
 8015f50:	d203      	bcs.n	8015f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015f52:	4b17      	ldr	r3, [pc, #92]	; (8015fb0 <pvPortMalloc+0x188>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	4a18      	ldr	r2, [pc, #96]	; (8015fb8 <pvPortMalloc+0x190>)
 8015f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5c:	685a      	ldr	r2, [r3, #4]
 8015f5e:	4b13      	ldr	r3, [pc, #76]	; (8015fac <pvPortMalloc+0x184>)
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	431a      	orrs	r2, r3
 8015f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015f6e:	4b13      	ldr	r3, [pc, #76]	; (8015fbc <pvPortMalloc+0x194>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	3301      	adds	r3, #1
 8015f74:	4a11      	ldr	r2, [pc, #68]	; (8015fbc <pvPortMalloc+0x194>)
 8015f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015f78:	f7fe fc28 	bl	80147cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f7c:	69fb      	ldr	r3, [r7, #28]
 8015f7e:	f003 0307 	and.w	r3, r3, #7
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d00a      	beq.n	8015f9c <pvPortMalloc+0x174>
	__asm volatile
 8015f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f8a:	f383 8811 	msr	BASEPRI, r3
 8015f8e:	f3bf 8f6f 	isb	sy
 8015f92:	f3bf 8f4f 	dsb	sy
 8015f96:	60fb      	str	r3, [r7, #12]
}
 8015f98:	bf00      	nop
 8015f9a:	e7fe      	b.n	8015f9a <pvPortMalloc+0x172>
	return pvReturn;
 8015f9c:	69fb      	ldr	r3, [r7, #28]
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	3728      	adds	r7, #40	; 0x28
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd80      	pop	{r7, pc}
 8015fa6:	bf00      	nop
 8015fa8:	24005a44 	.word	0x24005a44
 8015fac:	24005a58 	.word	0x24005a58
 8015fb0:	24005a48 	.word	0x24005a48
 8015fb4:	24005a3c 	.word	0x24005a3c
 8015fb8:	24005a4c 	.word	0x24005a4c
 8015fbc:	24005a50 	.word	0x24005a50

08015fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b086      	sub	sp, #24
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d04d      	beq.n	801606e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015fd2:	2308      	movs	r3, #8
 8015fd4:	425b      	negs	r3, r3
 8015fd6:	697a      	ldr	r2, [r7, #20]
 8015fd8:	4413      	add	r3, r2
 8015fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015fe0:	693b      	ldr	r3, [r7, #16]
 8015fe2:	685a      	ldr	r2, [r3, #4]
 8015fe4:	4b24      	ldr	r3, [pc, #144]	; (8016078 <vPortFree+0xb8>)
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	4013      	ands	r3, r2
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d10a      	bne.n	8016004 <vPortFree+0x44>
	__asm volatile
 8015fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff2:	f383 8811 	msr	BASEPRI, r3
 8015ff6:	f3bf 8f6f 	isb	sy
 8015ffa:	f3bf 8f4f 	dsb	sy
 8015ffe:	60fb      	str	r3, [r7, #12]
}
 8016000:	bf00      	nop
 8016002:	e7fe      	b.n	8016002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016004:	693b      	ldr	r3, [r7, #16]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d00a      	beq.n	8016022 <vPortFree+0x62>
	__asm volatile
 801600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016010:	f383 8811 	msr	BASEPRI, r3
 8016014:	f3bf 8f6f 	isb	sy
 8016018:	f3bf 8f4f 	dsb	sy
 801601c:	60bb      	str	r3, [r7, #8]
}
 801601e:	bf00      	nop
 8016020:	e7fe      	b.n	8016020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	685a      	ldr	r2, [r3, #4]
 8016026:	4b14      	ldr	r3, [pc, #80]	; (8016078 <vPortFree+0xb8>)
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	4013      	ands	r3, r2
 801602c:	2b00      	cmp	r3, #0
 801602e:	d01e      	beq.n	801606e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016030:	693b      	ldr	r3, [r7, #16]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d11a      	bne.n	801606e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	685a      	ldr	r2, [r3, #4]
 801603c:	4b0e      	ldr	r3, [pc, #56]	; (8016078 <vPortFree+0xb8>)
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	43db      	mvns	r3, r3
 8016042:	401a      	ands	r2, r3
 8016044:	693b      	ldr	r3, [r7, #16]
 8016046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016048:	f7fe fbb2 	bl	80147b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	685a      	ldr	r2, [r3, #4]
 8016050:	4b0a      	ldr	r3, [pc, #40]	; (801607c <vPortFree+0xbc>)
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	4413      	add	r3, r2
 8016056:	4a09      	ldr	r2, [pc, #36]	; (801607c <vPortFree+0xbc>)
 8016058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801605a:	6938      	ldr	r0, [r7, #16]
 801605c:	f000 f874 	bl	8016148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016060:	4b07      	ldr	r3, [pc, #28]	; (8016080 <vPortFree+0xc0>)
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	3301      	adds	r3, #1
 8016066:	4a06      	ldr	r2, [pc, #24]	; (8016080 <vPortFree+0xc0>)
 8016068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801606a:	f7fe fbaf 	bl	80147cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801606e:	bf00      	nop
 8016070:	3718      	adds	r7, #24
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}
 8016076:	bf00      	nop
 8016078:	24005a58 	.word	0x24005a58
 801607c:	24005a48 	.word	0x24005a48
 8016080:	24005a54 	.word	0x24005a54

08016084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016084:	b480      	push	{r7}
 8016086:	b085      	sub	sp, #20
 8016088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801608a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801608e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016090:	4b27      	ldr	r3, [pc, #156]	; (8016130 <prvHeapInit+0xac>)
 8016092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f003 0307 	and.w	r3, r3, #7
 801609a:	2b00      	cmp	r3, #0
 801609c:	d00c      	beq.n	80160b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	3307      	adds	r3, #7
 80160a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	f023 0307 	bic.w	r3, r3, #7
 80160aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80160ac:	68ba      	ldr	r2, [r7, #8]
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	1ad3      	subs	r3, r2, r3
 80160b2:	4a1f      	ldr	r2, [pc, #124]	; (8016130 <prvHeapInit+0xac>)
 80160b4:	4413      	add	r3, r2
 80160b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80160bc:	4a1d      	ldr	r2, [pc, #116]	; (8016134 <prvHeapInit+0xb0>)
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80160c2:	4b1c      	ldr	r3, [pc, #112]	; (8016134 <prvHeapInit+0xb0>)
 80160c4:	2200      	movs	r2, #0
 80160c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	68ba      	ldr	r2, [r7, #8]
 80160cc:	4413      	add	r3, r2
 80160ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80160d0:	2208      	movs	r2, #8
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	1a9b      	subs	r3, r3, r2
 80160d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	f023 0307 	bic.w	r3, r3, #7
 80160de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	4a15      	ldr	r2, [pc, #84]	; (8016138 <prvHeapInit+0xb4>)
 80160e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80160e6:	4b14      	ldr	r3, [pc, #80]	; (8016138 <prvHeapInit+0xb4>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	2200      	movs	r2, #0
 80160ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80160ee:	4b12      	ldr	r3, [pc, #72]	; (8016138 <prvHeapInit+0xb4>)
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	2200      	movs	r2, #0
 80160f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	68fa      	ldr	r2, [r7, #12]
 80160fe:	1ad2      	subs	r2, r2, r3
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016104:	4b0c      	ldr	r3, [pc, #48]	; (8016138 <prvHeapInit+0xb4>)
 8016106:	681a      	ldr	r2, [r3, #0]
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	685b      	ldr	r3, [r3, #4]
 8016110:	4a0a      	ldr	r2, [pc, #40]	; (801613c <prvHeapInit+0xb8>)
 8016112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016114:	683b      	ldr	r3, [r7, #0]
 8016116:	685b      	ldr	r3, [r3, #4]
 8016118:	4a09      	ldr	r2, [pc, #36]	; (8016140 <prvHeapInit+0xbc>)
 801611a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801611c:	4b09      	ldr	r3, [pc, #36]	; (8016144 <prvHeapInit+0xc0>)
 801611e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016122:	601a      	str	r2, [r3, #0]
}
 8016124:	bf00      	nop
 8016126:	3714      	adds	r7, #20
 8016128:	46bd      	mov	sp, r7
 801612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612e:	4770      	bx	lr
 8016130:	24001e3c 	.word	0x24001e3c
 8016134:	24005a3c 	.word	0x24005a3c
 8016138:	24005a44 	.word	0x24005a44
 801613c:	24005a4c 	.word	0x24005a4c
 8016140:	24005a48 	.word	0x24005a48
 8016144:	24005a58 	.word	0x24005a58

08016148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016148:	b480      	push	{r7}
 801614a:	b085      	sub	sp, #20
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016150:	4b28      	ldr	r3, [pc, #160]	; (80161f4 <prvInsertBlockIntoFreeList+0xac>)
 8016152:	60fb      	str	r3, [r7, #12]
 8016154:	e002      	b.n	801615c <prvInsertBlockIntoFreeList+0x14>
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	60fb      	str	r3, [r7, #12]
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	687a      	ldr	r2, [r7, #4]
 8016162:	429a      	cmp	r2, r3
 8016164:	d8f7      	bhi.n	8016156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	68ba      	ldr	r2, [r7, #8]
 8016170:	4413      	add	r3, r2
 8016172:	687a      	ldr	r2, [r7, #4]
 8016174:	429a      	cmp	r2, r3
 8016176:	d108      	bne.n	801618a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	685a      	ldr	r2, [r3, #4]
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	685b      	ldr	r3, [r3, #4]
 8016180:	441a      	add	r2, r3
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	685b      	ldr	r3, [r3, #4]
 8016192:	68ba      	ldr	r2, [r7, #8]
 8016194:	441a      	add	r2, r3
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	429a      	cmp	r2, r3
 801619c:	d118      	bne.n	80161d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	681a      	ldr	r2, [r3, #0]
 80161a2:	4b15      	ldr	r3, [pc, #84]	; (80161f8 <prvInsertBlockIntoFreeList+0xb0>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d00d      	beq.n	80161c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	685a      	ldr	r2, [r3, #4]
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	685b      	ldr	r3, [r3, #4]
 80161b4:	441a      	add	r2, r3
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	601a      	str	r2, [r3, #0]
 80161c4:	e008      	b.n	80161d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80161c6:	4b0c      	ldr	r3, [pc, #48]	; (80161f8 <prvInsertBlockIntoFreeList+0xb0>)
 80161c8:	681a      	ldr	r2, [r3, #0]
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	601a      	str	r2, [r3, #0]
 80161ce:	e003      	b.n	80161d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	681a      	ldr	r2, [r3, #0]
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80161d8:	68fa      	ldr	r2, [r7, #12]
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	429a      	cmp	r2, r3
 80161de:	d002      	beq.n	80161e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	687a      	ldr	r2, [r7, #4]
 80161e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80161e6:	bf00      	nop
 80161e8:	3714      	adds	r7, #20
 80161ea:	46bd      	mov	sp, r7
 80161ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f0:	4770      	bx	lr
 80161f2:	bf00      	nop
 80161f4:	24005a3c 	.word	0x24005a3c
 80161f8:	24005a44 	.word	0x24005a44

080161fc <__errno>:
 80161fc:	4b01      	ldr	r3, [pc, #4]	; (8016204 <__errno+0x8>)
 80161fe:	6818      	ldr	r0, [r3, #0]
 8016200:	4770      	bx	lr
 8016202:	bf00      	nop
 8016204:	240000a4 	.word	0x240000a4

08016208 <__libc_init_array>:
 8016208:	b570      	push	{r4, r5, r6, lr}
 801620a:	4d0d      	ldr	r5, [pc, #52]	; (8016240 <__libc_init_array+0x38>)
 801620c:	4c0d      	ldr	r4, [pc, #52]	; (8016244 <__libc_init_array+0x3c>)
 801620e:	1b64      	subs	r4, r4, r5
 8016210:	10a4      	asrs	r4, r4, #2
 8016212:	2600      	movs	r6, #0
 8016214:	42a6      	cmp	r6, r4
 8016216:	d109      	bne.n	801622c <__libc_init_array+0x24>
 8016218:	4d0b      	ldr	r5, [pc, #44]	; (8016248 <__libc_init_array+0x40>)
 801621a:	4c0c      	ldr	r4, [pc, #48]	; (801624c <__libc_init_array+0x44>)
 801621c:	f000 fd3c 	bl	8016c98 <_init>
 8016220:	1b64      	subs	r4, r4, r5
 8016222:	10a4      	asrs	r4, r4, #2
 8016224:	2600      	movs	r6, #0
 8016226:	42a6      	cmp	r6, r4
 8016228:	d105      	bne.n	8016236 <__libc_init_array+0x2e>
 801622a:	bd70      	pop	{r4, r5, r6, pc}
 801622c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016230:	4798      	blx	r3
 8016232:	3601      	adds	r6, #1
 8016234:	e7ee      	b.n	8016214 <__libc_init_array+0xc>
 8016236:	f855 3b04 	ldr.w	r3, [r5], #4
 801623a:	4798      	blx	r3
 801623c:	3601      	adds	r6, #1
 801623e:	e7f2      	b.n	8016226 <__libc_init_array+0x1e>
 8016240:	08017100 	.word	0x08017100
 8016244:	08017100 	.word	0x08017100
 8016248:	08017100 	.word	0x08017100
 801624c:	08017104 	.word	0x08017104

08016250 <malloc>:
 8016250:	4b02      	ldr	r3, [pc, #8]	; (801625c <malloc+0xc>)
 8016252:	4601      	mov	r1, r0
 8016254:	6818      	ldr	r0, [r3, #0]
 8016256:	f000 b88d 	b.w	8016374 <_malloc_r>
 801625a:	bf00      	nop
 801625c:	240000a4 	.word	0x240000a4

08016260 <free>:
 8016260:	4b02      	ldr	r3, [pc, #8]	; (801626c <free+0xc>)
 8016262:	4601      	mov	r1, r0
 8016264:	6818      	ldr	r0, [r3, #0]
 8016266:	f000 b819 	b.w	801629c <_free_r>
 801626a:	bf00      	nop
 801626c:	240000a4 	.word	0x240000a4

08016270 <memcpy>:
 8016270:	440a      	add	r2, r1
 8016272:	4291      	cmp	r1, r2
 8016274:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016278:	d100      	bne.n	801627c <memcpy+0xc>
 801627a:	4770      	bx	lr
 801627c:	b510      	push	{r4, lr}
 801627e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016286:	4291      	cmp	r1, r2
 8016288:	d1f9      	bne.n	801627e <memcpy+0xe>
 801628a:	bd10      	pop	{r4, pc}

0801628c <memset>:
 801628c:	4402      	add	r2, r0
 801628e:	4603      	mov	r3, r0
 8016290:	4293      	cmp	r3, r2
 8016292:	d100      	bne.n	8016296 <memset+0xa>
 8016294:	4770      	bx	lr
 8016296:	f803 1b01 	strb.w	r1, [r3], #1
 801629a:	e7f9      	b.n	8016290 <memset+0x4>

0801629c <_free_r>:
 801629c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801629e:	2900      	cmp	r1, #0
 80162a0:	d044      	beq.n	801632c <_free_r+0x90>
 80162a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162a6:	9001      	str	r0, [sp, #4]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	f1a1 0404 	sub.w	r4, r1, #4
 80162ae:	bfb8      	it	lt
 80162b0:	18e4      	addlt	r4, r4, r3
 80162b2:	f000 fc39 	bl	8016b28 <__malloc_lock>
 80162b6:	4a1e      	ldr	r2, [pc, #120]	; (8016330 <_free_r+0x94>)
 80162b8:	9801      	ldr	r0, [sp, #4]
 80162ba:	6813      	ldr	r3, [r2, #0]
 80162bc:	b933      	cbnz	r3, 80162cc <_free_r+0x30>
 80162be:	6063      	str	r3, [r4, #4]
 80162c0:	6014      	str	r4, [r2, #0]
 80162c2:	b003      	add	sp, #12
 80162c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80162c8:	f000 bc34 	b.w	8016b34 <__malloc_unlock>
 80162cc:	42a3      	cmp	r3, r4
 80162ce:	d908      	bls.n	80162e2 <_free_r+0x46>
 80162d0:	6825      	ldr	r5, [r4, #0]
 80162d2:	1961      	adds	r1, r4, r5
 80162d4:	428b      	cmp	r3, r1
 80162d6:	bf01      	itttt	eq
 80162d8:	6819      	ldreq	r1, [r3, #0]
 80162da:	685b      	ldreq	r3, [r3, #4]
 80162dc:	1949      	addeq	r1, r1, r5
 80162de:	6021      	streq	r1, [r4, #0]
 80162e0:	e7ed      	b.n	80162be <_free_r+0x22>
 80162e2:	461a      	mov	r2, r3
 80162e4:	685b      	ldr	r3, [r3, #4]
 80162e6:	b10b      	cbz	r3, 80162ec <_free_r+0x50>
 80162e8:	42a3      	cmp	r3, r4
 80162ea:	d9fa      	bls.n	80162e2 <_free_r+0x46>
 80162ec:	6811      	ldr	r1, [r2, #0]
 80162ee:	1855      	adds	r5, r2, r1
 80162f0:	42a5      	cmp	r5, r4
 80162f2:	d10b      	bne.n	801630c <_free_r+0x70>
 80162f4:	6824      	ldr	r4, [r4, #0]
 80162f6:	4421      	add	r1, r4
 80162f8:	1854      	adds	r4, r2, r1
 80162fa:	42a3      	cmp	r3, r4
 80162fc:	6011      	str	r1, [r2, #0]
 80162fe:	d1e0      	bne.n	80162c2 <_free_r+0x26>
 8016300:	681c      	ldr	r4, [r3, #0]
 8016302:	685b      	ldr	r3, [r3, #4]
 8016304:	6053      	str	r3, [r2, #4]
 8016306:	4421      	add	r1, r4
 8016308:	6011      	str	r1, [r2, #0]
 801630a:	e7da      	b.n	80162c2 <_free_r+0x26>
 801630c:	d902      	bls.n	8016314 <_free_r+0x78>
 801630e:	230c      	movs	r3, #12
 8016310:	6003      	str	r3, [r0, #0]
 8016312:	e7d6      	b.n	80162c2 <_free_r+0x26>
 8016314:	6825      	ldr	r5, [r4, #0]
 8016316:	1961      	adds	r1, r4, r5
 8016318:	428b      	cmp	r3, r1
 801631a:	bf04      	itt	eq
 801631c:	6819      	ldreq	r1, [r3, #0]
 801631e:	685b      	ldreq	r3, [r3, #4]
 8016320:	6063      	str	r3, [r4, #4]
 8016322:	bf04      	itt	eq
 8016324:	1949      	addeq	r1, r1, r5
 8016326:	6021      	streq	r1, [r4, #0]
 8016328:	6054      	str	r4, [r2, #4]
 801632a:	e7ca      	b.n	80162c2 <_free_r+0x26>
 801632c:	b003      	add	sp, #12
 801632e:	bd30      	pop	{r4, r5, pc}
 8016330:	24005a5c 	.word	0x24005a5c

08016334 <sbrk_aligned>:
 8016334:	b570      	push	{r4, r5, r6, lr}
 8016336:	4e0e      	ldr	r6, [pc, #56]	; (8016370 <sbrk_aligned+0x3c>)
 8016338:	460c      	mov	r4, r1
 801633a:	6831      	ldr	r1, [r6, #0]
 801633c:	4605      	mov	r5, r0
 801633e:	b911      	cbnz	r1, 8016346 <sbrk_aligned+0x12>
 8016340:	f000 f902 	bl	8016548 <_sbrk_r>
 8016344:	6030      	str	r0, [r6, #0]
 8016346:	4621      	mov	r1, r4
 8016348:	4628      	mov	r0, r5
 801634a:	f000 f8fd 	bl	8016548 <_sbrk_r>
 801634e:	1c43      	adds	r3, r0, #1
 8016350:	d00a      	beq.n	8016368 <sbrk_aligned+0x34>
 8016352:	1cc4      	adds	r4, r0, #3
 8016354:	f024 0403 	bic.w	r4, r4, #3
 8016358:	42a0      	cmp	r0, r4
 801635a:	d007      	beq.n	801636c <sbrk_aligned+0x38>
 801635c:	1a21      	subs	r1, r4, r0
 801635e:	4628      	mov	r0, r5
 8016360:	f000 f8f2 	bl	8016548 <_sbrk_r>
 8016364:	3001      	adds	r0, #1
 8016366:	d101      	bne.n	801636c <sbrk_aligned+0x38>
 8016368:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801636c:	4620      	mov	r0, r4
 801636e:	bd70      	pop	{r4, r5, r6, pc}
 8016370:	24005a60 	.word	0x24005a60

08016374 <_malloc_r>:
 8016374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016378:	1ccd      	adds	r5, r1, #3
 801637a:	f025 0503 	bic.w	r5, r5, #3
 801637e:	3508      	adds	r5, #8
 8016380:	2d0c      	cmp	r5, #12
 8016382:	bf38      	it	cc
 8016384:	250c      	movcc	r5, #12
 8016386:	2d00      	cmp	r5, #0
 8016388:	4607      	mov	r7, r0
 801638a:	db01      	blt.n	8016390 <_malloc_r+0x1c>
 801638c:	42a9      	cmp	r1, r5
 801638e:	d905      	bls.n	801639c <_malloc_r+0x28>
 8016390:	230c      	movs	r3, #12
 8016392:	603b      	str	r3, [r7, #0]
 8016394:	2600      	movs	r6, #0
 8016396:	4630      	mov	r0, r6
 8016398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801639c:	4e2e      	ldr	r6, [pc, #184]	; (8016458 <_malloc_r+0xe4>)
 801639e:	f000 fbc3 	bl	8016b28 <__malloc_lock>
 80163a2:	6833      	ldr	r3, [r6, #0]
 80163a4:	461c      	mov	r4, r3
 80163a6:	bb34      	cbnz	r4, 80163f6 <_malloc_r+0x82>
 80163a8:	4629      	mov	r1, r5
 80163aa:	4638      	mov	r0, r7
 80163ac:	f7ff ffc2 	bl	8016334 <sbrk_aligned>
 80163b0:	1c43      	adds	r3, r0, #1
 80163b2:	4604      	mov	r4, r0
 80163b4:	d14d      	bne.n	8016452 <_malloc_r+0xde>
 80163b6:	6834      	ldr	r4, [r6, #0]
 80163b8:	4626      	mov	r6, r4
 80163ba:	2e00      	cmp	r6, #0
 80163bc:	d140      	bne.n	8016440 <_malloc_r+0xcc>
 80163be:	6823      	ldr	r3, [r4, #0]
 80163c0:	4631      	mov	r1, r6
 80163c2:	4638      	mov	r0, r7
 80163c4:	eb04 0803 	add.w	r8, r4, r3
 80163c8:	f000 f8be 	bl	8016548 <_sbrk_r>
 80163cc:	4580      	cmp	r8, r0
 80163ce:	d13a      	bne.n	8016446 <_malloc_r+0xd2>
 80163d0:	6821      	ldr	r1, [r4, #0]
 80163d2:	3503      	adds	r5, #3
 80163d4:	1a6d      	subs	r5, r5, r1
 80163d6:	f025 0503 	bic.w	r5, r5, #3
 80163da:	3508      	adds	r5, #8
 80163dc:	2d0c      	cmp	r5, #12
 80163de:	bf38      	it	cc
 80163e0:	250c      	movcc	r5, #12
 80163e2:	4629      	mov	r1, r5
 80163e4:	4638      	mov	r0, r7
 80163e6:	f7ff ffa5 	bl	8016334 <sbrk_aligned>
 80163ea:	3001      	adds	r0, #1
 80163ec:	d02b      	beq.n	8016446 <_malloc_r+0xd2>
 80163ee:	6823      	ldr	r3, [r4, #0]
 80163f0:	442b      	add	r3, r5
 80163f2:	6023      	str	r3, [r4, #0]
 80163f4:	e00e      	b.n	8016414 <_malloc_r+0xa0>
 80163f6:	6822      	ldr	r2, [r4, #0]
 80163f8:	1b52      	subs	r2, r2, r5
 80163fa:	d41e      	bmi.n	801643a <_malloc_r+0xc6>
 80163fc:	2a0b      	cmp	r2, #11
 80163fe:	d916      	bls.n	801642e <_malloc_r+0xba>
 8016400:	1961      	adds	r1, r4, r5
 8016402:	42a3      	cmp	r3, r4
 8016404:	6025      	str	r5, [r4, #0]
 8016406:	bf18      	it	ne
 8016408:	6059      	strne	r1, [r3, #4]
 801640a:	6863      	ldr	r3, [r4, #4]
 801640c:	bf08      	it	eq
 801640e:	6031      	streq	r1, [r6, #0]
 8016410:	5162      	str	r2, [r4, r5]
 8016412:	604b      	str	r3, [r1, #4]
 8016414:	4638      	mov	r0, r7
 8016416:	f104 060b 	add.w	r6, r4, #11
 801641a:	f000 fb8b 	bl	8016b34 <__malloc_unlock>
 801641e:	f026 0607 	bic.w	r6, r6, #7
 8016422:	1d23      	adds	r3, r4, #4
 8016424:	1af2      	subs	r2, r6, r3
 8016426:	d0b6      	beq.n	8016396 <_malloc_r+0x22>
 8016428:	1b9b      	subs	r3, r3, r6
 801642a:	50a3      	str	r3, [r4, r2]
 801642c:	e7b3      	b.n	8016396 <_malloc_r+0x22>
 801642e:	6862      	ldr	r2, [r4, #4]
 8016430:	42a3      	cmp	r3, r4
 8016432:	bf0c      	ite	eq
 8016434:	6032      	streq	r2, [r6, #0]
 8016436:	605a      	strne	r2, [r3, #4]
 8016438:	e7ec      	b.n	8016414 <_malloc_r+0xa0>
 801643a:	4623      	mov	r3, r4
 801643c:	6864      	ldr	r4, [r4, #4]
 801643e:	e7b2      	b.n	80163a6 <_malloc_r+0x32>
 8016440:	4634      	mov	r4, r6
 8016442:	6876      	ldr	r6, [r6, #4]
 8016444:	e7b9      	b.n	80163ba <_malloc_r+0x46>
 8016446:	230c      	movs	r3, #12
 8016448:	603b      	str	r3, [r7, #0]
 801644a:	4638      	mov	r0, r7
 801644c:	f000 fb72 	bl	8016b34 <__malloc_unlock>
 8016450:	e7a1      	b.n	8016396 <_malloc_r+0x22>
 8016452:	6025      	str	r5, [r4, #0]
 8016454:	e7de      	b.n	8016414 <_malloc_r+0xa0>
 8016456:	bf00      	nop
 8016458:	24005a5c 	.word	0x24005a5c

0801645c <_puts_r>:
 801645c:	b570      	push	{r4, r5, r6, lr}
 801645e:	460e      	mov	r6, r1
 8016460:	4605      	mov	r5, r0
 8016462:	b118      	cbz	r0, 801646c <_puts_r+0x10>
 8016464:	6983      	ldr	r3, [r0, #24]
 8016466:	b90b      	cbnz	r3, 801646c <_puts_r+0x10>
 8016468:	f000 fa58 	bl	801691c <__sinit>
 801646c:	69ab      	ldr	r3, [r5, #24]
 801646e:	68ac      	ldr	r4, [r5, #8]
 8016470:	b913      	cbnz	r3, 8016478 <_puts_r+0x1c>
 8016472:	4628      	mov	r0, r5
 8016474:	f000 fa52 	bl	801691c <__sinit>
 8016478:	4b2c      	ldr	r3, [pc, #176]	; (801652c <_puts_r+0xd0>)
 801647a:	429c      	cmp	r4, r3
 801647c:	d120      	bne.n	80164c0 <_puts_r+0x64>
 801647e:	686c      	ldr	r4, [r5, #4]
 8016480:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016482:	07db      	lsls	r3, r3, #31
 8016484:	d405      	bmi.n	8016492 <_puts_r+0x36>
 8016486:	89a3      	ldrh	r3, [r4, #12]
 8016488:	0598      	lsls	r0, r3, #22
 801648a:	d402      	bmi.n	8016492 <_puts_r+0x36>
 801648c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801648e:	f000 fae3 	bl	8016a58 <__retarget_lock_acquire_recursive>
 8016492:	89a3      	ldrh	r3, [r4, #12]
 8016494:	0719      	lsls	r1, r3, #28
 8016496:	d51d      	bpl.n	80164d4 <_puts_r+0x78>
 8016498:	6923      	ldr	r3, [r4, #16]
 801649a:	b1db      	cbz	r3, 80164d4 <_puts_r+0x78>
 801649c:	3e01      	subs	r6, #1
 801649e:	68a3      	ldr	r3, [r4, #8]
 80164a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80164a4:	3b01      	subs	r3, #1
 80164a6:	60a3      	str	r3, [r4, #8]
 80164a8:	bb39      	cbnz	r1, 80164fa <_puts_r+0x9e>
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	da38      	bge.n	8016520 <_puts_r+0xc4>
 80164ae:	4622      	mov	r2, r4
 80164b0:	210a      	movs	r1, #10
 80164b2:	4628      	mov	r0, r5
 80164b4:	f000 f858 	bl	8016568 <__swbuf_r>
 80164b8:	3001      	adds	r0, #1
 80164ba:	d011      	beq.n	80164e0 <_puts_r+0x84>
 80164bc:	250a      	movs	r5, #10
 80164be:	e011      	b.n	80164e4 <_puts_r+0x88>
 80164c0:	4b1b      	ldr	r3, [pc, #108]	; (8016530 <_puts_r+0xd4>)
 80164c2:	429c      	cmp	r4, r3
 80164c4:	d101      	bne.n	80164ca <_puts_r+0x6e>
 80164c6:	68ac      	ldr	r4, [r5, #8]
 80164c8:	e7da      	b.n	8016480 <_puts_r+0x24>
 80164ca:	4b1a      	ldr	r3, [pc, #104]	; (8016534 <_puts_r+0xd8>)
 80164cc:	429c      	cmp	r4, r3
 80164ce:	bf08      	it	eq
 80164d0:	68ec      	ldreq	r4, [r5, #12]
 80164d2:	e7d5      	b.n	8016480 <_puts_r+0x24>
 80164d4:	4621      	mov	r1, r4
 80164d6:	4628      	mov	r0, r5
 80164d8:	f000 f898 	bl	801660c <__swsetup_r>
 80164dc:	2800      	cmp	r0, #0
 80164de:	d0dd      	beq.n	801649c <_puts_r+0x40>
 80164e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80164e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80164e6:	07da      	lsls	r2, r3, #31
 80164e8:	d405      	bmi.n	80164f6 <_puts_r+0x9a>
 80164ea:	89a3      	ldrh	r3, [r4, #12]
 80164ec:	059b      	lsls	r3, r3, #22
 80164ee:	d402      	bmi.n	80164f6 <_puts_r+0x9a>
 80164f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80164f2:	f000 fab2 	bl	8016a5a <__retarget_lock_release_recursive>
 80164f6:	4628      	mov	r0, r5
 80164f8:	bd70      	pop	{r4, r5, r6, pc}
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	da04      	bge.n	8016508 <_puts_r+0xac>
 80164fe:	69a2      	ldr	r2, [r4, #24]
 8016500:	429a      	cmp	r2, r3
 8016502:	dc06      	bgt.n	8016512 <_puts_r+0xb6>
 8016504:	290a      	cmp	r1, #10
 8016506:	d004      	beq.n	8016512 <_puts_r+0xb6>
 8016508:	6823      	ldr	r3, [r4, #0]
 801650a:	1c5a      	adds	r2, r3, #1
 801650c:	6022      	str	r2, [r4, #0]
 801650e:	7019      	strb	r1, [r3, #0]
 8016510:	e7c5      	b.n	801649e <_puts_r+0x42>
 8016512:	4622      	mov	r2, r4
 8016514:	4628      	mov	r0, r5
 8016516:	f000 f827 	bl	8016568 <__swbuf_r>
 801651a:	3001      	adds	r0, #1
 801651c:	d1bf      	bne.n	801649e <_puts_r+0x42>
 801651e:	e7df      	b.n	80164e0 <_puts_r+0x84>
 8016520:	6823      	ldr	r3, [r4, #0]
 8016522:	250a      	movs	r5, #10
 8016524:	1c5a      	adds	r2, r3, #1
 8016526:	6022      	str	r2, [r4, #0]
 8016528:	701d      	strb	r5, [r3, #0]
 801652a:	e7db      	b.n	80164e4 <_puts_r+0x88>
 801652c:	080170b8 	.word	0x080170b8
 8016530:	080170d8 	.word	0x080170d8
 8016534:	08017098 	.word	0x08017098

08016538 <puts>:
 8016538:	4b02      	ldr	r3, [pc, #8]	; (8016544 <puts+0xc>)
 801653a:	4601      	mov	r1, r0
 801653c:	6818      	ldr	r0, [r3, #0]
 801653e:	f7ff bf8d 	b.w	801645c <_puts_r>
 8016542:	bf00      	nop
 8016544:	240000a4 	.word	0x240000a4

08016548 <_sbrk_r>:
 8016548:	b538      	push	{r3, r4, r5, lr}
 801654a:	4d06      	ldr	r5, [pc, #24]	; (8016564 <_sbrk_r+0x1c>)
 801654c:	2300      	movs	r3, #0
 801654e:	4604      	mov	r4, r0
 8016550:	4608      	mov	r0, r1
 8016552:	602b      	str	r3, [r5, #0]
 8016554:	f7ed f994 	bl	8003880 <_sbrk>
 8016558:	1c43      	adds	r3, r0, #1
 801655a:	d102      	bne.n	8016562 <_sbrk_r+0x1a>
 801655c:	682b      	ldr	r3, [r5, #0]
 801655e:	b103      	cbz	r3, 8016562 <_sbrk_r+0x1a>
 8016560:	6023      	str	r3, [r4, #0]
 8016562:	bd38      	pop	{r3, r4, r5, pc}
 8016564:	24005a68 	.word	0x24005a68

08016568 <__swbuf_r>:
 8016568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801656a:	460e      	mov	r6, r1
 801656c:	4614      	mov	r4, r2
 801656e:	4605      	mov	r5, r0
 8016570:	b118      	cbz	r0, 801657a <__swbuf_r+0x12>
 8016572:	6983      	ldr	r3, [r0, #24]
 8016574:	b90b      	cbnz	r3, 801657a <__swbuf_r+0x12>
 8016576:	f000 f9d1 	bl	801691c <__sinit>
 801657a:	4b21      	ldr	r3, [pc, #132]	; (8016600 <__swbuf_r+0x98>)
 801657c:	429c      	cmp	r4, r3
 801657e:	d12b      	bne.n	80165d8 <__swbuf_r+0x70>
 8016580:	686c      	ldr	r4, [r5, #4]
 8016582:	69a3      	ldr	r3, [r4, #24]
 8016584:	60a3      	str	r3, [r4, #8]
 8016586:	89a3      	ldrh	r3, [r4, #12]
 8016588:	071a      	lsls	r2, r3, #28
 801658a:	d52f      	bpl.n	80165ec <__swbuf_r+0x84>
 801658c:	6923      	ldr	r3, [r4, #16]
 801658e:	b36b      	cbz	r3, 80165ec <__swbuf_r+0x84>
 8016590:	6923      	ldr	r3, [r4, #16]
 8016592:	6820      	ldr	r0, [r4, #0]
 8016594:	1ac0      	subs	r0, r0, r3
 8016596:	6963      	ldr	r3, [r4, #20]
 8016598:	b2f6      	uxtb	r6, r6
 801659a:	4283      	cmp	r3, r0
 801659c:	4637      	mov	r7, r6
 801659e:	dc04      	bgt.n	80165aa <__swbuf_r+0x42>
 80165a0:	4621      	mov	r1, r4
 80165a2:	4628      	mov	r0, r5
 80165a4:	f000 f926 	bl	80167f4 <_fflush_r>
 80165a8:	bb30      	cbnz	r0, 80165f8 <__swbuf_r+0x90>
 80165aa:	68a3      	ldr	r3, [r4, #8]
 80165ac:	3b01      	subs	r3, #1
 80165ae:	60a3      	str	r3, [r4, #8]
 80165b0:	6823      	ldr	r3, [r4, #0]
 80165b2:	1c5a      	adds	r2, r3, #1
 80165b4:	6022      	str	r2, [r4, #0]
 80165b6:	701e      	strb	r6, [r3, #0]
 80165b8:	6963      	ldr	r3, [r4, #20]
 80165ba:	3001      	adds	r0, #1
 80165bc:	4283      	cmp	r3, r0
 80165be:	d004      	beq.n	80165ca <__swbuf_r+0x62>
 80165c0:	89a3      	ldrh	r3, [r4, #12]
 80165c2:	07db      	lsls	r3, r3, #31
 80165c4:	d506      	bpl.n	80165d4 <__swbuf_r+0x6c>
 80165c6:	2e0a      	cmp	r6, #10
 80165c8:	d104      	bne.n	80165d4 <__swbuf_r+0x6c>
 80165ca:	4621      	mov	r1, r4
 80165cc:	4628      	mov	r0, r5
 80165ce:	f000 f911 	bl	80167f4 <_fflush_r>
 80165d2:	b988      	cbnz	r0, 80165f8 <__swbuf_r+0x90>
 80165d4:	4638      	mov	r0, r7
 80165d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165d8:	4b0a      	ldr	r3, [pc, #40]	; (8016604 <__swbuf_r+0x9c>)
 80165da:	429c      	cmp	r4, r3
 80165dc:	d101      	bne.n	80165e2 <__swbuf_r+0x7a>
 80165de:	68ac      	ldr	r4, [r5, #8]
 80165e0:	e7cf      	b.n	8016582 <__swbuf_r+0x1a>
 80165e2:	4b09      	ldr	r3, [pc, #36]	; (8016608 <__swbuf_r+0xa0>)
 80165e4:	429c      	cmp	r4, r3
 80165e6:	bf08      	it	eq
 80165e8:	68ec      	ldreq	r4, [r5, #12]
 80165ea:	e7ca      	b.n	8016582 <__swbuf_r+0x1a>
 80165ec:	4621      	mov	r1, r4
 80165ee:	4628      	mov	r0, r5
 80165f0:	f000 f80c 	bl	801660c <__swsetup_r>
 80165f4:	2800      	cmp	r0, #0
 80165f6:	d0cb      	beq.n	8016590 <__swbuf_r+0x28>
 80165f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80165fc:	e7ea      	b.n	80165d4 <__swbuf_r+0x6c>
 80165fe:	bf00      	nop
 8016600:	080170b8 	.word	0x080170b8
 8016604:	080170d8 	.word	0x080170d8
 8016608:	08017098 	.word	0x08017098

0801660c <__swsetup_r>:
 801660c:	4b32      	ldr	r3, [pc, #200]	; (80166d8 <__swsetup_r+0xcc>)
 801660e:	b570      	push	{r4, r5, r6, lr}
 8016610:	681d      	ldr	r5, [r3, #0]
 8016612:	4606      	mov	r6, r0
 8016614:	460c      	mov	r4, r1
 8016616:	b125      	cbz	r5, 8016622 <__swsetup_r+0x16>
 8016618:	69ab      	ldr	r3, [r5, #24]
 801661a:	b913      	cbnz	r3, 8016622 <__swsetup_r+0x16>
 801661c:	4628      	mov	r0, r5
 801661e:	f000 f97d 	bl	801691c <__sinit>
 8016622:	4b2e      	ldr	r3, [pc, #184]	; (80166dc <__swsetup_r+0xd0>)
 8016624:	429c      	cmp	r4, r3
 8016626:	d10f      	bne.n	8016648 <__swsetup_r+0x3c>
 8016628:	686c      	ldr	r4, [r5, #4]
 801662a:	89a3      	ldrh	r3, [r4, #12]
 801662c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016630:	0719      	lsls	r1, r3, #28
 8016632:	d42c      	bmi.n	801668e <__swsetup_r+0x82>
 8016634:	06dd      	lsls	r5, r3, #27
 8016636:	d411      	bmi.n	801665c <__swsetup_r+0x50>
 8016638:	2309      	movs	r3, #9
 801663a:	6033      	str	r3, [r6, #0]
 801663c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016640:	81a3      	strh	r3, [r4, #12]
 8016642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016646:	e03e      	b.n	80166c6 <__swsetup_r+0xba>
 8016648:	4b25      	ldr	r3, [pc, #148]	; (80166e0 <__swsetup_r+0xd4>)
 801664a:	429c      	cmp	r4, r3
 801664c:	d101      	bne.n	8016652 <__swsetup_r+0x46>
 801664e:	68ac      	ldr	r4, [r5, #8]
 8016650:	e7eb      	b.n	801662a <__swsetup_r+0x1e>
 8016652:	4b24      	ldr	r3, [pc, #144]	; (80166e4 <__swsetup_r+0xd8>)
 8016654:	429c      	cmp	r4, r3
 8016656:	bf08      	it	eq
 8016658:	68ec      	ldreq	r4, [r5, #12]
 801665a:	e7e6      	b.n	801662a <__swsetup_r+0x1e>
 801665c:	0758      	lsls	r0, r3, #29
 801665e:	d512      	bpl.n	8016686 <__swsetup_r+0x7a>
 8016660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016662:	b141      	cbz	r1, 8016676 <__swsetup_r+0x6a>
 8016664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016668:	4299      	cmp	r1, r3
 801666a:	d002      	beq.n	8016672 <__swsetup_r+0x66>
 801666c:	4630      	mov	r0, r6
 801666e:	f7ff fe15 	bl	801629c <_free_r>
 8016672:	2300      	movs	r3, #0
 8016674:	6363      	str	r3, [r4, #52]	; 0x34
 8016676:	89a3      	ldrh	r3, [r4, #12]
 8016678:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801667c:	81a3      	strh	r3, [r4, #12]
 801667e:	2300      	movs	r3, #0
 8016680:	6063      	str	r3, [r4, #4]
 8016682:	6923      	ldr	r3, [r4, #16]
 8016684:	6023      	str	r3, [r4, #0]
 8016686:	89a3      	ldrh	r3, [r4, #12]
 8016688:	f043 0308 	orr.w	r3, r3, #8
 801668c:	81a3      	strh	r3, [r4, #12]
 801668e:	6923      	ldr	r3, [r4, #16]
 8016690:	b94b      	cbnz	r3, 80166a6 <__swsetup_r+0x9a>
 8016692:	89a3      	ldrh	r3, [r4, #12]
 8016694:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801669c:	d003      	beq.n	80166a6 <__swsetup_r+0x9a>
 801669e:	4621      	mov	r1, r4
 80166a0:	4630      	mov	r0, r6
 80166a2:	f000 fa01 	bl	8016aa8 <__smakebuf_r>
 80166a6:	89a0      	ldrh	r0, [r4, #12]
 80166a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80166ac:	f010 0301 	ands.w	r3, r0, #1
 80166b0:	d00a      	beq.n	80166c8 <__swsetup_r+0xbc>
 80166b2:	2300      	movs	r3, #0
 80166b4:	60a3      	str	r3, [r4, #8]
 80166b6:	6963      	ldr	r3, [r4, #20]
 80166b8:	425b      	negs	r3, r3
 80166ba:	61a3      	str	r3, [r4, #24]
 80166bc:	6923      	ldr	r3, [r4, #16]
 80166be:	b943      	cbnz	r3, 80166d2 <__swsetup_r+0xc6>
 80166c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80166c4:	d1ba      	bne.n	801663c <__swsetup_r+0x30>
 80166c6:	bd70      	pop	{r4, r5, r6, pc}
 80166c8:	0781      	lsls	r1, r0, #30
 80166ca:	bf58      	it	pl
 80166cc:	6963      	ldrpl	r3, [r4, #20]
 80166ce:	60a3      	str	r3, [r4, #8]
 80166d0:	e7f4      	b.n	80166bc <__swsetup_r+0xb0>
 80166d2:	2000      	movs	r0, #0
 80166d4:	e7f7      	b.n	80166c6 <__swsetup_r+0xba>
 80166d6:	bf00      	nop
 80166d8:	240000a4 	.word	0x240000a4
 80166dc:	080170b8 	.word	0x080170b8
 80166e0:	080170d8 	.word	0x080170d8
 80166e4:	08017098 	.word	0x08017098

080166e8 <__sflush_r>:
 80166e8:	898a      	ldrh	r2, [r1, #12]
 80166ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166ee:	4605      	mov	r5, r0
 80166f0:	0710      	lsls	r0, r2, #28
 80166f2:	460c      	mov	r4, r1
 80166f4:	d458      	bmi.n	80167a8 <__sflush_r+0xc0>
 80166f6:	684b      	ldr	r3, [r1, #4]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	dc05      	bgt.n	8016708 <__sflush_r+0x20>
 80166fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80166fe:	2b00      	cmp	r3, #0
 8016700:	dc02      	bgt.n	8016708 <__sflush_r+0x20>
 8016702:	2000      	movs	r0, #0
 8016704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801670a:	2e00      	cmp	r6, #0
 801670c:	d0f9      	beq.n	8016702 <__sflush_r+0x1a>
 801670e:	2300      	movs	r3, #0
 8016710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016714:	682f      	ldr	r7, [r5, #0]
 8016716:	602b      	str	r3, [r5, #0]
 8016718:	d032      	beq.n	8016780 <__sflush_r+0x98>
 801671a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801671c:	89a3      	ldrh	r3, [r4, #12]
 801671e:	075a      	lsls	r2, r3, #29
 8016720:	d505      	bpl.n	801672e <__sflush_r+0x46>
 8016722:	6863      	ldr	r3, [r4, #4]
 8016724:	1ac0      	subs	r0, r0, r3
 8016726:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016728:	b10b      	cbz	r3, 801672e <__sflush_r+0x46>
 801672a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801672c:	1ac0      	subs	r0, r0, r3
 801672e:	2300      	movs	r3, #0
 8016730:	4602      	mov	r2, r0
 8016732:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016734:	6a21      	ldr	r1, [r4, #32]
 8016736:	4628      	mov	r0, r5
 8016738:	47b0      	blx	r6
 801673a:	1c43      	adds	r3, r0, #1
 801673c:	89a3      	ldrh	r3, [r4, #12]
 801673e:	d106      	bne.n	801674e <__sflush_r+0x66>
 8016740:	6829      	ldr	r1, [r5, #0]
 8016742:	291d      	cmp	r1, #29
 8016744:	d82c      	bhi.n	80167a0 <__sflush_r+0xb8>
 8016746:	4a2a      	ldr	r2, [pc, #168]	; (80167f0 <__sflush_r+0x108>)
 8016748:	40ca      	lsrs	r2, r1
 801674a:	07d6      	lsls	r6, r2, #31
 801674c:	d528      	bpl.n	80167a0 <__sflush_r+0xb8>
 801674e:	2200      	movs	r2, #0
 8016750:	6062      	str	r2, [r4, #4]
 8016752:	04d9      	lsls	r1, r3, #19
 8016754:	6922      	ldr	r2, [r4, #16]
 8016756:	6022      	str	r2, [r4, #0]
 8016758:	d504      	bpl.n	8016764 <__sflush_r+0x7c>
 801675a:	1c42      	adds	r2, r0, #1
 801675c:	d101      	bne.n	8016762 <__sflush_r+0x7a>
 801675e:	682b      	ldr	r3, [r5, #0]
 8016760:	b903      	cbnz	r3, 8016764 <__sflush_r+0x7c>
 8016762:	6560      	str	r0, [r4, #84]	; 0x54
 8016764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016766:	602f      	str	r7, [r5, #0]
 8016768:	2900      	cmp	r1, #0
 801676a:	d0ca      	beq.n	8016702 <__sflush_r+0x1a>
 801676c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016770:	4299      	cmp	r1, r3
 8016772:	d002      	beq.n	801677a <__sflush_r+0x92>
 8016774:	4628      	mov	r0, r5
 8016776:	f7ff fd91 	bl	801629c <_free_r>
 801677a:	2000      	movs	r0, #0
 801677c:	6360      	str	r0, [r4, #52]	; 0x34
 801677e:	e7c1      	b.n	8016704 <__sflush_r+0x1c>
 8016780:	6a21      	ldr	r1, [r4, #32]
 8016782:	2301      	movs	r3, #1
 8016784:	4628      	mov	r0, r5
 8016786:	47b0      	blx	r6
 8016788:	1c41      	adds	r1, r0, #1
 801678a:	d1c7      	bne.n	801671c <__sflush_r+0x34>
 801678c:	682b      	ldr	r3, [r5, #0]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d0c4      	beq.n	801671c <__sflush_r+0x34>
 8016792:	2b1d      	cmp	r3, #29
 8016794:	d001      	beq.n	801679a <__sflush_r+0xb2>
 8016796:	2b16      	cmp	r3, #22
 8016798:	d101      	bne.n	801679e <__sflush_r+0xb6>
 801679a:	602f      	str	r7, [r5, #0]
 801679c:	e7b1      	b.n	8016702 <__sflush_r+0x1a>
 801679e:	89a3      	ldrh	r3, [r4, #12]
 80167a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167a4:	81a3      	strh	r3, [r4, #12]
 80167a6:	e7ad      	b.n	8016704 <__sflush_r+0x1c>
 80167a8:	690f      	ldr	r7, [r1, #16]
 80167aa:	2f00      	cmp	r7, #0
 80167ac:	d0a9      	beq.n	8016702 <__sflush_r+0x1a>
 80167ae:	0793      	lsls	r3, r2, #30
 80167b0:	680e      	ldr	r6, [r1, #0]
 80167b2:	bf08      	it	eq
 80167b4:	694b      	ldreq	r3, [r1, #20]
 80167b6:	600f      	str	r7, [r1, #0]
 80167b8:	bf18      	it	ne
 80167ba:	2300      	movne	r3, #0
 80167bc:	eba6 0807 	sub.w	r8, r6, r7
 80167c0:	608b      	str	r3, [r1, #8]
 80167c2:	f1b8 0f00 	cmp.w	r8, #0
 80167c6:	dd9c      	ble.n	8016702 <__sflush_r+0x1a>
 80167c8:	6a21      	ldr	r1, [r4, #32]
 80167ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80167cc:	4643      	mov	r3, r8
 80167ce:	463a      	mov	r2, r7
 80167d0:	4628      	mov	r0, r5
 80167d2:	47b0      	blx	r6
 80167d4:	2800      	cmp	r0, #0
 80167d6:	dc06      	bgt.n	80167e6 <__sflush_r+0xfe>
 80167d8:	89a3      	ldrh	r3, [r4, #12]
 80167da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167de:	81a3      	strh	r3, [r4, #12]
 80167e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167e4:	e78e      	b.n	8016704 <__sflush_r+0x1c>
 80167e6:	4407      	add	r7, r0
 80167e8:	eba8 0800 	sub.w	r8, r8, r0
 80167ec:	e7e9      	b.n	80167c2 <__sflush_r+0xda>
 80167ee:	bf00      	nop
 80167f0:	20400001 	.word	0x20400001

080167f4 <_fflush_r>:
 80167f4:	b538      	push	{r3, r4, r5, lr}
 80167f6:	690b      	ldr	r3, [r1, #16]
 80167f8:	4605      	mov	r5, r0
 80167fa:	460c      	mov	r4, r1
 80167fc:	b913      	cbnz	r3, 8016804 <_fflush_r+0x10>
 80167fe:	2500      	movs	r5, #0
 8016800:	4628      	mov	r0, r5
 8016802:	bd38      	pop	{r3, r4, r5, pc}
 8016804:	b118      	cbz	r0, 801680e <_fflush_r+0x1a>
 8016806:	6983      	ldr	r3, [r0, #24]
 8016808:	b90b      	cbnz	r3, 801680e <_fflush_r+0x1a>
 801680a:	f000 f887 	bl	801691c <__sinit>
 801680e:	4b14      	ldr	r3, [pc, #80]	; (8016860 <_fflush_r+0x6c>)
 8016810:	429c      	cmp	r4, r3
 8016812:	d11b      	bne.n	801684c <_fflush_r+0x58>
 8016814:	686c      	ldr	r4, [r5, #4]
 8016816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d0ef      	beq.n	80167fe <_fflush_r+0xa>
 801681e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016820:	07d0      	lsls	r0, r2, #31
 8016822:	d404      	bmi.n	801682e <_fflush_r+0x3a>
 8016824:	0599      	lsls	r1, r3, #22
 8016826:	d402      	bmi.n	801682e <_fflush_r+0x3a>
 8016828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801682a:	f000 f915 	bl	8016a58 <__retarget_lock_acquire_recursive>
 801682e:	4628      	mov	r0, r5
 8016830:	4621      	mov	r1, r4
 8016832:	f7ff ff59 	bl	80166e8 <__sflush_r>
 8016836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016838:	07da      	lsls	r2, r3, #31
 801683a:	4605      	mov	r5, r0
 801683c:	d4e0      	bmi.n	8016800 <_fflush_r+0xc>
 801683e:	89a3      	ldrh	r3, [r4, #12]
 8016840:	059b      	lsls	r3, r3, #22
 8016842:	d4dd      	bmi.n	8016800 <_fflush_r+0xc>
 8016844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016846:	f000 f908 	bl	8016a5a <__retarget_lock_release_recursive>
 801684a:	e7d9      	b.n	8016800 <_fflush_r+0xc>
 801684c:	4b05      	ldr	r3, [pc, #20]	; (8016864 <_fflush_r+0x70>)
 801684e:	429c      	cmp	r4, r3
 8016850:	d101      	bne.n	8016856 <_fflush_r+0x62>
 8016852:	68ac      	ldr	r4, [r5, #8]
 8016854:	e7df      	b.n	8016816 <_fflush_r+0x22>
 8016856:	4b04      	ldr	r3, [pc, #16]	; (8016868 <_fflush_r+0x74>)
 8016858:	429c      	cmp	r4, r3
 801685a:	bf08      	it	eq
 801685c:	68ec      	ldreq	r4, [r5, #12]
 801685e:	e7da      	b.n	8016816 <_fflush_r+0x22>
 8016860:	080170b8 	.word	0x080170b8
 8016864:	080170d8 	.word	0x080170d8
 8016868:	08017098 	.word	0x08017098

0801686c <std>:
 801686c:	2300      	movs	r3, #0
 801686e:	b510      	push	{r4, lr}
 8016870:	4604      	mov	r4, r0
 8016872:	e9c0 3300 	strd	r3, r3, [r0]
 8016876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801687a:	6083      	str	r3, [r0, #8]
 801687c:	8181      	strh	r1, [r0, #12]
 801687e:	6643      	str	r3, [r0, #100]	; 0x64
 8016880:	81c2      	strh	r2, [r0, #14]
 8016882:	6183      	str	r3, [r0, #24]
 8016884:	4619      	mov	r1, r3
 8016886:	2208      	movs	r2, #8
 8016888:	305c      	adds	r0, #92	; 0x5c
 801688a:	f7ff fcff 	bl	801628c <memset>
 801688e:	4b05      	ldr	r3, [pc, #20]	; (80168a4 <std+0x38>)
 8016890:	6263      	str	r3, [r4, #36]	; 0x24
 8016892:	4b05      	ldr	r3, [pc, #20]	; (80168a8 <std+0x3c>)
 8016894:	62a3      	str	r3, [r4, #40]	; 0x28
 8016896:	4b05      	ldr	r3, [pc, #20]	; (80168ac <std+0x40>)
 8016898:	62e3      	str	r3, [r4, #44]	; 0x2c
 801689a:	4b05      	ldr	r3, [pc, #20]	; (80168b0 <std+0x44>)
 801689c:	6224      	str	r4, [r4, #32]
 801689e:	6323      	str	r3, [r4, #48]	; 0x30
 80168a0:	bd10      	pop	{r4, pc}
 80168a2:	bf00      	nop
 80168a4:	08016b41 	.word	0x08016b41
 80168a8:	08016b63 	.word	0x08016b63
 80168ac:	08016b9b 	.word	0x08016b9b
 80168b0:	08016bbf 	.word	0x08016bbf

080168b4 <_cleanup_r>:
 80168b4:	4901      	ldr	r1, [pc, #4]	; (80168bc <_cleanup_r+0x8>)
 80168b6:	f000 b8af 	b.w	8016a18 <_fwalk_reent>
 80168ba:	bf00      	nop
 80168bc:	080167f5 	.word	0x080167f5

080168c0 <__sfmoreglue>:
 80168c0:	b570      	push	{r4, r5, r6, lr}
 80168c2:	2268      	movs	r2, #104	; 0x68
 80168c4:	1e4d      	subs	r5, r1, #1
 80168c6:	4355      	muls	r5, r2
 80168c8:	460e      	mov	r6, r1
 80168ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80168ce:	f7ff fd51 	bl	8016374 <_malloc_r>
 80168d2:	4604      	mov	r4, r0
 80168d4:	b140      	cbz	r0, 80168e8 <__sfmoreglue+0x28>
 80168d6:	2100      	movs	r1, #0
 80168d8:	e9c0 1600 	strd	r1, r6, [r0]
 80168dc:	300c      	adds	r0, #12
 80168de:	60a0      	str	r0, [r4, #8]
 80168e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80168e4:	f7ff fcd2 	bl	801628c <memset>
 80168e8:	4620      	mov	r0, r4
 80168ea:	bd70      	pop	{r4, r5, r6, pc}

080168ec <__sfp_lock_acquire>:
 80168ec:	4801      	ldr	r0, [pc, #4]	; (80168f4 <__sfp_lock_acquire+0x8>)
 80168ee:	f000 b8b3 	b.w	8016a58 <__retarget_lock_acquire_recursive>
 80168f2:	bf00      	nop
 80168f4:	24005a65 	.word	0x24005a65

080168f8 <__sfp_lock_release>:
 80168f8:	4801      	ldr	r0, [pc, #4]	; (8016900 <__sfp_lock_release+0x8>)
 80168fa:	f000 b8ae 	b.w	8016a5a <__retarget_lock_release_recursive>
 80168fe:	bf00      	nop
 8016900:	24005a65 	.word	0x24005a65

08016904 <__sinit_lock_acquire>:
 8016904:	4801      	ldr	r0, [pc, #4]	; (801690c <__sinit_lock_acquire+0x8>)
 8016906:	f000 b8a7 	b.w	8016a58 <__retarget_lock_acquire_recursive>
 801690a:	bf00      	nop
 801690c:	24005a66 	.word	0x24005a66

08016910 <__sinit_lock_release>:
 8016910:	4801      	ldr	r0, [pc, #4]	; (8016918 <__sinit_lock_release+0x8>)
 8016912:	f000 b8a2 	b.w	8016a5a <__retarget_lock_release_recursive>
 8016916:	bf00      	nop
 8016918:	24005a66 	.word	0x24005a66

0801691c <__sinit>:
 801691c:	b510      	push	{r4, lr}
 801691e:	4604      	mov	r4, r0
 8016920:	f7ff fff0 	bl	8016904 <__sinit_lock_acquire>
 8016924:	69a3      	ldr	r3, [r4, #24]
 8016926:	b11b      	cbz	r3, 8016930 <__sinit+0x14>
 8016928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801692c:	f7ff bff0 	b.w	8016910 <__sinit_lock_release>
 8016930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016934:	6523      	str	r3, [r4, #80]	; 0x50
 8016936:	4b13      	ldr	r3, [pc, #76]	; (8016984 <__sinit+0x68>)
 8016938:	4a13      	ldr	r2, [pc, #76]	; (8016988 <__sinit+0x6c>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	62a2      	str	r2, [r4, #40]	; 0x28
 801693e:	42a3      	cmp	r3, r4
 8016940:	bf04      	itt	eq
 8016942:	2301      	moveq	r3, #1
 8016944:	61a3      	streq	r3, [r4, #24]
 8016946:	4620      	mov	r0, r4
 8016948:	f000 f820 	bl	801698c <__sfp>
 801694c:	6060      	str	r0, [r4, #4]
 801694e:	4620      	mov	r0, r4
 8016950:	f000 f81c 	bl	801698c <__sfp>
 8016954:	60a0      	str	r0, [r4, #8]
 8016956:	4620      	mov	r0, r4
 8016958:	f000 f818 	bl	801698c <__sfp>
 801695c:	2200      	movs	r2, #0
 801695e:	60e0      	str	r0, [r4, #12]
 8016960:	2104      	movs	r1, #4
 8016962:	6860      	ldr	r0, [r4, #4]
 8016964:	f7ff ff82 	bl	801686c <std>
 8016968:	68a0      	ldr	r0, [r4, #8]
 801696a:	2201      	movs	r2, #1
 801696c:	2109      	movs	r1, #9
 801696e:	f7ff ff7d 	bl	801686c <std>
 8016972:	68e0      	ldr	r0, [r4, #12]
 8016974:	2202      	movs	r2, #2
 8016976:	2112      	movs	r1, #18
 8016978:	f7ff ff78 	bl	801686c <std>
 801697c:	2301      	movs	r3, #1
 801697e:	61a3      	str	r3, [r4, #24]
 8016980:	e7d2      	b.n	8016928 <__sinit+0xc>
 8016982:	bf00      	nop
 8016984:	08017094 	.word	0x08017094
 8016988:	080168b5 	.word	0x080168b5

0801698c <__sfp>:
 801698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801698e:	4607      	mov	r7, r0
 8016990:	f7ff ffac 	bl	80168ec <__sfp_lock_acquire>
 8016994:	4b1e      	ldr	r3, [pc, #120]	; (8016a10 <__sfp+0x84>)
 8016996:	681e      	ldr	r6, [r3, #0]
 8016998:	69b3      	ldr	r3, [r6, #24]
 801699a:	b913      	cbnz	r3, 80169a2 <__sfp+0x16>
 801699c:	4630      	mov	r0, r6
 801699e:	f7ff ffbd 	bl	801691c <__sinit>
 80169a2:	3648      	adds	r6, #72	; 0x48
 80169a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80169a8:	3b01      	subs	r3, #1
 80169aa:	d503      	bpl.n	80169b4 <__sfp+0x28>
 80169ac:	6833      	ldr	r3, [r6, #0]
 80169ae:	b30b      	cbz	r3, 80169f4 <__sfp+0x68>
 80169b0:	6836      	ldr	r6, [r6, #0]
 80169b2:	e7f7      	b.n	80169a4 <__sfp+0x18>
 80169b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80169b8:	b9d5      	cbnz	r5, 80169f0 <__sfp+0x64>
 80169ba:	4b16      	ldr	r3, [pc, #88]	; (8016a14 <__sfp+0x88>)
 80169bc:	60e3      	str	r3, [r4, #12]
 80169be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80169c2:	6665      	str	r5, [r4, #100]	; 0x64
 80169c4:	f000 f847 	bl	8016a56 <__retarget_lock_init_recursive>
 80169c8:	f7ff ff96 	bl	80168f8 <__sfp_lock_release>
 80169cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80169d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80169d4:	6025      	str	r5, [r4, #0]
 80169d6:	61a5      	str	r5, [r4, #24]
 80169d8:	2208      	movs	r2, #8
 80169da:	4629      	mov	r1, r5
 80169dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80169e0:	f7ff fc54 	bl	801628c <memset>
 80169e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80169e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80169ec:	4620      	mov	r0, r4
 80169ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169f0:	3468      	adds	r4, #104	; 0x68
 80169f2:	e7d9      	b.n	80169a8 <__sfp+0x1c>
 80169f4:	2104      	movs	r1, #4
 80169f6:	4638      	mov	r0, r7
 80169f8:	f7ff ff62 	bl	80168c0 <__sfmoreglue>
 80169fc:	4604      	mov	r4, r0
 80169fe:	6030      	str	r0, [r6, #0]
 8016a00:	2800      	cmp	r0, #0
 8016a02:	d1d5      	bne.n	80169b0 <__sfp+0x24>
 8016a04:	f7ff ff78 	bl	80168f8 <__sfp_lock_release>
 8016a08:	230c      	movs	r3, #12
 8016a0a:	603b      	str	r3, [r7, #0]
 8016a0c:	e7ee      	b.n	80169ec <__sfp+0x60>
 8016a0e:	bf00      	nop
 8016a10:	08017094 	.word	0x08017094
 8016a14:	ffff0001 	.word	0xffff0001

08016a18 <_fwalk_reent>:
 8016a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a1c:	4606      	mov	r6, r0
 8016a1e:	4688      	mov	r8, r1
 8016a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016a24:	2700      	movs	r7, #0
 8016a26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016a2a:	f1b9 0901 	subs.w	r9, r9, #1
 8016a2e:	d505      	bpl.n	8016a3c <_fwalk_reent+0x24>
 8016a30:	6824      	ldr	r4, [r4, #0]
 8016a32:	2c00      	cmp	r4, #0
 8016a34:	d1f7      	bne.n	8016a26 <_fwalk_reent+0xe>
 8016a36:	4638      	mov	r0, r7
 8016a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a3c:	89ab      	ldrh	r3, [r5, #12]
 8016a3e:	2b01      	cmp	r3, #1
 8016a40:	d907      	bls.n	8016a52 <_fwalk_reent+0x3a>
 8016a42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016a46:	3301      	adds	r3, #1
 8016a48:	d003      	beq.n	8016a52 <_fwalk_reent+0x3a>
 8016a4a:	4629      	mov	r1, r5
 8016a4c:	4630      	mov	r0, r6
 8016a4e:	47c0      	blx	r8
 8016a50:	4307      	orrs	r7, r0
 8016a52:	3568      	adds	r5, #104	; 0x68
 8016a54:	e7e9      	b.n	8016a2a <_fwalk_reent+0x12>

08016a56 <__retarget_lock_init_recursive>:
 8016a56:	4770      	bx	lr

08016a58 <__retarget_lock_acquire_recursive>:
 8016a58:	4770      	bx	lr

08016a5a <__retarget_lock_release_recursive>:
 8016a5a:	4770      	bx	lr

08016a5c <__swhatbuf_r>:
 8016a5c:	b570      	push	{r4, r5, r6, lr}
 8016a5e:	460e      	mov	r6, r1
 8016a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a64:	2900      	cmp	r1, #0
 8016a66:	b096      	sub	sp, #88	; 0x58
 8016a68:	4614      	mov	r4, r2
 8016a6a:	461d      	mov	r5, r3
 8016a6c:	da08      	bge.n	8016a80 <__swhatbuf_r+0x24>
 8016a6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016a72:	2200      	movs	r2, #0
 8016a74:	602a      	str	r2, [r5, #0]
 8016a76:	061a      	lsls	r2, r3, #24
 8016a78:	d410      	bmi.n	8016a9c <__swhatbuf_r+0x40>
 8016a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a7e:	e00e      	b.n	8016a9e <__swhatbuf_r+0x42>
 8016a80:	466a      	mov	r2, sp
 8016a82:	f000 f8c3 	bl	8016c0c <_fstat_r>
 8016a86:	2800      	cmp	r0, #0
 8016a88:	dbf1      	blt.n	8016a6e <__swhatbuf_r+0x12>
 8016a8a:	9a01      	ldr	r2, [sp, #4]
 8016a8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016a90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016a94:	425a      	negs	r2, r3
 8016a96:	415a      	adcs	r2, r3
 8016a98:	602a      	str	r2, [r5, #0]
 8016a9a:	e7ee      	b.n	8016a7a <__swhatbuf_r+0x1e>
 8016a9c:	2340      	movs	r3, #64	; 0x40
 8016a9e:	2000      	movs	r0, #0
 8016aa0:	6023      	str	r3, [r4, #0]
 8016aa2:	b016      	add	sp, #88	; 0x58
 8016aa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08016aa8 <__smakebuf_r>:
 8016aa8:	898b      	ldrh	r3, [r1, #12]
 8016aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016aac:	079d      	lsls	r5, r3, #30
 8016aae:	4606      	mov	r6, r0
 8016ab0:	460c      	mov	r4, r1
 8016ab2:	d507      	bpl.n	8016ac4 <__smakebuf_r+0x1c>
 8016ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016ab8:	6023      	str	r3, [r4, #0]
 8016aba:	6123      	str	r3, [r4, #16]
 8016abc:	2301      	movs	r3, #1
 8016abe:	6163      	str	r3, [r4, #20]
 8016ac0:	b002      	add	sp, #8
 8016ac2:	bd70      	pop	{r4, r5, r6, pc}
 8016ac4:	ab01      	add	r3, sp, #4
 8016ac6:	466a      	mov	r2, sp
 8016ac8:	f7ff ffc8 	bl	8016a5c <__swhatbuf_r>
 8016acc:	9900      	ldr	r1, [sp, #0]
 8016ace:	4605      	mov	r5, r0
 8016ad0:	4630      	mov	r0, r6
 8016ad2:	f7ff fc4f 	bl	8016374 <_malloc_r>
 8016ad6:	b948      	cbnz	r0, 8016aec <__smakebuf_r+0x44>
 8016ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016adc:	059a      	lsls	r2, r3, #22
 8016ade:	d4ef      	bmi.n	8016ac0 <__smakebuf_r+0x18>
 8016ae0:	f023 0303 	bic.w	r3, r3, #3
 8016ae4:	f043 0302 	orr.w	r3, r3, #2
 8016ae8:	81a3      	strh	r3, [r4, #12]
 8016aea:	e7e3      	b.n	8016ab4 <__smakebuf_r+0xc>
 8016aec:	4b0d      	ldr	r3, [pc, #52]	; (8016b24 <__smakebuf_r+0x7c>)
 8016aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8016af0:	89a3      	ldrh	r3, [r4, #12]
 8016af2:	6020      	str	r0, [r4, #0]
 8016af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016af8:	81a3      	strh	r3, [r4, #12]
 8016afa:	9b00      	ldr	r3, [sp, #0]
 8016afc:	6163      	str	r3, [r4, #20]
 8016afe:	9b01      	ldr	r3, [sp, #4]
 8016b00:	6120      	str	r0, [r4, #16]
 8016b02:	b15b      	cbz	r3, 8016b1c <__smakebuf_r+0x74>
 8016b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b08:	4630      	mov	r0, r6
 8016b0a:	f000 f891 	bl	8016c30 <_isatty_r>
 8016b0e:	b128      	cbz	r0, 8016b1c <__smakebuf_r+0x74>
 8016b10:	89a3      	ldrh	r3, [r4, #12]
 8016b12:	f023 0303 	bic.w	r3, r3, #3
 8016b16:	f043 0301 	orr.w	r3, r3, #1
 8016b1a:	81a3      	strh	r3, [r4, #12]
 8016b1c:	89a0      	ldrh	r0, [r4, #12]
 8016b1e:	4305      	orrs	r5, r0
 8016b20:	81a5      	strh	r5, [r4, #12]
 8016b22:	e7cd      	b.n	8016ac0 <__smakebuf_r+0x18>
 8016b24:	080168b5 	.word	0x080168b5

08016b28 <__malloc_lock>:
 8016b28:	4801      	ldr	r0, [pc, #4]	; (8016b30 <__malloc_lock+0x8>)
 8016b2a:	f7ff bf95 	b.w	8016a58 <__retarget_lock_acquire_recursive>
 8016b2e:	bf00      	nop
 8016b30:	24005a64 	.word	0x24005a64

08016b34 <__malloc_unlock>:
 8016b34:	4801      	ldr	r0, [pc, #4]	; (8016b3c <__malloc_unlock+0x8>)
 8016b36:	f7ff bf90 	b.w	8016a5a <__retarget_lock_release_recursive>
 8016b3a:	bf00      	nop
 8016b3c:	24005a64 	.word	0x24005a64

08016b40 <__sread>:
 8016b40:	b510      	push	{r4, lr}
 8016b42:	460c      	mov	r4, r1
 8016b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b48:	f000 f894 	bl	8016c74 <_read_r>
 8016b4c:	2800      	cmp	r0, #0
 8016b4e:	bfab      	itete	ge
 8016b50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016b52:	89a3      	ldrhlt	r3, [r4, #12]
 8016b54:	181b      	addge	r3, r3, r0
 8016b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016b5a:	bfac      	ite	ge
 8016b5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016b5e:	81a3      	strhlt	r3, [r4, #12]
 8016b60:	bd10      	pop	{r4, pc}

08016b62 <__swrite>:
 8016b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b66:	461f      	mov	r7, r3
 8016b68:	898b      	ldrh	r3, [r1, #12]
 8016b6a:	05db      	lsls	r3, r3, #23
 8016b6c:	4605      	mov	r5, r0
 8016b6e:	460c      	mov	r4, r1
 8016b70:	4616      	mov	r6, r2
 8016b72:	d505      	bpl.n	8016b80 <__swrite+0x1e>
 8016b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b78:	2302      	movs	r3, #2
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	f000 f868 	bl	8016c50 <_lseek_r>
 8016b80:	89a3      	ldrh	r3, [r4, #12]
 8016b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016b8a:	81a3      	strh	r3, [r4, #12]
 8016b8c:	4632      	mov	r2, r6
 8016b8e:	463b      	mov	r3, r7
 8016b90:	4628      	mov	r0, r5
 8016b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b96:	f000 b817 	b.w	8016bc8 <_write_r>

08016b9a <__sseek>:
 8016b9a:	b510      	push	{r4, lr}
 8016b9c:	460c      	mov	r4, r1
 8016b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ba2:	f000 f855 	bl	8016c50 <_lseek_r>
 8016ba6:	1c43      	adds	r3, r0, #1
 8016ba8:	89a3      	ldrh	r3, [r4, #12]
 8016baa:	bf15      	itete	ne
 8016bac:	6560      	strne	r0, [r4, #84]	; 0x54
 8016bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016bb6:	81a3      	strheq	r3, [r4, #12]
 8016bb8:	bf18      	it	ne
 8016bba:	81a3      	strhne	r3, [r4, #12]
 8016bbc:	bd10      	pop	{r4, pc}

08016bbe <__sclose>:
 8016bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bc2:	f000 b813 	b.w	8016bec <_close_r>
	...

08016bc8 <_write_r>:
 8016bc8:	b538      	push	{r3, r4, r5, lr}
 8016bca:	4d07      	ldr	r5, [pc, #28]	; (8016be8 <_write_r+0x20>)
 8016bcc:	4604      	mov	r4, r0
 8016bce:	4608      	mov	r0, r1
 8016bd0:	4611      	mov	r1, r2
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	602a      	str	r2, [r5, #0]
 8016bd6:	461a      	mov	r2, r3
 8016bd8:	f7ec fe01 	bl	80037de <_write>
 8016bdc:	1c43      	adds	r3, r0, #1
 8016bde:	d102      	bne.n	8016be6 <_write_r+0x1e>
 8016be0:	682b      	ldr	r3, [r5, #0]
 8016be2:	b103      	cbz	r3, 8016be6 <_write_r+0x1e>
 8016be4:	6023      	str	r3, [r4, #0]
 8016be6:	bd38      	pop	{r3, r4, r5, pc}
 8016be8:	24005a68 	.word	0x24005a68

08016bec <_close_r>:
 8016bec:	b538      	push	{r3, r4, r5, lr}
 8016bee:	4d06      	ldr	r5, [pc, #24]	; (8016c08 <_close_r+0x1c>)
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	4604      	mov	r4, r0
 8016bf4:	4608      	mov	r0, r1
 8016bf6:	602b      	str	r3, [r5, #0]
 8016bf8:	f7ec fe0d 	bl	8003816 <_close>
 8016bfc:	1c43      	adds	r3, r0, #1
 8016bfe:	d102      	bne.n	8016c06 <_close_r+0x1a>
 8016c00:	682b      	ldr	r3, [r5, #0]
 8016c02:	b103      	cbz	r3, 8016c06 <_close_r+0x1a>
 8016c04:	6023      	str	r3, [r4, #0]
 8016c06:	bd38      	pop	{r3, r4, r5, pc}
 8016c08:	24005a68 	.word	0x24005a68

08016c0c <_fstat_r>:
 8016c0c:	b538      	push	{r3, r4, r5, lr}
 8016c0e:	4d07      	ldr	r5, [pc, #28]	; (8016c2c <_fstat_r+0x20>)
 8016c10:	2300      	movs	r3, #0
 8016c12:	4604      	mov	r4, r0
 8016c14:	4608      	mov	r0, r1
 8016c16:	4611      	mov	r1, r2
 8016c18:	602b      	str	r3, [r5, #0]
 8016c1a:	f7ec fe08 	bl	800382e <_fstat>
 8016c1e:	1c43      	adds	r3, r0, #1
 8016c20:	d102      	bne.n	8016c28 <_fstat_r+0x1c>
 8016c22:	682b      	ldr	r3, [r5, #0]
 8016c24:	b103      	cbz	r3, 8016c28 <_fstat_r+0x1c>
 8016c26:	6023      	str	r3, [r4, #0]
 8016c28:	bd38      	pop	{r3, r4, r5, pc}
 8016c2a:	bf00      	nop
 8016c2c:	24005a68 	.word	0x24005a68

08016c30 <_isatty_r>:
 8016c30:	b538      	push	{r3, r4, r5, lr}
 8016c32:	4d06      	ldr	r5, [pc, #24]	; (8016c4c <_isatty_r+0x1c>)
 8016c34:	2300      	movs	r3, #0
 8016c36:	4604      	mov	r4, r0
 8016c38:	4608      	mov	r0, r1
 8016c3a:	602b      	str	r3, [r5, #0]
 8016c3c:	f7ec fe07 	bl	800384e <_isatty>
 8016c40:	1c43      	adds	r3, r0, #1
 8016c42:	d102      	bne.n	8016c4a <_isatty_r+0x1a>
 8016c44:	682b      	ldr	r3, [r5, #0]
 8016c46:	b103      	cbz	r3, 8016c4a <_isatty_r+0x1a>
 8016c48:	6023      	str	r3, [r4, #0]
 8016c4a:	bd38      	pop	{r3, r4, r5, pc}
 8016c4c:	24005a68 	.word	0x24005a68

08016c50 <_lseek_r>:
 8016c50:	b538      	push	{r3, r4, r5, lr}
 8016c52:	4d07      	ldr	r5, [pc, #28]	; (8016c70 <_lseek_r+0x20>)
 8016c54:	4604      	mov	r4, r0
 8016c56:	4608      	mov	r0, r1
 8016c58:	4611      	mov	r1, r2
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	602a      	str	r2, [r5, #0]
 8016c5e:	461a      	mov	r2, r3
 8016c60:	f7ec fe00 	bl	8003864 <_lseek>
 8016c64:	1c43      	adds	r3, r0, #1
 8016c66:	d102      	bne.n	8016c6e <_lseek_r+0x1e>
 8016c68:	682b      	ldr	r3, [r5, #0]
 8016c6a:	b103      	cbz	r3, 8016c6e <_lseek_r+0x1e>
 8016c6c:	6023      	str	r3, [r4, #0]
 8016c6e:	bd38      	pop	{r3, r4, r5, pc}
 8016c70:	24005a68 	.word	0x24005a68

08016c74 <_read_r>:
 8016c74:	b538      	push	{r3, r4, r5, lr}
 8016c76:	4d07      	ldr	r5, [pc, #28]	; (8016c94 <_read_r+0x20>)
 8016c78:	4604      	mov	r4, r0
 8016c7a:	4608      	mov	r0, r1
 8016c7c:	4611      	mov	r1, r2
 8016c7e:	2200      	movs	r2, #0
 8016c80:	602a      	str	r2, [r5, #0]
 8016c82:	461a      	mov	r2, r3
 8016c84:	f7ec fd8e 	bl	80037a4 <_read>
 8016c88:	1c43      	adds	r3, r0, #1
 8016c8a:	d102      	bne.n	8016c92 <_read_r+0x1e>
 8016c8c:	682b      	ldr	r3, [r5, #0]
 8016c8e:	b103      	cbz	r3, 8016c92 <_read_r+0x1e>
 8016c90:	6023      	str	r3, [r4, #0]
 8016c92:	bd38      	pop	{r3, r4, r5, pc}
 8016c94:	24005a68 	.word	0x24005a68

08016c98 <_init>:
 8016c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c9a:	bf00      	nop
 8016c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c9e:	bc08      	pop	{r3}
 8016ca0:	469e      	mov	lr, r3
 8016ca2:	4770      	bx	lr

08016ca4 <_fini>:
 8016ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ca6:	bf00      	nop
 8016ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016caa:	bc08      	pop	{r3}
 8016cac:	469e      	mov	lr, r3
 8016cae:	4770      	bx	lr
